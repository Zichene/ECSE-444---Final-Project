
WiFi_HTTP_Server.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dfa8  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000139c8  0800e168  0800e168  0001e168  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08021b30  08021b30  000401e8  2**0
                  CONTENTS
  4 .ARM          00000008  08021b30  08021b30  00031b30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08021b38  08021b38  000401e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08021b38  08021b38  00031b38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08021b3c  08021b3c  00031b3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08021b40  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0002955c  200001e8  08021d28  000401e8  2**2
                  ALLOC
 10 ._user_heap   00010004  20029744  08021d28  00049744  2**0
                  ALLOC
 11 ._user_stack  00007f00  10000000  10000000  00050000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000401e8  2**0
                  CONTENTS, READONLY
 13 .comment      000000b8  00000000  00000000  00040218  2**0
                  CONTENTS, READONLY
 14 .debug_line   00023141  00000000  00000000  000402d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line_str 000000c9  00000000  00000000  00063411  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_info   00027a8a  00000000  00000000  000634da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 0000494a  00000000  00000000  0008af64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00001c20  00000000  00000000  0008f8b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00122b7a  00000000  00000000  000914d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_rnglists 00001504  00000000  00000000  001b404a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  0000540e  00000000  00000000  001b554e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00008aac  00000000  00000000  001ba95c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loc    00003184  00000000  00000000  001c3408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_ranges 000000c8  00000000  00000000  001c658c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001e8 	.word	0x200001e8
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800e150 	.word	0x0800e150

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001ec 	.word	0x200001ec
 80001fc:	0800e150 	.word	0x0800e150

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bec:	f000 b970 	b.w	8000ed0 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9e08      	ldr	r6, [sp, #32]
 8000c0e:	460d      	mov	r5, r1
 8000c10:	4604      	mov	r4, r0
 8000c12:	460f      	mov	r7, r1
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d14a      	bne.n	8000cae <__udivmoddi4+0xa6>
 8000c18:	428a      	cmp	r2, r1
 8000c1a:	4694      	mov	ip, r2
 8000c1c:	d965      	bls.n	8000cea <__udivmoddi4+0xe2>
 8000c1e:	fab2 f382 	clz	r3, r2
 8000c22:	b143      	cbz	r3, 8000c36 <__udivmoddi4+0x2e>
 8000c24:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c28:	f1c3 0220 	rsb	r2, r3, #32
 8000c2c:	409f      	lsls	r7, r3
 8000c2e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c32:	4317      	orrs	r7, r2
 8000c34:	409c      	lsls	r4, r3
 8000c36:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c3a:	fa1f f58c 	uxth.w	r5, ip
 8000c3e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c42:	0c22      	lsrs	r2, r4, #16
 8000c44:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c48:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c4c:	fb01 f005 	mul.w	r0, r1, r5
 8000c50:	4290      	cmp	r0, r2
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x62>
 8000c54:	eb1c 0202 	adds.w	r2, ip, r2
 8000c58:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c5c:	f080 811c 	bcs.w	8000e98 <__udivmoddi4+0x290>
 8000c60:	4290      	cmp	r0, r2
 8000c62:	f240 8119 	bls.w	8000e98 <__udivmoddi4+0x290>
 8000c66:	3902      	subs	r1, #2
 8000c68:	4462      	add	r2, ip
 8000c6a:	1a12      	subs	r2, r2, r0
 8000c6c:	b2a4      	uxth	r4, r4
 8000c6e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c72:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c76:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c7a:	fb00 f505 	mul.w	r5, r0, r5
 8000c7e:	42a5      	cmp	r5, r4
 8000c80:	d90a      	bls.n	8000c98 <__udivmoddi4+0x90>
 8000c82:	eb1c 0404 	adds.w	r4, ip, r4
 8000c86:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c8a:	f080 8107 	bcs.w	8000e9c <__udivmoddi4+0x294>
 8000c8e:	42a5      	cmp	r5, r4
 8000c90:	f240 8104 	bls.w	8000e9c <__udivmoddi4+0x294>
 8000c94:	4464      	add	r4, ip
 8000c96:	3802      	subs	r0, #2
 8000c98:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c9c:	1b64      	subs	r4, r4, r5
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	b11e      	cbz	r6, 8000caa <__udivmoddi4+0xa2>
 8000ca2:	40dc      	lsrs	r4, r3
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	e9c6 4300 	strd	r4, r3, [r6]
 8000caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cae:	428b      	cmp	r3, r1
 8000cb0:	d908      	bls.n	8000cc4 <__udivmoddi4+0xbc>
 8000cb2:	2e00      	cmp	r6, #0
 8000cb4:	f000 80ed 	beq.w	8000e92 <__udivmoddi4+0x28a>
 8000cb8:	2100      	movs	r1, #0
 8000cba:	e9c6 0500 	strd	r0, r5, [r6]
 8000cbe:	4608      	mov	r0, r1
 8000cc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc4:	fab3 f183 	clz	r1, r3
 8000cc8:	2900      	cmp	r1, #0
 8000cca:	d149      	bne.n	8000d60 <__udivmoddi4+0x158>
 8000ccc:	42ab      	cmp	r3, r5
 8000cce:	d302      	bcc.n	8000cd6 <__udivmoddi4+0xce>
 8000cd0:	4282      	cmp	r2, r0
 8000cd2:	f200 80f8 	bhi.w	8000ec6 <__udivmoddi4+0x2be>
 8000cd6:	1a84      	subs	r4, r0, r2
 8000cd8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cdc:	2001      	movs	r0, #1
 8000cde:	4617      	mov	r7, r2
 8000ce0:	2e00      	cmp	r6, #0
 8000ce2:	d0e2      	beq.n	8000caa <__udivmoddi4+0xa2>
 8000ce4:	e9c6 4700 	strd	r4, r7, [r6]
 8000ce8:	e7df      	b.n	8000caa <__udivmoddi4+0xa2>
 8000cea:	b902      	cbnz	r2, 8000cee <__udivmoddi4+0xe6>
 8000cec:	deff      	udf	#255	; 0xff
 8000cee:	fab2 f382 	clz	r3, r2
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	f040 8090 	bne.w	8000e18 <__udivmoddi4+0x210>
 8000cf8:	1a8a      	subs	r2, r1, r2
 8000cfa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cfe:	fa1f fe8c 	uxth.w	lr, ip
 8000d02:	2101      	movs	r1, #1
 8000d04:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d08:	fb07 2015 	mls	r0, r7, r5, r2
 8000d0c:	0c22      	lsrs	r2, r4, #16
 8000d0e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d12:	fb0e f005 	mul.w	r0, lr, r5
 8000d16:	4290      	cmp	r0, r2
 8000d18:	d908      	bls.n	8000d2c <__udivmoddi4+0x124>
 8000d1a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d1e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x122>
 8000d24:	4290      	cmp	r0, r2
 8000d26:	f200 80cb 	bhi.w	8000ec0 <__udivmoddi4+0x2b8>
 8000d2a:	4645      	mov	r5, r8
 8000d2c:	1a12      	subs	r2, r2, r0
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d34:	fb07 2210 	mls	r2, r7, r0, r2
 8000d38:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d3c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d40:	45a6      	cmp	lr, r4
 8000d42:	d908      	bls.n	8000d56 <__udivmoddi4+0x14e>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d4c:	d202      	bcs.n	8000d54 <__udivmoddi4+0x14c>
 8000d4e:	45a6      	cmp	lr, r4
 8000d50:	f200 80bb 	bhi.w	8000eca <__udivmoddi4+0x2c2>
 8000d54:	4610      	mov	r0, r2
 8000d56:	eba4 040e 	sub.w	r4, r4, lr
 8000d5a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d5e:	e79f      	b.n	8000ca0 <__udivmoddi4+0x98>
 8000d60:	f1c1 0720 	rsb	r7, r1, #32
 8000d64:	408b      	lsls	r3, r1
 8000d66:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d6a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d6e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d72:	fa20 f307 	lsr.w	r3, r0, r7
 8000d76:	40fd      	lsrs	r5, r7
 8000d78:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d7c:	4323      	orrs	r3, r4
 8000d7e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d82:	fa1f fe8c 	uxth.w	lr, ip
 8000d86:	fb09 5518 	mls	r5, r9, r8, r5
 8000d8a:	0c1c      	lsrs	r4, r3, #16
 8000d8c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d90:	fb08 f50e 	mul.w	r5, r8, lr
 8000d94:	42a5      	cmp	r5, r4
 8000d96:	fa02 f201 	lsl.w	r2, r2, r1
 8000d9a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d9e:	d90b      	bls.n	8000db8 <__udivmoddi4+0x1b0>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000da8:	f080 8088 	bcs.w	8000ebc <__udivmoddi4+0x2b4>
 8000dac:	42a5      	cmp	r5, r4
 8000dae:	f240 8085 	bls.w	8000ebc <__udivmoddi4+0x2b4>
 8000db2:	f1a8 0802 	sub.w	r8, r8, #2
 8000db6:	4464      	add	r4, ip
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	b29d      	uxth	r5, r3
 8000dbc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dc0:	fb09 4413 	mls	r4, r9, r3, r4
 8000dc4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000dc8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dcc:	45a6      	cmp	lr, r4
 8000dce:	d908      	bls.n	8000de2 <__udivmoddi4+0x1da>
 8000dd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000dd8:	d26c      	bcs.n	8000eb4 <__udivmoddi4+0x2ac>
 8000dda:	45a6      	cmp	lr, r4
 8000ddc:	d96a      	bls.n	8000eb4 <__udivmoddi4+0x2ac>
 8000dde:	3b02      	subs	r3, #2
 8000de0:	4464      	add	r4, ip
 8000de2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000de6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dea:	eba4 040e 	sub.w	r4, r4, lr
 8000dee:	42ac      	cmp	r4, r5
 8000df0:	46c8      	mov	r8, r9
 8000df2:	46ae      	mov	lr, r5
 8000df4:	d356      	bcc.n	8000ea4 <__udivmoddi4+0x29c>
 8000df6:	d053      	beq.n	8000ea0 <__udivmoddi4+0x298>
 8000df8:	b156      	cbz	r6, 8000e10 <__udivmoddi4+0x208>
 8000dfa:	ebb0 0208 	subs.w	r2, r0, r8
 8000dfe:	eb64 040e 	sbc.w	r4, r4, lr
 8000e02:	fa04 f707 	lsl.w	r7, r4, r7
 8000e06:	40ca      	lsrs	r2, r1
 8000e08:	40cc      	lsrs	r4, r1
 8000e0a:	4317      	orrs	r7, r2
 8000e0c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e10:	4618      	mov	r0, r3
 8000e12:	2100      	movs	r1, #0
 8000e14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e18:	f1c3 0120 	rsb	r1, r3, #32
 8000e1c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e20:	fa20 f201 	lsr.w	r2, r0, r1
 8000e24:	fa25 f101 	lsr.w	r1, r5, r1
 8000e28:	409d      	lsls	r5, r3
 8000e2a:	432a      	orrs	r2, r5
 8000e2c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e30:	fa1f fe8c 	uxth.w	lr, ip
 8000e34:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e38:	fb07 1510 	mls	r5, r7, r0, r1
 8000e3c:	0c11      	lsrs	r1, r2, #16
 8000e3e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e42:	fb00 f50e 	mul.w	r5, r0, lr
 8000e46:	428d      	cmp	r5, r1
 8000e48:	fa04 f403 	lsl.w	r4, r4, r3
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x258>
 8000e4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e52:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e56:	d22f      	bcs.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e58:	428d      	cmp	r5, r1
 8000e5a:	d92d      	bls.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e5c:	3802      	subs	r0, #2
 8000e5e:	4461      	add	r1, ip
 8000e60:	1b49      	subs	r1, r1, r5
 8000e62:	b292      	uxth	r2, r2
 8000e64:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e68:	fb07 1115 	mls	r1, r7, r5, r1
 8000e6c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e70:	fb05 f10e 	mul.w	r1, r5, lr
 8000e74:	4291      	cmp	r1, r2
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x282>
 8000e78:	eb1c 0202 	adds.w	r2, ip, r2
 8000e7c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e80:	d216      	bcs.n	8000eb0 <__udivmoddi4+0x2a8>
 8000e82:	4291      	cmp	r1, r2
 8000e84:	d914      	bls.n	8000eb0 <__udivmoddi4+0x2a8>
 8000e86:	3d02      	subs	r5, #2
 8000e88:	4462      	add	r2, ip
 8000e8a:	1a52      	subs	r2, r2, r1
 8000e8c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e90:	e738      	b.n	8000d04 <__udivmoddi4+0xfc>
 8000e92:	4631      	mov	r1, r6
 8000e94:	4630      	mov	r0, r6
 8000e96:	e708      	b.n	8000caa <__udivmoddi4+0xa2>
 8000e98:	4639      	mov	r1, r7
 8000e9a:	e6e6      	b.n	8000c6a <__udivmoddi4+0x62>
 8000e9c:	4610      	mov	r0, r2
 8000e9e:	e6fb      	b.n	8000c98 <__udivmoddi4+0x90>
 8000ea0:	4548      	cmp	r0, r9
 8000ea2:	d2a9      	bcs.n	8000df8 <__udivmoddi4+0x1f0>
 8000ea4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ea8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000eac:	3b01      	subs	r3, #1
 8000eae:	e7a3      	b.n	8000df8 <__udivmoddi4+0x1f0>
 8000eb0:	4645      	mov	r5, r8
 8000eb2:	e7ea      	b.n	8000e8a <__udivmoddi4+0x282>
 8000eb4:	462b      	mov	r3, r5
 8000eb6:	e794      	b.n	8000de2 <__udivmoddi4+0x1da>
 8000eb8:	4640      	mov	r0, r8
 8000eba:	e7d1      	b.n	8000e60 <__udivmoddi4+0x258>
 8000ebc:	46d0      	mov	r8, sl
 8000ebe:	e77b      	b.n	8000db8 <__udivmoddi4+0x1b0>
 8000ec0:	3d02      	subs	r5, #2
 8000ec2:	4462      	add	r2, ip
 8000ec4:	e732      	b.n	8000d2c <__udivmoddi4+0x124>
 8000ec6:	4608      	mov	r0, r1
 8000ec8:	e70a      	b.n	8000ce0 <__udivmoddi4+0xd8>
 8000eca:	4464      	add	r4, ip
 8000ecc:	3802      	subs	r0, #2
 8000ece:	e742      	b.n	8000d56 <__udivmoddi4+0x14e>

08000ed0 <__aeabi_idiv0>:
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000ed4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f0c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ed8:	f000 fff4 	bl	8001ec4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000edc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000ede:	e003      	b.n	8000ee8 <LoopCopyDataInit>

08000ee0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000ee0:	4b0b      	ldr	r3, [pc, #44]	; (8000f10 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000ee2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000ee4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000ee6:	3104      	adds	r1, #4

08000ee8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000ee8:	480a      	ldr	r0, [pc, #40]	; (8000f14 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000eea:	4b0b      	ldr	r3, [pc, #44]	; (8000f18 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000eec:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000eee:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000ef0:	d3f6      	bcc.n	8000ee0 <CopyDataInit>
	ldr	r2, =_sbss
 8000ef2:	4a0a      	ldr	r2, [pc, #40]	; (8000f1c <LoopForever+0x12>)
	b	LoopFillZerobss
 8000ef4:	e002      	b.n	8000efc <LoopFillZerobss>

08000ef6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000ef6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000ef8:	f842 3b04 	str.w	r3, [r2], #4

08000efc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000efc:	4b08      	ldr	r3, [pc, #32]	; (8000f20 <LoopForever+0x16>)
	cmp	r2, r3
 8000efe:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000f00:	d3f9      	bcc.n	8000ef6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f02:	f00b f97d 	bl	800c200 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f06:	f000 f80f 	bl	8000f28 <main>

08000f0a <LoopForever>:

LoopForever:
    b LoopForever
 8000f0a:	e7fe      	b.n	8000f0a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000f0c:	20064000 	.word	0x20064000
	ldr	r3, =_sidata
 8000f10:	08021b40 	.word	0x08021b40
	ldr	r0, =_sdata
 8000f14:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000f18:	200001e8 	.word	0x200001e8
	ldr	r2, =_sbss
 8000f1c:	200001e8 	.word	0x200001e8
	ldr	r3, = _ebss
 8000f20:	20029744 	.word	0x20029744

08000f24 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f24:	e7fe      	b.n	8000f24 <ADC1_IRQHandler>
	...

08000f28 <main>:
 * @brief  Main program
 * @param  None
 * @retval None
 */
int main(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000f2c:	f002 fe44 	bl	8003bb8 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 8000f30:	f000 fb18 	bl	8001564 <SystemClock_Config>

	/* Configure LED2 */
	BSP_LED_Init(LED2);
 8000f34:	2000      	movs	r0, #0
 8000f36:	f002 fd4d 	bl	80039d4 <BSP_LED_Init>

	/* USER push button is used to ask if reconfiguration is needed */
	BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000f3a:	2101      	movs	r1, #1
 8000f3c:	2000      	movs	r0, #0
 8000f3e:	f002 fd79 	bl	8003a34 <BSP_PB_Init>

	/* Initialize all configured peripherals */
	MX_DMA_Init();
 8000f42:	f000 fc3d 	bl	80017c0 <MX_DMA_Init>
	MX_DAC1_Init();
 8000f46:	f000 fb47 	bl	80015d8 <MX_DAC1_Init>
	MX_TIM2_Init();
 8000f4a:	f000 fbeb 	bl	8001724 <MX_TIM2_Init>
	MX_DFSDM1_Init();
 8000f4e:	f000 fb85 	bl	800165c <MX_DFSDM1_Init>

	/* initiating things */
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000f52:	2100      	movs	r1, #0
 8000f54:	4817      	ldr	r0, [pc, #92]	; (8000fb4 <main+0x8c>)
 8000f56:	f002 fffa 	bl	8003f4e <HAL_DAC_Start>
	// start the timer (TIM2) and associated interrupt
	HAL_TIM_Base_Start_IT(&htim2); // the _IT at the end of fn. means interrupt
 8000f5a:	4817      	ldr	r0, [pc, #92]	; (8000fb8 <main+0x90>)
 8000f5c:	f007 fd42 	bl	80089e4 <HAL_TIM_Base_Start_IT>

	/* WIFI Web Server demonstration */
#if defined (TERMINAL_USE)
	/* Initialize all configured peripherals */
	hDiscoUart.Instance = DISCOVERY_COM1;
 8000f60:	4b16      	ldr	r3, [pc, #88]	; (8000fbc <main+0x94>)
 8000f62:	4a17      	ldr	r2, [pc, #92]	; (8000fc0 <main+0x98>)
 8000f64:	601a      	str	r2, [r3, #0]
	hDiscoUart.Init.BaudRate = 115200;
 8000f66:	4b15      	ldr	r3, [pc, #84]	; (8000fbc <main+0x94>)
 8000f68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f6c:	605a      	str	r2, [r3, #4]
	hDiscoUart.Init.WordLength = UART_WORDLENGTH_8B;
 8000f6e:	4b13      	ldr	r3, [pc, #76]	; (8000fbc <main+0x94>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	609a      	str	r2, [r3, #8]
	hDiscoUart.Init.StopBits = UART_STOPBITS_1;
 8000f74:	4b11      	ldr	r3, [pc, #68]	; (8000fbc <main+0x94>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	60da      	str	r2, [r3, #12]
	hDiscoUart.Init.Parity = UART_PARITY_NONE;
 8000f7a:	4b10      	ldr	r3, [pc, #64]	; (8000fbc <main+0x94>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	611a      	str	r2, [r3, #16]
	hDiscoUart.Init.Mode = UART_MODE_TX_RX;
 8000f80:	4b0e      	ldr	r3, [pc, #56]	; (8000fbc <main+0x94>)
 8000f82:	220c      	movs	r2, #12
 8000f84:	615a      	str	r2, [r3, #20]
	hDiscoUart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f86:	4b0d      	ldr	r3, [pc, #52]	; (8000fbc <main+0x94>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	619a      	str	r2, [r3, #24]
	hDiscoUart.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f8c:	4b0b      	ldr	r3, [pc, #44]	; (8000fbc <main+0x94>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	61da      	str	r2, [r3, #28]
	hDiscoUart.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f92:	4b0a      	ldr	r3, [pc, #40]	; (8000fbc <main+0x94>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	621a      	str	r2, [r3, #32]
	hDiscoUart.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f98:	4b08      	ldr	r3, [pc, #32]	; (8000fbc <main+0x94>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	629a      	str	r2, [r3, #40]	; 0x28


	BSP_COM_Init(COM1, &hDiscoUart);
 8000f9e:	4907      	ldr	r1, [pc, #28]	; (8000fbc <main+0x94>)
 8000fa0:	2000      	movs	r0, #0
 8000fa2:	f002 fd9d 	bl	8003ae0 <BSP_COM_Init>

	printf("****** RECEIVING BOARD Initiating ******\r\n");
 8000fa6:	4807      	ldr	r0, [pc, #28]	; (8000fc4 <main+0x9c>)
 8000fa8:	f00a ff0c 	bl	800bdc4 <puts>

#endif /* TERMINAL_USE */

	// wifi_server();
	wifi_wait_data_from_board();
 8000fac:	f000 f80c 	bl	8000fc8 <wifi_wait_data_from_board>

	while (1){
 8000fb0:	e7fe      	b.n	8000fb0 <main+0x88>
 8000fb2:	bf00      	nop
 8000fb4:	20000204 	.word	0x20000204
 8000fb8:	20000364 	.word	0x20000364
 8000fbc:	2002953c 	.word	0x2002953c
 8000fc0:	40013800 	.word	0x40013800
 8000fc4:	0800e168 	.word	0x0800e168

08000fc8 <wifi_wait_data_from_board>:

	}
}

static int wifi_wait_data_from_board(void) {
 8000fc8:	b590      	push	{r4, r7, lr}
 8000fca:	b085      	sub	sp, #20
 8000fcc:	af02      	add	r7, sp, #8
	// start the wifi module
	wifi_start();
 8000fce:	f000 f927 	bl	8001220 <wifi_start>
	// connect to existing AP
	if (WIFI_Connect(SSID, PASSWORD, SECURITY) == WIFI_STATUS_OK)
 8000fd2:	2203      	movs	r2, #3
 8000fd4:	493a      	ldr	r1, [pc, #232]	; (80010c0 <wifi_wait_data_from_board+0xf8>)
 8000fd6:	483b      	ldr	r0, [pc, #236]	; (80010c4 <wifi_wait_data_from_board+0xfc>)
 8000fd8:	f002 fbc2 	bl	8003760 <WIFI_Connect>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d128      	bne.n	8001034 <wifi_wait_data_from_board+0x6c>
	{
		if(WIFI_GetIP_Address(IP_Addr, sizeof(IP_Addr)) == WIFI_STATUS_OK)
 8000fe2:	2104      	movs	r1, #4
 8000fe4:	4838      	ldr	r0, [pc, #224]	; (80010c8 <wifi_wait_data_from_board+0x100>)
 8000fe6:	f002 fbfd 	bl	80037e4 <WIFI_GetIP_Address>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d11b      	bne.n	8001028 <wifi_wait_data_from_board+0x60>
		{
			LOG(("eS-WiFi module connected: got IP Address : %d.%d.%d.%d\r\n",
 8000ff0:	4b35      	ldr	r3, [pc, #212]	; (80010c8 <wifi_wait_data_from_board+0x100>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	4b34      	ldr	r3, [pc, #208]	; (80010c8 <wifi_wait_data_from_board+0x100>)
 8000ff8:	785b      	ldrb	r3, [r3, #1]
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	4b32      	ldr	r3, [pc, #200]	; (80010c8 <wifi_wait_data_from_board+0x100>)
 8000ffe:	789b      	ldrb	r3, [r3, #2]
 8001000:	4618      	mov	r0, r3
 8001002:	4b31      	ldr	r3, [pc, #196]	; (80010c8 <wifi_wait_data_from_board+0x100>)
 8001004:	78db      	ldrb	r3, [r3, #3]
 8001006:	9300      	str	r3, [sp, #0]
 8001008:	4603      	mov	r3, r0
 800100a:	4830      	ldr	r0, [pc, #192]	; (80010cc <wifi_wait_data_from_board+0x104>)
 800100c:	f00a fe6c 	bl	800bce8 <iprintf>
		LOG(("ERROR : es-wifi module NOT connected\r\n"));
		return -1;
	}

	// starting server
	if (WIFI_STATUS_OK != WIFI_StartServer(SOCKET, WIFI_TCP_PROTOCOL, 1, "", PORT)) {
 8001010:	2350      	movs	r3, #80	; 0x50
 8001012:	9300      	str	r3, [sp, #0]
 8001014:	4b2e      	ldr	r3, [pc, #184]	; (80010d0 <wifi_wait_data_from_board+0x108>)
 8001016:	2201      	movs	r2, #1
 8001018:	2100      	movs	r1, #0
 800101a:	2000      	movs	r0, #0
 800101c:	f002 fc06 	bl	800382c <WIFI_StartServer>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d012      	beq.n	800104c <wifi_wait_data_from_board+0x84>
 8001026:	e00b      	b.n	8001040 <wifi_wait_data_from_board+0x78>
			LOG(("ERROR : es-wifi module CANNOT get IP address\r\n"));
 8001028:	482a      	ldr	r0, [pc, #168]	; (80010d4 <wifi_wait_data_from_board+0x10c>)
 800102a:	f00a fecb 	bl	800bdc4 <puts>
			return -1;
 800102e:	f04f 33ff 	mov.w	r3, #4294967295
 8001032:	e040      	b.n	80010b6 <wifi_wait_data_from_board+0xee>
		LOG(("ERROR : es-wifi module NOT connected\r\n"));
 8001034:	4828      	ldr	r0, [pc, #160]	; (80010d8 <wifi_wait_data_from_board+0x110>)
 8001036:	f00a fec5 	bl	800bdc4 <puts>
		return -1;
 800103a:	f04f 33ff 	mov.w	r3, #4294967295
 800103e:	e03a      	b.n	80010b6 <wifi_wait_data_from_board+0xee>
		LOG(("ERROR: Could not start server \r\n"));
 8001040:	4826      	ldr	r0, [pc, #152]	; (80010dc <wifi_wait_data_from_board+0x114>)
 8001042:	f00a febf 	bl	800bdc4 <puts>
		return -1;
 8001046:	f04f 33ff 	mov.w	r3, #4294967295
 800104a:	e034      	b.n	80010b6 <wifi_wait_data_from_board+0xee>
	uint8_t RemoteIP[4];
	uint16_t RemotePort;

	while(true) {
		// wait for connection: wait for either a post req. or a get req. from client
		printf("Waiting for client connection \r\n");
 800104c:	4824      	ldr	r0, [pc, #144]	; (80010e0 <wifi_wait_data_from_board+0x118>)
 800104e:	f00a feb9 	bl	800bdc4 <puts>
		while (WIFI_STATUS_OK != WIFI_WaitServerConnection(SOCKET, 1000, RemoteIP, sizeof(RemoteIP), &RemotePort))
 8001052:	e002      	b.n	800105a <wifi_wait_data_from_board+0x92>
		{
			LOG(("."));
 8001054:	202e      	movs	r0, #46	; 0x2e
 8001056:	f00a fe59 	bl	800bd0c <putchar>
		while (WIFI_STATUS_OK != WIFI_WaitServerConnection(SOCKET, 1000, RemoteIP, sizeof(RemoteIP), &RemotePort))
 800105a:	1d3a      	adds	r2, r7, #4
 800105c:	1cbb      	adds	r3, r7, #2
 800105e:	9300      	str	r3, [sp, #0]
 8001060:	2304      	movs	r3, #4
 8001062:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001066:	2000      	movs	r0, #0
 8001068:	f002 fc10 	bl	800388c <WIFI_WaitServerConnection>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d1f0      	bne.n	8001054 <wifi_wait_data_from_board+0x8c>
		}
		LOG(("\nClient connected %d.%d.%d.%d:%d\r\n",RemoteIP[0],RemoteIP[1],RemoteIP[2],RemoteIP[3],RemotePort));
 8001072:	793b      	ldrb	r3, [r7, #4]
 8001074:	4619      	mov	r1, r3
 8001076:	797b      	ldrb	r3, [r7, #5]
 8001078:	4618      	mov	r0, r3
 800107a:	79bb      	ldrb	r3, [r7, #6]
 800107c:	461c      	mov	r4, r3
 800107e:	79fb      	ldrb	r3, [r7, #7]
 8001080:	887a      	ldrh	r2, [r7, #2]
 8001082:	9201      	str	r2, [sp, #4]
 8001084:	9300      	str	r3, [sp, #0]
 8001086:	4623      	mov	r3, r4
 8001088:	4602      	mov	r2, r0
 800108a:	4816      	ldr	r0, [pc, #88]	; (80010e4 <wifi_wait_data_from_board+0x11c>)
 800108c:	f00a fe2c 	bl	800bce8 <iprintf>

		// process server
		printf("Processing server \r\n");
 8001090:	4815      	ldr	r0, [pc, #84]	; (80010e8 <wifi_wait_data_from_board+0x120>)
 8001092:	f00a fe97 	bl	800bdc4 <puts>
		wifi_process_received_data();
 8001096:	f000 f82d 	bl	80010f4 <wifi_process_received_data>

		// close connection
		printf("Closing current connection \r\n");
 800109a:	4814      	ldr	r0, [pc, #80]	; (80010ec <wifi_wait_data_from_board+0x124>)
 800109c:	f00a fe92 	bl	800bdc4 <puts>
		if (WIFI_STATUS_OK != WIFI_CloseServerConnection(SOCKET)) {
 80010a0:	2000      	movs	r0, #0
 80010a2:	f002 fc3b 	bl	800391c <WIFI_CloseServerConnection>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d0cf      	beq.n	800104c <wifi_wait_data_from_board+0x84>
			LOG(("Server could not be closed \r\n"));
 80010ac:	4810      	ldr	r0, [pc, #64]	; (80010f0 <wifi_wait_data_from_board+0x128>)
 80010ae:	f00a fe89 	bl	800bdc4 <puts>
			return -1;
 80010b2:	f04f 33ff 	mov.w	r3, #4294967295
		}

	}
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	370c      	adds	r7, #12
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd90      	pop	{r4, r7, pc}
 80010be:	bf00      	nop
 80010c0:	0800e194 	.word	0x0800e194
 80010c4:	0800e1a0 	.word	0x0800e1a0
 80010c8:	200007c8 	.word	0x200007c8
 80010cc:	0800e1a8 	.word	0x0800e1a8
 80010d0:	0800e23c 	.word	0x0800e23c
 80010d4:	0800e1e4 	.word	0x0800e1e4
 80010d8:	0800e214 	.word	0x0800e214
 80010dc:	0800e240 	.word	0x0800e240
 80010e0:	0800e260 	.word	0x0800e260
 80010e4:	0800e280 	.word	0x0800e280
 80010e8:	0800e2a4 	.word	0x0800e2a4
 80010ec:	0800e2b8 	.word	0x0800e2b8
 80010f0:	0800e2d8 	.word	0x0800e2d8

080010f4 <wifi_process_received_data>:


static WIFI_Status_t wifi_process_received_data() {
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b084      	sub	sp, #16
 80010f8:	af02      	add	r7, sp, #8
	// get the resp
	WIFI_Status_t ret;
	uint16_t respLen;
	if (WIFI_STATUS_OK == WIFI_ReceiveData(SOCKET, resp, SENDING_LENGTH, &respLen, WIFI_READ_TIMEOUT)) {
 80010fa:	1d3b      	adds	r3, r7, #4
 80010fc:	f242 7210 	movw	r2, #10000	; 0x2710
 8001100:	9200      	str	r2, [sp, #0]
 8001102:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001106:	491d      	ldr	r1, [pc, #116]	; (800117c <wifi_process_received_data+0x88>)
 8001108:	2000      	movs	r0, #0
 800110a:	f002 fc41 	bl	8003990 <WIFI_ReceiveData>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d12e      	bne.n	8001172 <wifi_process_received_data+0x7e>
		if (respLen > 0) {
 8001114:	88bb      	ldrh	r3, [r7, #4]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d029      	beq.n	800116e <wifi_process_received_data+0x7a>
			// send_receive_confirmation(); maybe we dont need to send back a confirmation for now
			printf(" \r\nReceived audio");
 800111a:	4819      	ldr	r0, [pc, #100]	; (8001180 <wifi_process_received_data+0x8c>)
 800111c:	f00a fde4 	bl	800bce8 <iprintf>
			// need to use uint32_t array
			/************** CONVERT FFT RECEIVED INTO PROPER uint32_t **************/
			receiveFFTBlock(buffer_index, respLen);
 8001120:	4b18      	ldr	r3, [pc, #96]	; (8001184 <wifi_process_received_data+0x90>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	b29b      	uxth	r3, r3
 8001126:	88ba      	ldrh	r2, [r7, #4]
 8001128:	4611      	mov	r1, r2
 800112a:	4618      	mov	r0, r3
 800112c:	f000 f8b2 	bl	8001294 <receiveFFTBlock>
			/*
			for(int i = 0; i < SENDING_LENGTH; i++){
				play[buffer_index * SENDING_LENGTH + i] = (uint32_t)resp[i];
			}
			*/
			printf("\r\nReceived Packet #%d\r\n", buffer_index + 1);
 8001130:	4b14      	ldr	r3, [pc, #80]	; (8001184 <wifi_process_received_data+0x90>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	3301      	adds	r3, #1
 8001136:	4619      	mov	r1, r3
 8001138:	4813      	ldr	r0, [pc, #76]	; (8001188 <wifi_process_received_data+0x94>)
 800113a:	f00a fdd5 	bl	800bce8 <iprintf>
			buffer_index++;
 800113e:	4b11      	ldr	r3, [pc, #68]	; (8001184 <wifi_process_received_data+0x90>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	3301      	adds	r3, #1
 8001144:	4a0f      	ldr	r2, [pc, #60]	; (8001184 <wifi_process_received_data+0x90>)
 8001146:	6013      	str	r3, [r2, #0]

			if(buffer_index == BUFFER_LENGTH/N_FFT){
 8001148:	4b0e      	ldr	r3, [pc, #56]	; (8001184 <wifi_process_received_data+0x90>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	2b14      	cmp	r3, #20
 800114e:	d10b      	bne.n	8001168 <wifi_process_received_data+0x74>
				buffer_index = 0;
 8001150:	4b0c      	ldr	r3, [pc, #48]	; (8001184 <wifi_process_received_data+0x90>)
 8001152:	2200      	movs	r2, #0
 8001154:	601a      	str	r2, [r3, #0]
				HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, play, BUFFER_LENGTH, DAC_ALIGN_8B_R);
 8001156:	2308      	movs	r3, #8
 8001158:	9300      	str	r3, [sp, #0]
 800115a:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800115e:	4a0b      	ldr	r2, [pc, #44]	; (800118c <wifi_process_received_data+0x98>)
 8001160:	2100      	movs	r1, #0
 8001162:	480b      	ldr	r0, [pc, #44]	; (8001190 <wifi_process_received_data+0x9c>)
 8001164:	f002 ff46 	bl	8003ff4 <HAL_DAC_Start_DMA>
			}

			send_receive_confirmation();
 8001168:	f000 f814 	bl	8001194 <send_receive_confirmation>
 800116c:	e001      	b.n	8001172 <wifi_process_received_data+0x7e>
		}
		else {
			ret = WIFI_STATUS_ERROR;
 800116e:	2301      	movs	r3, #1
 8001170:	71fb      	strb	r3, [r7, #7]
		}
	}
	return WIFI_STATUS_OK;
 8001172:	2300      	movs	r3, #0
}
 8001174:	4618      	mov	r0, r3
 8001176:	3708      	adds	r7, #8
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	200007cc 	.word	0x200007cc
 8001180:	0800e2f8 	.word	0x0800e2f8
 8001184:	20028bb4 	.word	0x20028bb4
 8001188:	0800e30c 	.word	0x0800e30c
 800118c:	20000bb4 	.word	0x20000bb4
 8001190:	20000204 	.word	0x20000204

08001194 <send_receive_confirmation>:

static int send_receive_confirmation() {
 8001194:	b590      	push	{r4, r7, lr}
 8001196:	b087      	sub	sp, #28
 8001198:	af02      	add	r7, sp, #8
	uint16_t SentDataLength;
	WIFI_Status_t ret;
	char* http_header = "HTTP/1.0 200 OK\r\nContent-Type: text/plain\r\nPragma: no-cache\r\n\r\n";
 800119a:	4b1d      	ldr	r3, [pc, #116]	; (8001210 <send_receive_confirmation+0x7c>)
 800119c:	60bb      	str	r3, [r7, #8]
	char* message = "Message received\r\n";
 800119e:	4b1d      	ldr	r3, [pc, #116]	; (8001214 <send_receive_confirmation+0x80>)
 80011a0:	607b      	str	r3, [r7, #4]
	strcpy((char *)http, http_header);
 80011a2:	68b9      	ldr	r1, [r7, #8]
 80011a4:	481c      	ldr	r0, [pc, #112]	; (8001218 <send_receive_confirmation+0x84>)
 80011a6:	f00b f851 	bl	800c24c <strcpy>
	strcat((char *)http, message);
 80011aa:	6879      	ldr	r1, [r7, #4]
 80011ac:	481a      	ldr	r0, [pc, #104]	; (8001218 <send_receive_confirmation+0x84>)
 80011ae:	f00a ff21 	bl	800bff4 <strcat>
	ret = WIFI_SendData(0, (uint8_t *)http, strlen(http), &SentDataLength, WIFI_WRITE_TIMEOUT);
 80011b2:	4819      	ldr	r0, [pc, #100]	; (8001218 <send_receive_confirmation+0x84>)
 80011b4:	f7ff f874 	bl	80002a0 <strlen>
 80011b8:	4603      	mov	r3, r0
 80011ba:	b29a      	uxth	r2, r3
 80011bc:	1cbb      	adds	r3, r7, #2
 80011be:	f242 7110 	movw	r1, #10000	; 0x2710
 80011c2:	9100      	str	r1, [sp, #0]
 80011c4:	4914      	ldr	r1, [pc, #80]	; (8001218 <send_receive_confirmation+0x84>)
 80011c6:	2000      	movs	r0, #0
 80011c8:	f002 fbc0 	bl	800394c <WIFI_SendData>
 80011cc:	4603      	mov	r3, r0
 80011ce:	73fb      	strb	r3, [r7, #15]
	if (ret != WIFI_STATUS_OK && (SentDataLength != strlen(http))) {
 80011d0:	7bfb      	ldrb	r3, [r7, #15]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d009      	beq.n	80011ea <send_receive_confirmation+0x56>
 80011d6:	887b      	ldrh	r3, [r7, #2]
 80011d8:	461c      	mov	r4, r3
 80011da:	480f      	ldr	r0, [pc, #60]	; (8001218 <send_receive_confirmation+0x84>)
 80011dc:	f7ff f860 	bl	80002a0 <strlen>
 80011e0:	4603      	mov	r3, r0
 80011e2:	429c      	cmp	r4, r3
 80011e4:	d001      	beq.n	80011ea <send_receive_confirmation+0x56>
		ret = WIFI_STATUS_ERROR;
 80011e6:	2301      	movs	r3, #1
 80011e8:	73fb      	strb	r3, [r7, #15]
	}
	printf("Request sent out to sending board\r\n: %s", http);
 80011ea:	490b      	ldr	r1, [pc, #44]	; (8001218 <send_receive_confirmation+0x84>)
 80011ec:	480b      	ldr	r0, [pc, #44]	; (800121c <send_receive_confirmation+0x88>)
 80011ee:	f00a fd7b 	bl	800bce8 <iprintf>
	memset(http, 0, strlen(http)); // clear the http var after usage
 80011f2:	4809      	ldr	r0, [pc, #36]	; (8001218 <send_receive_confirmation+0x84>)
 80011f4:	f7ff f854 	bl	80002a0 <strlen>
 80011f8:	4603      	mov	r3, r0
 80011fa:	461a      	mov	r2, r3
 80011fc:	2100      	movs	r1, #0
 80011fe:	4806      	ldr	r0, [pc, #24]	; (8001218 <send_receive_confirmation+0x84>)
 8001200:	f00a fef0 	bl	800bfe4 <memset>
	return ret;
 8001204:	7bfb      	ldrb	r3, [r7, #15]
}
 8001206:	4618      	mov	r0, r3
 8001208:	3714      	adds	r7, #20
 800120a:	46bd      	mov	sp, r7
 800120c:	bd90      	pop	{r4, r7, pc}
 800120e:	bf00      	nop
 8001210:	0800e324 	.word	0x0800e324
 8001214:	0800e364 	.word	0x0800e364
 8001218:	200003c8 	.word	0x200003c8
 800121c:	0800e378 	.word	0x0800e378

08001220 <wifi_start>:
 * @retval None
 */


static int wifi_start(void)
{
 8001220:	b5b0      	push	{r4, r5, r7, lr}
 8001222:	b086      	sub	sp, #24
 8001224:	af04      	add	r7, sp, #16
	uint8_t  MAC_Addr[6];

	/*Initialize and use WIFI module */
	if(WIFI_Init() ==  WIFI_STATUS_OK)
 8001226:	f002 fa6f 	bl	8003708 <WIFI_Init>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d124      	bne.n	800127a <wifi_start+0x5a>
	{
		printf("eS-WiFi Initialized.\r\n");
 8001230:	4815      	ldr	r0, [pc, #84]	; (8001288 <wifi_start+0x68>)
 8001232:	f00a fdc7 	bl	800bdc4 <puts>
		if(WIFI_GetMAC_Address(MAC_Addr, sizeof(MAC_Addr)) == WIFI_STATUS_OK)
 8001236:	463b      	mov	r3, r7
 8001238:	2106      	movs	r1, #6
 800123a:	4618      	mov	r0, r3
 800123c:	f002 fab2 	bl	80037a4 <WIFI_GetMAC_Address>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d113      	bne.n	800126e <wifi_start+0x4e>
		{
			LOG(("eS-WiFi module MAC Address : %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8001246:	783b      	ldrb	r3, [r7, #0]
 8001248:	4618      	mov	r0, r3
 800124a:	787b      	ldrb	r3, [r7, #1]
 800124c:	461c      	mov	r4, r3
 800124e:	78bb      	ldrb	r3, [r7, #2]
 8001250:	461d      	mov	r5, r3
 8001252:	78fb      	ldrb	r3, [r7, #3]
 8001254:	793a      	ldrb	r2, [r7, #4]
 8001256:	7979      	ldrb	r1, [r7, #5]
 8001258:	9102      	str	r1, [sp, #8]
 800125a:	9201      	str	r2, [sp, #4]
 800125c:	9300      	str	r3, [sp, #0]
 800125e:	462b      	mov	r3, r5
 8001260:	4622      	mov	r2, r4
 8001262:	4601      	mov	r1, r0
 8001264:	4809      	ldr	r0, [pc, #36]	; (800128c <wifi_start+0x6c>)
 8001266:	f00a fd3f 	bl	800bce8 <iprintf>
	}
	else
	{
		return -1;
	}
	return 0;
 800126a:	2300      	movs	r3, #0
 800126c:	e007      	b.n	800127e <wifi_start+0x5e>
			LOG(("> ERROR : CANNOT get MAC address\r\n"));
 800126e:	4808      	ldr	r0, [pc, #32]	; (8001290 <wifi_start+0x70>)
 8001270:	f00a fda8 	bl	800bdc4 <puts>
			return -1;
 8001274:	f04f 33ff 	mov.w	r3, #4294967295
 8001278:	e001      	b.n	800127e <wifi_start+0x5e>
		return -1;
 800127a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800127e:	4618      	mov	r0, r3
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bdb0      	pop	{r4, r5, r7, pc}
 8001286:	bf00      	nop
 8001288:	0800e3a0 	.word	0x0800e3a0
 800128c:	0800e3b8 	.word	0x0800e3b8
 8001290:	0800e3f8 	.word	0x0800e3f8

08001294 <receiveFFTBlock>:
 * Convert the q7_t values in resp to float32_t using arm_q7_to_float.
 * Apply inverse FFT
 * Rescale values to be in [0, 255] range and int32_t
 * Store these values in the right place given the blockIndex in the play buffer
 */
static void receiveFFTBlock(uint16_t blockIndex, uint16_t respLen) {
 8001294:	b580      	push	{r7, lr}
 8001296:	f5ad 4d80 	sub.w	sp, sp, #16384	; 0x4000
 800129a:	b08a      	sub	sp, #40	; 0x28
 800129c:	af00      	add	r7, sp, #0
 800129e:	4602      	mov	r2, r0
 80012a0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012a4:	f823 2c22 	strh.w	r2, [r3, #-34]
 80012a8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012ac:	460a      	mov	r2, r1
 80012ae:	f823 2c24 	strh.w	r2, [r3, #-36]
	/* STEP 1: Perform Inverse FFT */
	float ifftInputBuf[N_FFT];
	float ifftOutputBuf[N_FFT];
	memset(ifftInputBuf, 0, N_FFT*sizeof(float)); //SETS everything to 0 since resp has a SMALLER length then ifftInputBuf
 80012b2:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80012b6:	f103 0328 	add.w	r3, r3, #40	; 0x28
 80012ba:	3b20      	subs	r3, #32
 80012bc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012c0:	2100      	movs	r1, #0
 80012c2:	4618      	mov	r0, r3
 80012c4:	f00a fe8e 	bl	800bfe4 <memset>
	arm_q7_to_float(resp, ifftInputBuf, respLen);
 80012c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012cc:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 80012d0:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80012d4:	f103 0328 	add.w	r3, r3, #40	; 0x28
 80012d8:	3b20      	subs	r3, #32
 80012da:	4619      	mov	r1, r3
 80012dc:	489a      	ldr	r0, [pc, #616]	; (8001548 <receiveFFTBlock+0x2b4>)
 80012de:	f008 fe87 	bl	8009ff0 <arm_q7_to_float>
	/* Now ifftInputBuf should contain the values in resp along with a long string of zeroes  */
	if (arm_rfft_fast_init_f32(&S_RFFT_F_I, N_FFT) != ARM_MATH_SUCCESS) {
 80012e2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012e6:	4899      	ldr	r0, [pc, #612]	; (800154c <receiveFFTBlock+0x2b8>)
 80012e8:	f008 ffb2 	bl	800a250 <arm_rfft_fast_init_f32>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d003      	beq.n	80012fa <receiveFFTBlock+0x66>
		printf("ERROR: Couldn't initialize FFT instance \r\n");
 80012f2:	4897      	ldr	r0, [pc, #604]	; (8001550 <receiveFFTBlock+0x2bc>)
 80012f4:	f00a fd66 	bl	800bdc4 <puts>
		return;
 80012f8:	e121      	b.n	800153e <receiveFFTBlock+0x2aa>
	}
	/* The last argument to indicate that we want an inverse FFT */
	arm_rfft_fast_f32(&S_RFFT_F_I, ifftInputBuf, ifftOutputBuf, true);
 80012fa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80012fe:	3a20      	subs	r2, #32
 8001300:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
 8001304:	f101 0128 	add.w	r1, r1, #40	; 0x28
 8001308:	3920      	subs	r1, #32
 800130a:	2301      	movs	r3, #1
 800130c:	488f      	ldr	r0, [pc, #572]	; (800154c <receiveFFTBlock+0x2b8>)
 800130e:	f009 f883 	bl	800a418 <arm_rfft_fast_f32>

	/* STEP 2: Convert into [0, 255]*/
	/* Find maximum and minimum elements of ifftOutputBuf */
	float min_f = MAXFLOAT;
 8001312:	4b90      	ldr	r3, [pc, #576]	; (8001554 <receiveFFTBlock+0x2c0>)
 8001314:	f507 4280 	add.w	r2, r7, #16384	; 0x4000
 8001318:	f102 0218 	add.w	r2, r2, #24
 800131c:	6013      	str	r3, [r2, #0]
	float max_f = -MAXFLOAT;
 800131e:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
 8001322:	f507 4280 	add.w	r2, r7, #16384	; 0x4000
 8001326:	f102 0214 	add.w	r2, r2, #20
 800132a:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < N_FFT; i++) {
 800132c:	2300      	movs	r3, #0
 800132e:	f507 4280 	add.w	r2, r7, #16384	; 0x4000
 8001332:	f102 0224 	add.w	r2, r2, #36	; 0x24
 8001336:	6013      	str	r3, [r2, #0]
 8001338:	e051      	b.n	80013de <receiveFFTBlock+0x14a>
		float cur = ifftOutputBuf[i];
 800133a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800133e:	461a      	mov	r2, r3
 8001340:	f507 4380 	add.w	r3, r7, #16384	; 0x4000
 8001344:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	009b      	lsls	r3, r3, #2
 800134c:	4413      	add	r3, r2
 800134e:	3b20      	subs	r3, #32
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f507 4280 	add.w	r2, r7, #16384	; 0x4000
 8001356:	f102 0220 	add.w	r2, r2, #32
 800135a:	6013      	str	r3, [r2, #0]
		if (cur < min_f)
 800135c:	f507 4380 	add.w	r3, r7, #16384	; 0x4000
 8001360:	f103 0320 	add.w	r3, r3, #32
 8001364:	ed93 7a00 	vldr	s14, [r3]
 8001368:	f507 4380 	add.w	r3, r7, #16384	; 0x4000
 800136c:	f103 0318 	add.w	r3, r3, #24
 8001370:	edd3 7a00 	vldr	s15, [r3]
 8001374:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001378:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800137c:	d509      	bpl.n	8001392 <receiveFFTBlock+0xfe>
			cur = min_f;
 800137e:	f507 4380 	add.w	r3, r7, #16384	; 0x4000
 8001382:	f103 0318 	add.w	r3, r3, #24
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f507 4280 	add.w	r2, r7, #16384	; 0x4000
 800138c:	f102 0220 	add.w	r2, r2, #32
 8001390:	6013      	str	r3, [r2, #0]
		if (cur > max_f)
 8001392:	f507 4380 	add.w	r3, r7, #16384	; 0x4000
 8001396:	f103 0320 	add.w	r3, r3, #32
 800139a:	ed93 7a00 	vldr	s14, [r3]
 800139e:	f507 4380 	add.w	r3, r7, #16384	; 0x4000
 80013a2:	f103 0314 	add.w	r3, r3, #20
 80013a6:	edd3 7a00 	vldr	s15, [r3]
 80013aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013b2:	dd09      	ble.n	80013c8 <receiveFFTBlock+0x134>
			cur = max_f;
 80013b4:	f507 4380 	add.w	r3, r7, #16384	; 0x4000
 80013b8:	f103 0314 	add.w	r3, r3, #20
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f507 4280 	add.w	r2, r7, #16384	; 0x4000
 80013c2:	f102 0220 	add.w	r2, r2, #32
 80013c6:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < N_FFT; i++) {
 80013c8:	f507 4380 	add.w	r3, r7, #16384	; 0x4000
 80013cc:	f103 0324 	add.w	r3, r3, #36	; 0x24
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	3301      	adds	r3, #1
 80013d4:	f507 4280 	add.w	r2, r7, #16384	; 0x4000
 80013d8:	f102 0224 	add.w	r2, r2, #36	; 0x24
 80013dc:	6013      	str	r3, [r2, #0]
 80013de:	f507 4380 	add.w	r3, r7, #16384	; 0x4000
 80013e2:	f103 0324 	add.w	r3, r3, #36	; 0x24
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80013ec:	dba5      	blt.n	800133a <receiveFFTBlock+0xa6>
	}
	float scalingFactor;
	if ((max_f - min_f)!= 0) {
 80013ee:	f507 4380 	add.w	r3, r7, #16384	; 0x4000
 80013f2:	f103 0314 	add.w	r3, r3, #20
 80013f6:	ed93 7a00 	vldr	s14, [r3]
 80013fa:	f507 4380 	add.w	r3, r7, #16384	; 0x4000
 80013fe:	f103 0318 	add.w	r3, r3, #24
 8001402:	edd3 7a00 	vldr	s15, [r3]
 8001406:	ee77 7a67 	vsub.f32	s15, s14, s15
 800140a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800140e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001412:	d028      	beq.n	8001466 <receiveFFTBlock+0x1d2>
		scalingFactor = (255)/(max_f-min_f);
 8001414:	f507 4380 	add.w	r3, r7, #16384	; 0x4000
 8001418:	f103 0314 	add.w	r3, r3, #20
 800141c:	ed93 7a00 	vldr	s14, [r3]
 8001420:	f507 4380 	add.w	r3, r7, #16384	; 0x4000
 8001424:	f103 0318 	add.w	r3, r3, #24
 8001428:	edd3 7a00 	vldr	s15, [r3]
 800142c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001430:	eddf 6a49 	vldr	s13, [pc, #292]	; 8001558 <receiveFFTBlock+0x2c4>
 8001434:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001438:	f507 4380 	add.w	r3, r7, #16384	; 0x4000
 800143c:	f103 0310 	add.w	r3, r3, #16
 8001440:	edc3 7a00 	vstr	s15, [r3]
	} else {
		printf("ERROR: Unexpected division by zero in receiveFFTBlock \r\n");
		return;
	}
	uint16_t offset = blockIndex*N_FFT;
 8001444:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001448:	f833 3c22 	ldrh.w	r3, [r3, #-34]
 800144c:	02db      	lsls	r3, r3, #11
 800144e:	f507 4280 	add.w	r2, r7, #16384	; 0x4000
 8001452:	f102 020e 	add.w	r2, r2, #14
 8001456:	8013      	strh	r3, [r2, #0]
	for (int i = 0; i < N_FFT; i++) {
 8001458:	2300      	movs	r3, #0
 800145a:	f507 4280 	add.w	r2, r7, #16384	; 0x4000
 800145e:	f102 021c 	add.w	r2, r2, #28
 8001462:	6013      	str	r3, [r2, #0]
 8001464:	e063      	b.n	800152e <receiveFFTBlock+0x29a>
		printf("ERROR: Unexpected division by zero in receiveFFTBlock \r\n");
 8001466:	483d      	ldr	r0, [pc, #244]	; (800155c <receiveFFTBlock+0x2c8>)
 8001468:	f00a fcac 	bl	800bdc4 <puts>
		return;
 800146c:	e067      	b.n	800153e <receiveFFTBlock+0x2aa>
		/*[minimum, maximum]  ->  [0, maximum-minimum]*/
		float cur = ifftOutputBuf[i];
 800146e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001472:	461a      	mov	r2, r3
 8001474:	f507 4380 	add.w	r3, r7, #16384	; 0x4000
 8001478:	f103 031c 	add.w	r3, r3, #28
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	009b      	lsls	r3, r3, #2
 8001480:	4413      	add	r3, r2
 8001482:	3b20      	subs	r3, #32
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f507 4280 	add.w	r2, r7, #16384	; 0x4000
 800148a:	f102 0208 	add.w	r2, r2, #8
 800148e:	6013      	str	r3, [r2, #0]
		cur = cur - min_f;
 8001490:	f507 4380 	add.w	r3, r7, #16384	; 0x4000
 8001494:	f103 0308 	add.w	r3, r3, #8
 8001498:	ed93 7a00 	vldr	s14, [r3]
 800149c:	f507 4380 	add.w	r3, r7, #16384	; 0x4000
 80014a0:	f103 0318 	add.w	r3, r3, #24
 80014a4:	edd3 7a00 	vldr	s15, [r3]
 80014a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014ac:	f507 4380 	add.w	r3, r7, #16384	; 0x4000
 80014b0:	f103 0308 	add.w	r3, r3, #8
 80014b4:	edc3 7a00 	vstr	s15, [r3]
		/*[0, maximum-minimum] -> [0, 255]*/
		cur = cur * scalingFactor;
 80014b8:	f507 4380 	add.w	r3, r7, #16384	; 0x4000
 80014bc:	f103 0308 	add.w	r3, r3, #8
 80014c0:	ed93 7a00 	vldr	s14, [r3]
 80014c4:	f507 4380 	add.w	r3, r7, #16384	; 0x4000
 80014c8:	f103 0310 	add.w	r3, r3, #16
 80014cc:	edd3 7a00 	vldr	s15, [r3]
 80014d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014d4:	f507 4380 	add.w	r3, r7, #16384	; 0x4000
 80014d8:	f103 0308 	add.w	r3, r3, #8
 80014dc:	edc3 7a00 	vstr	s15, [r3]
		play[offset+i] = (int32_t) roundf(cur);
 80014e0:	f507 4380 	add.w	r3, r7, #16384	; 0x4000
 80014e4:	f103 0308 	add.w	r3, r3, #8
 80014e8:	ed93 0a00 	vldr	s0, [r3]
 80014ec:	f00c fe0c 	bl	800e108 <roundf>
 80014f0:	eef0 7a40 	vmov.f32	s15, s0
 80014f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014f8:	f507 4380 	add.w	r3, r7, #16384	; 0x4000
 80014fc:	f103 030e 	add.w	r3, r3, #14
 8001500:	881a      	ldrh	r2, [r3, #0]
 8001502:	f507 4380 	add.w	r3, r7, #16384	; 0x4000
 8001506:	f103 031c 	add.w	r3, r3, #28
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4413      	add	r3, r2
 800150e:	ee17 1a90 	vmov	r1, s15
 8001512:	4a13      	ldr	r2, [pc, #76]	; (8001560 <receiveFFTBlock+0x2cc>)
 8001514:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < N_FFT; i++) {
 8001518:	f507 4380 	add.w	r3, r7, #16384	; 0x4000
 800151c:	f103 031c 	add.w	r3, r3, #28
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	3301      	adds	r3, #1
 8001524:	f507 4280 	add.w	r2, r7, #16384	; 0x4000
 8001528:	f102 021c 	add.w	r2, r2, #28
 800152c:	6013      	str	r3, [r2, #0]
 800152e:	f507 4380 	add.w	r3, r7, #16384	; 0x4000
 8001532:	f103 031c 	add.w	r3, r3, #28
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800153c:	db97      	blt.n	800146e <receiveFFTBlock+0x1da>
	}
}
 800153e:	f507 4780 	add.w	r7, r7, #16384	; 0x4000
 8001542:	3728      	adds	r7, #40	; 0x28
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	200007cc 	.word	0x200007cc
 800154c:	200003b0 	.word	0x200003b0
 8001550:	0800e41c 	.word	0x0800e41c
 8001554:	7f7fffff 	.word	0x7f7fffff
 8001558:	437f0000 	.word	0x437f0000
 800155c:	0800e448 	.word	0x0800e448
 8001560:	20000bb4 	.word	0x20000bb4

08001564 <SystemClock_Config>:
 *            Flash Latency(WS)              = 4
 * @param  None
 * @retval None
 */
static void SystemClock_Config(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b096      	sub	sp, #88	; 0x58
 8001568:	af00      	add	r7, sp, #0
	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_OscInitTypeDef RCC_OscInitStruct;

	/* MSI is enabled after System reset, activate PLL with MSI as source */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800156a:	2310      	movs	r3, #16
 800156c:	603b      	str	r3, [r7, #0]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800156e:	2301      	movs	r3, #1
 8001570:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001572:	2360      	movs	r3, #96	; 0x60
 8001574:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001576:	2300      	movs	r3, #0
 8001578:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800157a:	2302      	movs	r3, #2
 800157c:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800157e:	2301      	movs	r3, #1
 8001580:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLM = 1;
 8001582:	2301      	movs	r3, #1
 8001584:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLN = 40;
 8001586:	2328      	movs	r3, #40	; 0x28
 8001588:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLR = 2;
 800158a:	2302      	movs	r3, #2
 800158c:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = 7;
 800158e:	2307      	movs	r3, #7
 8001590:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8001592:	2304      	movs	r3, #4
 8001594:	63fb      	str	r3, [r7, #60]	; 0x3c
	if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001596:	463b      	mov	r3, r7
 8001598:	4618      	mov	r0, r3
 800159a:	f003 fee3 	bl	8005364 <HAL_RCC_OscConfig>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d000      	beq.n	80015a6 <SystemClock_Config+0x42>
	{
		/* Initialization Error */
		while(1);
 80015a4:	e7fe      	b.n	80015a4 <SystemClock_Config+0x40>
	}

	/* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
	RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80015a6:	230f      	movs	r3, #15
 80015a8:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015aa:	2303      	movs	r3, #3
 80015ac:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015ae:	2300      	movs	r3, #0
 80015b0:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015b2:	2300      	movs	r3, #0
 80015b4:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015b6:	2300      	movs	r3, #0
 80015b8:	657b      	str	r3, [r7, #84]	; 0x54
	if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80015ba:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80015be:	2104      	movs	r1, #4
 80015c0:	4618      	mov	r0, r3
 80015c2:	f004 fae9 	bl	8005b98 <HAL_RCC_ClockConfig>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d000      	beq.n	80015ce <SystemClock_Config+0x6a>
	{
		/* Initialization Error */
		while(1);
 80015cc:	e7fe      	b.n	80015cc <SystemClock_Config+0x68>
	}
}
 80015ce:	bf00      	nop
 80015d0:	3758      	adds	r7, #88	; 0x58
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
	...

080015d8 <MX_DAC1_Init>:

static void MX_DAC1_Init(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b08a      	sub	sp, #40	; 0x28
 80015dc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN DAC1_Init 0 */

	/* USER CODE END DAC1_Init 0 */

	DAC_ChannelConfTypeDef sConfig = {0};
 80015de:	463b      	mov	r3, r7
 80015e0:	2228      	movs	r2, #40	; 0x28
 80015e2:	2100      	movs	r1, #0
 80015e4:	4618      	mov	r0, r3
 80015e6:	f00a fcfd 	bl	800bfe4 <memset>

	/* USER CODE END DAC1_Init 1 */

	/** DAC Initialization
	 */
	hdac1.Instance = DAC1;
 80015ea:	4b1a      	ldr	r3, [pc, #104]	; (8001654 <MX_DAC1_Init+0x7c>)
 80015ec:	4a1a      	ldr	r2, [pc, #104]	; (8001658 <MX_DAC1_Init+0x80>)
 80015ee:	601a      	str	r2, [r3, #0]
	if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80015f0:	4818      	ldr	r0, [pc, #96]	; (8001654 <MX_DAC1_Init+0x7c>)
 80015f2:	f002 fc8a 	bl	8003f0a <HAL_DAC_Init>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d001      	beq.n	8001600 <MX_DAC1_Init+0x28>
	{
		Error_Handler();
 80015fc:	f000 f96d 	bl	80018da <Error_Handler>
	}

	/** DAC channel OUT1 config
	 */
	sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001600:	2300      	movs	r3, #0
 8001602:	607b      	str	r3, [r7, #4]
	sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8001604:	230a      	movs	r3, #10
 8001606:	60bb      	str	r3, [r7, #8]
	sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8001608:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800160c:	603b      	str	r3, [r7, #0]
	sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800160e:	2300      	movs	r3, #0
 8001610:	60fb      	str	r3, [r7, #12]
	sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001612:	2300      	movs	r3, #0
 8001614:	613b      	str	r3, [r7, #16]
	sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001616:	2300      	movs	r3, #0
 8001618:	617b      	str	r3, [r7, #20]
	if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800161a:	463b      	mov	r3, r7
 800161c:	2200      	movs	r2, #0
 800161e:	4619      	mov	r1, r3
 8001620:	480c      	ldr	r0, [pc, #48]	; (8001654 <MX_DAC1_Init+0x7c>)
 8001622:	f002 fdd1 	bl	80041c8 <HAL_DAC_ConfigChannel>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <MX_DAC1_Init+0x58>
	{
		Error_Handler();
 800162c:	f000 f955 	bl	80018da <Error_Handler>
	}

	/** DAC channel OUT2 config
	 */
	sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001630:	2300      	movs	r3, #0
 8001632:	60bb      	str	r3, [r7, #8]
	if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001634:	463b      	mov	r3, r7
 8001636:	2210      	movs	r2, #16
 8001638:	4619      	mov	r1, r3
 800163a:	4806      	ldr	r0, [pc, #24]	; (8001654 <MX_DAC1_Init+0x7c>)
 800163c:	f002 fdc4 	bl	80041c8 <HAL_DAC_ConfigChannel>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <MX_DAC1_Init+0x72>
	{
		Error_Handler();
 8001646:	f000 f948 	bl	80018da <Error_Handler>
	}
	/* USER CODE BEGIN DAC1_Init 2 */

	/* USER CODE END DAC1_Init 2 */

}
 800164a:	bf00      	nop
 800164c:	3728      	adds	r7, #40	; 0x28
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	20000204 	.word	0x20000204
 8001658:	40007400 	.word	0x40007400

0800165c <MX_DFSDM1_Init>:
 * @brief DFSDM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_DFSDM1_Init(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
	/* USER CODE END DFSDM1_Init 0 */

	/* USER CODE BEGIN DFSDM1_Init 1 */

	/* USER CODE END DFSDM1_Init 1 */
	hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 8001660:	4b2b      	ldr	r3, [pc, #172]	; (8001710 <MX_DFSDM1_Init+0xb4>)
 8001662:	4a2c      	ldr	r2, [pc, #176]	; (8001714 <MX_DFSDM1_Init+0xb8>)
 8001664:	601a      	str	r2, [r3, #0]
	hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 8001666:	4b2a      	ldr	r3, [pc, #168]	; (8001710 <MX_DFSDM1_Init+0xb4>)
 8001668:	2200      	movs	r2, #0
 800166a:	605a      	str	r2, [r3, #4]
	hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 800166c:	4b28      	ldr	r3, [pc, #160]	; (8001710 <MX_DFSDM1_Init+0xb4>)
 800166e:	2201      	movs	r2, #1
 8001670:	721a      	strb	r2, [r3, #8]
	hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 8001672:	4b27      	ldr	r3, [pc, #156]	; (8001710 <MX_DFSDM1_Init+0xb4>)
 8001674:	2201      	movs	r2, #1
 8001676:	725a      	strb	r2, [r3, #9]
	hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_FASTSINC_ORDER;
 8001678:	4b25      	ldr	r3, [pc, #148]	; (8001710 <MX_DFSDM1_Init+0xb4>)
 800167a:	2200      	movs	r2, #0
 800167c:	61da      	str	r2, [r3, #28]
	hdfsdm1_filter0.Init.FilterParam.Oversampling = 100;
 800167e:	4b24      	ldr	r3, [pc, #144]	; (8001710 <MX_DFSDM1_Init+0xb4>)
 8001680:	2264      	movs	r2, #100	; 0x64
 8001682:	621a      	str	r2, [r3, #32]
	hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 8001684:	4b22      	ldr	r3, [pc, #136]	; (8001710 <MX_DFSDM1_Init+0xb4>)
 8001686:	2201      	movs	r2, #1
 8001688:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_DFSDM_FilterInit(&hdfsdm1_filter0) != HAL_OK)
 800168a:	4821      	ldr	r0, [pc, #132]	; (8001710 <MX_DFSDM1_Init+0xb4>)
 800168c:	f003 f832 	bl	80046f4 <HAL_DFSDM_FilterInit>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <MX_DFSDM1_Init+0x3e>
	{
		Error_Handler();
 8001696:	f000 f920 	bl	80018da <Error_Handler>
	}
	hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 800169a:	4b1f      	ldr	r3, [pc, #124]	; (8001718 <MX_DFSDM1_Init+0xbc>)
 800169c:	4a1f      	ldr	r2, [pc, #124]	; (800171c <MX_DFSDM1_Init+0xc0>)
 800169e:	601a      	str	r2, [r3, #0]
	hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 80016a0:	4b1d      	ldr	r3, [pc, #116]	; (8001718 <MX_DFSDM1_Init+0xbc>)
 80016a2:	2201      	movs	r2, #1
 80016a4:	711a      	strb	r2, [r3, #4]
	hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80016a6:	4b1c      	ldr	r3, [pc, #112]	; (8001718 <MX_DFSDM1_Init+0xbc>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	609a      	str	r2, [r3, #8]
	hdfsdm1_channel2.Init.OutputClock.Divider = CLOCK_DIVIDER_DFSDM;
 80016ac:	4b1a      	ldr	r3, [pc, #104]	; (8001718 <MX_DFSDM1_Init+0xbc>)
 80016ae:	2264      	movs	r2, #100	; 0x64
 80016b0:	60da      	str	r2, [r3, #12]
	hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80016b2:	4b19      	ldr	r3, [pc, #100]	; (8001718 <MX_DFSDM1_Init+0xbc>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	611a      	str	r2, [r3, #16]
	hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80016b8:	4b17      	ldr	r3, [pc, #92]	; (8001718 <MX_DFSDM1_Init+0xbc>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	615a      	str	r2, [r3, #20]
	hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 80016be:	4b16      	ldr	r3, [pc, #88]	; (8001718 <MX_DFSDM1_Init+0xbc>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	619a      	str	r2, [r3, #24]
	hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80016c4:	4b14      	ldr	r3, [pc, #80]	; (8001718 <MX_DFSDM1_Init+0xbc>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	61da      	str	r2, [r3, #28]
	hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80016ca:	4b13      	ldr	r3, [pc, #76]	; (8001718 <MX_DFSDM1_Init+0xbc>)
 80016cc:	2204      	movs	r2, #4
 80016ce:	621a      	str	r2, [r3, #32]
	hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80016d0:	4b11      	ldr	r3, [pc, #68]	; (8001718 <MX_DFSDM1_Init+0xbc>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	625a      	str	r2, [r3, #36]	; 0x24
	hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 80016d6:	4b10      	ldr	r3, [pc, #64]	; (8001718 <MX_DFSDM1_Init+0xbc>)
 80016d8:	2201      	movs	r2, #1
 80016da:	629a      	str	r2, [r3, #40]	; 0x28
	hdfsdm1_channel2.Init.Offset = 0;
 80016dc:	4b0e      	ldr	r3, [pc, #56]	; (8001718 <MX_DFSDM1_Init+0xbc>)
 80016de:	2200      	movs	r2, #0
 80016e0:	62da      	str	r2, [r3, #44]	; 0x2c
	hdfsdm1_channel2.Init.RightBitShift = 0x00;
 80016e2:	4b0d      	ldr	r3, [pc, #52]	; (8001718 <MX_DFSDM1_Init+0xbc>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 80016e8:	480b      	ldr	r0, [pc, #44]	; (8001718 <MX_DFSDM1_Init+0xbc>)
 80016ea:	f002 ff43 	bl	8004574 <HAL_DFSDM_ChannelInit>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <MX_DFSDM1_Init+0x9c>
	{
		Error_Handler();
 80016f4:	f000 f8f1 	bl	80018da <Error_Handler>
	}
	if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_2, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 80016f8:	2201      	movs	r2, #1
 80016fa:	4909      	ldr	r1, [pc, #36]	; (8001720 <MX_DFSDM1_Init+0xc4>)
 80016fc:	4804      	ldr	r0, [pc, #16]	; (8001710 <MX_DFSDM1_Init+0xb4>)
 80016fe:	f003 f8d3 	bl	80048a8 <HAL_DFSDM_FilterConfigRegChannel>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <MX_DFSDM1_Init+0xb0>
	{
		Error_Handler();
 8001708:	f000 f8e7 	bl	80018da <Error_Handler>
	}
	/* USER CODE BEGIN DFSDM1_Init 2 */

	/* USER CODE END DFSDM1_Init 2 */

}
 800170c:	bf00      	nop
 800170e:	bd80      	pop	{r7, pc}
 8001710:	20000278 	.word	0x20000278
 8001714:	40016100 	.word	0x40016100
 8001718:	200002cc 	.word	0x200002cc
 800171c:	40016040 	.word	0x40016040
 8001720:	00020004 	.word	0x00020004

08001724 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b088      	sub	sp, #32
 8001728:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800172a:	f107 0310 	add.w	r3, r7, #16
 800172e:	2200      	movs	r2, #0
 8001730:	601a      	str	r2, [r3, #0]
 8001732:	605a      	str	r2, [r3, #4]
 8001734:	609a      	str	r2, [r3, #8]
 8001736:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001738:	1d3b      	adds	r3, r7, #4
 800173a:	2200      	movs	r2, #0
 800173c:	601a      	str	r2, [r3, #0]
 800173e:	605a      	str	r2, [r3, #4]
 8001740:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8001742:	4b1e      	ldr	r3, [pc, #120]	; (80017bc <MX_TIM2_Init+0x98>)
 8001744:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001748:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 800174a:	4b1c      	ldr	r3, [pc, #112]	; (80017bc <MX_TIM2_Init+0x98>)
 800174c:	2200      	movs	r2, #0
 800174e:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001750:	4b1a      	ldr	r3, [pc, #104]	; (80017bc <MX_TIM2_Init+0x98>)
 8001752:	2200      	movs	r2, #0
 8001754:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = SAMPLING_RATE_FACTOR_DAC;
 8001756:	4b19      	ldr	r3, [pc, #100]	; (80017bc <MX_TIM2_Init+0x98>)
 8001758:	f242 7210 	movw	r2, #10000	; 0x2710
 800175c:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800175e:	4b17      	ldr	r3, [pc, #92]	; (80017bc <MX_TIM2_Init+0x98>)
 8001760:	2200      	movs	r2, #0
 8001762:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001764:	4b15      	ldr	r3, [pc, #84]	; (80017bc <MX_TIM2_Init+0x98>)
 8001766:	2200      	movs	r2, #0
 8001768:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800176a:	4814      	ldr	r0, [pc, #80]	; (80017bc <MX_TIM2_Init+0x98>)
 800176c:	f007 f8e3 	bl	8008936 <HAL_TIM_Base_Init>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <MX_TIM2_Init+0x56>
	{
		Error_Handler();
 8001776:	f000 f8b0 	bl	80018da <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800177a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800177e:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001780:	f107 0310 	add.w	r3, r7, #16
 8001784:	4619      	mov	r1, r3
 8001786:	480d      	ldr	r0, [pc, #52]	; (80017bc <MX_TIM2_Init+0x98>)
 8001788:	f007 fa9e 	bl	8008cc8 <HAL_TIM_ConfigClockSource>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <MX_TIM2_Init+0x72>
	{
		Error_Handler();
 8001792:	f000 f8a2 	bl	80018da <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001796:	2320      	movs	r3, #32
 8001798:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800179a:	2300      	movs	r3, #0
 800179c:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800179e:	1d3b      	adds	r3, r7, #4
 80017a0:	4619      	mov	r1, r3
 80017a2:	4806      	ldr	r0, [pc, #24]	; (80017bc <MX_TIM2_Init+0x98>)
 80017a4:	f007 fcb6 	bl	8009114 <HAL_TIMEx_MasterConfigSynchronization>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <MX_TIM2_Init+0x8e>
	{
		Error_Handler();
 80017ae:	f000 f894 	bl	80018da <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 80017b2:	bf00      	nop
 80017b4:	3720      	adds	r7, #32
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	20000364 	.word	0x20000364

080017c0 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMAMUX1_CLK_ENABLE();
 80017c6:	4b16      	ldr	r3, [pc, #88]	; (8001820 <MX_DMA_Init+0x60>)
 80017c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017ca:	4a15      	ldr	r2, [pc, #84]	; (8001820 <MX_DMA_Init+0x60>)
 80017cc:	f043 0304 	orr.w	r3, r3, #4
 80017d0:	6493      	str	r3, [r2, #72]	; 0x48
 80017d2:	4b13      	ldr	r3, [pc, #76]	; (8001820 <MX_DMA_Init+0x60>)
 80017d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017d6:	f003 0304 	and.w	r3, r3, #4
 80017da:	607b      	str	r3, [r7, #4]
 80017dc:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA1_CLK_ENABLE();
 80017de:	4b10      	ldr	r3, [pc, #64]	; (8001820 <MX_DMA_Init+0x60>)
 80017e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017e2:	4a0f      	ldr	r2, [pc, #60]	; (8001820 <MX_DMA_Init+0x60>)
 80017e4:	f043 0301 	orr.w	r3, r3, #1
 80017e8:	6493      	str	r3, [r2, #72]	; 0x48
 80017ea:	4b0d      	ldr	r3, [pc, #52]	; (8001820 <MX_DMA_Init+0x60>)
 80017ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017ee:	f003 0301 	and.w	r3, r3, #1
 80017f2:	603b      	str	r3, [r7, #0]
 80017f4:	683b      	ldr	r3, [r7, #0]

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80017f6:	2200      	movs	r2, #0
 80017f8:	2100      	movs	r1, #0
 80017fa:	200b      	movs	r0, #11
 80017fc:	f002 fb4f 	bl	8003e9e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001800:	200b      	movs	r0, #11
 8001802:	f002 fb68 	bl	8003ed6 <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001806:	2200      	movs	r2, #0
 8001808:	2100      	movs	r1, #0
 800180a:	200c      	movs	r0, #12
 800180c:	f002 fb47 	bl	8003e9e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001810:	200c      	movs	r0, #12
 8001812:	f002 fb60 	bl	8003ed6 <HAL_NVIC_EnableIRQ>

}
 8001816:	bf00      	nop
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	40021000 	.word	0x40021000

08001824 <__io_putchar>:
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 */
PUTCHAR_PROTOTYPE
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the USART1 and Loop until the end of transmission */
	HAL_UART_Transmit(&hDiscoUart, (uint8_t *)&ch, 1, 0xFFFF);
 800182c:	1d39      	adds	r1, r7, #4
 800182e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001832:	2201      	movs	r2, #1
 8001834:	4803      	ldr	r0, [pc, #12]	; (8001844 <__io_putchar+0x20>)
 8001836:	f007 fd6d 	bl	8009314 <HAL_UART_Transmit>

	return ch;
 800183a:	687b      	ldr	r3, [r7, #4]
}
 800183c:	4618      	mov	r0, r3
 800183e:	3708      	adds	r7, #8
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	2002953c 	.word	0x2002953c

08001848 <__io_getchar>:
 * @brief  Retargets the C library scanf function to the USART.
 * @param  None
 * @retval None
 */
GETCHAR_PROTOTYPE
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
	/* Place your implementation of fgetc here */
	/* e.g. read a character on USART and loop until the end of read */
	uint8_t ch = 0;
 800184e:	2300      	movs	r3, #0
 8001850:	71fb      	strb	r3, [r7, #7]
	while (HAL_OK != HAL_UART_Receive(&hDiscoUart, (uint8_t *)&ch, 1, 40000))
 8001852:	bf00      	nop
 8001854:	1df9      	adds	r1, r7, #7
 8001856:	f649 4340 	movw	r3, #40000	; 0x9c40
 800185a:	2201      	movs	r2, #1
 800185c:	4805      	ldr	r0, [pc, #20]	; (8001874 <__io_getchar+0x2c>)
 800185e:	f007 fde8 	bl	8009432 <HAL_UART_Receive>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d1f5      	bne.n	8001854 <__io_getchar+0xc>
	{
		;
	}
	return ch;
 8001868:	79fb      	ldrb	r3, [r7, #7]
}
 800186a:	4618      	mov	r0, r3
 800186c:	3708      	adds	r7, #8
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	2002953c 	.word	0x2002953c

08001878 <HAL_GPIO_EXTI_Callback>:
 * @brief  EXTI line detection callback.
 * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
 * @retval None
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	4603      	mov	r3, r0
 8001880:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin)
 8001882:	88fb      	ldrh	r3, [r7, #6]
 8001884:	2b02      	cmp	r3, #2
 8001886:	d005      	beq.n	8001894 <HAL_GPIO_EXTI_Callback+0x1c>
 8001888:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800188c:	d105      	bne.n	800189a <HAL_GPIO_EXTI_Callback+0x22>
	{
	case (USER_BUTTON_PIN):
    				{
		Button_ISR();
 800188e:	f000 f813 	bl	80018b8 <Button_ISR>
		break;
 8001892:	e003      	b.n	800189c <HAL_GPIO_EXTI_Callback+0x24>
    				}
	case (GPIO_PIN_1):
    				{
		SPI_WIFI_ISR();
 8001894:	f001 ff28 	bl	80036e8 <SPI_WIFI_ISR>
		break;
 8001898:	e000      	b.n	800189c <HAL_GPIO_EXTI_Callback+0x24>
    				}
	default:
	{
		break;
 800189a:	bf00      	nop
	}
	}
}
 800189c:	bf00      	nop
 800189e:	3708      	adds	r7, #8
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}

080018a4 <SPI3_IRQHandler>:
 * @brief  SPI3 line detection callback.
 * @param  None
 * @retval None
 */
void SPI3_IRQHandler(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
	HAL_SPI_IRQHandler(&hspi);
 80018a8:	4802      	ldr	r0, [pc, #8]	; (80018b4 <SPI3_IRQHandler+0x10>)
 80018aa:	f006 f9cd 	bl	8007c48 <HAL_SPI_IRQHandler>
}
 80018ae:	bf00      	nop
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	20028bc8 	.word	0x20028bc8

080018b8 <Button_ISR>:

/**
 * @brief Update button ISR status
 */
static void Button_ISR(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0

}
 80018bc:	bf00      	nop
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr

080018c6 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *htim) {
 80018c6:	b480      	push	{r7}
 80018c8:	b083      	sub	sp, #12
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	6078      	str	r0, [r7, #4]
	//int test;
}
 80018ce:	bf00      	nop
 80018d0:	370c      	adds	r7, #12
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr

080018da <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80018da:	b480      	push	{r7}
 80018dc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018de:	b672      	cpsid	i
}
 80018e0:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80018e2:	e7fe      	b.n	80018e2 <Error_Handler+0x8>

080018e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ea:	4b0f      	ldr	r3, [pc, #60]	; (8001928 <HAL_MspInit+0x44>)
 80018ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018ee:	4a0e      	ldr	r2, [pc, #56]	; (8001928 <HAL_MspInit+0x44>)
 80018f0:	f043 0301 	orr.w	r3, r3, #1
 80018f4:	6613      	str	r3, [r2, #96]	; 0x60
 80018f6:	4b0c      	ldr	r3, [pc, #48]	; (8001928 <HAL_MspInit+0x44>)
 80018f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018fa:	f003 0301 	and.w	r3, r3, #1
 80018fe:	607b      	str	r3, [r7, #4]
 8001900:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001902:	4b09      	ldr	r3, [pc, #36]	; (8001928 <HAL_MspInit+0x44>)
 8001904:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001906:	4a08      	ldr	r2, [pc, #32]	; (8001928 <HAL_MspInit+0x44>)
 8001908:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800190c:	6593      	str	r3, [r2, #88]	; 0x58
 800190e:	4b06      	ldr	r3, [pc, #24]	; (8001928 <HAL_MspInit+0x44>)
 8001910:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001912:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001916:	603b      	str	r3, [r7, #0]
 8001918:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800191a:	bf00      	nop
 800191c:	370c      	adds	r7, #12
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	40021000 	.word	0x40021000

0800192c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b08a      	sub	sp, #40	; 0x28
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001934:	f107 0314 	add.w	r3, r7, #20
 8001938:	2200      	movs	r2, #0
 800193a:	601a      	str	r2, [r3, #0]
 800193c:	605a      	str	r2, [r3, #4]
 800193e:	609a      	str	r2, [r3, #8]
 8001940:	60da      	str	r2, [r3, #12]
 8001942:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a2a      	ldr	r2, [pc, #168]	; (80019f4 <HAL_DAC_MspInit+0xc8>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d14e      	bne.n	80019ec <HAL_DAC_MspInit+0xc0>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800194e:	4b2a      	ldr	r3, [pc, #168]	; (80019f8 <HAL_DAC_MspInit+0xcc>)
 8001950:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001952:	4a29      	ldr	r2, [pc, #164]	; (80019f8 <HAL_DAC_MspInit+0xcc>)
 8001954:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001958:	6593      	str	r3, [r2, #88]	; 0x58
 800195a:	4b27      	ldr	r3, [pc, #156]	; (80019f8 <HAL_DAC_MspInit+0xcc>)
 800195c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800195e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001962:	613b      	str	r3, [r7, #16]
 8001964:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001966:	4b24      	ldr	r3, [pc, #144]	; (80019f8 <HAL_DAC_MspInit+0xcc>)
 8001968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800196a:	4a23      	ldr	r2, [pc, #140]	; (80019f8 <HAL_DAC_MspInit+0xcc>)
 800196c:	f043 0301 	orr.w	r3, r3, #1
 8001970:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001972:	4b21      	ldr	r3, [pc, #132]	; (80019f8 <HAL_DAC_MspInit+0xcc>)
 8001974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001976:	f003 0301 	and.w	r3, r3, #1
 800197a:	60fb      	str	r3, [r7, #12]
 800197c:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800197e:	2330      	movs	r3, #48	; 0x30
 8001980:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001982:	2303      	movs	r3, #3
 8001984:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001986:	2300      	movs	r3, #0
 8001988:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800198a:	f107 0314 	add.w	r3, r7, #20
 800198e:	4619      	mov	r1, r3
 8001990:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001994:	f003 faec 	bl	8004f70 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel1;
 8001998:	4b18      	ldr	r3, [pc, #96]	; (80019fc <HAL_DAC_MspInit+0xd0>)
 800199a:	4a19      	ldr	r2, [pc, #100]	; (8001a00 <HAL_DAC_MspInit+0xd4>)
 800199c:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CH1;
 800199e:	4b17      	ldr	r3, [pc, #92]	; (80019fc <HAL_DAC_MspInit+0xd0>)
 80019a0:	2206      	movs	r2, #6
 80019a2:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80019a4:	4b15      	ldr	r3, [pc, #84]	; (80019fc <HAL_DAC_MspInit+0xd0>)
 80019a6:	2210      	movs	r2, #16
 80019a8:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80019aa:	4b14      	ldr	r3, [pc, #80]	; (80019fc <HAL_DAC_MspInit+0xd0>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80019b0:	4b12      	ldr	r3, [pc, #72]	; (80019fc <HAL_DAC_MspInit+0xd0>)
 80019b2:	2280      	movs	r2, #128	; 0x80
 80019b4:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80019b6:	4b11      	ldr	r3, [pc, #68]	; (80019fc <HAL_DAC_MspInit+0xd0>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80019bc:	4b0f      	ldr	r3, [pc, #60]	; (80019fc <HAL_DAC_MspInit+0xd0>)
 80019be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80019c2:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_NORMAL;
 80019c4:	4b0d      	ldr	r3, [pc, #52]	; (80019fc <HAL_DAC_MspInit+0xd0>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80019ca:	4b0c      	ldr	r3, [pc, #48]	; (80019fc <HAL_DAC_MspInit+0xd0>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 80019d0:	480a      	ldr	r0, [pc, #40]	; (80019fc <HAL_DAC_MspInit+0xd0>)
 80019d2:	f002 fffb 	bl	80049cc <HAL_DMA_Init>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d001      	beq.n	80019e0 <HAL_DAC_MspInit+0xb4>
    {
      Error_Handler();
 80019dc:	f7ff ff7d 	bl	80018da <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	4a06      	ldr	r2, [pc, #24]	; (80019fc <HAL_DAC_MspInit+0xd0>)
 80019e4:	609a      	str	r2, [r3, #8]
 80019e6:	4a05      	ldr	r2, [pc, #20]	; (80019fc <HAL_DAC_MspInit+0xd0>)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80019ec:	bf00      	nop
 80019ee:	3728      	adds	r7, #40	; 0x28
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	40007400 	.word	0x40007400
 80019f8:	40021000 	.word	0x40021000
 80019fc:	20000218 	.word	0x20000218
 8001a00:	40020008 	.word	0x40020008

08001a04 <HAL_DFSDM_FilterMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_filter: DFSDM_Filter handle pointer
* @retval None
*/
void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b0ae      	sub	sp, #184	; 0xb8
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a0c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001a10:	2200      	movs	r2, #0
 8001a12:	601a      	str	r2, [r3, #0]
 8001a14:	605a      	str	r2, [r3, #4]
 8001a16:	609a      	str	r2, [r3, #8]
 8001a18:	60da      	str	r2, [r3, #12]
 8001a1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a1c:	f107 0310 	add.w	r3, r7, #16
 8001a20:	2294      	movs	r2, #148	; 0x94
 8001a22:	2100      	movs	r1, #0
 8001a24:	4618      	mov	r0, r3
 8001a26:	f00a fadd 	bl	800bfe4 <memset>
  if(DFSDM1_Init == 0)
 8001a2a:	4b45      	ldr	r3, [pc, #276]	; (8001b40 <HAL_DFSDM_FilterMspInit+0x13c>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d14b      	bne.n	8001aca <HAL_DFSDM_FilterMspInit+0xc6>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8001a32:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a36:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a3e:	f107 0310 	add.w	r3, r7, #16
 8001a42:	4618      	mov	r0, r3
 8001a44:	f004 fb66 	bl	8006114 <HAL_RCCEx_PeriphCLKConfig>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d001      	beq.n	8001a52 <HAL_DFSDM_FilterMspInit+0x4e>
    {
      Error_Handler();
 8001a4e:	f7ff ff44 	bl	80018da <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8001a52:	4b3c      	ldr	r3, [pc, #240]	; (8001b44 <HAL_DFSDM_FilterMspInit+0x140>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	3301      	adds	r3, #1
 8001a58:	4a3a      	ldr	r2, [pc, #232]	; (8001b44 <HAL_DFSDM_FilterMspInit+0x140>)
 8001a5a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8001a5c:	4b39      	ldr	r3, [pc, #228]	; (8001b44 <HAL_DFSDM_FilterMspInit+0x140>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	d10b      	bne.n	8001a7c <HAL_DFSDM_FilterMspInit+0x78>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001a64:	4b38      	ldr	r3, [pc, #224]	; (8001b48 <HAL_DFSDM_FilterMspInit+0x144>)
 8001a66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a68:	4a37      	ldr	r2, [pc, #220]	; (8001b48 <HAL_DFSDM_FilterMspInit+0x144>)
 8001a6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a6e:	6613      	str	r3, [r2, #96]	; 0x60
 8001a70:	4b35      	ldr	r3, [pc, #212]	; (8001b48 <HAL_DFSDM_FilterMspInit+0x144>)
 8001a72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a78:	60fb      	str	r3, [r7, #12]
 8001a7a:	68fb      	ldr	r3, [r7, #12]
    }

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a7c:	4b32      	ldr	r3, [pc, #200]	; (8001b48 <HAL_DFSDM_FilterMspInit+0x144>)
 8001a7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a80:	4a31      	ldr	r2, [pc, #196]	; (8001b48 <HAL_DFSDM_FilterMspInit+0x144>)
 8001a82:	f043 0310 	orr.w	r3, r3, #16
 8001a86:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a88:	4b2f      	ldr	r3, [pc, #188]	; (8001b48 <HAL_DFSDM_FilterMspInit+0x144>)
 8001a8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a8c:	f003 0310 	and.w	r3, r3, #16
 8001a90:	60bb      	str	r3, [r7, #8]
 8001a92:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8001a94:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001a98:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a9c:	2302      	movs	r3, #2
 8001a9e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001aae:	2306      	movs	r3, #6
 8001ab0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ab4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001ab8:	4619      	mov	r1, r3
 8001aba:	4824      	ldr	r0, [pc, #144]	; (8001b4c <HAL_DFSDM_FilterMspInit+0x148>)
 8001abc:	f003 fa58 	bl	8004f70 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8001ac0:	4b1f      	ldr	r3, [pc, #124]	; (8001b40 <HAL_DFSDM_FilterMspInit+0x13c>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	3301      	adds	r3, #1
 8001ac6:	4a1e      	ldr	r2, [pc, #120]	; (8001b40 <HAL_DFSDM_FilterMspInit+0x13c>)
 8001ac8:	6013      	str	r3, [r2, #0]
  }

    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(hdfsdm_filter->Instance == DFSDM1_Filter0){
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a20      	ldr	r2, [pc, #128]	; (8001b50 <HAL_DFSDM_FilterMspInit+0x14c>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d130      	bne.n	8001b36 <HAL_DFSDM_FilterMspInit+0x132>
    hdma_dfsdm1_flt0.Instance = DMA1_Channel2;
 8001ad4:	4b1f      	ldr	r3, [pc, #124]	; (8001b54 <HAL_DFSDM_FilterMspInit+0x150>)
 8001ad6:	4a20      	ldr	r2, [pc, #128]	; (8001b58 <HAL_DFSDM_FilterMspInit+0x154>)
 8001ad8:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt0.Init.Request = DMA_REQUEST_DFSDM1_FLT0;
 8001ada:	4b1e      	ldr	r3, [pc, #120]	; (8001b54 <HAL_DFSDM_FilterMspInit+0x150>)
 8001adc:	2256      	movs	r2, #86	; 0x56
 8001ade:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ae0:	4b1c      	ldr	r3, [pc, #112]	; (8001b54 <HAL_DFSDM_FilterMspInit+0x150>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ae6:	4b1b      	ldr	r3, [pc, #108]	; (8001b54 <HAL_DFSDM_FilterMspInit+0x150>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 8001aec:	4b19      	ldr	r3, [pc, #100]	; (8001b54 <HAL_DFSDM_FilterMspInit+0x150>)
 8001aee:	2280      	movs	r2, #128	; 0x80
 8001af0:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001af2:	4b18      	ldr	r3, [pc, #96]	; (8001b54 <HAL_DFSDM_FilterMspInit+0x150>)
 8001af4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001af8:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001afa:	4b16      	ldr	r3, [pc, #88]	; (8001b54 <HAL_DFSDM_FilterMspInit+0x150>)
 8001afc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b00:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_NORMAL;
 8001b02:	4b14      	ldr	r3, [pc, #80]	; (8001b54 <HAL_DFSDM_FilterMspInit+0x150>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_LOW;
 8001b08:	4b12      	ldr	r3, [pc, #72]	; (8001b54 <HAL_DFSDM_FilterMspInit+0x150>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 8001b0e:	4811      	ldr	r0, [pc, #68]	; (8001b54 <HAL_DFSDM_FilterMspInit+0x150>)
 8001b10:	f002 ff5c 	bl	80049cc <HAL_DMA_Init>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d001      	beq.n	8001b1e <HAL_DFSDM_FilterMspInit+0x11a>
    {
      Error_Handler();
 8001b1a:	f7ff fede 	bl	80018da <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hdfsdm_filter,hdmaInj,hdma_dfsdm1_flt0);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	4a0c      	ldr	r2, [pc, #48]	; (8001b54 <HAL_DFSDM_FilterMspInit+0x150>)
 8001b22:	62da      	str	r2, [r3, #44]	; 0x2c
 8001b24:	4a0b      	ldr	r2, [pc, #44]	; (8001b54 <HAL_DFSDM_FilterMspInit+0x150>)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(hdfsdm_filter,hdmaReg,hdma_dfsdm1_flt0);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4a09      	ldr	r2, [pc, #36]	; (8001b54 <HAL_DFSDM_FilterMspInit+0x150>)
 8001b2e:	629a      	str	r2, [r3, #40]	; 0x28
 8001b30:	4a08      	ldr	r2, [pc, #32]	; (8001b54 <HAL_DFSDM_FilterMspInit+0x150>)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6293      	str	r3, [r2, #40]	; 0x28
  }

}
 8001b36:	bf00      	nop
 8001b38:	37b8      	adds	r7, #184	; 0xb8
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	20028bbc 	.word	0x20028bbc
 8001b44:	20028bb8 	.word	0x20028bb8
 8001b48:	40021000 	.word	0x40021000
 8001b4c:	48001000 	.word	0x48001000
 8001b50:	40016100 	.word	0x40016100
 8001b54:	20000304 	.word	0x20000304
 8001b58:	4002001c 	.word	0x4002001c

08001b5c <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b0ae      	sub	sp, #184	; 0xb8
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b64:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001b68:	2200      	movs	r2, #0
 8001b6a:	601a      	str	r2, [r3, #0]
 8001b6c:	605a      	str	r2, [r3, #4]
 8001b6e:	609a      	str	r2, [r3, #8]
 8001b70:	60da      	str	r2, [r3, #12]
 8001b72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b74:	f107 0310 	add.w	r3, r7, #16
 8001b78:	2294      	movs	r2, #148	; 0x94
 8001b7a:	2100      	movs	r1, #0
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f00a fa31 	bl	800bfe4 <memset>
  if(DFSDM1_Init == 0)
 8001b82:	4b2a      	ldr	r3, [pc, #168]	; (8001c2c <HAL_DFSDM_ChannelMspInit+0xd0>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d14b      	bne.n	8001c22 <HAL_DFSDM_ChannelMspInit+0xc6>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8001b8a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b8e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001b90:	2300      	movs	r3, #0
 8001b92:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b96:	f107 0310 	add.w	r3, r7, #16
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f004 faba 	bl	8006114 <HAL_RCCEx_PeriphCLKConfig>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d001      	beq.n	8001baa <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8001ba6:	f7ff fe98 	bl	80018da <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8001baa:	4b21      	ldr	r3, [pc, #132]	; (8001c30 <HAL_DFSDM_ChannelMspInit+0xd4>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	3301      	adds	r3, #1
 8001bb0:	4a1f      	ldr	r2, [pc, #124]	; (8001c30 <HAL_DFSDM_ChannelMspInit+0xd4>)
 8001bb2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8001bb4:	4b1e      	ldr	r3, [pc, #120]	; (8001c30 <HAL_DFSDM_ChannelMspInit+0xd4>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d10b      	bne.n	8001bd4 <HAL_DFSDM_ChannelMspInit+0x78>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001bbc:	4b1d      	ldr	r3, [pc, #116]	; (8001c34 <HAL_DFSDM_ChannelMspInit+0xd8>)
 8001bbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bc0:	4a1c      	ldr	r2, [pc, #112]	; (8001c34 <HAL_DFSDM_ChannelMspInit+0xd8>)
 8001bc2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bc6:	6613      	str	r3, [r2, #96]	; 0x60
 8001bc8:	4b1a      	ldr	r3, [pc, #104]	; (8001c34 <HAL_DFSDM_ChannelMspInit+0xd8>)
 8001bca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bcc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001bd0:	60fb      	str	r3, [r7, #12]
 8001bd2:	68fb      	ldr	r3, [r7, #12]
    }

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001bd4:	4b17      	ldr	r3, [pc, #92]	; (8001c34 <HAL_DFSDM_ChannelMspInit+0xd8>)
 8001bd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bd8:	4a16      	ldr	r2, [pc, #88]	; (8001c34 <HAL_DFSDM_ChannelMspInit+0xd8>)
 8001bda:	f043 0310 	orr.w	r3, r3, #16
 8001bde:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001be0:	4b14      	ldr	r3, [pc, #80]	; (8001c34 <HAL_DFSDM_ChannelMspInit+0xd8>)
 8001be2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001be4:	f003 0310 	and.w	r3, r3, #16
 8001be8:	60bb      	str	r3, [r7, #8]
 8001bea:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8001bec:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001bf0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf4:	2302      	movs	r3, #2
 8001bf6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c00:	2300      	movs	r3, #0
 8001c02:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001c06:	2306      	movs	r3, #6
 8001c08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c0c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001c10:	4619      	mov	r1, r3
 8001c12:	4809      	ldr	r0, [pc, #36]	; (8001c38 <HAL_DFSDM_ChannelMspInit+0xdc>)
 8001c14:	f003 f9ac 	bl	8004f70 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8001c18:	4b04      	ldr	r3, [pc, #16]	; (8001c2c <HAL_DFSDM_ChannelMspInit+0xd0>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	3301      	adds	r3, #1
 8001c1e:	4a03      	ldr	r2, [pc, #12]	; (8001c2c <HAL_DFSDM_ChannelMspInit+0xd0>)
 8001c20:	6013      	str	r3, [r2, #0]
  }

}
 8001c22:	bf00      	nop
 8001c24:	37b8      	adds	r7, #184	; 0xb8
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	20028bbc 	.word	0x20028bbc
 8001c30:	20028bb8 	.word	0x20028bb8
 8001c34:	40021000 	.word	0x40021000
 8001c38:	48001000 	.word	0x48001000

08001c3c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c4c:	d113      	bne.n	8001c76 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c4e:	4b0c      	ldr	r3, [pc, #48]	; (8001c80 <HAL_TIM_Base_MspInit+0x44>)
 8001c50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c52:	4a0b      	ldr	r2, [pc, #44]	; (8001c80 <HAL_TIM_Base_MspInit+0x44>)
 8001c54:	f043 0301 	orr.w	r3, r3, #1
 8001c58:	6593      	str	r3, [r2, #88]	; 0x58
 8001c5a:	4b09      	ldr	r3, [pc, #36]	; (8001c80 <HAL_TIM_Base_MspInit+0x44>)
 8001c5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c5e:	f003 0301 	and.w	r3, r3, #1
 8001c62:	60fb      	str	r3, [r7, #12]
 8001c64:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001c66:	2200      	movs	r2, #0
 8001c68:	2100      	movs	r1, #0
 8001c6a:	201c      	movs	r0, #28
 8001c6c:	f002 f917 	bl	8003e9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001c70:	201c      	movs	r0, #28
 8001c72:	f002 f930 	bl	8003ed6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001c76:	bf00      	nop
 8001c78:	3710      	adds	r7, #16
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	40021000 	.word	0x40021000

08001c84 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
}
 8001c88:	bf00      	nop
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr

08001c92 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8001c92:	b480      	push	{r7}
 8001c94:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8001c96:	e7fe      	b.n	8001c96 <HardFault_Handler+0x4>

08001c98 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8001c9c:	e7fe      	b.n	8001c9c <MemManage_Handler+0x4>

08001c9e <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8001c9e:	b480      	push	{r7}
 8001ca0:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8001ca2:	e7fe      	b.n	8001ca2 <BusFault_Handler+0x4>

08001ca4 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8001ca8:	e7fe      	b.n	8001ca8 <UsageFault_Handler+0x4>

08001caa <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8001caa:	b480      	push	{r7}
 8001cac:	af00      	add	r7, sp, #0
}
 8001cae:	bf00      	nop
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr

08001cb8 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
}
 8001cbc:	bf00      	nop
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr

08001cc6 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8001cc6:	b480      	push	{r7}
 8001cc8:	af00      	add	r7, sp, #0
}
 8001cca:	bf00      	nop
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr

08001cd4 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8001cd8:	f001 ffc2 	bl	8003c60 <HAL_IncTick>
}
 8001cdc:	bf00      	nop
 8001cde:	bd80      	pop	{r7, pc}

08001ce0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8001ce4:	4802      	ldr	r0, [pc, #8]	; (8001cf0 <DMA1_Channel1_IRQHandler+0x10>)
 8001ce6:	f002 fff3 	bl	8004cd0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001cea:	bf00      	nop
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	20000218 	.word	0x20000218

08001cf4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 8001cf8:	4802      	ldr	r0, [pc, #8]	; (8001d04 <DMA1_Channel2_IRQHandler+0x10>)
 8001cfa:	f002 ffe9 	bl	8004cd0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001cfe:	bf00      	nop
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	20000304 	.word	0x20000304

08001d08 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001d0c:	4802      	ldr	r0, [pc, #8]	; (8001d18 <TIM2_IRQHandler+0x10>)
 8001d0e:	f006 fed9 	bl	8008ac4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001d12:	bf00      	nop
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	20000364 	.word	0x20000364

08001d1c <EXTI1_IRQHandler>:
  * @brief  This function handles external lines 1interrupt request.
  * @param  None
  * @retval None
  */
void EXTI1_IRQHandler(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
 HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001d20:	2002      	movs	r0, #2
 8001d22:	f003 fae7 	bl	80052f4 <HAL_GPIO_EXTI_IRQHandler>
}
 8001d26:	bf00      	nop
 8001d28:	bd80      	pop	{r7, pc}

08001d2a <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 8001d2a:	b580      	push	{r7, lr}
 8001d2c:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(USER_BUTTON_PIN);
 8001d2e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001d32:	f003 fadf 	bl	80052f4 <HAL_GPIO_EXTI_IRQHandler>
}
 8001d36:	bf00      	nop
 8001d38:	bd80      	pop	{r7, pc}

08001d3a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d3a:	b480      	push	{r7}
 8001d3c:	af00      	add	r7, sp, #0
  return 1;
 8001d3e:	2301      	movs	r3, #1
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr

08001d4a <_kill>:

int _kill(int pid, int sig)
{
 8001d4a:	b580      	push	{r7, lr}
 8001d4c:	b082      	sub	sp, #8
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	6078      	str	r0, [r7, #4]
 8001d52:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d54:	f00a fa4e 	bl	800c1f4 <__errno>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2216      	movs	r2, #22
 8001d5c:	601a      	str	r2, [r3, #0]
  return -1;
 8001d5e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3708      	adds	r7, #8
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}

08001d6a <_exit>:

void _exit (int status)
{
 8001d6a:	b580      	push	{r7, lr}
 8001d6c:	b082      	sub	sp, #8
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d72:	f04f 31ff 	mov.w	r1, #4294967295
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f7ff ffe7 	bl	8001d4a <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d7c:	e7fe      	b.n	8001d7c <_exit+0x12>

08001d7e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d7e:	b580      	push	{r7, lr}
 8001d80:	b086      	sub	sp, #24
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	60f8      	str	r0, [r7, #12]
 8001d86:	60b9      	str	r1, [r7, #8]
 8001d88:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	617b      	str	r3, [r7, #20]
 8001d8e:	e00a      	b.n	8001da6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d90:	f7ff fd5a 	bl	8001848 <__io_getchar>
 8001d94:	4601      	mov	r1, r0
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	1c5a      	adds	r2, r3, #1
 8001d9a:	60ba      	str	r2, [r7, #8]
 8001d9c:	b2ca      	uxtb	r2, r1
 8001d9e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	3301      	adds	r3, #1
 8001da4:	617b      	str	r3, [r7, #20]
 8001da6:	697a      	ldr	r2, [r7, #20]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	429a      	cmp	r2, r3
 8001dac:	dbf0      	blt.n	8001d90 <_read+0x12>
  }

  return len;
 8001dae:	687b      	ldr	r3, [r7, #4]
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	3718      	adds	r7, #24
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}

08001db8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b086      	sub	sp, #24
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	60f8      	str	r0, [r7, #12]
 8001dc0:	60b9      	str	r1, [r7, #8]
 8001dc2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	617b      	str	r3, [r7, #20]
 8001dc8:	e009      	b.n	8001dde <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	1c5a      	adds	r2, r3, #1
 8001dce:	60ba      	str	r2, [r7, #8]
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f7ff fd26 	bl	8001824 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	3301      	adds	r3, #1
 8001ddc:	617b      	str	r3, [r7, #20]
 8001dde:	697a      	ldr	r2, [r7, #20]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	429a      	cmp	r2, r3
 8001de4:	dbf1      	blt.n	8001dca <_write+0x12>
  }
  return len;
 8001de6:	687b      	ldr	r3, [r7, #4]
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	3718      	adds	r7, #24
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}

08001df0 <_close>:

int _close(int file)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001df8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	370c      	adds	r7, #12
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr

08001e08 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e18:	605a      	str	r2, [r3, #4]
  return 0;
 8001e1a:	2300      	movs	r3, #0
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	370c      	adds	r7, #12
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr

08001e28 <_isatty>:

int _isatty(int file)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e30:	2301      	movs	r3, #1
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	370c      	adds	r7, #12
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr

08001e3e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e3e:	b480      	push	{r7}
 8001e40:	b085      	sub	sp, #20
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	60f8      	str	r0, [r7, #12]
 8001e46:	60b9      	str	r1, [r7, #8]
 8001e48:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e4a:	2300      	movs	r3, #0
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3714      	adds	r7, #20
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr

08001e58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b086      	sub	sp, #24
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e60:	4a14      	ldr	r2, [pc, #80]	; (8001eb4 <_sbrk+0x5c>)
 8001e62:	4b15      	ldr	r3, [pc, #84]	; (8001eb8 <_sbrk+0x60>)
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e6c:	4b13      	ldr	r3, [pc, #76]	; (8001ebc <_sbrk+0x64>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d102      	bne.n	8001e7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e74:	4b11      	ldr	r3, [pc, #68]	; (8001ebc <_sbrk+0x64>)
 8001e76:	4a12      	ldr	r2, [pc, #72]	; (8001ec0 <_sbrk+0x68>)
 8001e78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e7a:	4b10      	ldr	r3, [pc, #64]	; (8001ebc <_sbrk+0x64>)
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	4413      	add	r3, r2
 8001e82:	693a      	ldr	r2, [r7, #16]
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d207      	bcs.n	8001e98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e88:	f00a f9b4 	bl	800c1f4 <__errno>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	220c      	movs	r2, #12
 8001e90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e92:	f04f 33ff 	mov.w	r3, #4294967295
 8001e96:	e009      	b.n	8001eac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e98:	4b08      	ldr	r3, [pc, #32]	; (8001ebc <_sbrk+0x64>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e9e:	4b07      	ldr	r3, [pc, #28]	; (8001ebc <_sbrk+0x64>)
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4413      	add	r3, r2
 8001ea6:	4a05      	ldr	r2, [pc, #20]	; (8001ebc <_sbrk+0x64>)
 8001ea8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	3718      	adds	r7, #24
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	20064000 	.word	0x20064000
 8001eb8:	00007f00 	.word	0x00007f00
 8001ebc:	20028bc0 	.word	0x20028bc0
 8001ec0:	20029748 	.word	0x20029748

08001ec4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ec8:	4b17      	ldr	r3, [pc, #92]	; (8001f28 <SystemInit+0x64>)
 8001eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ece:	4a16      	ldr	r2, [pc, #88]	; (8001f28 <SystemInit+0x64>)
 8001ed0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ed4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001ed8:	4b14      	ldr	r3, [pc, #80]	; (8001f2c <SystemInit+0x68>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a13      	ldr	r2, [pc, #76]	; (8001f2c <SystemInit+0x68>)
 8001ede:	f043 0301 	orr.w	r3, r3, #1
 8001ee2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001ee4:	4b11      	ldr	r3, [pc, #68]	; (8001f2c <SystemInit+0x68>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 8001eea:	4b10      	ldr	r3, [pc, #64]	; (8001f2c <SystemInit+0x68>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a0f      	ldr	r2, [pc, #60]	; (8001f2c <SystemInit+0x68>)
 8001ef0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001ef4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001ef8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000;
 8001efa:	4b0c      	ldr	r3, [pc, #48]	; (8001f2c <SystemInit+0x68>)
 8001efc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001f00:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001f02:	4b0a      	ldr	r3, [pc, #40]	; (8001f2c <SystemInit+0x68>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a09      	ldr	r2, [pc, #36]	; (8001f2c <SystemInit+0x68>)
 8001f08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f0c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001f0e:	4b07      	ldr	r3, [pc, #28]	; (8001f2c <SystemInit+0x68>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001f14:	4b04      	ldr	r3, [pc, #16]	; (8001f28 <SystemInit+0x64>)
 8001f16:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f1a:	609a      	str	r2, [r3, #8]
#endif
}
 8001f1c:	bf00      	nop
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop
 8001f28:	e000ed00 	.word	0xe000ed00
 8001f2c:	40021000 	.word	0x40021000

08001f30 <Hex2Num>:
  * @brief  Convert char in Hex format to integer.
  * @param  a: character to convert
  * @retval integer value.
  */
static  uint8_t Hex2Num(char a)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	4603      	mov	r3, r0
 8001f38:	71fb      	strb	r3, [r7, #7]
    if (a >= '0' && a <= '9') {                             /* Char is num */
 8001f3a:	79fb      	ldrb	r3, [r7, #7]
 8001f3c:	2b2f      	cmp	r3, #47	; 0x2f
 8001f3e:	d906      	bls.n	8001f4e <Hex2Num+0x1e>
 8001f40:	79fb      	ldrb	r3, [r7, #7]
 8001f42:	2b39      	cmp	r3, #57	; 0x39
 8001f44:	d803      	bhi.n	8001f4e <Hex2Num+0x1e>
        return a - '0';
 8001f46:	79fb      	ldrb	r3, [r7, #7]
 8001f48:	3b30      	subs	r3, #48	; 0x30
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	e014      	b.n	8001f78 <Hex2Num+0x48>
    } else if (a >= 'a' && a <= 'f') {                      /* Char is lowercase character A - Z (hex) */
 8001f4e:	79fb      	ldrb	r3, [r7, #7]
 8001f50:	2b60      	cmp	r3, #96	; 0x60
 8001f52:	d906      	bls.n	8001f62 <Hex2Num+0x32>
 8001f54:	79fb      	ldrb	r3, [r7, #7]
 8001f56:	2b66      	cmp	r3, #102	; 0x66
 8001f58:	d803      	bhi.n	8001f62 <Hex2Num+0x32>
        return (a - 'a') + 10;
 8001f5a:	79fb      	ldrb	r3, [r7, #7]
 8001f5c:	3b57      	subs	r3, #87	; 0x57
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	e00a      	b.n	8001f78 <Hex2Num+0x48>
    } else if (a >= 'A' && a <= 'F') {                      /* Char is uppercase character A - Z (hex) */
 8001f62:	79fb      	ldrb	r3, [r7, #7]
 8001f64:	2b40      	cmp	r3, #64	; 0x40
 8001f66:	d906      	bls.n	8001f76 <Hex2Num+0x46>
 8001f68:	79fb      	ldrb	r3, [r7, #7]
 8001f6a:	2b46      	cmp	r3, #70	; 0x46
 8001f6c:	d803      	bhi.n	8001f76 <Hex2Num+0x46>
        return (a - 'A') + 10;
 8001f6e:	79fb      	ldrb	r3, [r7, #7]
 8001f70:	3b37      	subs	r3, #55	; 0x37
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	e000      	b.n	8001f78 <Hex2Num+0x48>
    }

    return 0;
 8001f76:	2300      	movs	r3, #0
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	370c      	adds	r7, #12
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr

08001f84 <ParseHexNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval Hex value.
  */
static uint8_t ParseHexNumber(const char *ptr, uint8_t *cnt)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b084      	sub	sp, #16
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
 8001f8c:	6039      	str	r1, [r7, #0]
    uint8_t sum = 0;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	73fb      	strb	r3, [r7, #15]
    uint8_t done_count = 0;
 8001f92:	2300      	movs	r3, #0
 8001f94:	73bb      	strb	r3, [r7, #14]

    while (CHARISHEXNUM(*ptr) && (done_count < 2)) {       /* Parse number */
 8001f96:	e012      	b.n	8001fbe <ParseHexNumber+0x3a>
        sum <<= 4;
 8001f98:	7bfb      	ldrb	r3, [r7, #15]
 8001f9a:	011b      	lsls	r3, r3, #4
 8001f9c:	73fb      	strb	r3, [r7, #15]
        sum += Hex2Num(*ptr);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	781b      	ldrb	r3, [r3, #0]
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f7ff ffc4 	bl	8001f30 <Hex2Num>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	461a      	mov	r2, r3
 8001fac:	7bfb      	ldrb	r3, [r7, #15]
 8001fae:	4413      	add	r3, r2
 8001fb0:	73fb      	strb	r3, [r7, #15]
        ptr++;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	607b      	str	r3, [r7, #4]
        done_count++;
 8001fb8:	7bbb      	ldrb	r3, [r7, #14]
 8001fba:	3301      	adds	r3, #1
 8001fbc:	73bb      	strb	r3, [r7, #14]
    while (CHARISHEXNUM(*ptr) && (done_count < 2)) {       /* Parse number */
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	2b2f      	cmp	r3, #47	; 0x2f
 8001fc4:	d903      	bls.n	8001fce <ParseHexNumber+0x4a>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	2b39      	cmp	r3, #57	; 0x39
 8001fcc:	d90f      	bls.n	8001fee <ParseHexNumber+0x6a>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	781b      	ldrb	r3, [r3, #0]
 8001fd2:	2b60      	cmp	r3, #96	; 0x60
 8001fd4:	d903      	bls.n	8001fde <ParseHexNumber+0x5a>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	781b      	ldrb	r3, [r3, #0]
 8001fda:	2b66      	cmp	r3, #102	; 0x66
 8001fdc:	d907      	bls.n	8001fee <ParseHexNumber+0x6a>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	2b40      	cmp	r3, #64	; 0x40
 8001fe4:	d906      	bls.n	8001ff4 <ParseHexNumber+0x70>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	2b46      	cmp	r3, #70	; 0x46
 8001fec:	d802      	bhi.n	8001ff4 <ParseHexNumber+0x70>
 8001fee:	7bbb      	ldrb	r3, [r7, #14]
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d9d1      	bls.n	8001f98 <ParseHexNumber+0x14>
    }

    if (cnt != NULL) {                                      /* Save number of characters used for number */
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d002      	beq.n	8002000 <ParseHexNumber+0x7c>
        *cnt = done_count;
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	7bba      	ldrb	r2, [r7, #14]
 8001ffe:	701a      	strb	r2, [r3, #0]
    }
    return sum;                                             /* Return number */
 8002000:	7bfb      	ldrb	r3, [r7, #15]
}
 8002002:	4618      	mov	r0, r3
 8002004:	3710      	adds	r7, #16
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}

0800200a <ParseNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval integer value.
  */
static int32_t ParseNumber(const char *ptr, uint8_t *cnt)
{
 800200a:	b480      	push	{r7}
 800200c:	b085      	sub	sp, #20
 800200e:	af00      	add	r7, sp, #0
 8002010:	6078      	str	r0, [r7, #4]
 8002012:	6039      	str	r1, [r7, #0]
    uint8_t minus = 0;
 8002014:	2300      	movs	r3, #0
 8002016:	73fb      	strb	r3, [r7, #15]
    uint8_t done_count = 0;
 8002018:	2300      	movs	r3, #0
 800201a:	73bb      	strb	r3, [r7, #14]
    int32_t sum = 0;
 800201c:	2300      	movs	r3, #0
 800201e:	60bb      	str	r3, [r7, #8]

    if (*ptr == '-') {                                      /* Check for minus character */
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	2b2d      	cmp	r3, #45	; 0x2d
 8002026:	d119      	bne.n	800205c <ParseNumber+0x52>
        minus = 1;
 8002028:	2301      	movs	r3, #1
 800202a:	73fb      	strb	r3, [r7, #15]
        ptr++;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	3301      	adds	r3, #1
 8002030:	607b      	str	r3, [r7, #4]
        done_count++;
 8002032:	7bbb      	ldrb	r3, [r7, #14]
 8002034:	3301      	adds	r3, #1
 8002036:	73bb      	strb	r3, [r7, #14]
    }
    while (CHARISNUM(*ptr)) {                               /* Parse number */
 8002038:	e010      	b.n	800205c <ParseNumber+0x52>
        sum = 10 * sum + CHAR2NUM(*ptr);
 800203a:	68ba      	ldr	r2, [r7, #8]
 800203c:	4613      	mov	r3, r2
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	4413      	add	r3, r2
 8002042:	005b      	lsls	r3, r3, #1
 8002044:	461a      	mov	r2, r3
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	781b      	ldrb	r3, [r3, #0]
 800204a:	3b30      	subs	r3, #48	; 0x30
 800204c:	4413      	add	r3, r2
 800204e:	60bb      	str	r3, [r7, #8]
        ptr++;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	3301      	adds	r3, #1
 8002054:	607b      	str	r3, [r7, #4]
        done_count++;
 8002056:	7bbb      	ldrb	r3, [r7, #14]
 8002058:	3301      	adds	r3, #1
 800205a:	73bb      	strb	r3, [r7, #14]
    while (CHARISNUM(*ptr)) {                               /* Parse number */
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	2b2f      	cmp	r3, #47	; 0x2f
 8002062:	d903      	bls.n	800206c <ParseNumber+0x62>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	2b39      	cmp	r3, #57	; 0x39
 800206a:	d9e6      	bls.n	800203a <ParseNumber+0x30>
    }
    if (cnt != NULL) {                                      /* Save number of characters used for number */
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d002      	beq.n	8002078 <ParseNumber+0x6e>
        *cnt = done_count;
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	7bba      	ldrb	r2, [r7, #14]
 8002076:	701a      	strb	r2, [r3, #0]
    }
    if (minus) {                                            /* Minus detected */
 8002078:	7bfb      	ldrb	r3, [r7, #15]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d002      	beq.n	8002084 <ParseNumber+0x7a>
        return 0 - sum;
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	425b      	negs	r3, r3
 8002082:	e000      	b.n	8002086 <ParseNumber+0x7c>
    }
    return sum;                                             /* Return number */
 8002084:	68bb      	ldr	r3, [r7, #8]
}
 8002086:	4618      	mov	r0, r3
 8002088:	3714      	adds	r7, #20
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr

08002092 <ParseMAC>:
  * @param  Mac: pointer to MAC-48 array
  * @param  MacSize: the size of the MAC array
  * @retval None.
  */
static void ParseMAC(const char *ptr, uint8_t Mac[], size_t MacSize)
{
 8002092:	b590      	push	{r4, r7, lr}
 8002094:	b087      	sub	sp, #28
 8002096:	af00      	add	r7, sp, #0
 8002098:	60f8      	str	r0, [r7, #12]
 800209a:	60b9      	str	r1, [r7, #8]
 800209c:	607a      	str	r2, [r7, #4]
  uint8_t hex_8bits_count = 0;
 800209e:	2300      	movs	r3, #0
 80020a0:	75fb      	strb	r3, [r7, #23]

  if ((ptr != NULL) && (Mac != NULL))
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d027      	beq.n	80020f8 <ParseMAC+0x66>
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d024      	beq.n	80020f8 <ParseMAC+0x66>
  {
    while ((hex_8bits_count < MacSize) && (hex_8bits_count < 6) && (*ptr)) {
 80020ae:	e018      	b.n	80020e2 <ParseMAC+0x50>
    uint8_t done_count = 1;
 80020b0:	2301      	movs	r3, #1
 80020b2:	75bb      	strb	r3, [r7, #22]
    if (*ptr != ':')
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	2b3a      	cmp	r3, #58	; 0x3a
 80020ba:	d00d      	beq.n	80020d8 <ParseMAC+0x46>
    {
      Mac[hex_8bits_count++] = ParseHexNumber(ptr, &done_count);
 80020bc:	7dfb      	ldrb	r3, [r7, #23]
 80020be:	1c5a      	adds	r2, r3, #1
 80020c0:	75fa      	strb	r2, [r7, #23]
 80020c2:	461a      	mov	r2, r3
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	189c      	adds	r4, r3, r2
 80020c8:	f107 0316 	add.w	r3, r7, #22
 80020cc:	4619      	mov	r1, r3
 80020ce:	68f8      	ldr	r0, [r7, #12]
 80020d0:	f7ff ff58 	bl	8001f84 <ParseHexNumber>
 80020d4:	4603      	mov	r3, r0
 80020d6:	7023      	strb	r3, [r4, #0]
    }
    ptr = ptr + done_count;
 80020d8:	7dbb      	ldrb	r3, [r7, #22]
 80020da:	461a      	mov	r2, r3
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	4413      	add	r3, r2
 80020e0:	60fb      	str	r3, [r7, #12]
    while ((hex_8bits_count < MacSize) && (hex_8bits_count < 6) && (*ptr)) {
 80020e2:	7dfb      	ldrb	r3, [r7, #23]
 80020e4:	687a      	ldr	r2, [r7, #4]
 80020e6:	429a      	cmp	r2, r3
 80020e8:	d906      	bls.n	80020f8 <ParseMAC+0x66>
 80020ea:	7dfb      	ldrb	r3, [r7, #23]
 80020ec:	2b05      	cmp	r3, #5
 80020ee:	d803      	bhi.n	80020f8 <ParseMAC+0x66>
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d1db      	bne.n	80020b0 <ParseMAC+0x1e>
   }
  }
}
 80020f8:	bf00      	nop
 80020fa:	371c      	adds	r7, #28
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd90      	pop	{r4, r7, pc}

08002100 <ParseIP>:
  * @param  IpAdrr: pointer to IPv4 array
  * @param  IpAdrrSize: the size of IP array
  * @retval None.
  */
static void ParseIP(const char *ptr, uint8_t IpAdrr[], size_t IpAdrrSize)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b086      	sub	sp, #24
 8002104:	af00      	add	r7, sp, #0
 8002106:	60f8      	str	r0, [r7, #12]
 8002108:	60b9      	str	r1, [r7, #8]
 800210a:	607a      	str	r2, [r7, #4]
  uint8_t hex_8bits_count = 0;
 800210c:	2300      	movs	r3, #0
 800210e:	75fb      	strb	r3, [r7, #23]

  if ((ptr != NULL) && (IpAdrr != NULL) && (4 <= IpAdrrSize))
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d027      	beq.n	8002166 <ParseIP+0x66>
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d024      	beq.n	8002166 <ParseIP+0x66>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2b03      	cmp	r3, #3
 8002120:	d921      	bls.n	8002166 <ParseIP+0x66>
  {
    while ((hex_8bits_count < 4) && (*ptr != 0)) {
 8002122:	e019      	b.n	8002158 <ParseIP+0x58>
    uint8_t done_count = 1;
 8002124:	2301      	movs	r3, #1
 8002126:	75bb      	strb	r3, [r7, #22]
    if (*ptr != '.')
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	2b2e      	cmp	r3, #46	; 0x2e
 800212e:	d00e      	beq.n	800214e <ParseIP+0x4e>
    {
      IpAdrr[hex_8bits_count++] = (uint8_t)ParseNumber(ptr, &done_count);
 8002130:	f107 0316 	add.w	r3, r7, #22
 8002134:	4619      	mov	r1, r3
 8002136:	68f8      	ldr	r0, [r7, #12]
 8002138:	f7ff ff67 	bl	800200a <ParseNumber>
 800213c:	4601      	mov	r1, r0
 800213e:	7dfb      	ldrb	r3, [r7, #23]
 8002140:	1c5a      	adds	r2, r3, #1
 8002142:	75fa      	strb	r2, [r7, #23]
 8002144:	461a      	mov	r2, r3
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	4413      	add	r3, r2
 800214a:	b2ca      	uxtb	r2, r1
 800214c:	701a      	strb	r2, [r3, #0]
    }
    ptr = ptr + done_count;
 800214e:	7dbb      	ldrb	r3, [r7, #22]
 8002150:	461a      	mov	r2, r3
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	4413      	add	r3, r2
 8002156:	60fb      	str	r3, [r7, #12]
    while ((hex_8bits_count < 4) && (*ptr != 0)) {
 8002158:	7dfb      	ldrb	r3, [r7, #23]
 800215a:	2b03      	cmp	r3, #3
 800215c:	d803      	bhi.n	8002166 <ParseIP+0x66>
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	781b      	ldrb	r3, [r3, #0]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d1de      	bne.n	8002124 <ParseIP+0x24>
   }
  }
}
 8002166:	bf00      	nop
 8002168:	3718      	adds	r7, #24
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
	...

08002170 <AT_ParseInfo>:
  * @param  Obj: pointer to module handle
  * @param  pdata: A string from the WiFi device
  * @retval None.
  */
static void AT_ParseInfo(ES_WIFIObject_t *Obj, uint8_t *pdata)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b084      	sub	sp, #16
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
 8002178:	6039      	str	r1, [r7, #0]
  char *ptr;
  uint8_t num = 0;
 800217a:	2300      	movs	r3, #0
 800217c:	72fb      	strb	r3, [r7, #11]

  ptr = strtok((char *)pdata + 2, ",");
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	3302      	adds	r3, #2
 8002182:	4940      	ldr	r1, [pc, #256]	; (8002284 <AT_ParseInfo+0x114>)
 8002184:	4618      	mov	r0, r3
 8002186:	f009 ff69 	bl	800c05c <strtok>
 800218a:	60f8      	str	r0, [r7, #12]

  while (ptr != NULL){
 800218c:	e071      	b.n	8002272 <AT_ParseInfo+0x102>
    switch (num++) {
 800218e:	7afb      	ldrb	r3, [r7, #11]
 8002190:	1c5a      	adds	r2, r3, #1
 8002192:	72fa      	strb	r2, [r7, #11]
 8002194:	2b06      	cmp	r3, #6
 8002196:	d866      	bhi.n	8002266 <AT_ParseInfo+0xf6>
 8002198:	a201      	add	r2, pc, #4	; (adr r2, 80021a0 <AT_ParseInfo+0x30>)
 800219a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800219e:	bf00      	nop
 80021a0:	080021bd 	.word	0x080021bd
 80021a4:	080021d1 	.word	0x080021d1
 80021a8:	080021e9 	.word	0x080021e9
 80021ac:	08002201 	.word	0x08002201
 80021b0:	08002219 	.word	0x08002219
 80021b4:	08002231 	.word	0x08002231
 80021b8:	08002245 	.word	0x08002245
    case 0:
      strncpy((char *)Obj->Product_ID, ptr, sizeof(Obj->Product_ID) - 1);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	221f      	movs	r2, #31
 80021c0:	68f9      	ldr	r1, [r7, #12]
 80021c2:	4618      	mov	r0, r3
 80021c4:	f009 ff37 	bl	800c036 <strncpy>
      Obj->Product_ID[sizeof(Obj->Product_ID) - 1] = '\0';
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2200      	movs	r2, #0
 80021cc:	77da      	strb	r2, [r3, #31]
      break;
 80021ce:	e04b      	b.n	8002268 <AT_ParseInfo+0xf8>

    case 1:
      strncpy((char *)Obj->FW_Rev, ptr, sizeof(Obj->FW_Rev) - 1);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	3320      	adds	r3, #32
 80021d4:	2217      	movs	r2, #23
 80021d6:	68f9      	ldr	r1, [r7, #12]
 80021d8:	4618      	mov	r0, r3
 80021da:	f009 ff2c 	bl	800c036 <strncpy>
      Obj->FW_Rev[sizeof(Obj->FW_Rev) - 1] = '\0';
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2200      	movs	r2, #0
 80021e2:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
      break;
 80021e6:	e03f      	b.n	8002268 <AT_ParseInfo+0xf8>

    case 2:
      strncpy((char *)Obj->API_Rev, ptr, sizeof(Obj->API_Rev) - 1);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	3338      	adds	r3, #56	; 0x38
 80021ec:	220f      	movs	r2, #15
 80021ee:	68f9      	ldr	r1, [r7, #12]
 80021f0:	4618      	mov	r0, r3
 80021f2:	f009 ff20 	bl	800c036 <strncpy>
      Obj->API_Rev[sizeof(Obj->API_Rev) - 1] = '\0';
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2200      	movs	r2, #0
 80021fa:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
      break;
 80021fe:	e033      	b.n	8002268 <AT_ParseInfo+0xf8>

    case 3:
      strncpy((char *)Obj->Stack_Rev, ptr, sizeof(Obj->Stack_Rev) - 1);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	3348      	adds	r3, #72	; 0x48
 8002204:	220f      	movs	r2, #15
 8002206:	68f9      	ldr	r1, [r7, #12]
 8002208:	4618      	mov	r0, r3
 800220a:	f009 ff14 	bl	800c036 <strncpy>
      Obj->Stack_Rev[sizeof(Obj->Stack_Rev) - 1] = '\0';
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2200      	movs	r2, #0
 8002212:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
      break;
 8002216:	e027      	b.n	8002268 <AT_ParseInfo+0xf8>

    case 4:
      strncpy((char *)Obj->RTOS_Rev, ptr, sizeof(Obj->RTOS_Rev) - 1);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	3358      	adds	r3, #88	; 0x58
 800221c:	220f      	movs	r2, #15
 800221e:	68f9      	ldr	r1, [r7, #12]
 8002220:	4618      	mov	r0, r3
 8002222:	f009 ff08 	bl	800c036 <strncpy>
      Obj->RTOS_Rev[sizeof(Obj->RTOS_Rev) - 1] = '\0';
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2200      	movs	r2, #0
 800222a:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      break;
 800222e:	e01b      	b.n	8002268 <AT_ParseInfo+0xf8>

    case 5:
      Obj->CPU_Clock = (uint32_t)ParseNumber(ptr, NULL);
 8002230:	2100      	movs	r1, #0
 8002232:	68f8      	ldr	r0, [r7, #12]
 8002234:	f7ff fee9 	bl	800200a <ParseNumber>
 8002238:	4603      	mov	r3, r0
 800223a:	461a      	mov	r2, r3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      break;
 8002242:	e011      	b.n	8002268 <AT_ParseInfo+0xf8>

    case 6:
      ptr = strtok(ptr, "\r");
 8002244:	4910      	ldr	r1, [pc, #64]	; (8002288 <AT_ParseInfo+0x118>)
 8002246:	68f8      	ldr	r0, [r7, #12]
 8002248:	f009 ff08 	bl	800c05c <strtok>
 800224c:	60f8      	str	r0, [r7, #12]
      strncpy((char *)Obj->Product_Name, ptr, sizeof(Obj->Product_Name) - 1);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	3368      	adds	r3, #104	; 0x68
 8002252:	221f      	movs	r2, #31
 8002254:	68f9      	ldr	r1, [r7, #12]
 8002256:	4618      	mov	r0, r3
 8002258:	f009 feed 	bl	800c036 <strncpy>
      Obj->Product_Name[sizeof(Obj->Product_Name) - 1] = '\0';
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2200      	movs	r2, #0
 8002260:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
      break;
 8002264:	e000      	b.n	8002268 <AT_ParseInfo+0xf8>

    default: break;
 8002266:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 8002268:	4906      	ldr	r1, [pc, #24]	; (8002284 <AT_ParseInfo+0x114>)
 800226a:	2000      	movs	r0, #0
 800226c:	f009 fef6 	bl	800c05c <strtok>
 8002270:	60f8      	str	r0, [r7, #12]
  while (ptr != NULL){
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d18a      	bne.n	800218e <AT_ParseInfo+0x1e>
  }
}
 8002278:	bf00      	nop
 800227a:	bf00      	nop
 800227c:	3710      	adds	r7, #16
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	0800e4b0 	.word	0x0800e4b0
 8002288:	0800e4b4 	.word	0x0800e4b4

0800228c <AT_ParseConnSettings>:
  * @param  pdata: A string from the WiFi device
  * @param  NetSettings: settings
  * @retval None.
  */
static void AT_ParseConnSettings(char *pdata, ES_WIFI_Network_t *NetSettings)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	6039      	str	r1, [r7, #0]
  uint8_t num = 0;
 8002296:	2300      	movs	r3, #0
 8002298:	73fb      	strb	r3, [r7, #15]
  char *ptr;

  ptr = strtok(pdata + 2, ",");
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	3302      	adds	r3, #2
 800229e:	4959      	ldr	r1, [pc, #356]	; (8002404 <AT_ParseConnSettings+0x178>)
 80022a0:	4618      	mov	r0, r3
 80022a2:	f009 fedb 	bl	800c05c <strtok>
 80022a6:	60b8      	str	r0, [r7, #8]

  while (ptr != NULL) {
 80022a8:	e0a2      	b.n	80023f0 <AT_ParseConnSettings+0x164>
    switch (num++) {
 80022aa:	7bfb      	ldrb	r3, [r7, #15]
 80022ac:	1c5a      	adds	r2, r3, #1
 80022ae:	73fa      	strb	r2, [r7, #15]
 80022b0:	2b0b      	cmp	r3, #11
 80022b2:	f200 808c 	bhi.w	80023ce <AT_ParseConnSettings+0x142>
 80022b6:	a201      	add	r2, pc, #4	; (adr r2, 80022bc <AT_ParseConnSettings+0x30>)
 80022b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022bc:	080022ed 	.word	0x080022ed
 80022c0:	08002303 	.word	0x08002303
 80022c4:	0800231b 	.word	0x0800231b
 80022c8:	0800232f 	.word	0x0800232f
 80022cc:	08002343 	.word	0x08002343
 80022d0:	08002357 	.word	0x08002357
 80022d4:	08002367 	.word	0x08002367
 80022d8:	08002377 	.word	0x08002377
 80022dc:	08002387 	.word	0x08002387
 80022e0:	08002397 	.word	0x08002397
 80022e4:	080023a7 	.word	0x080023a7
 80022e8:	080023bb 	.word	0x080023bb
    case 0:
      strncpy((char *)NetSettings->SSID,  ptr, sizeof(NetSettings->SSID) - 1);
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	2220      	movs	r2, #32
 80022f0:	68b9      	ldr	r1, [r7, #8]
 80022f2:	4618      	mov	r0, r3
 80022f4:	f009 fe9f 	bl	800c036 <strncpy>
      NetSettings->SSID[sizeof(NetSettings->SSID) - 1] = '\0';
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	2200      	movs	r2, #0
 80022fc:	f883 2020 	strb.w	r2, [r3, #32]
      break;
 8002300:	e066      	b.n	80023d0 <AT_ParseConnSettings+0x144>

    case 1:
      strncpy((char *)NetSettings->pswd, ptr, sizeof(NetSettings->pswd) - 1);
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	3321      	adds	r3, #33	; 0x21
 8002306:	2220      	movs	r2, #32
 8002308:	68b9      	ldr	r1, [r7, #8]
 800230a:	4618      	mov	r0, r3
 800230c:	f009 fe93 	bl	800c036 <strncpy>
      NetSettings->pswd[sizeof(NetSettings->pswd) - 1] = '\0';
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	2200      	movs	r2, #0
 8002314:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      break;
 8002318:	e05a      	b.n	80023d0 <AT_ParseConnSettings+0x144>

    case 2:
      NetSettings->Security = (ES_WIFI_SecurityType_t)ParseNumber(ptr, NULL);
 800231a:	2100      	movs	r1, #0
 800231c:	68b8      	ldr	r0, [r7, #8]
 800231e:	f7ff fe74 	bl	800200a <ParseNumber>
 8002322:	4603      	mov	r3, r0
 8002324:	b2da      	uxtb	r2, r3
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        break;
 800232c:	e050      	b.n	80023d0 <AT_ParseConnSettings+0x144>

    case 3:
      NetSettings->DHCP_IsEnabled = (uint8_t)ParseNumber(ptr, NULL);
 800232e:	2100      	movs	r1, #0
 8002330:	68b8      	ldr	r0, [r7, #8]
 8002332:	f7ff fe6a 	bl	800200a <ParseNumber>
 8002336:	4603      	mov	r3, r0
 8002338:	b2da      	uxtb	r2, r3
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      break;
 8002340:	e046      	b.n	80023d0 <AT_ParseConnSettings+0x144>

    case 4:
      NetSettings->IP_Ver = (ES_WIFI_IPVer_t)ParseNumber(ptr, NULL);
 8002342:	2100      	movs	r1, #0
 8002344:	68b8      	ldr	r0, [r7, #8]
 8002346:	f7ff fe60 	bl	800200a <ParseNumber>
 800234a:	4603      	mov	r3, r0
 800234c:	b2da      	uxtb	r2, r3
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
      break;
 8002354:	e03c      	b.n	80023d0 <AT_ParseConnSettings+0x144>

    case 5:
      ParseIP(ptr, NetSettings->IP_Addr, sizeof(NetSettings->IP_Addr));
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	3348      	adds	r3, #72	; 0x48
 800235a:	2204      	movs	r2, #4
 800235c:	4619      	mov	r1, r3
 800235e:	68b8      	ldr	r0, [r7, #8]
 8002360:	f7ff fece 	bl	8002100 <ParseIP>
      break;
 8002364:	e034      	b.n	80023d0 <AT_ParseConnSettings+0x144>

    case 6:
      ParseIP(ptr, NetSettings->IP_Mask, sizeof(NetSettings->IP_Mask));
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	334c      	adds	r3, #76	; 0x4c
 800236a:	2204      	movs	r2, #4
 800236c:	4619      	mov	r1, r3
 800236e:	68b8      	ldr	r0, [r7, #8]
 8002370:	f7ff fec6 	bl	8002100 <ParseIP>
      break;
 8002374:	e02c      	b.n	80023d0 <AT_ParseConnSettings+0x144>

    case 7:
      ParseIP(ptr, NetSettings->Gateway_Addr, sizeof(NetSettings->Gateway_Addr));
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	3350      	adds	r3, #80	; 0x50
 800237a:	2204      	movs	r2, #4
 800237c:	4619      	mov	r1, r3
 800237e:	68b8      	ldr	r0, [r7, #8]
 8002380:	f7ff febe 	bl	8002100 <ParseIP>
      break;
 8002384:	e024      	b.n	80023d0 <AT_ParseConnSettings+0x144>

    case 8:
      ParseIP(ptr, NetSettings->DNS1, sizeof(NetSettings->DNS1));
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	3354      	adds	r3, #84	; 0x54
 800238a:	2204      	movs	r2, #4
 800238c:	4619      	mov	r1, r3
 800238e:	68b8      	ldr	r0, [r7, #8]
 8002390:	f7ff feb6 	bl	8002100 <ParseIP>
      break;
 8002394:	e01c      	b.n	80023d0 <AT_ParseConnSettings+0x144>

    case 9:
      ParseIP(ptr, NetSettings->DNS2, sizeof(NetSettings->DNS2));
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	3358      	adds	r3, #88	; 0x58
 800239a:	2204      	movs	r2, #4
 800239c:	4619      	mov	r1, r3
 800239e:	68b8      	ldr	r0, [r7, #8]
 80023a0:	f7ff feae 	bl	8002100 <ParseIP>
      break;
 80023a4:	e014      	b.n	80023d0 <AT_ParseConnSettings+0x144>

    case 10:
      NetSettings->JoinRetries = (uint8_t)ParseNumber(ptr, NULL);
 80023a6:	2100      	movs	r1, #0
 80023a8:	68b8      	ldr	r0, [r7, #8]
 80023aa:	f7ff fe2e 	bl	800200a <ParseNumber>
 80023ae:	4603      	mov	r3, r0
 80023b0:	b2da      	uxtb	r2, r3
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      break;
 80023b8:	e00a      	b.n	80023d0 <AT_ParseConnSettings+0x144>

    case 11:
      NetSettings->AutoConnect = (uint8_t)ParseNumber(ptr, NULL);
 80023ba:	2100      	movs	r1, #0
 80023bc:	68b8      	ldr	r0, [r7, #8]
 80023be:	f7ff fe24 	bl	800200a <ParseNumber>
 80023c2:	4603      	mov	r3, r0
 80023c4:	b2da      	uxtb	r2, r3
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
      break;
 80023cc:	e000      	b.n	80023d0 <AT_ParseConnSettings+0x144>

    default:
      break;
 80023ce:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 80023d0:	490c      	ldr	r1, [pc, #48]	; (8002404 <AT_ParseConnSettings+0x178>)
 80023d2:	2000      	movs	r0, #0
 80023d4:	f009 fe42 	bl	800c05c <strtok>
 80023d8:	60b8      	str	r0, [r7, #8]
    if ((ptr != NULL) && (ptr[-1] == ','))
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d007      	beq.n	80023f0 <AT_ParseConnSettings+0x164>
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	3b01      	subs	r3, #1
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	2b2c      	cmp	r3, #44	; 0x2c
 80023e8:	d102      	bne.n	80023f0 <AT_ParseConnSettings+0x164>
    { /* Ignore empty fields */
      num++;
 80023ea:	7bfb      	ldrb	r3, [r7, #15]
 80023ec:	3301      	adds	r3, #1
 80023ee:	73fb      	strb	r3, [r7, #15]
  while (ptr != NULL) {
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	f47f af59 	bne.w	80022aa <AT_ParseConnSettings+0x1e>
    }
  }
}
 80023f8:	bf00      	nop
 80023fa:	bf00      	nop
 80023fc:	3710      	adds	r7, #16
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	0800e4b0 	.word	0x0800e4b0

08002408 <AT_ExecuteCommand>:
  * @param  cmd: pointer to the command string
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_ExecuteCommand(ES_WIFIObject_t *Obj, const uint8_t *cmd, uint8_t *pdata)
{
 8002408:	b590      	push	{r4, r7, lr}
 800240a:	b087      	sub	sp, #28
 800240c:	af00      	add	r7, sp, #0
 800240e:	60f8      	str	r0, [r7, #12]
 8002410:	60b9      	str	r1, [r7, #8]
 8002412:	607a      	str	r2, [r7, #4]
  int ret = 0;
 8002414:	2300      	movs	r3, #0
 8002416:	613b      	str	r3, [r7, #16]
  int16_t recv_len = 0;
 8002418:	2300      	movs	r3, #0
 800241a:	82fb      	strh	r3, [r7, #22]

  DEBUGCMD("%s\n",cmd);

  if ((Obj->fops.IO_Send != NULL) && (Obj->fops.IO_Receive != NULL)) {
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8002422:	2b00      	cmp	r3, #0
 8002424:	d056      	beq.n	80024d4 <AT_ExecuteCommand+0xcc>
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 800242c:	2b00      	cmp	r3, #0
 800242e:	d051      	beq.n	80024d4 <AT_ExecuteCommand+0xcc>

  ret = Obj->fops.IO_Send(cmd, strlen((const char *)cmd), Obj->Timeout);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
 8002436:	68b8      	ldr	r0, [r7, #8]
 8002438:	f7fd ff32 	bl	80002a0 <strlen>
 800243c:	4603      	mov	r3, r0
 800243e:	b299      	uxth	r1, r3
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8002446:	461a      	mov	r2, r3
 8002448:	68b8      	ldr	r0, [r7, #8]
 800244a:	47a0      	blx	r4
 800244c:	4603      	mov	r3, r0
 800244e:	613b      	str	r3, [r7, #16]

  if( ret > 0)
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	2b00      	cmp	r3, #0
 8002454:	dd3e      	ble.n	80024d4 <AT_ExecuteCommand+0xcc>
  {
    recv_len = Obj->fops.IO_Receive(pdata, ES_WIFI_DATA_SIZE, Obj->Timeout);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 800245c:	68fa      	ldr	r2, [r7, #12]
 800245e:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8002462:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	4798      	blx	r3
 800246a:	4603      	mov	r3, r0
 800246c:	82fb      	strh	r3, [r7, #22]
    if ((recv_len > 0) && (recv_len <= ES_WIFI_DATA_SIZE))
 800246e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002472:	2b00      	cmp	r3, #0
 8002474:	dd27      	ble.n	80024c6 <AT_ExecuteCommand+0xbe>
 8002476:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800247a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800247e:	dc22      	bgt.n	80024c6 <AT_ExecuteCommand+0xbe>
    {
      if (recv_len == ES_WIFI_DATA_SIZE)
 8002480:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002484:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002488:	d105      	bne.n	8002496 <AT_ExecuteCommand+0x8e>
      {
        /* ES_WIFI_DATA_SIZE maybe too small !! */
        recv_len--;
 800248a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800248e:	b29b      	uxth	r3, r3
 8002490:	3b01      	subs	r3, #1
 8002492:	b29b      	uxth	r3, r3
 8002494:	82fb      	strh	r3, [r7, #22]
      }
      *(pdata + recv_len) = 0;
 8002496:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	4413      	add	r3, r2
 800249e:	2200      	movs	r2, #0
 80024a0:	701a      	strb	r2, [r3, #0]
      DEBUGCMD("%s\n",cmd);

      if (strstr((char *)pdata, AT_OK_STRING))
 80024a2:	490f      	ldr	r1, [pc, #60]	; (80024e0 <AT_ExecuteCommand+0xd8>)
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	f009 fe35 	bl	800c114 <strstr>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d001      	beq.n	80024b4 <AT_ExecuteCommand+0xac>
      {
        return ES_WIFI_STATUS_OK;
 80024b0:	2300      	movs	r3, #0
 80024b2:	e010      	b.n	80024d6 <AT_ExecuteCommand+0xce>
      }
      else if (strstr((char *)pdata, AT_ERROR_STRING))
 80024b4:	490b      	ldr	r1, [pc, #44]	; (80024e4 <AT_ExecuteCommand+0xdc>)
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f009 fe2c 	bl	800c114 <strstr>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d001      	beq.n	80024c6 <AT_ExecuteCommand+0xbe>
      {
        return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 80024c2:	2305      	movs	r3, #5
 80024c4:	e007      	b.n	80024d6 <AT_ExecuteCommand+0xce>
      }
    }
    if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER)
 80024c6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80024ca:	f113 0f04 	cmn.w	r3, #4
 80024ce:	d101      	bne.n	80024d4 <AT_ExecuteCommand+0xcc>
    {
      return ES_WIFI_STATUS_MODULE_CRASH;
 80024d0:	2306      	movs	r3, #6
 80024d2:	e000      	b.n	80024d6 <AT_ExecuteCommand+0xce>
    }
   }
  }
  return ES_WIFI_STATUS_IO_ERROR;
 80024d4:	2304      	movs	r3, #4
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	371c      	adds	r7, #28
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd90      	pop	{r4, r7, pc}
 80024de:	bf00      	nop
 80024e0:	0800e4c8 	.word	0x0800e4c8
 80024e4:	0800e4d4 	.word	0x0800e4d4

080024e8 <AT_RequestSendData>:
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_RequestSendData(ES_WIFIObject_t *Obj, uint8_t* cmd,
                                           const uint8_t *pcmd_data, uint16_t len, uint8_t *pdata)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b086      	sub	sp, #24
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	60f8      	str	r0, [r7, #12]
 80024f0:	60b9      	str	r1, [r7, #8]
 80024f2:	607a      	str	r2, [r7, #4]
 80024f4:	807b      	strh	r3, [r7, #2]
  int16_t send_len = 0;
 80024f6:	2300      	movs	r3, #0
 80024f8:	82fb      	strh	r3, [r7, #22]
  int16_t recv_len = 0;
 80024fa:	2300      	movs	r3, #0
 80024fc:	82bb      	strh	r3, [r7, #20]
  uint16_t cmd_len = 0;
 80024fe:	2300      	movs	r3, #0
 8002500:	827b      	strh	r3, [r7, #18]
  uint16_t n;

  cmd_len = strlen((char*)cmd);
 8002502:	68b8      	ldr	r0, [r7, #8]
 8002504:	f7fd fecc 	bl	80002a0 <strlen>
 8002508:	4603      	mov	r3, r0
 800250a:	827b      	strh	r3, [r7, #18]

  /* Can send only even number of byte on first send. */
  if (cmd_len & 1) return ES_WIFI_STATUS_ERROR;
 800250c:	8a7b      	ldrh	r3, [r7, #18]
 800250e:	f003 0301 	and.w	r3, r3, #1
 8002512:	2b00      	cmp	r3, #0
 8002514:	d001      	beq.n	800251a <AT_RequestSendData+0x32>
 8002516:	2302      	movs	r3, #2
 8002518:	e05d      	b.n	80025d6 <AT_RequestSendData+0xee>

  if ((Obj->fops.IO_Send != NULL) && (Obj->fops.IO_Receive != NULL)) {
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8002520:	2b00      	cmp	r3, #0
 8002522:	d057      	beq.n	80025d4 <AT_RequestSendData+0xec>
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 800252a:	2b00      	cmp	r3, #0
 800252c:	d052      	beq.n	80025d4 <AT_RequestSendData+0xec>

  n = Obj->fops.IO_Send(cmd, cmd_len, Obj->Timeout);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8002534:	68fa      	ldr	r2, [r7, #12]
 8002536:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 800253a:	8a79      	ldrh	r1, [r7, #18]
 800253c:	68b8      	ldr	r0, [r7, #8]
 800253e:	4798      	blx	r3
 8002540:	4603      	mov	r3, r0
 8002542:	823b      	strh	r3, [r7, #16]
  if (n == cmd_len)
 8002544:	8a3a      	ldrh	r2, [r7, #16]
 8002546:	8a7b      	ldrh	r3, [r7, #18]
 8002548:	429a      	cmp	r2, r3
 800254a:	d143      	bne.n	80025d4 <AT_RequestSendData+0xec>
  {
    send_len = Obj->fops.IO_Send(pcmd_data, len, Obj->Timeout);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8002552:	68fa      	ldr	r2, [r7, #12]
 8002554:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8002558:	8879      	ldrh	r1, [r7, #2]
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	4798      	blx	r3
 800255e:	4603      	mov	r3, r0
 8002560:	82fb      	strh	r3, [r7, #22]
    if (send_len == len)
 8002562:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002566:	887b      	ldrh	r3, [r7, #2]
 8002568:	429a      	cmp	r2, r3
 800256a:	d131      	bne.n	80025d0 <AT_RequestSendData+0xe8>
    {
      recv_len = Obj->fops.IO_Receive(pdata, 0, Obj->Timeout);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8002572:	68fa      	ldr	r2, [r7, #12]
 8002574:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8002578:	2100      	movs	r1, #0
 800257a:	6a38      	ldr	r0, [r7, #32]
 800257c:	4798      	blx	r3
 800257e:	4603      	mov	r3, r0
 8002580:	82bb      	strh	r3, [r7, #20]
      if (recv_len > 0)
 8002582:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002586:	2b00      	cmp	r3, #0
 8002588:	dd19      	ble.n	80025be <AT_RequestSendData+0xd6>
      {
        *(pdata + recv_len) = 0;
 800258a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800258e:	6a3a      	ldr	r2, [r7, #32]
 8002590:	4413      	add	r3, r2
 8002592:	2200      	movs	r2, #0
 8002594:	701a      	strb	r2, [r3, #0]
        if(strstr((char *)pdata, AT_OK_STRING))
 8002596:	4912      	ldr	r1, [pc, #72]	; (80025e0 <AT_RequestSendData+0xf8>)
 8002598:	6a38      	ldr	r0, [r7, #32]
 800259a:	f009 fdbb 	bl	800c114 <strstr>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d001      	beq.n	80025a8 <AT_RequestSendData+0xc0>
        {
          return ES_WIFI_STATUS_OK;
 80025a4:	2300      	movs	r3, #0
 80025a6:	e016      	b.n	80025d6 <AT_RequestSendData+0xee>
        }
        else if(strstr((char *)pdata, AT_ERROR_STRING))
 80025a8:	490e      	ldr	r1, [pc, #56]	; (80025e4 <AT_RequestSendData+0xfc>)
 80025aa:	6a38      	ldr	r0, [r7, #32]
 80025ac:	f009 fdb2 	bl	800c114 <strstr>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d001      	beq.n	80025ba <AT_RequestSendData+0xd2>
        {
          return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 80025b6:	2305      	movs	r3, #5
 80025b8:	e00d      	b.n	80025d6 <AT_RequestSendData+0xee>
        }
        else
        {
          return ES_WIFI_STATUS_ERROR;
 80025ba:	2302      	movs	r3, #2
 80025bc:	e00b      	b.n	80025d6 <AT_RequestSendData+0xee>
        }
      }

      if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER)
 80025be:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80025c2:	f113 0f04 	cmn.w	r3, #4
 80025c6:	d101      	bne.n	80025cc <AT_RequestSendData+0xe4>
      {
        return ES_WIFI_STATUS_MODULE_CRASH;
 80025c8:	2306      	movs	r3, #6
 80025ca:	e004      	b.n	80025d6 <AT_RequestSendData+0xee>
      }
      return ES_WIFI_STATUS_ERROR;
 80025cc:	2302      	movs	r3, #2
 80025ce:	e002      	b.n	80025d6 <AT_RequestSendData+0xee>
    }
    else
    {
      return ES_WIFI_STATUS_ERROR;
 80025d0:	2302      	movs	r3, #2
 80025d2:	e000      	b.n	80025d6 <AT_RequestSendData+0xee>
    }
  }
 }
  return ES_WIFI_STATUS_IO_ERROR;
 80025d4:	2304      	movs	r3, #4
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3718      	adds	r7, #24
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	0800e4c8 	.word	0x0800e4c8
 80025e4:	0800e4d4 	.word	0x0800e4d4

080025e8 <AT_RequestReceiveData>:
  * @param  ReadData : pointer to received data length.
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_RequestReceiveData(ES_WIFIObject_t *Obj, uint8_t *cmd,
                                              char *pdata, uint16_t Reqlen, uint16_t *ReadData)
{
 80025e8:	b590      	push	{r4, r7, lr}
 80025ea:	b087      	sub	sp, #28
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	60f8      	str	r0, [r7, #12]
 80025f0:	60b9      	str	r1, [r7, #8]
 80025f2:	607a      	str	r2, [r7, #4]
 80025f4:	807b      	strh	r3, [r7, #2]
  int len;
  uint8_t *p=Obj->CmdData;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80025fc:	613b      	str	r3, [r7, #16]

  if ((Obj->fops.IO_Send != NULL) && (Obj->fops.IO_Receive != NULL)) {
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8002604:	2b00      	cmp	r3, #0
 8002606:	f000 8087 	beq.w	8002718 <AT_RequestReceiveData+0x130>
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8002610:	2b00      	cmp	r3, #0
 8002612:	f000 8081 	beq.w	8002718 <AT_RequestReceiveData+0x130>

  if (Obj->fops.IO_Send(cmd, (uint16_t)strlen((char *)cmd), Obj->Timeout) > 0)
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
 800261c:	68b8      	ldr	r0, [r7, #8]
 800261e:	f7fd fe3f 	bl	80002a0 <strlen>
 8002622:	4603      	mov	r3, r0
 8002624:	b299      	uxth	r1, r3
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 800262c:	461a      	mov	r2, r3
 800262e:	68b8      	ldr	r0, [r7, #8]
 8002630:	47a0      	blx	r4
 8002632:	4603      	mov	r3, r0
 8002634:	2b00      	cmp	r3, #0
 8002636:	dd6f      	ble.n	8002718 <AT_RequestReceiveData+0x130>
  {
    len = Obj->fops.IO_Receive(p, 0, Obj->Timeout);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 800263e:	68fa      	ldr	r2, [r7, #12]
 8002640:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8002644:	2100      	movs	r1, #0
 8002646:	6938      	ldr	r0, [r7, #16]
 8002648:	4798      	blx	r3
 800264a:	4603      	mov	r3, r0
 800264c:	617b      	str	r3, [r7, #20]

    /* Check if start at "\r\n". */
    if ((p[0] != '\r') || (p[1] != '\n'))
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	781b      	ldrb	r3, [r3, #0]
 8002652:	2b0d      	cmp	r3, #13
 8002654:	d104      	bne.n	8002660 <AT_RequestReceiveData+0x78>
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	3301      	adds	r3, #1
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	2b0a      	cmp	r3, #10
 800265e:	d001      	beq.n	8002664 <AT_RequestReceiveData+0x7c>
    {
      return ES_WIFI_STATUS_IO_ERROR;
 8002660:	2304      	movs	r3, #4
 8002662:	e05a      	b.n	800271a <AT_RequestReceiveData+0x132>
    }
    len -= 2;
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	3b02      	subs	r3, #2
 8002668:	617b      	str	r3, [r7, #20]
    p += 2;
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	3302      	adds	r3, #2
 800266e:	613b      	str	r3, [r7, #16]
    if (len >= AT_OK_STRING_LEN)
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	2b07      	cmp	r3, #7
 8002674:	d94a      	bls.n	800270c <AT_RequestReceiveData+0x124>
    {
     while(len && (p[len - 1] == 0x15)) len--;
 8002676:	e002      	b.n	800267e <AT_RequestReceiveData+0x96>
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	3b01      	subs	r3, #1
 800267c:	617b      	str	r3, [r7, #20]
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d006      	beq.n	8002692 <AT_RequestReceiveData+0xaa>
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	3b01      	subs	r3, #1
 8002688:	693a      	ldr	r2, [r7, #16]
 800268a:	4413      	add	r3, r2
 800268c:	781b      	ldrb	r3, [r3, #0]
 800268e:	2b15      	cmp	r3, #21
 8002690:	d0f2      	beq.n	8002678 <AT_RequestReceiveData+0x90>
     p[len] = '\0';
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	693a      	ldr	r2, [r7, #16]
 8002696:	4413      	add	r3, r2
 8002698:	2200      	movs	r2, #0
 800269a:	701a      	strb	r2, [r3, #0]

     if (strstr((char *) p + len - AT_OK_STRING_LEN, AT_OK_STRING))
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	3b08      	subs	r3, #8
 80026a0:	693a      	ldr	r2, [r7, #16]
 80026a2:	4413      	add	r3, r2
 80026a4:	491f      	ldr	r1, [pc, #124]	; (8002724 <AT_RequestReceiveData+0x13c>)
 80026a6:	4618      	mov	r0, r3
 80026a8:	f009 fd34 	bl	800c114 <strstr>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d016      	beq.n	80026e0 <AT_RequestReceiveData+0xf8>
     {
       *ReadData = len - AT_OK_STRING_LEN;
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	3b08      	subs	r3, #8
 80026b8:	b29a      	uxth	r2, r3
 80026ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026bc:	801a      	strh	r2, [r3, #0]
       if (*ReadData > Reqlen)
 80026be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026c0:	881b      	ldrh	r3, [r3, #0]
 80026c2:	887a      	ldrh	r2, [r7, #2]
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d202      	bcs.n	80026ce <AT_RequestReceiveData+0xe6>
       {
         *ReadData = Reqlen;
 80026c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ca:	887a      	ldrh	r2, [r7, #2]
 80026cc:	801a      	strh	r2, [r3, #0]
       }

       memcpy(pdata, p, *ReadData);
 80026ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026d0:	881b      	ldrh	r3, [r3, #0]
 80026d2:	461a      	mov	r2, r3
 80026d4:	6939      	ldr	r1, [r7, #16]
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f009 fdc0 	bl	800c25c <memcpy>
       return ES_WIFI_STATUS_OK;
 80026dc:	2300      	movs	r3, #0
 80026de:	e01c      	b.n	800271a <AT_RequestReceiveData+0x132>
     }
     else if (memcmp((char *)p + len - AT_DELIMETER_LEN, AT_DELIMETER_STRING, AT_DELIMETER_LEN) == 0)
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	3b04      	subs	r3, #4
 80026e4:	693a      	ldr	r2, [r7, #16]
 80026e6:	4413      	add	r3, r2
 80026e8:	2204      	movs	r2, #4
 80026ea:	490f      	ldr	r1, [pc, #60]	; (8002728 <AT_RequestReceiveData+0x140>)
 80026ec:	4618      	mov	r0, r3
 80026ee:	f009 fc69 	bl	800bfc4 <memcmp>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d104      	bne.n	8002702 <AT_RequestReceiveData+0x11a>
     {
       *ReadData = 0;
 80026f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026fa:	2200      	movs	r2, #0
 80026fc:	801a      	strh	r2, [r3, #0]
       return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 80026fe:	2305      	movs	r3, #5
 8002700:	e00b      	b.n	800271a <AT_RequestReceiveData+0x132>
     }

     *ReadData = 0;
 8002702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002704:	2200      	movs	r2, #0
 8002706:	801a      	strh	r2, [r3, #0]
     return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8002708:	2305      	movs	r3, #5
 800270a:	e006      	b.n	800271a <AT_RequestReceiveData+0x132>
   }
   if (len == ES_WIFI_ERROR_STUFFING_FOREVER )
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	f113 0f04 	cmn.w	r3, #4
 8002712:	d101      	bne.n	8002718 <AT_RequestReceiveData+0x130>
   {
     return ES_WIFI_STATUS_MODULE_CRASH;
 8002714:	2306      	movs	r3, #6
 8002716:	e000      	b.n	800271a <AT_RequestReceiveData+0x132>
   }
  }
 }

  return ES_WIFI_STATUS_IO_ERROR;
 8002718:	2304      	movs	r3, #4
}
 800271a:	4618      	mov	r0, r3
 800271c:	371c      	adds	r7, #28
 800271e:	46bd      	mov	sp, r7
 8002720:	bd90      	pop	{r4, r7, pc}
 8002722:	bf00      	nop
 8002724:	0800e4c8 	.word	0x0800e4c8
 8002728:	0800e4dc 	.word	0x0800e4dc

0800272c <ES_WIFI_Init>:
  * @brief  Initialize the WIFI module.
  * @param  Obj: pointer to the module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Init(ES_WIFIObject_t *Obj)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b084      	sub	sp, #16
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8002734:	2302      	movs	r3, #2
 8002736:	73fb      	strb	r3, [r7, #15]

  Obj->Timeout = ES_WIFI_TIMEOUT;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	f247 5230 	movw	r2, #30000	; 0x7530
 800273e:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8

  if (Obj->fops.IO_Init != NULL) {
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8002748:	2b00      	cmp	r3, #0
 800274a:	d01b      	beq.n	8002784 <ES_WIFI_Init+0x58>

  if (Obj->fops.IO_Init(ES_WIFI_INIT) == 0)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8002752:	2000      	movs	r0, #0
 8002754:	4798      	blx	r3
 8002756:	4603      	mov	r3, r0
 8002758:	2b00      	cmp	r3, #0
 800275a:	d113      	bne.n	8002784 <ES_WIFI_Init+0x58>
  {
    ret = AT_ExecuteCommand(Obj,(const uint8_t*)"I?\r\n", Obj->CmdData);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002762:	461a      	mov	r2, r3
 8002764:	490a      	ldr	r1, [pc, #40]	; (8002790 <ES_WIFI_Init+0x64>)
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f7ff fe4e 	bl	8002408 <AT_ExecuteCommand>
 800276c:	4603      	mov	r3, r0
 800276e:	73fb      	strb	r3, [r7, #15]

    if(ret == ES_WIFI_STATUS_OK)
 8002770:	7bfb      	ldrb	r3, [r7, #15]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d106      	bne.n	8002784 <ES_WIFI_Init+0x58>
    {
      AT_ParseInfo(Obj, Obj->CmdData);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800277c:	4619      	mov	r1, r3
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f7ff fcf6 	bl	8002170 <AT_ParseInfo>
    }
   }
  }
  return ret;
 8002784:	7bfb      	ldrb	r3, [r7, #15]
}
 8002786:	4618      	mov	r0, r3
 8002788:	3710      	adds	r7, #16
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	0800e4e4 	.word	0x0800e4e4

08002794 <ES_WIFI_RegisterBusIO>:
ES_WIFI_Status_t  ES_WIFI_RegisterBusIO(ES_WIFIObject_t *Obj, IO_Init_Func IO_Init,
                                                              IO_DeInit_Func  IO_DeInit,
                                                              IO_Delay_Func   IO_Delay,
                                                              IO_Send_Func    IO_Send,
                                                              IO_Receive_Func IO_Receive)
{
 8002794:	b480      	push	{r7}
 8002796:	b085      	sub	sp, #20
 8002798:	af00      	add	r7, sp, #0
 800279a:	60f8      	str	r0, [r7, #12]
 800279c:	60b9      	str	r1, [r7, #8]
 800279e:	607a      	str	r2, [r7, #4]
 80027a0:	603b      	str	r3, [r7, #0]
  if (!Obj || !IO_Init || !IO_DeInit || !IO_Send || !IO_Receive)
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d00b      	beq.n	80027c0 <ES_WIFI_RegisterBusIO+0x2c>
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d008      	beq.n	80027c0 <ES_WIFI_RegisterBusIO+0x2c>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d005      	beq.n	80027c0 <ES_WIFI_RegisterBusIO+0x2c>
 80027b4:	69bb      	ldr	r3, [r7, #24]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d002      	beq.n	80027c0 <ES_WIFI_RegisterBusIO+0x2c>
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d101      	bne.n	80027c4 <ES_WIFI_RegisterBusIO+0x30>
  {
    return ES_WIFI_STATUS_ERROR;
 80027c0:	2302      	movs	r3, #2
 80027c2:	e014      	b.n	80027ee <ES_WIFI_RegisterBusIO+0x5a>
  }

  Obj->fops.IO_Init = IO_Init;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	68ba      	ldr	r2, [r7, #8]
 80027c8:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
  Obj->fops.IO_DeInit = IO_DeInit;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
  Obj->fops.IO_Send = IO_Send;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	69ba      	ldr	r2, [r7, #24]
 80027d8:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
  Obj->fops.IO_Receive = IO_Receive;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	69fa      	ldr	r2, [r7, #28]
 80027e0:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
  Obj->fops.IO_Delay = IO_Delay;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	683a      	ldr	r2, [r7, #0]
 80027e8:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  return ES_WIFI_STATUS_OK;
 80027ec:	2300      	movs	r3, #0
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3714      	adds	r7, #20
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr
	...

080027fc <ES_WIFI_Connect>:
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Connect(ES_WIFIObject_t *Obj, const char *SSID,
                                 const char *Password,
                                 ES_WIFI_SecurityType_t SecType)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b086      	sub	sp, #24
 8002800:	af00      	add	r7, sp, #0
 8002802:	60f8      	str	r0, [r7, #12]
 8002804:	60b9      	str	r1, [r7, #8]
 8002806:	607a      	str	r2, [r7, #4]
 8002808:	70fb      	strb	r3, [r7, #3]
  ES_WIFI_Status_t ret;

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData, "C1=%s\r", SSID);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002810:	68ba      	ldr	r2, [r7, #8]
 8002812:	4932      	ldr	r1, [pc, #200]	; (80028dc <ES_WIFI_Connect+0xe0>)
 8002814:	4618      	mov	r0, r3
 8002816:	f009 fadd 	bl	800bdd4 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002826:	461a      	mov	r2, r3
 8002828:	68f8      	ldr	r0, [r7, #12]
 800282a:	f7ff fded 	bl	8002408 <AT_ExecuteCommand>
 800282e:	4603      	mov	r3, r0
 8002830:	75fb      	strb	r3, [r7, #23]
  if(ret == ES_WIFI_STATUS_OK)
 8002832:	7dfb      	ldrb	r3, [r7, #23]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d14b      	bne.n	80028d0 <ES_WIFI_Connect+0xd4>
  {
    sprintf((char *)Obj->CmdData, "C2=%s\r", Password);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	4927      	ldr	r1, [pc, #156]	; (80028e0 <ES_WIFI_Connect+0xe4>)
 8002842:	4618      	mov	r0, r3
 8002844:	f009 fac6 	bl	800bdd4 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002854:	461a      	mov	r2, r3
 8002856:	68f8      	ldr	r0, [r7, #12]
 8002858:	f7ff fdd6 	bl	8002408 <AT_ExecuteCommand>
 800285c:	4603      	mov	r3, r0
 800285e:	75fb      	strb	r3, [r7, #23]

    if(ret == ES_WIFI_STATUS_OK)
 8002860:	7dfb      	ldrb	r3, [r7, #23]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d134      	bne.n	80028d0 <ES_WIFI_Connect+0xd4>
    {
      Obj->Security = SecType;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	78fa      	ldrb	r2, [r7, #3]
 800286a:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
      sprintf((char *)Obj->CmdData, "C3=%d\r", (uint8_t)SecType);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002874:	78fa      	ldrb	r2, [r7, #3]
 8002876:	491b      	ldr	r1, [pc, #108]	; (80028e4 <ES_WIFI_Connect+0xe8>)
 8002878:	4618      	mov	r0, r3
 800287a:	f009 faab 	bl	800bdd4 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800288a:	461a      	mov	r2, r3
 800288c:	68f8      	ldr	r0, [r7, #12]
 800288e:	f7ff fdbb 	bl	8002408 <AT_ExecuteCommand>
 8002892:	4603      	mov	r3, r0
 8002894:	75fb      	strb	r3, [r7, #23]

      if(ret == ES_WIFI_STATUS_OK)
 8002896:	7dfb      	ldrb	r3, [r7, #23]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d119      	bne.n	80028d0 <ES_WIFI_Connect+0xd4>
      {
        sprintf((char *)Obj->CmdData, "C0\r");
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80028a2:	4911      	ldr	r1, [pc, #68]	; (80028e8 <ES_WIFI_Connect+0xec>)
 80028a4:	4618      	mov	r0, r3
 80028a6:	f009 fa95 	bl	800bdd4 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80028b6:	461a      	mov	r2, r3
 80028b8:	68f8      	ldr	r0, [r7, #12]
 80028ba:	f7ff fda5 	bl	8002408 <AT_ExecuteCommand>
 80028be:	4603      	mov	r3, r0
 80028c0:	75fb      	strb	r3, [r7, #23]
        if(ret == ES_WIFI_STATUS_OK)
 80028c2:	7dfb      	ldrb	r3, [r7, #23]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d103      	bne.n	80028d0 <ES_WIFI_Connect+0xd4>
        {
           Obj->NetSettings.IsConnected = 1;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2201      	movs	r2, #1
 80028cc:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
        }
      }
    }
  }
  UNLOCK_WIFI();
  return ret;
 80028d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3718      	adds	r7, #24
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	0800e4fc 	.word	0x0800e4fc
 80028e0:	0800e504 	.word	0x0800e504
 80028e4:	0800e50c 	.word	0x0800e50c
 80028e8:	0800e514 	.word	0x0800e514

080028ec <ES_WIFI_IsConnected>:
  * @brief  Check whether the module is connected to an access point.
  * @param  Obj: pointer to the module handle
  * @retval Operation Status.
  */
uint8_t ES_WIFI_IsConnected(ES_WIFIObject_t *Obj)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b084      	sub	sp, #16
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret;

  LOCK_WIFI();

  sprintf((char *)Obj->CmdData, "CS\r");
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80028fa:	4913      	ldr	r1, [pc, #76]	; (8002948 <ES_WIFI_IsConnected+0x5c>)
 80028fc:	4618      	mov	r0, r3
 80028fe:	f009 fa69 	bl	800bdd4 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800290e:	461a      	mov	r2, r3
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	f7ff fd79 	bl	8002408 <AT_ExecuteCommand>
 8002916:	4603      	mov	r3, r0
 8002918:	73fb      	strb	r3, [r7, #15]
  if (ret == ES_WIFI_STATUS_OK)
 800291a:	7bfb      	ldrb	r3, [r7, #15]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d10b      	bne.n	8002938 <ES_WIFI_IsConnected+0x4c>
  {
    Obj->NetSettings.IsConnected = (Obj->CmdData[2] == '1') ? 1 : 0;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	f893 312a 	ldrb.w	r3, [r3, #298]	; 0x12a
 8002926:	2b31      	cmp	r3, #49	; 0x31
 8002928:	bf0c      	ite	eq
 800292a:	2301      	moveq	r3, #1
 800292c:	2300      	movne	r3, #0
 800292e:	b2db      	uxtb	r3, r3
 8002930:	461a      	mov	r2, r3
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
  }

  UNLOCK_WIFI();

  return Obj->NetSettings.IsConnected;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	f893 30d2 	ldrb.w	r3, [r3, #210]	; 0xd2
}
 800293e:	4618      	mov	r0, r3
 8002940:	3710      	adds	r7, #16
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	0800e518 	.word	0x0800e518

0800294c <ES_WIFI_GetNetworkSettings>:
  * @brief  Update given object module with the network settings.
  * @param  Obj: pointer to the module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetNetworkSettings(ES_WIFIObject_t *Obj)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b084      	sub	sp, #16
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret;

  LOCK_WIFI();

  sprintf((char *)Obj->CmdData, "C?\r");
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800295a:	4910      	ldr	r1, [pc, #64]	; (800299c <ES_WIFI_GetNetworkSettings+0x50>)
 800295c:	4618      	mov	r0, r3
 800295e:	f009 fa39 	bl	800bdd4 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800296e:	461a      	mov	r2, r3
 8002970:	6878      	ldr	r0, [r7, #4]
 8002972:	f7ff fd49 	bl	8002408 <AT_ExecuteCommand>
 8002976:	4603      	mov	r3, r0
 8002978:	73fb      	strb	r3, [r7, #15]

  if(ret == ES_WIFI_STATUS_OK)
 800297a:	7bfb      	ldrb	r3, [r7, #15]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d108      	bne.n	8002992 <ES_WIFI_GetNetworkSettings+0x46>
  {
     AT_ParseConnSettings((char *)Obj->CmdData, &Obj->NetSettings);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	f503 7294 	add.w	r2, r3, #296	; 0x128
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	338d      	adds	r3, #141	; 0x8d
 800298a:	4619      	mov	r1, r3
 800298c:	4610      	mov	r0, r2
 800298e:	f7ff fc7d 	bl	800228c <AT_ParseConnSettings>
  }

  UNLOCK_WIFI();

  return ret;
 8002992:	7bfb      	ldrb	r3, [r7, #15]
}
 8002994:	4618      	mov	r0, r3
 8002996:	3710      	adds	r7, #16
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}
 800299c:	0800e520 	.word	0x0800e520

080029a0 <ES_WIFI_GetMACAddress>:
  * @param  mac: pointer to the MAC address array.
  * @param  MacLength: length of the MAC address array.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetMACAddress(ES_WIFIObject_t *Obj, uint8_t *mac, uint8_t MacLength)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b086      	sub	sp, #24
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	60f8      	str	r0, [r7, #12]
 80029a8:	60b9      	str	r1, [r7, #8]
 80029aa:	4613      	mov	r3, r2
 80029ac:	71fb      	strb	r3, [r7, #7]
  ES_WIFI_Status_t ret;
  char *ptr;

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData, "Z5\r");
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80029b4:	4913      	ldr	r1, [pc, #76]	; (8002a04 <ES_WIFI_GetMACAddress+0x64>)
 80029b6:	4618      	mov	r0, r3
 80029b8:	f009 fa0c 	bl	800bdd4 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80029c8:	461a      	mov	r2, r3
 80029ca:	68f8      	ldr	r0, [r7, #12]
 80029cc:	f7ff fd1c 	bl	8002408 <AT_ExecuteCommand>
 80029d0:	4603      	mov	r3, r0
 80029d2:	75fb      	strb	r3, [r7, #23]
  if(ret == ES_WIFI_STATUS_OK)
 80029d4:	7dfb      	ldrb	r3, [r7, #23]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d10e      	bne.n	80029f8 <ES_WIFI_GetMACAddress+0x58>
  {
    ptr = strtok((char *)(Obj->CmdData + 2), "\r\n");
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80029e0:	3302      	adds	r3, #2
 80029e2:	4909      	ldr	r1, [pc, #36]	; (8002a08 <ES_WIFI_GetMACAddress+0x68>)
 80029e4:	4618      	mov	r0, r3
 80029e6:	f009 fb39 	bl	800c05c <strtok>
 80029ea:	6138      	str	r0, [r7, #16]
    ParseMAC(ptr, mac, MacLength);
 80029ec:	79fb      	ldrb	r3, [r7, #7]
 80029ee:	461a      	mov	r2, r3
 80029f0:	68b9      	ldr	r1, [r7, #8]
 80029f2:	6938      	ldr	r0, [r7, #16]
 80029f4:	f7ff fb4d 	bl	8002092 <ParseMAC>
  }

  UNLOCK_WIFI();

  return ret;
 80029f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3718      	adds	r7, #24
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	0800e570 	.word	0x0800e570
 8002a08:	0800e574 	.word	0x0800e574

08002a0c <ES_WIFI_StartServerSingleConn>:
  * @param  Obj: pointer to module handle
  * @param  conn: pointer to the connection structure
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StartServerSingleConn(ES_WIFIObject_t *Obj, ES_WIFI_Conn_t *conn)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b084      	sub	sp, #16
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
 8002a14:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_OK;
 8002a16:	2300      	movs	r3, #0
 8002a18:	73fb      	strb	r3, [r7, #15]

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	f503 7094 	add.w	r0, r3, #296	; 0x128
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	789b      	ldrb	r3, [r3, #2]
 8002a24:	461a      	mov	r2, r3
 8002a26:	4949      	ldr	r1, [pc, #292]	; (8002b4c <ES_WIFI_StartServerSingleConn+0x140>)
 8002a28:	f009 f9d4 	bl	800bdd4 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002a38:	461a      	mov	r2, r3
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f7ff fce4 	bl	8002408 <AT_ExecuteCommand>
 8002a40:	4603      	mov	r3, r0
 8002a42:	73fb      	strb	r3, [r7, #15]
  if (ret != ES_WIFI_STATUS_OK)
 8002a44:	7bfb      	ldrb	r3, [r7, #15]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d001      	beq.n	8002a4e <ES_WIFI_StartServerSingleConn+0x42>
  {
    UNLOCK_WIFI();
    return ret;
 8002a4a:	7bfb      	ldrb	r3, [r7, #15]
 8002a4c:	e079      	b.n	8002b42 <ES_WIFI_StartServerSingleConn+0x136>
  }

  if ((conn->Type != ES_WIFI_UDP_CONNECTION) && (conn->Type != ES_WIFI_UDP_LITE_CONNECTION))
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	781b      	ldrb	r3, [r3, #0]
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d016      	beq.n	8002a84 <ES_WIFI_StartServerSingleConn+0x78>
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	781b      	ldrb	r3, [r3, #0]
 8002a5a:	2b02      	cmp	r3, #2
 8002a5c:	d012      	beq.n	8002a84 <ES_WIFI_StartServerSingleConn+0x78>
  {
    sprintf((char*)Obj->CmdData,"PK=1,3000\r");
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002a64:	493a      	ldr	r1, [pc, #232]	; (8002b50 <ES_WIFI_StartServerSingleConn+0x144>)
 8002a66:	4618      	mov	r0, r3
 8002a68:	f009 f9b4 	bl	800bdd4 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002a78:	461a      	mov	r2, r3
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f7ff fcc4 	bl	8002408 <AT_ExecuteCommand>
 8002a80:	4603      	mov	r3, r0
 8002a82:	73fb      	strb	r3, [r7, #15]
  }

  if (ret == ES_WIFI_STATUS_OK)
 8002a84:	7bfb      	ldrb	r3, [r7, #15]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d15a      	bne.n	8002b40 <ES_WIFI_StartServerSingleConn+0x134>
  {
    sprintf((char*)Obj->CmdData,"P1=%d\r", conn->Type);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	f503 7094 	add.w	r0, r3, #296	; 0x128
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	461a      	mov	r2, r3
 8002a96:	492f      	ldr	r1, [pc, #188]	; (8002b54 <ES_WIFI_StartServerSingleConn+0x148>)
 8002a98:	f009 f99c 	bl	800bdd4 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f7ff fcac 	bl	8002408 <AT_ExecuteCommand>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	73fb      	strb	r3, [r7, #15]
    if (ret == ES_WIFI_STATUS_OK)
 8002ab4:	7bfb      	ldrb	r3, [r7, #15]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d142      	bne.n	8002b40 <ES_WIFI_StartServerSingleConn+0x134>
    {
      sprintf((char*)Obj->CmdData,"P8=%d\r", conn->Backlog);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	f503 7094 	add.w	r0, r3, #296	; 0x128
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	7c1b      	ldrb	r3, [r3, #16]
 8002ac4:	461a      	mov	r2, r3
 8002ac6:	4924      	ldr	r1, [pc, #144]	; (8002b58 <ES_WIFI_StartServerSingleConn+0x14c>)
 8002ac8:	f009 f984 	bl	800bdd4 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002ad8:	461a      	mov	r2, r3
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f7ff fc94 	bl	8002408 <AT_ExecuteCommand>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	73fb      	strb	r3, [r7, #15]
      if (ret == ES_WIFI_STATUS_OK)
 8002ae4:	7bfb      	ldrb	r3, [r7, #15]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d12a      	bne.n	8002b40 <ES_WIFI_StartServerSingleConn+0x134>
      {
        sprintf((char*)Obj->CmdData,"P2=%d\r", conn->LocalPort);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	f503 7094 	add.w	r0, r3, #296	; 0x128
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	88db      	ldrh	r3, [r3, #6]
 8002af4:	461a      	mov	r2, r3
 8002af6:	4919      	ldr	r1, [pc, #100]	; (8002b5c <ES_WIFI_StartServerSingleConn+0x150>)
 8002af8:	f009 f96c 	bl	800bdd4 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002b08:	461a      	mov	r2, r3
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f7ff fc7c 	bl	8002408 <AT_ExecuteCommand>
 8002b10:	4603      	mov	r3, r0
 8002b12:	73fb      	strb	r3, [r7, #15]
        if (ret == ES_WIFI_STATUS_OK)
 8002b14:	7bfb      	ldrb	r3, [r7, #15]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d112      	bne.n	8002b40 <ES_WIFI_StartServerSingleConn+0x134>
        {
          /* multi accept mode */
          sprintf((char*)Obj->CmdData,"P5=11\r");
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002b20:	490f      	ldr	r1, [pc, #60]	; (8002b60 <ES_WIFI_StartServerSingleConn+0x154>)
 8002b22:	4618      	mov	r0, r3
 8002b24:	f009 f956 	bl	800bdd4 <siprintf>
          ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002b34:	461a      	mov	r2, r3
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	f7ff fc66 	bl	8002408 <AT_ExecuteCommand>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	73fb      	strb	r3, [r7, #15]
    }
  }

  UNLOCK_WIFI();

  return ret;
 8002b40:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3710      	adds	r7, #16
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	0800e5d8 	.word	0x0800e5d8
 8002b50:	0800e620 	.word	0x0800e620
 8002b54:	0800e5e0 	.word	0x0800e5e0
 8002b58:	0800e62c 	.word	0x0800e62c
 8002b5c:	0800e5e8 	.word	0x0800e5e8
 8002b60:	0800e634 	.word	0x0800e634

08002b64 <ES_WIFI_WaitServerConnection>:
  * @param  Obj: pointer to the module handle
  * @param  conn: pointer to the connection structure
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_WaitServerConnection(ES_WIFIObject_t *Obj, uint32_t timeout, ES_WIFI_Conn_t *conn)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b08a      	sub	sp, #40	; 0x28
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	60f8      	str	r0, [r7, #12]
 8002b6c:	60b9      	str	r1, [r7, #8]
 8002b6e:	607a      	str	r2, [r7, #4]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_OK;
 8002b70:	2300      	movs	r3, #0
 8002b72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t      t;
  uint32_t      tlast;
  uint32_t      tstart;
  char          *ptr;

  tstart = HAL_GetTick();
 8002b76:	f001 f887 	bl	8003c88 <HAL_GetTick>
 8002b7a:	6278      	str	r0, [r7, #36]	; 0x24
  tlast = tstart + timeout;
 8002b7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	4413      	add	r3, r2
 8002b82:	61fb      	str	r3, [r7, #28]
  if (tlast < tstart)
 8002b84:	69fa      	ldr	r2, [r7, #28]
 8002b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d201      	bcs.n	8002b90 <ES_WIFI_WaitServerConnection+0x2c>
  {
    tstart=0;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	627b      	str	r3, [r7, #36]	; 0x24

  do
  {
#if (ES_WIFI_USE_UART == 0)
    /* mandatory to flush MR async messages */
    memset(Obj->CmdData,0,sizeof(Obj->CmdData));
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002b96:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002b9a:	2100      	movs	r1, #0
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f009 fa21 	bl	800bfe4 <memset>
    sprintf((char*)Obj->CmdData,"MR\r");
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002ba8:	495f      	ldr	r1, [pc, #380]	; (8002d28 <ES_WIFI_WaitServerConnection+0x1c4>)
 8002baa:	4618      	mov	r0, r3
 8002bac:	f009 f912 	bl	800bdd4 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	68f8      	ldr	r0, [r7, #12]
 8002bc0:	f7ff fc22 	bl	8002408 <AT_ExecuteCommand>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (ret == ES_WIFI_STATUS_OK)
 8002bca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d129      	bne.n	8002c26 <ES_WIFI_WaitServerConnection+0xc2>
    {
      if ((strstr((char *)Obj->CmdData, "[SOMA]")) && (strstr((char *)Obj->CmdData, "[EOMA]")))
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002bd8:	4954      	ldr	r1, [pc, #336]	; (8002d2c <ES_WIFI_WaitServerConnection+0x1c8>)
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f009 fa9a 	bl	800c114 <strstr>
 8002be0:	4603      	mov	r3, r0
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d021      	beq.n	8002c2a <ES_WIFI_WaitServerConnection+0xc6>
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002bec:	4950      	ldr	r1, [pc, #320]	; (8002d30 <ES_WIFI_WaitServerConnection+0x1cc>)
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f009 fa90 	bl	800c114 <strstr>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d017      	beq.n	8002c2a <ES_WIFI_WaitServerConnection+0xc6>
      {
        if(strstr((char *)Obj->CmdData, "Accepted"))
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002c00:	494c      	ldr	r1, [pc, #304]	; (8002d34 <ES_WIFI_WaitServerConnection+0x1d0>)
 8002c02:	4618      	mov	r0, r3
 8002c04:	f009 fa86 	bl	800c114 <strstr>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d10d      	bne.n	8002c2a <ES_WIFI_WaitServerConnection+0xc6>
        {
         //printf("SOMA Accepted\n");
        }
        else if(!strstr((char *)Obj->CmdData,"[SOMA][EOMA]"))
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002c14:	4948      	ldr	r1, [pc, #288]	; (8002d38 <ES_WIFI_WaitServerConnection+0x1d4>)
 8002c16:	4618      	mov	r0, r3
 8002c18:	f009 fa7c 	bl	800c114 <strstr>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d103      	bne.n	8002c2a <ES_WIFI_WaitServerConnection+0xc6>
        {
          DEBUG("Bad MR stntax msg %s\n", Obj->CmdData);

          UNLOCK_WIFI();

          return ES_WIFI_STATUS_ERROR;
 8002c22:	2302      	movs	r3, #2
 8002c24:	e07c      	b.n	8002d20 <ES_WIFI_WaitServerConnection+0x1bc>
    {
      DEBUG("MR command failed %s\n", Obj->CmdData);

      UNLOCK_WIFI();

      return ES_WIFI_STATUS_ERROR;
 8002c26:	2302      	movs	r3, #2
 8002c28:	e07a      	b.n	8002d20 <ES_WIFI_WaitServerConnection+0x1bc>
    }
#endif /* (ES_WIFI_USE_UART == 0) */

    memset(Obj->CmdData, 0, sizeof(Obj->CmdData));
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002c30:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002c34:	2100      	movs	r1, #0
 8002c36:	4618      	mov	r0, r3
 8002c38:	f009 f9d4 	bl	800bfe4 <memset>
    sprintf((char*)Obj->CmdData, "P?\r");
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002c42:	493e      	ldr	r1, [pc, #248]	; (8002d3c <ES_WIFI_WaitServerConnection+0x1d8>)
 8002c44:	4618      	mov	r0, r3
 8002c46:	f009 f8c5 	bl	800bdd4 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002c56:	461a      	mov	r2, r3
 8002c58:	68f8      	ldr	r0, [r7, #12]
 8002c5a:	f7ff fbd5 	bl	8002408 <AT_ExecuteCommand>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (ret == ES_WIFI_STATUS_OK)
 8002c64:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d140      	bne.n	8002cee <ES_WIFI_WaitServerConnection+0x18a>
    {
      if (strncmp((char *)Obj->CmdData, "\r\n0,0.0.0.0,",12)!=0)
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002c72:	220c      	movs	r2, #12
 8002c74:	4932      	ldr	r1, [pc, #200]	; (8002d40 <ES_WIFI_WaitServerConnection+0x1dc>)
 8002c76:	4618      	mov	r0, r3
 8002c78:	f009 f9cb 	bl	800c012 <strncmp>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d037      	beq.n	8002cf2 <ES_WIFI_WaitServerConnection+0x18e>
      {
        ptr = strtok((char *)Obj->CmdData + 2, ",");
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002c88:	3302      	adds	r3, #2
 8002c8a:	492e      	ldr	r1, [pc, #184]	; (8002d44 <ES_WIFI_WaitServerConnection+0x1e0>)
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f009 f9e5 	bl	800c05c <strtok>
 8002c92:	6178      	str	r0, [r7, #20]
        ptr = strtok(0, ","); /* port */
 8002c94:	492b      	ldr	r1, [pc, #172]	; (8002d44 <ES_WIFI_WaitServerConnection+0x1e0>)
 8002c96:	2000      	movs	r0, #0
 8002c98:	f009 f9e0 	bl	800c05c <strtok>
 8002c9c:	6178      	str	r0, [r7, #20]
        ParseIP((char *)ptr, conn->RemoteIP, sizeof(conn->RemoteIP));
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	3308      	adds	r3, #8
 8002ca2:	2204      	movs	r2, #4
 8002ca4:	4619      	mov	r1, r3
 8002ca6:	6978      	ldr	r0, [r7, #20]
 8002ca8:	f7ff fa2a 	bl	8002100 <ParseIP>
        ptr = strtok(0, ","); /* port */
 8002cac:	4925      	ldr	r1, [pc, #148]	; (8002d44 <ES_WIFI_WaitServerConnection+0x1e0>)
 8002cae:	2000      	movs	r0, #0
 8002cb0:	f009 f9d4 	bl	800c05c <strtok>
 8002cb4:	6178      	str	r0, [r7, #20]
        conn->LocalPort=ParseNumber(ptr,0);
 8002cb6:	2100      	movs	r1, #0
 8002cb8:	6978      	ldr	r0, [r7, #20]
 8002cba:	f7ff f9a6 	bl	800200a <ParseNumber>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	b29a      	uxth	r2, r3
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	80da      	strh	r2, [r3, #6]
        ptr = strtok(0, ","); /* ip */
 8002cc6:	491f      	ldr	r1, [pc, #124]	; (8002d44 <ES_WIFI_WaitServerConnection+0x1e0>)
 8002cc8:	2000      	movs	r0, #0
 8002cca:	f009 f9c7 	bl	800c05c <strtok>
 8002cce:	6178      	str	r0, [r7, #20]
        ptr = strtok(0, ","); /* remote port */
 8002cd0:	491c      	ldr	r1, [pc, #112]	; (8002d44 <ES_WIFI_WaitServerConnection+0x1e0>)
 8002cd2:	2000      	movs	r0, #0
 8002cd4:	f009 f9c2 	bl	800c05c <strtok>
 8002cd8:	6178      	str	r0, [r7, #20]
        conn->RemotePort=ParseNumber(ptr,0);
 8002cda:	2100      	movs	r1, #0
 8002cdc:	6978      	ldr	r0, [r7, #20]
 8002cde:	f7ff f994 	bl	800200a <ParseNumber>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	b29a      	uxth	r2, r3
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	809a      	strh	r2, [r3, #4]

        UNLOCK_WIFI();

        return ES_WIFI_STATUS_OK;
 8002cea:	2300      	movs	r3, #0
 8002cec:	e018      	b.n	8002d20 <ES_WIFI_WaitServerConnection+0x1bc>
    {
      DEBUG("P? command failed %s\n", Obj->CmdData);

      UNLOCK_WIFI();

      return ES_WIFI_STATUS_ERROR;
 8002cee:	2302      	movs	r3, #2
 8002cf0:	e016      	b.n	8002d20 <ES_WIFI_WaitServerConnection+0x1bc>
    }

    UNLOCK_WIFI();

    Obj->fops.IO_Delay(100);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8002cf8:	2064      	movs	r0, #100	; 0x64
 8002cfa:	4798      	blx	r3

    LOCK_WIFI();
    t = HAL_GetTick();
 8002cfc:	f000 ffc4 	bl	8003c88 <HAL_GetTick>
 8002d00:	61b8      	str	r0, [r7, #24]
  }
  while ((timeout==0) || ((t < tlast) || (t < tstart)));
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	f43f af43 	beq.w	8002b90 <ES_WIFI_WaitServerConnection+0x2c>
 8002d0a:	69ba      	ldr	r2, [r7, #24]
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	f4ff af3e 	bcc.w	8002b90 <ES_WIFI_WaitServerConnection+0x2c>
 8002d14:	69ba      	ldr	r2, [r7, #24]
 8002d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	f4ff af39 	bcc.w	8002b90 <ES_WIFI_WaitServerConnection+0x2c>
  return ES_WIFI_STATUS_TIMEOUT;
 8002d1e:	2303      	movs	r3, #3
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3728      	adds	r7, #40	; 0x28
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}
 8002d28:	0800e4f4 	.word	0x0800e4f4
 8002d2c:	0800e63c 	.word	0x0800e63c
 8002d30:	0800e644 	.word	0x0800e644
 8002d34:	0800e64c 	.word	0x0800e64c
 8002d38:	0800e658 	.word	0x0800e658
 8002d3c:	0800e668 	.word	0x0800e668
 8002d40:	0800e66c 	.word	0x0800e66c
 8002d44:	0800e4b0 	.word	0x0800e4b0

08002d48 <ES_WIFI_CloseServerConnection>:
  * @param  Obj: pointer to the module handle
  * @param  socket:  server socket
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_CloseServerConnection(ES_WIFIObject_t *Obj, uint8_t socket)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b084      	sub	sp, #16
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
 8002d50:	460b      	mov	r3, r1
 8002d52:	70fb      	strb	r3, [r7, #3]
  ES_WIFI_Status_t ret;

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData, "P0=%d\r", socket);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002d5a:	78fa      	ldrb	r2, [r7, #3]
 8002d5c:	4916      	ldr	r1, [pc, #88]	; (8002db8 <ES_WIFI_CloseServerConnection+0x70>)
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f009 f838 	bl	800bdd4 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002d70:	461a      	mov	r2, r3
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f7ff fb48 	bl	8002408 <AT_ExecuteCommand>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	73fb      	strb	r3, [r7, #15]
  if (ret != ES_WIFI_STATUS_OK)
 8002d7c:	7bfb      	ldrb	r3, [r7, #15]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d001      	beq.n	8002d86 <ES_WIFI_CloseServerConnection+0x3e>
  {
    DEBUG(" Can not select socket %s\n", Obj->CmdData);
    UNLOCK_WIFI();
    return ret;
 8002d82:	7bfb      	ldrb	r3, [r7, #15]
 8002d84:	e013      	b.n	8002dae <ES_WIFI_CloseServerConnection+0x66>
  }

  sprintf((char*)Obj->CmdData, "P5=10\r");
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002d8c:	490b      	ldr	r1, [pc, #44]	; (8002dbc <ES_WIFI_CloseServerConnection+0x74>)
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f009 f820 	bl	800bdd4 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002da0:	461a      	mov	r2, r3
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f7ff fb30 	bl	8002408 <AT_ExecuteCommand>
 8002da8:	4603      	mov	r3, r0
 8002daa:	73fb      	strb	r3, [r7, #15]
  {
    DEBUG(" Open next failed %s\n", Obj->CmdData);
  }

  UNLOCK_WIFI();
  return ret;
 8002dac:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3710      	adds	r7, #16
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	bf00      	nop
 8002db8:	0800e5d8 	.word	0x0800e5d8
 8002dbc:	0800e67c 	.word	0x0800e67c

08002dc0 <ES_WIFI_SendData>:
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_SendData(ES_WIFIObject_t *Obj, uint8_t Socket,
                                  const uint8_t *pdata, uint16_t Reqlen,
                                  uint16_t *SentLen, uint32_t Timeout)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b088      	sub	sp, #32
 8002dc4:	af02      	add	r7, sp, #8
 8002dc6:	60f8      	str	r0, [r7, #12]
 8002dc8:	607a      	str	r2, [r7, #4]
 8002dca:	461a      	mov	r2, r3
 8002dcc:	460b      	mov	r3, r1
 8002dce:	72fb      	strb	r3, [r7, #11]
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	813b      	strh	r3, [r7, #8]
  uint32_t wkgTimeOut;

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8002dd4:	2302      	movs	r3, #2
 8002dd6:	74fb      	strb	r3, [r7, #19]

  if (Timeout == 0)
 8002dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d102      	bne.n	8002de4 <ES_WIFI_SendData+0x24>
  {
    wkgTimeOut = NET_DEFAULT_NOBLOCKING_WRITE_TIMEOUT;
 8002dde:	2301      	movs	r3, #1
 8002de0:	617b      	str	r3, [r7, #20]
 8002de2:	e001      	b.n	8002de8 <ES_WIFI_SendData+0x28>
  }
  else
  {
    wkgTimeOut = Timeout;
 8002de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de6:	617b      	str	r3, [r7, #20]
  }

  LOCK_WIFI();

  if (Reqlen >= ES_WIFI_PAYLOAD_SIZE)
 8002de8:	893b      	ldrh	r3, [r7, #8]
 8002dea:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8002dee:	d302      	bcc.n	8002df6 <ES_WIFI_SendData+0x36>
  {
    Reqlen = ES_WIFI_PAYLOAD_SIZE;
 8002df0:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8002df4:	813b      	strh	r3, [r7, #8]
  }

  *SentLen = Reqlen;
 8002df6:	6a3b      	ldr	r3, [r7, #32]
 8002df8:	893a      	ldrh	r2, [r7, #8]
 8002dfa:	801a      	strh	r2, [r3, #0]
  sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002e02:	7afa      	ldrb	r2, [r7, #11]
 8002e04:	492d      	ldr	r1, [pc, #180]	; (8002ebc <ES_WIFI_SendData+0xfc>)
 8002e06:	4618      	mov	r0, r3
 8002e08:	f008 ffe4 	bl	800bdd4 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002e18:	461a      	mov	r2, r3
 8002e1a:	68f8      	ldr	r0, [r7, #12]
 8002e1c:	f7ff faf4 	bl	8002408 <AT_ExecuteCommand>
 8002e20:	4603      	mov	r3, r0
 8002e22:	74fb      	strb	r3, [r7, #19]
  if (ret == ES_WIFI_STATUS_OK)
 8002e24:	7cfb      	ldrb	r3, [r7, #19]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d13c      	bne.n	8002ea4 <ES_WIFI_SendData+0xe4>
  {
    sprintf((char*)Obj->CmdData,"S2=%lu\r",wkgTimeOut);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002e30:	697a      	ldr	r2, [r7, #20]
 8002e32:	4923      	ldr	r1, [pc, #140]	; (8002ec0 <ES_WIFI_SendData+0x100>)
 8002e34:	4618      	mov	r0, r3
 8002e36:	f008 ffcd 	bl	800bdd4 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002e46:	461a      	mov	r2, r3
 8002e48:	68f8      	ldr	r0, [r7, #12]
 8002e4a:	f7ff fadd 	bl	8002408 <AT_ExecuteCommand>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	74fb      	strb	r3, [r7, #19]

    if (ret == ES_WIFI_STATUS_OK)
 8002e52:	7cfb      	ldrb	r3, [r7, #19]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d125      	bne.n	8002ea4 <ES_WIFI_SendData+0xe4>
    {
      sprintf((char *)Obj->CmdData, "S3=%04d\r", Reqlen);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002e5e:	893a      	ldrh	r2, [r7, #8]
 8002e60:	4918      	ldr	r1, [pc, #96]	; (8002ec4 <ES_WIFI_SendData+0x104>)
 8002e62:	4618      	mov	r0, r3
 8002e64:	f008 ffb6 	bl	800bdd4 <siprintf>
      ret = AT_RequestSendData(Obj, Obj->CmdData, pdata, Reqlen, Obj->CmdData);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002e74:	893a      	ldrh	r2, [r7, #8]
 8002e76:	9300      	str	r3, [sp, #0]
 8002e78:	4613      	mov	r3, r2
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	68f8      	ldr	r0, [r7, #12]
 8002e7e:	f7ff fb33 	bl	80024e8 <AT_RequestSendData>
 8002e82:	4603      	mov	r3, r0
 8002e84:	74fb      	strb	r3, [r7, #19]

      if (ret == ES_WIFI_STATUS_OK)
 8002e86:	7cfb      	ldrb	r3, [r7, #19]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d10b      	bne.n	8002ea4 <ES_WIFI_SendData+0xe4>
      {
        if (strstr((char *)Obj->CmdData, "-1\r\n"))
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002e92:	490d      	ldr	r1, [pc, #52]	; (8002ec8 <ES_WIFI_SendData+0x108>)
 8002e94:	4618      	mov	r0, r3
 8002e96:	f009 f93d 	bl	800c114 <strstr>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d001      	beq.n	8002ea4 <ES_WIFI_SendData+0xe4>
        {
          DEBUG("Send Data detect error %s\n", (char *)Obj->CmdData);
          ret = ES_WIFI_STATUS_ERROR;
 8002ea0:	2302      	movs	r3, #2
 8002ea2:	74fb      	strb	r3, [r7, #19]
  else
  {
   DEBUG("P0 command failed\n");
  }

  if (ret == ES_WIFI_STATUS_ERROR)
 8002ea4:	7cfb      	ldrb	r3, [r7, #19]
 8002ea6:	2b02      	cmp	r3, #2
 8002ea8:	d102      	bne.n	8002eb0 <ES_WIFI_SendData+0xf0>
  {
    *SentLen = 0;
 8002eaa:	6a3b      	ldr	r3, [r7, #32]
 8002eac:	2200      	movs	r2, #0
 8002eae:	801a      	strh	r2, [r3, #0]
  }

  UNLOCK_WIFI();

  return ret;
 8002eb0:	7cfb      	ldrb	r3, [r7, #19]
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3718      	adds	r7, #24
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	0800e5d8 	.word	0x0800e5d8
 8002ec0:	0800e6b4 	.word	0x0800e6b4
 8002ec4:	0800e6bc 	.word	0x0800e6bc
 8002ec8:	0800e6c8 	.word	0x0800e6c8

08002ecc <ES_WIFI_ReceiveData>:
  * @param  len : pointer to the length of the data to be received
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_ReceiveData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen,
                                     uint16_t *Receivedlen, uint32_t Timeout)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b088      	sub	sp, #32
 8002ed0:	af02      	add	r7, sp, #8
 8002ed2:	60f8      	str	r0, [r7, #12]
 8002ed4:	607a      	str	r2, [r7, #4]
 8002ed6:	461a      	mov	r2, r3
 8002ed8:	460b      	mov	r3, r1
 8002eda:	72fb      	strb	r3, [r7, #11]
 8002edc:	4613      	mov	r3, r2
 8002ede:	813b      	strh	r3, [r7, #8]
  uint32_t wkgTimeOut;

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8002ee0:	2302      	movs	r3, #2
 8002ee2:	74fb      	strb	r3, [r7, #19]

  if (Timeout == 0)
 8002ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d102      	bne.n	8002ef0 <ES_WIFI_ReceiveData+0x24>
  {
    wkgTimeOut = NET_DEFAULT_NOBLOCKING_READ_TIMEOUT;
 8002eea:	2301      	movs	r3, #1
 8002eec:	617b      	str	r3, [r7, #20]
 8002eee:	e001      	b.n	8002ef4 <ES_WIFI_ReceiveData+0x28>
  }
  else
  {
    wkgTimeOut = Timeout;
 8002ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef2:	617b      	str	r3, [r7, #20]
  }

  LOCK_WIFI();

  if (Reqlen <= ES_WIFI_PAYLOAD_SIZE)
 8002ef4:	893b      	ldrh	r3, [r7, #8]
 8002ef6:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8002efa:	d862      	bhi.n	8002fc2 <ES_WIFI_ReceiveData+0xf6>
  {
    sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002f02:	7afa      	ldrb	r2, [r7, #11]
 8002f04:	4931      	ldr	r1, [pc, #196]	; (8002fcc <ES_WIFI_ReceiveData+0x100>)
 8002f06:	4618      	mov	r0, r3
 8002f08:	f008 ff64 	bl	800bdd4 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002f18:	461a      	mov	r2, r3
 8002f1a:	68f8      	ldr	r0, [r7, #12]
 8002f1c:	f7ff fa74 	bl	8002408 <AT_ExecuteCommand>
 8002f20:	4603      	mov	r3, r0
 8002f22:	74fb      	strb	r3, [r7, #19]

    if (ret == ES_WIFI_STATUS_OK)
 8002f24:	7cfb      	ldrb	r3, [r7, #19]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d146      	bne.n	8002fb8 <ES_WIFI_ReceiveData+0xec>
    {
      sprintf((char*)Obj->CmdData,"R1=%d\r", Reqlen);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002f30:	893a      	ldrh	r2, [r7, #8]
 8002f32:	4927      	ldr	r1, [pc, #156]	; (8002fd0 <ES_WIFI_ReceiveData+0x104>)
 8002f34:	4618      	mov	r0, r3
 8002f36:	f008 ff4d 	bl	800bdd4 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002f46:	461a      	mov	r2, r3
 8002f48:	68f8      	ldr	r0, [r7, #12]
 8002f4a:	f7ff fa5d 	bl	8002408 <AT_ExecuteCommand>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	74fb      	strb	r3, [r7, #19]
      if (ret == ES_WIFI_STATUS_OK)
 8002f52:	7cfb      	ldrb	r3, [r7, #19]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d12b      	bne.n	8002fb0 <ES_WIFI_ReceiveData+0xe4>
      {
        sprintf((char*)Obj->CmdData,"R2=%lu\r", wkgTimeOut);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002f5e:	697a      	ldr	r2, [r7, #20]
 8002f60:	491c      	ldr	r1, [pc, #112]	; (8002fd4 <ES_WIFI_ReceiveData+0x108>)
 8002f62:	4618      	mov	r0, r3
 8002f64:	f008 ff36 	bl	800bdd4 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002f74:	461a      	mov	r2, r3
 8002f76:	68f8      	ldr	r0, [r7, #12]
 8002f78:	f7ff fa46 	bl	8002408 <AT_ExecuteCommand>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	74fb      	strb	r3, [r7, #19]
        if (ret == ES_WIFI_STATUS_OK)
 8002f80:	7cfb      	ldrb	r3, [r7, #19]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d11d      	bne.n	8002fc2 <ES_WIFI_ReceiveData+0xf6>
        {
          sprintf((char*)Obj->CmdData,"R0\r");
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002f8c:	4912      	ldr	r1, [pc, #72]	; (8002fd8 <ES_WIFI_ReceiveData+0x10c>)
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f008 ff20 	bl	800bdd4 <siprintf>
          ret = AT_RequestReceiveData(Obj, Obj->CmdData, (char *)pdata, Reqlen, Receivedlen);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8002f9a:	893a      	ldrh	r2, [r7, #8]
 8002f9c:	6a3b      	ldr	r3, [r7, #32]
 8002f9e:	9300      	str	r3, [sp, #0]
 8002fa0:	4613      	mov	r3, r2
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	68f8      	ldr	r0, [r7, #12]
 8002fa6:	f7ff fb1f 	bl	80025e8 <AT_RequestReceiveData>
 8002faa:	4603      	mov	r3, r0
 8002fac:	74fb      	strb	r3, [r7, #19]
 8002fae:	e008      	b.n	8002fc2 <ES_WIFI_ReceiveData+0xf6>
        }
      }
      else
      {
        DEBUG("Setting requested len failed\n");
        *Receivedlen = 0;
 8002fb0:	6a3b      	ldr	r3, [r7, #32]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	801a      	strh	r2, [r3, #0]
 8002fb6:	e004      	b.n	8002fc2 <ES_WIFI_ReceiveData+0xf6>
      }
    }
    else
    {
      DEBUG("Setting socket for read failed\n");
      issue15++;
 8002fb8:	4b08      	ldr	r3, [pc, #32]	; (8002fdc <ES_WIFI_ReceiveData+0x110>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	3301      	adds	r3, #1
 8002fbe:	4a07      	ldr	r2, [pc, #28]	; (8002fdc <ES_WIFI_ReceiveData+0x110>)
 8002fc0:	6013      	str	r3, [r2, #0]
    }
  }

  UNLOCK_WIFI();

  return ret;
 8002fc2:	7cfb      	ldrb	r3, [r7, #19]
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3718      	adds	r7, #24
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}
 8002fcc:	0800e5d8 	.word	0x0800e5d8
 8002fd0:	0800e6d0 	.word	0x0800e6d0
 8002fd4:	0800e6d8 	.word	0x0800e6d8
 8002fd8:	0800e6e0 	.word	0x0800e6e0
 8002fdc:	20028bc4 	.word	0x20028bc4

08002fe0 <SPI_WIFI_MspInit>:
  * @brief  Initialize SPI MSP
  * @param  hspi: SPI handle
  * @retval None
  */
void SPI_WIFI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b08c      	sub	sp, #48	; 0x30
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_Init;

  __HAL_RCC_SPI3_CLK_ENABLE();
 8002fe8:	4b57      	ldr	r3, [pc, #348]	; (8003148 <SPI_WIFI_MspInit+0x168>)
 8002fea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fec:	4a56      	ldr	r2, [pc, #344]	; (8003148 <SPI_WIFI_MspInit+0x168>)
 8002fee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ff2:	6593      	str	r3, [r2, #88]	; 0x58
 8002ff4:	4b54      	ldr	r3, [pc, #336]	; (8003148 <SPI_WIFI_MspInit+0x168>)
 8002ff6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ff8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ffc:	61bb      	str	r3, [r7, #24]
 8002ffe:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003000:	4b51      	ldr	r3, [pc, #324]	; (8003148 <SPI_WIFI_MspInit+0x168>)
 8003002:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003004:	4a50      	ldr	r2, [pc, #320]	; (8003148 <SPI_WIFI_MspInit+0x168>)
 8003006:	f043 0302 	orr.w	r3, r3, #2
 800300a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800300c:	4b4e      	ldr	r3, [pc, #312]	; (8003148 <SPI_WIFI_MspInit+0x168>)
 800300e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003010:	f003 0302 	and.w	r3, r3, #2
 8003014:	617b      	str	r3, [r7, #20]
 8003016:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003018:	4b4b      	ldr	r3, [pc, #300]	; (8003148 <SPI_WIFI_MspInit+0x168>)
 800301a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800301c:	4a4a      	ldr	r2, [pc, #296]	; (8003148 <SPI_WIFI_MspInit+0x168>)
 800301e:	f043 0304 	orr.w	r3, r3, #4
 8003022:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003024:	4b48      	ldr	r3, [pc, #288]	; (8003148 <SPI_WIFI_MspInit+0x168>)
 8003026:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003028:	f003 0304 	and.w	r3, r3, #4
 800302c:	613b      	str	r3, [r7, #16]
 800302e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003030:	4b45      	ldr	r3, [pc, #276]	; (8003148 <SPI_WIFI_MspInit+0x168>)
 8003032:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003034:	4a44      	ldr	r2, [pc, #272]	; (8003148 <SPI_WIFI_MspInit+0x168>)
 8003036:	f043 0310 	orr.w	r3, r3, #16
 800303a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800303c:	4b42      	ldr	r3, [pc, #264]	; (8003148 <SPI_WIFI_MspInit+0x168>)
 800303e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003040:	f003 0310 	and.w	r3, r3, #16
 8003044:	60fb      	str	r3, [r7, #12]
 8003046:	68fb      	ldr	r3, [r7, #12]

  /* configure Wake up pin */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13, GPIO_PIN_RESET );
 8003048:	2200      	movs	r2, #0
 800304a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800304e:	483f      	ldr	r0, [pc, #252]	; (800314c <SPI_WIFI_MspInit+0x16c>)
 8003050:	f002 f938 	bl	80052c4 <HAL_GPIO_WritePin>
  GPIO_Init.Pin       = GPIO_PIN_13;
 8003054:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003058:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 800305a:	2301      	movs	r3, #1
 800305c:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 800305e:	2300      	movs	r3, #0
 8003060:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8003062:	2300      	movs	r3, #0
 8003064:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_Init );
 8003066:	f107 031c 	add.w	r3, r7, #28
 800306a:	4619      	mov	r1, r3
 800306c:	4837      	ldr	r0, [pc, #220]	; (800314c <SPI_WIFI_MspInit+0x16c>)
 800306e:	f001 ff7f 	bl	8004f70 <HAL_GPIO_Init>

  /* configure Data ready pin */
  GPIO_Init.Pin       = GPIO_PIN_1;
 8003072:	2302      	movs	r3, #2
 8003074:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_IT_RISING;
 8003076:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800307a:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 800307c:	2300      	movs	r3, #0
 800307e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8003080:	2300      	movs	r3, #0
 8003082:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 8003084:	f107 031c 	add.w	r3, r7, #28
 8003088:	4619      	mov	r1, r3
 800308a:	4831      	ldr	r0, [pc, #196]	; (8003150 <SPI_WIFI_MspInit+0x170>)
 800308c:	f001 ff70 	bl	8004f70 <HAL_GPIO_Init>

  /* configure Reset pin */
  GPIO_Init.Pin       = GPIO_PIN_8;
 8003090:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003094:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8003096:	2301      	movs	r3, #1
 8003098:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 800309a:	2300      	movs	r3, #0
 800309c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 800309e:	2300      	movs	r3, #0
 80030a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = 0;
 80030a2:	2300      	movs	r3, #0
 80030a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 80030a6:	f107 031c 	add.w	r3, r7, #28
 80030aa:	4619      	mov	r1, r3
 80030ac:	4828      	ldr	r0, [pc, #160]	; (8003150 <SPI_WIFI_MspInit+0x170>)
 80030ae:	f001 ff5f 	bl	8004f70 <HAL_GPIO_Init>

  /* configure SPI NSS pin pin */
  HAL_GPIO_WritePin( GPIOE , GPIO_PIN_0, GPIO_PIN_SET );
 80030b2:	2201      	movs	r2, #1
 80030b4:	2101      	movs	r1, #1
 80030b6:	4826      	ldr	r0, [pc, #152]	; (8003150 <SPI_WIFI_MspInit+0x170>)
 80030b8:	f002 f904 	bl	80052c4 <HAL_GPIO_WritePin>
  GPIO_Init.Pin       =  GPIO_PIN_0;
 80030bc:	2301      	movs	r3, #1
 80030be:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 80030c0:	2301      	movs	r3, #1
 80030c2:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 80030c4:	2300      	movs	r3, #0
 80030c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 80030c8:	2301      	movs	r3, #1
 80030ca:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init( GPIOE, &GPIO_Init );
 80030cc:	f107 031c 	add.w	r3, r7, #28
 80030d0:	4619      	mov	r1, r3
 80030d2:	481f      	ldr	r0, [pc, #124]	; (8003150 <SPI_WIFI_MspInit+0x170>)
 80030d4:	f001 ff4c 	bl	8004f70 <HAL_GPIO_Init>

  /* configure SPI CLK pin */
  GPIO_Init.Pin       =  GPIO_PIN_10;
 80030d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80030dc:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 80030de:	2302      	movs	r3, #2
 80030e0:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 80030e2:	2300      	movs	r3, #0
 80030e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 80030e6:	2301      	movs	r3, #1
 80030e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 80030ea:	2306      	movs	r3, #6
 80030ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_Init );
 80030ee:	f107 031c 	add.w	r3, r7, #28
 80030f2:	4619      	mov	r1, r3
 80030f4:	4817      	ldr	r0, [pc, #92]	; (8003154 <SPI_WIFI_MspInit+0x174>)
 80030f6:	f001 ff3b 	bl	8004f70 <HAL_GPIO_Init>

  /* configure SPI MOSI pin */
  GPIO_Init.Pin       = GPIO_PIN_12;
 80030fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030fe:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8003100:	2302      	movs	r3, #2
 8003102:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8003104:	2300      	movs	r3, #0
 8003106:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8003108:	2301      	movs	r3, #1
 800310a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 800310c:	2306      	movs	r3, #6
 800310e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 8003110:	f107 031c 	add.w	r3, r7, #28
 8003114:	4619      	mov	r1, r3
 8003116:	480f      	ldr	r0, [pc, #60]	; (8003154 <SPI_WIFI_MspInit+0x174>)
 8003118:	f001 ff2a 	bl	8004f70 <HAL_GPIO_Init>

  /* configure SPI MISO pin */
  GPIO_Init.Pin       = GPIO_PIN_11;
 800311c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003120:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8003122:	2302      	movs	r3, #2
 8003124:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_PULLUP;
 8003126:	2301      	movs	r3, #1
 8003128:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 800312a:	2301      	movs	r3, #1
 800312c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 800312e:	2306      	movs	r3, #6
 8003130:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init( GPIOC,&GPIO_Init );
 8003132:	f107 031c 	add.w	r3, r7, #28
 8003136:	4619      	mov	r1, r3
 8003138:	4806      	ldr	r0, [pc, #24]	; (8003154 <SPI_WIFI_MspInit+0x174>)
 800313a:	f001 ff19 	bl	8004f70 <HAL_GPIO_Init>
}
 800313e:	bf00      	nop
 8003140:	3730      	adds	r7, #48	; 0x30
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	40021000 	.word	0x40021000
 800314c:	48000400 	.word	0x48000400
 8003150:	48001000 	.word	0x48001000
 8003154:	48000800 	.word	0x48000800

08003158 <SPI_WIFI_Init>:
  * @brief  Initialize the SPI3
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_Init(uint16_t mode)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b084      	sub	sp, #16
 800315c:	af00      	add	r7, sp, #0
 800315e:	4603      	mov	r3, r0
 8003160:	80fb      	strh	r3, [r7, #6]
  int8_t  rc=0;
 8003162:	2300      	movs	r3, #0
 8003164:	73fb      	strb	r3, [r7, #15]

  if (mode == ES_WIFI_INIT)
 8003166:	88fb      	ldrh	r3, [r7, #6]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d145      	bne.n	80031f8 <SPI_WIFI_Init+0xa0>
  {
    hspi.Instance               = SPI3;
 800316c:	4b27      	ldr	r3, [pc, #156]	; (800320c <SPI_WIFI_Init+0xb4>)
 800316e:	4a28      	ldr	r2, [pc, #160]	; (8003210 <SPI_WIFI_Init+0xb8>)
 8003170:	601a      	str	r2, [r3, #0]
    SPI_WIFI_MspInit(&hspi);
 8003172:	4826      	ldr	r0, [pc, #152]	; (800320c <SPI_WIFI_Init+0xb4>)
 8003174:	f7ff ff34 	bl	8002fe0 <SPI_WIFI_MspInit>

    hspi.Init.Mode              = SPI_MODE_MASTER;
 8003178:	4b24      	ldr	r3, [pc, #144]	; (800320c <SPI_WIFI_Init+0xb4>)
 800317a:	f44f 7282 	mov.w	r2, #260	; 0x104
 800317e:	605a      	str	r2, [r3, #4]
    hspi.Init.Direction         = SPI_DIRECTION_2LINES;
 8003180:	4b22      	ldr	r3, [pc, #136]	; (800320c <SPI_WIFI_Init+0xb4>)
 8003182:	2200      	movs	r2, #0
 8003184:	609a      	str	r2, [r3, #8]
    hspi.Init.DataSize          = SPI_DATASIZE_16BIT;
 8003186:	4b21      	ldr	r3, [pc, #132]	; (800320c <SPI_WIFI_Init+0xb4>)
 8003188:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 800318c:	60da      	str	r2, [r3, #12]
    hspi.Init.CLKPolarity       = SPI_POLARITY_LOW;
 800318e:	4b1f      	ldr	r3, [pc, #124]	; (800320c <SPI_WIFI_Init+0xb4>)
 8003190:	2200      	movs	r2, #0
 8003192:	611a      	str	r2, [r3, #16]
    hspi.Init.CLKPhase          = SPI_PHASE_1EDGE;
 8003194:	4b1d      	ldr	r3, [pc, #116]	; (800320c <SPI_WIFI_Init+0xb4>)
 8003196:	2200      	movs	r2, #0
 8003198:	615a      	str	r2, [r3, #20]
    hspi.Init.NSS               = SPI_NSS_SOFT;
 800319a:	4b1c      	ldr	r3, [pc, #112]	; (800320c <SPI_WIFI_Init+0xb4>)
 800319c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031a0:	619a      	str	r2, [r3, #24]
    hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8; /* 80/8= 10MHz (Inventek WIFI module supports up to 20MHz)*/
 80031a2:	4b1a      	ldr	r3, [pc, #104]	; (800320c <SPI_WIFI_Init+0xb4>)
 80031a4:	2210      	movs	r2, #16
 80031a6:	61da      	str	r2, [r3, #28]
    hspi.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 80031a8:	4b18      	ldr	r3, [pc, #96]	; (800320c <SPI_WIFI_Init+0xb4>)
 80031aa:	2200      	movs	r2, #0
 80031ac:	621a      	str	r2, [r3, #32]
    hspi.Init.TIMode            = SPI_TIMODE_DISABLE;
 80031ae:	4b17      	ldr	r3, [pc, #92]	; (800320c <SPI_WIFI_Init+0xb4>)
 80031b0:	2200      	movs	r2, #0
 80031b2:	625a      	str	r2, [r3, #36]	; 0x24
    hspi.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
 80031b4:	4b15      	ldr	r3, [pc, #84]	; (800320c <SPI_WIFI_Init+0xb4>)
 80031b6:	2200      	movs	r2, #0
 80031b8:	629a      	str	r2, [r3, #40]	; 0x28
    hspi.Init.CRCPolynomial     = 0;
 80031ba:	4b14      	ldr	r3, [pc, #80]	; (800320c <SPI_WIFI_Init+0xb4>)
 80031bc:	2200      	movs	r2, #0
 80031be:	62da      	str	r2, [r3, #44]	; 0x2c

    if(HAL_SPI_Init( &hspi ) != HAL_OK)
 80031c0:	4812      	ldr	r0, [pc, #72]	; (800320c <SPI_WIFI_Init+0xb4>)
 80031c2:	f003 fcbf 	bl	8006b44 <HAL_SPI_Init>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d002      	beq.n	80031d2 <SPI_WIFI_Init+0x7a>
    {
      return -1;
 80031cc:	f04f 33ff 	mov.w	r3, #4294967295
 80031d0:	e018      	b.n	8003204 <SPI_WIFI_Init+0xac>
    }

     /* Enable Interrupt for Data Ready pin , GPIO_PIN1 */
     HAL_NVIC_SetPriority((IRQn_Type)EXTI1_IRQn, SPI_INTERFACE_PRIO, 0x00);
 80031d2:	2200      	movs	r2, #0
 80031d4:	2100      	movs	r1, #0
 80031d6:	2007      	movs	r0, #7
 80031d8:	f000 fe61 	bl	8003e9e <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)EXTI1_IRQn);
 80031dc:	2007      	movs	r0, #7
 80031de:	f000 fe7a 	bl	8003ed6 <HAL_NVIC_EnableIRQ>

     /* Enable Interrupt for SPI tx and rx */
     HAL_NVIC_SetPriority((IRQn_Type)SPI3_IRQn, SPI_INTERFACE_PRIO, 0);
 80031e2:	2200      	movs	r2, #0
 80031e4:	2100      	movs	r1, #0
 80031e6:	2033      	movs	r0, #51	; 0x33
 80031e8:	f000 fe59 	bl	8003e9e <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)SPI3_IRQn);
 80031ec:	2033      	movs	r0, #51	; 0x33
 80031ee:	f000 fe72 	bl	8003ed6 <HAL_NVIC_EnableIRQ>
    SEM_WAIT(cmddata_rdy_rising_sem, 1);
    SEM_WAIT(spi_rx_sem, 1);
    SEM_WAIT(spi_tx_sem, 1);
#endif /* WIFI_USE_CMSIS_OS */
    /* first call used for calibration */
    SPI_WIFI_DelayUs(10);
 80031f2:	200a      	movs	r0, #10
 80031f4:	f000 f9fe 	bl	80035f4 <SPI_WIFI_DelayUs>
  }

  rc = SPI_WIFI_ResetModule();
 80031f8:	f000 f80c 	bl	8003214 <SPI_WIFI_ResetModule>
 80031fc:	4603      	mov	r3, r0
 80031fe:	73fb      	strb	r3, [r7, #15]

  return rc;
 8003200:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003204:	4618      	mov	r0, r3
 8003206:	3710      	adds	r7, #16
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}
 800320c:	20028bc8 	.word	0x20028bc8
 8003210:	40003c00 	.word	0x40003c00

08003214 <SPI_WIFI_ResetModule>:


int8_t SPI_WIFI_ResetModule(void)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b084      	sub	sp, #16
 8003218:	af00      	add	r7, sp, #0
  uint32_t tickstart = HAL_GetTick();
 800321a:	f000 fd35 	bl	8003c88 <HAL_GetTick>
 800321e:	60b8      	str	r0, [r7, #8]
  uint8_t Prompt[6];
  uint8_t count = 0;
 8003220:	2300      	movs	r3, #0
 8003222:	73fb      	strb	r3, [r7, #15]
  HAL_StatusTypeDef  Status;

  WIFI_RESET_MODULE();
 8003224:	2200      	movs	r2, #0
 8003226:	f44f 7180 	mov.w	r1, #256	; 0x100
 800322a:	4830      	ldr	r0, [pc, #192]	; (80032ec <SPI_WIFI_ResetModule+0xd8>)
 800322c:	f002 f84a 	bl	80052c4 <HAL_GPIO_WritePin>
 8003230:	200a      	movs	r0, #10
 8003232:	f000 fd35 	bl	8003ca0 <HAL_Delay>
 8003236:	2201      	movs	r2, #1
 8003238:	f44f 7180 	mov.w	r1, #256	; 0x100
 800323c:	482b      	ldr	r0, [pc, #172]	; (80032ec <SPI_WIFI_ResetModule+0xd8>)
 800323e:	f002 f841 	bl	80052c4 <HAL_GPIO_WritePin>
 8003242:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003246:	f000 fd2b 	bl	8003ca0 <HAL_Delay>
  WIFI_ENABLE_NSS();
 800324a:	2200      	movs	r2, #0
 800324c:	2101      	movs	r1, #1
 800324e:	4827      	ldr	r0, [pc, #156]	; (80032ec <SPI_WIFI_ResetModule+0xd8>)
 8003250:	f002 f838 	bl	80052c4 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8003254:	200f      	movs	r0, #15
 8003256:	f000 f9cd 	bl	80035f4 <SPI_WIFI_DelayUs>

  while (WIFI_IS_CMDDATA_READY())
 800325a:	e020      	b.n	800329e <SPI_WIFI_ResetModule+0x8a>
  {
    Status = HAL_SPI_Receive(&hspi , &Prompt[count], 1, 0xFFFF);
 800325c:	7bfb      	ldrb	r3, [r7, #15]
 800325e:	463a      	mov	r2, r7
 8003260:	18d1      	adds	r1, r2, r3
 8003262:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003266:	2201      	movs	r2, #1
 8003268:	4821      	ldr	r0, [pc, #132]	; (80032f0 <SPI_WIFI_ResetModule+0xdc>)
 800326a:	f003 fd73 	bl	8006d54 <HAL_SPI_Receive>
 800326e:	4603      	mov	r3, r0
 8003270:	71fb      	strb	r3, [r7, #7]
    count += 2;
 8003272:	7bfb      	ldrb	r3, [r7, #15]
 8003274:	3302      	adds	r3, #2
 8003276:	73fb      	strb	r3, [r7, #15]
    if (((HAL_GetTick() - tickstart) > 0xFFFF) || (Status != HAL_OK))
 8003278:	f000 fd06 	bl	8003c88 <HAL_GetTick>
 800327c:	4602      	mov	r2, r0
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	1ad3      	subs	r3, r2, r3
 8003282:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003286:	d202      	bcs.n	800328e <SPI_WIFI_ResetModule+0x7a>
 8003288:	79fb      	ldrb	r3, [r7, #7]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d007      	beq.n	800329e <SPI_WIFI_ResetModule+0x8a>
    {
      WIFI_DISABLE_NSS();
 800328e:	2201      	movs	r2, #1
 8003290:	2101      	movs	r1, #1
 8003292:	4816      	ldr	r0, [pc, #88]	; (80032ec <SPI_WIFI_ResetModule+0xd8>)
 8003294:	f002 f816 	bl	80052c4 <HAL_GPIO_WritePin>
      return -1;
 8003298:	f04f 33ff 	mov.w	r3, #4294967295
 800329c:	e021      	b.n	80032e2 <SPI_WIFI_ResetModule+0xce>
  while (WIFI_IS_CMDDATA_READY())
 800329e:	2102      	movs	r1, #2
 80032a0:	4812      	ldr	r0, [pc, #72]	; (80032ec <SPI_WIFI_ResetModule+0xd8>)
 80032a2:	f001 fff7 	bl	8005294 <HAL_GPIO_ReadPin>
 80032a6:	4603      	mov	r3, r0
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d0d7      	beq.n	800325c <SPI_WIFI_ResetModule+0x48>
    }
  }

  WIFI_DISABLE_NSS();
 80032ac:	2201      	movs	r2, #1
 80032ae:	2101      	movs	r1, #1
 80032b0:	480e      	ldr	r0, [pc, #56]	; (80032ec <SPI_WIFI_ResetModule+0xd8>)
 80032b2:	f002 f807 	bl	80052c4 <HAL_GPIO_WritePin>

  if ((Prompt[0] != 0x15) || (Prompt[1] != 0x15) || (Prompt[2] != '\r') ||
 80032b6:	783b      	ldrb	r3, [r7, #0]
 80032b8:	2b15      	cmp	r3, #21
 80032ba:	d10e      	bne.n	80032da <SPI_WIFI_ResetModule+0xc6>
 80032bc:	787b      	ldrb	r3, [r7, #1]
 80032be:	2b15      	cmp	r3, #21
 80032c0:	d10b      	bne.n	80032da <SPI_WIFI_ResetModule+0xc6>
 80032c2:	78bb      	ldrb	r3, [r7, #2]
 80032c4:	2b0d      	cmp	r3, #13
 80032c6:	d108      	bne.n	80032da <SPI_WIFI_ResetModule+0xc6>
      (Prompt[3] != '\n') || (Prompt[4] != '>') || (Prompt[5] != ' '))
 80032c8:	78fb      	ldrb	r3, [r7, #3]
  if ((Prompt[0] != 0x15) || (Prompt[1] != 0x15) || (Prompt[2] != '\r') ||
 80032ca:	2b0a      	cmp	r3, #10
 80032cc:	d105      	bne.n	80032da <SPI_WIFI_ResetModule+0xc6>
      (Prompt[3] != '\n') || (Prompt[4] != '>') || (Prompt[5] != ' '))
 80032ce:	793b      	ldrb	r3, [r7, #4]
 80032d0:	2b3e      	cmp	r3, #62	; 0x3e
 80032d2:	d102      	bne.n	80032da <SPI_WIFI_ResetModule+0xc6>
 80032d4:	797b      	ldrb	r3, [r7, #5]
 80032d6:	2b20      	cmp	r3, #32
 80032d8:	d002      	beq.n	80032e0 <SPI_WIFI_ResetModule+0xcc>
  {
    return -1;
 80032da:	f04f 33ff 	mov.w	r3, #4294967295
 80032de:	e000      	b.n	80032e2 <SPI_WIFI_ResetModule+0xce>
  }
  return 0;
 80032e0:	2300      	movs	r3, #0
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3710      	adds	r7, #16
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}
 80032ea:	bf00      	nop
 80032ec:	48001000 	.word	0x48001000
 80032f0:	20028bc8 	.word	0x20028bc8

080032f4 <SPI_WIFI_DeInit>:
  * @brief  DeInitialize the SPI
  * @param  None
  * @retval 0
  */
int8_t SPI_WIFI_DeInit(void)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	af00      	add	r7, sp, #0
  HAL_SPI_DeInit( &hspi );
 80032f8:	4802      	ldr	r0, [pc, #8]	; (8003304 <SPI_WIFI_DeInit+0x10>)
 80032fa:	f003 fcef 	bl	8006cdc <HAL_SPI_DeInit>
  osMutexDelete(es_wifi_mutex);
  osSemaphoreDelete(spi_tx_sem);
  osSemaphoreDelete(spi_rx_sem);
  osSemaphoreDelete(cmddata_rdy_rising_sem);
#endif /* WIFI_USE_CMSIS_OS */
  return 0;
 80032fe:	2300      	movs	r3, #0
}
 8003300:	4618      	mov	r0, r3
 8003302:	bd80      	pop	{r7, pc}
 8003304:	20028bc8 	.word	0x20028bc8

08003308 <wait_cmddata_rdy_high>:
  * @param  len : Data length
  * @param  timeout : send timeout in mS
  * @retval Length of received data (payload)
  */
static int wait_cmddata_rdy_high(int timeout)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b084      	sub	sp, #16
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  int tickstart = HAL_GetTick();
 8003310:	f000 fcba 	bl	8003c88 <HAL_GetTick>
 8003314:	4603      	mov	r3, r0
 8003316:	60fb      	str	r3, [r7, #12]
  while (WIFI_IS_CMDDATA_READY() == 0)
 8003318:	e00a      	b.n	8003330 <wait_cmddata_rdy_high+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 800331a:	f000 fcb5 	bl	8003c88 <HAL_GetTick>
 800331e:	4602      	mov	r2, r0
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	1ad2      	subs	r2, r2, r3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	429a      	cmp	r2, r3
 8003328:	d902      	bls.n	8003330 <wait_cmddata_rdy_high+0x28>
    {
      return -1;
 800332a:	f04f 33ff 	mov.w	r3, #4294967295
 800332e:	e007      	b.n	8003340 <wait_cmddata_rdy_high+0x38>
  while (WIFI_IS_CMDDATA_READY() == 0)
 8003330:	2102      	movs	r1, #2
 8003332:	4805      	ldr	r0, [pc, #20]	; (8003348 <wait_cmddata_rdy_high+0x40>)
 8003334:	f001 ffae 	bl	8005294 <HAL_GPIO_ReadPin>
 8003338:	4603      	mov	r3, r0
 800333a:	2b01      	cmp	r3, #1
 800333c:	d1ed      	bne.n	800331a <wait_cmddata_rdy_high+0x12>
    }
  }
  return 0;
 800333e:	2300      	movs	r3, #0
}
 8003340:	4618      	mov	r0, r3
 8003342:	3710      	adds	r7, #16
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}
 8003348:	48001000 	.word	0x48001000

0800334c <wait_cmddata_rdy_rising_event>:


static int wait_cmddata_rdy_rising_event(int timeout)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b084      	sub	sp, #16
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(cmddata_rdy_rising_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 8003354:	f000 fc98 	bl	8003c88 <HAL_GetTick>
 8003358:	4603      	mov	r3, r0
 800335a:	60fb      	str	r3, [r7, #12]
  while (cmddata_rdy_rising_event == 1)
 800335c:	e00a      	b.n	8003374 <wait_cmddata_rdy_rising_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 800335e:	f000 fc93 	bl	8003c88 <HAL_GetTick>
 8003362:	4602      	mov	r2, r0
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	1ad2      	subs	r2, r2, r3
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	429a      	cmp	r2, r3
 800336c:	d902      	bls.n	8003374 <wait_cmddata_rdy_rising_event+0x28>
    {
      return -1;
 800336e:	f04f 33ff 	mov.w	r3, #4294967295
 8003372:	e004      	b.n	800337e <wait_cmddata_rdy_rising_event+0x32>
  while (cmddata_rdy_rising_event == 1)
 8003374:	4b04      	ldr	r3, [pc, #16]	; (8003388 <wait_cmddata_rdy_rising_event+0x3c>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	2b01      	cmp	r3, #1
 800337a:	d0f0      	beq.n	800335e <wait_cmddata_rdy_rising_event+0x12>
    }
  }
  return 0;
 800337c:	2300      	movs	r3, #0
#endif /* SEM_WAIT */
}
 800337e:	4618      	mov	r0, r3
 8003380:	3710      	adds	r7, #16
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	20028c34 	.word	0x20028c34

0800338c <wait_spi_rx_event>:


static int wait_spi_rx_event(int timeout)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b084      	sub	sp, #16
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_rx_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 8003394:	f000 fc78 	bl	8003c88 <HAL_GetTick>
 8003398:	4603      	mov	r3, r0
 800339a:	60fb      	str	r3, [r7, #12]
  while (spi_rx_event == 1)
 800339c:	e00a      	b.n	80033b4 <wait_spi_rx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 800339e:	f000 fc73 	bl	8003c88 <HAL_GetTick>
 80033a2:	4602      	mov	r2, r0
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	1ad2      	subs	r2, r2, r3
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	429a      	cmp	r2, r3
 80033ac:	d902      	bls.n	80033b4 <wait_spi_rx_event+0x28>
    {
      return -1;
 80033ae:	f04f 33ff 	mov.w	r3, #4294967295
 80033b2:	e004      	b.n	80033be <wait_spi_rx_event+0x32>
  while (spi_rx_event == 1)
 80033b4:	4b04      	ldr	r3, [pc, #16]	; (80033c8 <wait_spi_rx_event+0x3c>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d0f0      	beq.n	800339e <wait_spi_rx_event+0x12>
    }
  }
  return 0;
 80033bc:	2300      	movs	r3, #0
#endif /* SEM_WAIT */
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3710      	adds	r7, #16
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	bf00      	nop
 80033c8:	20028c2c 	.word	0x20028c2c

080033cc <wait_spi_tx_event>:


static int wait_spi_tx_event(int timeout)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b084      	sub	sp, #16
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_tx_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 80033d4:	f000 fc58 	bl	8003c88 <HAL_GetTick>
 80033d8:	4603      	mov	r3, r0
 80033da:	60fb      	str	r3, [r7, #12]
  while (spi_tx_event == 1)
 80033dc:	e00a      	b.n	80033f4 <wait_spi_tx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 80033de:	f000 fc53 	bl	8003c88 <HAL_GetTick>
 80033e2:	4602      	mov	r2, r0
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	1ad2      	subs	r2, r2, r3
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d902      	bls.n	80033f4 <wait_spi_tx_event+0x28>
    {
      return -1;
 80033ee:	f04f 33ff 	mov.w	r3, #4294967295
 80033f2:	e004      	b.n	80033fe <wait_spi_tx_event+0x32>
  while (spi_tx_event == 1)
 80033f4:	4b04      	ldr	r3, [pc, #16]	; (8003408 <wait_spi_tx_event+0x3c>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d0f0      	beq.n	80033de <wait_spi_tx_event+0x12>
    }
  }
  return 0;
 80033fc:	2300      	movs	r3, #0
#endif /* SEM_WAIT */
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3710      	adds	r7, #16
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}
 8003406:	bf00      	nop
 8003408:	20028c30 	.word	0x20028c30

0800340c <SPI_WIFI_ReceiveData>:


int16_t SPI_WIFI_ReceiveData(uint8_t *pData, uint16_t len, uint32_t timeout)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b086      	sub	sp, #24
 8003410:	af00      	add	r7, sp, #0
 8003412:	60f8      	str	r0, [r7, #12]
 8003414:	460b      	mov	r3, r1
 8003416:	607a      	str	r2, [r7, #4]
 8003418:	817b      	strh	r3, [r7, #10]
  int16_t length = 0;
 800341a:	2300      	movs	r3, #0
 800341c:	82fb      	strh	r3, [r7, #22]
  uint8_t tmp[2];

  WIFI_DISABLE_NSS();
 800341e:	2201      	movs	r2, #1
 8003420:	2101      	movs	r1, #1
 8003422:	4834      	ldr	r0, [pc, #208]	; (80034f4 <SPI_WIFI_ReceiveData+0xe8>)
 8003424:	f001 ff4e 	bl	80052c4 <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  SPI_WIFI_DelayUs(3);
 8003428:	2003      	movs	r0, #3
 800342a:	f000 f8e3 	bl	80035f4 <SPI_WIFI_DelayUs>

  if (wait_cmddata_rdy_rising_event(timeout) < 0)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	4618      	mov	r0, r3
 8003432:	f7ff ff8b 	bl	800334c <wait_cmddata_rdy_rising_event>
 8003436:	4603      	mov	r3, r0
 8003438:	2b00      	cmp	r3, #0
 800343a:	da02      	bge.n	8003442 <SPI_WIFI_ReceiveData+0x36>
  {
      return ES_WIFI_ERROR_WAITING_DRDY_FALLING;
 800343c:	f06f 0302 	mvn.w	r3, #2
 8003440:	e054      	b.n	80034ec <SPI_WIFI_ReceiveData+0xe0>
  }

  LOCK_SPI();
  WIFI_ENABLE_NSS();
 8003442:	2200      	movs	r2, #0
 8003444:	2101      	movs	r1, #1
 8003446:	482b      	ldr	r0, [pc, #172]	; (80034f4 <SPI_WIFI_ReceiveData+0xe8>)
 8003448:	f001 ff3c 	bl	80052c4 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 800344c:	200f      	movs	r0, #15
 800344e:	f000 f8d1 	bl	80035f4 <SPI_WIFI_DelayUs>
  while (WIFI_IS_CMDDATA_READY())
 8003452:	e03d      	b.n	80034d0 <SPI_WIFI_ReceiveData+0xc4>
  {
    if ((length < len) || (!len))
 8003454:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003458:	897b      	ldrh	r3, [r7, #10]
 800345a:	429a      	cmp	r2, r3
 800345c:	db02      	blt.n	8003464 <SPI_WIFI_ReceiveData+0x58>
 800345e:	897b      	ldrh	r3, [r7, #10]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d13c      	bne.n	80034de <SPI_WIFI_ReceiveData+0xd2>
    {
      spi_rx_event = 1;
 8003464:	4b24      	ldr	r3, [pc, #144]	; (80034f8 <SPI_WIFI_ReceiveData+0xec>)
 8003466:	2201      	movs	r2, #1
 8003468:	601a      	str	r2, [r3, #0]
      if (HAL_SPI_Receive_IT(&hspi, tmp, 1) != HAL_OK) {
 800346a:	f107 0314 	add.w	r3, r7, #20
 800346e:	2201      	movs	r2, #1
 8003470:	4619      	mov	r1, r3
 8003472:	4822      	ldr	r0, [pc, #136]	; (80034fc <SPI_WIFI_ReceiveData+0xf0>)
 8003474:	f004 fa3c 	bl	80078f0 <HAL_SPI_Receive_IT>
 8003478:	4603      	mov	r3, r0
 800347a:	2b00      	cmp	r3, #0
 800347c:	d007      	beq.n	800348e <SPI_WIFI_ReceiveData+0x82>
        WIFI_DISABLE_NSS();
 800347e:	2201      	movs	r2, #1
 8003480:	2101      	movs	r1, #1
 8003482:	481c      	ldr	r0, [pc, #112]	; (80034f4 <SPI_WIFI_ReceiveData+0xe8>)
 8003484:	f001 ff1e 	bl	80052c4 <HAL_GPIO_WritePin>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_SPI_FAILED;
 8003488:	f04f 33ff 	mov.w	r3, #4294967295
 800348c:	e02e      	b.n	80034ec <SPI_WIFI_ReceiveData+0xe0>
      }

      wait_spi_rx_event(timeout);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4618      	mov	r0, r3
 8003492:	f7ff ff7b 	bl	800338c <wait_spi_rx_event>

      pData[0] = tmp[0];
 8003496:	7d3a      	ldrb	r2, [r7, #20]
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	701a      	strb	r2, [r3, #0]
      pData[1] = tmp[1];
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	3301      	adds	r3, #1
 80034a0:	7d7a      	ldrb	r2, [r7, #21]
 80034a2:	701a      	strb	r2, [r3, #0]
      length += 2;
 80034a4:	8afb      	ldrh	r3, [r7, #22]
 80034a6:	3302      	adds	r3, #2
 80034a8:	b29b      	uxth	r3, r3
 80034aa:	82fb      	strh	r3, [r7, #22]
      pData  += 2;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	3302      	adds	r3, #2
 80034b0:	60fb      	str	r3, [r7, #12]

      if (length >= ES_WIFI_DATA_SIZE) {
 80034b2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80034b6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80034ba:	db09      	blt.n	80034d0 <SPI_WIFI_ReceiveData+0xc4>
        WIFI_DISABLE_NSS();
 80034bc:	2201      	movs	r2, #1
 80034be:	2101      	movs	r1, #1
 80034c0:	480c      	ldr	r0, [pc, #48]	; (80034f4 <SPI_WIFI_ReceiveData+0xe8>)
 80034c2:	f001 feff 	bl	80052c4 <HAL_GPIO_WritePin>
        SPI_WIFI_ResetModule();
 80034c6:	f7ff fea5 	bl	8003214 <SPI_WIFI_ResetModule>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_STUFFING_FOREVER;
 80034ca:	f06f 0303 	mvn.w	r3, #3
 80034ce:	e00d      	b.n	80034ec <SPI_WIFI_ReceiveData+0xe0>
  while (WIFI_IS_CMDDATA_READY())
 80034d0:	2102      	movs	r1, #2
 80034d2:	4808      	ldr	r0, [pc, #32]	; (80034f4 <SPI_WIFI_ReceiveData+0xe8>)
 80034d4:	f001 fede 	bl	8005294 <HAL_GPIO_ReadPin>
 80034d8:	4603      	mov	r3, r0
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d0ba      	beq.n	8003454 <SPI_WIFI_ReceiveData+0x48>
    else
    {
      break;
    }
  }
  WIFI_DISABLE_NSS();
 80034de:	2201      	movs	r2, #1
 80034e0:	2101      	movs	r1, #1
 80034e2:	4804      	ldr	r0, [pc, #16]	; (80034f4 <SPI_WIFI_ReceiveData+0xe8>)
 80034e4:	f001 feee 	bl	80052c4 <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  return length;
 80034e8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	3718      	adds	r7, #24
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}
 80034f4:	48001000 	.word	0x48001000
 80034f8:	20028c2c 	.word	0x20028c2c
 80034fc:	20028bc8 	.word	0x20028bc8

08003500 <SPI_WIFI_SendData>:
  * @param  len : Data length
  * @param  timeout : send timeout in mS
  * @retval Length of sent data
  */
int16_t SPI_WIFI_SendData(const uint8_t *pdata, uint16_t len, uint32_t timeout)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b086      	sub	sp, #24
 8003504:	af00      	add	r7, sp, #0
 8003506:	60f8      	str	r0, [r7, #12]
 8003508:	460b      	mov	r3, r1
 800350a:	607a      	str	r2, [r7, #4]
 800350c:	817b      	strh	r3, [r7, #10]
  uint8_t Padding[2];

  if (wait_cmddata_rdy_high(timeout) < 0)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	4618      	mov	r0, r3
 8003512:	f7ff fef9 	bl	8003308 <wait_cmddata_rdy_high>
 8003516:	4603      	mov	r3, r0
 8003518:	2b00      	cmp	r3, #0
 800351a:	da02      	bge.n	8003522 <SPI_WIFI_SendData+0x22>
  {
    return ES_WIFI_ERROR_SPI_FAILED;
 800351c:	f04f 33ff 	mov.w	r3, #4294967295
 8003520:	e04f      	b.n	80035c2 <SPI_WIFI_SendData+0xc2>
  }

  /* arm to detect rising event */
  cmddata_rdy_rising_event = 1;
 8003522:	4b2a      	ldr	r3, [pc, #168]	; (80035cc <SPI_WIFI_SendData+0xcc>)
 8003524:	2201      	movs	r2, #1
 8003526:	601a      	str	r2, [r3, #0]
  LOCK_SPI();
  WIFI_ENABLE_NSS();
 8003528:	2200      	movs	r2, #0
 800352a:	2101      	movs	r1, #1
 800352c:	4828      	ldr	r0, [pc, #160]	; (80035d0 <SPI_WIFI_SendData+0xd0>)
 800352e:	f001 fec9 	bl	80052c4 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8003532:	200f      	movs	r0, #15
 8003534:	f000 f85e 	bl	80035f4 <SPI_WIFI_DelayUs>
  if (len > 1)
 8003538:	897b      	ldrh	r3, [r7, #10]
 800353a:	2b01      	cmp	r3, #1
 800353c:	d919      	bls.n	8003572 <SPI_WIFI_SendData+0x72>
  {
    spi_tx_event = 1;
 800353e:	4b25      	ldr	r3, [pc, #148]	; (80035d4 <SPI_WIFI_SendData+0xd4>)
 8003540:	2201      	movs	r2, #1
 8003542:	601a      	str	r2, [r3, #0]
    if (HAL_SPI_Transmit_IT(&hspi, (uint8_t *)pdata , len / 2) != HAL_OK)
 8003544:	897b      	ldrh	r3, [r7, #10]
 8003546:	085b      	lsrs	r3, r3, #1
 8003548:	b29b      	uxth	r3, r3
 800354a:	461a      	mov	r2, r3
 800354c:	68f9      	ldr	r1, [r7, #12]
 800354e:	4822      	ldr	r0, [pc, #136]	; (80035d8 <SPI_WIFI_SendData+0xd8>)
 8003550:	f004 f92e 	bl	80077b0 <HAL_SPI_Transmit_IT>
 8003554:	4603      	mov	r3, r0
 8003556:	2b00      	cmp	r3, #0
 8003558:	d007      	beq.n	800356a <SPI_WIFI_SendData+0x6a>
    {
      WIFI_DISABLE_NSS();
 800355a:	2201      	movs	r2, #1
 800355c:	2101      	movs	r1, #1
 800355e:	481c      	ldr	r0, [pc, #112]	; (80035d0 <SPI_WIFI_SendData+0xd0>)
 8003560:	f001 feb0 	bl	80052c4 <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 8003564:	f04f 33ff 	mov.w	r3, #4294967295
 8003568:	e02b      	b.n	80035c2 <SPI_WIFI_SendData+0xc2>
    }
    wait_spi_tx_event(timeout);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4618      	mov	r0, r3
 800356e:	f7ff ff2d 	bl	80033cc <wait_spi_tx_event>
  }

  if (len & 1)
 8003572:	897b      	ldrh	r3, [r7, #10]
 8003574:	f003 0301 	and.w	r3, r3, #1
 8003578:	2b00      	cmp	r3, #0
 800357a:	d020      	beq.n	80035be <SPI_WIFI_SendData+0xbe>
  {
    Padding[0] = pdata[len - 1];
 800357c:	897b      	ldrh	r3, [r7, #10]
 800357e:	3b01      	subs	r3, #1
 8003580:	68fa      	ldr	r2, [r7, #12]
 8003582:	4413      	add	r3, r2
 8003584:	781b      	ldrb	r3, [r3, #0]
 8003586:	753b      	strb	r3, [r7, #20]
    Padding[1] = '\n';
 8003588:	230a      	movs	r3, #10
 800358a:	757b      	strb	r3, [r7, #21]

    spi_tx_event=1;
 800358c:	4b11      	ldr	r3, [pc, #68]	; (80035d4 <SPI_WIFI_SendData+0xd4>)
 800358e:	2201      	movs	r2, #1
 8003590:	601a      	str	r2, [r3, #0]
    if (HAL_SPI_Transmit_IT(&hspi, Padding, 1) != HAL_OK)
 8003592:	f107 0314 	add.w	r3, r7, #20
 8003596:	2201      	movs	r2, #1
 8003598:	4619      	mov	r1, r3
 800359a:	480f      	ldr	r0, [pc, #60]	; (80035d8 <SPI_WIFI_SendData+0xd8>)
 800359c:	f004 f908 	bl	80077b0 <HAL_SPI_Transmit_IT>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d007      	beq.n	80035b6 <SPI_WIFI_SendData+0xb6>
    {
      WIFI_DISABLE_NSS();
 80035a6:	2201      	movs	r2, #1
 80035a8:	2101      	movs	r1, #1
 80035aa:	4809      	ldr	r0, [pc, #36]	; (80035d0 <SPI_WIFI_SendData+0xd0>)
 80035ac:	f001 fe8a 	bl	80052c4 <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 80035b0:	f04f 33ff 	mov.w	r3, #4294967295
 80035b4:	e005      	b.n	80035c2 <SPI_WIFI_SendData+0xc2>
    }
    wait_spi_tx_event(timeout);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4618      	mov	r0, r3
 80035ba:	f7ff ff07 	bl	80033cc <wait_spi_tx_event>
  }
  return len;
 80035be:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3718      	adds	r7, #24
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	bf00      	nop
 80035cc:	20028c34 	.word	0x20028c34
 80035d0:	48001000 	.word	0x48001000
 80035d4:	20028c30 	.word	0x20028c30
 80035d8:	20028bc8 	.word	0x20028bc8

080035dc <SPI_WIFI_Delay>:
  * @brief  Delay
  * @param  Delay in ms
  * @retval None
  */
void SPI_WIFI_Delay(uint32_t Delay)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b082      	sub	sp, #8
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	f000 fb5b 	bl	8003ca0 <HAL_Delay>
}
 80035ea:	bf00      	nop
 80035ec:	3708      	adds	r7, #8
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}
	...

080035f4 <SPI_WIFI_DelayUs>:
   * @brief  Delay
  * @param  Delay in us
  * @retval None
  */
void SPI_WIFI_DelayUs(uint32_t n)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b086      	sub	sp, #24
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  volatile        uint32_t ct = 0;
 80035fc:	2300      	movs	r3, #0
 80035fe:	60bb      	str	r3, [r7, #8]
  uint32_t        loop_per_us = 0;
 8003600:	2300      	movs	r3, #0
 8003602:	617b      	str	r3, [r7, #20]
  static uint32_t cycle_per_loop = 0;

  /* calibration happen on first call for a duration of 1 ms * nbcycle per loop */
  /* 10 cycle for STM32L4 */
  if (cycle_per_loop == 0)
 8003604:	4b20      	ldr	r3, [pc, #128]	; (8003688 <SPI_WIFI_DelayUs+0x94>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d122      	bne.n	8003652 <SPI_WIFI_DelayUs+0x5e>
  {
     uint32_t cycle_per_ms = (SystemCoreClock / 1000UL);
 800360c:	4b1f      	ldr	r3, [pc, #124]	; (800368c <SPI_WIFI_DelayUs+0x98>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a1f      	ldr	r2, [pc, #124]	; (8003690 <SPI_WIFI_DelayUs+0x9c>)
 8003612:	fba2 2303 	umull	r2, r3, r2, r3
 8003616:	099b      	lsrs	r3, r3, #6
 8003618:	613b      	str	r3, [r7, #16]
     uint32_t t = 0;
 800361a:	2300      	movs	r3, #0
 800361c:	60fb      	str	r3, [r7, #12]
     ct = cycle_per_ms;
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	60bb      	str	r3, [r7, #8]
     t = HAL_GetTick();
 8003622:	f000 fb31 	bl	8003c88 <HAL_GetTick>
 8003626:	60f8      	str	r0, [r7, #12]
     while(ct) ct--;
 8003628:	e002      	b.n	8003630 <SPI_WIFI_DelayUs+0x3c>
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	3b01      	subs	r3, #1
 800362e:	60bb      	str	r3, [r7, #8]
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d1f9      	bne.n	800362a <SPI_WIFI_DelayUs+0x36>
     cycle_per_loop = HAL_GetTick() - t;
 8003636:	f000 fb27 	bl	8003c88 <HAL_GetTick>
 800363a:	4602      	mov	r2, r0
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	1ad3      	subs	r3, r2, r3
 8003640:	4a11      	ldr	r2, [pc, #68]	; (8003688 <SPI_WIFI_DelayUs+0x94>)
 8003642:	6013      	str	r3, [r2, #0]
     if (cycle_per_loop == 0) cycle_per_loop = 1;
 8003644:	4b10      	ldr	r3, [pc, #64]	; (8003688 <SPI_WIFI_DelayUs+0x94>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d102      	bne.n	8003652 <SPI_WIFI_DelayUs+0x5e>
 800364c:	4b0e      	ldr	r3, [pc, #56]	; (8003688 <SPI_WIFI_DelayUs+0x94>)
 800364e:	2201      	movs	r2, #1
 8003650:	601a      	str	r2, [r3, #0]
  }

  loop_per_us = SystemCoreClock/1000000UL/cycle_per_loop;
 8003652:	4b0e      	ldr	r3, [pc, #56]	; (800368c <SPI_WIFI_DelayUs+0x98>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a0f      	ldr	r2, [pc, #60]	; (8003694 <SPI_WIFI_DelayUs+0xa0>)
 8003658:	fba2 2303 	umull	r2, r3, r2, r3
 800365c:	0c9a      	lsrs	r2, r3, #18
 800365e:	4b0a      	ldr	r3, [pc, #40]	; (8003688 <SPI_WIFI_DelayUs+0x94>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	fbb2 f3f3 	udiv	r3, r2, r3
 8003666:	617b      	str	r3, [r7, #20]
  ct = n * loop_per_us;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	697a      	ldr	r2, [r7, #20]
 800366c:	fb02 f303 	mul.w	r3, r2, r3
 8003670:	60bb      	str	r3, [r7, #8]
  while(ct) ct--;
 8003672:	e002      	b.n	800367a <SPI_WIFI_DelayUs+0x86>
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	3b01      	subs	r3, #1
 8003678:	60bb      	str	r3, [r7, #8]
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d1f9      	bne.n	8003674 <SPI_WIFI_DelayUs+0x80>
  return;
 8003680:	bf00      	nop
}
 8003682:	3718      	adds	r7, #24
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}
 8003688:	20028c38 	.word	0x20028c38
 800368c:	20000000 	.word	0x20000000
 8003690:	10624dd3 	.word	0x10624dd3
 8003694:	431bde83 	.word	0x431bde83

08003698 <HAL_SPI_RxCpltCallback>:
  *               the configuration information for the SPI module.
  * @retval None
  */

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003698:	b480      	push	{r7}
 800369a:	b083      	sub	sp, #12
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  if (spi_rx_event)
 80036a0:	4b06      	ldr	r3, [pc, #24]	; (80036bc <HAL_SPI_RxCpltCallback+0x24>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d002      	beq.n	80036ae <HAL_SPI_RxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_rx_sem);
    spi_rx_event = 0;
 80036a8:	4b04      	ldr	r3, [pc, #16]	; (80036bc <HAL_SPI_RxCpltCallback+0x24>)
 80036aa:	2200      	movs	r2, #0
 80036ac:	601a      	str	r2, [r3, #0]
  }
}
 80036ae:	bf00      	nop
 80036b0:	370c      	adds	r7, #12
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr
 80036ba:	bf00      	nop
 80036bc:	20028c2c 	.word	0x20028c2c

080036c0 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the SPI module.
  * @retval None
  */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b083      	sub	sp, #12
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  if (spi_tx_event)
 80036c8:	4b06      	ldr	r3, [pc, #24]	; (80036e4 <HAL_SPI_TxCpltCallback+0x24>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d002      	beq.n	80036d6 <HAL_SPI_TxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_tx_sem);
    spi_tx_event = 0;
 80036d0:	4b04      	ldr	r3, [pc, #16]	; (80036e4 <HAL_SPI_TxCpltCallback+0x24>)
 80036d2:	2200      	movs	r2, #0
 80036d4:	601a      	str	r2, [r3, #0]
  }
}
 80036d6:	bf00      	nop
 80036d8:	370c      	adds	r7, #12
 80036da:	46bd      	mov	sp, r7
 80036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e0:	4770      	bx	lr
 80036e2:	bf00      	nop
 80036e4:	20028c30 	.word	0x20028c30

080036e8 <SPI_WIFI_ISR>:
  * @brief  Interrupt handler for CMDDATARDY input signal
  * @param  None
  * @retval None
  */
void    SPI_WIFI_ISR(void)
{
 80036e8:	b480      	push	{r7}
 80036ea:	af00      	add	r7, sp, #0
   if (cmddata_rdy_rising_event == 1)
 80036ec:	4b05      	ldr	r3, [pc, #20]	; (8003704 <SPI_WIFI_ISR+0x1c>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d102      	bne.n	80036fa <SPI_WIFI_ISR+0x12>
   {
     SEM_SIGNAL(cmddata_rdy_rising_sem);
     cmddata_rdy_rising_event = 0;
 80036f4:	4b03      	ldr	r3, [pc, #12]	; (8003704 <SPI_WIFI_ISR+0x1c>)
 80036f6:	2200      	movs	r2, #0
 80036f8:	601a      	str	r2, [r3, #0]
   }
}
 80036fa:	bf00      	nop
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr
 8003704:	20028c34 	.word	0x20028c34

08003708 <WIFI_Init>:
  * @brief  Initialize the WIFI core
  * @param  None
  * @retval Operation status
  */
WIFI_Status_t WIFI_Init(void)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b084      	sub	sp, #16
 800370c:	af02      	add	r7, sp, #8
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	71fb      	strb	r3, [r7, #7]

  if(ES_WIFI_RegisterBusIO(&EsWifiObj,
 8003712:	4b0d      	ldr	r3, [pc, #52]	; (8003748 <WIFI_Init+0x40>)
 8003714:	9301      	str	r3, [sp, #4]
 8003716:	4b0d      	ldr	r3, [pc, #52]	; (800374c <WIFI_Init+0x44>)
 8003718:	9300      	str	r3, [sp, #0]
 800371a:	4b0d      	ldr	r3, [pc, #52]	; (8003750 <WIFI_Init+0x48>)
 800371c:	4a0d      	ldr	r2, [pc, #52]	; (8003754 <WIFI_Init+0x4c>)
 800371e:	490e      	ldr	r1, [pc, #56]	; (8003758 <WIFI_Init+0x50>)
 8003720:	480e      	ldr	r0, [pc, #56]	; (800375c <WIFI_Init+0x54>)
 8003722:	f7ff f837 	bl	8002794 <ES_WIFI_RegisterBusIO>
 8003726:	4603      	mov	r3, r0
 8003728:	2b00      	cmp	r3, #0
 800372a:	d107      	bne.n	800373c <WIFI_Init+0x34>
                           SPI_WIFI_DeInit,
                           SPI_WIFI_Delay,
                           SPI_WIFI_SendData,
                           SPI_WIFI_ReceiveData) == ES_WIFI_STATUS_OK)
  {
    if(ES_WIFI_Init(&EsWifiObj) == ES_WIFI_STATUS_OK)
 800372c:	480b      	ldr	r0, [pc, #44]	; (800375c <WIFI_Init+0x54>)
 800372e:	f7fe fffd 	bl	800272c <ES_WIFI_Init>
 8003732:	4603      	mov	r3, r0
 8003734:	2b00      	cmp	r3, #0
 8003736:	d101      	bne.n	800373c <WIFI_Init+0x34>
    {
      ret = WIFI_STATUS_OK;
 8003738:	2300      	movs	r3, #0
 800373a:	71fb      	strb	r3, [r7, #7]
    }
  }
  return ret;
 800373c:	79fb      	ldrb	r3, [r7, #7]
}
 800373e:	4618      	mov	r0, r3
 8003740:	3708      	adds	r7, #8
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
 8003746:	bf00      	nop
 8003748:	0800340d 	.word	0x0800340d
 800374c:	08003501 	.word	0x08003501
 8003750:	080035dd 	.word	0x080035dd
 8003754:	080032f5 	.word	0x080032f5
 8003758:	08003159 	.word	0x08003159
 800375c:	20028c3c 	.word	0x20028c3c

08003760 <WIFI_Connect>:
  * @param  Password : Password string
  * @param  ecn : Encryption type
  * @retval Operation status
  */
WIFI_Status_t WIFI_Connect(const char* SSID, const char* Password, WIFI_Ecn_t ecn)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b086      	sub	sp, #24
 8003764:	af00      	add	r7, sp, #0
 8003766:	60f8      	str	r0, [r7, #12]
 8003768:	60b9      	str	r1, [r7, #8]
 800376a:	4613      	mov	r3, r2
 800376c:	71fb      	strb	r3, [r7, #7]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	75fb      	strb	r3, [r7, #23]

  if(ES_WIFI_Connect(&EsWifiObj, SSID, Password, (ES_WIFI_SecurityType_t) ecn) == ES_WIFI_STATUS_OK)
 8003772:	79fb      	ldrb	r3, [r7, #7]
 8003774:	68ba      	ldr	r2, [r7, #8]
 8003776:	68f9      	ldr	r1, [r7, #12]
 8003778:	4809      	ldr	r0, [pc, #36]	; (80037a0 <WIFI_Connect+0x40>)
 800377a:	f7ff f83f 	bl	80027fc <ES_WIFI_Connect>
 800377e:	4603      	mov	r3, r0
 8003780:	2b00      	cmp	r3, #0
 8003782:	d107      	bne.n	8003794 <WIFI_Connect+0x34>
  {
    if(ES_WIFI_GetNetworkSettings(&EsWifiObj) == ES_WIFI_STATUS_OK)
 8003784:	4806      	ldr	r0, [pc, #24]	; (80037a0 <WIFI_Connect+0x40>)
 8003786:	f7ff f8e1 	bl	800294c <ES_WIFI_GetNetworkSettings>
 800378a:	4603      	mov	r3, r0
 800378c:	2b00      	cmp	r3, #0
 800378e:	d101      	bne.n	8003794 <WIFI_Connect+0x34>
    {
       ret = WIFI_STATUS_OK;
 8003790:	2300      	movs	r3, #0
 8003792:	75fb      	strb	r3, [r7, #23]
    }
  }
  return ret;
 8003794:	7dfb      	ldrb	r3, [r7, #23]
}
 8003796:	4618      	mov	r0, r3
 8003798:	3718      	adds	r7, #24
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
 800379e:	bf00      	nop
 80037a0:	20028c3c 	.word	0x20028c3c

080037a4 <WIFI_GetMAC_Address>:
/**
  * @brief  This function retrieves the WiFi interface's MAC address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetMAC_Address(uint8_t *mac, uint8_t MacLength)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b084      	sub	sp, #16
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
 80037ac:	460b      	mov	r3, r1
 80037ae:	70fb      	strb	r3, [r7, #3]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	73fb      	strb	r3, [r7, #15]

  if ((mac != NULL) && (0 < MacLength))
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d00d      	beq.n	80037d6 <WIFI_GetMAC_Address+0x32>
 80037ba:	78fb      	ldrb	r3, [r7, #3]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d00a      	beq.n	80037d6 <WIFI_GetMAC_Address+0x32>
  {
    if(ES_WIFI_GetMACAddress(&EsWifiObj, mac, MacLength) == ES_WIFI_STATUS_OK)
 80037c0:	78fb      	ldrb	r3, [r7, #3]
 80037c2:	461a      	mov	r2, r3
 80037c4:	6879      	ldr	r1, [r7, #4]
 80037c6:	4806      	ldr	r0, [pc, #24]	; (80037e0 <WIFI_GetMAC_Address+0x3c>)
 80037c8:	f7ff f8ea 	bl	80029a0 <ES_WIFI_GetMACAddress>
 80037cc:	4603      	mov	r3, r0
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d101      	bne.n	80037d6 <WIFI_GetMAC_Address+0x32>
    {
      ret = WIFI_STATUS_OK;
 80037d2:	2300      	movs	r3, #0
 80037d4:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 80037d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80037d8:	4618      	mov	r0, r3
 80037da:	3710      	adds	r7, #16
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}
 80037e0:	20028c3c 	.word	0x20028c3c

080037e4 <WIFI_GetIP_Address>:
/**
  * @brief  This function retrieves the WiFi interface's IP address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetIP_Address(uint8_t *ipaddr, uint8_t IpAddrLength)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b084      	sub	sp, #16
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	460b      	mov	r3, r1
 80037ee:	70fb      	strb	r3, [r7, #3]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	73fb      	strb	r3, [r7, #15]

  if ((ipaddr != NULL) && (4 <= IpAddrLength))
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d010      	beq.n	800381c <WIFI_GetIP_Address+0x38>
 80037fa:	78fb      	ldrb	r3, [r7, #3]
 80037fc:	2b03      	cmp	r3, #3
 80037fe:	d90d      	bls.n	800381c <WIFI_GetIP_Address+0x38>
  {
    if (ES_WIFI_IsConnected(&EsWifiObj) == 1)
 8003800:	4809      	ldr	r0, [pc, #36]	; (8003828 <WIFI_GetIP_Address+0x44>)
 8003802:	f7ff f873 	bl	80028ec <ES_WIFI_IsConnected>
 8003806:	4603      	mov	r3, r0
 8003808:	2b01      	cmp	r3, #1
 800380a:	d107      	bne.n	800381c <WIFI_GetIP_Address+0x38>
 800380c:	4b06      	ldr	r3, [pc, #24]	; (8003828 <WIFI_GetIP_Address+0x44>)
 800380e:	f8d3 30d5 	ldr.w	r3, [r3, #213]	; 0xd5
 8003812:	461a      	mov	r2, r3
    {
      memcpy(ipaddr, EsWifiObj.NetSettings.IP_Addr, 4);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	601a      	str	r2, [r3, #0]
      ret = WIFI_STATUS_OK;
 8003818:	2300      	movs	r3, #0
 800381a:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 800381c:	7bfb      	ldrb	r3, [r7, #15]
}
 800381e:	4618      	mov	r0, r3
 8003820:	3710      	adds	r7, #16
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
 8003826:	bf00      	nop
 8003828:	20028c3c 	.word	0x20028c3c

0800382c <WIFI_StartServer>:
  * @param  port : Remote port
  * @retval Operation status
  */
WIFI_Status_t WIFI_StartServer(uint32_t socket, WIFI_Protocol_t protocol, uint16_t backlog ,const char *name,
                               uint16_t port)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b08a      	sub	sp, #40	; 0x28
 8003830:	af00      	add	r7, sp, #0
 8003832:	60f8      	str	r0, [r7, #12]
 8003834:	607b      	str	r3, [r7, #4]
 8003836:	460b      	mov	r3, r1
 8003838:	72fb      	strb	r3, [r7, #11]
 800383a:	4613      	mov	r3, r2
 800383c:	813b      	strh	r3, [r7, #8]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  ES_WIFI_Conn_t conn;

  conn.Number = (uint8_t)socket;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	b2db      	uxtb	r3, r3
 8003848:	74bb      	strb	r3, [r7, #18]
  conn.LocalPort = port;
 800384a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800384c:	82fb      	strh	r3, [r7, #22]
  conn.Type = (protocol == WIFI_TCP_PROTOCOL)? ES_WIFI_TCP_CONNECTION : ES_WIFI_UDP_CONNECTION;
 800384e:	7afb      	ldrb	r3, [r7, #11]
 8003850:	2b00      	cmp	r3, #0
 8003852:	bf14      	ite	ne
 8003854:	2301      	movne	r3, #1
 8003856:	2300      	moveq	r3, #0
 8003858:	b2db      	uxtb	r3, r3
 800385a:	743b      	strb	r3, [r7, #16]
  conn.Backlog = backlog;
 800385c:	893b      	ldrh	r3, [r7, #8]
 800385e:	b2db      	uxtb	r3, r3
 8003860:	f887 3020 	strb.w	r3, [r7, #32]

  if(ES_WIFI_StartServerSingleConn(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 8003864:	f107 0310 	add.w	r3, r7, #16
 8003868:	4619      	mov	r1, r3
 800386a:	4807      	ldr	r0, [pc, #28]	; (8003888 <WIFI_StartServer+0x5c>)
 800386c:	f7ff f8ce 	bl	8002a0c <ES_WIFI_StartServerSingleConn>
 8003870:	4603      	mov	r3, r0
 8003872:	2b00      	cmp	r3, #0
 8003874:	d102      	bne.n	800387c <WIFI_StartServer+0x50>
  {
    ret = WIFI_STATUS_OK;
 8003876:	2300      	movs	r3, #0
 8003878:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 800387c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003880:	4618      	mov	r0, r3
 8003882:	3728      	adds	r7, #40	; 0x28
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}
 8003888:	20028c3c 	.word	0x20028c3c

0800388c <WIFI_WaitServerConnection>:
  * @param  socket : socket
  * @retval Operation status
  */
WIFI_Status_t WIFI_WaitServerConnection(uint32_t socket,uint32_t Timeout,
                                        uint8_t *RemoteIp, uint8_t RemoteIpAddrLength, uint16_t *RemotePort)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b08a      	sub	sp, #40	; 0x28
 8003890:	af00      	add	r7, sp, #0
 8003892:	60f8      	str	r0, [r7, #12]
 8003894:	60b9      	str	r1, [r7, #8]
 8003896:	607a      	str	r2, [r7, #4]
 8003898:	70fb      	strb	r3, [r7, #3]
  ES_WIFI_Conn_t conn;
  ES_WIFI_Status_t ret;

  conn.Number = (uint8_t)socket;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	b2db      	uxtb	r3, r3
 800389e:	74bb      	strb	r3, [r7, #18]

  ret = ES_WIFI_WaitServerConnection(&EsWifiObj,Timeout,&conn);
 80038a0:	f107 0310 	add.w	r3, r7, #16
 80038a4:	461a      	mov	r2, r3
 80038a6:	68b9      	ldr	r1, [r7, #8]
 80038a8:	481b      	ldr	r0, [pc, #108]	; (8003918 <WIFI_WaitServerConnection+0x8c>)
 80038aa:	f7ff f95b 	bl	8002b64 <ES_WIFI_WaitServerConnection>
 80038ae:	4603      	mov	r3, r0
 80038b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (ES_WIFI_STATUS_OK == ret)
 80038b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d110      	bne.n	80038de <WIFI_WaitServerConnection+0x52>
  {
    if (RemotePort)
 80038bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d002      	beq.n	80038c8 <WIFI_WaitServerConnection+0x3c>
    {
      *RemotePort = conn.RemotePort;
 80038c2:	8aba      	ldrh	r2, [r7, #20]
 80038c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038c6:	801a      	strh	r2, [r3, #0]
    }
    if ((RemoteIp != NULL) && (4 <= RemoteIpAddrLength))
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d005      	beq.n	80038da <WIFI_WaitServerConnection+0x4e>
 80038ce:	78fb      	ldrb	r3, [r7, #3]
 80038d0:	2b03      	cmp	r3, #3
 80038d2:	d902      	bls.n	80038da <WIFI_WaitServerConnection+0x4e>
 80038d4:	69ba      	ldr	r2, [r7, #24]
    {
      memcpy(RemoteIp, conn.RemoteIP, 4);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	601a      	str	r2, [r3, #0]
    }
    return  WIFI_STATUS_OK;
 80038da:	2300      	movs	r3, #0
 80038dc:	e017      	b.n	800390e <WIFI_WaitServerConnection+0x82>
  }

  if (ES_WIFI_STATUS_TIMEOUT == ret)
 80038de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80038e2:	2b03      	cmp	r3, #3
 80038e4:	d112      	bne.n	800390c <WIFI_WaitServerConnection+0x80>
  {
    if (RemotePort)
 80038e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d002      	beq.n	80038f2 <WIFI_WaitServerConnection+0x66>
    {
      *RemotePort = 0;
 80038ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ee:	2200      	movs	r2, #0
 80038f0:	801a      	strh	r2, [r3, #0]
    }
    if ((RemoteIp != NULL) && (4 <= RemoteIpAddrLength))
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d007      	beq.n	8003908 <WIFI_WaitServerConnection+0x7c>
 80038f8:	78fb      	ldrb	r3, [r7, #3]
 80038fa:	2b03      	cmp	r3, #3
 80038fc:	d904      	bls.n	8003908 <WIFI_WaitServerConnection+0x7c>
    {
      memset(RemoteIp, 0, 4);
 80038fe:	2204      	movs	r2, #4
 8003900:	2100      	movs	r1, #0
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f008 fb6e 	bl	800bfe4 <memset>
    }
    return  WIFI_STATUS_TIMEOUT;
 8003908:	2305      	movs	r3, #5
 800390a:	e000      	b.n	800390e <WIFI_WaitServerConnection+0x82>
  }

  return WIFI_STATUS_ERROR;
 800390c:	2301      	movs	r3, #1
}
 800390e:	4618      	mov	r0, r3
 8003910:	3728      	adds	r7, #40	; 0x28
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}
 8003916:	bf00      	nop
 8003918:	20028c3c 	.word	0x20028c3c

0800391c <WIFI_CloseServerConnection>:
  * @brief  Close current connection from a client  to the server
  * @param  socket : socket
  * @retval Operation status
  */
WIFI_Status_t WIFI_CloseServerConnection(uint32_t socket)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b084      	sub	sp, #16
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	73fb      	strb	r3, [r7, #15]

  if (ES_WIFI_STATUS_OK == ES_WIFI_CloseServerConnection(&EsWifiObj, (uint8_t)socket))
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	b2db      	uxtb	r3, r3
 800392c:	4619      	mov	r1, r3
 800392e:	4806      	ldr	r0, [pc, #24]	; (8003948 <WIFI_CloseServerConnection+0x2c>)
 8003930:	f7ff fa0a 	bl	8002d48 <ES_WIFI_CloseServerConnection>
 8003934:	4603      	mov	r3, r0
 8003936:	2b00      	cmp	r3, #0
 8003938:	d101      	bne.n	800393e <WIFI_CloseServerConnection+0x22>
  {
    ret = WIFI_STATUS_OK;
 800393a:	2300      	movs	r3, #0
 800393c:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 800393e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003940:	4618      	mov	r0, r3
 8003942:	3710      	adds	r7, #16
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}
 8003948:	20028c3c 	.word	0x20028c3c

0800394c <WIFI_SendData>:
  * @param  Timeout : Socket write timeout (ms)
  * @retval Operation status
  */
WIFI_Status_t WIFI_SendData(uint32_t socket, const uint8_t *pdata, uint16_t Reqlen, uint16_t *SentDatalen,
                            uint32_t Timeout)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b088      	sub	sp, #32
 8003950:	af02      	add	r7, sp, #8
 8003952:	60f8      	str	r0, [r7, #12]
 8003954:	60b9      	str	r1, [r7, #8]
 8003956:	603b      	str	r3, [r7, #0]
 8003958:	4613      	mov	r3, r2
 800395a:	80fb      	strh	r3, [r7, #6]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	75fb      	strb	r3, [r7, #23]

    if (ES_WIFI_SendData(&EsWifiObj, (uint8_t)socket, pdata, Reqlen, SentDatalen, Timeout) == ES_WIFI_STATUS_OK)
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	b2d9      	uxtb	r1, r3
 8003964:	88fa      	ldrh	r2, [r7, #6]
 8003966:	6a3b      	ldr	r3, [r7, #32]
 8003968:	9301      	str	r3, [sp, #4]
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	9300      	str	r3, [sp, #0]
 800396e:	4613      	mov	r3, r2
 8003970:	68ba      	ldr	r2, [r7, #8]
 8003972:	4806      	ldr	r0, [pc, #24]	; (800398c <WIFI_SendData+0x40>)
 8003974:	f7ff fa24 	bl	8002dc0 <ES_WIFI_SendData>
 8003978:	4603      	mov	r3, r0
 800397a:	2b00      	cmp	r3, #0
 800397c:	d101      	bne.n	8003982 <WIFI_SendData+0x36>
    {
      ret = WIFI_STATUS_OK;
 800397e:	2300      	movs	r3, #0
 8003980:	75fb      	strb	r3, [r7, #23]
    }

  return ret;
 8003982:	7dfb      	ldrb	r3, [r7, #23]
}
 8003984:	4618      	mov	r0, r3
 8003986:	3718      	adds	r7, #24
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}
 800398c:	20028c3c 	.word	0x20028c3c

08003990 <WIFI_ReceiveData>:
  * @param  Timeout : Socket read timeout (ms)
  * @retval Operation status
  */
WIFI_Status_t WIFI_ReceiveData(uint32_t socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *RcvDatalen,
                               uint32_t Timeout)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b088      	sub	sp, #32
 8003994:	af02      	add	r7, sp, #8
 8003996:	60f8      	str	r0, [r7, #12]
 8003998:	60b9      	str	r1, [r7, #8]
 800399a:	603b      	str	r3, [r7, #0]
 800399c:	4613      	mov	r3, r2
 800399e:	80fb      	strh	r3, [r7, #6]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	75fb      	strb	r3, [r7, #23]

  if(ES_WIFI_ReceiveData(&EsWifiObj, socket, pdata, Reqlen, RcvDatalen, Timeout) == ES_WIFI_STATUS_OK)
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	b2d9      	uxtb	r1, r3
 80039a8:	88fa      	ldrh	r2, [r7, #6]
 80039aa:	6a3b      	ldr	r3, [r7, #32]
 80039ac:	9301      	str	r3, [sp, #4]
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	9300      	str	r3, [sp, #0]
 80039b2:	4613      	mov	r3, r2
 80039b4:	68ba      	ldr	r2, [r7, #8]
 80039b6:	4806      	ldr	r0, [pc, #24]	; (80039d0 <WIFI_ReceiveData+0x40>)
 80039b8:	f7ff fa88 	bl	8002ecc <ES_WIFI_ReceiveData>
 80039bc:	4603      	mov	r3, r0
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d101      	bne.n	80039c6 <WIFI_ReceiveData+0x36>
  {
    ret = WIFI_STATUS_OK;
 80039c2:	2300      	movs	r3, #0
 80039c4:	75fb      	strb	r3, [r7, #23]
  }
  return ret;
 80039c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	3718      	adds	r7, #24
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}
 80039d0:	20028c3c 	.word	0x20028c3c

080039d4 <BSP_LED_Init>:
  * @param  Led  LED to be initialized. 
  *              This parameter can be one of the following values:
  *                @arg  LED2
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b088      	sub	sp, #32
 80039d8:	af00      	add	r7, sp, #0
 80039da:	4603      	mov	r3, r0
 80039dc:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;
  
  LEDx_GPIO_CLK_ENABLE(Led);
 80039de:	79fb      	ldrb	r3, [r7, #7]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d10b      	bne.n	80039fc <BSP_LED_Init+0x28>
 80039e4:	4b11      	ldr	r3, [pc, #68]	; (8003a2c <BSP_LED_Init+0x58>)
 80039e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039e8:	4a10      	ldr	r2, [pc, #64]	; (8003a2c <BSP_LED_Init+0x58>)
 80039ea:	f043 0302 	orr.w	r3, r3, #2
 80039ee:	64d3      	str	r3, [r2, #76]	; 0x4c
 80039f0:	4b0e      	ldr	r3, [pc, #56]	; (8003a2c <BSP_LED_Init+0x58>)
 80039f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039f4:	f003 0302 	and.w	r3, r3, #2
 80039f8:	60bb      	str	r3, [r7, #8]
 80039fa:	68bb      	ldr	r3, [r7, #8]
  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = GPIO_PIN[Led];
 80039fc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003a00:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8003a02:	2301      	movs	r3, #1
 8003a04:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8003a06:	2300      	movs	r3, #0
 8003a08:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8003a0a:	2302      	movs	r3, #2
 8003a0c:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpio_init_structure);
 8003a0e:	79fb      	ldrb	r3, [r7, #7]
 8003a10:	4a07      	ldr	r2, [pc, #28]	; (8003a30 <BSP_LED_Init+0x5c>)
 8003a12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a16:	f107 020c 	add.w	r2, r7, #12
 8003a1a:	4611      	mov	r1, r2
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f001 faa7 	bl	8004f70 <HAL_GPIO_Init>
}
 8003a22:	bf00      	nop
 8003a24:	3720      	adds	r7, #32
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}
 8003a2a:	bf00      	nop
 8003a2c:	40021000 	.word	0x40021000
 8003a30:	20000004 	.word	0x20000004

08003a34 <BSP_PB_Init>:
  *                      @arg  BUTTON_MODE_GPIO  Button will be used as simple IO
  *                      @arg  BUTTON_MODE_EXTI  Button will be connected to EXTI line 
  *                                              with interrupt generation capability  
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b088      	sub	sp, #32
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	460a      	mov	r2, r1
 8003a3e:	71fb      	strb	r3, [r7, #7]
 8003a40:	4613      	mov	r3, r2
 8003a42:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the BUTTON clock */
  USER_BUTTON_GPIO_CLK_ENABLE();
 8003a44:	4b24      	ldr	r3, [pc, #144]	; (8003ad8 <BSP_PB_Init+0xa4>)
 8003a46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a48:	4a23      	ldr	r2, [pc, #140]	; (8003ad8 <BSP_PB_Init+0xa4>)
 8003a4a:	f043 0304 	orr.w	r3, r3, #4
 8003a4e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003a50:	4b21      	ldr	r3, [pc, #132]	; (8003ad8 <BSP_PB_Init+0xa4>)
 8003a52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a54:	f003 0304 	and.w	r3, r3, #4
 8003a58:	60bb      	str	r3, [r7, #8]
 8003a5a:	68bb      	ldr	r3, [r7, #8]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8003a5c:	79bb      	ldrb	r3, [r7, #6]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d112      	bne.n	8003a88 <BSP_PB_Init+0x54>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8003a62:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003a66:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	613b      	str	r3, [r7, #16]
    gpio_init_structure.Pull = GPIO_PULLUP;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8003a70:	2302      	movs	r3, #2
 8003a72:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8003a74:	79fb      	ldrb	r3, [r7, #7]
 8003a76:	4a19      	ldr	r2, [pc, #100]	; (8003adc <BSP_PB_Init+0xa8>)
 8003a78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a7c:	f107 020c 	add.w	r2, r7, #12
 8003a80:	4611      	mov	r1, r2
 8003a82:	4618      	mov	r0, r3
 8003a84:	f001 fa74 	bl	8004f70 <HAL_GPIO_Init>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 8003a88:	79bb      	ldrb	r3, [r7, #6]
 8003a8a:	2b01      	cmp	r3, #1
 8003a8c:	d11f      	bne.n	8003ace <BSP_PB_Init+0x9a>
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8003a8e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003a92:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Pull = GPIO_PULLUP;
 8003a94:	2301      	movs	r3, #1
 8003a96:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a98:	2303      	movs	r3, #3
 8003a9a:	61bb      	str	r3, [r7, #24]
    
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8003a9c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003aa0:	613b      	str	r3, [r7, #16]
    
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8003aa2:	79fb      	ldrb	r3, [r7, #7]
 8003aa4:	4a0d      	ldr	r2, [pc, #52]	; (8003adc <BSP_PB_Init+0xa8>)
 8003aa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003aaa:	f107 020c 	add.w	r2, r7, #12
 8003aae:	4611      	mov	r1, r2
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f001 fa5d 	bl	8004f70 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8003ab6:	2328      	movs	r3, #40	; 0x28
 8003ab8:	b25b      	sxtb	r3, r3
 8003aba:	2200      	movs	r2, #0
 8003abc:	210f      	movs	r1, #15
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f000 f9ed 	bl	8003e9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8003ac4:	2328      	movs	r3, #40	; 0x28
 8003ac6:	b25b      	sxtb	r3, r3
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f000 fa04 	bl	8003ed6 <HAL_NVIC_EnableIRQ>
  }
}
 8003ace:	bf00      	nop
 8003ad0:	3720      	adds	r7, #32
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}
 8003ad6:	bf00      	nop
 8003ad8:	40021000 	.word	0x40021000
 8003adc:	20000008 	.word	0x20000008

08003ae0 <BSP_COM_Init>:
  *                @arg  COM1 
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains the
  *                configuration information for the specified USART peripheral.
  */
void BSP_COM_Init(COM_TypeDef COM, UART_HandleTypeDef *huart)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b08a      	sub	sp, #40	; 0x28
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	6039      	str	r1, [r7, #0]
 8003aea:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable GPIO clock */
  DISCOVERY_COMx_TX_GPIO_CLK_ENABLE(COM);
 8003aec:	79fb      	ldrb	r3, [r7, #7]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d10b      	bne.n	8003b0a <BSP_COM_Init+0x2a>
 8003af2:	4b2d      	ldr	r3, [pc, #180]	; (8003ba8 <BSP_COM_Init+0xc8>)
 8003af4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003af6:	4a2c      	ldr	r2, [pc, #176]	; (8003ba8 <BSP_COM_Init+0xc8>)
 8003af8:	f043 0302 	orr.w	r3, r3, #2
 8003afc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003afe:	4b2a      	ldr	r3, [pc, #168]	; (8003ba8 <BSP_COM_Init+0xc8>)
 8003b00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b02:	f003 0302 	and.w	r3, r3, #2
 8003b06:	613b      	str	r3, [r7, #16]
 8003b08:	693b      	ldr	r3, [r7, #16]
  DISCOVERY_COMx_RX_GPIO_CLK_ENABLE(COM);
 8003b0a:	79fb      	ldrb	r3, [r7, #7]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d10b      	bne.n	8003b28 <BSP_COM_Init+0x48>
 8003b10:	4b25      	ldr	r3, [pc, #148]	; (8003ba8 <BSP_COM_Init+0xc8>)
 8003b12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b14:	4a24      	ldr	r2, [pc, #144]	; (8003ba8 <BSP_COM_Init+0xc8>)
 8003b16:	f043 0302 	orr.w	r3, r3, #2
 8003b1a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003b1c:	4b22      	ldr	r3, [pc, #136]	; (8003ba8 <BSP_COM_Init+0xc8>)
 8003b1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b20:	f003 0302 	and.w	r3, r3, #2
 8003b24:	60fb      	str	r3, [r7, #12]
 8003b26:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  DISCOVERY_COMx_CLK_ENABLE(COM);
 8003b28:	79fb      	ldrb	r3, [r7, #7]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d10b      	bne.n	8003b46 <BSP_COM_Init+0x66>
 8003b2e:	4b1e      	ldr	r3, [pc, #120]	; (8003ba8 <BSP_COM_Init+0xc8>)
 8003b30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b32:	4a1d      	ldr	r2, [pc, #116]	; (8003ba8 <BSP_COM_Init+0xc8>)
 8003b34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b38:	6613      	str	r3, [r2, #96]	; 0x60
 8003b3a:	4b1b      	ldr	r3, [pc, #108]	; (8003ba8 <BSP_COM_Init+0xc8>)
 8003b3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b42:	60bb      	str	r3, [r7, #8]
 8003b44:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM_TX_PIN[COM];
 8003b46:	2340      	movs	r3, #64	; 0x40
 8003b48:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8003b4a:	2302      	movs	r3, #2
 8003b4c:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8003b4e:	2302      	movs	r3, #2
 8003b50:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8003b52:	2300      	movs	r3, #0
 8003b54:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM_TX_AF[COM];
 8003b56:	2307      	movs	r3, #7
 8003b58:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(COM_TX_PORT[COM], &gpio_init_structure);
 8003b5a:	79fb      	ldrb	r3, [r7, #7]
 8003b5c:	4a13      	ldr	r2, [pc, #76]	; (8003bac <BSP_COM_Init+0xcc>)
 8003b5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b62:	f107 0214 	add.w	r2, r7, #20
 8003b66:	4611      	mov	r1, r2
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f001 fa01 	bl	8004f70 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM_RX_PIN[COM];
 8003b6e:	2380      	movs	r3, #128	; 0x80
 8003b70:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8003b72:	2302      	movs	r3, #2
 8003b74:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM_RX_AF[COM];
 8003b76:	2307      	movs	r3, #7
 8003b78:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(COM_RX_PORT[COM], &gpio_init_structure);
 8003b7a:	79fb      	ldrb	r3, [r7, #7]
 8003b7c:	4a0c      	ldr	r2, [pc, #48]	; (8003bb0 <BSP_COM_Init+0xd0>)
 8003b7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b82:	f107 0214 	add.w	r2, r7, #20
 8003b86:	4611      	mov	r1, r2
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f001 f9f1 	bl	8004f70 <HAL_GPIO_Init>

  /* USART configuration */
  huart->Instance = COM_USART[COM];
 8003b8e:	79fb      	ldrb	r3, [r7, #7]
 8003b90:	4a08      	ldr	r2, [pc, #32]	; (8003bb4 <BSP_COM_Init+0xd4>)
 8003b92:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	601a      	str	r2, [r3, #0]
  HAL_UART_Init(huart);
 8003b9a:	6838      	ldr	r0, [r7, #0]
 8003b9c:	f005 fb60 	bl	8009260 <HAL_UART_Init>
}
 8003ba0:	bf00      	nop
 8003ba2:	3728      	adds	r7, #40	; 0x28
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}
 8003ba8:	40021000 	.word	0x40021000
 8003bac:	20000010 	.word	0x20000010
 8003bb0:	20000014 	.word	0x20000014
 8003bb4:	2000000c 	.word	0x2000000c

08003bb8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b082      	sub	sp, #8
 8003bbc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003bc2:	2003      	movs	r0, #3
 8003bc4:	f000 f960 	bl	8003e88 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003bc8:	200f      	movs	r0, #15
 8003bca:	f000 f80d 	bl	8003be8 <HAL_InitTick>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d002      	beq.n	8003bda <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	71fb      	strb	r3, [r7, #7]
 8003bd8:	e001      	b.n	8003bde <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003bda:	f7fd fe83 	bl	80018e4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003bde:	79fb      	ldrb	r3, [r7, #7]
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	3708      	adds	r7, #8
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}

08003be8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b084      	sub	sp, #16
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003bf4:	4b17      	ldr	r3, [pc, #92]	; (8003c54 <HAL_InitTick+0x6c>)
 8003bf6:	781b      	ldrb	r3, [r3, #0]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d023      	beq.n	8003c44 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003bfc:	4b16      	ldr	r3, [pc, #88]	; (8003c58 <HAL_InitTick+0x70>)
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	4b14      	ldr	r3, [pc, #80]	; (8003c54 <HAL_InitTick+0x6c>)
 8003c02:	781b      	ldrb	r3, [r3, #0]
 8003c04:	4619      	mov	r1, r3
 8003c06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8003c0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c12:	4618      	mov	r0, r3
 8003c14:	f000 f96d 	bl	8003ef2 <HAL_SYSTICK_Config>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d10f      	bne.n	8003c3e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2b0f      	cmp	r3, #15
 8003c22:	d809      	bhi.n	8003c38 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003c24:	2200      	movs	r2, #0
 8003c26:	6879      	ldr	r1, [r7, #4]
 8003c28:	f04f 30ff 	mov.w	r0, #4294967295
 8003c2c:	f000 f937 	bl	8003e9e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003c30:	4a0a      	ldr	r2, [pc, #40]	; (8003c5c <HAL_InitTick+0x74>)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6013      	str	r3, [r2, #0]
 8003c36:	e007      	b.n	8003c48 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	73fb      	strb	r3, [r7, #15]
 8003c3c:	e004      	b.n	8003c48 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	73fb      	strb	r3, [r7, #15]
 8003c42:	e001      	b.n	8003c48 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003c48:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3710      	adds	r7, #16
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop
 8003c54:	2000001c 	.word	0x2000001c
 8003c58:	20000000 	.word	0x20000000
 8003c5c:	20000018 	.word	0x20000018

08003c60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003c60:	b480      	push	{r7}
 8003c62:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003c64:	4b06      	ldr	r3, [pc, #24]	; (8003c80 <HAL_IncTick+0x20>)
 8003c66:	781b      	ldrb	r3, [r3, #0]
 8003c68:	461a      	mov	r2, r3
 8003c6a:	4b06      	ldr	r3, [pc, #24]	; (8003c84 <HAL_IncTick+0x24>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4413      	add	r3, r2
 8003c70:	4a04      	ldr	r2, [pc, #16]	; (8003c84 <HAL_IncTick+0x24>)
 8003c72:	6013      	str	r3, [r2, #0]
}
 8003c74:	bf00      	nop
 8003c76:	46bd      	mov	sp, r7
 8003c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7c:	4770      	bx	lr
 8003c7e:	bf00      	nop
 8003c80:	2000001c 	.word	0x2000001c
 8003c84:	200295d0 	.word	0x200295d0

08003c88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	af00      	add	r7, sp, #0
  return uwTick;
 8003c8c:	4b03      	ldr	r3, [pc, #12]	; (8003c9c <HAL_GetTick+0x14>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	46bd      	mov	sp, r7
 8003c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c98:	4770      	bx	lr
 8003c9a:	bf00      	nop
 8003c9c:	200295d0 	.word	0x200295d0

08003ca0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b084      	sub	sp, #16
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003ca8:	f7ff ffee 	bl	8003c88 <HAL_GetTick>
 8003cac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cb8:	d005      	beq.n	8003cc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003cba:	4b0a      	ldr	r3, [pc, #40]	; (8003ce4 <HAL_Delay+0x44>)
 8003cbc:	781b      	ldrb	r3, [r3, #0]
 8003cbe:	461a      	mov	r2, r3
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	4413      	add	r3, r2
 8003cc4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003cc6:	bf00      	nop
 8003cc8:	f7ff ffde 	bl	8003c88 <HAL_GetTick>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	68fa      	ldr	r2, [r7, #12]
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d8f7      	bhi.n	8003cc8 <HAL_Delay+0x28>
  {
  }
}
 8003cd8:	bf00      	nop
 8003cda:	bf00      	nop
 8003cdc:	3710      	adds	r7, #16
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	bf00      	nop
 8003ce4:	2000001c 	.word	0x2000001c

08003ce8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b085      	sub	sp, #20
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	f003 0307 	and.w	r3, r3, #7
 8003cf6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003cf8:	4b0c      	ldr	r3, [pc, #48]	; (8003d2c <__NVIC_SetPriorityGrouping+0x44>)
 8003cfa:	68db      	ldr	r3, [r3, #12]
 8003cfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003cfe:	68ba      	ldr	r2, [r7, #8]
 8003d00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003d04:	4013      	ands	r3, r2
 8003d06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003d10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003d14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d1a:	4a04      	ldr	r2, [pc, #16]	; (8003d2c <__NVIC_SetPriorityGrouping+0x44>)
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	60d3      	str	r3, [r2, #12]
}
 8003d20:	bf00      	nop
 8003d22:	3714      	adds	r7, #20
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr
 8003d2c:	e000ed00 	.word	0xe000ed00

08003d30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003d30:	b480      	push	{r7}
 8003d32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d34:	4b04      	ldr	r3, [pc, #16]	; (8003d48 <__NVIC_GetPriorityGrouping+0x18>)
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	0a1b      	lsrs	r3, r3, #8
 8003d3a:	f003 0307 	and.w	r3, r3, #7
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr
 8003d48:	e000ed00 	.word	0xe000ed00

08003d4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b083      	sub	sp, #12
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	4603      	mov	r3, r0
 8003d54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	db0b      	blt.n	8003d76 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d5e:	79fb      	ldrb	r3, [r7, #7]
 8003d60:	f003 021f 	and.w	r2, r3, #31
 8003d64:	4907      	ldr	r1, [pc, #28]	; (8003d84 <__NVIC_EnableIRQ+0x38>)
 8003d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d6a:	095b      	lsrs	r3, r3, #5
 8003d6c:	2001      	movs	r0, #1
 8003d6e:	fa00 f202 	lsl.w	r2, r0, r2
 8003d72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003d76:	bf00      	nop
 8003d78:	370c      	adds	r7, #12
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d80:	4770      	bx	lr
 8003d82:	bf00      	nop
 8003d84:	e000e100 	.word	0xe000e100

08003d88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b083      	sub	sp, #12
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	4603      	mov	r3, r0
 8003d90:	6039      	str	r1, [r7, #0]
 8003d92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	db0a      	blt.n	8003db2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	b2da      	uxtb	r2, r3
 8003da0:	490c      	ldr	r1, [pc, #48]	; (8003dd4 <__NVIC_SetPriority+0x4c>)
 8003da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003da6:	0112      	lsls	r2, r2, #4
 8003da8:	b2d2      	uxtb	r2, r2
 8003daa:	440b      	add	r3, r1
 8003dac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003db0:	e00a      	b.n	8003dc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	b2da      	uxtb	r2, r3
 8003db6:	4908      	ldr	r1, [pc, #32]	; (8003dd8 <__NVIC_SetPriority+0x50>)
 8003db8:	79fb      	ldrb	r3, [r7, #7]
 8003dba:	f003 030f 	and.w	r3, r3, #15
 8003dbe:	3b04      	subs	r3, #4
 8003dc0:	0112      	lsls	r2, r2, #4
 8003dc2:	b2d2      	uxtb	r2, r2
 8003dc4:	440b      	add	r3, r1
 8003dc6:	761a      	strb	r2, [r3, #24]
}
 8003dc8:	bf00      	nop
 8003dca:	370c      	adds	r7, #12
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd2:	4770      	bx	lr
 8003dd4:	e000e100 	.word	0xe000e100
 8003dd8:	e000ed00 	.word	0xe000ed00

08003ddc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b089      	sub	sp, #36	; 0x24
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	60f8      	str	r0, [r7, #12]
 8003de4:	60b9      	str	r1, [r7, #8]
 8003de6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	f003 0307 	and.w	r3, r3, #7
 8003dee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003df0:	69fb      	ldr	r3, [r7, #28]
 8003df2:	f1c3 0307 	rsb	r3, r3, #7
 8003df6:	2b04      	cmp	r3, #4
 8003df8:	bf28      	it	cs
 8003dfa:	2304      	movcs	r3, #4
 8003dfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003dfe:	69fb      	ldr	r3, [r7, #28]
 8003e00:	3304      	adds	r3, #4
 8003e02:	2b06      	cmp	r3, #6
 8003e04:	d902      	bls.n	8003e0c <NVIC_EncodePriority+0x30>
 8003e06:	69fb      	ldr	r3, [r7, #28]
 8003e08:	3b03      	subs	r3, #3
 8003e0a:	e000      	b.n	8003e0e <NVIC_EncodePriority+0x32>
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e10:	f04f 32ff 	mov.w	r2, #4294967295
 8003e14:	69bb      	ldr	r3, [r7, #24]
 8003e16:	fa02 f303 	lsl.w	r3, r2, r3
 8003e1a:	43da      	mvns	r2, r3
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	401a      	ands	r2, r3
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e24:	f04f 31ff 	mov.w	r1, #4294967295
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	fa01 f303 	lsl.w	r3, r1, r3
 8003e2e:	43d9      	mvns	r1, r3
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e34:	4313      	orrs	r3, r2
         );
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3724      	adds	r7, #36	; 0x24
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr
	...

08003e44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b082      	sub	sp, #8
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	3b01      	subs	r3, #1
 8003e50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e54:	d301      	bcc.n	8003e5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003e56:	2301      	movs	r3, #1
 8003e58:	e00f      	b.n	8003e7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e5a:	4a0a      	ldr	r2, [pc, #40]	; (8003e84 <SysTick_Config+0x40>)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	3b01      	subs	r3, #1
 8003e60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e62:	210f      	movs	r1, #15
 8003e64:	f04f 30ff 	mov.w	r0, #4294967295
 8003e68:	f7ff ff8e 	bl	8003d88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e6c:	4b05      	ldr	r3, [pc, #20]	; (8003e84 <SysTick_Config+0x40>)
 8003e6e:	2200      	movs	r2, #0
 8003e70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e72:	4b04      	ldr	r3, [pc, #16]	; (8003e84 <SysTick_Config+0x40>)
 8003e74:	2207      	movs	r2, #7
 8003e76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003e78:	2300      	movs	r3, #0
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3708      	adds	r7, #8
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}
 8003e82:	bf00      	nop
 8003e84:	e000e010 	.word	0xe000e010

08003e88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b082      	sub	sp, #8
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e90:	6878      	ldr	r0, [r7, #4]
 8003e92:	f7ff ff29 	bl	8003ce8 <__NVIC_SetPriorityGrouping>
}
 8003e96:	bf00      	nop
 8003e98:	3708      	adds	r7, #8
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}

08003e9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e9e:	b580      	push	{r7, lr}
 8003ea0:	b086      	sub	sp, #24
 8003ea2:	af00      	add	r7, sp, #0
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	60b9      	str	r1, [r7, #8]
 8003ea8:	607a      	str	r2, [r7, #4]
 8003eaa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003eac:	2300      	movs	r3, #0
 8003eae:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003eb0:	f7ff ff3e 	bl	8003d30 <__NVIC_GetPriorityGrouping>
 8003eb4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003eb6:	687a      	ldr	r2, [r7, #4]
 8003eb8:	68b9      	ldr	r1, [r7, #8]
 8003eba:	6978      	ldr	r0, [r7, #20]
 8003ebc:	f7ff ff8e 	bl	8003ddc <NVIC_EncodePriority>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ec6:	4611      	mov	r1, r2
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f7ff ff5d 	bl	8003d88 <__NVIC_SetPriority>
}
 8003ece:	bf00      	nop
 8003ed0:	3718      	adds	r7, #24
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}

08003ed6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ed6:	b580      	push	{r7, lr}
 8003ed8:	b082      	sub	sp, #8
 8003eda:	af00      	add	r7, sp, #0
 8003edc:	4603      	mov	r3, r0
 8003ede:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ee0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f7ff ff31 	bl	8003d4c <__NVIC_EnableIRQ>
}
 8003eea:	bf00      	nop
 8003eec:	3708      	adds	r7, #8
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}

08003ef2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003ef2:	b580      	push	{r7, lr}
 8003ef4:	b082      	sub	sp, #8
 8003ef6:	af00      	add	r7, sp, #0
 8003ef8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f7ff ffa2 	bl	8003e44 <SysTick_Config>
 8003f00:	4603      	mov	r3, r0
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3708      	adds	r7, #8
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}

08003f0a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003f0a:	b580      	push	{r7, lr}
 8003f0c:	b082      	sub	sp, #8
 8003f0e:	af00      	add	r7, sp, #0
 8003f10:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d101      	bne.n	8003f1c <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	e014      	b.n	8003f46 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	791b      	ldrb	r3, [r3, #4]
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d105      	bne.n	8003f32 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003f2c:	6878      	ldr	r0, [r7, #4]
 8003f2e:	f7fd fcfd 	bl	800192c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2202      	movs	r2, #2
 8003f36:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2201      	movs	r2, #1
 8003f42:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003f44:	2300      	movs	r3, #0
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3708      	adds	r7, #8
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}

08003f4e <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8003f4e:	b480      	push	{r7}
 8003f50:	b083      	sub	sp, #12
 8003f52:	af00      	add	r7, sp, #0
 8003f54:	6078      	str	r0, [r7, #4]
 8003f56:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	795b      	ldrb	r3, [r3, #5]
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d101      	bne.n	8003f64 <HAL_DAC_Start+0x16>
 8003f60:	2302      	movs	r3, #2
 8003f62:	e040      	b.n	8003fe6 <HAL_DAC_Start+0x98>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2201      	movs	r2, #1
 8003f68:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2202      	movs	r2, #2
 8003f6e:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	6819      	ldr	r1, [r3, #0]
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	f003 0310 	and.w	r3, r3, #16
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	409a      	lsls	r2, r3
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	430a      	orrs	r2, r1
 8003f86:	601a      	str	r2, [r3, #0]

#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (Channel == DAC_CHANNEL_1)
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d10f      	bne.n	8003fae <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8003f98:	2b02      	cmp	r3, #2
 8003f9a:	d11d      	bne.n	8003fd8 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	685a      	ldr	r2, [r3, #4]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f042 0201 	orr.w	r2, r2, #1
 8003faa:	605a      	str	r2, [r3, #4]
 8003fac:	e014      	b.n	8003fd8 <HAL_DAC_Start+0x8a>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	f003 0310 	and.w	r3, r3, #16
 8003fbe:	2102      	movs	r1, #2
 8003fc0:	fa01 f303 	lsl.w	r3, r1, r3
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d107      	bne.n	8003fd8 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	685a      	ldr	r2, [r3, #4]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f042 0202 	orr.w	r2, r2, #2
 8003fd6:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003fe4:	2300      	movs	r3, #0
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	370c      	adds	r7, #12
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr
	...

08003ff4 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b086      	sub	sp, #24
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	60f8      	str	r0, [r7, #12]
 8003ffc:	60b9      	str	r1, [r7, #8]
 8003ffe:	607a      	str	r2, [r7, #4]
 8004000:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8004002:	2300      	movs	r3, #0
 8004004:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	795b      	ldrb	r3, [r3, #5]
 800400a:	2b01      	cmp	r3, #1
 800400c:	d101      	bne.n	8004012 <HAL_DAC_Start_DMA+0x1e>
 800400e:	2302      	movs	r3, #2
 8004010:	e0ab      	b.n	800416a <HAL_DAC_Start_DMA+0x176>
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	2201      	movs	r2, #1
 8004016:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2202      	movs	r2, #2
 800401c:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d12f      	bne.n	8004084 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	4a52      	ldr	r2, [pc, #328]	; (8004174 <HAL_DAC_Start_DMA+0x180>)
 800402a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	4a51      	ldr	r2, [pc, #324]	; (8004178 <HAL_DAC_Start_DMA+0x184>)
 8004032:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	4a50      	ldr	r2, [pc, #320]	; (800417c <HAL_DAC_Start_DMA+0x188>)
 800403a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800404a:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 800404c:	6a3b      	ldr	r3, [r7, #32]
 800404e:	2b08      	cmp	r3, #8
 8004050:	d013      	beq.n	800407a <HAL_DAC_Start_DMA+0x86>
 8004052:	6a3b      	ldr	r3, [r7, #32]
 8004054:	2b08      	cmp	r3, #8
 8004056:	d845      	bhi.n	80040e4 <HAL_DAC_Start_DMA+0xf0>
 8004058:	6a3b      	ldr	r3, [r7, #32]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d003      	beq.n	8004066 <HAL_DAC_Start_DMA+0x72>
 800405e:	6a3b      	ldr	r3, [r7, #32]
 8004060:	2b04      	cmp	r3, #4
 8004062:	d005      	beq.n	8004070 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8004064:	e03e      	b.n	80040e4 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	3308      	adds	r3, #8
 800406c:	613b      	str	r3, [r7, #16]
        break;
 800406e:	e03c      	b.n	80040ea <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	330c      	adds	r3, #12
 8004076:	613b      	str	r3, [r7, #16]
        break;
 8004078:	e037      	b.n	80040ea <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	3310      	adds	r3, #16
 8004080:	613b      	str	r3, [r7, #16]
        break;
 8004082:	e032      	b.n	80040ea <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	4a3d      	ldr	r2, [pc, #244]	; (8004180 <HAL_DAC_Start_DMA+0x18c>)
 800408a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	68db      	ldr	r3, [r3, #12]
 8004090:	4a3c      	ldr	r2, [pc, #240]	; (8004184 <HAL_DAC_Start_DMA+0x190>)
 8004092:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	68db      	ldr	r3, [r3, #12]
 8004098:	4a3b      	ldr	r2, [pc, #236]	; (8004188 <HAL_DAC_Start_DMA+0x194>)
 800409a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80040aa:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80040ac:	6a3b      	ldr	r3, [r7, #32]
 80040ae:	2b08      	cmp	r3, #8
 80040b0:	d013      	beq.n	80040da <HAL_DAC_Start_DMA+0xe6>
 80040b2:	6a3b      	ldr	r3, [r7, #32]
 80040b4:	2b08      	cmp	r3, #8
 80040b6:	d817      	bhi.n	80040e8 <HAL_DAC_Start_DMA+0xf4>
 80040b8:	6a3b      	ldr	r3, [r7, #32]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d003      	beq.n	80040c6 <HAL_DAC_Start_DMA+0xd2>
 80040be:	6a3b      	ldr	r3, [r7, #32]
 80040c0:	2b04      	cmp	r3, #4
 80040c2:	d005      	beq.n	80040d0 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 80040c4:	e010      	b.n	80040e8 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	3314      	adds	r3, #20
 80040cc:	613b      	str	r3, [r7, #16]
        break;
 80040ce:	e00c      	b.n	80040ea <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	3318      	adds	r3, #24
 80040d6:	613b      	str	r3, [r7, #16]
        break;
 80040d8:	e007      	b.n	80040ea <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	331c      	adds	r3, #28
 80040e0:	613b      	str	r3, [r7, #16]
        break;
 80040e2:	e002      	b.n	80040ea <HAL_DAC_Start_DMA+0xf6>
        break;
 80040e4:	bf00      	nop
 80040e6:	e000      	b.n	80040ea <HAL_DAC_Start_DMA+0xf6>
        break;
 80040e8:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d111      	bne.n	8004114 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80040fe:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	6898      	ldr	r0, [r3, #8]
 8004104:	6879      	ldr	r1, [r7, #4]
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	693a      	ldr	r2, [r7, #16]
 800410a:	f000 fd07 	bl	8004b1c <HAL_DMA_Start_IT>
 800410e:	4603      	mov	r3, r0
 8004110:	75fb      	strb	r3, [r7, #23]
 8004112:	e010      	b.n	8004136 <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8004122:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	68d8      	ldr	r0, [r3, #12]
 8004128:	6879      	ldr	r1, [r7, #4]
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	693a      	ldr	r2, [r7, #16]
 800412e:	f000 fcf5 	bl	8004b1c <HAL_DMA_Start_IT>
 8004132:	4603      	mov	r3, r0
 8004134:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2200      	movs	r2, #0
 800413a:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 800413c:	7dfb      	ldrb	r3, [r7, #23]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d10c      	bne.n	800415c <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	6819      	ldr	r1, [r3, #0]
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	f003 0310 	and.w	r3, r3, #16
 800414e:	2201      	movs	r2, #1
 8004150:	409a      	lsls	r2, r3
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	430a      	orrs	r2, r1
 8004158:	601a      	str	r2, [r3, #0]
 800415a:	e005      	b.n	8004168 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	691b      	ldr	r3, [r3, #16]
 8004160:	f043 0204 	orr.w	r2, r3, #4
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8004168:	7dfb      	ldrb	r3, [r7, #23]
}
 800416a:	4618      	mov	r0, r3
 800416c:	3718      	adds	r7, #24
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}
 8004172:	bf00      	nop
 8004174:	08004461 	.word	0x08004461
 8004178:	08004483 	.word	0x08004483
 800417c:	0800449f 	.word	0x0800449f
 8004180:	08004509 	.word	0x08004509
 8004184:	0800452b 	.word	0x0800452b
 8004188:	08004547 	.word	0x08004547

0800418c <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800418c:	b480      	push	{r7}
 800418e:	b083      	sub	sp, #12
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8004194:	bf00      	nop
 8004196:	370c      	adds	r7, #12
 8004198:	46bd      	mov	sp, r7
 800419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419e:	4770      	bx	lr

080041a0 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b083      	sub	sp, #12
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80041a8:	bf00      	nop
 80041aa:	370c      	adds	r7, #12
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr

080041b4 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b083      	sub	sp, #12
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80041bc:	bf00      	nop
 80041be:	370c      	adds	r7, #12
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr

080041c8 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b088      	sub	sp, #32
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	60f8      	str	r0, [r7, #12]
 80041d0:	60b9      	str	r1, [r7, #8]
 80041d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 80041d4:	2300      	movs	r3, #0
 80041d6:	61bb      	str	r3, [r7, #24]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	795b      	ldrb	r3, [r3, #5]
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d101      	bne.n	80041e4 <HAL_DAC_ConfigChannel+0x1c>
 80041e0:	2302      	movs	r3, #2
 80041e2:	e137      	b.n	8004454 <HAL_DAC_ConfigChannel+0x28c>
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2201      	movs	r2, #1
 80041e8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2202      	movs	r2, #2
 80041ee:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	2b04      	cmp	r3, #4
 80041f6:	f040 8081 	bne.w	80042fc <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80041fa:	f7ff fd45 	bl	8003c88 <HAL_GetTick>
 80041fe:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d140      	bne.n	8004288 <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004206:	e018      	b.n	800423a <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004208:	f7ff fd3e 	bl	8003c88 <HAL_GetTick>
 800420c:	4602      	mov	r2, r0
 800420e:	69bb      	ldr	r3, [r7, #24]
 8004210:	1ad3      	subs	r3, r2, r3
 8004212:	2b01      	cmp	r3, #1
 8004214:	d911      	bls.n	800423a <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800421c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004220:	2b00      	cmp	r3, #0
 8004222:	d00a      	beq.n	800423a <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	691b      	ldr	r3, [r3, #16]
 8004228:	f043 0208 	orr.w	r2, r3, #8
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2203      	movs	r2, #3
 8004234:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004236:	2303      	movs	r3, #3
 8004238:	e10c      	b.n	8004454 <HAL_DAC_ConfigChannel+0x28c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004240:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004244:	2b00      	cmp	r3, #0
 8004246:	d1df      	bne.n	8004208 <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 8004248:	2001      	movs	r0, #1
 800424a:	f7ff fd29 	bl	8003ca0 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	68ba      	ldr	r2, [r7, #8]
 8004254:	69d2      	ldr	r2, [r2, #28]
 8004256:	641a      	str	r2, [r3, #64]	; 0x40
 8004258:	e023      	b.n	80042a2 <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800425a:	f7ff fd15 	bl	8003c88 <HAL_GetTick>
 800425e:	4602      	mov	r2, r0
 8004260:	69bb      	ldr	r3, [r7, #24]
 8004262:	1ad3      	subs	r3, r2, r3
 8004264:	2b01      	cmp	r3, #1
 8004266:	d90f      	bls.n	8004288 <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800426e:	2b00      	cmp	r3, #0
 8004270:	da0a      	bge.n	8004288 <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	691b      	ldr	r3, [r3, #16]
 8004276:	f043 0208 	orr.w	r2, r3, #8
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2203      	movs	r2, #3
 8004282:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004284:	2303      	movs	r3, #3
 8004286:	e0e5      	b.n	8004454 <HAL_DAC_ConfigChannel+0x28c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800428e:	2b00      	cmp	r3, #0
 8004290:	dbe3      	blt.n	800425a <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 8004292:	2001      	movs	r0, #1
 8004294:	f7ff fd04 	bl	8003ca0 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	68ba      	ldr	r2, [r7, #8]
 800429e:	69d2      	ldr	r2, [r2, #28]
 80042a0:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	f003 0310 	and.w	r3, r3, #16
 80042ae:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80042b2:	fa01 f303 	lsl.w	r3, r1, r3
 80042b6:	43db      	mvns	r3, r3
 80042b8:	ea02 0103 	and.w	r1, r2, r3
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	6a1a      	ldr	r2, [r3, #32]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	f003 0310 	and.w	r3, r3, #16
 80042c6:	409a      	lsls	r2, r3
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	430a      	orrs	r2, r1
 80042ce:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	f003 0310 	and.w	r3, r3, #16
 80042dc:	21ff      	movs	r1, #255	; 0xff
 80042de:	fa01 f303 	lsl.w	r3, r1, r3
 80042e2:	43db      	mvns	r3, r3
 80042e4:	ea02 0103 	and.w	r1, r2, r3
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	f003 0310 	and.w	r3, r3, #16
 80042f2:	409a      	lsls	r2, r3
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	430a      	orrs	r2, r1
 80042fa:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	695b      	ldr	r3, [r3, #20]
 8004300:	2b01      	cmp	r3, #1
 8004302:	d11d      	bne.n	8004340 <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800430a:	61fb      	str	r3, [r7, #28]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	f003 0310 	and.w	r3, r3, #16
 8004312:	221f      	movs	r2, #31
 8004314:	fa02 f303 	lsl.w	r3, r2, r3
 8004318:	43db      	mvns	r3, r3
 800431a:	69fa      	ldr	r2, [r7, #28]
 800431c:	4013      	ands	r3, r2
 800431e:	61fb      	str	r3, [r7, #28]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	699b      	ldr	r3, [r3, #24]
 8004324:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	f003 0310 	and.w	r3, r3, #16
 800432c:	697a      	ldr	r2, [r7, #20]
 800432e:	fa02 f303 	lsl.w	r3, r2, r3
 8004332:	69fa      	ldr	r2, [r7, #28]
 8004334:	4313      	orrs	r3, r2
 8004336:	61fb      	str	r3, [r7, #28]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	69fa      	ldr	r2, [r7, #28]
 800433e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004346:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	f003 0310 	and.w	r3, r3, #16
 800434e:	2207      	movs	r2, #7
 8004350:	fa02 f303 	lsl.w	r3, r2, r3
 8004354:	43db      	mvns	r3, r3
 8004356:	69fa      	ldr	r2, [r7, #28]
 8004358:	4013      	ands	r3, r2
 800435a:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	685a      	ldr	r2, [r3, #4]
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	68db      	ldr	r3, [r3, #12]
 8004364:	431a      	orrs	r2, r3
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	691b      	ldr	r3, [r3, #16]
 800436a:	4313      	orrs	r3, r2
 800436c:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	f003 0310 	and.w	r3, r3, #16
 8004374:	697a      	ldr	r2, [r7, #20]
 8004376:	fa02 f303 	lsl.w	r3, r2, r3
 800437a:	69fa      	ldr	r2, [r7, #28]
 800437c:	4313      	orrs	r3, r2
 800437e:	61fb      	str	r3, [r7, #28]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	69fa      	ldr	r2, [r7, #28]
 8004386:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	6819      	ldr	r1, [r3, #0]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	f003 0310 	and.w	r3, r3, #16
 8004394:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004398:	fa02 f303 	lsl.w	r3, r2, r3
 800439c:	43da      	mvns	r2, r3
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	400a      	ands	r2, r1
 80043a4:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	61fb      	str	r3, [r7, #28]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	f003 0310 	and.w	r3, r3, #16
 80043b4:	f640 72fe 	movw	r2, #4094	; 0xffe
 80043b8:	fa02 f303 	lsl.w	r3, r2, r3
 80043bc:	43db      	mvns	r3, r3
 80043be:	69fa      	ldr	r2, [r7, #28]
 80043c0:	4013      	ands	r3, r2
 80043c2:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	f003 0310 	and.w	r3, r3, #16
 80043d0:	697a      	ldr	r2, [r7, #20]
 80043d2:	fa02 f303 	lsl.w	r3, r2, r3
 80043d6:	69fa      	ldr	r2, [r7, #28]
 80043d8:	4313      	orrs	r3, r2
 80043da:	61fb      	str	r3, [r7, #28]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043e4:	d104      	bne.n	80043f0 <HAL_DAC_ConfigChannel+0x228>
  {
    tmpreg1 |= DAC_CR_HFSEL;
 80043e6:	69fb      	ldr	r3, [r7, #28]
 80043e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043ec:	61fb      	str	r3, [r7, #28]
 80043ee:	e018      	b.n	8004422 <HAL_DAC_ConfigChannel+0x25a>
  }
  else
  {
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d104      	bne.n	8004402 <HAL_DAC_ConfigChannel+0x23a>
    {
      tmpreg1 &= ~(DAC_CR_HFSEL);
 80043f8:	69fb      	ldr	r3, [r7, #28]
 80043fa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80043fe:	61fb      	str	r3, [r7, #28]
 8004400:	e00f      	b.n	8004422 <HAL_DAC_ConfigChannel+0x25a>
    }
    else /* Automatic selection */
    {
      hclkfreq = HAL_RCC_GetHCLKFreq();
 8004402:	f001 fd8f 	bl	8005f24 <HAL_RCC_GetHCLKFreq>
 8004406:	6138      	str	r0, [r7, #16]
      if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	4a14      	ldr	r2, [pc, #80]	; (800445c <HAL_DAC_ConfigChannel+0x294>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d904      	bls.n	800441a <HAL_DAC_ConfigChannel+0x252>
      {
        /* High frequency enable when HCLK frequency higher than 80   */
         tmpreg1 |= DAC_CR_HFSEL;
 8004410:	69fb      	ldr	r3, [r7, #28]
 8004412:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004416:	61fb      	str	r3, [r7, #28]
 8004418:	e003      	b.n	8004422 <HAL_DAC_ConfigChannel+0x25a>
      }
      else
      {
        /* High frequency disable when HCLK frequency higher than 80  */
        tmpreg1 &= ~(DAC_CR_HFSEL);
 800441a:	69fb      	ldr	r3, [r7, #28]
 800441c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004420:	61fb      	str	r3, [r7, #28]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	69fa      	ldr	r2, [r7, #28]
 8004428:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	6819      	ldr	r1, [r3, #0]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	f003 0310 	and.w	r3, r3, #16
 8004436:	22c0      	movs	r2, #192	; 0xc0
 8004438:	fa02 f303 	lsl.w	r3, r2, r3
 800443c:	43da      	mvns	r2, r3
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	400a      	ands	r2, r1
 8004444:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2201      	movs	r2, #1
 800444a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2200      	movs	r2, #0
 8004450:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004452:	2300      	movs	r3, #0
}
 8004454:	4618      	mov	r0, r3
 8004456:	3720      	adds	r7, #32
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}
 800445c:	04c4b400 	.word	0x04c4b400

08004460 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b084      	sub	sp, #16
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800446c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800446e:	68f8      	ldr	r0, [r7, #12]
 8004470:	f7ff fe8c 	bl	800418c <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2201      	movs	r2, #1
 8004478:	711a      	strb	r2, [r3, #4]
}
 800447a:	bf00      	nop
 800447c:	3710      	adds	r7, #16
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}

08004482 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8004482:	b580      	push	{r7, lr}
 8004484:	b084      	sub	sp, #16
 8004486:	af00      	add	r7, sp, #0
 8004488:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800448e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8004490:	68f8      	ldr	r0, [r7, #12]
 8004492:	f7ff fe85 	bl	80041a0 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8004496:	bf00      	nop
 8004498:	3710      	adds	r7, #16
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}

0800449e <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 800449e:	b580      	push	{r7, lr}
 80044a0:	b084      	sub	sp, #16
 80044a2:	af00      	add	r7, sp, #0
 80044a4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044aa:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	691b      	ldr	r3, [r3, #16]
 80044b0:	f043 0204 	orr.w	r2, r3, #4
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80044b8:	68f8      	ldr	r0, [r7, #12]
 80044ba:	f7ff fe7b 	bl	80041b4 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2201      	movs	r2, #1
 80044c2:	711a      	strb	r2, [r3, #4]
}
 80044c4:	bf00      	nop
 80044c6:	3710      	adds	r7, #16
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}

080044cc <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b083      	sub	sp, #12
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80044d4:	bf00      	nop
 80044d6:	370c      	adds	r7, #12
 80044d8:	46bd      	mov	sp, r7
 80044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044de:	4770      	bx	lr

080044e0 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b083      	sub	sp, #12
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80044e8:	bf00      	nop
 80044ea:	370c      	adds	r7, #12
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr

080044f4 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b083      	sub	sp, #12
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80044fc:	bf00      	nop
 80044fe:	370c      	adds	r7, #12
 8004500:	46bd      	mov	sp, r7
 8004502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004506:	4770      	bx	lr

08004508 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b084      	sub	sp, #16
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004514:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8004516:	68f8      	ldr	r0, [r7, #12]
 8004518:	f7ff ffd8 	bl	80044cc <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2201      	movs	r2, #1
 8004520:	711a      	strb	r2, [r3, #4]
}
 8004522:	bf00      	nop
 8004524:	3710      	adds	r7, #16
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}

0800452a <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800452a:	b580      	push	{r7, lr}
 800452c:	b084      	sub	sp, #16
 800452e:	af00      	add	r7, sp, #0
 8004530:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004536:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8004538:	68f8      	ldr	r0, [r7, #12]
 800453a:	f7ff ffd1 	bl	80044e0 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800453e:	bf00      	nop
 8004540:	3710      	adds	r7, #16
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}

08004546 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8004546:	b580      	push	{r7, lr}
 8004548:	b084      	sub	sp, #16
 800454a:	af00      	add	r7, sp, #0
 800454c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004552:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	691b      	ldr	r3, [r3, #16]
 8004558:	f043 0204 	orr.w	r2, r3, #4
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8004560:	68f8      	ldr	r0, [r7, #12]
 8004562:	f7ff ffc7 	bl	80044f4 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	2201      	movs	r2, #1
 800456a:	711a      	strb	r2, [r3, #4]
}
 800456c:	bf00      	nop
 800456e:	3710      	adds	r7, #16
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}

08004574 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b082      	sub	sp, #8
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d101      	bne.n	8004586 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	e0ac      	b.n	80046e0 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4618      	mov	r0, r3
 800458c:	f000 f9d2 	bl	8004934 <DFSDM_GetChannelFromInstance>
 8004590:	4603      	mov	r3, r0
 8004592:	4a55      	ldr	r2, [pc, #340]	; (80046e8 <HAL_DFSDM_ChannelInit+0x174>)
 8004594:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d001      	beq.n	80045a0 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	e09f      	b.n	80046e0 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80045a0:	6878      	ldr	r0, [r7, #4]
 80045a2:	f7fd fadb 	bl	8001b5c <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 80045a6:	4b51      	ldr	r3, [pc, #324]	; (80046ec <HAL_DFSDM_ChannelInit+0x178>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	3301      	adds	r3, #1
 80045ac:	4a4f      	ldr	r2, [pc, #316]	; (80046ec <HAL_DFSDM_ChannelInit+0x178>)
 80045ae:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 80045b0:	4b4e      	ldr	r3, [pc, #312]	; (80046ec <HAL_DFSDM_ChannelInit+0x178>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d125      	bne.n	8004604 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80045b8:	4b4d      	ldr	r3, [pc, #308]	; (80046f0 <HAL_DFSDM_ChannelInit+0x17c>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a4c      	ldr	r2, [pc, #304]	; (80046f0 <HAL_DFSDM_ChannelInit+0x17c>)
 80045be:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80045c2:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80045c4:	4b4a      	ldr	r3, [pc, #296]	; (80046f0 <HAL_DFSDM_ChannelInit+0x17c>)
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	4948      	ldr	r1, [pc, #288]	; (80046f0 <HAL_DFSDM_ChannelInit+0x17c>)
 80045ce:	4313      	orrs	r3, r2
 80045d0:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80045d2:	4b47      	ldr	r3, [pc, #284]	; (80046f0 <HAL_DFSDM_ChannelInit+0x17c>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a46      	ldr	r2, [pc, #280]	; (80046f0 <HAL_DFSDM_ChannelInit+0x17c>)
 80045d8:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 80045dc:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	791b      	ldrb	r3, [r3, #4]
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d108      	bne.n	80045f8 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 80045e6:	4b42      	ldr	r3, [pc, #264]	; (80046f0 <HAL_DFSDM_ChannelInit+0x17c>)
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	68db      	ldr	r3, [r3, #12]
 80045ee:	3b01      	subs	r3, #1
 80045f0:	041b      	lsls	r3, r3, #16
 80045f2:	493f      	ldr	r1, [pc, #252]	; (80046f0 <HAL_DFSDM_ChannelInit+0x17c>)
 80045f4:	4313      	orrs	r3, r2
 80045f6:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 80045f8:	4b3d      	ldr	r3, [pc, #244]	; (80046f0 <HAL_DFSDM_ChannelInit+0x17c>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a3c      	ldr	r2, [pc, #240]	; (80046f0 <HAL_DFSDM_ChannelInit+0x17c>)
 80045fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004602:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8004612:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	6819      	ldr	r1, [r3, #0]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8004622:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8004628:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	430a      	orrs	r2, r1
 8004630:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f022 020f 	bic.w	r2, r2, #15
 8004640:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	6819      	ldr	r1, [r3, #0]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8004650:	431a      	orrs	r2, r3
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	430a      	orrs	r2, r1
 8004658:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	689a      	ldr	r2, [r3, #8]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8004668:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	6899      	ldr	r1, [r3, #8]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004678:	3b01      	subs	r3, #1
 800467a:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800467c:	431a      	orrs	r2, r3
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	430a      	orrs	r2, r1
 8004684:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	685a      	ldr	r2, [r3, #4]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f002 0207 	and.w	r2, r2, #7
 8004694:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	6859      	ldr	r1, [r3, #4]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046a0:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046a6:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80046a8:	431a      	orrs	r2, r3
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	430a      	orrs	r2, r1
 80046b0:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80046c0:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2201      	movs	r2, #1
 80046c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4618      	mov	r0, r3
 80046d0:	f000 f930 	bl	8004934 <DFSDM_GetChannelFromInstance>
 80046d4:	4602      	mov	r2, r0
 80046d6:	4904      	ldr	r1, [pc, #16]	; (80046e8 <HAL_DFSDM_ChannelInit+0x174>)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 80046de:	2300      	movs	r3, #0
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	3708      	adds	r7, #8
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}
 80046e8:	200295d8 	.word	0x200295d8
 80046ec:	200295d4 	.word	0x200295d4
 80046f0:	40016000 	.word	0x40016000

080046f4 <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b082      	sub	sp, #8
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_filter == NULL)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d101      	bne.n	8004706 <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	e0ca      	b.n	800489c <HAL_DFSDM_FilterInit+0x1a8>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a66      	ldr	r2, [pc, #408]	; (80048a4 <HAL_DFSDM_FilterInit+0x1b0>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d109      	bne.n	8004724 <HAL_DFSDM_FilterInit+0x30>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	685b      	ldr	r3, [r3, #4]
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8004714:	2b01      	cmp	r3, #1
 8004716:	d003      	beq.n	8004720 <HAL_DFSDM_FilterInit+0x2c>
       (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	68db      	ldr	r3, [r3, #12]
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 800471c:	2b01      	cmp	r3, #1
 800471e:	d101      	bne.n	8004724 <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 8004720:	2301      	movs	r3, #1
 8004722:	e0bb      	b.n	800489c <HAL_DFSDM_FilterInit+0x1a8>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2200      	movs	r2, #0
 8004728:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2201      	movs	r2, #1
 800472e:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2201      	movs	r2, #1
 8004734:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2200      	movs	r2, #0
 800473a:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 800473c:	6878      	ldr	r0, [r7, #4]
 800473e:	f7fd f961 	bl	8001a04 <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	681a      	ldr	r2, [r3, #0]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8004750:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	7a1b      	ldrb	r3, [r3, #8]
 8004756:	2b01      	cmp	r3, #1
 8004758:	d108      	bne.n	800476c <HAL_DFSDM_FilterInit+0x78>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8004768:	601a      	str	r2, [r3, #0]
 800476a:	e007      	b.n	800477c <HAL_DFSDM_FilterInit+0x88>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800477a:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	7a5b      	ldrb	r3, [r3, #9]
 8004780:	2b01      	cmp	r3, #1
 8004782:	d108      	bne.n	8004796 <HAL_DFSDM_FilterInit+0xa2>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	681a      	ldr	r2, [r3, #0]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8004792:	601a      	str	r2, [r3, #0]
 8004794:	e007      	b.n	80047a6 <HAL_DFSDM_FilterInit+0xb2>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	681a      	ldr	r2, [r3, #0]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80047a4:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	687a      	ldr	r2, [r7, #4]
 80047ae:	6812      	ldr	r2, [r2, #0]
 80047b0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80047b4:	f023 0308 	bic.w	r3, r3, #8
 80047b8:	6013      	str	r3, [r2, #0]
  if (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	68db      	ldr	r3, [r3, #12]
 80047be:	2b02      	cmp	r3, #2
 80047c0:	d108      	bne.n	80047d4 <HAL_DFSDM_FilterInit+0xe0>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	6819      	ldr	r1, [r3, #0]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	695a      	ldr	r2, [r3, #20]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	430a      	orrs	r2, r1
 80047d2:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	7c1b      	ldrb	r3, [r3, #16]
 80047d8:	2b01      	cmp	r3, #1
 80047da:	d108      	bne.n	80047ee <HAL_DFSDM_FilterInit+0xfa>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f042 0210 	orr.w	r2, r2, #16
 80047ea:	601a      	str	r2, [r3, #0]
 80047ec:	e007      	b.n	80047fe <HAL_DFSDM_FilterInit+0x10a>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f022 0210 	bic.w	r2, r2, #16
 80047fc:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	7c5b      	ldrb	r3, [r3, #17]
 8004802:	2b01      	cmp	r3, #1
 8004804:	d108      	bne.n	8004818 <HAL_DFSDM_FilterInit+0x124>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f042 0220 	orr.w	r2, r2, #32
 8004814:	601a      	str	r2, [r3, #0]
 8004816:	e007      	b.n	8004828 <HAL_DFSDM_FilterInit+0x134>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f022 0220 	bic.w	r2, r2, #32
 8004826:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	695b      	ldr	r3, [r3, #20]
 800482e:	687a      	ldr	r2, [r7, #4]
 8004830:	6812      	ldr	r2, [r2, #0]
 8004832:	f023 4363 	bic.w	r3, r3, #3808428032	; 0xe3000000
 8004836:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 800483a:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	6959      	ldr	r1, [r3, #20]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	69da      	ldr	r2, [r3, #28]
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6a1b      	ldr	r3, [r3, #32]
 800484a:	3b01      	subs	r3, #1
 800484c:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 800484e:	431a      	orrs	r2, r3
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004854:	3b01      	subs	r3, #1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8004856:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	430a      	orrs	r2, r1
 800485e:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	685a      	ldr	r2, [r3, #4]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	68da      	ldr	r2, [r3, #12]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	699a      	ldr	r2, [r3, #24]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	7c1a      	ldrb	r2, [r3, #16]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f042 0201 	orr.w	r2, r2, #1
 8004890:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2201      	movs	r2, #1
 8004896:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 800489a:	2300      	movs	r3, #0
}
 800489c:	4618      	mov	r0, r3
 800489e:	3708      	adds	r7, #8
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd80      	pop	{r7, pc}
 80048a4:	40016100 	.word	0x40016100

080048a8 <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b087      	sub	sp, #28
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	60f8      	str	r0, [r7, #12]
 80048b0:	60b9      	str	r1, [r7, #8]
 80048b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048b4:	2300      	movs	r3, #0
 80048b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d02e      	beq.n	8004920 <HAL_DFSDM_FilterConfigRegChannel+0x78>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 80048c8:	2bff      	cmp	r3, #255	; 0xff
 80048ca:	d029      	beq.n	8004920 <HAL_DFSDM_FilterConfigRegChannel+0x78>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	68fa      	ldr	r2, [r7, #12]
 80048d4:	6812      	ldr	r2, [r2, #0]
 80048d6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80048da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048de:	6013      	str	r3, [r2, #0]
    if (ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2b01      	cmp	r3, #1
 80048e4:	d10d      	bne.n	8004902 <HAL_DFSDM_FilterConfigRegChannel+0x5a>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)(((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	681a      	ldr	r2, [r3, #0]
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	021b      	lsls	r3, r3, #8
 80048f0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80048f4:	431a      	orrs	r2, r3
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80048fe:	601a      	str	r2, [r3, #0]
 8004900:	e00a      	b.n	8004918 <HAL_DFSDM_FilterConfigRegChannel+0x70>
                                                    DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	6819      	ldr	r1, [r3, #0]
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	021b      	lsls	r3, r3, #8
 800490c:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	430a      	orrs	r2, r1
 8004916:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	687a      	ldr	r2, [r7, #4]
 800491c:	631a      	str	r2, [r3, #48]	; 0x30
 800491e:	e001      	b.n	8004924 <HAL_DFSDM_FilterConfigRegChannel+0x7c>
  }
  else
  {
    status = HAL_ERROR;
 8004920:	2301      	movs	r3, #1
 8004922:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 8004924:	7dfb      	ldrb	r3, [r7, #23]
}
 8004926:	4618      	mov	r0, r3
 8004928:	371c      	adds	r7, #28
 800492a:	46bd      	mov	sp, r7
 800492c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004930:	4770      	bx	lr
	...

08004934 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8004934:	b480      	push	{r7}
 8004936:	b085      	sub	sp, #20
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	4a1c      	ldr	r2, [pc, #112]	; (80049b0 <DFSDM_GetChannelFromInstance+0x7c>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d102      	bne.n	800494a <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8004944:	2300      	movs	r3, #0
 8004946:	60fb      	str	r3, [r7, #12]
 8004948:	e02b      	b.n	80049a2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	4a19      	ldr	r2, [pc, #100]	; (80049b4 <DFSDM_GetChannelFromInstance+0x80>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d102      	bne.n	8004958 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8004952:	2301      	movs	r3, #1
 8004954:	60fb      	str	r3, [r7, #12]
 8004956:	e024      	b.n	80049a2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	4a17      	ldr	r2, [pc, #92]	; (80049b8 <DFSDM_GetChannelFromInstance+0x84>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d102      	bne.n	8004966 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8004960:	2302      	movs	r3, #2
 8004962:	60fb      	str	r3, [r7, #12]
 8004964:	e01d      	b.n	80049a2 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	4a14      	ldr	r2, [pc, #80]	; (80049bc <DFSDM_GetChannelFromInstance+0x88>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d102      	bne.n	8004974 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 800496e:	2304      	movs	r3, #4
 8004970:	60fb      	str	r3, [r7, #12]
 8004972:	e016      	b.n	80049a2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	4a12      	ldr	r2, [pc, #72]	; (80049c0 <DFSDM_GetChannelFromInstance+0x8c>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d102      	bne.n	8004982 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 800497c:	2305      	movs	r3, #5
 800497e:	60fb      	str	r3, [r7, #12]
 8004980:	e00f      	b.n	80049a2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	4a0f      	ldr	r2, [pc, #60]	; (80049c4 <DFSDM_GetChannelFromInstance+0x90>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d102      	bne.n	8004990 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 800498a:	2306      	movs	r3, #6
 800498c:	60fb      	str	r3, [r7, #12]
 800498e:	e008      	b.n	80049a2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	4a0d      	ldr	r2, [pc, #52]	; (80049c8 <DFSDM_GetChannelFromInstance+0x94>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d102      	bne.n	800499e <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8004998:	2307      	movs	r3, #7
 800499a:	60fb      	str	r3, [r7, #12]
 800499c:	e001      	b.n	80049a2 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 800499e:	2303      	movs	r3, #3
 80049a0:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 80049a2:	68fb      	ldr	r3, [r7, #12]
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	3714      	adds	r7, #20
 80049a8:	46bd      	mov	sp, r7
 80049aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ae:	4770      	bx	lr
 80049b0:	40016000 	.word	0x40016000
 80049b4:	40016020 	.word	0x40016020
 80049b8:	40016040 	.word	0x40016040
 80049bc:	40016080 	.word	0x40016080
 80049c0:	400160a0 	.word	0x400160a0
 80049c4:	400160c0 	.word	0x400160c0
 80049c8:	400160e0 	.word	0x400160e0

080049cc <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b084      	sub	sp, #16
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d101      	bne.n	80049de <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80049da:	2301      	movs	r3, #1
 80049dc:	e08d      	b.n	8004afa <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	461a      	mov	r2, r3
 80049e4:	4b47      	ldr	r3, [pc, #284]	; (8004b04 <HAL_DMA_Init+0x138>)
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d80f      	bhi.n	8004a0a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	461a      	mov	r2, r3
 80049f0:	4b45      	ldr	r3, [pc, #276]	; (8004b08 <HAL_DMA_Init+0x13c>)
 80049f2:	4413      	add	r3, r2
 80049f4:	4a45      	ldr	r2, [pc, #276]	; (8004b0c <HAL_DMA_Init+0x140>)
 80049f6:	fba2 2303 	umull	r2, r3, r2, r3
 80049fa:	091b      	lsrs	r3, r3, #4
 80049fc:	009a      	lsls	r2, r3, #2
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	4a42      	ldr	r2, [pc, #264]	; (8004b10 <HAL_DMA_Init+0x144>)
 8004a06:	641a      	str	r2, [r3, #64]	; 0x40
 8004a08:	e00e      	b.n	8004a28 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	461a      	mov	r2, r3
 8004a10:	4b40      	ldr	r3, [pc, #256]	; (8004b14 <HAL_DMA_Init+0x148>)
 8004a12:	4413      	add	r3, r2
 8004a14:	4a3d      	ldr	r2, [pc, #244]	; (8004b0c <HAL_DMA_Init+0x140>)
 8004a16:	fba2 2303 	umull	r2, r3, r2, r3
 8004a1a:	091b      	lsrs	r3, r3, #4
 8004a1c:	009a      	lsls	r2, r3, #2
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	4a3c      	ldr	r2, [pc, #240]	; (8004b18 <HAL_DMA_Init+0x14c>)
 8004a26:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2202      	movs	r2, #2
 8004a2c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004a3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a42:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004a4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	691b      	ldr	r3, [r3, #16]
 8004a52:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a58:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	699b      	ldr	r3, [r3, #24]
 8004a5e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a64:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6a1b      	ldr	r3, [r3, #32]
 8004a6a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004a6c:	68fa      	ldr	r2, [r7, #12]
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	68fa      	ldr	r2, [r7, #12]
 8004a78:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f000 fa16 	bl	8004eac <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a88:	d102      	bne.n	8004a90 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	685a      	ldr	r2, [r3, #4]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a98:	b2d2      	uxtb	r2, r2
 8004a9a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004aa0:	687a      	ldr	r2, [r7, #4]
 8004aa2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004aa4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d010      	beq.n	8004ad0 <HAL_DMA_Init+0x104>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	2b04      	cmp	r3, #4
 8004ab4:	d80c      	bhi.n	8004ad0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f000 fa36 	bl	8004f28 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ac8:	687a      	ldr	r2, [r7, #4]
 8004aca:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004acc:	605a      	str	r2, [r3, #4]
 8004ace:	e008      	b.n	8004ae2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2201      	movs	r2, #1
 8004aec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2200      	movs	r2, #0
 8004af4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004af8:	2300      	movs	r3, #0
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	3710      	adds	r7, #16
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}
 8004b02:	bf00      	nop
 8004b04:	40020407 	.word	0x40020407
 8004b08:	bffdfff8 	.word	0xbffdfff8
 8004b0c:	cccccccd 	.word	0xcccccccd
 8004b10:	40020000 	.word	0x40020000
 8004b14:	bffdfbf8 	.word	0xbffdfbf8
 8004b18:	40020400 	.word	0x40020400

08004b1c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b086      	sub	sp, #24
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	60f8      	str	r0, [r7, #12]
 8004b24:	60b9      	str	r1, [r7, #8]
 8004b26:	607a      	str	r2, [r7, #4]
 8004b28:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d101      	bne.n	8004b3c <HAL_DMA_Start_IT+0x20>
 8004b38:	2302      	movs	r3, #2
 8004b3a:	e066      	b.n	8004c0a <HAL_DMA_Start_IT+0xee>
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	2201      	movs	r2, #1
 8004b40:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004b4a:	b2db      	uxtb	r3, r3
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d155      	bne.n	8004bfc <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2202      	movs	r2, #2
 8004b54:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	681a      	ldr	r2, [r3, #0]
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f022 0201 	bic.w	r2, r2, #1
 8004b6c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	687a      	ldr	r2, [r7, #4]
 8004b72:	68b9      	ldr	r1, [r7, #8]
 8004b74:	68f8      	ldr	r0, [r7, #12]
 8004b76:	f000 f95a 	bl	8004e2e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d008      	beq.n	8004b94 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f042 020e 	orr.w	r2, r2, #14
 8004b90:	601a      	str	r2, [r3, #0]
 8004b92:	e00f      	b.n	8004bb4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	681a      	ldr	r2, [r3, #0]
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f022 0204 	bic.w	r2, r2, #4
 8004ba2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f042 020a 	orr.w	r2, r2, #10
 8004bb2:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d007      	beq.n	8004bd2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bcc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004bd0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d007      	beq.n	8004bea <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bde:	681a      	ldr	r2, [r3, #0]
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004be4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004be8:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	681a      	ldr	r2, [r3, #0]
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f042 0201 	orr.w	r2, r2, #1
 8004bf8:	601a      	str	r2, [r3, #0]
 8004bfa:	e005      	b.n	8004c08 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004c04:	2302      	movs	r3, #2
 8004c06:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004c08:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3718      	adds	r7, #24
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}

08004c12 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004c12:	b580      	push	{r7, lr}
 8004c14:	b084      	sub	sp, #16
 8004c16:	af00      	add	r7, sp, #0
 8004c18:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004c24:	b2db      	uxtb	r3, r3
 8004c26:	2b02      	cmp	r3, #2
 8004c28:	d005      	beq.n	8004c36 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2204      	movs	r2, #4
 8004c2e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004c30:	2301      	movs	r3, #1
 8004c32:	73fb      	strb	r3, [r7, #15]
 8004c34:	e047      	b.n	8004cc6 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	681a      	ldr	r2, [r3, #0]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f022 020e 	bic.w	r2, r2, #14
 8004c44:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	681a      	ldr	r2, [r3, #0]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f022 0201 	bic.w	r2, r2, #1
 8004c54:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c5a:	681a      	ldr	r2, [r3, #0]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c60:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004c64:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c6a:	f003 021c 	and.w	r2, r3, #28
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c72:	2101      	movs	r1, #1
 8004c74:	fa01 f202 	lsl.w	r2, r1, r2
 8004c78:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c7e:	687a      	ldr	r2, [r7, #4]
 8004c80:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004c82:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d00c      	beq.n	8004ca6 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c90:	681a      	ldr	r2, [r3, #0]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c96:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004c9a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ca0:	687a      	ldr	r2, [r7, #4]
 8004ca2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004ca4:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2201      	movs	r2, #1
 8004caa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d003      	beq.n	8004cc6 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	4798      	blx	r3
    }
  }
  return status;
 8004cc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	3710      	adds	r7, #16
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}

08004cd0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b084      	sub	sp, #16
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cec:	f003 031c 	and.w	r3, r3, #28
 8004cf0:	2204      	movs	r2, #4
 8004cf2:	409a      	lsls	r2, r3
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	4013      	ands	r3, r2
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d026      	beq.n	8004d4a <HAL_DMA_IRQHandler+0x7a>
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	f003 0304 	and.w	r3, r3, #4
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d021      	beq.n	8004d4a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f003 0320 	and.w	r3, r3, #32
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d107      	bne.n	8004d24 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f022 0204 	bic.w	r2, r2, #4
 8004d22:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d28:	f003 021c 	and.w	r2, r3, #28
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d30:	2104      	movs	r1, #4
 8004d32:	fa01 f202 	lsl.w	r2, r1, r2
 8004d36:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d071      	beq.n	8004e24 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d44:	6878      	ldr	r0, [r7, #4]
 8004d46:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004d48:	e06c      	b.n	8004e24 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d4e:	f003 031c 	and.w	r3, r3, #28
 8004d52:	2202      	movs	r2, #2
 8004d54:	409a      	lsls	r2, r3
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	4013      	ands	r3, r2
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d02e      	beq.n	8004dbc <HAL_DMA_IRQHandler+0xec>
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	f003 0302 	and.w	r3, r3, #2
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d029      	beq.n	8004dbc <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f003 0320 	and.w	r3, r3, #32
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d10b      	bne.n	8004d8e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	681a      	ldr	r2, [r3, #0]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f022 020a 	bic.w	r2, r2, #10
 8004d84:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2201      	movs	r2, #1
 8004d8a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d92:	f003 021c 	and.w	r2, r3, #28
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d9a:	2102      	movs	r1, #2
 8004d9c:	fa01 f202 	lsl.w	r2, r1, r2
 8004da0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2200      	movs	r2, #0
 8004da6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d038      	beq.n	8004e24 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004dba:	e033      	b.n	8004e24 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dc0:	f003 031c 	and.w	r3, r3, #28
 8004dc4:	2208      	movs	r2, #8
 8004dc6:	409a      	lsls	r2, r3
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	4013      	ands	r3, r2
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d02a      	beq.n	8004e26 <HAL_DMA_IRQHandler+0x156>
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	f003 0308 	and.w	r3, r3, #8
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d025      	beq.n	8004e26 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	681a      	ldr	r2, [r3, #0]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f022 020e 	bic.w	r2, r2, #14
 8004de8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dee:	f003 021c 	and.w	r2, r3, #28
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df6:	2101      	movs	r1, #1
 8004df8:	fa01 f202 	lsl.w	r2, r1, r2
 8004dfc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2201      	movs	r2, #1
 8004e02:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2201      	movs	r2, #1
 8004e08:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d004      	beq.n	8004e26 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e20:	6878      	ldr	r0, [r7, #4]
 8004e22:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004e24:	bf00      	nop
 8004e26:	bf00      	nop
}
 8004e28:	3710      	adds	r7, #16
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}

08004e2e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004e2e:	b480      	push	{r7}
 8004e30:	b085      	sub	sp, #20
 8004e32:	af00      	add	r7, sp, #0
 8004e34:	60f8      	str	r0, [r7, #12]
 8004e36:	60b9      	str	r1, [r7, #8]
 8004e38:	607a      	str	r2, [r7, #4]
 8004e3a:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e40:	68fa      	ldr	r2, [r7, #12]
 8004e42:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004e44:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d004      	beq.n	8004e58 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e52:	68fa      	ldr	r2, [r7, #12]
 8004e54:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004e56:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e5c:	f003 021c 	and.w	r2, r3, #28
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e64:	2101      	movs	r1, #1
 8004e66:	fa01 f202 	lsl.w	r2, r1, r2
 8004e6a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	683a      	ldr	r2, [r7, #0]
 8004e72:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	2b10      	cmp	r3, #16
 8004e7a:	d108      	bne.n	8004e8e <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	687a      	ldr	r2, [r7, #4]
 8004e82:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	68ba      	ldr	r2, [r7, #8]
 8004e8a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004e8c:	e007      	b.n	8004e9e <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	68ba      	ldr	r2, [r7, #8]
 8004e94:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	687a      	ldr	r2, [r7, #4]
 8004e9c:	60da      	str	r2, [r3, #12]
}
 8004e9e:	bf00      	nop
 8004ea0:	3714      	adds	r7, #20
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea8:	4770      	bx	lr
	...

08004eac <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b085      	sub	sp, #20
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	461a      	mov	r2, r3
 8004eba:	4b17      	ldr	r3, [pc, #92]	; (8004f18 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d80a      	bhi.n	8004ed6 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ec4:	089b      	lsrs	r3, r3, #2
 8004ec6:	009b      	lsls	r3, r3, #2
 8004ec8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004ecc:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8004ed0:	687a      	ldr	r2, [r7, #4]
 8004ed2:	6493      	str	r3, [r2, #72]	; 0x48
 8004ed4:	e007      	b.n	8004ee6 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eda:	089b      	lsrs	r3, r3, #2
 8004edc:	009a      	lsls	r2, r3, #2
 8004ede:	4b0f      	ldr	r3, [pc, #60]	; (8004f1c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004ee0:	4413      	add	r3, r2
 8004ee2:	687a      	ldr	r2, [r7, #4]
 8004ee4:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	b2db      	uxtb	r3, r3
 8004eec:	3b08      	subs	r3, #8
 8004eee:	4a0c      	ldr	r2, [pc, #48]	; (8004f20 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004ef0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ef4:	091b      	lsrs	r3, r3, #4
 8004ef6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	4a0a      	ldr	r2, [pc, #40]	; (8004f24 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004efc:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	f003 031f 	and.w	r3, r3, #31
 8004f04:	2201      	movs	r2, #1
 8004f06:	409a      	lsls	r2, r3
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004f0c:	bf00      	nop
 8004f0e:	3714      	adds	r7, #20
 8004f10:	46bd      	mov	sp, r7
 8004f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f16:	4770      	bx	lr
 8004f18:	40020407 	.word	0x40020407
 8004f1c:	4002081c 	.word	0x4002081c
 8004f20:	cccccccd 	.word	0xcccccccd
 8004f24:	40020880 	.word	0x40020880

08004f28 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b085      	sub	sp, #20
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	b2db      	uxtb	r3, r3
 8004f36:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004f38:	68fa      	ldr	r2, [r7, #12]
 8004f3a:	4b0b      	ldr	r3, [pc, #44]	; (8004f68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004f3c:	4413      	add	r3, r2
 8004f3e:	009b      	lsls	r3, r3, #2
 8004f40:	461a      	mov	r2, r3
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	4a08      	ldr	r2, [pc, #32]	; (8004f6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004f4a:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	3b01      	subs	r3, #1
 8004f50:	f003 0303 	and.w	r3, r3, #3
 8004f54:	2201      	movs	r2, #1
 8004f56:	409a      	lsls	r2, r3
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004f5c:	bf00      	nop
 8004f5e:	3714      	adds	r7, #20
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr
 8004f68:	1000823f 	.word	0x1000823f
 8004f6c:	40020940 	.word	0x40020940

08004f70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b087      	sub	sp, #28
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
 8004f78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004f7e:	e166      	b.n	800524e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	2101      	movs	r1, #1
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	fa01 f303 	lsl.w	r3, r1, r3
 8004f8c:	4013      	ands	r3, r2
 8004f8e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	f000 8158 	beq.w	8005248 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	f003 0303 	and.w	r3, r3, #3
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d005      	beq.n	8004fb0 <HAL_GPIO_Init+0x40>
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	f003 0303 	and.w	r3, r3, #3
 8004fac:	2b02      	cmp	r3, #2
 8004fae:	d130      	bne.n	8005012 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	005b      	lsls	r3, r3, #1
 8004fba:	2203      	movs	r2, #3
 8004fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8004fc0:	43db      	mvns	r3, r3
 8004fc2:	693a      	ldr	r2, [r7, #16]
 8004fc4:	4013      	ands	r3, r2
 8004fc6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	68da      	ldr	r2, [r3, #12]
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	005b      	lsls	r3, r3, #1
 8004fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8004fd4:	693a      	ldr	r2, [r7, #16]
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	693a      	ldr	r2, [r7, #16]
 8004fde:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	fa02 f303 	lsl.w	r3, r2, r3
 8004fee:	43db      	mvns	r3, r3
 8004ff0:	693a      	ldr	r2, [r7, #16]
 8004ff2:	4013      	ands	r3, r2
 8004ff4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	091b      	lsrs	r3, r3, #4
 8004ffc:	f003 0201 	and.w	r2, r3, #1
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	fa02 f303 	lsl.w	r3, r2, r3
 8005006:	693a      	ldr	r2, [r7, #16]
 8005008:	4313      	orrs	r3, r2
 800500a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	693a      	ldr	r2, [r7, #16]
 8005010:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	f003 0303 	and.w	r3, r3, #3
 800501a:	2b03      	cmp	r3, #3
 800501c:	d017      	beq.n	800504e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	68db      	ldr	r3, [r3, #12]
 8005022:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	005b      	lsls	r3, r3, #1
 8005028:	2203      	movs	r2, #3
 800502a:	fa02 f303 	lsl.w	r3, r2, r3
 800502e:	43db      	mvns	r3, r3
 8005030:	693a      	ldr	r2, [r7, #16]
 8005032:	4013      	ands	r3, r2
 8005034:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	689a      	ldr	r2, [r3, #8]
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	005b      	lsls	r3, r3, #1
 800503e:	fa02 f303 	lsl.w	r3, r2, r3
 8005042:	693a      	ldr	r2, [r7, #16]
 8005044:	4313      	orrs	r3, r2
 8005046:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	693a      	ldr	r2, [r7, #16]
 800504c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	f003 0303 	and.w	r3, r3, #3
 8005056:	2b02      	cmp	r3, #2
 8005058:	d123      	bne.n	80050a2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	08da      	lsrs	r2, r3, #3
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	3208      	adds	r2, #8
 8005062:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005066:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	f003 0307 	and.w	r3, r3, #7
 800506e:	009b      	lsls	r3, r3, #2
 8005070:	220f      	movs	r2, #15
 8005072:	fa02 f303 	lsl.w	r3, r2, r3
 8005076:	43db      	mvns	r3, r3
 8005078:	693a      	ldr	r2, [r7, #16]
 800507a:	4013      	ands	r3, r2
 800507c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	691a      	ldr	r2, [r3, #16]
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	f003 0307 	and.w	r3, r3, #7
 8005088:	009b      	lsls	r3, r3, #2
 800508a:	fa02 f303 	lsl.w	r3, r2, r3
 800508e:	693a      	ldr	r2, [r7, #16]
 8005090:	4313      	orrs	r3, r2
 8005092:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	08da      	lsrs	r2, r3, #3
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	3208      	adds	r2, #8
 800509c:	6939      	ldr	r1, [r7, #16]
 800509e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	005b      	lsls	r3, r3, #1
 80050ac:	2203      	movs	r2, #3
 80050ae:	fa02 f303 	lsl.w	r3, r2, r3
 80050b2:	43db      	mvns	r3, r3
 80050b4:	693a      	ldr	r2, [r7, #16]
 80050b6:	4013      	ands	r3, r2
 80050b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	f003 0203 	and.w	r2, r3, #3
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	005b      	lsls	r3, r3, #1
 80050c6:	fa02 f303 	lsl.w	r3, r2, r3
 80050ca:	693a      	ldr	r2, [r7, #16]
 80050cc:	4313      	orrs	r3, r2
 80050ce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	693a      	ldr	r2, [r7, #16]
 80050d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80050de:	2b00      	cmp	r3, #0
 80050e0:	f000 80b2 	beq.w	8005248 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80050e4:	4b61      	ldr	r3, [pc, #388]	; (800526c <HAL_GPIO_Init+0x2fc>)
 80050e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050e8:	4a60      	ldr	r2, [pc, #384]	; (800526c <HAL_GPIO_Init+0x2fc>)
 80050ea:	f043 0301 	orr.w	r3, r3, #1
 80050ee:	6613      	str	r3, [r2, #96]	; 0x60
 80050f0:	4b5e      	ldr	r3, [pc, #376]	; (800526c <HAL_GPIO_Init+0x2fc>)
 80050f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050f4:	f003 0301 	and.w	r3, r3, #1
 80050f8:	60bb      	str	r3, [r7, #8]
 80050fa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80050fc:	4a5c      	ldr	r2, [pc, #368]	; (8005270 <HAL_GPIO_Init+0x300>)
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	089b      	lsrs	r3, r3, #2
 8005102:	3302      	adds	r3, #2
 8005104:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005108:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	f003 0303 	and.w	r3, r3, #3
 8005110:	009b      	lsls	r3, r3, #2
 8005112:	220f      	movs	r2, #15
 8005114:	fa02 f303 	lsl.w	r3, r2, r3
 8005118:	43db      	mvns	r3, r3
 800511a:	693a      	ldr	r2, [r7, #16]
 800511c:	4013      	ands	r3, r2
 800511e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005126:	d02b      	beq.n	8005180 <HAL_GPIO_Init+0x210>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	4a52      	ldr	r2, [pc, #328]	; (8005274 <HAL_GPIO_Init+0x304>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d025      	beq.n	800517c <HAL_GPIO_Init+0x20c>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	4a51      	ldr	r2, [pc, #324]	; (8005278 <HAL_GPIO_Init+0x308>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d01f      	beq.n	8005178 <HAL_GPIO_Init+0x208>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	4a50      	ldr	r2, [pc, #320]	; (800527c <HAL_GPIO_Init+0x30c>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d019      	beq.n	8005174 <HAL_GPIO_Init+0x204>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	4a4f      	ldr	r2, [pc, #316]	; (8005280 <HAL_GPIO_Init+0x310>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d013      	beq.n	8005170 <HAL_GPIO_Init+0x200>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	4a4e      	ldr	r2, [pc, #312]	; (8005284 <HAL_GPIO_Init+0x314>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d00d      	beq.n	800516c <HAL_GPIO_Init+0x1fc>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	4a4d      	ldr	r2, [pc, #308]	; (8005288 <HAL_GPIO_Init+0x318>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d007      	beq.n	8005168 <HAL_GPIO_Init+0x1f8>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	4a4c      	ldr	r2, [pc, #304]	; (800528c <HAL_GPIO_Init+0x31c>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d101      	bne.n	8005164 <HAL_GPIO_Init+0x1f4>
 8005160:	2307      	movs	r3, #7
 8005162:	e00e      	b.n	8005182 <HAL_GPIO_Init+0x212>
 8005164:	2308      	movs	r3, #8
 8005166:	e00c      	b.n	8005182 <HAL_GPIO_Init+0x212>
 8005168:	2306      	movs	r3, #6
 800516a:	e00a      	b.n	8005182 <HAL_GPIO_Init+0x212>
 800516c:	2305      	movs	r3, #5
 800516e:	e008      	b.n	8005182 <HAL_GPIO_Init+0x212>
 8005170:	2304      	movs	r3, #4
 8005172:	e006      	b.n	8005182 <HAL_GPIO_Init+0x212>
 8005174:	2303      	movs	r3, #3
 8005176:	e004      	b.n	8005182 <HAL_GPIO_Init+0x212>
 8005178:	2302      	movs	r3, #2
 800517a:	e002      	b.n	8005182 <HAL_GPIO_Init+0x212>
 800517c:	2301      	movs	r3, #1
 800517e:	e000      	b.n	8005182 <HAL_GPIO_Init+0x212>
 8005180:	2300      	movs	r3, #0
 8005182:	697a      	ldr	r2, [r7, #20]
 8005184:	f002 0203 	and.w	r2, r2, #3
 8005188:	0092      	lsls	r2, r2, #2
 800518a:	4093      	lsls	r3, r2
 800518c:	693a      	ldr	r2, [r7, #16]
 800518e:	4313      	orrs	r3, r2
 8005190:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005192:	4937      	ldr	r1, [pc, #220]	; (8005270 <HAL_GPIO_Init+0x300>)
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	089b      	lsrs	r3, r3, #2
 8005198:	3302      	adds	r3, #2
 800519a:	693a      	ldr	r2, [r7, #16]
 800519c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80051a0:	4b3b      	ldr	r3, [pc, #236]	; (8005290 <HAL_GPIO_Init+0x320>)
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	43db      	mvns	r3, r3
 80051aa:	693a      	ldr	r2, [r7, #16]
 80051ac:	4013      	ands	r3, r2
 80051ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d003      	beq.n	80051c4 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80051bc:	693a      	ldr	r2, [r7, #16]
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	4313      	orrs	r3, r2
 80051c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80051c4:	4a32      	ldr	r2, [pc, #200]	; (8005290 <HAL_GPIO_Init+0x320>)
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80051ca:	4b31      	ldr	r3, [pc, #196]	; (8005290 <HAL_GPIO_Init+0x320>)
 80051cc:	68db      	ldr	r3, [r3, #12]
 80051ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	43db      	mvns	r3, r3
 80051d4:	693a      	ldr	r2, [r7, #16]
 80051d6:	4013      	ands	r3, r2
 80051d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d003      	beq.n	80051ee <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80051e6:	693a      	ldr	r2, [r7, #16]
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	4313      	orrs	r3, r2
 80051ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80051ee:	4a28      	ldr	r2, [pc, #160]	; (8005290 <HAL_GPIO_Init+0x320>)
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80051f4:	4b26      	ldr	r3, [pc, #152]	; (8005290 <HAL_GPIO_Init+0x320>)
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	43db      	mvns	r3, r3
 80051fe:	693a      	ldr	r2, [r7, #16]
 8005200:	4013      	ands	r3, r2
 8005202:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800520c:	2b00      	cmp	r3, #0
 800520e:	d003      	beq.n	8005218 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8005210:	693a      	ldr	r2, [r7, #16]
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	4313      	orrs	r3, r2
 8005216:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005218:	4a1d      	ldr	r2, [pc, #116]	; (8005290 <HAL_GPIO_Init+0x320>)
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800521e:	4b1c      	ldr	r3, [pc, #112]	; (8005290 <HAL_GPIO_Init+0x320>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	43db      	mvns	r3, r3
 8005228:	693a      	ldr	r2, [r7, #16]
 800522a:	4013      	ands	r3, r2
 800522c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005236:	2b00      	cmp	r3, #0
 8005238:	d003      	beq.n	8005242 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800523a:	693a      	ldr	r2, [r7, #16]
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	4313      	orrs	r3, r2
 8005240:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005242:	4a13      	ldr	r2, [pc, #76]	; (8005290 <HAL_GPIO_Init+0x320>)
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	3301      	adds	r3, #1
 800524c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	681a      	ldr	r2, [r3, #0]
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	fa22 f303 	lsr.w	r3, r2, r3
 8005258:	2b00      	cmp	r3, #0
 800525a:	f47f ae91 	bne.w	8004f80 <HAL_GPIO_Init+0x10>
  }
}
 800525e:	bf00      	nop
 8005260:	bf00      	nop
 8005262:	371c      	adds	r7, #28
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr
 800526c:	40021000 	.word	0x40021000
 8005270:	40010000 	.word	0x40010000
 8005274:	48000400 	.word	0x48000400
 8005278:	48000800 	.word	0x48000800
 800527c:	48000c00 	.word	0x48000c00
 8005280:	48001000 	.word	0x48001000
 8005284:	48001400 	.word	0x48001400
 8005288:	48001800 	.word	0x48001800
 800528c:	48001c00 	.word	0x48001c00
 8005290:	40010400 	.word	0x40010400

08005294 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005294:	b480      	push	{r7}
 8005296:	b085      	sub	sp, #20
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
 800529c:	460b      	mov	r3, r1
 800529e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	691a      	ldr	r2, [r3, #16]
 80052a4:	887b      	ldrh	r3, [r7, #2]
 80052a6:	4013      	ands	r3, r2
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d002      	beq.n	80052b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80052ac:	2301      	movs	r3, #1
 80052ae:	73fb      	strb	r3, [r7, #15]
 80052b0:	e001      	b.n	80052b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80052b2:	2300      	movs	r3, #0
 80052b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80052b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	3714      	adds	r7, #20
 80052bc:	46bd      	mov	sp, r7
 80052be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c2:	4770      	bx	lr

080052c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b083      	sub	sp, #12
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
 80052cc:	460b      	mov	r3, r1
 80052ce:	807b      	strh	r3, [r7, #2]
 80052d0:	4613      	mov	r3, r2
 80052d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80052d4:	787b      	ldrb	r3, [r7, #1]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d003      	beq.n	80052e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80052da:	887a      	ldrh	r2, [r7, #2]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80052e0:	e002      	b.n	80052e8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80052e2:	887a      	ldrh	r2, [r7, #2]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80052e8:	bf00      	nop
 80052ea:	370c      	adds	r7, #12
 80052ec:	46bd      	mov	sp, r7
 80052ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f2:	4770      	bx	lr

080052f4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b082      	sub	sp, #8
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	4603      	mov	r3, r0
 80052fc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80052fe:	4b08      	ldr	r3, [pc, #32]	; (8005320 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005300:	695a      	ldr	r2, [r3, #20]
 8005302:	88fb      	ldrh	r3, [r7, #6]
 8005304:	4013      	ands	r3, r2
 8005306:	2b00      	cmp	r3, #0
 8005308:	d006      	beq.n	8005318 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800530a:	4a05      	ldr	r2, [pc, #20]	; (8005320 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800530c:	88fb      	ldrh	r3, [r7, #6]
 800530e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005310:	88fb      	ldrh	r3, [r7, #6]
 8005312:	4618      	mov	r0, r3
 8005314:	f7fc fab0 	bl	8001878 <HAL_GPIO_EXTI_Callback>
  }
}
 8005318:	bf00      	nop
 800531a:	3708      	adds	r7, #8
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}
 8005320:	40010400 	.word	0x40010400

08005324 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005324:	b480      	push	{r7}
 8005326:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005328:	4b0d      	ldr	r3, [pc, #52]	; (8005360 <HAL_PWREx_GetVoltageRange+0x3c>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005330:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005334:	d102      	bne.n	800533c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8005336:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800533a:	e00b      	b.n	8005354 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 800533c:	4b08      	ldr	r3, [pc, #32]	; (8005360 <HAL_PWREx_GetVoltageRange+0x3c>)
 800533e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005342:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005346:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800534a:	d102      	bne.n	8005352 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 800534c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005350:	e000      	b.n	8005354 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8005352:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8005354:	4618      	mov	r0, r3
 8005356:	46bd      	mov	sp, r7
 8005358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535c:	4770      	bx	lr
 800535e:	bf00      	nop
 8005360:	40007000 	.word	0x40007000

08005364 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b088      	sub	sp, #32
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d102      	bne.n	8005378 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005372:	2301      	movs	r3, #1
 8005374:	f000 bc08 	b.w	8005b88 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005378:	4b96      	ldr	r3, [pc, #600]	; (80055d4 <HAL_RCC_OscConfig+0x270>)
 800537a:	689b      	ldr	r3, [r3, #8]
 800537c:	f003 030c 	and.w	r3, r3, #12
 8005380:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005382:	4b94      	ldr	r3, [pc, #592]	; (80055d4 <HAL_RCC_OscConfig+0x270>)
 8005384:	68db      	ldr	r3, [r3, #12]
 8005386:	f003 0303 	and.w	r3, r3, #3
 800538a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f003 0310 	and.w	r3, r3, #16
 8005394:	2b00      	cmp	r3, #0
 8005396:	f000 80e4 	beq.w	8005562 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800539a:	69bb      	ldr	r3, [r7, #24]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d007      	beq.n	80053b0 <HAL_RCC_OscConfig+0x4c>
 80053a0:	69bb      	ldr	r3, [r7, #24]
 80053a2:	2b0c      	cmp	r3, #12
 80053a4:	f040 808b 	bne.w	80054be <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	2b01      	cmp	r3, #1
 80053ac:	f040 8087 	bne.w	80054be <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80053b0:	4b88      	ldr	r3, [pc, #544]	; (80055d4 <HAL_RCC_OscConfig+0x270>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f003 0302 	and.w	r3, r3, #2
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d005      	beq.n	80053c8 <HAL_RCC_OscConfig+0x64>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	699b      	ldr	r3, [r3, #24]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d101      	bne.n	80053c8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80053c4:	2301      	movs	r3, #1
 80053c6:	e3df      	b.n	8005b88 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6a1a      	ldr	r2, [r3, #32]
 80053cc:	4b81      	ldr	r3, [pc, #516]	; (80055d4 <HAL_RCC_OscConfig+0x270>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f003 0308 	and.w	r3, r3, #8
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d004      	beq.n	80053e2 <HAL_RCC_OscConfig+0x7e>
 80053d8:	4b7e      	ldr	r3, [pc, #504]	; (80055d4 <HAL_RCC_OscConfig+0x270>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80053e0:	e005      	b.n	80053ee <HAL_RCC_OscConfig+0x8a>
 80053e2:	4b7c      	ldr	r3, [pc, #496]	; (80055d4 <HAL_RCC_OscConfig+0x270>)
 80053e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80053e8:	091b      	lsrs	r3, r3, #4
 80053ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d223      	bcs.n	800543a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6a1b      	ldr	r3, [r3, #32]
 80053f6:	4618      	mov	r0, r3
 80053f8:	f000 fdcc 	bl	8005f94 <RCC_SetFlashLatencyFromMSIRange>
 80053fc:	4603      	mov	r3, r0
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d001      	beq.n	8005406 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8005402:	2301      	movs	r3, #1
 8005404:	e3c0      	b.n	8005b88 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005406:	4b73      	ldr	r3, [pc, #460]	; (80055d4 <HAL_RCC_OscConfig+0x270>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a72      	ldr	r2, [pc, #456]	; (80055d4 <HAL_RCC_OscConfig+0x270>)
 800540c:	f043 0308 	orr.w	r3, r3, #8
 8005410:	6013      	str	r3, [r2, #0]
 8005412:	4b70      	ldr	r3, [pc, #448]	; (80055d4 <HAL_RCC_OscConfig+0x270>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6a1b      	ldr	r3, [r3, #32]
 800541e:	496d      	ldr	r1, [pc, #436]	; (80055d4 <HAL_RCC_OscConfig+0x270>)
 8005420:	4313      	orrs	r3, r2
 8005422:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005424:	4b6b      	ldr	r3, [pc, #428]	; (80055d4 <HAL_RCC_OscConfig+0x270>)
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	69db      	ldr	r3, [r3, #28]
 8005430:	021b      	lsls	r3, r3, #8
 8005432:	4968      	ldr	r1, [pc, #416]	; (80055d4 <HAL_RCC_OscConfig+0x270>)
 8005434:	4313      	orrs	r3, r2
 8005436:	604b      	str	r3, [r1, #4]
 8005438:	e025      	b.n	8005486 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800543a:	4b66      	ldr	r3, [pc, #408]	; (80055d4 <HAL_RCC_OscConfig+0x270>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a65      	ldr	r2, [pc, #404]	; (80055d4 <HAL_RCC_OscConfig+0x270>)
 8005440:	f043 0308 	orr.w	r3, r3, #8
 8005444:	6013      	str	r3, [r2, #0]
 8005446:	4b63      	ldr	r3, [pc, #396]	; (80055d4 <HAL_RCC_OscConfig+0x270>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6a1b      	ldr	r3, [r3, #32]
 8005452:	4960      	ldr	r1, [pc, #384]	; (80055d4 <HAL_RCC_OscConfig+0x270>)
 8005454:	4313      	orrs	r3, r2
 8005456:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005458:	4b5e      	ldr	r3, [pc, #376]	; (80055d4 <HAL_RCC_OscConfig+0x270>)
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	69db      	ldr	r3, [r3, #28]
 8005464:	021b      	lsls	r3, r3, #8
 8005466:	495b      	ldr	r1, [pc, #364]	; (80055d4 <HAL_RCC_OscConfig+0x270>)
 8005468:	4313      	orrs	r3, r2
 800546a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800546c:	69bb      	ldr	r3, [r7, #24]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d109      	bne.n	8005486 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6a1b      	ldr	r3, [r3, #32]
 8005476:	4618      	mov	r0, r3
 8005478:	f000 fd8c 	bl	8005f94 <RCC_SetFlashLatencyFromMSIRange>
 800547c:	4603      	mov	r3, r0
 800547e:	2b00      	cmp	r3, #0
 8005480:	d001      	beq.n	8005486 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8005482:	2301      	movs	r3, #1
 8005484:	e380      	b.n	8005b88 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005486:	f000 fcc1 	bl	8005e0c <HAL_RCC_GetSysClockFreq>
 800548a:	4602      	mov	r2, r0
 800548c:	4b51      	ldr	r3, [pc, #324]	; (80055d4 <HAL_RCC_OscConfig+0x270>)
 800548e:	689b      	ldr	r3, [r3, #8]
 8005490:	091b      	lsrs	r3, r3, #4
 8005492:	f003 030f 	and.w	r3, r3, #15
 8005496:	4950      	ldr	r1, [pc, #320]	; (80055d8 <HAL_RCC_OscConfig+0x274>)
 8005498:	5ccb      	ldrb	r3, [r1, r3]
 800549a:	f003 031f 	and.w	r3, r3, #31
 800549e:	fa22 f303 	lsr.w	r3, r2, r3
 80054a2:	4a4e      	ldr	r2, [pc, #312]	; (80055dc <HAL_RCC_OscConfig+0x278>)
 80054a4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80054a6:	4b4e      	ldr	r3, [pc, #312]	; (80055e0 <HAL_RCC_OscConfig+0x27c>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4618      	mov	r0, r3
 80054ac:	f7fe fb9c 	bl	8003be8 <HAL_InitTick>
 80054b0:	4603      	mov	r3, r0
 80054b2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80054b4:	7bfb      	ldrb	r3, [r7, #15]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d052      	beq.n	8005560 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80054ba:	7bfb      	ldrb	r3, [r7, #15]
 80054bc:	e364      	b.n	8005b88 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	699b      	ldr	r3, [r3, #24]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d032      	beq.n	800552c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80054c6:	4b43      	ldr	r3, [pc, #268]	; (80055d4 <HAL_RCC_OscConfig+0x270>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a42      	ldr	r2, [pc, #264]	; (80055d4 <HAL_RCC_OscConfig+0x270>)
 80054cc:	f043 0301 	orr.w	r3, r3, #1
 80054d0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80054d2:	f7fe fbd9 	bl	8003c88 <HAL_GetTick>
 80054d6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80054d8:	e008      	b.n	80054ec <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80054da:	f7fe fbd5 	bl	8003c88 <HAL_GetTick>
 80054de:	4602      	mov	r2, r0
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	1ad3      	subs	r3, r2, r3
 80054e4:	2b02      	cmp	r3, #2
 80054e6:	d901      	bls.n	80054ec <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80054e8:	2303      	movs	r3, #3
 80054ea:	e34d      	b.n	8005b88 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80054ec:	4b39      	ldr	r3, [pc, #228]	; (80055d4 <HAL_RCC_OscConfig+0x270>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f003 0302 	and.w	r3, r3, #2
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d0f0      	beq.n	80054da <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80054f8:	4b36      	ldr	r3, [pc, #216]	; (80055d4 <HAL_RCC_OscConfig+0x270>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a35      	ldr	r2, [pc, #212]	; (80055d4 <HAL_RCC_OscConfig+0x270>)
 80054fe:	f043 0308 	orr.w	r3, r3, #8
 8005502:	6013      	str	r3, [r2, #0]
 8005504:	4b33      	ldr	r3, [pc, #204]	; (80055d4 <HAL_RCC_OscConfig+0x270>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6a1b      	ldr	r3, [r3, #32]
 8005510:	4930      	ldr	r1, [pc, #192]	; (80055d4 <HAL_RCC_OscConfig+0x270>)
 8005512:	4313      	orrs	r3, r2
 8005514:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005516:	4b2f      	ldr	r3, [pc, #188]	; (80055d4 <HAL_RCC_OscConfig+0x270>)
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	69db      	ldr	r3, [r3, #28]
 8005522:	021b      	lsls	r3, r3, #8
 8005524:	492b      	ldr	r1, [pc, #172]	; (80055d4 <HAL_RCC_OscConfig+0x270>)
 8005526:	4313      	orrs	r3, r2
 8005528:	604b      	str	r3, [r1, #4]
 800552a:	e01a      	b.n	8005562 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800552c:	4b29      	ldr	r3, [pc, #164]	; (80055d4 <HAL_RCC_OscConfig+0x270>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a28      	ldr	r2, [pc, #160]	; (80055d4 <HAL_RCC_OscConfig+0x270>)
 8005532:	f023 0301 	bic.w	r3, r3, #1
 8005536:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005538:	f7fe fba6 	bl	8003c88 <HAL_GetTick>
 800553c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800553e:	e008      	b.n	8005552 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005540:	f7fe fba2 	bl	8003c88 <HAL_GetTick>
 8005544:	4602      	mov	r2, r0
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	1ad3      	subs	r3, r2, r3
 800554a:	2b02      	cmp	r3, #2
 800554c:	d901      	bls.n	8005552 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800554e:	2303      	movs	r3, #3
 8005550:	e31a      	b.n	8005b88 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005552:	4b20      	ldr	r3, [pc, #128]	; (80055d4 <HAL_RCC_OscConfig+0x270>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f003 0302 	and.w	r3, r3, #2
 800555a:	2b00      	cmp	r3, #0
 800555c:	d1f0      	bne.n	8005540 <HAL_RCC_OscConfig+0x1dc>
 800555e:	e000      	b.n	8005562 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005560:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f003 0301 	and.w	r3, r3, #1
 800556a:	2b00      	cmp	r3, #0
 800556c:	d073      	beq.n	8005656 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800556e:	69bb      	ldr	r3, [r7, #24]
 8005570:	2b08      	cmp	r3, #8
 8005572:	d005      	beq.n	8005580 <HAL_RCC_OscConfig+0x21c>
 8005574:	69bb      	ldr	r3, [r7, #24]
 8005576:	2b0c      	cmp	r3, #12
 8005578:	d10e      	bne.n	8005598 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	2b03      	cmp	r3, #3
 800557e:	d10b      	bne.n	8005598 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005580:	4b14      	ldr	r3, [pc, #80]	; (80055d4 <HAL_RCC_OscConfig+0x270>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005588:	2b00      	cmp	r3, #0
 800558a:	d063      	beq.n	8005654 <HAL_RCC_OscConfig+0x2f0>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d15f      	bne.n	8005654 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005594:	2301      	movs	r3, #1
 8005596:	e2f7      	b.n	8005b88 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055a0:	d106      	bne.n	80055b0 <HAL_RCC_OscConfig+0x24c>
 80055a2:	4b0c      	ldr	r3, [pc, #48]	; (80055d4 <HAL_RCC_OscConfig+0x270>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a0b      	ldr	r2, [pc, #44]	; (80055d4 <HAL_RCC_OscConfig+0x270>)
 80055a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055ac:	6013      	str	r3, [r2, #0]
 80055ae:	e025      	b.n	80055fc <HAL_RCC_OscConfig+0x298>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80055b8:	d114      	bne.n	80055e4 <HAL_RCC_OscConfig+0x280>
 80055ba:	4b06      	ldr	r3, [pc, #24]	; (80055d4 <HAL_RCC_OscConfig+0x270>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a05      	ldr	r2, [pc, #20]	; (80055d4 <HAL_RCC_OscConfig+0x270>)
 80055c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80055c4:	6013      	str	r3, [r2, #0]
 80055c6:	4b03      	ldr	r3, [pc, #12]	; (80055d4 <HAL_RCC_OscConfig+0x270>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a02      	ldr	r2, [pc, #8]	; (80055d4 <HAL_RCC_OscConfig+0x270>)
 80055cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055d0:	6013      	str	r3, [r2, #0]
 80055d2:	e013      	b.n	80055fc <HAL_RCC_OscConfig+0x298>
 80055d4:	40021000 	.word	0x40021000
 80055d8:	0800e720 	.word	0x0800e720
 80055dc:	20000000 	.word	0x20000000
 80055e0:	20000018 	.word	0x20000018
 80055e4:	4ba0      	ldr	r3, [pc, #640]	; (8005868 <HAL_RCC_OscConfig+0x504>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a9f      	ldr	r2, [pc, #636]	; (8005868 <HAL_RCC_OscConfig+0x504>)
 80055ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055ee:	6013      	str	r3, [r2, #0]
 80055f0:	4b9d      	ldr	r3, [pc, #628]	; (8005868 <HAL_RCC_OscConfig+0x504>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a9c      	ldr	r2, [pc, #624]	; (8005868 <HAL_RCC_OscConfig+0x504>)
 80055f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80055fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d013      	beq.n	800562c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005604:	f7fe fb40 	bl	8003c88 <HAL_GetTick>
 8005608:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800560a:	e008      	b.n	800561e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800560c:	f7fe fb3c 	bl	8003c88 <HAL_GetTick>
 8005610:	4602      	mov	r2, r0
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	1ad3      	subs	r3, r2, r3
 8005616:	2b64      	cmp	r3, #100	; 0x64
 8005618:	d901      	bls.n	800561e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800561a:	2303      	movs	r3, #3
 800561c:	e2b4      	b.n	8005b88 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800561e:	4b92      	ldr	r3, [pc, #584]	; (8005868 <HAL_RCC_OscConfig+0x504>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005626:	2b00      	cmp	r3, #0
 8005628:	d0f0      	beq.n	800560c <HAL_RCC_OscConfig+0x2a8>
 800562a:	e014      	b.n	8005656 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800562c:	f7fe fb2c 	bl	8003c88 <HAL_GetTick>
 8005630:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005632:	e008      	b.n	8005646 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005634:	f7fe fb28 	bl	8003c88 <HAL_GetTick>
 8005638:	4602      	mov	r2, r0
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	1ad3      	subs	r3, r2, r3
 800563e:	2b64      	cmp	r3, #100	; 0x64
 8005640:	d901      	bls.n	8005646 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005642:	2303      	movs	r3, #3
 8005644:	e2a0      	b.n	8005b88 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005646:	4b88      	ldr	r3, [pc, #544]	; (8005868 <HAL_RCC_OscConfig+0x504>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800564e:	2b00      	cmp	r3, #0
 8005650:	d1f0      	bne.n	8005634 <HAL_RCC_OscConfig+0x2d0>
 8005652:	e000      	b.n	8005656 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005654:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f003 0302 	and.w	r3, r3, #2
 800565e:	2b00      	cmp	r3, #0
 8005660:	d060      	beq.n	8005724 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005662:	69bb      	ldr	r3, [r7, #24]
 8005664:	2b04      	cmp	r3, #4
 8005666:	d005      	beq.n	8005674 <HAL_RCC_OscConfig+0x310>
 8005668:	69bb      	ldr	r3, [r7, #24]
 800566a:	2b0c      	cmp	r3, #12
 800566c:	d119      	bne.n	80056a2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	2b02      	cmp	r3, #2
 8005672:	d116      	bne.n	80056a2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005674:	4b7c      	ldr	r3, [pc, #496]	; (8005868 <HAL_RCC_OscConfig+0x504>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800567c:	2b00      	cmp	r3, #0
 800567e:	d005      	beq.n	800568c <HAL_RCC_OscConfig+0x328>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	68db      	ldr	r3, [r3, #12]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d101      	bne.n	800568c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005688:	2301      	movs	r3, #1
 800568a:	e27d      	b.n	8005b88 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800568c:	4b76      	ldr	r3, [pc, #472]	; (8005868 <HAL_RCC_OscConfig+0x504>)
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	691b      	ldr	r3, [r3, #16]
 8005698:	061b      	lsls	r3, r3, #24
 800569a:	4973      	ldr	r1, [pc, #460]	; (8005868 <HAL_RCC_OscConfig+0x504>)
 800569c:	4313      	orrs	r3, r2
 800569e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80056a0:	e040      	b.n	8005724 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	68db      	ldr	r3, [r3, #12]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d023      	beq.n	80056f2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80056aa:	4b6f      	ldr	r3, [pc, #444]	; (8005868 <HAL_RCC_OscConfig+0x504>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a6e      	ldr	r2, [pc, #440]	; (8005868 <HAL_RCC_OscConfig+0x504>)
 80056b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056b6:	f7fe fae7 	bl	8003c88 <HAL_GetTick>
 80056ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80056bc:	e008      	b.n	80056d0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80056be:	f7fe fae3 	bl	8003c88 <HAL_GetTick>
 80056c2:	4602      	mov	r2, r0
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	1ad3      	subs	r3, r2, r3
 80056c8:	2b02      	cmp	r3, #2
 80056ca:	d901      	bls.n	80056d0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80056cc:	2303      	movs	r3, #3
 80056ce:	e25b      	b.n	8005b88 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80056d0:	4b65      	ldr	r3, [pc, #404]	; (8005868 <HAL_RCC_OscConfig+0x504>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d0f0      	beq.n	80056be <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056dc:	4b62      	ldr	r3, [pc, #392]	; (8005868 <HAL_RCC_OscConfig+0x504>)
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	691b      	ldr	r3, [r3, #16]
 80056e8:	061b      	lsls	r3, r3, #24
 80056ea:	495f      	ldr	r1, [pc, #380]	; (8005868 <HAL_RCC_OscConfig+0x504>)
 80056ec:	4313      	orrs	r3, r2
 80056ee:	604b      	str	r3, [r1, #4]
 80056f0:	e018      	b.n	8005724 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80056f2:	4b5d      	ldr	r3, [pc, #372]	; (8005868 <HAL_RCC_OscConfig+0x504>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a5c      	ldr	r2, [pc, #368]	; (8005868 <HAL_RCC_OscConfig+0x504>)
 80056f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80056fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056fe:	f7fe fac3 	bl	8003c88 <HAL_GetTick>
 8005702:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005704:	e008      	b.n	8005718 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005706:	f7fe fabf 	bl	8003c88 <HAL_GetTick>
 800570a:	4602      	mov	r2, r0
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	1ad3      	subs	r3, r2, r3
 8005710:	2b02      	cmp	r3, #2
 8005712:	d901      	bls.n	8005718 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005714:	2303      	movs	r3, #3
 8005716:	e237      	b.n	8005b88 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005718:	4b53      	ldr	r3, [pc, #332]	; (8005868 <HAL_RCC_OscConfig+0x504>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005720:	2b00      	cmp	r3, #0
 8005722:	d1f0      	bne.n	8005706 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f003 0308 	and.w	r3, r3, #8
 800572c:	2b00      	cmp	r3, #0
 800572e:	d03c      	beq.n	80057aa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	695b      	ldr	r3, [r3, #20]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d01c      	beq.n	8005772 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005738:	4b4b      	ldr	r3, [pc, #300]	; (8005868 <HAL_RCC_OscConfig+0x504>)
 800573a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800573e:	4a4a      	ldr	r2, [pc, #296]	; (8005868 <HAL_RCC_OscConfig+0x504>)
 8005740:	f043 0301 	orr.w	r3, r3, #1
 8005744:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005748:	f7fe fa9e 	bl	8003c88 <HAL_GetTick>
 800574c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800574e:	e008      	b.n	8005762 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005750:	f7fe fa9a 	bl	8003c88 <HAL_GetTick>
 8005754:	4602      	mov	r2, r0
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	1ad3      	subs	r3, r2, r3
 800575a:	2b02      	cmp	r3, #2
 800575c:	d901      	bls.n	8005762 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800575e:	2303      	movs	r3, #3
 8005760:	e212      	b.n	8005b88 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005762:	4b41      	ldr	r3, [pc, #260]	; (8005868 <HAL_RCC_OscConfig+0x504>)
 8005764:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005768:	f003 0302 	and.w	r3, r3, #2
 800576c:	2b00      	cmp	r3, #0
 800576e:	d0ef      	beq.n	8005750 <HAL_RCC_OscConfig+0x3ec>
 8005770:	e01b      	b.n	80057aa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005772:	4b3d      	ldr	r3, [pc, #244]	; (8005868 <HAL_RCC_OscConfig+0x504>)
 8005774:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005778:	4a3b      	ldr	r2, [pc, #236]	; (8005868 <HAL_RCC_OscConfig+0x504>)
 800577a:	f023 0301 	bic.w	r3, r3, #1
 800577e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005782:	f7fe fa81 	bl	8003c88 <HAL_GetTick>
 8005786:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005788:	e008      	b.n	800579c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800578a:	f7fe fa7d 	bl	8003c88 <HAL_GetTick>
 800578e:	4602      	mov	r2, r0
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	1ad3      	subs	r3, r2, r3
 8005794:	2b02      	cmp	r3, #2
 8005796:	d901      	bls.n	800579c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005798:	2303      	movs	r3, #3
 800579a:	e1f5      	b.n	8005b88 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800579c:	4b32      	ldr	r3, [pc, #200]	; (8005868 <HAL_RCC_OscConfig+0x504>)
 800579e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057a2:	f003 0302 	and.w	r3, r3, #2
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d1ef      	bne.n	800578a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f003 0304 	and.w	r3, r3, #4
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	f000 80a6 	beq.w	8005904 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80057b8:	2300      	movs	r3, #0
 80057ba:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80057bc:	4b2a      	ldr	r3, [pc, #168]	; (8005868 <HAL_RCC_OscConfig+0x504>)
 80057be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d10d      	bne.n	80057e4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80057c8:	4b27      	ldr	r3, [pc, #156]	; (8005868 <HAL_RCC_OscConfig+0x504>)
 80057ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057cc:	4a26      	ldr	r2, [pc, #152]	; (8005868 <HAL_RCC_OscConfig+0x504>)
 80057ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057d2:	6593      	str	r3, [r2, #88]	; 0x58
 80057d4:	4b24      	ldr	r3, [pc, #144]	; (8005868 <HAL_RCC_OscConfig+0x504>)
 80057d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057dc:	60bb      	str	r3, [r7, #8]
 80057de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80057e0:	2301      	movs	r3, #1
 80057e2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80057e4:	4b21      	ldr	r3, [pc, #132]	; (800586c <HAL_RCC_OscConfig+0x508>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d118      	bne.n	8005822 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80057f0:	4b1e      	ldr	r3, [pc, #120]	; (800586c <HAL_RCC_OscConfig+0x508>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a1d      	ldr	r2, [pc, #116]	; (800586c <HAL_RCC_OscConfig+0x508>)
 80057f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057fa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80057fc:	f7fe fa44 	bl	8003c88 <HAL_GetTick>
 8005800:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005802:	e008      	b.n	8005816 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005804:	f7fe fa40 	bl	8003c88 <HAL_GetTick>
 8005808:	4602      	mov	r2, r0
 800580a:	693b      	ldr	r3, [r7, #16]
 800580c:	1ad3      	subs	r3, r2, r3
 800580e:	2b02      	cmp	r3, #2
 8005810:	d901      	bls.n	8005816 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005812:	2303      	movs	r3, #3
 8005814:	e1b8      	b.n	8005b88 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005816:	4b15      	ldr	r3, [pc, #84]	; (800586c <HAL_RCC_OscConfig+0x508>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800581e:	2b00      	cmp	r3, #0
 8005820:	d0f0      	beq.n	8005804 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	689b      	ldr	r3, [r3, #8]
 8005826:	2b01      	cmp	r3, #1
 8005828:	d108      	bne.n	800583c <HAL_RCC_OscConfig+0x4d8>
 800582a:	4b0f      	ldr	r3, [pc, #60]	; (8005868 <HAL_RCC_OscConfig+0x504>)
 800582c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005830:	4a0d      	ldr	r2, [pc, #52]	; (8005868 <HAL_RCC_OscConfig+0x504>)
 8005832:	f043 0301 	orr.w	r3, r3, #1
 8005836:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800583a:	e029      	b.n	8005890 <HAL_RCC_OscConfig+0x52c>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	689b      	ldr	r3, [r3, #8]
 8005840:	2b05      	cmp	r3, #5
 8005842:	d115      	bne.n	8005870 <HAL_RCC_OscConfig+0x50c>
 8005844:	4b08      	ldr	r3, [pc, #32]	; (8005868 <HAL_RCC_OscConfig+0x504>)
 8005846:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800584a:	4a07      	ldr	r2, [pc, #28]	; (8005868 <HAL_RCC_OscConfig+0x504>)
 800584c:	f043 0304 	orr.w	r3, r3, #4
 8005850:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005854:	4b04      	ldr	r3, [pc, #16]	; (8005868 <HAL_RCC_OscConfig+0x504>)
 8005856:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800585a:	4a03      	ldr	r2, [pc, #12]	; (8005868 <HAL_RCC_OscConfig+0x504>)
 800585c:	f043 0301 	orr.w	r3, r3, #1
 8005860:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005864:	e014      	b.n	8005890 <HAL_RCC_OscConfig+0x52c>
 8005866:	bf00      	nop
 8005868:	40021000 	.word	0x40021000
 800586c:	40007000 	.word	0x40007000
 8005870:	4b9d      	ldr	r3, [pc, #628]	; (8005ae8 <HAL_RCC_OscConfig+0x784>)
 8005872:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005876:	4a9c      	ldr	r2, [pc, #624]	; (8005ae8 <HAL_RCC_OscConfig+0x784>)
 8005878:	f023 0301 	bic.w	r3, r3, #1
 800587c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005880:	4b99      	ldr	r3, [pc, #612]	; (8005ae8 <HAL_RCC_OscConfig+0x784>)
 8005882:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005886:	4a98      	ldr	r2, [pc, #608]	; (8005ae8 <HAL_RCC_OscConfig+0x784>)
 8005888:	f023 0304 	bic.w	r3, r3, #4
 800588c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	689b      	ldr	r3, [r3, #8]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d016      	beq.n	80058c6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005898:	f7fe f9f6 	bl	8003c88 <HAL_GetTick>
 800589c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800589e:	e00a      	b.n	80058b6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058a0:	f7fe f9f2 	bl	8003c88 <HAL_GetTick>
 80058a4:	4602      	mov	r2, r0
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	1ad3      	subs	r3, r2, r3
 80058aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d901      	bls.n	80058b6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80058b2:	2303      	movs	r3, #3
 80058b4:	e168      	b.n	8005b88 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058b6:	4b8c      	ldr	r3, [pc, #560]	; (8005ae8 <HAL_RCC_OscConfig+0x784>)
 80058b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058bc:	f003 0302 	and.w	r3, r3, #2
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d0ed      	beq.n	80058a0 <HAL_RCC_OscConfig+0x53c>
 80058c4:	e015      	b.n	80058f2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058c6:	f7fe f9df 	bl	8003c88 <HAL_GetTick>
 80058ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80058cc:	e00a      	b.n	80058e4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058ce:	f7fe f9db 	bl	8003c88 <HAL_GetTick>
 80058d2:	4602      	mov	r2, r0
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	1ad3      	subs	r3, r2, r3
 80058d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80058dc:	4293      	cmp	r3, r2
 80058de:	d901      	bls.n	80058e4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80058e0:	2303      	movs	r3, #3
 80058e2:	e151      	b.n	8005b88 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80058e4:	4b80      	ldr	r3, [pc, #512]	; (8005ae8 <HAL_RCC_OscConfig+0x784>)
 80058e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058ea:	f003 0302 	and.w	r3, r3, #2
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d1ed      	bne.n	80058ce <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80058f2:	7ffb      	ldrb	r3, [r7, #31]
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	d105      	bne.n	8005904 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80058f8:	4b7b      	ldr	r3, [pc, #492]	; (8005ae8 <HAL_RCC_OscConfig+0x784>)
 80058fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058fc:	4a7a      	ldr	r2, [pc, #488]	; (8005ae8 <HAL_RCC_OscConfig+0x784>)
 80058fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005902:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f003 0320 	and.w	r3, r3, #32
 800590c:	2b00      	cmp	r3, #0
 800590e:	d03c      	beq.n	800598a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005914:	2b00      	cmp	r3, #0
 8005916:	d01c      	beq.n	8005952 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005918:	4b73      	ldr	r3, [pc, #460]	; (8005ae8 <HAL_RCC_OscConfig+0x784>)
 800591a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800591e:	4a72      	ldr	r2, [pc, #456]	; (8005ae8 <HAL_RCC_OscConfig+0x784>)
 8005920:	f043 0301 	orr.w	r3, r3, #1
 8005924:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005928:	f7fe f9ae 	bl	8003c88 <HAL_GetTick>
 800592c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800592e:	e008      	b.n	8005942 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005930:	f7fe f9aa 	bl	8003c88 <HAL_GetTick>
 8005934:	4602      	mov	r2, r0
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	1ad3      	subs	r3, r2, r3
 800593a:	2b02      	cmp	r3, #2
 800593c:	d901      	bls.n	8005942 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800593e:	2303      	movs	r3, #3
 8005940:	e122      	b.n	8005b88 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005942:	4b69      	ldr	r3, [pc, #420]	; (8005ae8 <HAL_RCC_OscConfig+0x784>)
 8005944:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005948:	f003 0302 	and.w	r3, r3, #2
 800594c:	2b00      	cmp	r3, #0
 800594e:	d0ef      	beq.n	8005930 <HAL_RCC_OscConfig+0x5cc>
 8005950:	e01b      	b.n	800598a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005952:	4b65      	ldr	r3, [pc, #404]	; (8005ae8 <HAL_RCC_OscConfig+0x784>)
 8005954:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005958:	4a63      	ldr	r2, [pc, #396]	; (8005ae8 <HAL_RCC_OscConfig+0x784>)
 800595a:	f023 0301 	bic.w	r3, r3, #1
 800595e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005962:	f7fe f991 	bl	8003c88 <HAL_GetTick>
 8005966:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005968:	e008      	b.n	800597c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800596a:	f7fe f98d 	bl	8003c88 <HAL_GetTick>
 800596e:	4602      	mov	r2, r0
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	1ad3      	subs	r3, r2, r3
 8005974:	2b02      	cmp	r3, #2
 8005976:	d901      	bls.n	800597c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005978:	2303      	movs	r3, #3
 800597a:	e105      	b.n	8005b88 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800597c:	4b5a      	ldr	r3, [pc, #360]	; (8005ae8 <HAL_RCC_OscConfig+0x784>)
 800597e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005982:	f003 0302 	and.w	r3, r3, #2
 8005986:	2b00      	cmp	r3, #0
 8005988:	d1ef      	bne.n	800596a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800598e:	2b00      	cmp	r3, #0
 8005990:	f000 80f9 	beq.w	8005b86 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005998:	2b02      	cmp	r3, #2
 800599a:	f040 80cf 	bne.w	8005b3c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800599e:	4b52      	ldr	r3, [pc, #328]	; (8005ae8 <HAL_RCC_OscConfig+0x784>)
 80059a0:	68db      	ldr	r3, [r3, #12]
 80059a2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	f003 0203 	and.w	r2, r3, #3
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ae:	429a      	cmp	r2, r3
 80059b0:	d12c      	bne.n	8005a0c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059bc:	3b01      	subs	r3, #1
 80059be:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80059c0:	429a      	cmp	r2, r3
 80059c2:	d123      	bne.n	8005a0c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059ce:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80059d0:	429a      	cmp	r2, r3
 80059d2:	d11b      	bne.n	8005a0c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059de:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80059e0:	429a      	cmp	r2, r3
 80059e2:	d113      	bne.n	8005a0c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059ee:	085b      	lsrs	r3, r3, #1
 80059f0:	3b01      	subs	r3, #1
 80059f2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80059f4:	429a      	cmp	r2, r3
 80059f6:	d109      	bne.n	8005a0c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a02:	085b      	lsrs	r3, r3, #1
 8005a04:	3b01      	subs	r3, #1
 8005a06:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005a08:	429a      	cmp	r2, r3
 8005a0a:	d071      	beq.n	8005af0 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005a0c:	69bb      	ldr	r3, [r7, #24]
 8005a0e:	2b0c      	cmp	r3, #12
 8005a10:	d068      	beq.n	8005ae4 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005a12:	4b35      	ldr	r3, [pc, #212]	; (8005ae8 <HAL_RCC_OscConfig+0x784>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d105      	bne.n	8005a2a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005a1e:	4b32      	ldr	r3, [pc, #200]	; (8005ae8 <HAL_RCC_OscConfig+0x784>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d001      	beq.n	8005a2e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	e0ac      	b.n	8005b88 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005a2e:	4b2e      	ldr	r3, [pc, #184]	; (8005ae8 <HAL_RCC_OscConfig+0x784>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4a2d      	ldr	r2, [pc, #180]	; (8005ae8 <HAL_RCC_OscConfig+0x784>)
 8005a34:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a38:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005a3a:	f7fe f925 	bl	8003c88 <HAL_GetTick>
 8005a3e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a40:	e008      	b.n	8005a54 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a42:	f7fe f921 	bl	8003c88 <HAL_GetTick>
 8005a46:	4602      	mov	r2, r0
 8005a48:	693b      	ldr	r3, [r7, #16]
 8005a4a:	1ad3      	subs	r3, r2, r3
 8005a4c:	2b02      	cmp	r3, #2
 8005a4e:	d901      	bls.n	8005a54 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8005a50:	2303      	movs	r3, #3
 8005a52:	e099      	b.n	8005b88 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a54:	4b24      	ldr	r3, [pc, #144]	; (8005ae8 <HAL_RCC_OscConfig+0x784>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d1f0      	bne.n	8005a42 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005a60:	4b21      	ldr	r3, [pc, #132]	; (8005ae8 <HAL_RCC_OscConfig+0x784>)
 8005a62:	68da      	ldr	r2, [r3, #12]
 8005a64:	4b21      	ldr	r3, [pc, #132]	; (8005aec <HAL_RCC_OscConfig+0x788>)
 8005a66:	4013      	ands	r3, r2
 8005a68:	687a      	ldr	r2, [r7, #4]
 8005a6a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005a6c:	687a      	ldr	r2, [r7, #4]
 8005a6e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005a70:	3a01      	subs	r2, #1
 8005a72:	0112      	lsls	r2, r2, #4
 8005a74:	4311      	orrs	r1, r2
 8005a76:	687a      	ldr	r2, [r7, #4]
 8005a78:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005a7a:	0212      	lsls	r2, r2, #8
 8005a7c:	4311      	orrs	r1, r2
 8005a7e:	687a      	ldr	r2, [r7, #4]
 8005a80:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005a82:	0852      	lsrs	r2, r2, #1
 8005a84:	3a01      	subs	r2, #1
 8005a86:	0552      	lsls	r2, r2, #21
 8005a88:	4311      	orrs	r1, r2
 8005a8a:	687a      	ldr	r2, [r7, #4]
 8005a8c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005a8e:	0852      	lsrs	r2, r2, #1
 8005a90:	3a01      	subs	r2, #1
 8005a92:	0652      	lsls	r2, r2, #25
 8005a94:	4311      	orrs	r1, r2
 8005a96:	687a      	ldr	r2, [r7, #4]
 8005a98:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005a9a:	06d2      	lsls	r2, r2, #27
 8005a9c:	430a      	orrs	r2, r1
 8005a9e:	4912      	ldr	r1, [pc, #72]	; (8005ae8 <HAL_RCC_OscConfig+0x784>)
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005aa4:	4b10      	ldr	r3, [pc, #64]	; (8005ae8 <HAL_RCC_OscConfig+0x784>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a0f      	ldr	r2, [pc, #60]	; (8005ae8 <HAL_RCC_OscConfig+0x784>)
 8005aaa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005aae:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005ab0:	4b0d      	ldr	r3, [pc, #52]	; (8005ae8 <HAL_RCC_OscConfig+0x784>)
 8005ab2:	68db      	ldr	r3, [r3, #12]
 8005ab4:	4a0c      	ldr	r2, [pc, #48]	; (8005ae8 <HAL_RCC_OscConfig+0x784>)
 8005ab6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005aba:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005abc:	f7fe f8e4 	bl	8003c88 <HAL_GetTick>
 8005ac0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ac2:	e008      	b.n	8005ad6 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ac4:	f7fe f8e0 	bl	8003c88 <HAL_GetTick>
 8005ac8:	4602      	mov	r2, r0
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	1ad3      	subs	r3, r2, r3
 8005ace:	2b02      	cmp	r3, #2
 8005ad0:	d901      	bls.n	8005ad6 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8005ad2:	2303      	movs	r3, #3
 8005ad4:	e058      	b.n	8005b88 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ad6:	4b04      	ldr	r3, [pc, #16]	; (8005ae8 <HAL_RCC_OscConfig+0x784>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d0f0      	beq.n	8005ac4 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005ae2:	e050      	b.n	8005b86 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	e04f      	b.n	8005b88 <HAL_RCC_OscConfig+0x824>
 8005ae8:	40021000 	.word	0x40021000
 8005aec:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005af0:	4b27      	ldr	r3, [pc, #156]	; (8005b90 <HAL_RCC_OscConfig+0x82c>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d144      	bne.n	8005b86 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005afc:	4b24      	ldr	r3, [pc, #144]	; (8005b90 <HAL_RCC_OscConfig+0x82c>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a23      	ldr	r2, [pc, #140]	; (8005b90 <HAL_RCC_OscConfig+0x82c>)
 8005b02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b06:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005b08:	4b21      	ldr	r3, [pc, #132]	; (8005b90 <HAL_RCC_OscConfig+0x82c>)
 8005b0a:	68db      	ldr	r3, [r3, #12]
 8005b0c:	4a20      	ldr	r2, [pc, #128]	; (8005b90 <HAL_RCC_OscConfig+0x82c>)
 8005b0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b12:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005b14:	f7fe f8b8 	bl	8003c88 <HAL_GetTick>
 8005b18:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b1a:	e008      	b.n	8005b2e <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b1c:	f7fe f8b4 	bl	8003c88 <HAL_GetTick>
 8005b20:	4602      	mov	r2, r0
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	1ad3      	subs	r3, r2, r3
 8005b26:	2b02      	cmp	r3, #2
 8005b28:	d901      	bls.n	8005b2e <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8005b2a:	2303      	movs	r3, #3
 8005b2c:	e02c      	b.n	8005b88 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b2e:	4b18      	ldr	r3, [pc, #96]	; (8005b90 <HAL_RCC_OscConfig+0x82c>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d0f0      	beq.n	8005b1c <HAL_RCC_OscConfig+0x7b8>
 8005b3a:	e024      	b.n	8005b86 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005b3c:	69bb      	ldr	r3, [r7, #24]
 8005b3e:	2b0c      	cmp	r3, #12
 8005b40:	d01f      	beq.n	8005b82 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b42:	4b13      	ldr	r3, [pc, #76]	; (8005b90 <HAL_RCC_OscConfig+0x82c>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4a12      	ldr	r2, [pc, #72]	; (8005b90 <HAL_RCC_OscConfig+0x82c>)
 8005b48:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b4e:	f7fe f89b 	bl	8003c88 <HAL_GetTick>
 8005b52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b54:	e008      	b.n	8005b68 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b56:	f7fe f897 	bl	8003c88 <HAL_GetTick>
 8005b5a:	4602      	mov	r2, r0
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	1ad3      	subs	r3, r2, r3
 8005b60:	2b02      	cmp	r3, #2
 8005b62:	d901      	bls.n	8005b68 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8005b64:	2303      	movs	r3, #3
 8005b66:	e00f      	b.n	8005b88 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b68:	4b09      	ldr	r3, [pc, #36]	; (8005b90 <HAL_RCC_OscConfig+0x82c>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d1f0      	bne.n	8005b56 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005b74:	4b06      	ldr	r3, [pc, #24]	; (8005b90 <HAL_RCC_OscConfig+0x82c>)
 8005b76:	68da      	ldr	r2, [r3, #12]
 8005b78:	4905      	ldr	r1, [pc, #20]	; (8005b90 <HAL_RCC_OscConfig+0x82c>)
 8005b7a:	4b06      	ldr	r3, [pc, #24]	; (8005b94 <HAL_RCC_OscConfig+0x830>)
 8005b7c:	4013      	ands	r3, r2
 8005b7e:	60cb      	str	r3, [r1, #12]
 8005b80:	e001      	b.n	8005b86 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005b82:	2301      	movs	r3, #1
 8005b84:	e000      	b.n	8005b88 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8005b86:	2300      	movs	r3, #0
}
 8005b88:	4618      	mov	r0, r3
 8005b8a:	3720      	adds	r7, #32
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bd80      	pop	{r7, pc}
 8005b90:	40021000 	.word	0x40021000
 8005b94:	feeefffc 	.word	0xfeeefffc

08005b98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b086      	sub	sp, #24
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
 8005ba0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d101      	bne.n	8005bb0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005bac:	2301      	movs	r3, #1
 8005bae:	e11d      	b.n	8005dec <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005bb0:	4b90      	ldr	r3, [pc, #576]	; (8005df4 <HAL_RCC_ClockConfig+0x25c>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f003 030f 	and.w	r3, r3, #15
 8005bb8:	683a      	ldr	r2, [r7, #0]
 8005bba:	429a      	cmp	r2, r3
 8005bbc:	d910      	bls.n	8005be0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bbe:	4b8d      	ldr	r3, [pc, #564]	; (8005df4 <HAL_RCC_ClockConfig+0x25c>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f023 020f 	bic.w	r2, r3, #15
 8005bc6:	498b      	ldr	r1, [pc, #556]	; (8005df4 <HAL_RCC_ClockConfig+0x25c>)
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bce:	4b89      	ldr	r3, [pc, #548]	; (8005df4 <HAL_RCC_ClockConfig+0x25c>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f003 030f 	and.w	r3, r3, #15
 8005bd6:	683a      	ldr	r2, [r7, #0]
 8005bd8:	429a      	cmp	r2, r3
 8005bda:	d001      	beq.n	8005be0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005bdc:	2301      	movs	r3, #1
 8005bde:	e105      	b.n	8005dec <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f003 0302 	and.w	r3, r3, #2
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d010      	beq.n	8005c0e <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	689a      	ldr	r2, [r3, #8]
 8005bf0:	4b81      	ldr	r3, [pc, #516]	; (8005df8 <HAL_RCC_ClockConfig+0x260>)
 8005bf2:	689b      	ldr	r3, [r3, #8]
 8005bf4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005bf8:	429a      	cmp	r2, r3
 8005bfa:	d908      	bls.n	8005c0e <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005bfc:	4b7e      	ldr	r3, [pc, #504]	; (8005df8 <HAL_RCC_ClockConfig+0x260>)
 8005bfe:	689b      	ldr	r3, [r3, #8]
 8005c00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	689b      	ldr	r3, [r3, #8]
 8005c08:	497b      	ldr	r1, [pc, #492]	; (8005df8 <HAL_RCC_ClockConfig+0x260>)
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f003 0301 	and.w	r3, r3, #1
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d079      	beq.n	8005d0e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	2b03      	cmp	r3, #3
 8005c20:	d11e      	bne.n	8005c60 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c22:	4b75      	ldr	r3, [pc, #468]	; (8005df8 <HAL_RCC_ClockConfig+0x260>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d101      	bne.n	8005c32 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8005c2e:	2301      	movs	r3, #1
 8005c30:	e0dc      	b.n	8005dec <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8005c32:	f000 fa09 	bl	8006048 <RCC_GetSysClockFreqFromPLLSource>
 8005c36:	4603      	mov	r3, r0
 8005c38:	4a70      	ldr	r2, [pc, #448]	; (8005dfc <HAL_RCC_ClockConfig+0x264>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d946      	bls.n	8005ccc <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005c3e:	4b6e      	ldr	r3, [pc, #440]	; (8005df8 <HAL_RCC_ClockConfig+0x260>)
 8005c40:	689b      	ldr	r3, [r3, #8]
 8005c42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d140      	bne.n	8005ccc <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005c4a:	4b6b      	ldr	r3, [pc, #428]	; (8005df8 <HAL_RCC_ClockConfig+0x260>)
 8005c4c:	689b      	ldr	r3, [r3, #8]
 8005c4e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c52:	4a69      	ldr	r2, [pc, #420]	; (8005df8 <HAL_RCC_ClockConfig+0x260>)
 8005c54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c58:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005c5a:	2380      	movs	r3, #128	; 0x80
 8005c5c:	617b      	str	r3, [r7, #20]
 8005c5e:	e035      	b.n	8005ccc <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	2b02      	cmp	r3, #2
 8005c66:	d107      	bne.n	8005c78 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005c68:	4b63      	ldr	r3, [pc, #396]	; (8005df8 <HAL_RCC_ClockConfig+0x260>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d115      	bne.n	8005ca0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005c74:	2301      	movs	r3, #1
 8005c76:	e0b9      	b.n	8005dec <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d107      	bne.n	8005c90 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005c80:	4b5d      	ldr	r3, [pc, #372]	; (8005df8 <HAL_RCC_ClockConfig+0x260>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f003 0302 	and.w	r3, r3, #2
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d109      	bne.n	8005ca0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	e0ad      	b.n	8005dec <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005c90:	4b59      	ldr	r3, [pc, #356]	; (8005df8 <HAL_RCC_ClockConfig+0x260>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d101      	bne.n	8005ca0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	e0a5      	b.n	8005dec <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8005ca0:	f000 f8b4 	bl	8005e0c <HAL_RCC_GetSysClockFreq>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	4a55      	ldr	r2, [pc, #340]	; (8005dfc <HAL_RCC_ClockConfig+0x264>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d90f      	bls.n	8005ccc <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005cac:	4b52      	ldr	r3, [pc, #328]	; (8005df8 <HAL_RCC_ClockConfig+0x260>)
 8005cae:	689b      	ldr	r3, [r3, #8]
 8005cb0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d109      	bne.n	8005ccc <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005cb8:	4b4f      	ldr	r3, [pc, #316]	; (8005df8 <HAL_RCC_ClockConfig+0x260>)
 8005cba:	689b      	ldr	r3, [r3, #8]
 8005cbc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005cc0:	4a4d      	ldr	r2, [pc, #308]	; (8005df8 <HAL_RCC_ClockConfig+0x260>)
 8005cc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cc6:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005cc8:	2380      	movs	r3, #128	; 0x80
 8005cca:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005ccc:	4b4a      	ldr	r3, [pc, #296]	; (8005df8 <HAL_RCC_ClockConfig+0x260>)
 8005cce:	689b      	ldr	r3, [r3, #8]
 8005cd0:	f023 0203 	bic.w	r2, r3, #3
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	4947      	ldr	r1, [pc, #284]	; (8005df8 <HAL_RCC_ClockConfig+0x260>)
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005cde:	f7fd ffd3 	bl	8003c88 <HAL_GetTick>
 8005ce2:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ce4:	e00a      	b.n	8005cfc <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ce6:	f7fd ffcf 	bl	8003c88 <HAL_GetTick>
 8005cea:	4602      	mov	r2, r0
 8005cec:	693b      	ldr	r3, [r7, #16]
 8005cee:	1ad3      	subs	r3, r2, r3
 8005cf0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d901      	bls.n	8005cfc <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8005cf8:	2303      	movs	r3, #3
 8005cfa:	e077      	b.n	8005dec <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cfc:	4b3e      	ldr	r3, [pc, #248]	; (8005df8 <HAL_RCC_ClockConfig+0x260>)
 8005cfe:	689b      	ldr	r3, [r3, #8]
 8005d00:	f003 020c 	and.w	r2, r3, #12
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	009b      	lsls	r3, r3, #2
 8005d0a:	429a      	cmp	r2, r3
 8005d0c:	d1eb      	bne.n	8005ce6 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	2b80      	cmp	r3, #128	; 0x80
 8005d12:	d105      	bne.n	8005d20 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005d14:	4b38      	ldr	r3, [pc, #224]	; (8005df8 <HAL_RCC_ClockConfig+0x260>)
 8005d16:	689b      	ldr	r3, [r3, #8]
 8005d18:	4a37      	ldr	r2, [pc, #220]	; (8005df8 <HAL_RCC_ClockConfig+0x260>)
 8005d1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d1e:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f003 0302 	and.w	r3, r3, #2
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d010      	beq.n	8005d4e <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	689a      	ldr	r2, [r3, #8]
 8005d30:	4b31      	ldr	r3, [pc, #196]	; (8005df8 <HAL_RCC_ClockConfig+0x260>)
 8005d32:	689b      	ldr	r3, [r3, #8]
 8005d34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005d38:	429a      	cmp	r2, r3
 8005d3a:	d208      	bcs.n	8005d4e <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d3c:	4b2e      	ldr	r3, [pc, #184]	; (8005df8 <HAL_RCC_ClockConfig+0x260>)
 8005d3e:	689b      	ldr	r3, [r3, #8]
 8005d40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	689b      	ldr	r3, [r3, #8]
 8005d48:	492b      	ldr	r1, [pc, #172]	; (8005df8 <HAL_RCC_ClockConfig+0x260>)
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005d4e:	4b29      	ldr	r3, [pc, #164]	; (8005df4 <HAL_RCC_ClockConfig+0x25c>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f003 030f 	and.w	r3, r3, #15
 8005d56:	683a      	ldr	r2, [r7, #0]
 8005d58:	429a      	cmp	r2, r3
 8005d5a:	d210      	bcs.n	8005d7e <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d5c:	4b25      	ldr	r3, [pc, #148]	; (8005df4 <HAL_RCC_ClockConfig+0x25c>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f023 020f 	bic.w	r2, r3, #15
 8005d64:	4923      	ldr	r1, [pc, #140]	; (8005df4 <HAL_RCC_ClockConfig+0x25c>)
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d6c:	4b21      	ldr	r3, [pc, #132]	; (8005df4 <HAL_RCC_ClockConfig+0x25c>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f003 030f 	and.w	r3, r3, #15
 8005d74:	683a      	ldr	r2, [r7, #0]
 8005d76:	429a      	cmp	r2, r3
 8005d78:	d001      	beq.n	8005d7e <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	e036      	b.n	8005dec <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f003 0304 	and.w	r3, r3, #4
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d008      	beq.n	8005d9c <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d8a:	4b1b      	ldr	r3, [pc, #108]	; (8005df8 <HAL_RCC_ClockConfig+0x260>)
 8005d8c:	689b      	ldr	r3, [r3, #8]
 8005d8e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	68db      	ldr	r3, [r3, #12]
 8005d96:	4918      	ldr	r1, [pc, #96]	; (8005df8 <HAL_RCC_ClockConfig+0x260>)
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f003 0308 	and.w	r3, r3, #8
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d009      	beq.n	8005dbc <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005da8:	4b13      	ldr	r3, [pc, #76]	; (8005df8 <HAL_RCC_ClockConfig+0x260>)
 8005daa:	689b      	ldr	r3, [r3, #8]
 8005dac:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	691b      	ldr	r3, [r3, #16]
 8005db4:	00db      	lsls	r3, r3, #3
 8005db6:	4910      	ldr	r1, [pc, #64]	; (8005df8 <HAL_RCC_ClockConfig+0x260>)
 8005db8:	4313      	orrs	r3, r2
 8005dba:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005dbc:	f000 f826 	bl	8005e0c <HAL_RCC_GetSysClockFreq>
 8005dc0:	4602      	mov	r2, r0
 8005dc2:	4b0d      	ldr	r3, [pc, #52]	; (8005df8 <HAL_RCC_ClockConfig+0x260>)
 8005dc4:	689b      	ldr	r3, [r3, #8]
 8005dc6:	091b      	lsrs	r3, r3, #4
 8005dc8:	f003 030f 	and.w	r3, r3, #15
 8005dcc:	490c      	ldr	r1, [pc, #48]	; (8005e00 <HAL_RCC_ClockConfig+0x268>)
 8005dce:	5ccb      	ldrb	r3, [r1, r3]
 8005dd0:	f003 031f 	and.w	r3, r3, #31
 8005dd4:	fa22 f303 	lsr.w	r3, r2, r3
 8005dd8:	4a0a      	ldr	r2, [pc, #40]	; (8005e04 <HAL_RCC_ClockConfig+0x26c>)
 8005dda:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005ddc:	4b0a      	ldr	r3, [pc, #40]	; (8005e08 <HAL_RCC_ClockConfig+0x270>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4618      	mov	r0, r3
 8005de2:	f7fd ff01 	bl	8003be8 <HAL_InitTick>
 8005de6:	4603      	mov	r3, r0
 8005de8:	73fb      	strb	r3, [r7, #15]

  return status;
 8005dea:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dec:	4618      	mov	r0, r3
 8005dee:	3718      	adds	r7, #24
 8005df0:	46bd      	mov	sp, r7
 8005df2:	bd80      	pop	{r7, pc}
 8005df4:	40022000 	.word	0x40022000
 8005df8:	40021000 	.word	0x40021000
 8005dfc:	04c4b400 	.word	0x04c4b400
 8005e00:	0800e720 	.word	0x0800e720
 8005e04:	20000000 	.word	0x20000000
 8005e08:	20000018 	.word	0x20000018

08005e0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b089      	sub	sp, #36	; 0x24
 8005e10:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005e12:	2300      	movs	r3, #0
 8005e14:	61fb      	str	r3, [r7, #28]
 8005e16:	2300      	movs	r3, #0
 8005e18:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e1a:	4b3e      	ldr	r3, [pc, #248]	; (8005f14 <HAL_RCC_GetSysClockFreq+0x108>)
 8005e1c:	689b      	ldr	r3, [r3, #8]
 8005e1e:	f003 030c 	and.w	r3, r3, #12
 8005e22:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005e24:	4b3b      	ldr	r3, [pc, #236]	; (8005f14 <HAL_RCC_GetSysClockFreq+0x108>)
 8005e26:	68db      	ldr	r3, [r3, #12]
 8005e28:	f003 0303 	and.w	r3, r3, #3
 8005e2c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d005      	beq.n	8005e40 <HAL_RCC_GetSysClockFreq+0x34>
 8005e34:	693b      	ldr	r3, [r7, #16]
 8005e36:	2b0c      	cmp	r3, #12
 8005e38:	d121      	bne.n	8005e7e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	2b01      	cmp	r3, #1
 8005e3e:	d11e      	bne.n	8005e7e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005e40:	4b34      	ldr	r3, [pc, #208]	; (8005f14 <HAL_RCC_GetSysClockFreq+0x108>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f003 0308 	and.w	r3, r3, #8
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d107      	bne.n	8005e5c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005e4c:	4b31      	ldr	r3, [pc, #196]	; (8005f14 <HAL_RCC_GetSysClockFreq+0x108>)
 8005e4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e52:	0a1b      	lsrs	r3, r3, #8
 8005e54:	f003 030f 	and.w	r3, r3, #15
 8005e58:	61fb      	str	r3, [r7, #28]
 8005e5a:	e005      	b.n	8005e68 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005e5c:	4b2d      	ldr	r3, [pc, #180]	; (8005f14 <HAL_RCC_GetSysClockFreq+0x108>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	091b      	lsrs	r3, r3, #4
 8005e62:	f003 030f 	and.w	r3, r3, #15
 8005e66:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005e68:	4a2b      	ldr	r2, [pc, #172]	; (8005f18 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005e6a:	69fb      	ldr	r3, [r7, #28]
 8005e6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e70:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005e72:	693b      	ldr	r3, [r7, #16]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d10d      	bne.n	8005e94 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005e78:	69fb      	ldr	r3, [r7, #28]
 8005e7a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005e7c:	e00a      	b.n	8005e94 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	2b04      	cmp	r3, #4
 8005e82:	d102      	bne.n	8005e8a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005e84:	4b25      	ldr	r3, [pc, #148]	; (8005f1c <HAL_RCC_GetSysClockFreq+0x110>)
 8005e86:	61bb      	str	r3, [r7, #24]
 8005e88:	e004      	b.n	8005e94 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	2b08      	cmp	r3, #8
 8005e8e:	d101      	bne.n	8005e94 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005e90:	4b23      	ldr	r3, [pc, #140]	; (8005f20 <HAL_RCC_GetSysClockFreq+0x114>)
 8005e92:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005e94:	693b      	ldr	r3, [r7, #16]
 8005e96:	2b0c      	cmp	r3, #12
 8005e98:	d134      	bne.n	8005f04 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005e9a:	4b1e      	ldr	r3, [pc, #120]	; (8005f14 <HAL_RCC_GetSysClockFreq+0x108>)
 8005e9c:	68db      	ldr	r3, [r3, #12]
 8005e9e:	f003 0303 	and.w	r3, r3, #3
 8005ea2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	2b02      	cmp	r3, #2
 8005ea8:	d003      	beq.n	8005eb2 <HAL_RCC_GetSysClockFreq+0xa6>
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	2b03      	cmp	r3, #3
 8005eae:	d003      	beq.n	8005eb8 <HAL_RCC_GetSysClockFreq+0xac>
 8005eb0:	e005      	b.n	8005ebe <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005eb2:	4b1a      	ldr	r3, [pc, #104]	; (8005f1c <HAL_RCC_GetSysClockFreq+0x110>)
 8005eb4:	617b      	str	r3, [r7, #20]
      break;
 8005eb6:	e005      	b.n	8005ec4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005eb8:	4b19      	ldr	r3, [pc, #100]	; (8005f20 <HAL_RCC_GetSysClockFreq+0x114>)
 8005eba:	617b      	str	r3, [r7, #20]
      break;
 8005ebc:	e002      	b.n	8005ec4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005ebe:	69fb      	ldr	r3, [r7, #28]
 8005ec0:	617b      	str	r3, [r7, #20]
      break;
 8005ec2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005ec4:	4b13      	ldr	r3, [pc, #76]	; (8005f14 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ec6:	68db      	ldr	r3, [r3, #12]
 8005ec8:	091b      	lsrs	r3, r3, #4
 8005eca:	f003 030f 	and.w	r3, r3, #15
 8005ece:	3301      	adds	r3, #1
 8005ed0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005ed2:	4b10      	ldr	r3, [pc, #64]	; (8005f14 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ed4:	68db      	ldr	r3, [r3, #12]
 8005ed6:	0a1b      	lsrs	r3, r3, #8
 8005ed8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005edc:	697a      	ldr	r2, [r7, #20]
 8005ede:	fb03 f202 	mul.w	r2, r3, r2
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ee8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005eea:	4b0a      	ldr	r3, [pc, #40]	; (8005f14 <HAL_RCC_GetSysClockFreq+0x108>)
 8005eec:	68db      	ldr	r3, [r3, #12]
 8005eee:	0e5b      	lsrs	r3, r3, #25
 8005ef0:	f003 0303 	and.w	r3, r3, #3
 8005ef4:	3301      	adds	r3, #1
 8005ef6:	005b      	lsls	r3, r3, #1
 8005ef8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005efa:	697a      	ldr	r2, [r7, #20]
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f02:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005f04:	69bb      	ldr	r3, [r7, #24]
}
 8005f06:	4618      	mov	r0, r3
 8005f08:	3724      	adds	r7, #36	; 0x24
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f10:	4770      	bx	lr
 8005f12:	bf00      	nop
 8005f14:	40021000 	.word	0x40021000
 8005f18:	0800e738 	.word	0x0800e738
 8005f1c:	00f42400 	.word	0x00f42400
 8005f20:	007a1200 	.word	0x007a1200

08005f24 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f24:	b480      	push	{r7}
 8005f26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005f28:	4b03      	ldr	r3, [pc, #12]	; (8005f38 <HAL_RCC_GetHCLKFreq+0x14>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f34:	4770      	bx	lr
 8005f36:	bf00      	nop
 8005f38:	20000000 	.word	0x20000000

08005f3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005f40:	f7ff fff0 	bl	8005f24 <HAL_RCC_GetHCLKFreq>
 8005f44:	4602      	mov	r2, r0
 8005f46:	4b06      	ldr	r3, [pc, #24]	; (8005f60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005f48:	689b      	ldr	r3, [r3, #8]
 8005f4a:	0a1b      	lsrs	r3, r3, #8
 8005f4c:	f003 0307 	and.w	r3, r3, #7
 8005f50:	4904      	ldr	r1, [pc, #16]	; (8005f64 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005f52:	5ccb      	ldrb	r3, [r1, r3]
 8005f54:	f003 031f 	and.w	r3, r3, #31
 8005f58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	bd80      	pop	{r7, pc}
 8005f60:	40021000 	.word	0x40021000
 8005f64:	0800e730 	.word	0x0800e730

08005f68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005f6c:	f7ff ffda 	bl	8005f24 <HAL_RCC_GetHCLKFreq>
 8005f70:	4602      	mov	r2, r0
 8005f72:	4b06      	ldr	r3, [pc, #24]	; (8005f8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005f74:	689b      	ldr	r3, [r3, #8]
 8005f76:	0adb      	lsrs	r3, r3, #11
 8005f78:	f003 0307 	and.w	r3, r3, #7
 8005f7c:	4904      	ldr	r1, [pc, #16]	; (8005f90 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005f7e:	5ccb      	ldrb	r3, [r1, r3]
 8005f80:	f003 031f 	and.w	r3, r3, #31
 8005f84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f88:	4618      	mov	r0, r3
 8005f8a:	bd80      	pop	{r7, pc}
 8005f8c:	40021000 	.word	0x40021000
 8005f90:	0800e730 	.word	0x0800e730

08005f94 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b086      	sub	sp, #24
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005fa0:	4b27      	ldr	r3, [pc, #156]	; (8006040 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005fa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d003      	beq.n	8005fb4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005fac:	f7ff f9ba 	bl	8005324 <HAL_PWREx_GetVoltageRange>
 8005fb0:	6178      	str	r0, [r7, #20]
 8005fb2:	e014      	b.n	8005fde <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005fb4:	4b22      	ldr	r3, [pc, #136]	; (8006040 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005fb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fb8:	4a21      	ldr	r2, [pc, #132]	; (8006040 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005fba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fbe:	6593      	str	r3, [r2, #88]	; 0x58
 8005fc0:	4b1f      	ldr	r3, [pc, #124]	; (8006040 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005fc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fc8:	60fb      	str	r3, [r7, #12]
 8005fca:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005fcc:	f7ff f9aa 	bl	8005324 <HAL_PWREx_GetVoltageRange>
 8005fd0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005fd2:	4b1b      	ldr	r3, [pc, #108]	; (8006040 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005fd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fd6:	4a1a      	ldr	r2, [pc, #104]	; (8006040 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005fd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005fdc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005fde:	697b      	ldr	r3, [r7, #20]
 8005fe0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005fe4:	d10b      	bne.n	8005ffe <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2b80      	cmp	r3, #128	; 0x80
 8005fea:	d913      	bls.n	8006014 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2ba0      	cmp	r3, #160	; 0xa0
 8005ff0:	d902      	bls.n	8005ff8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005ff2:	2302      	movs	r3, #2
 8005ff4:	613b      	str	r3, [r7, #16]
 8005ff6:	e00d      	b.n	8006014 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	613b      	str	r3, [r7, #16]
 8005ffc:	e00a      	b.n	8006014 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2b7f      	cmp	r3, #127	; 0x7f
 8006002:	d902      	bls.n	800600a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8006004:	2302      	movs	r3, #2
 8006006:	613b      	str	r3, [r7, #16]
 8006008:	e004      	b.n	8006014 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2b70      	cmp	r3, #112	; 0x70
 800600e:	d101      	bne.n	8006014 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006010:	2301      	movs	r3, #1
 8006012:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006014:	4b0b      	ldr	r3, [pc, #44]	; (8006044 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f023 020f 	bic.w	r2, r3, #15
 800601c:	4909      	ldr	r1, [pc, #36]	; (8006044 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800601e:	693b      	ldr	r3, [r7, #16]
 8006020:	4313      	orrs	r3, r2
 8006022:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006024:	4b07      	ldr	r3, [pc, #28]	; (8006044 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f003 030f 	and.w	r3, r3, #15
 800602c:	693a      	ldr	r2, [r7, #16]
 800602e:	429a      	cmp	r2, r3
 8006030:	d001      	beq.n	8006036 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8006032:	2301      	movs	r3, #1
 8006034:	e000      	b.n	8006038 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8006036:	2300      	movs	r3, #0
}
 8006038:	4618      	mov	r0, r3
 800603a:	3718      	adds	r7, #24
 800603c:	46bd      	mov	sp, r7
 800603e:	bd80      	pop	{r7, pc}
 8006040:	40021000 	.word	0x40021000
 8006044:	40022000 	.word	0x40022000

08006048 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006048:	b480      	push	{r7}
 800604a:	b087      	sub	sp, #28
 800604c:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800604e:	4b2d      	ldr	r3, [pc, #180]	; (8006104 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006050:	68db      	ldr	r3, [r3, #12]
 8006052:	f003 0303 	and.w	r3, r3, #3
 8006056:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	2b03      	cmp	r3, #3
 800605c:	d00b      	beq.n	8006076 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	2b03      	cmp	r3, #3
 8006062:	d825      	bhi.n	80060b0 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	2b01      	cmp	r3, #1
 8006068:	d008      	beq.n	800607c <RCC_GetSysClockFreqFromPLLSource+0x34>
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	2b02      	cmp	r3, #2
 800606e:	d11f      	bne.n	80060b0 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8006070:	4b25      	ldr	r3, [pc, #148]	; (8006108 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8006072:	613b      	str	r3, [r7, #16]
    break;
 8006074:	e01f      	b.n	80060b6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8006076:	4b25      	ldr	r3, [pc, #148]	; (800610c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8006078:	613b      	str	r3, [r7, #16]
    break;
 800607a:	e01c      	b.n	80060b6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800607c:	4b21      	ldr	r3, [pc, #132]	; (8006104 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f003 0308 	and.w	r3, r3, #8
 8006084:	2b00      	cmp	r3, #0
 8006086:	d107      	bne.n	8006098 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006088:	4b1e      	ldr	r3, [pc, #120]	; (8006104 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800608a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800608e:	0a1b      	lsrs	r3, r3, #8
 8006090:	f003 030f 	and.w	r3, r3, #15
 8006094:	617b      	str	r3, [r7, #20]
 8006096:	e005      	b.n	80060a4 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006098:	4b1a      	ldr	r3, [pc, #104]	; (8006104 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	091b      	lsrs	r3, r3, #4
 800609e:	f003 030f 	and.w	r3, r3, #15
 80060a2:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 80060a4:	4a1a      	ldr	r2, [pc, #104]	; (8006110 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80060ac:	613b      	str	r3, [r7, #16]
    break;
 80060ae:	e002      	b.n	80060b6 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 80060b0:	2300      	movs	r3, #0
 80060b2:	613b      	str	r3, [r7, #16]
    break;
 80060b4:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80060b6:	4b13      	ldr	r3, [pc, #76]	; (8006104 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80060b8:	68db      	ldr	r3, [r3, #12]
 80060ba:	091b      	lsrs	r3, r3, #4
 80060bc:	f003 030f 	and.w	r3, r3, #15
 80060c0:	3301      	adds	r3, #1
 80060c2:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80060c4:	4b0f      	ldr	r3, [pc, #60]	; (8006104 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80060c6:	68db      	ldr	r3, [r3, #12]
 80060c8:	0a1b      	lsrs	r3, r3, #8
 80060ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060ce:	693a      	ldr	r2, [r7, #16]
 80060d0:	fb03 f202 	mul.w	r2, r3, r2
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80060da:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80060dc:	4b09      	ldr	r3, [pc, #36]	; (8006104 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80060de:	68db      	ldr	r3, [r3, #12]
 80060e0:	0e5b      	lsrs	r3, r3, #25
 80060e2:	f003 0303 	and.w	r3, r3, #3
 80060e6:	3301      	adds	r3, #1
 80060e8:	005b      	lsls	r3, r3, #1
 80060ea:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80060ec:	693a      	ldr	r2, [r7, #16]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80060f4:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80060f6:	683b      	ldr	r3, [r7, #0]
}
 80060f8:	4618      	mov	r0, r3
 80060fa:	371c      	adds	r7, #28
 80060fc:	46bd      	mov	sp, r7
 80060fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006102:	4770      	bx	lr
 8006104:	40021000 	.word	0x40021000
 8006108:	00f42400 	.word	0x00f42400
 800610c:	007a1200 	.word	0x007a1200
 8006110:	0800e738 	.word	0x0800e738

08006114 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b086      	sub	sp, #24
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800611c:	2300      	movs	r3, #0
 800611e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006120:	2300      	movs	r3, #0
 8006122:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800612c:	2b00      	cmp	r3, #0
 800612e:	d040      	beq.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006134:	2b80      	cmp	r3, #128	; 0x80
 8006136:	d02a      	beq.n	800618e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006138:	2b80      	cmp	r3, #128	; 0x80
 800613a:	d825      	bhi.n	8006188 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800613c:	2b60      	cmp	r3, #96	; 0x60
 800613e:	d026      	beq.n	800618e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006140:	2b60      	cmp	r3, #96	; 0x60
 8006142:	d821      	bhi.n	8006188 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8006144:	2b40      	cmp	r3, #64	; 0x40
 8006146:	d006      	beq.n	8006156 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8006148:	2b40      	cmp	r3, #64	; 0x40
 800614a:	d81d      	bhi.n	8006188 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800614c:	2b00      	cmp	r3, #0
 800614e:	d009      	beq.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8006150:	2b20      	cmp	r3, #32
 8006152:	d010      	beq.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8006154:	e018      	b.n	8006188 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006156:	4b89      	ldr	r3, [pc, #548]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006158:	68db      	ldr	r3, [r3, #12]
 800615a:	4a88      	ldr	r2, [pc, #544]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800615c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006160:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006162:	e015      	b.n	8006190 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	3304      	adds	r3, #4
 8006168:	2100      	movs	r1, #0
 800616a:	4618      	mov	r0, r3
 800616c:	f000 fb02 	bl	8006774 <RCCEx_PLLSAI1_Config>
 8006170:	4603      	mov	r3, r0
 8006172:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006174:	e00c      	b.n	8006190 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	3320      	adds	r3, #32
 800617a:	2100      	movs	r1, #0
 800617c:	4618      	mov	r0, r3
 800617e:	f000 fbed 	bl	800695c <RCCEx_PLLSAI2_Config>
 8006182:	4603      	mov	r3, r0
 8006184:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006186:	e003      	b.n	8006190 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006188:	2301      	movs	r3, #1
 800618a:	74fb      	strb	r3, [r7, #19]
      break;
 800618c:	e000      	b.n	8006190 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800618e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006190:	7cfb      	ldrb	r3, [r7, #19]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d10b      	bne.n	80061ae <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006196:	4b79      	ldr	r3, [pc, #484]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006198:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800619c:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80061a4:	4975      	ldr	r1, [pc, #468]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80061a6:	4313      	orrs	r3, r2
 80061a8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80061ac:	e001      	b.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061ae:	7cfb      	ldrb	r3, [r7, #19]
 80061b0:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d047      	beq.n	800624e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061c6:	d030      	beq.n	800622a <HAL_RCCEx_PeriphCLKConfig+0x116>
 80061c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061cc:	d82a      	bhi.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80061ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80061d2:	d02a      	beq.n	800622a <HAL_RCCEx_PeriphCLKConfig+0x116>
 80061d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80061d8:	d824      	bhi.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80061da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061de:	d008      	beq.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0xde>
 80061e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061e4:	d81e      	bhi.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d00a      	beq.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80061ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061ee:	d010      	beq.n	8006212 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80061f0:	e018      	b.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80061f2:	4b62      	ldr	r3, [pc, #392]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80061f4:	68db      	ldr	r3, [r3, #12]
 80061f6:	4a61      	ldr	r2, [pc, #388]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80061f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061fc:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80061fe:	e015      	b.n	800622c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	3304      	adds	r3, #4
 8006204:	2100      	movs	r1, #0
 8006206:	4618      	mov	r0, r3
 8006208:	f000 fab4 	bl	8006774 <RCCEx_PLLSAI1_Config>
 800620c:	4603      	mov	r3, r0
 800620e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006210:	e00c      	b.n	800622c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	3320      	adds	r3, #32
 8006216:	2100      	movs	r1, #0
 8006218:	4618      	mov	r0, r3
 800621a:	f000 fb9f 	bl	800695c <RCCEx_PLLSAI2_Config>
 800621e:	4603      	mov	r3, r0
 8006220:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006222:	e003      	b.n	800622c <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006224:	2301      	movs	r3, #1
 8006226:	74fb      	strb	r3, [r7, #19]
      break;
 8006228:	e000      	b.n	800622c <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800622a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800622c:	7cfb      	ldrb	r3, [r7, #19]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d10b      	bne.n	800624a <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006232:	4b52      	ldr	r3, [pc, #328]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006234:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006238:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006240:	494e      	ldr	r1, [pc, #312]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006242:	4313      	orrs	r3, r2
 8006244:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8006248:	e001      	b.n	800624e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800624a:	7cfb      	ldrb	r3, [r7, #19]
 800624c:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006256:	2b00      	cmp	r3, #0
 8006258:	f000 809f 	beq.w	800639a <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 800625c:	2300      	movs	r3, #0
 800625e:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006260:	4b46      	ldr	r3, [pc, #280]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006262:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006264:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006268:	2b00      	cmp	r3, #0
 800626a:	d101      	bne.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800626c:	2301      	movs	r3, #1
 800626e:	e000      	b.n	8006272 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8006270:	2300      	movs	r3, #0
 8006272:	2b00      	cmp	r3, #0
 8006274:	d00d      	beq.n	8006292 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006276:	4b41      	ldr	r3, [pc, #260]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800627a:	4a40      	ldr	r2, [pc, #256]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800627c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006280:	6593      	str	r3, [r2, #88]	; 0x58
 8006282:	4b3e      	ldr	r3, [pc, #248]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006284:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006286:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800628a:	60bb      	str	r3, [r7, #8]
 800628c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800628e:	2301      	movs	r3, #1
 8006290:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006292:	4b3b      	ldr	r3, [pc, #236]	; (8006380 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a3a      	ldr	r2, [pc, #232]	; (8006380 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006298:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800629c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800629e:	f7fd fcf3 	bl	8003c88 <HAL_GetTick>
 80062a2:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80062a4:	e009      	b.n	80062ba <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80062a6:	f7fd fcef 	bl	8003c88 <HAL_GetTick>
 80062aa:	4602      	mov	r2, r0
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	1ad3      	subs	r3, r2, r3
 80062b0:	2b02      	cmp	r3, #2
 80062b2:	d902      	bls.n	80062ba <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80062b4:	2303      	movs	r3, #3
 80062b6:	74fb      	strb	r3, [r7, #19]
        break;
 80062b8:	e005      	b.n	80062c6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80062ba:	4b31      	ldr	r3, [pc, #196]	; (8006380 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d0ef      	beq.n	80062a6 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80062c6:	7cfb      	ldrb	r3, [r7, #19]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d15b      	bne.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80062cc:	4b2b      	ldr	r3, [pc, #172]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80062ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062d6:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80062d8:	697b      	ldr	r3, [r7, #20]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d01f      	beq.n	800631e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062e4:	697a      	ldr	r2, [r7, #20]
 80062e6:	429a      	cmp	r2, r3
 80062e8:	d019      	beq.n	800631e <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80062ea:	4b24      	ldr	r3, [pc, #144]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80062ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062f4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80062f6:	4b21      	ldr	r3, [pc, #132]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80062f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062fc:	4a1f      	ldr	r2, [pc, #124]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80062fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006302:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006306:	4b1d      	ldr	r3, [pc, #116]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006308:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800630c:	4a1b      	ldr	r2, [pc, #108]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800630e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006312:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006316:	4a19      	ldr	r2, [pc, #100]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006318:	697b      	ldr	r3, [r7, #20]
 800631a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	f003 0301 	and.w	r3, r3, #1
 8006324:	2b00      	cmp	r3, #0
 8006326:	d016      	beq.n	8006356 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006328:	f7fd fcae 	bl	8003c88 <HAL_GetTick>
 800632c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800632e:	e00b      	b.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006330:	f7fd fcaa 	bl	8003c88 <HAL_GetTick>
 8006334:	4602      	mov	r2, r0
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	1ad3      	subs	r3, r2, r3
 800633a:	f241 3288 	movw	r2, #5000	; 0x1388
 800633e:	4293      	cmp	r3, r2
 8006340:	d902      	bls.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8006342:	2303      	movs	r3, #3
 8006344:	74fb      	strb	r3, [r7, #19]
            break;
 8006346:	e006      	b.n	8006356 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006348:	4b0c      	ldr	r3, [pc, #48]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800634a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800634e:	f003 0302 	and.w	r3, r3, #2
 8006352:	2b00      	cmp	r3, #0
 8006354:	d0ec      	beq.n	8006330 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8006356:	7cfb      	ldrb	r3, [r7, #19]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d10c      	bne.n	8006376 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800635c:	4b07      	ldr	r3, [pc, #28]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800635e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006362:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800636c:	4903      	ldr	r1, [pc, #12]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800636e:	4313      	orrs	r3, r2
 8006370:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006374:	e008      	b.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006376:	7cfb      	ldrb	r3, [r7, #19]
 8006378:	74bb      	strb	r3, [r7, #18]
 800637a:	e005      	b.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0x274>
 800637c:	40021000 	.word	0x40021000
 8006380:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006384:	7cfb      	ldrb	r3, [r7, #19]
 8006386:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006388:	7c7b      	ldrb	r3, [r7, #17]
 800638a:	2b01      	cmp	r3, #1
 800638c:	d105      	bne.n	800639a <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800638e:	4ba0      	ldr	r3, [pc, #640]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006390:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006392:	4a9f      	ldr	r2, [pc, #636]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006394:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006398:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f003 0301 	and.w	r3, r3, #1
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d00a      	beq.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80063a6:	4b9a      	ldr	r3, [pc, #616]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80063a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063ac:	f023 0203 	bic.w	r2, r3, #3
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063b4:	4996      	ldr	r1, [pc, #600]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80063b6:	4313      	orrs	r3, r2
 80063b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f003 0302 	and.w	r3, r3, #2
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d00a      	beq.n	80063de <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80063c8:	4b91      	ldr	r3, [pc, #580]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80063ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063ce:	f023 020c 	bic.w	r2, r3, #12
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063d6:	498e      	ldr	r1, [pc, #568]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80063d8:	4313      	orrs	r3, r2
 80063da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f003 0304 	and.w	r3, r3, #4
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d00a      	beq.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80063ea:	4b89      	ldr	r3, [pc, #548]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80063ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063f0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063f8:	4985      	ldr	r1, [pc, #532]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80063fa:	4313      	orrs	r3, r2
 80063fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f003 0308 	and.w	r3, r3, #8
 8006408:	2b00      	cmp	r3, #0
 800640a:	d00a      	beq.n	8006422 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800640c:	4b80      	ldr	r3, [pc, #512]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800640e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006412:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800641a:	497d      	ldr	r1, [pc, #500]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800641c:	4313      	orrs	r3, r2
 800641e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f003 0310 	and.w	r3, r3, #16
 800642a:	2b00      	cmp	r3, #0
 800642c:	d00a      	beq.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800642e:	4b78      	ldr	r3, [pc, #480]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006430:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006434:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800643c:	4974      	ldr	r1, [pc, #464]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800643e:	4313      	orrs	r3, r2
 8006440:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f003 0320 	and.w	r3, r3, #32
 800644c:	2b00      	cmp	r3, #0
 800644e:	d00a      	beq.n	8006466 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006450:	4b6f      	ldr	r3, [pc, #444]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006452:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006456:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800645e:	496c      	ldr	r1, [pc, #432]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006460:	4313      	orrs	r3, r2
 8006462:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800646e:	2b00      	cmp	r3, #0
 8006470:	d00a      	beq.n	8006488 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006472:	4b67      	ldr	r3, [pc, #412]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006474:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006478:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006480:	4963      	ldr	r1, [pc, #396]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006482:	4313      	orrs	r3, r2
 8006484:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006490:	2b00      	cmp	r3, #0
 8006492:	d00a      	beq.n	80064aa <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006494:	4b5e      	ldr	r3, [pc, #376]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006496:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800649a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80064a2:	495b      	ldr	r1, [pc, #364]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80064a4:	4313      	orrs	r3, r2
 80064a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d00a      	beq.n	80064cc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80064b6:	4b56      	ldr	r3, [pc, #344]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80064b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064bc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064c4:	4952      	ldr	r1, [pc, #328]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80064c6:	4313      	orrs	r3, r2
 80064c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d00a      	beq.n	80064ee <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80064d8:	4b4d      	ldr	r3, [pc, #308]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80064da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064de:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064e6:	494a      	ldr	r1, [pc, #296]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80064e8:	4313      	orrs	r3, r2
 80064ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d00a      	beq.n	8006510 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80064fa:	4b45      	ldr	r3, [pc, #276]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80064fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006500:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006508:	4941      	ldr	r1, [pc, #260]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800650a:	4313      	orrs	r3, r2
 800650c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006518:	2b00      	cmp	r3, #0
 800651a:	d00a      	beq.n	8006532 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800651c:	4b3c      	ldr	r3, [pc, #240]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800651e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006522:	f023 0203 	bic.w	r2, r3, #3
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800652a:	4939      	ldr	r1, [pc, #228]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800652c:	4313      	orrs	r3, r2
 800652e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800653a:	2b00      	cmp	r3, #0
 800653c:	d028      	beq.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800653e:	4b34      	ldr	r3, [pc, #208]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006540:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006544:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800654c:	4930      	ldr	r1, [pc, #192]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800654e:	4313      	orrs	r3, r2
 8006550:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006558:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800655c:	d106      	bne.n	800656c <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800655e:	4b2c      	ldr	r3, [pc, #176]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006560:	68db      	ldr	r3, [r3, #12]
 8006562:	4a2b      	ldr	r2, [pc, #172]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006564:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006568:	60d3      	str	r3, [r2, #12]
 800656a:	e011      	b.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006570:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006574:	d10c      	bne.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	3304      	adds	r3, #4
 800657a:	2101      	movs	r1, #1
 800657c:	4618      	mov	r0, r3
 800657e:	f000 f8f9 	bl	8006774 <RCCEx_PLLSAI1_Config>
 8006582:	4603      	mov	r3, r0
 8006584:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006586:	7cfb      	ldrb	r3, [r7, #19]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d001      	beq.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 800658c:	7cfb      	ldrb	r3, [r7, #19]
 800658e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006598:	2b00      	cmp	r3, #0
 800659a:	d04d      	beq.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80065a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80065a4:	d108      	bne.n	80065b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80065a6:	4b1a      	ldr	r3, [pc, #104]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80065a8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80065ac:	4a18      	ldr	r2, [pc, #96]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80065ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80065b2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80065b6:	e012      	b.n	80065de <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80065b8:	4b15      	ldr	r3, [pc, #84]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80065ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80065be:	4a14      	ldr	r2, [pc, #80]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80065c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80065c4:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80065c8:	4b11      	ldr	r3, [pc, #68]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80065ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065ce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80065d6:	490e      	ldr	r1, [pc, #56]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80065d8:	4313      	orrs	r3, r2
 80065da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80065e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80065e6:	d106      	bne.n	80065f6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80065e8:	4b09      	ldr	r3, [pc, #36]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80065ea:	68db      	ldr	r3, [r3, #12]
 80065ec:	4a08      	ldr	r2, [pc, #32]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80065ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80065f2:	60d3      	str	r3, [r2, #12]
 80065f4:	e020      	b.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80065fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80065fe:	d109      	bne.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006600:	4b03      	ldr	r3, [pc, #12]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006602:	68db      	ldr	r3, [r3, #12]
 8006604:	4a02      	ldr	r2, [pc, #8]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006606:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800660a:	60d3      	str	r3, [r2, #12]
 800660c:	e014      	b.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800660e:	bf00      	nop
 8006610:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006618:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800661c:	d10c      	bne.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	3304      	adds	r3, #4
 8006622:	2101      	movs	r1, #1
 8006624:	4618      	mov	r0, r3
 8006626:	f000 f8a5 	bl	8006774 <RCCEx_PLLSAI1_Config>
 800662a:	4603      	mov	r3, r0
 800662c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800662e:	7cfb      	ldrb	r3, [r7, #19]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d001      	beq.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8006634:	7cfb      	ldrb	r3, [r7, #19]
 8006636:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006640:	2b00      	cmp	r3, #0
 8006642:	d028      	beq.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006644:	4b4a      	ldr	r3, [pc, #296]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006646:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800664a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006652:	4947      	ldr	r1, [pc, #284]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006654:	4313      	orrs	r3, r2
 8006656:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800665e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006662:	d106      	bne.n	8006672 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006664:	4b42      	ldr	r3, [pc, #264]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006666:	68db      	ldr	r3, [r3, #12]
 8006668:	4a41      	ldr	r2, [pc, #260]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800666a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800666e:	60d3      	str	r3, [r2, #12]
 8006670:	e011      	b.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006676:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800667a:	d10c      	bne.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	3304      	adds	r3, #4
 8006680:	2101      	movs	r1, #1
 8006682:	4618      	mov	r0, r3
 8006684:	f000 f876 	bl	8006774 <RCCEx_PLLSAI1_Config>
 8006688:	4603      	mov	r3, r0
 800668a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800668c:	7cfb      	ldrb	r3, [r7, #19]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d001      	beq.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8006692:	7cfb      	ldrb	r3, [r7, #19]
 8006694:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d01e      	beq.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80066a2:	4b33      	ldr	r3, [pc, #204]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80066a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066a8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066b2:	492f      	ldr	r1, [pc, #188]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80066b4:	4313      	orrs	r3, r2
 80066b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066c0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80066c4:	d10c      	bne.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	3304      	adds	r3, #4
 80066ca:	2102      	movs	r1, #2
 80066cc:	4618      	mov	r0, r3
 80066ce:	f000 f851 	bl	8006774 <RCCEx_PLLSAI1_Config>
 80066d2:	4603      	mov	r3, r0
 80066d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80066d6:	7cfb      	ldrb	r3, [r7, #19]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d001      	beq.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80066dc:	7cfb      	ldrb	r3, [r7, #19]
 80066de:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d00b      	beq.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80066ec:	4b20      	ldr	r3, [pc, #128]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80066ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80066f2:	f023 0204 	bic.w	r2, r3, #4
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80066fc:	491c      	ldr	r1, [pc, #112]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80066fe:	4313      	orrs	r3, r2
 8006700:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800670c:	2b00      	cmp	r3, #0
 800670e:	d00b      	beq.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8006710:	4b17      	ldr	r3, [pc, #92]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006712:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006716:	f023 0218 	bic.w	r2, r3, #24
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006720:	4913      	ldr	r1, [pc, #76]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006722:	4313      	orrs	r3, r2
 8006724:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006730:	2b00      	cmp	r3, #0
 8006732:	d017      	beq.n	8006764 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006734:	4b0e      	ldr	r3, [pc, #56]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006736:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800673a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006744:	490a      	ldr	r1, [pc, #40]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006746:	4313      	orrs	r3, r2
 8006748:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006752:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006756:	d105      	bne.n	8006764 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006758:	4b05      	ldr	r3, [pc, #20]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800675a:	68db      	ldr	r3, [r3, #12]
 800675c:	4a04      	ldr	r2, [pc, #16]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800675e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006762:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006764:	7cbb      	ldrb	r3, [r7, #18]
}
 8006766:	4618      	mov	r0, r3
 8006768:	3718      	adds	r7, #24
 800676a:	46bd      	mov	sp, r7
 800676c:	bd80      	pop	{r7, pc}
 800676e:	bf00      	nop
 8006770:	40021000 	.word	0x40021000

08006774 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b084      	sub	sp, #16
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
 800677c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800677e:	2300      	movs	r3, #0
 8006780:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006782:	4b72      	ldr	r3, [pc, #456]	; (800694c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006784:	68db      	ldr	r3, [r3, #12]
 8006786:	f003 0303 	and.w	r3, r3, #3
 800678a:	2b00      	cmp	r3, #0
 800678c:	d00e      	beq.n	80067ac <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800678e:	4b6f      	ldr	r3, [pc, #444]	; (800694c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006790:	68db      	ldr	r3, [r3, #12]
 8006792:	f003 0203 	and.w	r2, r3, #3
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	429a      	cmp	r2, r3
 800679c:	d103      	bne.n	80067a6 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
       ||
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d142      	bne.n	800682c <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80067a6:	2301      	movs	r3, #1
 80067a8:	73fb      	strb	r3, [r7, #15]
 80067aa:	e03f      	b.n	800682c <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	2b03      	cmp	r3, #3
 80067b2:	d018      	beq.n	80067e6 <RCCEx_PLLSAI1_Config+0x72>
 80067b4:	2b03      	cmp	r3, #3
 80067b6:	d825      	bhi.n	8006804 <RCCEx_PLLSAI1_Config+0x90>
 80067b8:	2b01      	cmp	r3, #1
 80067ba:	d002      	beq.n	80067c2 <RCCEx_PLLSAI1_Config+0x4e>
 80067bc:	2b02      	cmp	r3, #2
 80067be:	d009      	beq.n	80067d4 <RCCEx_PLLSAI1_Config+0x60>
 80067c0:	e020      	b.n	8006804 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80067c2:	4b62      	ldr	r3, [pc, #392]	; (800694c <RCCEx_PLLSAI1_Config+0x1d8>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f003 0302 	and.w	r3, r3, #2
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d11d      	bne.n	800680a <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80067ce:	2301      	movs	r3, #1
 80067d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80067d2:	e01a      	b.n	800680a <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80067d4:	4b5d      	ldr	r3, [pc, #372]	; (800694c <RCCEx_PLLSAI1_Config+0x1d8>)
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d116      	bne.n	800680e <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80067e0:	2301      	movs	r3, #1
 80067e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80067e4:	e013      	b.n	800680e <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80067e6:	4b59      	ldr	r3, [pc, #356]	; (800694c <RCCEx_PLLSAI1_Config+0x1d8>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d10f      	bne.n	8006812 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80067f2:	4b56      	ldr	r3, [pc, #344]	; (800694c <RCCEx_PLLSAI1_Config+0x1d8>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d109      	bne.n	8006812 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80067fe:	2301      	movs	r3, #1
 8006800:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006802:	e006      	b.n	8006812 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006804:	2301      	movs	r3, #1
 8006806:	73fb      	strb	r3, [r7, #15]
      break;
 8006808:	e004      	b.n	8006814 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800680a:	bf00      	nop
 800680c:	e002      	b.n	8006814 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800680e:	bf00      	nop
 8006810:	e000      	b.n	8006814 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006812:	bf00      	nop
    }

    if(status == HAL_OK)
 8006814:	7bfb      	ldrb	r3, [r7, #15]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d108      	bne.n	800682c <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800681a:	4b4c      	ldr	r3, [pc, #304]	; (800694c <RCCEx_PLLSAI1_Config+0x1d8>)
 800681c:	68db      	ldr	r3, [r3, #12]
 800681e:	f023 0203 	bic.w	r2, r3, #3
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	4949      	ldr	r1, [pc, #292]	; (800694c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006828:	4313      	orrs	r3, r2
 800682a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800682c:	7bfb      	ldrb	r3, [r7, #15]
 800682e:	2b00      	cmp	r3, #0
 8006830:	f040 8086 	bne.w	8006940 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006834:	4b45      	ldr	r3, [pc, #276]	; (800694c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4a44      	ldr	r2, [pc, #272]	; (800694c <RCCEx_PLLSAI1_Config+0x1d8>)
 800683a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800683e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006840:	f7fd fa22 	bl	8003c88 <HAL_GetTick>
 8006844:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006846:	e009      	b.n	800685c <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006848:	f7fd fa1e 	bl	8003c88 <HAL_GetTick>
 800684c:	4602      	mov	r2, r0
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	1ad3      	subs	r3, r2, r3
 8006852:	2b02      	cmp	r3, #2
 8006854:	d902      	bls.n	800685c <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8006856:	2303      	movs	r3, #3
 8006858:	73fb      	strb	r3, [r7, #15]
        break;
 800685a:	e005      	b.n	8006868 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800685c:	4b3b      	ldr	r3, [pc, #236]	; (800694c <RCCEx_PLLSAI1_Config+0x1d8>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006864:	2b00      	cmp	r3, #0
 8006866:	d1ef      	bne.n	8006848 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006868:	7bfb      	ldrb	r3, [r7, #15]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d168      	bne.n	8006940 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d113      	bne.n	800689c <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006874:	4b35      	ldr	r3, [pc, #212]	; (800694c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006876:	691a      	ldr	r2, [r3, #16]
 8006878:	4b35      	ldr	r3, [pc, #212]	; (8006950 <RCCEx_PLLSAI1_Config+0x1dc>)
 800687a:	4013      	ands	r3, r2
 800687c:	687a      	ldr	r2, [r7, #4]
 800687e:	6892      	ldr	r2, [r2, #8]
 8006880:	0211      	lsls	r1, r2, #8
 8006882:	687a      	ldr	r2, [r7, #4]
 8006884:	68d2      	ldr	r2, [r2, #12]
 8006886:	06d2      	lsls	r2, r2, #27
 8006888:	4311      	orrs	r1, r2
 800688a:	687a      	ldr	r2, [r7, #4]
 800688c:	6852      	ldr	r2, [r2, #4]
 800688e:	3a01      	subs	r2, #1
 8006890:	0112      	lsls	r2, r2, #4
 8006892:	430a      	orrs	r2, r1
 8006894:	492d      	ldr	r1, [pc, #180]	; (800694c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006896:	4313      	orrs	r3, r2
 8006898:	610b      	str	r3, [r1, #16]
 800689a:	e02d      	b.n	80068f8 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	2b01      	cmp	r3, #1
 80068a0:	d115      	bne.n	80068ce <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80068a2:	4b2a      	ldr	r3, [pc, #168]	; (800694c <RCCEx_PLLSAI1_Config+0x1d8>)
 80068a4:	691a      	ldr	r2, [r3, #16]
 80068a6:	4b2b      	ldr	r3, [pc, #172]	; (8006954 <RCCEx_PLLSAI1_Config+0x1e0>)
 80068a8:	4013      	ands	r3, r2
 80068aa:	687a      	ldr	r2, [r7, #4]
 80068ac:	6892      	ldr	r2, [r2, #8]
 80068ae:	0211      	lsls	r1, r2, #8
 80068b0:	687a      	ldr	r2, [r7, #4]
 80068b2:	6912      	ldr	r2, [r2, #16]
 80068b4:	0852      	lsrs	r2, r2, #1
 80068b6:	3a01      	subs	r2, #1
 80068b8:	0552      	lsls	r2, r2, #21
 80068ba:	4311      	orrs	r1, r2
 80068bc:	687a      	ldr	r2, [r7, #4]
 80068be:	6852      	ldr	r2, [r2, #4]
 80068c0:	3a01      	subs	r2, #1
 80068c2:	0112      	lsls	r2, r2, #4
 80068c4:	430a      	orrs	r2, r1
 80068c6:	4921      	ldr	r1, [pc, #132]	; (800694c <RCCEx_PLLSAI1_Config+0x1d8>)
 80068c8:	4313      	orrs	r3, r2
 80068ca:	610b      	str	r3, [r1, #16]
 80068cc:	e014      	b.n	80068f8 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80068ce:	4b1f      	ldr	r3, [pc, #124]	; (800694c <RCCEx_PLLSAI1_Config+0x1d8>)
 80068d0:	691a      	ldr	r2, [r3, #16]
 80068d2:	4b21      	ldr	r3, [pc, #132]	; (8006958 <RCCEx_PLLSAI1_Config+0x1e4>)
 80068d4:	4013      	ands	r3, r2
 80068d6:	687a      	ldr	r2, [r7, #4]
 80068d8:	6892      	ldr	r2, [r2, #8]
 80068da:	0211      	lsls	r1, r2, #8
 80068dc:	687a      	ldr	r2, [r7, #4]
 80068de:	6952      	ldr	r2, [r2, #20]
 80068e0:	0852      	lsrs	r2, r2, #1
 80068e2:	3a01      	subs	r2, #1
 80068e4:	0652      	lsls	r2, r2, #25
 80068e6:	4311      	orrs	r1, r2
 80068e8:	687a      	ldr	r2, [r7, #4]
 80068ea:	6852      	ldr	r2, [r2, #4]
 80068ec:	3a01      	subs	r2, #1
 80068ee:	0112      	lsls	r2, r2, #4
 80068f0:	430a      	orrs	r2, r1
 80068f2:	4916      	ldr	r1, [pc, #88]	; (800694c <RCCEx_PLLSAI1_Config+0x1d8>)
 80068f4:	4313      	orrs	r3, r2
 80068f6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80068f8:	4b14      	ldr	r3, [pc, #80]	; (800694c <RCCEx_PLLSAI1_Config+0x1d8>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4a13      	ldr	r2, [pc, #76]	; (800694c <RCCEx_PLLSAI1_Config+0x1d8>)
 80068fe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006902:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006904:	f7fd f9c0 	bl	8003c88 <HAL_GetTick>
 8006908:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800690a:	e009      	b.n	8006920 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800690c:	f7fd f9bc 	bl	8003c88 <HAL_GetTick>
 8006910:	4602      	mov	r2, r0
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	1ad3      	subs	r3, r2, r3
 8006916:	2b02      	cmp	r3, #2
 8006918:	d902      	bls.n	8006920 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800691a:	2303      	movs	r3, #3
 800691c:	73fb      	strb	r3, [r7, #15]
          break;
 800691e:	e005      	b.n	800692c <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006920:	4b0a      	ldr	r3, [pc, #40]	; (800694c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006928:	2b00      	cmp	r3, #0
 800692a:	d0ef      	beq.n	800690c <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800692c:	7bfb      	ldrb	r3, [r7, #15]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d106      	bne.n	8006940 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006932:	4b06      	ldr	r3, [pc, #24]	; (800694c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006934:	691a      	ldr	r2, [r3, #16]
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	699b      	ldr	r3, [r3, #24]
 800693a:	4904      	ldr	r1, [pc, #16]	; (800694c <RCCEx_PLLSAI1_Config+0x1d8>)
 800693c:	4313      	orrs	r3, r2
 800693e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006940:	7bfb      	ldrb	r3, [r7, #15]
}
 8006942:	4618      	mov	r0, r3
 8006944:	3710      	adds	r7, #16
 8006946:	46bd      	mov	sp, r7
 8006948:	bd80      	pop	{r7, pc}
 800694a:	bf00      	nop
 800694c:	40021000 	.word	0x40021000
 8006950:	07ff800f 	.word	0x07ff800f
 8006954:	ff9f800f 	.word	0xff9f800f
 8006958:	f9ff800f 	.word	0xf9ff800f

0800695c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b084      	sub	sp, #16
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
 8006964:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006966:	2300      	movs	r3, #0
 8006968:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800696a:	4b72      	ldr	r3, [pc, #456]	; (8006b34 <RCCEx_PLLSAI2_Config+0x1d8>)
 800696c:	68db      	ldr	r3, [r3, #12]
 800696e:	f003 0303 	and.w	r3, r3, #3
 8006972:	2b00      	cmp	r3, #0
 8006974:	d00e      	beq.n	8006994 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006976:	4b6f      	ldr	r3, [pc, #444]	; (8006b34 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006978:	68db      	ldr	r3, [r3, #12]
 800697a:	f003 0203 	and.w	r2, r3, #3
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	429a      	cmp	r2, r3
 8006984:	d103      	bne.n	800698e <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
       ||
 800698a:	2b00      	cmp	r3, #0
 800698c:	d142      	bne.n	8006a14 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800698e:	2301      	movs	r3, #1
 8006990:	73fb      	strb	r3, [r7, #15]
 8006992:	e03f      	b.n	8006a14 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	2b03      	cmp	r3, #3
 800699a:	d018      	beq.n	80069ce <RCCEx_PLLSAI2_Config+0x72>
 800699c:	2b03      	cmp	r3, #3
 800699e:	d825      	bhi.n	80069ec <RCCEx_PLLSAI2_Config+0x90>
 80069a0:	2b01      	cmp	r3, #1
 80069a2:	d002      	beq.n	80069aa <RCCEx_PLLSAI2_Config+0x4e>
 80069a4:	2b02      	cmp	r3, #2
 80069a6:	d009      	beq.n	80069bc <RCCEx_PLLSAI2_Config+0x60>
 80069a8:	e020      	b.n	80069ec <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80069aa:	4b62      	ldr	r3, [pc, #392]	; (8006b34 <RCCEx_PLLSAI2_Config+0x1d8>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f003 0302 	and.w	r3, r3, #2
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d11d      	bne.n	80069f2 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80069b6:	2301      	movs	r3, #1
 80069b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80069ba:	e01a      	b.n	80069f2 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80069bc:	4b5d      	ldr	r3, [pc, #372]	; (8006b34 <RCCEx_PLLSAI2_Config+0x1d8>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d116      	bne.n	80069f6 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80069c8:	2301      	movs	r3, #1
 80069ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80069cc:	e013      	b.n	80069f6 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80069ce:	4b59      	ldr	r3, [pc, #356]	; (8006b34 <RCCEx_PLLSAI2_Config+0x1d8>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d10f      	bne.n	80069fa <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80069da:	4b56      	ldr	r3, [pc, #344]	; (8006b34 <RCCEx_PLLSAI2_Config+0x1d8>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d109      	bne.n	80069fa <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80069e6:	2301      	movs	r3, #1
 80069e8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80069ea:	e006      	b.n	80069fa <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80069ec:	2301      	movs	r3, #1
 80069ee:	73fb      	strb	r3, [r7, #15]
      break;
 80069f0:	e004      	b.n	80069fc <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80069f2:	bf00      	nop
 80069f4:	e002      	b.n	80069fc <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80069f6:	bf00      	nop
 80069f8:	e000      	b.n	80069fc <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80069fa:	bf00      	nop
    }

    if(status == HAL_OK)
 80069fc:	7bfb      	ldrb	r3, [r7, #15]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d108      	bne.n	8006a14 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8006a02:	4b4c      	ldr	r3, [pc, #304]	; (8006b34 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006a04:	68db      	ldr	r3, [r3, #12]
 8006a06:	f023 0203 	bic.w	r2, r3, #3
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4949      	ldr	r1, [pc, #292]	; (8006b34 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006a10:	4313      	orrs	r3, r2
 8006a12:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006a14:	7bfb      	ldrb	r3, [r7, #15]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	f040 8086 	bne.w	8006b28 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006a1c:	4b45      	ldr	r3, [pc, #276]	; (8006b34 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a44      	ldr	r2, [pc, #272]	; (8006b34 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006a22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a26:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a28:	f7fd f92e 	bl	8003c88 <HAL_GetTick>
 8006a2c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006a2e:	e009      	b.n	8006a44 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006a30:	f7fd f92a 	bl	8003c88 <HAL_GetTick>
 8006a34:	4602      	mov	r2, r0
 8006a36:	68bb      	ldr	r3, [r7, #8]
 8006a38:	1ad3      	subs	r3, r2, r3
 8006a3a:	2b02      	cmp	r3, #2
 8006a3c:	d902      	bls.n	8006a44 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8006a3e:	2303      	movs	r3, #3
 8006a40:	73fb      	strb	r3, [r7, #15]
        break;
 8006a42:	e005      	b.n	8006a50 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006a44:	4b3b      	ldr	r3, [pc, #236]	; (8006b34 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d1ef      	bne.n	8006a30 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006a50:	7bfb      	ldrb	r3, [r7, #15]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d168      	bne.n	8006b28 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d113      	bne.n	8006a84 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006a5c:	4b35      	ldr	r3, [pc, #212]	; (8006b34 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006a5e:	695a      	ldr	r2, [r3, #20]
 8006a60:	4b35      	ldr	r3, [pc, #212]	; (8006b38 <RCCEx_PLLSAI2_Config+0x1dc>)
 8006a62:	4013      	ands	r3, r2
 8006a64:	687a      	ldr	r2, [r7, #4]
 8006a66:	6892      	ldr	r2, [r2, #8]
 8006a68:	0211      	lsls	r1, r2, #8
 8006a6a:	687a      	ldr	r2, [r7, #4]
 8006a6c:	68d2      	ldr	r2, [r2, #12]
 8006a6e:	06d2      	lsls	r2, r2, #27
 8006a70:	4311      	orrs	r1, r2
 8006a72:	687a      	ldr	r2, [r7, #4]
 8006a74:	6852      	ldr	r2, [r2, #4]
 8006a76:	3a01      	subs	r2, #1
 8006a78:	0112      	lsls	r2, r2, #4
 8006a7a:	430a      	orrs	r2, r1
 8006a7c:	492d      	ldr	r1, [pc, #180]	; (8006b34 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006a7e:	4313      	orrs	r3, r2
 8006a80:	614b      	str	r3, [r1, #20]
 8006a82:	e02d      	b.n	8006ae0 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	2b01      	cmp	r3, #1
 8006a88:	d115      	bne.n	8006ab6 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006a8a:	4b2a      	ldr	r3, [pc, #168]	; (8006b34 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006a8c:	695a      	ldr	r2, [r3, #20]
 8006a8e:	4b2b      	ldr	r3, [pc, #172]	; (8006b3c <RCCEx_PLLSAI2_Config+0x1e0>)
 8006a90:	4013      	ands	r3, r2
 8006a92:	687a      	ldr	r2, [r7, #4]
 8006a94:	6892      	ldr	r2, [r2, #8]
 8006a96:	0211      	lsls	r1, r2, #8
 8006a98:	687a      	ldr	r2, [r7, #4]
 8006a9a:	6912      	ldr	r2, [r2, #16]
 8006a9c:	0852      	lsrs	r2, r2, #1
 8006a9e:	3a01      	subs	r2, #1
 8006aa0:	0552      	lsls	r2, r2, #21
 8006aa2:	4311      	orrs	r1, r2
 8006aa4:	687a      	ldr	r2, [r7, #4]
 8006aa6:	6852      	ldr	r2, [r2, #4]
 8006aa8:	3a01      	subs	r2, #1
 8006aaa:	0112      	lsls	r2, r2, #4
 8006aac:	430a      	orrs	r2, r1
 8006aae:	4921      	ldr	r1, [pc, #132]	; (8006b34 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006ab0:	4313      	orrs	r3, r2
 8006ab2:	614b      	str	r3, [r1, #20]
 8006ab4:	e014      	b.n	8006ae0 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006ab6:	4b1f      	ldr	r3, [pc, #124]	; (8006b34 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006ab8:	695a      	ldr	r2, [r3, #20]
 8006aba:	4b21      	ldr	r3, [pc, #132]	; (8006b40 <RCCEx_PLLSAI2_Config+0x1e4>)
 8006abc:	4013      	ands	r3, r2
 8006abe:	687a      	ldr	r2, [r7, #4]
 8006ac0:	6892      	ldr	r2, [r2, #8]
 8006ac2:	0211      	lsls	r1, r2, #8
 8006ac4:	687a      	ldr	r2, [r7, #4]
 8006ac6:	6952      	ldr	r2, [r2, #20]
 8006ac8:	0852      	lsrs	r2, r2, #1
 8006aca:	3a01      	subs	r2, #1
 8006acc:	0652      	lsls	r2, r2, #25
 8006ace:	4311      	orrs	r1, r2
 8006ad0:	687a      	ldr	r2, [r7, #4]
 8006ad2:	6852      	ldr	r2, [r2, #4]
 8006ad4:	3a01      	subs	r2, #1
 8006ad6:	0112      	lsls	r2, r2, #4
 8006ad8:	430a      	orrs	r2, r1
 8006ada:	4916      	ldr	r1, [pc, #88]	; (8006b34 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006adc:	4313      	orrs	r3, r2
 8006ade:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006ae0:	4b14      	ldr	r3, [pc, #80]	; (8006b34 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4a13      	ldr	r2, [pc, #76]	; (8006b34 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006ae6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006aea:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006aec:	f7fd f8cc 	bl	8003c88 <HAL_GetTick>
 8006af0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006af2:	e009      	b.n	8006b08 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006af4:	f7fd f8c8 	bl	8003c88 <HAL_GetTick>
 8006af8:	4602      	mov	r2, r0
 8006afa:	68bb      	ldr	r3, [r7, #8]
 8006afc:	1ad3      	subs	r3, r2, r3
 8006afe:	2b02      	cmp	r3, #2
 8006b00:	d902      	bls.n	8006b08 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8006b02:	2303      	movs	r3, #3
 8006b04:	73fb      	strb	r3, [r7, #15]
          break;
 8006b06:	e005      	b.n	8006b14 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006b08:	4b0a      	ldr	r3, [pc, #40]	; (8006b34 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d0ef      	beq.n	8006af4 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006b14:	7bfb      	ldrb	r3, [r7, #15]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d106      	bne.n	8006b28 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006b1a:	4b06      	ldr	r3, [pc, #24]	; (8006b34 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006b1c:	695a      	ldr	r2, [r3, #20]
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	699b      	ldr	r3, [r3, #24]
 8006b22:	4904      	ldr	r1, [pc, #16]	; (8006b34 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006b24:	4313      	orrs	r3, r2
 8006b26:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006b28:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	3710      	adds	r7, #16
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bd80      	pop	{r7, pc}
 8006b32:	bf00      	nop
 8006b34:	40021000 	.word	0x40021000
 8006b38:	07ff800f 	.word	0x07ff800f
 8006b3c:	ff9f800f 	.word	0xff9f800f
 8006b40:	f9ff800f 	.word	0xf9ff800f

08006b44 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b084      	sub	sp, #16
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d101      	bne.n	8006b56 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006b52:	2301      	movs	r3, #1
 8006b54:	e0be      	b.n	8006cd4 <HAL_SPI_Init+0x190>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d108      	bne.n	8006b70 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	685b      	ldr	r3, [r3, #4]
 8006b62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b66:	d009      	beq.n	8006b7c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	61da      	str	r2, [r3, #28]
 8006b6e:	e005      	b.n	8006b7c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2200      	movs	r2, #0
 8006b74:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2200      	movs	r2, #0
 8006b7a:	615a      	str	r2, [r3, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006b82:	b2db      	uxtb	r3, r3
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d106      	bne.n	8006b96 <HAL_SPI_Init+0x52>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006b90:	6878      	ldr	r0, [r7, #4]
 8006b92:	f000 f8cb 	bl	8006d2c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2202      	movs	r2, #2
 8006b9a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	681a      	ldr	r2, [r3, #0]
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006bac:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	68db      	ldr	r3, [r3, #12]
 8006bb2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006bb6:	d902      	bls.n	8006bbe <HAL_SPI_Init+0x7a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006bb8:	2300      	movs	r3, #0
 8006bba:	60fb      	str	r3, [r7, #12]
 8006bbc:	e002      	b.n	8006bc4 <HAL_SPI_Init+0x80>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006bbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006bc2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	68db      	ldr	r3, [r3, #12]
 8006bc8:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006bcc:	d007      	beq.n	8006bde <HAL_SPI_Init+0x9a>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	68db      	ldr	r3, [r3, #12]
 8006bd2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006bd6:	d002      	beq.n	8006bde <HAL_SPI_Init+0x9a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	685b      	ldr	r3, [r3, #4]
 8006be2:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	689b      	ldr	r3, [r3, #8]
 8006bea:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006bee:	431a      	orrs	r2, r3
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	691b      	ldr	r3, [r3, #16]
 8006bf4:	f003 0302 	and.w	r3, r3, #2
 8006bf8:	431a      	orrs	r2, r3
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	695b      	ldr	r3, [r3, #20]
 8006bfe:	f003 0301 	and.w	r3, r3, #1
 8006c02:	431a      	orrs	r2, r3
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	699b      	ldr	r3, [r3, #24]
 8006c08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c0c:	431a      	orrs	r2, r3
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	69db      	ldr	r3, [r3, #28]
 8006c12:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006c16:	431a      	orrs	r2, r3
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6a1b      	ldr	r3, [r3, #32]
 8006c1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c20:	ea42 0103 	orr.w	r1, r2, r3
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c28:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	430a      	orrs	r2, r1
 8006c32:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));
#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCL Configuration -------------------*/
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c3c:	d11b      	bne.n	8006c76 <HAL_SPI_Init+0x132>
  {
    /* Align the CRC Length on the data size */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d10b      	bne.n	8006c5e <HAL_SPI_Init+0x11a>
    {
      /* CRC Length aligned on the data size : value set by default */
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	68db      	ldr	r3, [r3, #12]
 8006c4a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006c4e:	d903      	bls.n	8006c58 <HAL_SPI_Init+0x114>
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2202      	movs	r2, #2
 8006c54:	631a      	str	r2, [r3, #48]	; 0x30
 8006c56:	e002      	b.n	8006c5e <HAL_SPI_Init+0x11a>
      }
      else
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2201      	movs	r2, #1
 8006c5c:	631a      	str	r2, [r3, #48]	; 0x30
      }
    }

    /* Configure : CRC Length */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c62:	2b02      	cmp	r3, #2
 8006c64:	d107      	bne.n	8006c76 <HAL_SPI_Init+0x132>
    {
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	681a      	ldr	r2, [r3, #0]
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c74:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	699b      	ldr	r3, [r3, #24]
 8006c7a:	0c1b      	lsrs	r3, r3, #16
 8006c7c:	f003 0204 	and.w	r2, r3, #4
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c84:	f003 0310 	and.w	r3, r3, #16
 8006c88:	431a      	orrs	r2, r3
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c8e:	f003 0308 	and.w	r3, r3, #8
 8006c92:	431a      	orrs	r2, r3
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	68db      	ldr	r3, [r3, #12]
 8006c98:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006c9c:	ea42 0103 	orr.w	r1, r2, r3
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	430a      	orrs	r2, r1
 8006cac:	605a      	str	r2, [r3, #4]
                                  (frxth & SPI_CR2_FRXTH)));

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006cb6:	d105      	bne.n	8006cc4 <HAL_SPI_Init+0x180>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	b292      	uxth	r2, r2
 8006cc2:	611a      	str	r2, [r3, #16]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2201      	movs	r2, #1
 8006cce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006cd2:	2300      	movs	r3, #0
}
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	3710      	adds	r7, #16
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	bd80      	pop	{r7, pc}

08006cdc <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b082      	sub	sp, #8
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d101      	bne.n	8006cee <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8006cea:	2301      	movs	r3, #1
 8006cec:	e01a      	b.n	8006d24 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2202      	movs	r2, #2
 8006cf2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	681a      	ldr	r2, [r3, #0]
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d04:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f000 f81a 	bl	8006d40 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2200      	movs	r2, #0
 8006d16:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  return HAL_OK;
 8006d22:	2300      	movs	r3, #0
}
 8006d24:	4618      	mov	r0, r3
 8006d26:	3708      	adds	r7, #8
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	bd80      	pop	{r7, pc}

08006d2c <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8006d2c:	b480      	push	{r7}
 8006d2e:	b083      	sub	sp, #12
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8006d34:	bf00      	nop
 8006d36:	370c      	adds	r7, #12
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3e:	4770      	bx	lr

08006d40 <HAL_SPI_MspDeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
{
 8006d40:	b480      	push	{r7}
 8006d42:	b083      	sub	sp, #12
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspDeInit should be implemented in the user file
   */
}
 8006d48:	bf00      	nop
 8006d4a:	370c      	adds	r7, #12
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d52:	4770      	bx	lr

08006d54 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b08c      	sub	sp, #48	; 0x30
 8006d58:	af02      	add	r7, sp, #8
 8006d5a:	60f8      	str	r0, [r7, #12]
 8006d5c:	60b9      	str	r1, [r7, #8]
 8006d5e:	603b      	str	r3, [r7, #0]
 8006d60:	4613      	mov	r3, r2
 8006d62:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 8006d64:	2300      	movs	r3, #0
 8006d66:	61bb      	str	r3, [r7, #24]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006d68:	2300      	movs	r3, #0
 8006d6a:	75fb      	strb	r3, [r7, #23]
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (hspi->State != HAL_SPI_STATE_READY)
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006d78:	b2db      	uxtb	r3, r3
 8006d7a:	2b01      	cmp	r3, #1
 8006d7c:	d003      	beq.n	8006d86 <HAL_SPI_Receive+0x32>
  {
    errorcode = HAL_BUSY;
 8006d7e:	2302      	movs	r3, #2
 8006d80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    goto error;
 8006d84:	e1cc      	b.n	8007120 <HAL_SPI_Receive+0x3cc>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	685b      	ldr	r3, [r3, #4]
 8006d8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006d8e:	d112      	bne.n	8006db6 <HAL_SPI_Receive+0x62>
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	689b      	ldr	r3, [r3, #8]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d10e      	bne.n	8006db6 <HAL_SPI_Receive+0x62>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	2204      	movs	r2, #4
 8006d9c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006da0:	88fa      	ldrh	r2, [r7, #6]
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	9300      	str	r3, [sp, #0]
 8006da6:	4613      	mov	r3, r2
 8006da8:	68ba      	ldr	r2, [r7, #8]
 8006daa:	68b9      	ldr	r1, [r7, #8]
 8006dac:	68f8      	ldr	r0, [r7, #12]
 8006dae:	f000 f9c1 	bl	8007134 <HAL_SPI_TransmitReceive>
 8006db2:	4603      	mov	r3, r0
 8006db4:	e1ba      	b.n	800712c <HAL_SPI_Receive+0x3d8>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006dbc:	2b01      	cmp	r3, #1
 8006dbe:	d101      	bne.n	8006dc4 <HAL_SPI_Receive+0x70>
 8006dc0:	2302      	movs	r3, #2
 8006dc2:	e1b3      	b.n	800712c <HAL_SPI_Receive+0x3d8>
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	2201      	movs	r2, #1
 8006dc8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006dcc:	f7fc ff5c 	bl	8003c88 <HAL_GetTick>
 8006dd0:	6238      	str	r0, [r7, #32]

  if ((pData == NULL) || (Size == 0U))
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d002      	beq.n	8006dde <HAL_SPI_Receive+0x8a>
 8006dd8:	88fb      	ldrh	r3, [r7, #6]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d103      	bne.n	8006de6 <HAL_SPI_Receive+0x92>
  {
    errorcode = HAL_ERROR;
 8006dde:	2301      	movs	r3, #1
 8006de0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    goto error;
 8006de4:	e19c      	b.n	8007120 <HAL_SPI_Receive+0x3cc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	2204      	movs	r2, #4
 8006dea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	2200      	movs	r2, #0
 8006df2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	68ba      	ldr	r2, [r7, #8]
 8006df8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	88fa      	ldrh	r2, [r7, #6]
 8006dfe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	88fa      	ldrh	r2, [r7, #6]
 8006e06:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	2200      	movs	r2, #0
 8006e14:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	2200      	movs	r2, #0
 8006e20:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	2200      	movs	r2, #0
 8006e26:	651a      	str	r2, [r3, #80]	; 0x50

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e30:	d118      	bne.n	8006e64 <HAL_SPI_Receive+0x110>
  {
    SPI_RESET_CRC(hspi);
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	681a      	ldr	r2, [r3, #0]
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006e40:	601a      	str	r2, [r3, #0]
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	681a      	ldr	r2, [r3, #0]
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006e50:	601a      	str	r2, [r3, #0]
    /* this is done to handle the CRCNEXT before the latest data */
    hspi->RxXferCount--;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006e58:	b29b      	uxth	r3, r3
 8006e5a:	3b01      	subs	r3, #1
 8006e5c:	b29a      	uxth	r2, r3
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	68db      	ldr	r3, [r3, #12]
 8006e68:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006e6c:	d908      	bls.n	8006e80 <HAL_SPI_Receive+0x12c>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	685a      	ldr	r2, [r3, #4]
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006e7c:	605a      	str	r2, [r3, #4]
 8006e7e:	e007      	b.n	8006e90 <HAL_SPI_Receive+0x13c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	685a      	ldr	r2, [r3, #4]
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006e8e:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	689b      	ldr	r3, [r3, #8]
 8006e94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e98:	d10f      	bne.n	8006eba <HAL_SPI_Receive+0x166>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	681a      	ldr	r2, [r3, #0]
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ea8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	681a      	ldr	r2, [r3, #0]
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006eb8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ec4:	2b40      	cmp	r3, #64	; 0x40
 8006ec6:	d007      	beq.n	8006ed8 <HAL_SPI_Receive+0x184>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	681a      	ldr	r2, [r3, #0]
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006ed6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	68db      	ldr	r3, [r3, #12]
 8006edc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006ee0:	d871      	bhi.n	8006fc6 <HAL_SPI_Receive+0x272>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006ee2:	e035      	b.n	8006f50 <HAL_SPI_Receive+0x1fc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	689b      	ldr	r3, [r3, #8]
 8006eea:	f003 0301 	and.w	r3, r3, #1
 8006eee:	2b01      	cmp	r3, #1
 8006ef0:	d117      	bne.n	8006f22 <HAL_SPI_Receive+0x1ce>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f103 020c 	add.w	r2, r3, #12
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006efe:	7812      	ldrb	r2, [r2, #0]
 8006f00:	b2d2      	uxtb	r2, r2
 8006f02:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f08:	1c5a      	adds	r2, r3, #1
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006f14:	b29b      	uxth	r3, r3
 8006f16:	3b01      	subs	r3, #1
 8006f18:	b29a      	uxth	r2, r3
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8006f20:	e016      	b.n	8006f50 <HAL_SPI_Receive+0x1fc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006f22:	f7fc feb1 	bl	8003c88 <HAL_GetTick>
 8006f26:	4602      	mov	r2, r0
 8006f28:	6a3b      	ldr	r3, [r7, #32]
 8006f2a:	1ad3      	subs	r3, r2, r3
 8006f2c:	683a      	ldr	r2, [r7, #0]
 8006f2e:	429a      	cmp	r2, r3
 8006f30:	d803      	bhi.n	8006f3a <HAL_SPI_Receive+0x1e6>
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f38:	d102      	bne.n	8006f40 <HAL_SPI_Receive+0x1ec>
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d107      	bne.n	8006f50 <HAL_SPI_Receive+0x1fc>
        {
          errorcode = HAL_TIMEOUT;
 8006f40:	2303      	movs	r3, #3
 8006f42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          hspi->State = HAL_SPI_STATE_READY;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	2201      	movs	r2, #1
 8006f4a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8006f4e:	e0e7      	b.n	8007120 <HAL_SPI_Receive+0x3cc>
    while (hspi->RxXferCount > 0U)
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006f56:	b29b      	uxth	r3, r3
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d1c3      	bne.n	8006ee4 <HAL_SPI_Receive+0x190>
 8006f5c:	e039      	b.n	8006fd2 <HAL_SPI_Receive+0x27e>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	689b      	ldr	r3, [r3, #8]
 8006f64:	f003 0301 	and.w	r3, r3, #1
 8006f68:	2b01      	cmp	r3, #1
 8006f6a:	d115      	bne.n	8006f98 <HAL_SPI_Receive+0x244>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	68da      	ldr	r2, [r3, #12]
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f76:	b292      	uxth	r2, r2
 8006f78:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f7e:	1c9a      	adds	r2, r3, #2
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006f8a:	b29b      	uxth	r3, r3
 8006f8c:	3b01      	subs	r3, #1
 8006f8e:	b29a      	uxth	r2, r3
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8006f96:	e016      	b.n	8006fc6 <HAL_SPI_Receive+0x272>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006f98:	f7fc fe76 	bl	8003c88 <HAL_GetTick>
 8006f9c:	4602      	mov	r2, r0
 8006f9e:	6a3b      	ldr	r3, [r7, #32]
 8006fa0:	1ad3      	subs	r3, r2, r3
 8006fa2:	683a      	ldr	r2, [r7, #0]
 8006fa4:	429a      	cmp	r2, r3
 8006fa6:	d803      	bhi.n	8006fb0 <HAL_SPI_Receive+0x25c>
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fae:	d102      	bne.n	8006fb6 <HAL_SPI_Receive+0x262>
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d107      	bne.n	8006fc6 <HAL_SPI_Receive+0x272>
        {
          errorcode = HAL_TIMEOUT;
 8006fb6:	2303      	movs	r3, #3
 8006fb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          hspi->State = HAL_SPI_STATE_READY;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	2201      	movs	r2, #1
 8006fc0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8006fc4:	e0ac      	b.n	8007120 <HAL_SPI_Receive+0x3cc>
    while (hspi->RxXferCount > 0U)
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006fcc:	b29b      	uxth	r3, r3
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d1c5      	bne.n	8006f5e <HAL_SPI_Receive+0x20a>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Handle the CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006fda:	d178      	bne.n	80070ce <HAL_SPI_Receive+0x37a>
  {
    /* freeze the CRC before the latest data */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	681a      	ldr	r2, [r3, #0]
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006fea:	601a      	str	r2, [r3, #0]

    /* Read the latest data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8006fec:	6a3b      	ldr	r3, [r7, #32]
 8006fee:	9300      	str	r3, [sp, #0]
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	2201      	movs	r2, #1
 8006ff4:	2101      	movs	r1, #1
 8006ff6:	68f8      	ldr	r0, [r7, #12]
 8006ff8:	f001 fa00 	bl	80083fc <SPI_WaitFlagStateUntilTimeout>
 8006ffc:	4603      	mov	r3, r0
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d003      	beq.n	800700a <HAL_SPI_Receive+0x2b6>
    {
      /* the latest data has not been received */
      errorcode = HAL_TIMEOUT;
 8007002:	2303      	movs	r3, #3
 8007004:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      goto error;
 8007008:	e08a      	b.n	8007120 <HAL_SPI_Receive+0x3cc>
    }

    /* Receive last data in 16 Bit mode */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	68db      	ldr	r3, [r3, #12]
 800700e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007012:	d907      	bls.n	8007024 <HAL_SPI_Receive+0x2d0>
    {
      *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	68da      	ldr	r2, [r3, #12]
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800701e:	b292      	uxth	r2, r2
 8007020:	801a      	strh	r2, [r3, #0]
 8007022:	e008      	b.n	8007036 <HAL_SPI_Receive+0x2e2>
    }
    /* Receive last data in 8 Bit mode */
    else
    {
      (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f103 020c 	add.w	r2, r3, #12
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007030:	7812      	ldrb	r2, [r2, #0]
 8007032:	b2d2      	uxtb	r2, r2
 8007034:	701a      	strb	r2, [r3, #0]
    }

    /* Wait the CRC data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8007036:	6a3b      	ldr	r3, [r7, #32]
 8007038:	9300      	str	r3, [sp, #0]
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	2201      	movs	r2, #1
 800703e:	2101      	movs	r1, #1
 8007040:	68f8      	ldr	r0, [r7, #12]
 8007042:	f001 f9db 	bl	80083fc <SPI_WaitFlagStateUntilTimeout>
 8007046:	4603      	mov	r3, r0
 8007048:	2b00      	cmp	r3, #0
 800704a:	d009      	beq.n	8007060 <HAL_SPI_Receive+0x30c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007050:	f043 0202 	orr.w	r2, r3, #2
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	661a      	str	r2, [r3, #96]	; 0x60
      errorcode = HAL_TIMEOUT;
 8007058:	2303      	movs	r3, #3
 800705a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      goto error;
 800705e:	e05f      	b.n	8007120 <HAL_SPI_Receive+0x3cc>
    }

    /* Read CRC to Flush DR and RXNE flag */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	68db      	ldr	r3, [r3, #12]
 8007064:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007068:	d105      	bne.n	8007076 <HAL_SPI_Receive+0x322>
    {
      /* Read 16bit CRC */
      tmpreg = READ_REG(hspi->Instance->DR);
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	68db      	ldr	r3, [r3, #12]
 8007070:	61bb      	str	r3, [r7, #24]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8007072:	69bb      	ldr	r3, [r7, #24]
 8007074:	e02b      	b.n	80070ce <HAL_SPI_Receive+0x37a>
    }
    else
    {
      /* Initialize the 8bit temporary pointer */
      ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	330c      	adds	r3, #12
 800707c:	61fb      	str	r3, [r7, #28]
      /* Read 8bit CRC */
      tmpreg8 = *ptmpreg8;
 800707e:	69fb      	ldr	r3, [r7, #28]
 8007080:	781b      	ldrb	r3, [r3, #0]
 8007082:	b2db      	uxtb	r3, r3
 8007084:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007086:	7dfb      	ldrb	r3, [r7, #23]

      if ((hspi->Init.DataSize == SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	68db      	ldr	r3, [r3, #12]
 800708c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007090:	d11d      	bne.n	80070ce <HAL_SPI_Receive+0x37a>
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007096:	2b02      	cmp	r3, #2
 8007098:	d119      	bne.n	80070ce <HAL_SPI_Receive+0x37a>
      {
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 800709a:	6a3b      	ldr	r3, [r7, #32]
 800709c:	9300      	str	r3, [sp, #0]
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	2201      	movs	r2, #1
 80070a2:	2101      	movs	r1, #1
 80070a4:	68f8      	ldr	r0, [r7, #12]
 80070a6:	f001 f9a9 	bl	80083fc <SPI_WaitFlagStateUntilTimeout>
 80070aa:	4603      	mov	r3, r0
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d009      	beq.n	80070c4 <HAL_SPI_Receive+0x370>
        {
          /* Error on the CRC reception */
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070b4:	f043 0202 	orr.w	r2, r3, #2
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	661a      	str	r2, [r3, #96]	; 0x60
          errorcode = HAL_TIMEOUT;
 80070bc:	2303      	movs	r3, #3
 80070be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 80070c2:	e02d      	b.n	8007120 <HAL_SPI_Receive+0x3cc>
        }
        /* Read 8bit CRC again in case of 16bit CRC in 8bit Data mode */
        tmpreg8 = *ptmpreg8;
 80070c4:	69fb      	ldr	r3, [r7, #28]
 80070c6:	781b      	ldrb	r3, [r3, #0]
 80070c8:	b2db      	uxtb	r3, r3
 80070ca:	75fb      	strb	r3, [r7, #23]
        /* To avoid GCC warning */
        UNUSED(tmpreg8);
 80070cc:	7dfb      	ldrb	r3, [r7, #23]
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80070ce:	6a3a      	ldr	r2, [r7, #32]
 80070d0:	6839      	ldr	r1, [r7, #0]
 80070d2:	68f8      	ldr	r0, [r7, #12]
 80070d4:	f001 fab0 	bl	8008638 <SPI_EndRxTransaction>
 80070d8:	4603      	mov	r3, r0
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d002      	beq.n	80070e4 <HAL_SPI_Receive+0x390>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	2220      	movs	r2, #32
 80070e2:	661a      	str	r2, [r3, #96]	; 0x60
  }

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	689b      	ldr	r3, [r3, #8]
 80070ea:	f003 0310 	and.w	r3, r3, #16
 80070ee:	2b10      	cmp	r3, #16
 80070f0:	d10a      	bne.n	8007108 <HAL_SPI_Receive+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070f6:	f043 0202 	orr.w	r2, r3, #2
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	661a      	str	r2, [r3, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8007106:	609a      	str	r2, [r3, #8]
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800710c:	2b00      	cmp	r3, #0
 800710e:	d003      	beq.n	8007118 <HAL_SPI_Receive+0x3c4>
  {
    errorcode = HAL_ERROR;
 8007110:	2301      	movs	r3, #1
 8007112:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007116:	e003      	b.n	8007120 <HAL_SPI_Receive+0x3cc>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	2201      	movs	r2, #1
 800711c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	2200      	movs	r2, #0
 8007124:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007128:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800712c:	4618      	mov	r0, r3
 800712e:	3728      	adds	r7, #40	; 0x28
 8007130:	46bd      	mov	sp, r7
 8007132:	bd80      	pop	{r7, pc}

08007134 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b092      	sub	sp, #72	; 0x48
 8007138:	af02      	add	r7, sp, #8
 800713a:	60f8      	str	r0, [r7, #12]
 800713c:	60b9      	str	r1, [r7, #8]
 800713e:	607a      	str	r2, [r7, #4]
 8007140:	807b      	strh	r3, [r7, #2]
  uint16_t             initial_RxXferCount;
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 8007142:	2300      	movs	r3, #0
 8007144:	61bb      	str	r3, [r7, #24]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007146:	2300      	movs	r3, #0
 8007148:	75fb      	strb	r3, [r7, #23]
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800714a:	2301      	movs	r3, #1
 800714c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800714e:	2300      	movs	r3, #0
 8007150:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800715a:	2b01      	cmp	r3, #1
 800715c:	d101      	bne.n	8007162 <HAL_SPI_TransmitReceive+0x2e>
 800715e:	2302      	movs	r3, #2
 8007160:	e322      	b.n	80077a8 <HAL_SPI_TransmitReceive+0x674>
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	2201      	movs	r2, #1
 8007166:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800716a:	f7fc fd8d 	bl	8003c88 <HAL_GetTick>
 800716e:	6378      	str	r0, [r7, #52]	; 0x34

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007176:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  tmp_mode            = hspi->Init.Mode;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	685b      	ldr	r3, [r3, #4]
 800717e:	62fb      	str	r3, [r7, #44]	; 0x2c
  initial_TxXferCount = Size;
 8007180:	887b      	ldrh	r3, [r7, #2]
 8007182:	857b      	strh	r3, [r7, #42]	; 0x2a
  initial_RxXferCount = Size;
 8007184:	887b      	ldrh	r3, [r7, #2]
 8007186:	853b      	strh	r3, [r7, #40]	; 0x28
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	627b      	str	r3, [r7, #36]	; 0x24
  spi_cr2             = READ_REG(hspi->Instance->CR2);
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	685b      	ldr	r3, [r3, #4]
 8007196:	623b      	str	r3, [r7, #32]
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007198:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800719c:	2b01      	cmp	r3, #1
 800719e:	d00f      	beq.n	80071c0 <HAL_SPI_TransmitReceive+0x8c>
 80071a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80071a6:	d107      	bne.n	80071b8 <HAL_SPI_TransmitReceive+0x84>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	689b      	ldr	r3, [r3, #8]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d103      	bne.n	80071b8 <HAL_SPI_TransmitReceive+0x84>
 80071b0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80071b4:	2b04      	cmp	r3, #4
 80071b6:	d003      	beq.n	80071c0 <HAL_SPI_TransmitReceive+0x8c>
  {
    errorcode = HAL_BUSY;
 80071b8:	2302      	movs	r3, #2
 80071ba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    goto error;
 80071be:	e2ed      	b.n	800779c <HAL_SPI_TransmitReceive+0x668>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d005      	beq.n	80071d2 <HAL_SPI_TransmitReceive+0x9e>
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d002      	beq.n	80071d2 <HAL_SPI_TransmitReceive+0x9e>
 80071cc:	887b      	ldrh	r3, [r7, #2]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d103      	bne.n	80071da <HAL_SPI_TransmitReceive+0xa6>
  {
    errorcode = HAL_ERROR;
 80071d2:	2301      	movs	r3, #1
 80071d4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    goto error;
 80071d8:	e2e0      	b.n	800779c <HAL_SPI_TransmitReceive+0x668>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80071e0:	b2db      	uxtb	r3, r3
 80071e2:	2b04      	cmp	r3, #4
 80071e4:	d003      	beq.n	80071ee <HAL_SPI_TransmitReceive+0xba>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	2205      	movs	r2, #5
 80071ea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	2200      	movs	r2, #0
 80071f2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	687a      	ldr	r2, [r7, #4]
 80071f8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	887a      	ldrh	r2, [r7, #2]
 80071fe:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	887a      	ldrh	r2, [r7, #2]
 8007206:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	68ba      	ldr	r2, [r7, #8]
 800720e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	887a      	ldrh	r2, [r7, #2]
 8007214:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	887a      	ldrh	r2, [r7, #2]
 800721a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	2200      	movs	r2, #0
 8007220:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	2200      	movs	r2, #0
 8007226:	651a      	str	r2, [r3, #80]	; 0x50

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800722c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007230:	d10f      	bne.n	8007252 <HAL_SPI_TransmitReceive+0x11e>
  {
    SPI_RESET_CRC(hspi);
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	681a      	ldr	r2, [r3, #0]
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007240:	601a      	str	r2, [r3, #0]
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	681a      	ldr	r2, [r3, #0]
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007250:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	68db      	ldr	r3, [r3, #12]
 8007256:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800725a:	d802      	bhi.n	8007262 <HAL_SPI_TransmitReceive+0x12e>
 800725c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800725e:	2b01      	cmp	r3, #1
 8007260:	d908      	bls.n	8007274 <HAL_SPI_TransmitReceive+0x140>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	685a      	ldr	r2, [r3, #4]
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007270:	605a      	str	r2, [r3, #4]
 8007272:	e007      	b.n	8007284 <HAL_SPI_TransmitReceive+0x150>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	685a      	ldr	r2, [r3, #4]
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007282:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800728e:	2b40      	cmp	r3, #64	; 0x40
 8007290:	d007      	beq.n	80072a2 <HAL_SPI_TransmitReceive+0x16e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	681a      	ldr	r2, [r3, #0]
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80072a0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	68db      	ldr	r3, [r3, #12]
 80072a6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80072aa:	f240 80ce 	bls.w	800744a <HAL_SPI_TransmitReceive+0x316>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	685b      	ldr	r3, [r3, #4]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d003      	beq.n	80072be <HAL_SPI_TransmitReceive+0x18a>
 80072b6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80072b8:	2b01      	cmp	r3, #1
 80072ba:	f040 80b8 	bne.w	800742e <HAL_SPI_TransmitReceive+0x2fa>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072c2:	881a      	ldrh	r2, [r3, #0]
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072ce:	1c9a      	adds	r2, r3, #2
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072d8:	b29b      	uxth	r3, r3
 80072da:	3b01      	subs	r3, #1
 80072dc:	b29a      	uxth	r2, r3
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	87da      	strh	r2, [r3, #62]	; 0x3e

#if (USE_SPI_CRC != 0U)
      /* Enable CRC Transmission */
      if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072e6:	b29b      	uxth	r3, r3
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	f040 80a0 	bne.w	800742e <HAL_SPI_TransmitReceive+0x2fa>
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072f6:	f040 809a 	bne.w	800742e <HAL_SPI_TransmitReceive+0x2fa>
      {
        /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
        if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 80072fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072fc:	f003 0304 	and.w	r3, r3, #4
 8007300:	2b00      	cmp	r3, #0
 8007302:	d10c      	bne.n	800731e <HAL_SPI_TransmitReceive+0x1ea>
 8007304:	6a3b      	ldr	r3, [r7, #32]
 8007306:	f003 0308 	and.w	r3, r3, #8
 800730a:	2b00      	cmp	r3, #0
 800730c:	d007      	beq.n	800731e <HAL_SPI_TransmitReceive+0x1ea>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	681a      	ldr	r2, [r3, #0]
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800731c:	601a      	str	r2, [r3, #0]
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	681a      	ldr	r2, [r3, #0]
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800732c:	601a      	str	r2, [r3, #0]
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800732e:	e07e      	b.n	800742e <HAL_SPI_TransmitReceive+0x2fa>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	689b      	ldr	r3, [r3, #8]
 8007336:	f003 0302 	and.w	r3, r3, #2
 800733a:	2b02      	cmp	r3, #2
 800733c:	d13f      	bne.n	80073be <HAL_SPI_TransmitReceive+0x28a>
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007342:	b29b      	uxth	r3, r3
 8007344:	2b00      	cmp	r3, #0
 8007346:	d03a      	beq.n	80073be <HAL_SPI_TransmitReceive+0x28a>
 8007348:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800734a:	2b01      	cmp	r3, #1
 800734c:	d137      	bne.n	80073be <HAL_SPI_TransmitReceive+0x28a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007352:	881a      	ldrh	r2, [r3, #0]
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800735e:	1c9a      	adds	r2, r3, #2
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007368:	b29b      	uxth	r3, r3
 800736a:	3b01      	subs	r3, #1
 800736c:	b29a      	uxth	r2, r3
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007372:	2300      	movs	r3, #0
 8007374:	63fb      	str	r3, [r7, #60]	; 0x3c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800737a:	b29b      	uxth	r3, r3
 800737c:	2b00      	cmp	r3, #0
 800737e:	d11e      	bne.n	80073be <HAL_SPI_TransmitReceive+0x28a>
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007384:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007388:	d119      	bne.n	80073be <HAL_SPI_TransmitReceive+0x28a>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 800738a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800738c:	f003 0304 	and.w	r3, r3, #4
 8007390:	2b00      	cmp	r3, #0
 8007392:	d10c      	bne.n	80073ae <HAL_SPI_TransmitReceive+0x27a>
 8007394:	6a3b      	ldr	r3, [r7, #32]
 8007396:	f003 0308 	and.w	r3, r3, #8
 800739a:	2b00      	cmp	r3, #0
 800739c:	d007      	beq.n	80073ae <HAL_SPI_TransmitReceive+0x27a>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	681a      	ldr	r2, [r3, #0]
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80073ac:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	681a      	ldr	r2, [r3, #0]
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80073bc:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	689b      	ldr	r3, [r3, #8]
 80073c4:	f003 0301 	and.w	r3, r3, #1
 80073c8:	2b01      	cmp	r3, #1
 80073ca:	d11c      	bne.n	8007406 <HAL_SPI_TransmitReceive+0x2d2>
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80073d2:	b29b      	uxth	r3, r3
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d016      	beq.n	8007406 <HAL_SPI_TransmitReceive+0x2d2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	68da      	ldr	r2, [r3, #12]
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073e2:	b292      	uxth	r2, r2
 80073e4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ea:	1c9a      	adds	r2, r3, #2
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80073f6:	b29b      	uxth	r3, r3
 80073f8:	3b01      	subs	r3, #1
 80073fa:	b29a      	uxth	r2, r3
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007402:	2301      	movs	r3, #1
 8007404:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007406:	f7fc fc3f 	bl	8003c88 <HAL_GetTick>
 800740a:	4602      	mov	r2, r0
 800740c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800740e:	1ad3      	subs	r3, r2, r3
 8007410:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007412:	429a      	cmp	r2, r3
 8007414:	d80b      	bhi.n	800742e <HAL_SPI_TransmitReceive+0x2fa>
 8007416:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007418:	f1b3 3fff 	cmp.w	r3, #4294967295
 800741c:	d007      	beq.n	800742e <HAL_SPI_TransmitReceive+0x2fa>
      {
        errorcode = HAL_TIMEOUT;
 800741e:	2303      	movs	r3, #3
 8007420:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        hspi->State = HAL_SPI_STATE_READY;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	2201      	movs	r2, #1
 8007428:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 800742c:	e1b6      	b.n	800779c <HAL_SPI_TransmitReceive+0x668>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007432:	b29b      	uxth	r3, r3
 8007434:	2b00      	cmp	r3, #0
 8007436:	f47f af7b 	bne.w	8007330 <HAL_SPI_TransmitReceive+0x1fc>
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007440:	b29b      	uxth	r3, r3
 8007442:	2b00      	cmp	r3, #0
 8007444:	f47f af74 	bne.w	8007330 <HAL_SPI_TransmitReceive+0x1fc>
 8007448:	e12d      	b.n	80076a6 <HAL_SPI_TransmitReceive+0x572>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	685b      	ldr	r3, [r3, #4]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d003      	beq.n	800745a <HAL_SPI_TransmitReceive+0x326>
 8007452:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007454:	2b01      	cmp	r3, #1
 8007456:	f040 8119 	bne.w	800768c <HAL_SPI_TransmitReceive+0x558>
    {
      if (hspi->TxXferCount > 1U)
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800745e:	b29b      	uxth	r3, r3
 8007460:	2b01      	cmp	r3, #1
 8007462:	d912      	bls.n	800748a <HAL_SPI_TransmitReceive+0x356>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007468:	881a      	ldrh	r2, [r3, #0]
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007474:	1c9a      	adds	r2, r3, #2
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800747e:	b29b      	uxth	r3, r3
 8007480:	3b02      	subs	r3, #2
 8007482:	b29a      	uxth	r2, r3
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007488:	e100      	b.n	800768c <HAL_SPI_TransmitReceive+0x558>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	330c      	adds	r3, #12
 8007494:	7812      	ldrb	r2, [r2, #0]
 8007496:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800749c:	1c5a      	adds	r2, r3, #1
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074a6:	b29b      	uxth	r3, r3
 80074a8:	3b01      	subs	r3, #1
 80074aa:	b29a      	uxth	r2, r3
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	87da      	strh	r2, [r3, #62]	; 0x3e

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074b4:	b29b      	uxth	r3, r3
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	f040 80e8 	bne.w	800768c <HAL_SPI_TransmitReceive+0x558>
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074c4:	f040 80e2 	bne.w	800768c <HAL_SPI_TransmitReceive+0x558>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 80074c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ca:	f003 0304 	and.w	r3, r3, #4
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d10c      	bne.n	80074ec <HAL_SPI_TransmitReceive+0x3b8>
 80074d2:	6a3b      	ldr	r3, [r7, #32]
 80074d4:	f003 0308 	and.w	r3, r3, #8
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d007      	beq.n	80074ec <HAL_SPI_TransmitReceive+0x3b8>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	681a      	ldr	r2, [r3, #0]
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80074ea:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	681a      	ldr	r2, [r3, #0]
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80074fa:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80074fc:	e0c6      	b.n	800768c <HAL_SPI_TransmitReceive+0x558>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	689b      	ldr	r3, [r3, #8]
 8007504:	f003 0302 	and.w	r3, r3, #2
 8007508:	2b02      	cmp	r3, #2
 800750a:	d158      	bne.n	80075be <HAL_SPI_TransmitReceive+0x48a>
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007510:	b29b      	uxth	r3, r3
 8007512:	2b00      	cmp	r3, #0
 8007514:	d053      	beq.n	80075be <HAL_SPI_TransmitReceive+0x48a>
 8007516:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007518:	2b01      	cmp	r3, #1
 800751a:	d150      	bne.n	80075be <HAL_SPI_TransmitReceive+0x48a>
      {
        if (hspi->TxXferCount > 1U)
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007520:	b29b      	uxth	r3, r3
 8007522:	2b01      	cmp	r3, #1
 8007524:	d912      	bls.n	800754c <HAL_SPI_TransmitReceive+0x418>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800752a:	881a      	ldrh	r2, [r3, #0]
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007536:	1c9a      	adds	r2, r3, #2
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007540:	b29b      	uxth	r3, r3
 8007542:	3b02      	subs	r3, #2
 8007544:	b29a      	uxth	r2, r3
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	87da      	strh	r2, [r3, #62]	; 0x3e
 800754a:	e012      	b.n	8007572 <HAL_SPI_TransmitReceive+0x43e>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	330c      	adds	r3, #12
 8007556:	7812      	ldrb	r2, [r2, #0]
 8007558:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800755e:	1c5a      	adds	r2, r3, #1
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007568:	b29b      	uxth	r3, r3
 800756a:	3b01      	subs	r3, #1
 800756c:	b29a      	uxth	r2, r3
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007572:	2300      	movs	r3, #0
 8007574:	63fb      	str	r3, [r7, #60]	; 0x3c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800757a:	b29b      	uxth	r3, r3
 800757c:	2b00      	cmp	r3, #0
 800757e:	d11e      	bne.n	80075be <HAL_SPI_TransmitReceive+0x48a>
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007584:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007588:	d119      	bne.n	80075be <HAL_SPI_TransmitReceive+0x48a>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 800758a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800758c:	f003 0304 	and.w	r3, r3, #4
 8007590:	2b00      	cmp	r3, #0
 8007592:	d10c      	bne.n	80075ae <HAL_SPI_TransmitReceive+0x47a>
 8007594:	6a3b      	ldr	r3, [r7, #32]
 8007596:	f003 0308 	and.w	r3, r3, #8
 800759a:	2b00      	cmp	r3, #0
 800759c:	d007      	beq.n	80075ae <HAL_SPI_TransmitReceive+0x47a>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	681a      	ldr	r2, [r3, #0]
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80075ac:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	681a      	ldr	r2, [r3, #0]
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80075bc:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	689b      	ldr	r3, [r3, #8]
 80075c4:	f003 0301 	and.w	r3, r3, #1
 80075c8:	2b01      	cmp	r3, #1
 80075ca:	d148      	bne.n	800765e <HAL_SPI_TransmitReceive+0x52a>
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80075d2:	b29b      	uxth	r3, r3
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d042      	beq.n	800765e <HAL_SPI_TransmitReceive+0x52a>
      {
        if (hspi->RxXferCount > 1U)
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80075de:	b29b      	uxth	r3, r3
 80075e0:	2b01      	cmp	r3, #1
 80075e2:	d923      	bls.n	800762c <HAL_SPI_TransmitReceive+0x4f8>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	68da      	ldr	r2, [r3, #12]
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075ee:	b292      	uxth	r2, r2
 80075f0:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075f6:	1c9a      	adds	r2, r3, #2
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007602:	b29b      	uxth	r3, r3
 8007604:	3b02      	subs	r3, #2
 8007606:	b29a      	uxth	r2, r3
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007614:	b29b      	uxth	r3, r3
 8007616:	2b01      	cmp	r3, #1
 8007618:	d81f      	bhi.n	800765a <HAL_SPI_TransmitReceive+0x526>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	685a      	ldr	r2, [r3, #4]
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007628:	605a      	str	r2, [r3, #4]
 800762a:	e016      	b.n	800765a <HAL_SPI_TransmitReceive+0x526>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f103 020c 	add.w	r2, r3, #12
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007638:	7812      	ldrb	r2, [r2, #0]
 800763a:	b2d2      	uxtb	r2, r2
 800763c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007642:	1c5a      	adds	r2, r3, #1
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800764e:	b29b      	uxth	r3, r3
 8007650:	3b01      	subs	r3, #1
 8007652:	b29a      	uxth	r2, r3
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800765a:	2301      	movs	r3, #1
 800765c:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800765e:	f7fc fb13 	bl	8003c88 <HAL_GetTick>
 8007662:	4602      	mov	r2, r0
 8007664:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007666:	1ad3      	subs	r3, r2, r3
 8007668:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800766a:	429a      	cmp	r2, r3
 800766c:	d803      	bhi.n	8007676 <HAL_SPI_TransmitReceive+0x542>
 800766e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007670:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007674:	d102      	bne.n	800767c <HAL_SPI_TransmitReceive+0x548>
 8007676:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007678:	2b00      	cmp	r3, #0
 800767a:	d107      	bne.n	800768c <HAL_SPI_TransmitReceive+0x558>
      {
        errorcode = HAL_TIMEOUT;
 800767c:	2303      	movs	r3, #3
 800767e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        hspi->State = HAL_SPI_STATE_READY;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	2201      	movs	r2, #1
 8007686:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 800768a:	e087      	b.n	800779c <HAL_SPI_TransmitReceive+0x668>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007690:	b29b      	uxth	r3, r3
 8007692:	2b00      	cmp	r3, #0
 8007694:	f47f af33 	bne.w	80074fe <HAL_SPI_TransmitReceive+0x3ca>
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800769e:	b29b      	uxth	r3, r3
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	f47f af2c 	bne.w	80074fe <HAL_SPI_TransmitReceive+0x3ca>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Read CRC from DR to close CRC calculation process */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80076ae:	d146      	bne.n	800773e <HAL_SPI_TransmitReceive+0x60a>
  {
    /* Wait until TXE flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80076b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076b2:	9300      	str	r3, [sp, #0]
 80076b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80076b6:	2201      	movs	r2, #1
 80076b8:	2101      	movs	r1, #1
 80076ba:	68f8      	ldr	r0, [r7, #12]
 80076bc:	f000 fe9e 	bl	80083fc <SPI_WaitFlagStateUntilTimeout>
 80076c0:	4603      	mov	r3, r0
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d009      	beq.n	80076da <HAL_SPI_TransmitReceive+0x5a6>
    {
      /* Error on the CRC reception */
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80076ca:	f043 0202 	orr.w	r2, r3, #2
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	661a      	str	r2, [r3, #96]	; 0x60
      errorcode = HAL_TIMEOUT;
 80076d2:	2303      	movs	r3, #3
 80076d4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
      goto error;
 80076d8:	e060      	b.n	800779c <HAL_SPI_TransmitReceive+0x668>
    }
    /* Read CRC */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	68db      	ldr	r3, [r3, #12]
 80076de:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80076e2:	d105      	bne.n	80076f0 <HAL_SPI_TransmitReceive+0x5bc>
    {
      /* Read 16bit CRC */
      tmpreg = READ_REG(hspi->Instance->DR);
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	68db      	ldr	r3, [r3, #12]
 80076ea:	61bb      	str	r3, [r7, #24]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 80076ec:	69bb      	ldr	r3, [r7, #24]
 80076ee:	e026      	b.n	800773e <HAL_SPI_TransmitReceive+0x60a>
    }
    else
    {
      /* Initialize the 8bit temporary pointer */
      ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	330c      	adds	r3, #12
 80076f6:	61fb      	str	r3, [r7, #28]
      /* Read 8bit CRC */
      tmpreg8 = *ptmpreg8;
 80076f8:	69fb      	ldr	r3, [r7, #28]
 80076fa:	781b      	ldrb	r3, [r3, #0]
 80076fc:	b2db      	uxtb	r3, r3
 80076fe:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007700:	7dfb      	ldrb	r3, [r7, #23]

      if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007706:	2b02      	cmp	r3, #2
 8007708:	d119      	bne.n	800773e <HAL_SPI_TransmitReceive+0x60a>
      {
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 800770a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800770c:	9300      	str	r3, [sp, #0]
 800770e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007710:	2201      	movs	r2, #1
 8007712:	2101      	movs	r1, #1
 8007714:	68f8      	ldr	r0, [r7, #12]
 8007716:	f000 fe71 	bl	80083fc <SPI_WaitFlagStateUntilTimeout>
 800771a:	4603      	mov	r3, r0
 800771c:	2b00      	cmp	r3, #0
 800771e:	d009      	beq.n	8007734 <HAL_SPI_TransmitReceive+0x600>
        {
          /* Error on the CRC reception */
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007724:	f043 0202 	orr.w	r2, r3, #2
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	661a      	str	r2, [r3, #96]	; 0x60
          errorcode = HAL_TIMEOUT;
 800772c:	2303      	movs	r3, #3
 800772e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
          goto error;
 8007732:	e033      	b.n	800779c <HAL_SPI_TransmitReceive+0x668>
        }
        /* Read 8bit CRC again in case of 16bit CRC in 8bit Data mode */
        tmpreg8 = *ptmpreg8;
 8007734:	69fb      	ldr	r3, [r7, #28]
 8007736:	781b      	ldrb	r3, [r3, #0]
 8007738:	b2db      	uxtb	r3, r3
 800773a:	75fb      	strb	r3, [r7, #23]
        /* To avoid GCC warning */
        UNUSED(tmpreg8);
 800773c:	7dfb      	ldrb	r3, [r7, #23]
      }
    }
  }

  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	689b      	ldr	r3, [r3, #8]
 8007744:	f003 0310 	and.w	r3, r3, #16
 8007748:	2b10      	cmp	r3, #16
 800774a:	d10d      	bne.n	8007768 <HAL_SPI_TransmitReceive+0x634>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007750:	f043 0202 	orr.w	r2, r3, #2
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	661a      	str	r2, [r3, #96]	; 0x60
    /* Clear CRC Flag */
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8007760:	609a      	str	r2, [r3, #8]

    errorcode = HAL_ERROR;
 8007762:	2301      	movs	r3, #1
 8007764:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007768:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800776a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800776c:	68f8      	ldr	r0, [r7, #12]
 800776e:	f000 ffbb 	bl	80086e8 <SPI_EndRxTxTransaction>
 8007772:	4603      	mov	r3, r0
 8007774:	2b00      	cmp	r3, #0
 8007776:	d005      	beq.n	8007784 <HAL_SPI_TransmitReceive+0x650>
  {
    errorcode = HAL_ERROR;
 8007778:	2301      	movs	r3, #1
 800777a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	2220      	movs	r2, #32
 8007782:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007788:	2b00      	cmp	r3, #0
 800778a:	d003      	beq.n	8007794 <HAL_SPI_TransmitReceive+0x660>
  {
    errorcode = HAL_ERROR;
 800778c:	2301      	movs	r3, #1
 800778e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007792:	e003      	b.n	800779c <HAL_SPI_TransmitReceive+0x668>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	2201      	movs	r2, #1
 8007798:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	2200      	movs	r2, #0
 80077a0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80077a4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
}
 80077a8:	4618      	mov	r0, r3
 80077aa:	3740      	adds	r7, #64	; 0x40
 80077ac:	46bd      	mov	sp, r7
 80077ae:	bd80      	pop	{r7, pc}

080077b0 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80077b0:	b480      	push	{r7}
 80077b2:	b087      	sub	sp, #28
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	60f8      	str	r0, [r7, #12]
 80077b8:	60b9      	str	r1, [r7, #8]
 80077ba:	4613      	mov	r3, r2
 80077bc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80077be:	2300      	movs	r3, #0
 80077c0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));


  if ((pData == NULL) || (Size == 0U))
 80077c2:	68bb      	ldr	r3, [r7, #8]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d002      	beq.n	80077ce <HAL_SPI_Transmit_IT+0x1e>
 80077c8:	88fb      	ldrh	r3, [r7, #6]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d102      	bne.n	80077d4 <HAL_SPI_Transmit_IT+0x24>
  {
    errorcode = HAL_ERROR;
 80077ce:	2301      	movs	r3, #1
 80077d0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80077d2:	e082      	b.n	80078da <HAL_SPI_Transmit_IT+0x12a>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80077da:	b2db      	uxtb	r3, r3
 80077dc:	2b01      	cmp	r3, #1
 80077de:	d002      	beq.n	80077e6 <HAL_SPI_Transmit_IT+0x36>
  {
    errorcode = HAL_BUSY;
 80077e0:	2302      	movs	r3, #2
 80077e2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80077e4:	e079      	b.n	80078da <HAL_SPI_Transmit_IT+0x12a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80077ec:	2b01      	cmp	r3, #1
 80077ee:	d101      	bne.n	80077f4 <HAL_SPI_Transmit_IT+0x44>
 80077f0:	2302      	movs	r3, #2
 80077f2:	e073      	b.n	80078dc <HAL_SPI_Transmit_IT+0x12c>
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	2201      	movs	r2, #1
 80077f8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	2203      	movs	r2, #3
 8007800:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	2200      	movs	r2, #0
 8007808:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	68ba      	ldr	r2, [r7, #8]
 800780e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	88fa      	ldrh	r2, [r7, #6]
 8007814:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	88fa      	ldrh	r2, [r7, #6]
 800781a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	2200      	movs	r2, #0
 8007820:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	2200      	movs	r2, #0
 8007826:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	2200      	movs	r2, #0
 800782e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxISR       = NULL;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	2200      	movs	r2, #0
 8007836:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	68db      	ldr	r3, [r3, #12]
 800783c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007840:	d903      	bls.n	800784a <HAL_SPI_Transmit_IT+0x9a>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	4a28      	ldr	r2, [pc, #160]	; (80078e8 <HAL_SPI_Transmit_IT+0x138>)
 8007846:	651a      	str	r2, [r3, #80]	; 0x50
 8007848:	e002      	b.n	8007850 <HAL_SPI_Transmit_IT+0xa0>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	4a27      	ldr	r2, [pc, #156]	; (80078ec <HAL_SPI_Transmit_IT+0x13c>)
 800784e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	689b      	ldr	r3, [r3, #8]
 8007854:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007858:	d10f      	bne.n	800787a <HAL_SPI_Transmit_IT+0xca>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	681a      	ldr	r2, [r3, #0]
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007868:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	681a      	ldr	r2, [r3, #0]
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007878:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800787e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007882:	d10f      	bne.n	80078a4 <HAL_SPI_Transmit_IT+0xf4>
  {
    SPI_RESET_CRC(hspi);
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	681a      	ldr	r2, [r3, #0]
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007892:	601a      	str	r2, [r3, #0]
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	681a      	ldr	r2, [r3, #0]
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80078a2:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078ae:	2b40      	cmp	r3, #64	; 0x40
 80078b0:	d007      	beq.n	80078c2 <HAL_SPI_Transmit_IT+0x112>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	681a      	ldr	r2, [r3, #0]
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80078c0:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	2200      	movs	r2, #0
 80078c6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	685a      	ldr	r2, [r3, #4]
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 80078d8:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 80078da:	7dfb      	ldrb	r3, [r7, #23]
}
 80078dc:	4618      	mov	r0, r3
 80078de:	371c      	adds	r7, #28
 80078e0:	46bd      	mov	sp, r7
 80078e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e6:	4770      	bx	lr
 80078e8:	0800839d 	.word	0x0800839d
 80078ec:	0800833d 	.word	0x0800833d

080078f0 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b086      	sub	sp, #24
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	60f8      	str	r0, [r7, #12]
 80078f8:	60b9      	str	r1, [r7, #8]
 80078fa:	4613      	mov	r3, r2
 80078fc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80078fe:	2300      	movs	r3, #0
 8007900:	75fb      	strb	r3, [r7, #23]


  if (hspi->State != HAL_SPI_STATE_READY)
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007908:	b2db      	uxtb	r3, r3
 800790a:	2b01      	cmp	r3, #1
 800790c:	d002      	beq.n	8007914 <HAL_SPI_Receive_IT+0x24>
  {
    errorcode = HAL_BUSY;
 800790e:	2302      	movs	r3, #2
 8007910:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007912:	e0ba      	b.n	8007a8a <HAL_SPI_Receive_IT+0x19a>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	689b      	ldr	r3, [r3, #8]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d110      	bne.n	800793e <HAL_SPI_Receive_IT+0x4e>
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	685b      	ldr	r3, [r3, #4]
 8007920:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007924:	d10b      	bne.n	800793e <HAL_SPI_Receive_IT+0x4e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	2204      	movs	r2, #4
 800792a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 800792e:	88fb      	ldrh	r3, [r7, #6]
 8007930:	68ba      	ldr	r2, [r7, #8]
 8007932:	68b9      	ldr	r1, [r7, #8]
 8007934:	68f8      	ldr	r0, [r7, #12]
 8007936:	f000 f8b1 	bl	8007a9c <HAL_SPI_TransmitReceive_IT>
 800793a:	4603      	mov	r3, r0
 800793c:	e0a6      	b.n	8007a8c <HAL_SPI_Receive_IT+0x19c>
  }


  if ((pData == NULL) || (Size == 0U))
 800793e:	68bb      	ldr	r3, [r7, #8]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d002      	beq.n	800794a <HAL_SPI_Receive_IT+0x5a>
 8007944:	88fb      	ldrh	r3, [r7, #6]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d102      	bne.n	8007950 <HAL_SPI_Receive_IT+0x60>
  {
    errorcode = HAL_ERROR;
 800794a:	2301      	movs	r3, #1
 800794c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800794e:	e09c      	b.n	8007a8a <HAL_SPI_Receive_IT+0x19a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007956:	2b01      	cmp	r3, #1
 8007958:	d101      	bne.n	800795e <HAL_SPI_Receive_IT+0x6e>
 800795a:	2302      	movs	r3, #2
 800795c:	e096      	b.n	8007a8c <HAL_SPI_Receive_IT+0x19c>
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	2201      	movs	r2, #1
 8007962:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	2204      	movs	r2, #4
 800796a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	2200      	movs	r2, #0
 8007972:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	68ba      	ldr	r2, [r7, #8]
 8007978:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	88fa      	ldrh	r2, [r7, #6]
 800797e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	88fa      	ldrh	r2, [r7, #6]
 8007986:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	2200      	movs	r2, #0
 800798e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	2200      	movs	r2, #0
 8007994:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	2200      	movs	r2, #0
 800799a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	2200      	movs	r2, #0
 80079a0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	68db      	ldr	r3, [r3, #12]
 80079a6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80079aa:	d90b      	bls.n	80079c4 <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	685a      	ldr	r2, [r3, #4]
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80079ba:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	4a35      	ldr	r2, [pc, #212]	; (8007a94 <HAL_SPI_Receive_IT+0x1a4>)
 80079c0:	64da      	str	r2, [r3, #76]	; 0x4c
 80079c2:	e00a      	b.n	80079da <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	685a      	ldr	r2, [r3, #4]
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80079d2:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	4a30      	ldr	r2, [pc, #192]	; (8007a98 <HAL_SPI_Receive_IT+0x1a8>)
 80079d8:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	689b      	ldr	r3, [r3, #8]
 80079de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80079e2:	d10f      	bne.n	8007a04 <HAL_SPI_Receive_IT+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	681a      	ldr	r2, [r3, #0]
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80079f2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	681a      	ldr	r2, [r3, #0]
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007a02:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a0c:	d11f      	bne.n	8007a4e <HAL_SPI_Receive_IT+0x15e>
  {
    hspi->CRCSize = 1U;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	2201      	movs	r2, #1
 8007a12:	649a      	str	r2, [r3, #72]	; 0x48
    if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	68db      	ldr	r3, [r3, #12]
 8007a18:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007a1c:	d806      	bhi.n	8007a2c <HAL_SPI_Receive_IT+0x13c>
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a22:	2b02      	cmp	r3, #2
 8007a24:	d102      	bne.n	8007a2c <HAL_SPI_Receive_IT+0x13c>
    {
      hspi->CRCSize = 2U;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	2202      	movs	r2, #2
 8007a2a:	649a      	str	r2, [r3, #72]	; 0x48
    }
    SPI_RESET_CRC(hspi);
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	681a      	ldr	r2, [r3, #0]
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007a3a:	601a      	str	r2, [r3, #0]
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	681a      	ldr	r2, [r3, #0]
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007a4a:	601a      	str	r2, [r3, #0]
 8007a4c:	e002      	b.n	8007a54 <HAL_SPI_Receive_IT+0x164>
  }
  else
  {
    hspi->CRCSize = 0U;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	2200      	movs	r2, #0
 8007a52:	649a      	str	r2, [r3, #72]	; 0x48
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a5e:	2b40      	cmp	r3, #64	; 0x40
 8007a60:	d007      	beq.n	8007a72 <HAL_SPI_Receive_IT+0x182>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	681a      	ldr	r2, [r3, #0]
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007a70:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	2200      	movs	r2, #0
 8007a76:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Enable RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	685a      	ldr	r2, [r3, #4]
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8007a88:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 8007a8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	3718      	adds	r7, #24
 8007a90:	46bd      	mov	sp, r7
 8007a92:	bd80      	pop	{r7, pc}
 8007a94:	080082b5 	.word	0x080082b5
 8007a98:	080081f5 	.word	0x080081f5

08007a9c <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8007a9c:	b480      	push	{r7}
 8007a9e:	b087      	sub	sp, #28
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	60f8      	str	r0, [r7, #12]
 8007aa4:	60b9      	str	r1, [r7, #8]
 8007aa6:	607a      	str	r2, [r7, #4]
 8007aa8:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007aaa:	2300      	movs	r3, #0
 8007aac:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007ab4:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	685b      	ldr	r3, [r3, #4]
 8007aba:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007abc:	7dbb      	ldrb	r3, [r7, #22]
 8007abe:	2b01      	cmp	r3, #1
 8007ac0:	d00d      	beq.n	8007ade <HAL_SPI_TransmitReceive_IT+0x42>
 8007ac2:	693b      	ldr	r3, [r7, #16]
 8007ac4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007ac8:	d106      	bne.n	8007ad8 <HAL_SPI_TransmitReceive_IT+0x3c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	689b      	ldr	r3, [r3, #8]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d102      	bne.n	8007ad8 <HAL_SPI_TransmitReceive_IT+0x3c>
 8007ad2:	7dbb      	ldrb	r3, [r7, #22]
 8007ad4:	2b04      	cmp	r3, #4
 8007ad6:	d002      	beq.n	8007ade <HAL_SPI_TransmitReceive_IT+0x42>
  {
    errorcode = HAL_BUSY;
 8007ad8:	2302      	movs	r3, #2
 8007ada:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007adc:	e0a5      	b.n	8007c2a <HAL_SPI_TransmitReceive_IT+0x18e>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007ade:	68bb      	ldr	r3, [r7, #8]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d005      	beq.n	8007af0 <HAL_SPI_TransmitReceive_IT+0x54>
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d002      	beq.n	8007af0 <HAL_SPI_TransmitReceive_IT+0x54>
 8007aea:	887b      	ldrh	r3, [r7, #2]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d102      	bne.n	8007af6 <HAL_SPI_TransmitReceive_IT+0x5a>
  {
    errorcode = HAL_ERROR;
 8007af0:	2301      	movs	r3, #1
 8007af2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007af4:	e099      	b.n	8007c2a <HAL_SPI_TransmitReceive_IT+0x18e>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007afc:	2b01      	cmp	r3, #1
 8007afe:	d101      	bne.n	8007b04 <HAL_SPI_TransmitReceive_IT+0x68>
 8007b00:	2302      	movs	r3, #2
 8007b02:	e093      	b.n	8007c2c <HAL_SPI_TransmitReceive_IT+0x190>
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	2201      	movs	r2, #1
 8007b08:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007b12:	b2db      	uxtb	r3, r3
 8007b14:	2b04      	cmp	r3, #4
 8007b16:	d003      	beq.n	8007b20 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	2205      	movs	r2, #5
 8007b1c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	2200      	movs	r2, #0
 8007b24:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	68ba      	ldr	r2, [r7, #8]
 8007b2a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	887a      	ldrh	r2, [r7, #2]
 8007b30:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	887a      	ldrh	r2, [r7, #2]
 8007b36:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	687a      	ldr	r2, [r7, #4]
 8007b3c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	887a      	ldrh	r2, [r7, #2]
 8007b42:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	887a      	ldrh	r2, [r7, #2]
 8007b4a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	68db      	ldr	r3, [r3, #12]
 8007b52:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007b56:	d906      	bls.n	8007b66 <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	4a37      	ldr	r2, [pc, #220]	; (8007c38 <HAL_SPI_TransmitReceive_IT+0x19c>)
 8007b5c:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	4a36      	ldr	r2, [pc, #216]	; (8007c3c <HAL_SPI_TransmitReceive_IT+0x1a0>)
 8007b62:	651a      	str	r2, [r3, #80]	; 0x50
 8007b64:	e005      	b.n	8007b72 <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	4a35      	ldr	r2, [pc, #212]	; (8007c40 <HAL_SPI_TransmitReceive_IT+0x1a4>)
 8007b6a:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	4a35      	ldr	r2, [pc, #212]	; (8007c44 <HAL_SPI_TransmitReceive_IT+0x1a8>)
 8007b70:	651a      	str	r2, [r3, #80]	; 0x50
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b7a:	d11f      	bne.n	8007bbc <HAL_SPI_TransmitReceive_IT+0x120>
  {
    hspi->CRCSize = 1U;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	2201      	movs	r2, #1
 8007b80:	649a      	str	r2, [r3, #72]	; 0x48
    if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	68db      	ldr	r3, [r3, #12]
 8007b86:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007b8a:	d806      	bhi.n	8007b9a <HAL_SPI_TransmitReceive_IT+0xfe>
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b90:	2b02      	cmp	r3, #2
 8007b92:	d102      	bne.n	8007b9a <HAL_SPI_TransmitReceive_IT+0xfe>
    {
      hspi->CRCSize = 2U;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	2202      	movs	r2, #2
 8007b98:	649a      	str	r2, [r3, #72]	; 0x48
    }
    SPI_RESET_CRC(hspi);
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	681a      	ldr	r2, [r3, #0]
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007ba8:	601a      	str	r2, [r3, #0]
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	681a      	ldr	r2, [r3, #0]
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007bb8:	601a      	str	r2, [r3, #0]
 8007bba:	e002      	b.n	8007bc2 <HAL_SPI_TransmitReceive_IT+0x126>
  }
  else
  {
    hspi->CRCSize = 0U;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	649a      	str	r2, [r3, #72]	; 0x48
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	68db      	ldr	r3, [r3, #12]
 8007bc6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007bca:	d802      	bhi.n	8007bd2 <HAL_SPI_TransmitReceive_IT+0x136>
 8007bcc:	887b      	ldrh	r3, [r7, #2]
 8007bce:	2b01      	cmp	r3, #1
 8007bd0:	d908      	bls.n	8007be4 <HAL_SPI_TransmitReceive_IT+0x148>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	685a      	ldr	r2, [r3, #4]
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007be0:	605a      	str	r2, [r3, #4]
 8007be2:	e007      	b.n	8007bf4 <HAL_SPI_TransmitReceive_IT+0x158>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	685a      	ldr	r2, [r3, #4]
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007bf2:	605a      	str	r2, [r3, #4]
  }


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bfe:	2b40      	cmp	r3, #64	; 0x40
 8007c00:	d007      	beq.n	8007c12 <HAL_SPI_TransmitReceive_IT+0x176>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	681a      	ldr	r2, [r3, #0]
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007c10:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	2200      	movs	r2, #0
 8007c16:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	685a      	ldr	r2, [r3, #4]
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8007c28:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 8007c2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	371c      	adds	r7, #28
 8007c30:	46bd      	mov	sp, r7
 8007c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c36:	4770      	bx	lr
 8007c38:	0800807d 	.word	0x0800807d
 8007c3c:	0800812d 	.word	0x0800812d
 8007c40:	08007e85 	.word	0x08007e85
 8007c44:	08007fc1 	.word	0x08007fc1

08007c48 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b088      	sub	sp, #32
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	685b      	ldr	r3, [r3, #4]
 8007c56:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	689b      	ldr	r3, [r3, #8]
 8007c5e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007c60:	69bb      	ldr	r3, [r7, #24]
 8007c62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d10e      	bne.n	8007c88 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007c6a:	69bb      	ldr	r3, [r7, #24]
 8007c6c:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d009      	beq.n	8007c88 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007c74:	69fb      	ldr	r3, [r7, #28]
 8007c76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d004      	beq.n	8007c88 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	4798      	blx	r3
    return;
 8007c86:	e0ce      	b.n	8007e26 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8007c88:	69bb      	ldr	r3, [r7, #24]
 8007c8a:	f003 0302 	and.w	r3, r3, #2
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d009      	beq.n	8007ca6 <HAL_SPI_IRQHandler+0x5e>
 8007c92:	69fb      	ldr	r3, [r7, #28]
 8007c94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d004      	beq.n	8007ca6 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ca0:	6878      	ldr	r0, [r7, #4]
 8007ca2:	4798      	blx	r3
    return;
 8007ca4:	e0bf      	b.n	8007e26 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007ca6:	69bb      	ldr	r3, [r7, #24]
 8007ca8:	f003 0320 	and.w	r3, r3, #32
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d10a      	bne.n	8007cc6 <HAL_SPI_IRQHandler+0x7e>
 8007cb0:	69bb      	ldr	r3, [r7, #24]
 8007cb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d105      	bne.n	8007cc6 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8007cba:	69bb      	ldr	r3, [r7, #24]
 8007cbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	f000 80b0 	beq.w	8007e26 <HAL_SPI_IRQHandler+0x1de>
 8007cc6:	69fb      	ldr	r3, [r7, #28]
 8007cc8:	f003 0320 	and.w	r3, r3, #32
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	f000 80aa 	beq.w	8007e26 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007cd2:	69bb      	ldr	r3, [r7, #24]
 8007cd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d023      	beq.n	8007d24 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007ce2:	b2db      	uxtb	r3, r3
 8007ce4:	2b03      	cmp	r3, #3
 8007ce6:	d011      	beq.n	8007d0c <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007cec:	f043 0204 	orr.w	r2, r3, #4
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	617b      	str	r3, [r7, #20]
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	68db      	ldr	r3, [r3, #12]
 8007cfe:	617b      	str	r3, [r7, #20]
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	689b      	ldr	r3, [r3, #8]
 8007d06:	617b      	str	r3, [r7, #20]
 8007d08:	697b      	ldr	r3, [r7, #20]
 8007d0a:	e00b      	b.n	8007d24 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	613b      	str	r3, [r7, #16]
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	68db      	ldr	r3, [r3, #12]
 8007d16:	613b      	str	r3, [r7, #16]
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	689b      	ldr	r3, [r3, #8]
 8007d1e:	613b      	str	r3, [r7, #16]
 8007d20:	693b      	ldr	r3, [r7, #16]
        return;
 8007d22:	e080      	b.n	8007e26 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8007d24:	69bb      	ldr	r3, [r7, #24]
 8007d26:	f003 0320 	and.w	r3, r3, #32
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d014      	beq.n	8007d58 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d32:	f043 0201 	orr.w	r2, r3, #1
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	60fb      	str	r3, [r7, #12]
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	689b      	ldr	r3, [r3, #8]
 8007d44:	60fb      	str	r3, [r7, #12]
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	681a      	ldr	r2, [r3, #0]
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007d54:	601a      	str	r2, [r3, #0]
 8007d56:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8007d58:	69bb      	ldr	r3, [r7, #24]
 8007d5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d00c      	beq.n	8007d7c <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d66:	f043 0208 	orr.w	r2, r3, #8
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007d6e:	2300      	movs	r3, #0
 8007d70:	60bb      	str	r3, [r7, #8]
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	689b      	ldr	r3, [r3, #8]
 8007d78:	60bb      	str	r3, [r7, #8]
 8007d7a:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d04f      	beq.n	8007e24 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	685a      	ldr	r2, [r3, #4]
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007d92:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2201      	movs	r2, #1
 8007d98:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8007d9c:	69fb      	ldr	r3, [r7, #28]
 8007d9e:	f003 0302 	and.w	r3, r3, #2
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d104      	bne.n	8007db0 <HAL_SPI_IRQHandler+0x168>
 8007da6:	69fb      	ldr	r3, [r7, #28]
 8007da8:	f003 0301 	and.w	r3, r3, #1
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d034      	beq.n	8007e1a <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	685a      	ldr	r2, [r3, #4]
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f022 0203 	bic.w	r2, r2, #3
 8007dbe:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d011      	beq.n	8007dec <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007dcc:	4a17      	ldr	r2, [pc, #92]	; (8007e2c <HAL_SPI_IRQHandler+0x1e4>)
 8007dce:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	f7fc ff1c 	bl	8004c12 <HAL_DMA_Abort_IT>
 8007dda:	4603      	mov	r3, r0
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d005      	beq.n	8007dec <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007de4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d016      	beq.n	8007e22 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007df8:	4a0c      	ldr	r2, [pc, #48]	; (8007e2c <HAL_SPI_IRQHandler+0x1e4>)
 8007dfa:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e00:	4618      	mov	r0, r3
 8007e02:	f7fc ff06 	bl	8004c12 <HAL_DMA_Abort_IT>
 8007e06:	4603      	mov	r3, r0
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d00a      	beq.n	8007e22 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e10:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8007e18:	e003      	b.n	8007e22 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007e1a:	6878      	ldr	r0, [r7, #4]
 8007e1c:	f000 f812 	bl	8007e44 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007e20:	e000      	b.n	8007e24 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8007e22:	bf00      	nop
    return;
 8007e24:	bf00      	nop
  }
}
 8007e26:	3720      	adds	r7, #32
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	bd80      	pop	{r7, pc}
 8007e2c:	08007e59 	.word	0x08007e59

08007e30 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007e30:	b480      	push	{r7}
 8007e32:	b083      	sub	sp, #12
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8007e38:	bf00      	nop
 8007e3a:	370c      	adds	r7, #12
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e42:	4770      	bx	lr

08007e44 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007e44:	b480      	push	{r7}
 8007e46:	b083      	sub	sp, #12
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007e4c:	bf00      	nop
 8007e4e:	370c      	adds	r7, #12
 8007e50:	46bd      	mov	sp, r7
 8007e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e56:	4770      	bx	lr

08007e58 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b084      	sub	sp, #16
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e64:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	2200      	movs	r2, #0
 8007e6a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	2200      	movs	r2, #0
 8007e72:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007e74:	68f8      	ldr	r0, [r7, #12]
 8007e76:	f7ff ffe5 	bl	8007e44 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007e7a:	bf00      	nop
 8007e7c:	3710      	adds	r7, #16
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	bd80      	pop	{r7, pc}
	...

08007e84 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b082      	sub	sp, #8
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007e92:	b29b      	uxth	r3, r3
 8007e94:	2b01      	cmp	r3, #1
 8007e96:	d923      	bls.n	8007ee0 <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	68da      	ldr	r2, [r3, #12]
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ea2:	b292      	uxth	r2, r2
 8007ea4:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eaa:	1c9a      	adds	r2, r3, #2
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007eb6:	b29b      	uxth	r3, r3
 8007eb8:	3b02      	subs	r3, #2
 8007eba:	b29a      	uxth	r2, r3
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007ec8:	b29b      	uxth	r3, r3
 8007eca:	2b01      	cmp	r3, #1
 8007ecc:	d11f      	bne.n	8007f0e <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	685a      	ldr	r2, [r3, #4]
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007edc:	605a      	str	r2, [r3, #4]
 8007ede:	e016      	b.n	8007f0e <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	f103 020c 	add.w	r2, r3, #12
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eec:	7812      	ldrb	r2, [r2, #0]
 8007eee:	b2d2      	uxtb	r2, r2
 8007ef0:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ef6:	1c5a      	adds	r2, r3, #1
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007f02:	b29b      	uxth	r3, r3
 8007f04:	3b01      	subs	r3, #1
 8007f06:	b29a      	uxth	r2, r3
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007f14:	b29b      	uxth	r3, r3
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d120      	bne.n	8007f5c <SPI_2linesRxISR_8BIT+0xd8>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f22:	d10b      	bne.n	8007f3c <SPI_2linesRxISR_8BIT+0xb8>
    {
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	685a      	ldr	r2, [r3, #4]
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007f32:	605a      	str	r2, [r3, #4]
      hspi->RxISR =  SPI_2linesRxISR_8BITCRC;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	4a0b      	ldr	r2, [pc, #44]	; (8007f64 <SPI_2linesRxISR_8BIT+0xe0>)
 8007f38:	64da      	str	r2, [r3, #76]	; 0x4c
      return;
 8007f3a:	e00f      	b.n	8007f5c <SPI_2linesRxISR_8BIT+0xd8>
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	685a      	ldr	r2, [r3, #4]
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007f4a:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f50:	b29b      	uxth	r3, r3
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d102      	bne.n	8007f5c <SPI_2linesRxISR_8BIT+0xd8>
    {
      SPI_CloseRxTx_ISR(hspi);
 8007f56:	6878      	ldr	r0, [r7, #4]
 8007f58:	f000 fc0c 	bl	8008774 <SPI_CloseRxTx_ISR>
    }
  }
}
 8007f5c:	3708      	adds	r7, #8
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	bd80      	pop	{r7, pc}
 8007f62:	bf00      	nop
 8007f64:	08007f69 	.word	0x08007f69

08007f68 <SPI_2linesRxISR_8BITCRC>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BITCRC(struct __SPI_HandleTypeDef *hspi)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b084      	sub	sp, #16
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007f70:	2300      	movs	r3, #0
 8007f72:	72fb      	strb	r3, [r7, #11]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	330c      	adds	r3, #12
 8007f7a:	60fb      	str	r3, [r7, #12]
  /* Read 8bit CRC to flush Data Register */
  tmpreg8 = *ptmpreg8;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	781b      	ldrb	r3, [r3, #0]
 8007f80:	b2db      	uxtb	r3, r3
 8007f82:	72fb      	strb	r3, [r7, #11]
  /* To avoid GCC warning */
  UNUSED(tmpreg8);
 8007f84:	7afb      	ldrb	r3, [r7, #11]

  hspi->CRCSize--;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f8a:	1e5a      	subs	r2, r3, #1
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	649a      	str	r2, [r3, #72]	; 0x48

  /* Check end of the reception */
  if (hspi->CRCSize == 0U)
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d10f      	bne.n	8007fb8 <SPI_2linesRxISR_8BITCRC+0x50>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	685a      	ldr	r2, [r3, #4]
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007fa6:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007fac:	b29b      	uxth	r3, r3
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d102      	bne.n	8007fb8 <SPI_2linesRxISR_8BITCRC+0x50>
    {
      SPI_CloseRxTx_ISR(hspi);
 8007fb2:	6878      	ldr	r0, [r7, #4]
 8007fb4:	f000 fbde 	bl	8008774 <SPI_CloseRxTx_ISR>
    }
  }
}
 8007fb8:	bf00      	nop
 8007fba:	3710      	adds	r7, #16
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	bd80      	pop	{r7, pc}

08007fc0 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b082      	sub	sp, #8
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007fcc:	b29b      	uxth	r3, r3
 8007fce:	2b01      	cmp	r3, #1
 8007fd0:	d912      	bls.n	8007ff8 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fd6:	881a      	ldrh	r2, [r3, #0]
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fe2:	1c9a      	adds	r2, r3, #2
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007fec:	b29b      	uxth	r3, r3
 8007fee:	3b02      	subs	r3, #2
 8007ff0:	b29a      	uxth	r2, r3
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007ff6:	e012      	b.n	800801e <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	330c      	adds	r3, #12
 8008002:	7812      	ldrb	r2, [r2, #0]
 8008004:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800800a:	1c5a      	adds	r2, r3, #1
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008014:	b29b      	uxth	r3, r3
 8008016:	3b01      	subs	r3, #1
 8008018:	b29a      	uxth	r2, r3
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008022:	b29b      	uxth	r3, r3
 8008024:	2b00      	cmp	r3, #0
 8008026:	d126      	bne.n	8008076 <SPI_2linesTxISR_8BIT+0xb6>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800802c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008030:	d110      	bne.n	8008054 <SPI_2linesTxISR_8BIT+0x94>
    {
      /* Set CRC Next Bit to send CRC */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	681a      	ldr	r2, [r3, #0]
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008040:	601a      	str	r2, [r3, #0]
      /* Disable TXE interrupt */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	685a      	ldr	r2, [r3, #4]
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008050:	605a      	str	r2, [r3, #4]
      return;
 8008052:	e010      	b.n	8008076 <SPI_2linesTxISR_8BIT+0xb6>
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	685a      	ldr	r2, [r3, #4]
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008062:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800806a:	b29b      	uxth	r3, r3
 800806c:	2b00      	cmp	r3, #0
 800806e:	d102      	bne.n	8008076 <SPI_2linesTxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	f000 fb7f 	bl	8008774 <SPI_CloseRxTx_ISR>
    }
  }
}
 8008076:	3708      	adds	r7, #8
 8008078:	46bd      	mov	sp, r7
 800807a:	bd80      	pop	{r7, pc}

0800807c <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b082      	sub	sp, #8
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	68da      	ldr	r2, [r3, #12]
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800808e:	b292      	uxth	r2, r2
 8008090:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008096:	1c9a      	adds	r2, r3, #2
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80080a2:	b29b      	uxth	r3, r3
 80080a4:	3b01      	subs	r3, #1
 80080a6:	b29a      	uxth	r2, r3
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80080b4:	b29b      	uxth	r3, r3
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d118      	bne.n	80080ec <SPI_2linesRxISR_16BIT+0x70>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80080c2:	d103      	bne.n	80080cc <SPI_2linesRxISR_16BIT+0x50>
    {
      hspi->RxISR =  SPI_2linesRxISR_16BITCRC;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	4a0b      	ldr	r2, [pc, #44]	; (80080f4 <SPI_2linesRxISR_16BIT+0x78>)
 80080c8:	64da      	str	r2, [r3, #76]	; 0x4c
      return;
 80080ca:	e00f      	b.n	80080ec <SPI_2linesRxISR_16BIT+0x70>
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	685a      	ldr	r2, [r3, #4]
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80080da:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80080e0:	b29b      	uxth	r3, r3
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d102      	bne.n	80080ec <SPI_2linesRxISR_16BIT+0x70>
    {
      SPI_CloseRxTx_ISR(hspi);
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	f000 fb44 	bl	8008774 <SPI_CloseRxTx_ISR>
    }
  }
}
 80080ec:	3708      	adds	r7, #8
 80080ee:	46bd      	mov	sp, r7
 80080f0:	bd80      	pop	{r7, pc}
 80080f2:	bf00      	nop
 80080f4:	080080f9 	.word	0x080080f9

080080f8 <SPI_2linesRxISR_16BITCRC>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BITCRC(struct __SPI_HandleTypeDef *hspi)
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b084      	sub	sp, #16
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0U;
 8008100:	2300      	movs	r3, #0
 8008102:	60fb      	str	r3, [r7, #12]

  /* Read 16bit CRC to flush Data Register */
  tmpreg = READ_REG(hspi->Instance->DR);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	68db      	ldr	r3, [r3, #12]
 800810a:	60fb      	str	r3, [r7, #12]
  /* To avoid GCC warning */
  UNUSED(tmpreg);
 800810c:	68fb      	ldr	r3, [r7, #12]

  /* Disable RXNE interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	685a      	ldr	r2, [r3, #4]
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800811c:	605a      	str	r2, [r3, #4]

  SPI_CloseRxTx_ISR(hspi);
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	f000 fb28 	bl	8008774 <SPI_CloseRxTx_ISR>
}
 8008124:	bf00      	nop
 8008126:	3710      	adds	r7, #16
 8008128:	46bd      	mov	sp, r7
 800812a:	bd80      	pop	{r7, pc}

0800812c <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b082      	sub	sp, #8
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008138:	881a      	ldrh	r2, [r3, #0]
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008144:	1c9a      	adds	r2, r3, #2
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800814e:	b29b      	uxth	r3, r3
 8008150:	3b01      	subs	r3, #1
 8008152:	b29a      	uxth	r2, r3
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800815c:	b29b      	uxth	r3, r3
 800815e:	2b00      	cmp	r3, #0
 8008160:	d126      	bne.n	80081b0 <SPI_2linesTxISR_16BIT+0x84>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008166:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800816a:	d110      	bne.n	800818e <SPI_2linesTxISR_16BIT+0x62>
    {
      /* Set CRC Next Bit to send CRC */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	681a      	ldr	r2, [r3, #0]
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800817a:	601a      	str	r2, [r3, #0]
      /* Disable TXE interrupt */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	685a      	ldr	r2, [r3, #4]
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800818a:	605a      	str	r2, [r3, #4]
      return;
 800818c:	e010      	b.n	80081b0 <SPI_2linesTxISR_16BIT+0x84>
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	685a      	ldr	r2, [r3, #4]
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800819c:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80081a4:	b29b      	uxth	r3, r3
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d102      	bne.n	80081b0 <SPI_2linesTxISR_16BIT+0x84>
    {
      SPI_CloseRxTx_ISR(hspi);
 80081aa:	6878      	ldr	r0, [r7, #4]
 80081ac:	f000 fae2 	bl	8008774 <SPI_CloseRxTx_ISR>
    }
  }
}
 80081b0:	3708      	adds	r7, #8
 80081b2:	46bd      	mov	sp, r7
 80081b4:	bd80      	pop	{r7, pc}

080081b6 <SPI_RxISR_8BITCRC>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BITCRC(struct __SPI_HandleTypeDef *hspi)
{
 80081b6:	b580      	push	{r7, lr}
 80081b8:	b084      	sub	sp, #16
 80081ba:	af00      	add	r7, sp, #0
 80081bc:	6078      	str	r0, [r7, #4]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80081be:	2300      	movs	r3, #0
 80081c0:	72fb      	strb	r3, [r7, #11]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	330c      	adds	r3, #12
 80081c8:	60fb      	str	r3, [r7, #12]
  /* Read 8bit CRC to flush Data Register */
  tmpreg8 = *ptmpreg8;
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	781b      	ldrb	r3, [r3, #0]
 80081ce:	b2db      	uxtb	r3, r3
 80081d0:	72fb      	strb	r3, [r7, #11]
  /* To avoid GCC warning */
  UNUSED(tmpreg8);
 80081d2:	7afb      	ldrb	r3, [r7, #11]

  hspi->CRCSize--;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80081d8:	1e5a      	subs	r2, r3, #1
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	649a      	str	r2, [r3, #72]	; 0x48

  if (hspi->CRCSize == 0U)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d102      	bne.n	80081ec <SPI_RxISR_8BITCRC+0x36>
  {
    SPI_CloseRx_ISR(hspi);
 80081e6:	6878      	ldr	r0, [r7, #4]
 80081e8:	f000 fb20 	bl	800882c <SPI_CloseRx_ISR>
  }
}
 80081ec:	bf00      	nop
 80081ee:	3710      	adds	r7, #16
 80081f0:	46bd      	mov	sp, r7
 80081f2:	bd80      	pop	{r7, pc}

080081f4 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b082      	sub	sp, #8
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	f103 020c 	add.w	r2, r3, #12
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008208:	7812      	ldrb	r2, [r2, #0]
 800820a:	b2d2      	uxtb	r2, r2
 800820c:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008212:	1c5a      	adds	r2, r3, #1
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800821e:	b29b      	uxth	r3, r3
 8008220:	3b01      	subs	r3, #1
 8008222:	b29a      	uxth	r2, r3
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if ((hspi->RxXferCount == 1U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008230:	b29b      	uxth	r3, r3
 8008232:	2b01      	cmp	r3, #1
 8008234:	d10c      	bne.n	8008250 <SPI_RxISR_8BIT+0x5c>
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800823a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800823e:	d107      	bne.n	8008250 <SPI_RxISR_8BIT+0x5c>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	681a      	ldr	r2, [r3, #0]
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800824e:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008256:	b29b      	uxth	r3, r3
 8008258:	2b00      	cmp	r3, #0
 800825a:	d10b      	bne.n	8008274 <SPI_RxISR_8BIT+0x80>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008260:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008264:	d103      	bne.n	800826e <SPI_RxISR_8BIT+0x7a>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	4a04      	ldr	r2, [pc, #16]	; (800827c <SPI_RxISR_8BIT+0x88>)
 800826a:	64da      	str	r2, [r3, #76]	; 0x4c
      return;
 800826c:	e002      	b.n	8008274 <SPI_RxISR_8BIT+0x80>
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	f000 fadc 	bl	800882c <SPI_CloseRx_ISR>
  }
}
 8008274:	3708      	adds	r7, #8
 8008276:	46bd      	mov	sp, r7
 8008278:	bd80      	pop	{r7, pc}
 800827a:	bf00      	nop
 800827c:	080081b7 	.word	0x080081b7

08008280 <SPI_RxISR_16BITCRC>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BITCRC(struct __SPI_HandleTypeDef *hspi)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b084      	sub	sp, #16
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0U;
 8008288:	2300      	movs	r3, #0
 800828a:	60fb      	str	r3, [r7, #12]

  /* Read 16bit CRC to flush Data Register */
  tmpreg = READ_REG(hspi->Instance->DR);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	68db      	ldr	r3, [r3, #12]
 8008292:	60fb      	str	r3, [r7, #12]
  /* To avoid GCC warning */
  UNUSED(tmpreg);
 8008294:	68fb      	ldr	r3, [r7, #12]

  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	685a      	ldr	r2, [r3, #4]
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80082a4:	605a      	str	r2, [r3, #4]

  SPI_CloseRx_ISR(hspi);
 80082a6:	6878      	ldr	r0, [r7, #4]
 80082a8:	f000 fac0 	bl	800882c <SPI_CloseRx_ISR>
}
 80082ac:	bf00      	nop
 80082ae:	3710      	adds	r7, #16
 80082b0:	46bd      	mov	sp, r7
 80082b2:	bd80      	pop	{r7, pc}

080082b4 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b082      	sub	sp, #8
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	68da      	ldr	r2, [r3, #12]
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082c6:	b292      	uxth	r2, r2
 80082c8:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082ce:	1c9a      	adds	r2, r3, #2
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80082da:	b29b      	uxth	r3, r3
 80082dc:	3b01      	subs	r3, #1
 80082de:	b29a      	uxth	r2, r3
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if ((hspi->RxXferCount == 1U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80082ec:	b29b      	uxth	r3, r3
 80082ee:	2b01      	cmp	r3, #1
 80082f0:	d10c      	bne.n	800830c <SPI_RxISR_16BIT+0x58>
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80082fa:	d107      	bne.n	800830c <SPI_RxISR_16BIT+0x58>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	681a      	ldr	r2, [r3, #0]
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800830a:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008312:	b29b      	uxth	r3, r3
 8008314:	2b00      	cmp	r3, #0
 8008316:	d10b      	bne.n	8008330 <SPI_RxISR_16BIT+0x7c>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800831c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008320:	d103      	bne.n	800832a <SPI_RxISR_16BIT+0x76>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	4a04      	ldr	r2, [pc, #16]	; (8008338 <SPI_RxISR_16BIT+0x84>)
 8008326:	64da      	str	r2, [r3, #76]	; 0x4c
      return;
 8008328:	e002      	b.n	8008330 <SPI_RxISR_16BIT+0x7c>
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 800832a:	6878      	ldr	r0, [r7, #4]
 800832c:	f000 fa7e 	bl	800882c <SPI_CloseRx_ISR>
  }
}
 8008330:	3708      	adds	r7, #8
 8008332:	46bd      	mov	sp, r7
 8008334:	bd80      	pop	{r7, pc}
 8008336:	bf00      	nop
 8008338:	08008281 	.word	0x08008281

0800833c <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b082      	sub	sp, #8
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	330c      	adds	r3, #12
 800834e:	7812      	ldrb	r2, [r2, #0]
 8008350:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008356:	1c5a      	adds	r2, r3, #1
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008360:	b29b      	uxth	r3, r3
 8008362:	3b01      	subs	r3, #1
 8008364:	b29a      	uxth	r2, r3
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800836e:	b29b      	uxth	r3, r3
 8008370:	2b00      	cmp	r3, #0
 8008372:	d10f      	bne.n	8008394 <SPI_TxISR_8BIT+0x58>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008378:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800837c:	d107      	bne.n	800838e <SPI_TxISR_8BIT+0x52>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	681a      	ldr	r2, [r3, #0]
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800838c:	601a      	str	r2, [r3, #0]
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 800838e:	6878      	ldr	r0, [r7, #4]
 8008390:	f000 fa92 	bl	80088b8 <SPI_CloseTx_ISR>
  }
}
 8008394:	bf00      	nop
 8008396:	3708      	adds	r7, #8
 8008398:	46bd      	mov	sp, r7
 800839a:	bd80      	pop	{r7, pc}

0800839c <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b082      	sub	sp, #8
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083a8:	881a      	ldrh	r2, [r3, #0]
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083b4:	1c9a      	adds	r2, r3, #2
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80083be:	b29b      	uxth	r3, r3
 80083c0:	3b01      	subs	r3, #1
 80083c2:	b29a      	uxth	r2, r3
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80083cc:	b29b      	uxth	r3, r3
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d10f      	bne.n	80083f2 <SPI_TxISR_16BIT+0x56>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80083da:	d107      	bne.n	80083ec <SPI_TxISR_16BIT+0x50>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	681a      	ldr	r2, [r3, #0]
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80083ea:	601a      	str	r2, [r3, #0]
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 80083ec:	6878      	ldr	r0, [r7, #4]
 80083ee:	f000 fa63 	bl	80088b8 <SPI_CloseTx_ISR>
  }
}
 80083f2:	bf00      	nop
 80083f4:	3708      	adds	r7, #8
 80083f6:	46bd      	mov	sp, r7
 80083f8:	bd80      	pop	{r7, pc}
	...

080083fc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b088      	sub	sp, #32
 8008400:	af00      	add	r7, sp, #0
 8008402:	60f8      	str	r0, [r7, #12]
 8008404:	60b9      	str	r1, [r7, #8]
 8008406:	603b      	str	r3, [r7, #0]
 8008408:	4613      	mov	r3, r2
 800840a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800840c:	f7fb fc3c 	bl	8003c88 <HAL_GetTick>
 8008410:	4602      	mov	r2, r0
 8008412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008414:	1a9b      	subs	r3, r3, r2
 8008416:	683a      	ldr	r2, [r7, #0]
 8008418:	4413      	add	r3, r2
 800841a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800841c:	f7fb fc34 	bl	8003c88 <HAL_GetTick>
 8008420:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008422:	4b39      	ldr	r3, [pc, #228]	; (8008508 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	015b      	lsls	r3, r3, #5
 8008428:	0d1b      	lsrs	r3, r3, #20
 800842a:	69fa      	ldr	r2, [r7, #28]
 800842c:	fb02 f303 	mul.w	r3, r2, r3
 8008430:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008432:	e054      	b.n	80084de <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	f1b3 3fff 	cmp.w	r3, #4294967295
 800843a:	d050      	beq.n	80084de <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800843c:	f7fb fc24 	bl	8003c88 <HAL_GetTick>
 8008440:	4602      	mov	r2, r0
 8008442:	69bb      	ldr	r3, [r7, #24]
 8008444:	1ad3      	subs	r3, r2, r3
 8008446:	69fa      	ldr	r2, [r7, #28]
 8008448:	429a      	cmp	r2, r3
 800844a:	d902      	bls.n	8008452 <SPI_WaitFlagStateUntilTimeout+0x56>
 800844c:	69fb      	ldr	r3, [r7, #28]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d13d      	bne.n	80084ce <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	685a      	ldr	r2, [r3, #4]
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008460:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	685b      	ldr	r3, [r3, #4]
 8008466:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800846a:	d111      	bne.n	8008490 <SPI_WaitFlagStateUntilTimeout+0x94>
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	689b      	ldr	r3, [r3, #8]
 8008470:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008474:	d004      	beq.n	8008480 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	689b      	ldr	r3, [r3, #8]
 800847a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800847e:	d107      	bne.n	8008490 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	681a      	ldr	r2, [r3, #0]
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800848e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008494:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008498:	d10f      	bne.n	80084ba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	681a      	ldr	r2, [r3, #0]
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80084a8:	601a      	str	r2, [r3, #0]
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	681a      	ldr	r2, [r3, #0]
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80084b8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	2201      	movs	r2, #1
 80084be:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	2200      	movs	r2, #0
 80084c6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80084ca:	2303      	movs	r3, #3
 80084cc:	e017      	b.n	80084fe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80084ce:	697b      	ldr	r3, [r7, #20]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d101      	bne.n	80084d8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80084d4:	2300      	movs	r3, #0
 80084d6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80084d8:	697b      	ldr	r3, [r7, #20]
 80084da:	3b01      	subs	r3, #1
 80084dc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	689a      	ldr	r2, [r3, #8]
 80084e4:	68bb      	ldr	r3, [r7, #8]
 80084e6:	4013      	ands	r3, r2
 80084e8:	68ba      	ldr	r2, [r7, #8]
 80084ea:	429a      	cmp	r2, r3
 80084ec:	bf0c      	ite	eq
 80084ee:	2301      	moveq	r3, #1
 80084f0:	2300      	movne	r3, #0
 80084f2:	b2db      	uxtb	r3, r3
 80084f4:	461a      	mov	r2, r3
 80084f6:	79fb      	ldrb	r3, [r7, #7]
 80084f8:	429a      	cmp	r2, r3
 80084fa:	d19b      	bne.n	8008434 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80084fc:	2300      	movs	r3, #0
}
 80084fe:	4618      	mov	r0, r3
 8008500:	3720      	adds	r7, #32
 8008502:	46bd      	mov	sp, r7
 8008504:	bd80      	pop	{r7, pc}
 8008506:	bf00      	nop
 8008508:	20000000 	.word	0x20000000

0800850c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b08a      	sub	sp, #40	; 0x28
 8008510:	af00      	add	r7, sp, #0
 8008512:	60f8      	str	r0, [r7, #12]
 8008514:	60b9      	str	r1, [r7, #8]
 8008516:	607a      	str	r2, [r7, #4]
 8008518:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800851a:	2300      	movs	r3, #0
 800851c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800851e:	f7fb fbb3 	bl	8003c88 <HAL_GetTick>
 8008522:	4602      	mov	r2, r0
 8008524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008526:	1a9b      	subs	r3, r3, r2
 8008528:	683a      	ldr	r2, [r7, #0]
 800852a:	4413      	add	r3, r2
 800852c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800852e:	f7fb fbab 	bl	8003c88 <HAL_GetTick>
 8008532:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	330c      	adds	r3, #12
 800853a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800853c:	4b3d      	ldr	r3, [pc, #244]	; (8008634 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800853e:	681a      	ldr	r2, [r3, #0]
 8008540:	4613      	mov	r3, r2
 8008542:	009b      	lsls	r3, r3, #2
 8008544:	4413      	add	r3, r2
 8008546:	00da      	lsls	r2, r3, #3
 8008548:	1ad3      	subs	r3, r2, r3
 800854a:	0d1b      	lsrs	r3, r3, #20
 800854c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800854e:	fb02 f303 	mul.w	r3, r2, r3
 8008552:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8008554:	e060      	b.n	8008618 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8008556:	68bb      	ldr	r3, [r7, #8]
 8008558:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800855c:	d107      	bne.n	800856e <SPI_WaitFifoStateUntilTimeout+0x62>
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d104      	bne.n	800856e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8008564:	69fb      	ldr	r3, [r7, #28]
 8008566:	781b      	ldrb	r3, [r3, #0]
 8008568:	b2db      	uxtb	r3, r3
 800856a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800856c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008574:	d050      	beq.n	8008618 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008576:	f7fb fb87 	bl	8003c88 <HAL_GetTick>
 800857a:	4602      	mov	r2, r0
 800857c:	6a3b      	ldr	r3, [r7, #32]
 800857e:	1ad3      	subs	r3, r2, r3
 8008580:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008582:	429a      	cmp	r2, r3
 8008584:	d902      	bls.n	800858c <SPI_WaitFifoStateUntilTimeout+0x80>
 8008586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008588:	2b00      	cmp	r3, #0
 800858a:	d13d      	bne.n	8008608 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	685a      	ldr	r2, [r3, #4]
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800859a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	685b      	ldr	r3, [r3, #4]
 80085a0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80085a4:	d111      	bne.n	80085ca <SPI_WaitFifoStateUntilTimeout+0xbe>
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	689b      	ldr	r3, [r3, #8]
 80085aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80085ae:	d004      	beq.n	80085ba <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	689b      	ldr	r3, [r3, #8]
 80085b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80085b8:	d107      	bne.n	80085ca <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	681a      	ldr	r2, [r3, #0]
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80085c8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80085d2:	d10f      	bne.n	80085f4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	681a      	ldr	r2, [r3, #0]
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80085e2:	601a      	str	r2, [r3, #0]
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	681a      	ldr	r2, [r3, #0]
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80085f2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	2201      	movs	r2, #1
 80085f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	2200      	movs	r2, #0
 8008600:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008604:	2303      	movs	r3, #3
 8008606:	e010      	b.n	800862a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008608:	69bb      	ldr	r3, [r7, #24]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d101      	bne.n	8008612 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800860e:	2300      	movs	r3, #0
 8008610:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8008612:	69bb      	ldr	r3, [r7, #24]
 8008614:	3b01      	subs	r3, #1
 8008616:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	689a      	ldr	r2, [r3, #8]
 800861e:	68bb      	ldr	r3, [r7, #8]
 8008620:	4013      	ands	r3, r2
 8008622:	687a      	ldr	r2, [r7, #4]
 8008624:	429a      	cmp	r2, r3
 8008626:	d196      	bne.n	8008556 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8008628:	2300      	movs	r3, #0
}
 800862a:	4618      	mov	r0, r3
 800862c:	3728      	adds	r7, #40	; 0x28
 800862e:	46bd      	mov	sp, r7
 8008630:	bd80      	pop	{r7, pc}
 8008632:	bf00      	nop
 8008634:	20000000 	.word	0x20000000

08008638 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b086      	sub	sp, #24
 800863c:	af02      	add	r7, sp, #8
 800863e:	60f8      	str	r0, [r7, #12]
 8008640:	60b9      	str	r1, [r7, #8]
 8008642:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	685b      	ldr	r3, [r3, #4]
 8008648:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800864c:	d111      	bne.n	8008672 <SPI_EndRxTransaction+0x3a>
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	689b      	ldr	r3, [r3, #8]
 8008652:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008656:	d004      	beq.n	8008662 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	689b      	ldr	r3, [r3, #8]
 800865c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008660:	d107      	bne.n	8008672 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	681a      	ldr	r2, [r3, #0]
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008670:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	9300      	str	r3, [sp, #0]
 8008676:	68bb      	ldr	r3, [r7, #8]
 8008678:	2200      	movs	r2, #0
 800867a:	2180      	movs	r1, #128	; 0x80
 800867c:	68f8      	ldr	r0, [r7, #12]
 800867e:	f7ff febd 	bl	80083fc <SPI_WaitFlagStateUntilTimeout>
 8008682:	4603      	mov	r3, r0
 8008684:	2b00      	cmp	r3, #0
 8008686:	d007      	beq.n	8008698 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800868c:	f043 0220 	orr.w	r2, r3, #32
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008694:	2303      	movs	r3, #3
 8008696:	e023      	b.n	80086e0 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	685b      	ldr	r3, [r3, #4]
 800869c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80086a0:	d11d      	bne.n	80086de <SPI_EndRxTransaction+0xa6>
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	689b      	ldr	r3, [r3, #8]
 80086a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80086aa:	d004      	beq.n	80086b6 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	689b      	ldr	r3, [r3, #8]
 80086b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80086b4:	d113      	bne.n	80086de <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	9300      	str	r3, [sp, #0]
 80086ba:	68bb      	ldr	r3, [r7, #8]
 80086bc:	2200      	movs	r2, #0
 80086be:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80086c2:	68f8      	ldr	r0, [r7, #12]
 80086c4:	f7ff ff22 	bl	800850c <SPI_WaitFifoStateUntilTimeout>
 80086c8:	4603      	mov	r3, r0
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d007      	beq.n	80086de <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80086d2:	f043 0220 	orr.w	r2, r3, #32
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80086da:	2303      	movs	r3, #3
 80086dc:	e000      	b.n	80086e0 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80086de:	2300      	movs	r3, #0
}
 80086e0:	4618      	mov	r0, r3
 80086e2:	3710      	adds	r7, #16
 80086e4:	46bd      	mov	sp, r7
 80086e6:	bd80      	pop	{r7, pc}

080086e8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b086      	sub	sp, #24
 80086ec:	af02      	add	r7, sp, #8
 80086ee:	60f8      	str	r0, [r7, #12]
 80086f0:	60b9      	str	r1, [r7, #8]
 80086f2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	9300      	str	r3, [sp, #0]
 80086f8:	68bb      	ldr	r3, [r7, #8]
 80086fa:	2200      	movs	r2, #0
 80086fc:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8008700:	68f8      	ldr	r0, [r7, #12]
 8008702:	f7ff ff03 	bl	800850c <SPI_WaitFifoStateUntilTimeout>
 8008706:	4603      	mov	r3, r0
 8008708:	2b00      	cmp	r3, #0
 800870a:	d007      	beq.n	800871c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008710:	f043 0220 	orr.w	r2, r3, #32
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008718:	2303      	movs	r3, #3
 800871a:	e027      	b.n	800876c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	9300      	str	r3, [sp, #0]
 8008720:	68bb      	ldr	r3, [r7, #8]
 8008722:	2200      	movs	r2, #0
 8008724:	2180      	movs	r1, #128	; 0x80
 8008726:	68f8      	ldr	r0, [r7, #12]
 8008728:	f7ff fe68 	bl	80083fc <SPI_WaitFlagStateUntilTimeout>
 800872c:	4603      	mov	r3, r0
 800872e:	2b00      	cmp	r3, #0
 8008730:	d007      	beq.n	8008742 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008736:	f043 0220 	orr.w	r2, r3, #32
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800873e:	2303      	movs	r3, #3
 8008740:	e014      	b.n	800876c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	9300      	str	r3, [sp, #0]
 8008746:	68bb      	ldr	r3, [r7, #8]
 8008748:	2200      	movs	r2, #0
 800874a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800874e:	68f8      	ldr	r0, [r7, #12]
 8008750:	f7ff fedc 	bl	800850c <SPI_WaitFifoStateUntilTimeout>
 8008754:	4603      	mov	r3, r0
 8008756:	2b00      	cmp	r3, #0
 8008758:	d007      	beq.n	800876a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800875e:	f043 0220 	orr.w	r2, r3, #32
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008766:	2303      	movs	r3, #3
 8008768:	e000      	b.n	800876c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800876a:	2300      	movs	r3, #0
}
 800876c:	4618      	mov	r0, r3
 800876e:	3710      	adds	r7, #16
 8008770:	46bd      	mov	sp, r7
 8008772:	bd80      	pop	{r7, pc}

08008774 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b084      	sub	sp, #16
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800877c:	f7fb fa84 	bl	8003c88 <HAL_GetTick>
 8008780:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	685a      	ldr	r2, [r3, #4]
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	f022 0220 	bic.w	r2, r2, #32
 8008790:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8008792:	68fa      	ldr	r2, [r7, #12]
 8008794:	2164      	movs	r1, #100	; 0x64
 8008796:	6878      	ldr	r0, [r7, #4]
 8008798:	f7ff ffa6 	bl	80086e8 <SPI_EndRxTxTransaction>
 800879c:	4603      	mov	r3, r0
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d005      	beq.n	80087ae <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80087a6:	f043 0220 	orr.w	r2, r3, #32
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	661a      	str	r2, [r3, #96]	; 0x60
  }

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	689b      	ldr	r3, [r3, #8]
 80087b4:	f003 0310 	and.w	r3, r3, #16
 80087b8:	2b10      	cmp	r3, #16
 80087ba:	d112      	bne.n	80087e2 <SPI_CloseRxTx_ISR+0x6e>
  {
    hspi->State = HAL_SPI_STATE_READY;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2201      	movs	r2, #1
 80087c0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80087c8:	f043 0202 	orr.w	r2, r3, #2
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	661a      	str	r2, [r3, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80087d8:	609a      	str	r2, [r3, #8]
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 80087da:	6878      	ldr	r0, [r7, #4]
 80087dc:	f7ff fb32 	bl	8007e44 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80087e0:	e020      	b.n	8008824 <SPI_CloseRxTx_ISR+0xb0>
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d115      	bne.n	8008816 <SPI_CloseRxTx_ISR+0xa2>
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80087f0:	b2db      	uxtb	r3, r3
 80087f2:	2b04      	cmp	r3, #4
 80087f4:	d107      	bne.n	8008806 <SPI_CloseRxTx_ISR+0x92>
        hspi->State = HAL_SPI_STATE_READY;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	2201      	movs	r2, #1
 80087fa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_RxCpltCallback(hspi);
 80087fe:	6878      	ldr	r0, [r7, #4]
 8008800:	f7fa ff4a 	bl	8003698 <HAL_SPI_RxCpltCallback>
}
 8008804:	e00e      	b.n	8008824 <SPI_CloseRxTx_ISR+0xb0>
        hspi->State = HAL_SPI_STATE_READY;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	2201      	movs	r2, #1
 800880a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 800880e:	6878      	ldr	r0, [r7, #4]
 8008810:	f7ff fb0e 	bl	8007e30 <HAL_SPI_TxRxCpltCallback>
}
 8008814:	e006      	b.n	8008824 <SPI_CloseRxTx_ISR+0xb0>
      hspi->State = HAL_SPI_STATE_READY;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	2201      	movs	r2, #1
 800881a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 800881e:	6878      	ldr	r0, [r7, #4]
 8008820:	f7ff fb10 	bl	8007e44 <HAL_SPI_ErrorCallback>
}
 8008824:	bf00      	nop
 8008826:	3710      	adds	r7, #16
 8008828:	46bd      	mov	sp, r7
 800882a:	bd80      	pop	{r7, pc}

0800882c <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 800882c:	b580      	push	{r7, lr}
 800882e:	b082      	sub	sp, #8
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	685a      	ldr	r2, [r3, #4]
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8008842:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8008844:	f7fb fa20 	bl	8003c88 <HAL_GetTick>
 8008848:	4603      	mov	r3, r0
 800884a:	461a      	mov	r2, r3
 800884c:	2164      	movs	r1, #100	; 0x64
 800884e:	6878      	ldr	r0, [r7, #4]
 8008850:	f7ff fef2 	bl	8008638 <SPI_EndRxTransaction>
 8008854:	4603      	mov	r3, r0
 8008856:	2b00      	cmp	r3, #0
 8008858:	d005      	beq.n	8008866 <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800885e:	f043 0220 	orr.w	r2, r3, #32
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	2201      	movs	r2, #1
 800886a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	689b      	ldr	r3, [r3, #8]
 8008874:	f003 0310 	and.w	r3, r3, #16
 8008878:	2b10      	cmp	r3, #16
 800887a:	d10e      	bne.n	800889a <SPI_CloseRx_ISR+0x6e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008880:	f043 0202 	orr.w	r2, r3, #2
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	661a      	str	r2, [r3, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8008890:	609a      	str	r2, [r3, #8]
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8008892:	6878      	ldr	r0, [r7, #4]
 8008894:	f7ff fad6 	bl	8007e44 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8008898:	e00a      	b.n	80088b0 <SPI_CloseRx_ISR+0x84>
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d103      	bne.n	80088aa <SPI_CloseRx_ISR+0x7e>
      HAL_SPI_RxCpltCallback(hspi);
 80088a2:	6878      	ldr	r0, [r7, #4]
 80088a4:	f7fa fef8 	bl	8003698 <HAL_SPI_RxCpltCallback>
}
 80088a8:	e002      	b.n	80088b0 <SPI_CloseRx_ISR+0x84>
      HAL_SPI_ErrorCallback(hspi);
 80088aa:	6878      	ldr	r0, [r7, #4]
 80088ac:	f7ff faca 	bl	8007e44 <HAL_SPI_ErrorCallback>
}
 80088b0:	bf00      	nop
 80088b2:	3708      	adds	r7, #8
 80088b4:	46bd      	mov	sp, r7
 80088b6:	bd80      	pop	{r7, pc}

080088b8 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b084      	sub	sp, #16
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80088c0:	f7fb f9e2 	bl	8003c88 <HAL_GetTick>
 80088c4:	60f8      	str	r0, [r7, #12]

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	685a      	ldr	r2, [r3, #4]
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80088d4:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80088d6:	68fa      	ldr	r2, [r7, #12]
 80088d8:	2164      	movs	r1, #100	; 0x64
 80088da:	6878      	ldr	r0, [r7, #4]
 80088dc:	f7ff ff04 	bl	80086e8 <SPI_EndRxTxTransaction>
 80088e0:	4603      	mov	r3, r0
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d005      	beq.n	80088f2 <SPI_CloseTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80088ea:	f043 0220 	orr.w	r2, r3, #32
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	689b      	ldr	r3, [r3, #8]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d10a      	bne.n	8008910 <SPI_CloseTx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80088fa:	2300      	movs	r3, #0
 80088fc:	60bb      	str	r3, [r7, #8]
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	68db      	ldr	r3, [r3, #12]
 8008904:	60bb      	str	r3, [r7, #8]
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	689b      	ldr	r3, [r3, #8]
 800890c:	60bb      	str	r3, [r7, #8]
 800890e:	68bb      	ldr	r3, [r7, #8]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2201      	movs	r2, #1
 8008914:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800891c:	2b00      	cmp	r3, #0
 800891e:	d003      	beq.n	8008928 <SPI_CloseTx_ISR+0x70>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8008920:	6878      	ldr	r0, [r7, #4]
 8008922:	f7ff fa8f 	bl	8007e44 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8008926:	e002      	b.n	800892e <SPI_CloseTx_ISR+0x76>
    HAL_SPI_TxCpltCallback(hspi);
 8008928:	6878      	ldr	r0, [r7, #4]
 800892a:	f7fa fec9 	bl	80036c0 <HAL_SPI_TxCpltCallback>
}
 800892e:	bf00      	nop
 8008930:	3710      	adds	r7, #16
 8008932:	46bd      	mov	sp, r7
 8008934:	bd80      	pop	{r7, pc}

08008936 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008936:	b580      	push	{r7, lr}
 8008938:	b082      	sub	sp, #8
 800893a:	af00      	add	r7, sp, #0
 800893c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d101      	bne.n	8008948 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008944:	2301      	movs	r3, #1
 8008946:	e049      	b.n	80089dc <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800894e:	b2db      	uxtb	r3, r3
 8008950:	2b00      	cmp	r3, #0
 8008952:	d106      	bne.n	8008962 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2200      	movs	r2, #0
 8008958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800895c:	6878      	ldr	r0, [r7, #4]
 800895e:	f7f9 f96d 	bl	8001c3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	2202      	movs	r2, #2
 8008966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681a      	ldr	r2, [r3, #0]
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	3304      	adds	r3, #4
 8008972:	4619      	mov	r1, r3
 8008974:	4610      	mov	r0, r2
 8008976:	f000 fa99 	bl	8008eac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	2201      	movs	r2, #1
 800897e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2201      	movs	r2, #1
 8008986:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	2201      	movs	r2, #1
 800898e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	2201      	movs	r2, #1
 8008996:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	2201      	movs	r2, #1
 800899e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	2201      	movs	r2, #1
 80089a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	2201      	movs	r2, #1
 80089ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	2201      	movs	r2, #1
 80089b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	2201      	movs	r2, #1
 80089be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	2201      	movs	r2, #1
 80089c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	2201      	movs	r2, #1
 80089ce:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	2201      	movs	r2, #1
 80089d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80089da:	2300      	movs	r3, #0
}
 80089dc:	4618      	mov	r0, r3
 80089de:	3708      	adds	r7, #8
 80089e0:	46bd      	mov	sp, r7
 80089e2:	bd80      	pop	{r7, pc}

080089e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80089e4:	b480      	push	{r7}
 80089e6:	b085      	sub	sp, #20
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80089f2:	b2db      	uxtb	r3, r3
 80089f4:	2b01      	cmp	r3, #1
 80089f6:	d001      	beq.n	80089fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80089f8:	2301      	movs	r3, #1
 80089fa:	e04f      	b.n	8008a9c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2202      	movs	r2, #2
 8008a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	68da      	ldr	r2, [r3, #12]
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	f042 0201 	orr.w	r2, r2, #1
 8008a12:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	4a23      	ldr	r2, [pc, #140]	; (8008aa8 <HAL_TIM_Base_Start_IT+0xc4>)
 8008a1a:	4293      	cmp	r3, r2
 8008a1c:	d01d      	beq.n	8008a5a <HAL_TIM_Base_Start_IT+0x76>
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a26:	d018      	beq.n	8008a5a <HAL_TIM_Base_Start_IT+0x76>
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	4a1f      	ldr	r2, [pc, #124]	; (8008aac <HAL_TIM_Base_Start_IT+0xc8>)
 8008a2e:	4293      	cmp	r3, r2
 8008a30:	d013      	beq.n	8008a5a <HAL_TIM_Base_Start_IT+0x76>
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	4a1e      	ldr	r2, [pc, #120]	; (8008ab0 <HAL_TIM_Base_Start_IT+0xcc>)
 8008a38:	4293      	cmp	r3, r2
 8008a3a:	d00e      	beq.n	8008a5a <HAL_TIM_Base_Start_IT+0x76>
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	4a1c      	ldr	r2, [pc, #112]	; (8008ab4 <HAL_TIM_Base_Start_IT+0xd0>)
 8008a42:	4293      	cmp	r3, r2
 8008a44:	d009      	beq.n	8008a5a <HAL_TIM_Base_Start_IT+0x76>
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	4a1b      	ldr	r2, [pc, #108]	; (8008ab8 <HAL_TIM_Base_Start_IT+0xd4>)
 8008a4c:	4293      	cmp	r3, r2
 8008a4e:	d004      	beq.n	8008a5a <HAL_TIM_Base_Start_IT+0x76>
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	4a19      	ldr	r2, [pc, #100]	; (8008abc <HAL_TIM_Base_Start_IT+0xd8>)
 8008a56:	4293      	cmp	r3, r2
 8008a58:	d115      	bne.n	8008a86 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	689a      	ldr	r2, [r3, #8]
 8008a60:	4b17      	ldr	r3, [pc, #92]	; (8008ac0 <HAL_TIM_Base_Start_IT+0xdc>)
 8008a62:	4013      	ands	r3, r2
 8008a64:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	2b06      	cmp	r3, #6
 8008a6a:	d015      	beq.n	8008a98 <HAL_TIM_Base_Start_IT+0xb4>
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a72:	d011      	beq.n	8008a98 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	681a      	ldr	r2, [r3, #0]
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	f042 0201 	orr.w	r2, r2, #1
 8008a82:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a84:	e008      	b.n	8008a98 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	681a      	ldr	r2, [r3, #0]
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	f042 0201 	orr.w	r2, r2, #1
 8008a94:	601a      	str	r2, [r3, #0]
 8008a96:	e000      	b.n	8008a9a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a98:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008a9a:	2300      	movs	r3, #0
}
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	3714      	adds	r7, #20
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa6:	4770      	bx	lr
 8008aa8:	40012c00 	.word	0x40012c00
 8008aac:	40000400 	.word	0x40000400
 8008ab0:	40000800 	.word	0x40000800
 8008ab4:	40000c00 	.word	0x40000c00
 8008ab8:	40013400 	.word	0x40013400
 8008abc:	40014000 	.word	0x40014000
 8008ac0:	00010007 	.word	0x00010007

08008ac4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b084      	sub	sp, #16
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	68db      	ldr	r3, [r3, #12]
 8008ad2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	691b      	ldr	r3, [r3, #16]
 8008ada:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008adc:	68bb      	ldr	r3, [r7, #8]
 8008ade:	f003 0302 	and.w	r3, r3, #2
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d020      	beq.n	8008b28 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	f003 0302 	and.w	r3, r3, #2
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d01b      	beq.n	8008b28 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	f06f 0202 	mvn.w	r2, #2
 8008af8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	2201      	movs	r2, #1
 8008afe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	699b      	ldr	r3, [r3, #24]
 8008b06:	f003 0303 	and.w	r3, r3, #3
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d003      	beq.n	8008b16 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008b0e:	6878      	ldr	r0, [r7, #4]
 8008b10:	f000 f9ad 	bl	8008e6e <HAL_TIM_IC_CaptureCallback>
 8008b14:	e005      	b.n	8008b22 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b16:	6878      	ldr	r0, [r7, #4]
 8008b18:	f000 f99f 	bl	8008e5a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b1c:	6878      	ldr	r0, [r7, #4]
 8008b1e:	f000 f9b0 	bl	8008e82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	2200      	movs	r2, #0
 8008b26:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008b28:	68bb      	ldr	r3, [r7, #8]
 8008b2a:	f003 0304 	and.w	r3, r3, #4
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d020      	beq.n	8008b74 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	f003 0304 	and.w	r3, r3, #4
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d01b      	beq.n	8008b74 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	f06f 0204 	mvn.w	r2, #4
 8008b44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	2202      	movs	r2, #2
 8008b4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	699b      	ldr	r3, [r3, #24]
 8008b52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d003      	beq.n	8008b62 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008b5a:	6878      	ldr	r0, [r7, #4]
 8008b5c:	f000 f987 	bl	8008e6e <HAL_TIM_IC_CaptureCallback>
 8008b60:	e005      	b.n	8008b6e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b62:	6878      	ldr	r0, [r7, #4]
 8008b64:	f000 f979 	bl	8008e5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b68:	6878      	ldr	r0, [r7, #4]
 8008b6a:	f000 f98a 	bl	8008e82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	2200      	movs	r2, #0
 8008b72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008b74:	68bb      	ldr	r3, [r7, #8]
 8008b76:	f003 0308 	and.w	r3, r3, #8
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d020      	beq.n	8008bc0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	f003 0308 	and.w	r3, r3, #8
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d01b      	beq.n	8008bc0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	f06f 0208 	mvn.w	r2, #8
 8008b90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	2204      	movs	r2, #4
 8008b96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	69db      	ldr	r3, [r3, #28]
 8008b9e:	f003 0303 	and.w	r3, r3, #3
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d003      	beq.n	8008bae <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008ba6:	6878      	ldr	r0, [r7, #4]
 8008ba8:	f000 f961 	bl	8008e6e <HAL_TIM_IC_CaptureCallback>
 8008bac:	e005      	b.n	8008bba <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008bae:	6878      	ldr	r0, [r7, #4]
 8008bb0:	f000 f953 	bl	8008e5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008bb4:	6878      	ldr	r0, [r7, #4]
 8008bb6:	f000 f964 	bl	8008e82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008bc0:	68bb      	ldr	r3, [r7, #8]
 8008bc2:	f003 0310 	and.w	r3, r3, #16
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d020      	beq.n	8008c0c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	f003 0310 	and.w	r3, r3, #16
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d01b      	beq.n	8008c0c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	f06f 0210 	mvn.w	r2, #16
 8008bdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	2208      	movs	r2, #8
 8008be2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	69db      	ldr	r3, [r3, #28]
 8008bea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d003      	beq.n	8008bfa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008bf2:	6878      	ldr	r0, [r7, #4]
 8008bf4:	f000 f93b 	bl	8008e6e <HAL_TIM_IC_CaptureCallback>
 8008bf8:	e005      	b.n	8008c06 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008bfa:	6878      	ldr	r0, [r7, #4]
 8008bfc:	f000 f92d 	bl	8008e5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c00:	6878      	ldr	r0, [r7, #4]
 8008c02:	f000 f93e 	bl	8008e82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	2200      	movs	r2, #0
 8008c0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008c0c:	68bb      	ldr	r3, [r7, #8]
 8008c0e:	f003 0301 	and.w	r3, r3, #1
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d00c      	beq.n	8008c30 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	f003 0301 	and.w	r3, r3, #1
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d007      	beq.n	8008c30 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	f06f 0201 	mvn.w	r2, #1
 8008c28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008c2a:	6878      	ldr	r0, [r7, #4]
 8008c2c:	f7f8 fe4b 	bl	80018c6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8008c30:	68bb      	ldr	r3, [r7, #8]
 8008c32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d00c      	beq.n	8008c54 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d007      	beq.n	8008c54 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008c4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008c4e:	6878      	ldr	r0, [r7, #4]
 8008c50:	f000 faf2 	bl	8009238 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008c54:	68bb      	ldr	r3, [r7, #8]
 8008c56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d00c      	beq.n	8008c78 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d007      	beq.n	8008c78 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008c70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008c72:	6878      	ldr	r0, [r7, #4]
 8008c74:	f000 faea 	bl	800924c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008c78:	68bb      	ldr	r3, [r7, #8]
 8008c7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d00c      	beq.n	8008c9c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d007      	beq.n	8008c9c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008c94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008c96:	6878      	ldr	r0, [r7, #4]
 8008c98:	f000 f8fd 	bl	8008e96 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008c9c:	68bb      	ldr	r3, [r7, #8]
 8008c9e:	f003 0320 	and.w	r3, r3, #32
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d00c      	beq.n	8008cc0 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	f003 0320 	and.w	r3, r3, #32
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d007      	beq.n	8008cc0 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	f06f 0220 	mvn.w	r2, #32
 8008cb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008cba:	6878      	ldr	r0, [r7, #4]
 8008cbc:	f000 fab2 	bl	8009224 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008cc0:	bf00      	nop
 8008cc2:	3710      	adds	r7, #16
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	bd80      	pop	{r7, pc}

08008cc8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b084      	sub	sp, #16
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
 8008cd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008cdc:	2b01      	cmp	r3, #1
 8008cde:	d101      	bne.n	8008ce4 <HAL_TIM_ConfigClockSource+0x1c>
 8008ce0:	2302      	movs	r3, #2
 8008ce2:	e0b6      	b.n	8008e52 <HAL_TIM_ConfigClockSource+0x18a>
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2201      	movs	r2, #1
 8008ce8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2202      	movs	r2, #2
 8008cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	689b      	ldr	r3, [r3, #8]
 8008cfa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008cfc:	68bb      	ldr	r3, [r7, #8]
 8008cfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008d02:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008d06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008d08:	68bb      	ldr	r3, [r7, #8]
 8008d0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008d0e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	68ba      	ldr	r2, [r7, #8]
 8008d16:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d20:	d03e      	beq.n	8008da0 <HAL_TIM_ConfigClockSource+0xd8>
 8008d22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d26:	f200 8087 	bhi.w	8008e38 <HAL_TIM_ConfigClockSource+0x170>
 8008d2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d2e:	f000 8086 	beq.w	8008e3e <HAL_TIM_ConfigClockSource+0x176>
 8008d32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d36:	d87f      	bhi.n	8008e38 <HAL_TIM_ConfigClockSource+0x170>
 8008d38:	2b70      	cmp	r3, #112	; 0x70
 8008d3a:	d01a      	beq.n	8008d72 <HAL_TIM_ConfigClockSource+0xaa>
 8008d3c:	2b70      	cmp	r3, #112	; 0x70
 8008d3e:	d87b      	bhi.n	8008e38 <HAL_TIM_ConfigClockSource+0x170>
 8008d40:	2b60      	cmp	r3, #96	; 0x60
 8008d42:	d050      	beq.n	8008de6 <HAL_TIM_ConfigClockSource+0x11e>
 8008d44:	2b60      	cmp	r3, #96	; 0x60
 8008d46:	d877      	bhi.n	8008e38 <HAL_TIM_ConfigClockSource+0x170>
 8008d48:	2b50      	cmp	r3, #80	; 0x50
 8008d4a:	d03c      	beq.n	8008dc6 <HAL_TIM_ConfigClockSource+0xfe>
 8008d4c:	2b50      	cmp	r3, #80	; 0x50
 8008d4e:	d873      	bhi.n	8008e38 <HAL_TIM_ConfigClockSource+0x170>
 8008d50:	2b40      	cmp	r3, #64	; 0x40
 8008d52:	d058      	beq.n	8008e06 <HAL_TIM_ConfigClockSource+0x13e>
 8008d54:	2b40      	cmp	r3, #64	; 0x40
 8008d56:	d86f      	bhi.n	8008e38 <HAL_TIM_ConfigClockSource+0x170>
 8008d58:	2b30      	cmp	r3, #48	; 0x30
 8008d5a:	d064      	beq.n	8008e26 <HAL_TIM_ConfigClockSource+0x15e>
 8008d5c:	2b30      	cmp	r3, #48	; 0x30
 8008d5e:	d86b      	bhi.n	8008e38 <HAL_TIM_ConfigClockSource+0x170>
 8008d60:	2b20      	cmp	r3, #32
 8008d62:	d060      	beq.n	8008e26 <HAL_TIM_ConfigClockSource+0x15e>
 8008d64:	2b20      	cmp	r3, #32
 8008d66:	d867      	bhi.n	8008e38 <HAL_TIM_ConfigClockSource+0x170>
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d05c      	beq.n	8008e26 <HAL_TIM_ConfigClockSource+0x15e>
 8008d6c:	2b10      	cmp	r3, #16
 8008d6e:	d05a      	beq.n	8008e26 <HAL_TIM_ConfigClockSource+0x15e>
 8008d70:	e062      	b.n	8008e38 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008d76:	683b      	ldr	r3, [r7, #0]
 8008d78:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008d82:	f000 f9a7 	bl	80090d4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	689b      	ldr	r3, [r3, #8]
 8008d8c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008d8e:	68bb      	ldr	r3, [r7, #8]
 8008d90:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008d94:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	68ba      	ldr	r2, [r7, #8]
 8008d9c:	609a      	str	r2, [r3, #8]
      break;
 8008d9e:	e04f      	b.n	8008e40 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008da8:	683b      	ldr	r3, [r7, #0]
 8008daa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008db0:	f000 f990 	bl	80090d4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	689a      	ldr	r2, [r3, #8]
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008dc2:	609a      	str	r2, [r3, #8]
      break;
 8008dc4:	e03c      	b.n	8008e40 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008dd2:	461a      	mov	r2, r3
 8008dd4:	f000 f904 	bl	8008fe0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	2150      	movs	r1, #80	; 0x50
 8008dde:	4618      	mov	r0, r3
 8008de0:	f000 f95d 	bl	800909e <TIM_ITRx_SetConfig>
      break;
 8008de4:	e02c      	b.n	8008e40 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008dee:	683b      	ldr	r3, [r7, #0]
 8008df0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008df2:	461a      	mov	r2, r3
 8008df4:	f000 f923 	bl	800903e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	2160      	movs	r1, #96	; 0x60
 8008dfe:	4618      	mov	r0, r3
 8008e00:	f000 f94d 	bl	800909e <TIM_ITRx_SetConfig>
      break;
 8008e04:	e01c      	b.n	8008e40 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008e0a:	683b      	ldr	r3, [r7, #0]
 8008e0c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008e0e:	683b      	ldr	r3, [r7, #0]
 8008e10:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008e12:	461a      	mov	r2, r3
 8008e14:	f000 f8e4 	bl	8008fe0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	2140      	movs	r1, #64	; 0x40
 8008e1e:	4618      	mov	r0, r3
 8008e20:	f000 f93d 	bl	800909e <TIM_ITRx_SetConfig>
      break;
 8008e24:	e00c      	b.n	8008e40 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681a      	ldr	r2, [r3, #0]
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	4619      	mov	r1, r3
 8008e30:	4610      	mov	r0, r2
 8008e32:	f000 f934 	bl	800909e <TIM_ITRx_SetConfig>
      break;
 8008e36:	e003      	b.n	8008e40 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8008e38:	2301      	movs	r3, #1
 8008e3a:	73fb      	strb	r3, [r7, #15]
      break;
 8008e3c:	e000      	b.n	8008e40 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8008e3e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	2201      	movs	r2, #1
 8008e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008e50:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e52:	4618      	mov	r0, r3
 8008e54:	3710      	adds	r7, #16
 8008e56:	46bd      	mov	sp, r7
 8008e58:	bd80      	pop	{r7, pc}

08008e5a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008e5a:	b480      	push	{r7}
 8008e5c:	b083      	sub	sp, #12
 8008e5e:	af00      	add	r7, sp, #0
 8008e60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008e62:	bf00      	nop
 8008e64:	370c      	adds	r7, #12
 8008e66:	46bd      	mov	sp, r7
 8008e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6c:	4770      	bx	lr

08008e6e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008e6e:	b480      	push	{r7}
 8008e70:	b083      	sub	sp, #12
 8008e72:	af00      	add	r7, sp, #0
 8008e74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008e76:	bf00      	nop
 8008e78:	370c      	adds	r7, #12
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e80:	4770      	bx	lr

08008e82 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008e82:	b480      	push	{r7}
 8008e84:	b083      	sub	sp, #12
 8008e86:	af00      	add	r7, sp, #0
 8008e88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008e8a:	bf00      	nop
 8008e8c:	370c      	adds	r7, #12
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e94:	4770      	bx	lr

08008e96 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008e96:	b480      	push	{r7}
 8008e98:	b083      	sub	sp, #12
 8008e9a:	af00      	add	r7, sp, #0
 8008e9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008e9e:	bf00      	nop
 8008ea0:	370c      	adds	r7, #12
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea8:	4770      	bx	lr
	...

08008eac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008eac:	b480      	push	{r7}
 8008eae:	b085      	sub	sp, #20
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
 8008eb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	4a40      	ldr	r2, [pc, #256]	; (8008fc0 <TIM_Base_SetConfig+0x114>)
 8008ec0:	4293      	cmp	r3, r2
 8008ec2:	d013      	beq.n	8008eec <TIM_Base_SetConfig+0x40>
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008eca:	d00f      	beq.n	8008eec <TIM_Base_SetConfig+0x40>
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	4a3d      	ldr	r2, [pc, #244]	; (8008fc4 <TIM_Base_SetConfig+0x118>)
 8008ed0:	4293      	cmp	r3, r2
 8008ed2:	d00b      	beq.n	8008eec <TIM_Base_SetConfig+0x40>
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	4a3c      	ldr	r2, [pc, #240]	; (8008fc8 <TIM_Base_SetConfig+0x11c>)
 8008ed8:	4293      	cmp	r3, r2
 8008eda:	d007      	beq.n	8008eec <TIM_Base_SetConfig+0x40>
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	4a3b      	ldr	r2, [pc, #236]	; (8008fcc <TIM_Base_SetConfig+0x120>)
 8008ee0:	4293      	cmp	r3, r2
 8008ee2:	d003      	beq.n	8008eec <TIM_Base_SetConfig+0x40>
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	4a3a      	ldr	r2, [pc, #232]	; (8008fd0 <TIM_Base_SetConfig+0x124>)
 8008ee8:	4293      	cmp	r3, r2
 8008eea:	d108      	bne.n	8008efe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ef2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008ef4:	683b      	ldr	r3, [r7, #0]
 8008ef6:	685b      	ldr	r3, [r3, #4]
 8008ef8:	68fa      	ldr	r2, [r7, #12]
 8008efa:	4313      	orrs	r3, r2
 8008efc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	4a2f      	ldr	r2, [pc, #188]	; (8008fc0 <TIM_Base_SetConfig+0x114>)
 8008f02:	4293      	cmp	r3, r2
 8008f04:	d01f      	beq.n	8008f46 <TIM_Base_SetConfig+0x9a>
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f0c:	d01b      	beq.n	8008f46 <TIM_Base_SetConfig+0x9a>
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	4a2c      	ldr	r2, [pc, #176]	; (8008fc4 <TIM_Base_SetConfig+0x118>)
 8008f12:	4293      	cmp	r3, r2
 8008f14:	d017      	beq.n	8008f46 <TIM_Base_SetConfig+0x9a>
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	4a2b      	ldr	r2, [pc, #172]	; (8008fc8 <TIM_Base_SetConfig+0x11c>)
 8008f1a:	4293      	cmp	r3, r2
 8008f1c:	d013      	beq.n	8008f46 <TIM_Base_SetConfig+0x9a>
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	4a2a      	ldr	r2, [pc, #168]	; (8008fcc <TIM_Base_SetConfig+0x120>)
 8008f22:	4293      	cmp	r3, r2
 8008f24:	d00f      	beq.n	8008f46 <TIM_Base_SetConfig+0x9a>
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	4a29      	ldr	r2, [pc, #164]	; (8008fd0 <TIM_Base_SetConfig+0x124>)
 8008f2a:	4293      	cmp	r3, r2
 8008f2c:	d00b      	beq.n	8008f46 <TIM_Base_SetConfig+0x9a>
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	4a28      	ldr	r2, [pc, #160]	; (8008fd4 <TIM_Base_SetConfig+0x128>)
 8008f32:	4293      	cmp	r3, r2
 8008f34:	d007      	beq.n	8008f46 <TIM_Base_SetConfig+0x9a>
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	4a27      	ldr	r2, [pc, #156]	; (8008fd8 <TIM_Base_SetConfig+0x12c>)
 8008f3a:	4293      	cmp	r3, r2
 8008f3c:	d003      	beq.n	8008f46 <TIM_Base_SetConfig+0x9a>
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	4a26      	ldr	r2, [pc, #152]	; (8008fdc <TIM_Base_SetConfig+0x130>)
 8008f42:	4293      	cmp	r3, r2
 8008f44:	d108      	bne.n	8008f58 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008f4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008f4e:	683b      	ldr	r3, [r7, #0]
 8008f50:	68db      	ldr	r3, [r3, #12]
 8008f52:	68fa      	ldr	r2, [r7, #12]
 8008f54:	4313      	orrs	r3, r2
 8008f56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008f5e:	683b      	ldr	r3, [r7, #0]
 8008f60:	695b      	ldr	r3, [r3, #20]
 8008f62:	4313      	orrs	r3, r2
 8008f64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	68fa      	ldr	r2, [r7, #12]
 8008f6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008f6c:	683b      	ldr	r3, [r7, #0]
 8008f6e:	689a      	ldr	r2, [r3, #8]
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	681a      	ldr	r2, [r3, #0]
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	4a10      	ldr	r2, [pc, #64]	; (8008fc0 <TIM_Base_SetConfig+0x114>)
 8008f80:	4293      	cmp	r3, r2
 8008f82:	d00f      	beq.n	8008fa4 <TIM_Base_SetConfig+0xf8>
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	4a12      	ldr	r2, [pc, #72]	; (8008fd0 <TIM_Base_SetConfig+0x124>)
 8008f88:	4293      	cmp	r3, r2
 8008f8a:	d00b      	beq.n	8008fa4 <TIM_Base_SetConfig+0xf8>
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	4a11      	ldr	r2, [pc, #68]	; (8008fd4 <TIM_Base_SetConfig+0x128>)
 8008f90:	4293      	cmp	r3, r2
 8008f92:	d007      	beq.n	8008fa4 <TIM_Base_SetConfig+0xf8>
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	4a10      	ldr	r2, [pc, #64]	; (8008fd8 <TIM_Base_SetConfig+0x12c>)
 8008f98:	4293      	cmp	r3, r2
 8008f9a:	d003      	beq.n	8008fa4 <TIM_Base_SetConfig+0xf8>
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	4a0f      	ldr	r2, [pc, #60]	; (8008fdc <TIM_Base_SetConfig+0x130>)
 8008fa0:	4293      	cmp	r3, r2
 8008fa2:	d103      	bne.n	8008fac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	691a      	ldr	r2, [r3, #16]
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	2201      	movs	r2, #1
 8008fb0:	615a      	str	r2, [r3, #20]
}
 8008fb2:	bf00      	nop
 8008fb4:	3714      	adds	r7, #20
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fbc:	4770      	bx	lr
 8008fbe:	bf00      	nop
 8008fc0:	40012c00 	.word	0x40012c00
 8008fc4:	40000400 	.word	0x40000400
 8008fc8:	40000800 	.word	0x40000800
 8008fcc:	40000c00 	.word	0x40000c00
 8008fd0:	40013400 	.word	0x40013400
 8008fd4:	40014000 	.word	0x40014000
 8008fd8:	40014400 	.word	0x40014400
 8008fdc:	40014800 	.word	0x40014800

08008fe0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008fe0:	b480      	push	{r7}
 8008fe2:	b087      	sub	sp, #28
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	60f8      	str	r0, [r7, #12]
 8008fe8:	60b9      	str	r1, [r7, #8]
 8008fea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	6a1b      	ldr	r3, [r3, #32]
 8008ff0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	6a1b      	ldr	r3, [r3, #32]
 8008ff6:	f023 0201 	bic.w	r2, r3, #1
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	699b      	ldr	r3, [r3, #24]
 8009002:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009004:	693b      	ldr	r3, [r7, #16]
 8009006:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800900a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	011b      	lsls	r3, r3, #4
 8009010:	693a      	ldr	r2, [r7, #16]
 8009012:	4313      	orrs	r3, r2
 8009014:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009016:	697b      	ldr	r3, [r7, #20]
 8009018:	f023 030a 	bic.w	r3, r3, #10
 800901c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800901e:	697a      	ldr	r2, [r7, #20]
 8009020:	68bb      	ldr	r3, [r7, #8]
 8009022:	4313      	orrs	r3, r2
 8009024:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	693a      	ldr	r2, [r7, #16]
 800902a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	697a      	ldr	r2, [r7, #20]
 8009030:	621a      	str	r2, [r3, #32]
}
 8009032:	bf00      	nop
 8009034:	371c      	adds	r7, #28
 8009036:	46bd      	mov	sp, r7
 8009038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903c:	4770      	bx	lr

0800903e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800903e:	b480      	push	{r7}
 8009040:	b087      	sub	sp, #28
 8009042:	af00      	add	r7, sp, #0
 8009044:	60f8      	str	r0, [r7, #12]
 8009046:	60b9      	str	r1, [r7, #8]
 8009048:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	6a1b      	ldr	r3, [r3, #32]
 800904e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	6a1b      	ldr	r3, [r3, #32]
 8009054:	f023 0210 	bic.w	r2, r3, #16
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	699b      	ldr	r3, [r3, #24]
 8009060:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009062:	693b      	ldr	r3, [r7, #16]
 8009064:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009068:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	031b      	lsls	r3, r3, #12
 800906e:	693a      	ldr	r2, [r7, #16]
 8009070:	4313      	orrs	r3, r2
 8009072:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009074:	697b      	ldr	r3, [r7, #20]
 8009076:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800907a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800907c:	68bb      	ldr	r3, [r7, #8]
 800907e:	011b      	lsls	r3, r3, #4
 8009080:	697a      	ldr	r2, [r7, #20]
 8009082:	4313      	orrs	r3, r2
 8009084:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	693a      	ldr	r2, [r7, #16]
 800908a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	697a      	ldr	r2, [r7, #20]
 8009090:	621a      	str	r2, [r3, #32]
}
 8009092:	bf00      	nop
 8009094:	371c      	adds	r7, #28
 8009096:	46bd      	mov	sp, r7
 8009098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909c:	4770      	bx	lr

0800909e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800909e:	b480      	push	{r7}
 80090a0:	b085      	sub	sp, #20
 80090a2:	af00      	add	r7, sp, #0
 80090a4:	6078      	str	r0, [r7, #4]
 80090a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	689b      	ldr	r3, [r3, #8]
 80090ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80090b6:	683a      	ldr	r2, [r7, #0]
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	4313      	orrs	r3, r2
 80090bc:	f043 0307 	orr.w	r3, r3, #7
 80090c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	68fa      	ldr	r2, [r7, #12]
 80090c6:	609a      	str	r2, [r3, #8]
}
 80090c8:	bf00      	nop
 80090ca:	3714      	adds	r7, #20
 80090cc:	46bd      	mov	sp, r7
 80090ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d2:	4770      	bx	lr

080090d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80090d4:	b480      	push	{r7}
 80090d6:	b087      	sub	sp, #28
 80090d8:	af00      	add	r7, sp, #0
 80090da:	60f8      	str	r0, [r7, #12]
 80090dc:	60b9      	str	r1, [r7, #8]
 80090de:	607a      	str	r2, [r7, #4]
 80090e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	689b      	ldr	r3, [r3, #8]
 80090e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80090e8:	697b      	ldr	r3, [r7, #20]
 80090ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80090ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	021a      	lsls	r2, r3, #8
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	431a      	orrs	r2, r3
 80090f8:	68bb      	ldr	r3, [r7, #8]
 80090fa:	4313      	orrs	r3, r2
 80090fc:	697a      	ldr	r2, [r7, #20]
 80090fe:	4313      	orrs	r3, r2
 8009100:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	697a      	ldr	r2, [r7, #20]
 8009106:	609a      	str	r2, [r3, #8]
}
 8009108:	bf00      	nop
 800910a:	371c      	adds	r7, #28
 800910c:	46bd      	mov	sp, r7
 800910e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009112:	4770      	bx	lr

08009114 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009114:	b480      	push	{r7}
 8009116:	b085      	sub	sp, #20
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
 800911c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009124:	2b01      	cmp	r3, #1
 8009126:	d101      	bne.n	800912c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009128:	2302      	movs	r3, #2
 800912a:	e068      	b.n	80091fe <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2201      	movs	r2, #1
 8009130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2202      	movs	r2, #2
 8009138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	685b      	ldr	r3, [r3, #4]
 8009142:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	689b      	ldr	r3, [r3, #8]
 800914a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	4a2e      	ldr	r2, [pc, #184]	; (800920c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009152:	4293      	cmp	r3, r2
 8009154:	d004      	beq.n	8009160 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	4a2d      	ldr	r2, [pc, #180]	; (8009210 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800915c:	4293      	cmp	r3, r2
 800915e:	d108      	bne.n	8009172 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009166:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009168:	683b      	ldr	r3, [r7, #0]
 800916a:	685b      	ldr	r3, [r3, #4]
 800916c:	68fa      	ldr	r2, [r7, #12]
 800916e:	4313      	orrs	r3, r2
 8009170:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009178:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800917a:	683b      	ldr	r3, [r7, #0]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	68fa      	ldr	r2, [r7, #12]
 8009180:	4313      	orrs	r3, r2
 8009182:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	68fa      	ldr	r2, [r7, #12]
 800918a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	4a1e      	ldr	r2, [pc, #120]	; (800920c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009192:	4293      	cmp	r3, r2
 8009194:	d01d      	beq.n	80091d2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800919e:	d018      	beq.n	80091d2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	4a1b      	ldr	r2, [pc, #108]	; (8009214 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80091a6:	4293      	cmp	r3, r2
 80091a8:	d013      	beq.n	80091d2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	4a1a      	ldr	r2, [pc, #104]	; (8009218 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80091b0:	4293      	cmp	r3, r2
 80091b2:	d00e      	beq.n	80091d2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	4a18      	ldr	r2, [pc, #96]	; (800921c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80091ba:	4293      	cmp	r3, r2
 80091bc:	d009      	beq.n	80091d2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	4a13      	ldr	r2, [pc, #76]	; (8009210 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80091c4:	4293      	cmp	r3, r2
 80091c6:	d004      	beq.n	80091d2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	4a14      	ldr	r2, [pc, #80]	; (8009220 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80091ce:	4293      	cmp	r3, r2
 80091d0:	d10c      	bne.n	80091ec <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80091d2:	68bb      	ldr	r3, [r7, #8]
 80091d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80091d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80091da:	683b      	ldr	r3, [r7, #0]
 80091dc:	689b      	ldr	r3, [r3, #8]
 80091de:	68ba      	ldr	r2, [r7, #8]
 80091e0:	4313      	orrs	r3, r2
 80091e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	68ba      	ldr	r2, [r7, #8]
 80091ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	2201      	movs	r2, #1
 80091f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	2200      	movs	r2, #0
 80091f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80091fc:	2300      	movs	r3, #0
}
 80091fe:	4618      	mov	r0, r3
 8009200:	3714      	adds	r7, #20
 8009202:	46bd      	mov	sp, r7
 8009204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009208:	4770      	bx	lr
 800920a:	bf00      	nop
 800920c:	40012c00 	.word	0x40012c00
 8009210:	40013400 	.word	0x40013400
 8009214:	40000400 	.word	0x40000400
 8009218:	40000800 	.word	0x40000800
 800921c:	40000c00 	.word	0x40000c00
 8009220:	40014000 	.word	0x40014000

08009224 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009224:	b480      	push	{r7}
 8009226:	b083      	sub	sp, #12
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800922c:	bf00      	nop
 800922e:	370c      	adds	r7, #12
 8009230:	46bd      	mov	sp, r7
 8009232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009236:	4770      	bx	lr

08009238 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009238:	b480      	push	{r7}
 800923a:	b083      	sub	sp, #12
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009240:	bf00      	nop
 8009242:	370c      	adds	r7, #12
 8009244:	46bd      	mov	sp, r7
 8009246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924a:	4770      	bx	lr

0800924c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800924c:	b480      	push	{r7}
 800924e:	b083      	sub	sp, #12
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009254:	bf00      	nop
 8009256:	370c      	adds	r7, #12
 8009258:	46bd      	mov	sp, r7
 800925a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925e:	4770      	bx	lr

08009260 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009260:	b580      	push	{r7, lr}
 8009262:	b082      	sub	sp, #8
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d101      	bne.n	8009272 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800926e:	2301      	movs	r3, #1
 8009270:	e042      	b.n	80092f8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009278:	2b00      	cmp	r3, #0
 800927a:	d106      	bne.n	800928a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	2200      	movs	r2, #0
 8009280:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009284:	6878      	ldr	r0, [r7, #4]
 8009286:	f000 f83b 	bl	8009300 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	2224      	movs	r2, #36	; 0x24
 800928e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	681a      	ldr	r2, [r3, #0]
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	f022 0201 	bic.w	r2, r2, #1
 80092a0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d002      	beq.n	80092b0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80092aa:	6878      	ldr	r0, [r7, #4]
 80092ac:	f000 fc86 	bl	8009bbc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80092b0:	6878      	ldr	r0, [r7, #4]
 80092b2:	f000 f987 	bl	80095c4 <UART_SetConfig>
 80092b6:	4603      	mov	r3, r0
 80092b8:	2b01      	cmp	r3, #1
 80092ba:	d101      	bne.n	80092c0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80092bc:	2301      	movs	r3, #1
 80092be:	e01b      	b.n	80092f8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	685a      	ldr	r2, [r3, #4]
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80092ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	689a      	ldr	r2, [r3, #8]
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80092de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	681a      	ldr	r2, [r3, #0]
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	f042 0201 	orr.w	r2, r2, #1
 80092ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80092f0:	6878      	ldr	r0, [r7, #4]
 80092f2:	f000 fd05 	bl	8009d00 <UART_CheckIdleState>
 80092f6:	4603      	mov	r3, r0
}
 80092f8:	4618      	mov	r0, r3
 80092fa:	3708      	adds	r7, #8
 80092fc:	46bd      	mov	sp, r7
 80092fe:	bd80      	pop	{r7, pc}

08009300 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8009300:	b480      	push	{r7}
 8009302:	b083      	sub	sp, #12
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8009308:	bf00      	nop
 800930a:	370c      	adds	r7, #12
 800930c:	46bd      	mov	sp, r7
 800930e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009312:	4770      	bx	lr

08009314 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009314:	b580      	push	{r7, lr}
 8009316:	b08a      	sub	sp, #40	; 0x28
 8009318:	af02      	add	r7, sp, #8
 800931a:	60f8      	str	r0, [r7, #12]
 800931c:	60b9      	str	r1, [r7, #8]
 800931e:	603b      	str	r3, [r7, #0]
 8009320:	4613      	mov	r3, r2
 8009322:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800932a:	2b20      	cmp	r3, #32
 800932c:	d17c      	bne.n	8009428 <HAL_UART_Transmit+0x114>
  {
    if ((pData == NULL) || (Size == 0U))
 800932e:	68bb      	ldr	r3, [r7, #8]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d002      	beq.n	800933a <HAL_UART_Transmit+0x26>
 8009334:	88fb      	ldrh	r3, [r7, #6]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d101      	bne.n	800933e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800933a:	2301      	movs	r3, #1
 800933c:	e075      	b.n	800942a <HAL_UART_Transmit+0x116>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	2200      	movs	r2, #0
 8009342:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	2221      	movs	r2, #33	; 0x21
 800934a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800934e:	f7fa fc9b 	bl	8003c88 <HAL_GetTick>
 8009352:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	88fa      	ldrh	r2, [r7, #6]
 8009358:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	88fa      	ldrh	r2, [r7, #6]
 8009360:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	689b      	ldr	r3, [r3, #8]
 8009368:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800936c:	d108      	bne.n	8009380 <HAL_UART_Transmit+0x6c>
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	691b      	ldr	r3, [r3, #16]
 8009372:	2b00      	cmp	r3, #0
 8009374:	d104      	bne.n	8009380 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8009376:	2300      	movs	r3, #0
 8009378:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800937a:	68bb      	ldr	r3, [r7, #8]
 800937c:	61bb      	str	r3, [r7, #24]
 800937e:	e003      	b.n	8009388 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009380:	68bb      	ldr	r3, [r7, #8]
 8009382:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009384:	2300      	movs	r3, #0
 8009386:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009388:	e031      	b.n	80093ee <HAL_UART_Transmit+0xda>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800938a:	683b      	ldr	r3, [r7, #0]
 800938c:	9300      	str	r3, [sp, #0]
 800938e:	697b      	ldr	r3, [r7, #20]
 8009390:	2200      	movs	r2, #0
 8009392:	2180      	movs	r1, #128	; 0x80
 8009394:	68f8      	ldr	r0, [r7, #12]
 8009396:	f000 fd5d 	bl	8009e54 <UART_WaitOnFlagUntilTimeout>
 800939a:	4603      	mov	r3, r0
 800939c:	2b00      	cmp	r3, #0
 800939e:	d005      	beq.n	80093ac <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	2220      	movs	r2, #32
 80093a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80093a8:	2303      	movs	r3, #3
 80093aa:	e03e      	b.n	800942a <HAL_UART_Transmit+0x116>
      }
      if (pdata8bits == NULL)
 80093ac:	69fb      	ldr	r3, [r7, #28]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d10b      	bne.n	80093ca <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80093b2:	69bb      	ldr	r3, [r7, #24]
 80093b4:	881a      	ldrh	r2, [r3, #0]
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80093be:	b292      	uxth	r2, r2
 80093c0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80093c2:	69bb      	ldr	r3, [r7, #24]
 80093c4:	3302      	adds	r3, #2
 80093c6:	61bb      	str	r3, [r7, #24]
 80093c8:	e008      	b.n	80093dc <HAL_UART_Transmit+0xc8>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80093ca:	69fb      	ldr	r3, [r7, #28]
 80093cc:	781a      	ldrb	r2, [r3, #0]
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	b292      	uxth	r2, r2
 80093d4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80093d6:	69fb      	ldr	r3, [r7, #28]
 80093d8:	3301      	adds	r3, #1
 80093da:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80093e2:	b29b      	uxth	r3, r3
 80093e4:	3b01      	subs	r3, #1
 80093e6:	b29a      	uxth	r2, r3
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80093f4:	b29b      	uxth	r3, r3
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d1c7      	bne.n	800938a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80093fa:	683b      	ldr	r3, [r7, #0]
 80093fc:	9300      	str	r3, [sp, #0]
 80093fe:	697b      	ldr	r3, [r7, #20]
 8009400:	2200      	movs	r2, #0
 8009402:	2140      	movs	r1, #64	; 0x40
 8009404:	68f8      	ldr	r0, [r7, #12]
 8009406:	f000 fd25 	bl	8009e54 <UART_WaitOnFlagUntilTimeout>
 800940a:	4603      	mov	r3, r0
 800940c:	2b00      	cmp	r3, #0
 800940e:	d005      	beq.n	800941c <HAL_UART_Transmit+0x108>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	2220      	movs	r2, #32
 8009414:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8009418:	2303      	movs	r3, #3
 800941a:	e006      	b.n	800942a <HAL_UART_Transmit+0x116>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	2220      	movs	r2, #32
 8009420:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8009424:	2300      	movs	r3, #0
 8009426:	e000      	b.n	800942a <HAL_UART_Transmit+0x116>
  }
  else
  {
    return HAL_BUSY;
 8009428:	2302      	movs	r3, #2
  }
}
 800942a:	4618      	mov	r0, r3
 800942c:	3720      	adds	r7, #32
 800942e:	46bd      	mov	sp, r7
 8009430:	bd80      	pop	{r7, pc}

08009432 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009432:	b580      	push	{r7, lr}
 8009434:	b08a      	sub	sp, #40	; 0x28
 8009436:	af02      	add	r7, sp, #8
 8009438:	60f8      	str	r0, [r7, #12]
 800943a:	60b9      	str	r1, [r7, #8]
 800943c:	603b      	str	r3, [r7, #0]
 800943e:	4613      	mov	r3, r2
 8009440:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009448:	2b20      	cmp	r3, #32
 800944a:	f040 80b6 	bne.w	80095ba <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 800944e:	68bb      	ldr	r3, [r7, #8]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d002      	beq.n	800945a <HAL_UART_Receive+0x28>
 8009454:	88fb      	ldrh	r3, [r7, #6]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d101      	bne.n	800945e <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800945a:	2301      	movs	r3, #1
 800945c:	e0ae      	b.n	80095bc <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	2200      	movs	r2, #0
 8009462:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	2222      	movs	r2, #34	; 0x22
 800946a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	2200      	movs	r2, #0
 8009472:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009474:	f7fa fc08 	bl	8003c88 <HAL_GetTick>
 8009478:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	88fa      	ldrh	r2, [r7, #6]
 800947e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	88fa      	ldrh	r2, [r7, #6]
 8009486:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	689b      	ldr	r3, [r3, #8]
 800948e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009492:	d10e      	bne.n	80094b2 <HAL_UART_Receive+0x80>
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	691b      	ldr	r3, [r3, #16]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d105      	bne.n	80094a8 <HAL_UART_Receive+0x76>
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	f240 12ff 	movw	r2, #511	; 0x1ff
 80094a2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80094a6:	e02d      	b.n	8009504 <HAL_UART_Receive+0xd2>
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	22ff      	movs	r2, #255	; 0xff
 80094ac:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80094b0:	e028      	b.n	8009504 <HAL_UART_Receive+0xd2>
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	689b      	ldr	r3, [r3, #8]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d10d      	bne.n	80094d6 <HAL_UART_Receive+0xa4>
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	691b      	ldr	r3, [r3, #16]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d104      	bne.n	80094cc <HAL_UART_Receive+0x9a>
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	22ff      	movs	r2, #255	; 0xff
 80094c6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80094ca:	e01b      	b.n	8009504 <HAL_UART_Receive+0xd2>
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	227f      	movs	r2, #127	; 0x7f
 80094d0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80094d4:	e016      	b.n	8009504 <HAL_UART_Receive+0xd2>
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	689b      	ldr	r3, [r3, #8]
 80094da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80094de:	d10d      	bne.n	80094fc <HAL_UART_Receive+0xca>
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	691b      	ldr	r3, [r3, #16]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d104      	bne.n	80094f2 <HAL_UART_Receive+0xc0>
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	227f      	movs	r2, #127	; 0x7f
 80094ec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80094f0:	e008      	b.n	8009504 <HAL_UART_Receive+0xd2>
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	223f      	movs	r2, #63	; 0x3f
 80094f6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80094fa:	e003      	b.n	8009504 <HAL_UART_Receive+0xd2>
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	2200      	movs	r2, #0
 8009500:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800950a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	689b      	ldr	r3, [r3, #8]
 8009510:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009514:	d108      	bne.n	8009528 <HAL_UART_Receive+0xf6>
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	691b      	ldr	r3, [r3, #16]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d104      	bne.n	8009528 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800951e:	2300      	movs	r3, #0
 8009520:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009522:	68bb      	ldr	r3, [r7, #8]
 8009524:	61bb      	str	r3, [r7, #24]
 8009526:	e003      	b.n	8009530 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8009528:	68bb      	ldr	r3, [r7, #8]
 800952a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800952c:	2300      	movs	r3, #0
 800952e:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8009530:	e037      	b.n	80095a2 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8009532:	683b      	ldr	r3, [r7, #0]
 8009534:	9300      	str	r3, [sp, #0]
 8009536:	697b      	ldr	r3, [r7, #20]
 8009538:	2200      	movs	r2, #0
 800953a:	2120      	movs	r1, #32
 800953c:	68f8      	ldr	r0, [r7, #12]
 800953e:	f000 fc89 	bl	8009e54 <UART_WaitOnFlagUntilTimeout>
 8009542:	4603      	mov	r3, r0
 8009544:	2b00      	cmp	r3, #0
 8009546:	d005      	beq.n	8009554 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	2220      	movs	r2, #32
 800954c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 8009550:	2303      	movs	r3, #3
 8009552:	e033      	b.n	80095bc <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8009554:	69fb      	ldr	r3, [r7, #28]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d10c      	bne.n	8009574 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009560:	b29a      	uxth	r2, r3
 8009562:	8a7b      	ldrh	r3, [r7, #18]
 8009564:	4013      	ands	r3, r2
 8009566:	b29a      	uxth	r2, r3
 8009568:	69bb      	ldr	r3, [r7, #24]
 800956a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800956c:	69bb      	ldr	r3, [r7, #24]
 800956e:	3302      	adds	r3, #2
 8009570:	61bb      	str	r3, [r7, #24]
 8009572:	e00d      	b.n	8009590 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800957a:	b29b      	uxth	r3, r3
 800957c:	b2da      	uxtb	r2, r3
 800957e:	8a7b      	ldrh	r3, [r7, #18]
 8009580:	b2db      	uxtb	r3, r3
 8009582:	4013      	ands	r3, r2
 8009584:	b2da      	uxtb	r2, r3
 8009586:	69fb      	ldr	r3, [r7, #28]
 8009588:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800958a:	69fb      	ldr	r3, [r7, #28]
 800958c:	3301      	adds	r3, #1
 800958e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009596:	b29b      	uxth	r3, r3
 8009598:	3b01      	subs	r3, #1
 800959a:	b29a      	uxth	r2, r3
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80095a8:	b29b      	uxth	r3, r3
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d1c1      	bne.n	8009532 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	2220      	movs	r2, #32
 80095b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 80095b6:	2300      	movs	r3, #0
 80095b8:	e000      	b.n	80095bc <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 80095ba:	2302      	movs	r3, #2
  }
}
 80095bc:	4618      	mov	r0, r3
 80095be:	3720      	adds	r7, #32
 80095c0:	46bd      	mov	sp, r7
 80095c2:	bd80      	pop	{r7, pc}

080095c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80095c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80095c8:	b08c      	sub	sp, #48	; 0x30
 80095ca:	af00      	add	r7, sp, #0
 80095cc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80095ce:	2300      	movs	r3, #0
 80095d0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80095d4:	697b      	ldr	r3, [r7, #20]
 80095d6:	689a      	ldr	r2, [r3, #8]
 80095d8:	697b      	ldr	r3, [r7, #20]
 80095da:	691b      	ldr	r3, [r3, #16]
 80095dc:	431a      	orrs	r2, r3
 80095de:	697b      	ldr	r3, [r7, #20]
 80095e0:	695b      	ldr	r3, [r3, #20]
 80095e2:	431a      	orrs	r2, r3
 80095e4:	697b      	ldr	r3, [r7, #20]
 80095e6:	69db      	ldr	r3, [r3, #28]
 80095e8:	4313      	orrs	r3, r2
 80095ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80095ec:	697b      	ldr	r3, [r7, #20]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	681a      	ldr	r2, [r3, #0]
 80095f2:	4baa      	ldr	r3, [pc, #680]	; (800989c <UART_SetConfig+0x2d8>)
 80095f4:	4013      	ands	r3, r2
 80095f6:	697a      	ldr	r2, [r7, #20]
 80095f8:	6812      	ldr	r2, [r2, #0]
 80095fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80095fc:	430b      	orrs	r3, r1
 80095fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009600:	697b      	ldr	r3, [r7, #20]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	685b      	ldr	r3, [r3, #4]
 8009606:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800960a:	697b      	ldr	r3, [r7, #20]
 800960c:	68da      	ldr	r2, [r3, #12]
 800960e:	697b      	ldr	r3, [r7, #20]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	430a      	orrs	r2, r1
 8009614:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009616:	697b      	ldr	r3, [r7, #20]
 8009618:	699b      	ldr	r3, [r3, #24]
 800961a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800961c:	697b      	ldr	r3, [r7, #20]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	4a9f      	ldr	r2, [pc, #636]	; (80098a0 <UART_SetConfig+0x2dc>)
 8009622:	4293      	cmp	r3, r2
 8009624:	d004      	beq.n	8009630 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009626:	697b      	ldr	r3, [r7, #20]
 8009628:	6a1b      	ldr	r3, [r3, #32]
 800962a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800962c:	4313      	orrs	r3, r2
 800962e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009630:	697b      	ldr	r3, [r7, #20]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	689b      	ldr	r3, [r3, #8]
 8009636:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800963a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800963e:	697a      	ldr	r2, [r7, #20]
 8009640:	6812      	ldr	r2, [r2, #0]
 8009642:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009644:	430b      	orrs	r3, r1
 8009646:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009648:	697b      	ldr	r3, [r7, #20]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800964e:	f023 010f 	bic.w	r1, r3, #15
 8009652:	697b      	ldr	r3, [r7, #20]
 8009654:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009656:	697b      	ldr	r3, [r7, #20]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	430a      	orrs	r2, r1
 800965c:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800965e:	697b      	ldr	r3, [r7, #20]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	4a90      	ldr	r2, [pc, #576]	; (80098a4 <UART_SetConfig+0x2e0>)
 8009664:	4293      	cmp	r3, r2
 8009666:	d125      	bne.n	80096b4 <UART_SetConfig+0xf0>
 8009668:	4b8f      	ldr	r3, [pc, #572]	; (80098a8 <UART_SetConfig+0x2e4>)
 800966a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800966e:	f003 0303 	and.w	r3, r3, #3
 8009672:	2b03      	cmp	r3, #3
 8009674:	d81a      	bhi.n	80096ac <UART_SetConfig+0xe8>
 8009676:	a201      	add	r2, pc, #4	; (adr r2, 800967c <UART_SetConfig+0xb8>)
 8009678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800967c:	0800968d 	.word	0x0800968d
 8009680:	0800969d 	.word	0x0800969d
 8009684:	08009695 	.word	0x08009695
 8009688:	080096a5 	.word	0x080096a5
 800968c:	2301      	movs	r3, #1
 800968e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009692:	e116      	b.n	80098c2 <UART_SetConfig+0x2fe>
 8009694:	2302      	movs	r3, #2
 8009696:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800969a:	e112      	b.n	80098c2 <UART_SetConfig+0x2fe>
 800969c:	2304      	movs	r3, #4
 800969e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80096a2:	e10e      	b.n	80098c2 <UART_SetConfig+0x2fe>
 80096a4:	2308      	movs	r3, #8
 80096a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80096aa:	e10a      	b.n	80098c2 <UART_SetConfig+0x2fe>
 80096ac:	2310      	movs	r3, #16
 80096ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80096b2:	e106      	b.n	80098c2 <UART_SetConfig+0x2fe>
 80096b4:	697b      	ldr	r3, [r7, #20]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	4a7c      	ldr	r2, [pc, #496]	; (80098ac <UART_SetConfig+0x2e8>)
 80096ba:	4293      	cmp	r3, r2
 80096bc:	d138      	bne.n	8009730 <UART_SetConfig+0x16c>
 80096be:	4b7a      	ldr	r3, [pc, #488]	; (80098a8 <UART_SetConfig+0x2e4>)
 80096c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096c4:	f003 030c 	and.w	r3, r3, #12
 80096c8:	2b0c      	cmp	r3, #12
 80096ca:	d82d      	bhi.n	8009728 <UART_SetConfig+0x164>
 80096cc:	a201      	add	r2, pc, #4	; (adr r2, 80096d4 <UART_SetConfig+0x110>)
 80096ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096d2:	bf00      	nop
 80096d4:	08009709 	.word	0x08009709
 80096d8:	08009729 	.word	0x08009729
 80096dc:	08009729 	.word	0x08009729
 80096e0:	08009729 	.word	0x08009729
 80096e4:	08009719 	.word	0x08009719
 80096e8:	08009729 	.word	0x08009729
 80096ec:	08009729 	.word	0x08009729
 80096f0:	08009729 	.word	0x08009729
 80096f4:	08009711 	.word	0x08009711
 80096f8:	08009729 	.word	0x08009729
 80096fc:	08009729 	.word	0x08009729
 8009700:	08009729 	.word	0x08009729
 8009704:	08009721 	.word	0x08009721
 8009708:	2300      	movs	r3, #0
 800970a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800970e:	e0d8      	b.n	80098c2 <UART_SetConfig+0x2fe>
 8009710:	2302      	movs	r3, #2
 8009712:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009716:	e0d4      	b.n	80098c2 <UART_SetConfig+0x2fe>
 8009718:	2304      	movs	r3, #4
 800971a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800971e:	e0d0      	b.n	80098c2 <UART_SetConfig+0x2fe>
 8009720:	2308      	movs	r3, #8
 8009722:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009726:	e0cc      	b.n	80098c2 <UART_SetConfig+0x2fe>
 8009728:	2310      	movs	r3, #16
 800972a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800972e:	e0c8      	b.n	80098c2 <UART_SetConfig+0x2fe>
 8009730:	697b      	ldr	r3, [r7, #20]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	4a5e      	ldr	r2, [pc, #376]	; (80098b0 <UART_SetConfig+0x2ec>)
 8009736:	4293      	cmp	r3, r2
 8009738:	d125      	bne.n	8009786 <UART_SetConfig+0x1c2>
 800973a:	4b5b      	ldr	r3, [pc, #364]	; (80098a8 <UART_SetConfig+0x2e4>)
 800973c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009740:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009744:	2b30      	cmp	r3, #48	; 0x30
 8009746:	d016      	beq.n	8009776 <UART_SetConfig+0x1b2>
 8009748:	2b30      	cmp	r3, #48	; 0x30
 800974a:	d818      	bhi.n	800977e <UART_SetConfig+0x1ba>
 800974c:	2b20      	cmp	r3, #32
 800974e:	d00a      	beq.n	8009766 <UART_SetConfig+0x1a2>
 8009750:	2b20      	cmp	r3, #32
 8009752:	d814      	bhi.n	800977e <UART_SetConfig+0x1ba>
 8009754:	2b00      	cmp	r3, #0
 8009756:	d002      	beq.n	800975e <UART_SetConfig+0x19a>
 8009758:	2b10      	cmp	r3, #16
 800975a:	d008      	beq.n	800976e <UART_SetConfig+0x1aa>
 800975c:	e00f      	b.n	800977e <UART_SetConfig+0x1ba>
 800975e:	2300      	movs	r3, #0
 8009760:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009764:	e0ad      	b.n	80098c2 <UART_SetConfig+0x2fe>
 8009766:	2302      	movs	r3, #2
 8009768:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800976c:	e0a9      	b.n	80098c2 <UART_SetConfig+0x2fe>
 800976e:	2304      	movs	r3, #4
 8009770:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009774:	e0a5      	b.n	80098c2 <UART_SetConfig+0x2fe>
 8009776:	2308      	movs	r3, #8
 8009778:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800977c:	e0a1      	b.n	80098c2 <UART_SetConfig+0x2fe>
 800977e:	2310      	movs	r3, #16
 8009780:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009784:	e09d      	b.n	80098c2 <UART_SetConfig+0x2fe>
 8009786:	697b      	ldr	r3, [r7, #20]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	4a4a      	ldr	r2, [pc, #296]	; (80098b4 <UART_SetConfig+0x2f0>)
 800978c:	4293      	cmp	r3, r2
 800978e:	d125      	bne.n	80097dc <UART_SetConfig+0x218>
 8009790:	4b45      	ldr	r3, [pc, #276]	; (80098a8 <UART_SetConfig+0x2e4>)
 8009792:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009796:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800979a:	2bc0      	cmp	r3, #192	; 0xc0
 800979c:	d016      	beq.n	80097cc <UART_SetConfig+0x208>
 800979e:	2bc0      	cmp	r3, #192	; 0xc0
 80097a0:	d818      	bhi.n	80097d4 <UART_SetConfig+0x210>
 80097a2:	2b80      	cmp	r3, #128	; 0x80
 80097a4:	d00a      	beq.n	80097bc <UART_SetConfig+0x1f8>
 80097a6:	2b80      	cmp	r3, #128	; 0x80
 80097a8:	d814      	bhi.n	80097d4 <UART_SetConfig+0x210>
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d002      	beq.n	80097b4 <UART_SetConfig+0x1f0>
 80097ae:	2b40      	cmp	r3, #64	; 0x40
 80097b0:	d008      	beq.n	80097c4 <UART_SetConfig+0x200>
 80097b2:	e00f      	b.n	80097d4 <UART_SetConfig+0x210>
 80097b4:	2300      	movs	r3, #0
 80097b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80097ba:	e082      	b.n	80098c2 <UART_SetConfig+0x2fe>
 80097bc:	2302      	movs	r3, #2
 80097be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80097c2:	e07e      	b.n	80098c2 <UART_SetConfig+0x2fe>
 80097c4:	2304      	movs	r3, #4
 80097c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80097ca:	e07a      	b.n	80098c2 <UART_SetConfig+0x2fe>
 80097cc:	2308      	movs	r3, #8
 80097ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80097d2:	e076      	b.n	80098c2 <UART_SetConfig+0x2fe>
 80097d4:	2310      	movs	r3, #16
 80097d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80097da:	e072      	b.n	80098c2 <UART_SetConfig+0x2fe>
 80097dc:	697b      	ldr	r3, [r7, #20]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	4a35      	ldr	r2, [pc, #212]	; (80098b8 <UART_SetConfig+0x2f4>)
 80097e2:	4293      	cmp	r3, r2
 80097e4:	d12a      	bne.n	800983c <UART_SetConfig+0x278>
 80097e6:	4b30      	ldr	r3, [pc, #192]	; (80098a8 <UART_SetConfig+0x2e4>)
 80097e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80097ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80097f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80097f4:	d01a      	beq.n	800982c <UART_SetConfig+0x268>
 80097f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80097fa:	d81b      	bhi.n	8009834 <UART_SetConfig+0x270>
 80097fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009800:	d00c      	beq.n	800981c <UART_SetConfig+0x258>
 8009802:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009806:	d815      	bhi.n	8009834 <UART_SetConfig+0x270>
 8009808:	2b00      	cmp	r3, #0
 800980a:	d003      	beq.n	8009814 <UART_SetConfig+0x250>
 800980c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009810:	d008      	beq.n	8009824 <UART_SetConfig+0x260>
 8009812:	e00f      	b.n	8009834 <UART_SetConfig+0x270>
 8009814:	2300      	movs	r3, #0
 8009816:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800981a:	e052      	b.n	80098c2 <UART_SetConfig+0x2fe>
 800981c:	2302      	movs	r3, #2
 800981e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009822:	e04e      	b.n	80098c2 <UART_SetConfig+0x2fe>
 8009824:	2304      	movs	r3, #4
 8009826:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800982a:	e04a      	b.n	80098c2 <UART_SetConfig+0x2fe>
 800982c:	2308      	movs	r3, #8
 800982e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009832:	e046      	b.n	80098c2 <UART_SetConfig+0x2fe>
 8009834:	2310      	movs	r3, #16
 8009836:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800983a:	e042      	b.n	80098c2 <UART_SetConfig+0x2fe>
 800983c:	697b      	ldr	r3, [r7, #20]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	4a17      	ldr	r2, [pc, #92]	; (80098a0 <UART_SetConfig+0x2dc>)
 8009842:	4293      	cmp	r3, r2
 8009844:	d13a      	bne.n	80098bc <UART_SetConfig+0x2f8>
 8009846:	4b18      	ldr	r3, [pc, #96]	; (80098a8 <UART_SetConfig+0x2e4>)
 8009848:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800984c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009850:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009854:	d01a      	beq.n	800988c <UART_SetConfig+0x2c8>
 8009856:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800985a:	d81b      	bhi.n	8009894 <UART_SetConfig+0x2d0>
 800985c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009860:	d00c      	beq.n	800987c <UART_SetConfig+0x2b8>
 8009862:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009866:	d815      	bhi.n	8009894 <UART_SetConfig+0x2d0>
 8009868:	2b00      	cmp	r3, #0
 800986a:	d003      	beq.n	8009874 <UART_SetConfig+0x2b0>
 800986c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009870:	d008      	beq.n	8009884 <UART_SetConfig+0x2c0>
 8009872:	e00f      	b.n	8009894 <UART_SetConfig+0x2d0>
 8009874:	2300      	movs	r3, #0
 8009876:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800987a:	e022      	b.n	80098c2 <UART_SetConfig+0x2fe>
 800987c:	2302      	movs	r3, #2
 800987e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009882:	e01e      	b.n	80098c2 <UART_SetConfig+0x2fe>
 8009884:	2304      	movs	r3, #4
 8009886:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800988a:	e01a      	b.n	80098c2 <UART_SetConfig+0x2fe>
 800988c:	2308      	movs	r3, #8
 800988e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009892:	e016      	b.n	80098c2 <UART_SetConfig+0x2fe>
 8009894:	2310      	movs	r3, #16
 8009896:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800989a:	e012      	b.n	80098c2 <UART_SetConfig+0x2fe>
 800989c:	cfff69f3 	.word	0xcfff69f3
 80098a0:	40008000 	.word	0x40008000
 80098a4:	40013800 	.word	0x40013800
 80098a8:	40021000 	.word	0x40021000
 80098ac:	40004400 	.word	0x40004400
 80098b0:	40004800 	.word	0x40004800
 80098b4:	40004c00 	.word	0x40004c00
 80098b8:	40005000 	.word	0x40005000
 80098bc:	2310      	movs	r3, #16
 80098be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80098c2:	697b      	ldr	r3, [r7, #20]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	4aae      	ldr	r2, [pc, #696]	; (8009b80 <UART_SetConfig+0x5bc>)
 80098c8:	4293      	cmp	r3, r2
 80098ca:	f040 8097 	bne.w	80099fc <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80098ce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80098d2:	2b08      	cmp	r3, #8
 80098d4:	d823      	bhi.n	800991e <UART_SetConfig+0x35a>
 80098d6:	a201      	add	r2, pc, #4	; (adr r2, 80098dc <UART_SetConfig+0x318>)
 80098d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098dc:	08009901 	.word	0x08009901
 80098e0:	0800991f 	.word	0x0800991f
 80098e4:	08009909 	.word	0x08009909
 80098e8:	0800991f 	.word	0x0800991f
 80098ec:	0800990f 	.word	0x0800990f
 80098f0:	0800991f 	.word	0x0800991f
 80098f4:	0800991f 	.word	0x0800991f
 80098f8:	0800991f 	.word	0x0800991f
 80098fc:	08009917 	.word	0x08009917
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009900:	f7fc fb1c 	bl	8005f3c <HAL_RCC_GetPCLK1Freq>
 8009904:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009906:	e010      	b.n	800992a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009908:	4b9e      	ldr	r3, [pc, #632]	; (8009b84 <UART_SetConfig+0x5c0>)
 800990a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800990c:	e00d      	b.n	800992a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800990e:	f7fc fa7d 	bl	8005e0c <HAL_RCC_GetSysClockFreq>
 8009912:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009914:	e009      	b.n	800992a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009916:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800991a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800991c:	e005      	b.n	800992a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800991e:	2300      	movs	r3, #0
 8009920:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8009922:	2301      	movs	r3, #1
 8009924:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009928:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800992a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800992c:	2b00      	cmp	r3, #0
 800992e:	f000 8130 	beq.w	8009b92 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009932:	697b      	ldr	r3, [r7, #20]
 8009934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009936:	4a94      	ldr	r2, [pc, #592]	; (8009b88 <UART_SetConfig+0x5c4>)
 8009938:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800993c:	461a      	mov	r2, r3
 800993e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009940:	fbb3 f3f2 	udiv	r3, r3, r2
 8009944:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009946:	697b      	ldr	r3, [r7, #20]
 8009948:	685a      	ldr	r2, [r3, #4]
 800994a:	4613      	mov	r3, r2
 800994c:	005b      	lsls	r3, r3, #1
 800994e:	4413      	add	r3, r2
 8009950:	69ba      	ldr	r2, [r7, #24]
 8009952:	429a      	cmp	r2, r3
 8009954:	d305      	bcc.n	8009962 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009956:	697b      	ldr	r3, [r7, #20]
 8009958:	685b      	ldr	r3, [r3, #4]
 800995a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800995c:	69ba      	ldr	r2, [r7, #24]
 800995e:	429a      	cmp	r2, r3
 8009960:	d903      	bls.n	800996a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8009962:	2301      	movs	r3, #1
 8009964:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009968:	e113      	b.n	8009b92 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800996a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800996c:	2200      	movs	r2, #0
 800996e:	60bb      	str	r3, [r7, #8]
 8009970:	60fa      	str	r2, [r7, #12]
 8009972:	697b      	ldr	r3, [r7, #20]
 8009974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009976:	4a84      	ldr	r2, [pc, #528]	; (8009b88 <UART_SetConfig+0x5c4>)
 8009978:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800997c:	b29b      	uxth	r3, r3
 800997e:	2200      	movs	r2, #0
 8009980:	603b      	str	r3, [r7, #0]
 8009982:	607a      	str	r2, [r7, #4]
 8009984:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009988:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800998c:	f7f7 f924 	bl	8000bd8 <__aeabi_uldivmod>
 8009990:	4602      	mov	r2, r0
 8009992:	460b      	mov	r3, r1
 8009994:	4610      	mov	r0, r2
 8009996:	4619      	mov	r1, r3
 8009998:	f04f 0200 	mov.w	r2, #0
 800999c:	f04f 0300 	mov.w	r3, #0
 80099a0:	020b      	lsls	r3, r1, #8
 80099a2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80099a6:	0202      	lsls	r2, r0, #8
 80099a8:	6979      	ldr	r1, [r7, #20]
 80099aa:	6849      	ldr	r1, [r1, #4]
 80099ac:	0849      	lsrs	r1, r1, #1
 80099ae:	2000      	movs	r0, #0
 80099b0:	460c      	mov	r4, r1
 80099b2:	4605      	mov	r5, r0
 80099b4:	eb12 0804 	adds.w	r8, r2, r4
 80099b8:	eb43 0905 	adc.w	r9, r3, r5
 80099bc:	697b      	ldr	r3, [r7, #20]
 80099be:	685b      	ldr	r3, [r3, #4]
 80099c0:	2200      	movs	r2, #0
 80099c2:	469a      	mov	sl, r3
 80099c4:	4693      	mov	fp, r2
 80099c6:	4652      	mov	r2, sl
 80099c8:	465b      	mov	r3, fp
 80099ca:	4640      	mov	r0, r8
 80099cc:	4649      	mov	r1, r9
 80099ce:	f7f7 f903 	bl	8000bd8 <__aeabi_uldivmod>
 80099d2:	4602      	mov	r2, r0
 80099d4:	460b      	mov	r3, r1
 80099d6:	4613      	mov	r3, r2
 80099d8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80099da:	6a3b      	ldr	r3, [r7, #32]
 80099dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80099e0:	d308      	bcc.n	80099f4 <UART_SetConfig+0x430>
 80099e2:	6a3b      	ldr	r3, [r7, #32]
 80099e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80099e8:	d204      	bcs.n	80099f4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80099ea:	697b      	ldr	r3, [r7, #20]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	6a3a      	ldr	r2, [r7, #32]
 80099f0:	60da      	str	r2, [r3, #12]
 80099f2:	e0ce      	b.n	8009b92 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80099f4:	2301      	movs	r3, #1
 80099f6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80099fa:	e0ca      	b.n	8009b92 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80099fc:	697b      	ldr	r3, [r7, #20]
 80099fe:	69db      	ldr	r3, [r3, #28]
 8009a00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009a04:	d166      	bne.n	8009ad4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8009a06:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009a0a:	2b08      	cmp	r3, #8
 8009a0c:	d827      	bhi.n	8009a5e <UART_SetConfig+0x49a>
 8009a0e:	a201      	add	r2, pc, #4	; (adr r2, 8009a14 <UART_SetConfig+0x450>)
 8009a10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a14:	08009a39 	.word	0x08009a39
 8009a18:	08009a41 	.word	0x08009a41
 8009a1c:	08009a49 	.word	0x08009a49
 8009a20:	08009a5f 	.word	0x08009a5f
 8009a24:	08009a4f 	.word	0x08009a4f
 8009a28:	08009a5f 	.word	0x08009a5f
 8009a2c:	08009a5f 	.word	0x08009a5f
 8009a30:	08009a5f 	.word	0x08009a5f
 8009a34:	08009a57 	.word	0x08009a57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009a38:	f7fc fa80 	bl	8005f3c <HAL_RCC_GetPCLK1Freq>
 8009a3c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009a3e:	e014      	b.n	8009a6a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009a40:	f7fc fa92 	bl	8005f68 <HAL_RCC_GetPCLK2Freq>
 8009a44:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009a46:	e010      	b.n	8009a6a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009a48:	4b4e      	ldr	r3, [pc, #312]	; (8009b84 <UART_SetConfig+0x5c0>)
 8009a4a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009a4c:	e00d      	b.n	8009a6a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009a4e:	f7fc f9dd 	bl	8005e0c <HAL_RCC_GetSysClockFreq>
 8009a52:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009a54:	e009      	b.n	8009a6a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009a56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009a5a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009a5c:	e005      	b.n	8009a6a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8009a5e:	2300      	movs	r3, #0
 8009a60:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8009a62:	2301      	movs	r3, #1
 8009a64:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009a68:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	f000 8090 	beq.w	8009b92 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009a72:	697b      	ldr	r3, [r7, #20]
 8009a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a76:	4a44      	ldr	r2, [pc, #272]	; (8009b88 <UART_SetConfig+0x5c4>)
 8009a78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009a7c:	461a      	mov	r2, r3
 8009a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a80:	fbb3 f3f2 	udiv	r3, r3, r2
 8009a84:	005a      	lsls	r2, r3, #1
 8009a86:	697b      	ldr	r3, [r7, #20]
 8009a88:	685b      	ldr	r3, [r3, #4]
 8009a8a:	085b      	lsrs	r3, r3, #1
 8009a8c:	441a      	add	r2, r3
 8009a8e:	697b      	ldr	r3, [r7, #20]
 8009a90:	685b      	ldr	r3, [r3, #4]
 8009a92:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a96:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009a98:	6a3b      	ldr	r3, [r7, #32]
 8009a9a:	2b0f      	cmp	r3, #15
 8009a9c:	d916      	bls.n	8009acc <UART_SetConfig+0x508>
 8009a9e:	6a3b      	ldr	r3, [r7, #32]
 8009aa0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009aa4:	d212      	bcs.n	8009acc <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009aa6:	6a3b      	ldr	r3, [r7, #32]
 8009aa8:	b29b      	uxth	r3, r3
 8009aaa:	f023 030f 	bic.w	r3, r3, #15
 8009aae:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009ab0:	6a3b      	ldr	r3, [r7, #32]
 8009ab2:	085b      	lsrs	r3, r3, #1
 8009ab4:	b29b      	uxth	r3, r3
 8009ab6:	f003 0307 	and.w	r3, r3, #7
 8009aba:	b29a      	uxth	r2, r3
 8009abc:	8bfb      	ldrh	r3, [r7, #30]
 8009abe:	4313      	orrs	r3, r2
 8009ac0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8009ac2:	697b      	ldr	r3, [r7, #20]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	8bfa      	ldrh	r2, [r7, #30]
 8009ac8:	60da      	str	r2, [r3, #12]
 8009aca:	e062      	b.n	8009b92 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8009acc:	2301      	movs	r3, #1
 8009ace:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009ad2:	e05e      	b.n	8009b92 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009ad4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009ad8:	2b08      	cmp	r3, #8
 8009ada:	d828      	bhi.n	8009b2e <UART_SetConfig+0x56a>
 8009adc:	a201      	add	r2, pc, #4	; (adr r2, 8009ae4 <UART_SetConfig+0x520>)
 8009ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ae2:	bf00      	nop
 8009ae4:	08009b09 	.word	0x08009b09
 8009ae8:	08009b11 	.word	0x08009b11
 8009aec:	08009b19 	.word	0x08009b19
 8009af0:	08009b2f 	.word	0x08009b2f
 8009af4:	08009b1f 	.word	0x08009b1f
 8009af8:	08009b2f 	.word	0x08009b2f
 8009afc:	08009b2f 	.word	0x08009b2f
 8009b00:	08009b2f 	.word	0x08009b2f
 8009b04:	08009b27 	.word	0x08009b27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009b08:	f7fc fa18 	bl	8005f3c <HAL_RCC_GetPCLK1Freq>
 8009b0c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009b0e:	e014      	b.n	8009b3a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009b10:	f7fc fa2a 	bl	8005f68 <HAL_RCC_GetPCLK2Freq>
 8009b14:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009b16:	e010      	b.n	8009b3a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009b18:	4b1a      	ldr	r3, [pc, #104]	; (8009b84 <UART_SetConfig+0x5c0>)
 8009b1a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009b1c:	e00d      	b.n	8009b3a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009b1e:	f7fc f975 	bl	8005e0c <HAL_RCC_GetSysClockFreq>
 8009b22:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009b24:	e009      	b.n	8009b3a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009b26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009b2a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009b2c:	e005      	b.n	8009b3a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8009b2e:	2300      	movs	r3, #0
 8009b30:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8009b32:	2301      	movs	r3, #1
 8009b34:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009b38:	bf00      	nop
    }

    if (pclk != 0U)
 8009b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d028      	beq.n	8009b92 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009b40:	697b      	ldr	r3, [r7, #20]
 8009b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b44:	4a10      	ldr	r2, [pc, #64]	; (8009b88 <UART_SetConfig+0x5c4>)
 8009b46:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009b4a:	461a      	mov	r2, r3
 8009b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b4e:	fbb3 f2f2 	udiv	r2, r3, r2
 8009b52:	697b      	ldr	r3, [r7, #20]
 8009b54:	685b      	ldr	r3, [r3, #4]
 8009b56:	085b      	lsrs	r3, r3, #1
 8009b58:	441a      	add	r2, r3
 8009b5a:	697b      	ldr	r3, [r7, #20]
 8009b5c:	685b      	ldr	r3, [r3, #4]
 8009b5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b62:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009b64:	6a3b      	ldr	r3, [r7, #32]
 8009b66:	2b0f      	cmp	r3, #15
 8009b68:	d910      	bls.n	8009b8c <UART_SetConfig+0x5c8>
 8009b6a:	6a3b      	ldr	r3, [r7, #32]
 8009b6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009b70:	d20c      	bcs.n	8009b8c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009b72:	6a3b      	ldr	r3, [r7, #32]
 8009b74:	b29a      	uxth	r2, r3
 8009b76:	697b      	ldr	r3, [r7, #20]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	60da      	str	r2, [r3, #12]
 8009b7c:	e009      	b.n	8009b92 <UART_SetConfig+0x5ce>
 8009b7e:	bf00      	nop
 8009b80:	40008000 	.word	0x40008000
 8009b84:	00f42400 	.word	0x00f42400
 8009b88:	0800e768 	.word	0x0800e768
      }
      else
      {
        ret = HAL_ERROR;
 8009b8c:	2301      	movs	r3, #1
 8009b8e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009b92:	697b      	ldr	r3, [r7, #20]
 8009b94:	2201      	movs	r2, #1
 8009b96:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009b9a:	697b      	ldr	r3, [r7, #20]
 8009b9c:	2201      	movs	r2, #1
 8009b9e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009ba2:	697b      	ldr	r3, [r7, #20]
 8009ba4:	2200      	movs	r2, #0
 8009ba6:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8009ba8:	697b      	ldr	r3, [r7, #20]
 8009baa:	2200      	movs	r2, #0
 8009bac:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8009bae:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	3730      	adds	r7, #48	; 0x30
 8009bb6:	46bd      	mov	sp, r7
 8009bb8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08009bbc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009bbc:	b480      	push	{r7}
 8009bbe:	b083      	sub	sp, #12
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bc8:	f003 0308 	and.w	r3, r3, #8
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d00a      	beq.n	8009be6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	685b      	ldr	r3, [r3, #4]
 8009bd6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	430a      	orrs	r2, r1
 8009be4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bea:	f003 0301 	and.w	r3, r3, #1
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d00a      	beq.n	8009c08 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	685b      	ldr	r3, [r3, #4]
 8009bf8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	430a      	orrs	r2, r1
 8009c06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c0c:	f003 0302 	and.w	r3, r3, #2
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d00a      	beq.n	8009c2a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	685b      	ldr	r3, [r3, #4]
 8009c1a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	430a      	orrs	r2, r1
 8009c28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c2e:	f003 0304 	and.w	r3, r3, #4
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d00a      	beq.n	8009c4c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	685b      	ldr	r3, [r3, #4]
 8009c3c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	430a      	orrs	r2, r1
 8009c4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c50:	f003 0310 	and.w	r3, r3, #16
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d00a      	beq.n	8009c6e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	689b      	ldr	r3, [r3, #8]
 8009c5e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	430a      	orrs	r2, r1
 8009c6c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c72:	f003 0320 	and.w	r3, r3, #32
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d00a      	beq.n	8009c90 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	689b      	ldr	r3, [r3, #8]
 8009c80:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	430a      	orrs	r2, r1
 8009c8e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d01a      	beq.n	8009cd2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	685b      	ldr	r3, [r3, #4]
 8009ca2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	430a      	orrs	r2, r1
 8009cb0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009cb6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009cba:	d10a      	bne.n	8009cd2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	685b      	ldr	r3, [r3, #4]
 8009cc2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	430a      	orrs	r2, r1
 8009cd0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d00a      	beq.n	8009cf4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	685b      	ldr	r3, [r3, #4]
 8009ce4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	430a      	orrs	r2, r1
 8009cf2:	605a      	str	r2, [r3, #4]
  }
}
 8009cf4:	bf00      	nop
 8009cf6:	370c      	adds	r7, #12
 8009cf8:	46bd      	mov	sp, r7
 8009cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfe:	4770      	bx	lr

08009d00 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009d00:	b580      	push	{r7, lr}
 8009d02:	b098      	sub	sp, #96	; 0x60
 8009d04:	af02      	add	r7, sp, #8
 8009d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009d10:	f7f9 ffba 	bl	8003c88 <HAL_GetTick>
 8009d14:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	f003 0308 	and.w	r3, r3, #8
 8009d20:	2b08      	cmp	r3, #8
 8009d22:	d12f      	bne.n	8009d84 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009d24:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009d28:	9300      	str	r3, [sp, #0]
 8009d2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009d2c:	2200      	movs	r2, #0
 8009d2e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009d32:	6878      	ldr	r0, [r7, #4]
 8009d34:	f000 f88e 	bl	8009e54 <UART_WaitOnFlagUntilTimeout>
 8009d38:	4603      	mov	r3, r0
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d022      	beq.n	8009d84 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d46:	e853 3f00 	ldrex	r3, [r3]
 8009d4a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009d4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009d52:	653b      	str	r3, [r7, #80]	; 0x50
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	461a      	mov	r2, r3
 8009d5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009d5c:	647b      	str	r3, [r7, #68]	; 0x44
 8009d5e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d60:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009d62:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009d64:	e841 2300 	strex	r3, r2, [r1]
 8009d68:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009d6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d1e6      	bne.n	8009d3e <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	2220      	movs	r2, #32
 8009d74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009d80:	2303      	movs	r3, #3
 8009d82:	e063      	b.n	8009e4c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	f003 0304 	and.w	r3, r3, #4
 8009d8e:	2b04      	cmp	r3, #4
 8009d90:	d149      	bne.n	8009e26 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009d92:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009d96:	9300      	str	r3, [sp, #0]
 8009d98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009da0:	6878      	ldr	r0, [r7, #4]
 8009da2:	f000 f857 	bl	8009e54 <UART_WaitOnFlagUntilTimeout>
 8009da6:	4603      	mov	r3, r0
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d03c      	beq.n	8009e26 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009db4:	e853 3f00 	ldrex	r3, [r3]
 8009db8:	623b      	str	r3, [r7, #32]
   return(result);
 8009dba:	6a3b      	ldr	r3, [r7, #32]
 8009dbc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009dc0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	461a      	mov	r2, r3
 8009dc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009dca:	633b      	str	r3, [r7, #48]	; 0x30
 8009dcc:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009dd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009dd2:	e841 2300 	strex	r3, r2, [r1]
 8009dd6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d1e6      	bne.n	8009dac <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	3308      	adds	r3, #8
 8009de4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009de6:	693b      	ldr	r3, [r7, #16]
 8009de8:	e853 3f00 	ldrex	r3, [r3]
 8009dec:	60fb      	str	r3, [r7, #12]
   return(result);
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	f023 0301 	bic.w	r3, r3, #1
 8009df4:	64bb      	str	r3, [r7, #72]	; 0x48
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	3308      	adds	r3, #8
 8009dfc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009dfe:	61fa      	str	r2, [r7, #28]
 8009e00:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e02:	69b9      	ldr	r1, [r7, #24]
 8009e04:	69fa      	ldr	r2, [r7, #28]
 8009e06:	e841 2300 	strex	r3, r2, [r1]
 8009e0a:	617b      	str	r3, [r7, #20]
   return(result);
 8009e0c:	697b      	ldr	r3, [r7, #20]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d1e5      	bne.n	8009dde <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	2220      	movs	r2, #32
 8009e16:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	2200      	movs	r2, #0
 8009e1e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009e22:	2303      	movs	r3, #3
 8009e24:	e012      	b.n	8009e4c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	2220      	movs	r2, #32
 8009e2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	2220      	movs	r2, #32
 8009e32:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	2200      	movs	r2, #0
 8009e3a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	2200      	movs	r2, #0
 8009e40:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	2200      	movs	r2, #0
 8009e46:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009e4a:	2300      	movs	r3, #0
}
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	3758      	adds	r7, #88	; 0x58
 8009e50:	46bd      	mov	sp, r7
 8009e52:	bd80      	pop	{r7, pc}

08009e54 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009e54:	b580      	push	{r7, lr}
 8009e56:	b084      	sub	sp, #16
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	60f8      	str	r0, [r7, #12]
 8009e5c:	60b9      	str	r1, [r7, #8]
 8009e5e:	603b      	str	r3, [r7, #0]
 8009e60:	4613      	mov	r3, r2
 8009e62:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009e64:	e049      	b.n	8009efa <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009e66:	69bb      	ldr	r3, [r7, #24]
 8009e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e6c:	d045      	beq.n	8009efa <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009e6e:	f7f9 ff0b 	bl	8003c88 <HAL_GetTick>
 8009e72:	4602      	mov	r2, r0
 8009e74:	683b      	ldr	r3, [r7, #0]
 8009e76:	1ad3      	subs	r3, r2, r3
 8009e78:	69ba      	ldr	r2, [r7, #24]
 8009e7a:	429a      	cmp	r2, r3
 8009e7c:	d302      	bcc.n	8009e84 <UART_WaitOnFlagUntilTimeout+0x30>
 8009e7e:	69bb      	ldr	r3, [r7, #24]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d101      	bne.n	8009e88 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009e84:	2303      	movs	r3, #3
 8009e86:	e048      	b.n	8009f1a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	f003 0304 	and.w	r3, r3, #4
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d031      	beq.n	8009efa <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	69db      	ldr	r3, [r3, #28]
 8009e9c:	f003 0308 	and.w	r3, r3, #8
 8009ea0:	2b08      	cmp	r3, #8
 8009ea2:	d110      	bne.n	8009ec6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	2208      	movs	r2, #8
 8009eaa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009eac:	68f8      	ldr	r0, [r7, #12]
 8009eae:	f000 f838 	bl	8009f22 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	2208      	movs	r2, #8
 8009eb6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	2200      	movs	r2, #0
 8009ebe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8009ec2:	2301      	movs	r3, #1
 8009ec4:	e029      	b.n	8009f1a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	69db      	ldr	r3, [r3, #28]
 8009ecc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009ed0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009ed4:	d111      	bne.n	8009efa <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009ede:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009ee0:	68f8      	ldr	r0, [r7, #12]
 8009ee2:	f000 f81e 	bl	8009f22 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	2220      	movs	r2, #32
 8009eea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	2200      	movs	r2, #0
 8009ef2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8009ef6:	2303      	movs	r3, #3
 8009ef8:	e00f      	b.n	8009f1a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	69da      	ldr	r2, [r3, #28]
 8009f00:	68bb      	ldr	r3, [r7, #8]
 8009f02:	4013      	ands	r3, r2
 8009f04:	68ba      	ldr	r2, [r7, #8]
 8009f06:	429a      	cmp	r2, r3
 8009f08:	bf0c      	ite	eq
 8009f0a:	2301      	moveq	r3, #1
 8009f0c:	2300      	movne	r3, #0
 8009f0e:	b2db      	uxtb	r3, r3
 8009f10:	461a      	mov	r2, r3
 8009f12:	79fb      	ldrb	r3, [r7, #7]
 8009f14:	429a      	cmp	r2, r3
 8009f16:	d0a6      	beq.n	8009e66 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009f18:	2300      	movs	r3, #0
}
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	3710      	adds	r7, #16
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	bd80      	pop	{r7, pc}

08009f22 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009f22:	b480      	push	{r7}
 8009f24:	b095      	sub	sp, #84	; 0x54
 8009f26:	af00      	add	r7, sp, #0
 8009f28:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f32:	e853 3f00 	ldrex	r3, [r3]
 8009f36:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f3a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009f3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	461a      	mov	r2, r3
 8009f46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f48:	643b      	str	r3, [r7, #64]	; 0x40
 8009f4a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f4c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009f4e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009f50:	e841 2300 	strex	r3, r2, [r1]
 8009f54:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d1e6      	bne.n	8009f2a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	3308      	adds	r3, #8
 8009f62:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f64:	6a3b      	ldr	r3, [r7, #32]
 8009f66:	e853 3f00 	ldrex	r3, [r3]
 8009f6a:	61fb      	str	r3, [r7, #28]
   return(result);
 8009f6c:	69fb      	ldr	r3, [r7, #28]
 8009f6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009f72:	f023 0301 	bic.w	r3, r3, #1
 8009f76:	64bb      	str	r3, [r7, #72]	; 0x48
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	3308      	adds	r3, #8
 8009f7e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009f80:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009f82:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f84:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009f86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009f88:	e841 2300 	strex	r3, r2, [r1]
 8009f8c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d1e3      	bne.n	8009f5c <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009f98:	2b01      	cmp	r3, #1
 8009f9a:	d118      	bne.n	8009fce <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	e853 3f00 	ldrex	r3, [r3]
 8009fa8:	60bb      	str	r3, [r7, #8]
   return(result);
 8009faa:	68bb      	ldr	r3, [r7, #8]
 8009fac:	f023 0310 	bic.w	r3, r3, #16
 8009fb0:	647b      	str	r3, [r7, #68]	; 0x44
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	461a      	mov	r2, r3
 8009fb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009fba:	61bb      	str	r3, [r7, #24]
 8009fbc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fbe:	6979      	ldr	r1, [r7, #20]
 8009fc0:	69ba      	ldr	r2, [r7, #24]
 8009fc2:	e841 2300 	strex	r3, r2, [r1]
 8009fc6:	613b      	str	r3, [r7, #16]
   return(result);
 8009fc8:	693b      	ldr	r3, [r7, #16]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d1e6      	bne.n	8009f9c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	2220      	movs	r2, #32
 8009fd2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	2200      	movs	r2, #0
 8009fda:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	2200      	movs	r2, #0
 8009fe0:	675a      	str	r2, [r3, #116]	; 0x74
}
 8009fe2:	bf00      	nop
 8009fe4:	3754      	adds	r7, #84	; 0x54
 8009fe6:	46bd      	mov	sp, r7
 8009fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fec:	4770      	bx	lr
	...

08009ff0 <arm_q7_to_float>:
 8009ff0:	b470      	push	{r4, r5, r6}
 8009ff2:	0896      	lsrs	r6, r2, #2
 8009ff4:	d039      	beq.n	800a06a <arm_q7_to_float+0x7a>
 8009ff6:	1d03      	adds	r3, r0, #4
 8009ff8:	f101 0410 	add.w	r4, r1, #16
 8009ffc:	eb00 0086 	add.w	r0, r0, r6, lsl #2
 800a000:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 800a0bc <arm_q7_to_float+0xcc>
 800a004:	e000      	b.n	800a008 <arm_q7_to_float+0x18>
 800a006:	462b      	mov	r3, r5
 800a008:	f913 5c04 	ldrsb.w	r5, [r3, #-4]
 800a00c:	ee07 5a90 	vmov	s15, r5
 800a010:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a014:	4283      	cmp	r3, r0
 800a016:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a01a:	f103 0504 	add.w	r5, r3, #4
 800a01e:	ed44 7a04 	vstr	s15, [r4, #-16]
 800a022:	f913 cc03 	ldrsb.w	ip, [r3, #-3]
 800a026:	ee07 ca90 	vmov	s15, ip
 800a02a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a02e:	f104 0410 	add.w	r4, r4, #16
 800a032:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a036:	ed44 7a07 	vstr	s15, [r4, #-28]	; 0xffffffe4
 800a03a:	f913 cc02 	ldrsb.w	ip, [r3, #-2]
 800a03e:	ee07 ca90 	vmov	s15, ip
 800a042:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a046:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a04a:	ed44 7a06 	vstr	s15, [r4, #-24]	; 0xffffffe8
 800a04e:	f913 cc01 	ldrsb.w	ip, [r3, #-1]
 800a052:	ee07 ca90 	vmov	s15, ip
 800a056:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a05a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a05e:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 800a062:	d1d0      	bne.n	800a006 <arm_q7_to_float+0x16>
 800a064:	eb01 1106 	add.w	r1, r1, r6, lsl #4
 800a068:	4618      	mov	r0, r3
 800a06a:	f012 0203 	ands.w	r2, r2, #3
 800a06e:	d023      	beq.n	800a0b8 <arm_q7_to_float+0xc8>
 800a070:	f990 3000 	ldrsb.w	r3, [r0]
 800a074:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800a0bc <arm_q7_to_float+0xcc>
 800a078:	ee07 3a90 	vmov	s15, r3
 800a07c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a080:	3a01      	subs	r2, #1
 800a082:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a086:	edc1 7a00 	vstr	s15, [r1]
 800a08a:	d015      	beq.n	800a0b8 <arm_q7_to_float+0xc8>
 800a08c:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800a090:	ee07 3a90 	vmov	s15, r3
 800a094:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a098:	2a01      	cmp	r2, #1
 800a09a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a09e:	edc1 7a01 	vstr	s15, [r1, #4]
 800a0a2:	d009      	beq.n	800a0b8 <arm_q7_to_float+0xc8>
 800a0a4:	f990 3002 	ldrsb.w	r3, [r0, #2]
 800a0a8:	ee07 3a90 	vmov	s15, r3
 800a0ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a0b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a0b4:	edc1 7a02 	vstr	s15, [r1, #8]
 800a0b8:	bc70      	pop	{r4, r5, r6}
 800a0ba:	4770      	bx	lr
 800a0bc:	3c000000 	.word	0x3c000000

0800a0c0 <arm_rfft_32_fast_init_f32>:
 800a0c0:	b178      	cbz	r0, 800a0e2 <arm_rfft_32_fast_init_f32+0x22>
 800a0c2:	b430      	push	{r4, r5}
 800a0c4:	4908      	ldr	r1, [pc, #32]	; (800a0e8 <arm_rfft_32_fast_init_f32+0x28>)
 800a0c6:	4a09      	ldr	r2, [pc, #36]	; (800a0ec <arm_rfft_32_fast_init_f32+0x2c>)
 800a0c8:	2310      	movs	r3, #16
 800a0ca:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800a0ce:	8003      	strh	r3, [r0, #0]
 800a0d0:	2520      	movs	r5, #32
 800a0d2:	2414      	movs	r4, #20
 800a0d4:	4b06      	ldr	r3, [pc, #24]	; (800a0f0 <arm_rfft_32_fast_init_f32+0x30>)
 800a0d6:	8205      	strh	r5, [r0, #16]
 800a0d8:	8184      	strh	r4, [r0, #12]
 800a0da:	6143      	str	r3, [r0, #20]
 800a0dc:	bc30      	pop	{r4, r5}
 800a0de:	2000      	movs	r0, #0
 800a0e0:	4770      	bx	lr
 800a0e2:	f04f 30ff 	mov.w	r0, #4294967295
 800a0e6:	4770      	bx	lr
 800a0e8:	0800f730 	.word	0x0800f730
 800a0ec:	08014068 	.word	0x08014068
 800a0f0:	0801cde8 	.word	0x0801cde8

0800a0f4 <arm_rfft_64_fast_init_f32>:
 800a0f4:	b178      	cbz	r0, 800a116 <arm_rfft_64_fast_init_f32+0x22>
 800a0f6:	b430      	push	{r4, r5}
 800a0f8:	4908      	ldr	r1, [pc, #32]	; (800a11c <arm_rfft_64_fast_init_f32+0x28>)
 800a0fa:	4a09      	ldr	r2, [pc, #36]	; (800a120 <arm_rfft_64_fast_init_f32+0x2c>)
 800a0fc:	2320      	movs	r3, #32
 800a0fe:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800a102:	8003      	strh	r3, [r0, #0]
 800a104:	2540      	movs	r5, #64	; 0x40
 800a106:	2430      	movs	r4, #48	; 0x30
 800a108:	4b06      	ldr	r3, [pc, #24]	; (800a124 <arm_rfft_64_fast_init_f32+0x30>)
 800a10a:	8205      	strh	r5, [r0, #16]
 800a10c:	8184      	strh	r4, [r0, #12]
 800a10e:	6143      	str	r3, [r0, #20]
 800a110:	bc30      	pop	{r4, r5}
 800a112:	2000      	movs	r0, #0
 800a114:	4770      	bx	lr
 800a116:	f04f 30ff 	mov.w	r0, #4294967295
 800a11a:	4770      	bx	lr
 800a11c:	08011888 	.word	0x08011888
 800a120:	080188e8 	.word	0x080188e8
 800a124:	08021668 	.word	0x08021668

0800a128 <arm_rfft_256_fast_init_f32>:
 800a128:	b180      	cbz	r0, 800a14c <arm_rfft_256_fast_init_f32+0x24>
 800a12a:	b430      	push	{r4, r5}
 800a12c:	4909      	ldr	r1, [pc, #36]	; (800a154 <arm_rfft_256_fast_init_f32+0x2c>)
 800a12e:	4a0a      	ldr	r2, [pc, #40]	; (800a158 <arm_rfft_256_fast_init_f32+0x30>)
 800a130:	2380      	movs	r3, #128	; 0x80
 800a132:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800a136:	8003      	strh	r3, [r0, #0]
 800a138:	f44f 7580 	mov.w	r5, #256	; 0x100
 800a13c:	24d0      	movs	r4, #208	; 0xd0
 800a13e:	4b07      	ldr	r3, [pc, #28]	; (800a15c <arm_rfft_256_fast_init_f32+0x34>)
 800a140:	8205      	strh	r5, [r0, #16]
 800a142:	8184      	strh	r4, [r0, #12]
 800a144:	6143      	str	r3, [r0, #20]
 800a146:	bc30      	pop	{r4, r5}
 800a148:	2000      	movs	r0, #0
 800a14a:	4770      	bx	lr
 800a14c:	f04f 30ff 	mov.w	r0, #4294967295
 800a150:	4770      	bx	lr
 800a152:	bf00      	nop
 800a154:	0800f590 	.word	0x0800f590
 800a158:	08013c68 	.word	0x08013c68
 800a15c:	0801c9e8 	.word	0x0801c9e8

0800a160 <arm_rfft_512_fast_init_f32>:
 800a160:	b190      	cbz	r0, 800a188 <arm_rfft_512_fast_init_f32+0x28>
 800a162:	b430      	push	{r4, r5}
 800a164:	490a      	ldr	r1, [pc, #40]	; (800a190 <arm_rfft_512_fast_init_f32+0x30>)
 800a166:	4a0b      	ldr	r2, [pc, #44]	; (800a194 <arm_rfft_512_fast_init_f32+0x34>)
 800a168:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a16c:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800a170:	8003      	strh	r3, [r0, #0]
 800a172:	f44f 7500 	mov.w	r5, #512	; 0x200
 800a176:	f44f 74dc 	mov.w	r4, #440	; 0x1b8
 800a17a:	4b07      	ldr	r3, [pc, #28]	; (800a198 <arm_rfft_512_fast_init_f32+0x38>)
 800a17c:	8205      	strh	r5, [r0, #16]
 800a17e:	8184      	strh	r4, [r0, #12]
 800a180:	6143      	str	r3, [r0, #20]
 800a182:	bc30      	pop	{r4, r5}
 800a184:	2000      	movs	r0, #0
 800a186:	4770      	bx	lr
 800a188:	f04f 30ff 	mov.w	r0, #4294967295
 800a18c:	4770      	bx	lr
 800a18e:	bf00      	nop
 800a190:	08011518 	.word	0x08011518
 800a194:	080180e8 	.word	0x080180e8
 800a198:	08020e68 	.word	0x08020e68

0800a19c <arm_rfft_1024_fast_init_f32>:
 800a19c:	b190      	cbz	r0, 800a1c4 <arm_rfft_1024_fast_init_f32+0x28>
 800a19e:	b430      	push	{r4, r5}
 800a1a0:	490a      	ldr	r1, [pc, #40]	; (800a1cc <arm_rfft_1024_fast_init_f32+0x30>)
 800a1a2:	4a0b      	ldr	r2, [pc, #44]	; (800a1d0 <arm_rfft_1024_fast_init_f32+0x34>)
 800a1a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a1a8:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800a1ac:	8003      	strh	r3, [r0, #0]
 800a1ae:	f44f 6580 	mov.w	r5, #1024	; 0x400
 800a1b2:	f44f 74e0 	mov.w	r4, #448	; 0x1c0
 800a1b6:	4b07      	ldr	r3, [pc, #28]	; (800a1d4 <arm_rfft_1024_fast_init_f32+0x38>)
 800a1b8:	8205      	strh	r5, [r0, #16]
 800a1ba:	8184      	strh	r4, [r0, #12]
 800a1bc:	6143      	str	r3, [r0, #20]
 800a1be:	bc30      	pop	{r4, r5}
 800a1c0:	2000      	movs	r0, #0
 800a1c2:	4770      	bx	lr
 800a1c4:	f04f 30ff 	mov.w	r0, #4294967295
 800a1c8:	4770      	bx	lr
 800a1ca:	bf00      	nop
 800a1cc:	080118e8 	.word	0x080118e8
 800a1d0:	080189e8 	.word	0x080189e8
 800a1d4:	080199e8 	.word	0x080199e8

0800a1d8 <arm_rfft_2048_fast_init_f32>:
 800a1d8:	b190      	cbz	r0, 800a200 <arm_rfft_2048_fast_init_f32+0x28>
 800a1da:	b430      	push	{r4, r5}
 800a1dc:	490a      	ldr	r1, [pc, #40]	; (800a208 <arm_rfft_2048_fast_init_f32+0x30>)
 800a1de:	4a0b      	ldr	r2, [pc, #44]	; (800a20c <arm_rfft_2048_fast_init_f32+0x34>)
 800a1e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a1e4:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800a1e8:	8003      	strh	r3, [r0, #0]
 800a1ea:	f44f 6500 	mov.w	r5, #2048	; 0x800
 800a1ee:	f44f 64e1 	mov.w	r4, #1800	; 0x708
 800a1f2:	4b07      	ldr	r3, [pc, #28]	; (800a210 <arm_rfft_2048_fast_init_f32+0x38>)
 800a1f4:	8205      	strh	r5, [r0, #16]
 800a1f6:	8184      	strh	r4, [r0, #12]
 800a1f8:	6143      	str	r3, [r0, #20]
 800a1fa:	bc30      	pop	{r4, r5}
 800a1fc:	2000      	movs	r0, #0
 800a1fe:	4770      	bx	lr
 800a200:	f04f 30ff 	mov.w	r0, #4294967295
 800a204:	4770      	bx	lr
 800a206:	bf00      	nop
 800a208:	0800e780 	.word	0x0800e780
 800a20c:	08011c68 	.word	0x08011c68
 800a210:	0801a9e8 	.word	0x0801a9e8

0800a214 <arm_rfft_4096_fast_init_f32>:
 800a214:	b190      	cbz	r0, 800a23c <arm_rfft_4096_fast_init_f32+0x28>
 800a216:	b430      	push	{r4, r5}
 800a218:	490a      	ldr	r1, [pc, #40]	; (800a244 <arm_rfft_4096_fast_init_f32+0x30>)
 800a21a:	4a0b      	ldr	r2, [pc, #44]	; (800a248 <arm_rfft_4096_fast_init_f32+0x34>)
 800a21c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a220:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800a224:	8003      	strh	r3, [r0, #0]
 800a226:	f44f 5580 	mov.w	r5, #4096	; 0x1000
 800a22a:	f44f 646e 	mov.w	r4, #3808	; 0xee0
 800a22e:	4b07      	ldr	r3, [pc, #28]	; (800a24c <arm_rfft_4096_fast_init_f32+0x38>)
 800a230:	8205      	strh	r5, [r0, #16]
 800a232:	8184      	strh	r4, [r0, #12]
 800a234:	6143      	str	r3, [r0, #20]
 800a236:	bc30      	pop	{r4, r5}
 800a238:	2000      	movs	r0, #0
 800a23a:	4770      	bx	lr
 800a23c:	f04f 30ff 	mov.w	r0, #4294967295
 800a240:	4770      	bx	lr
 800a242:	bf00      	nop
 800a244:	0800f758 	.word	0x0800f758
 800a248:	080140e8 	.word	0x080140e8
 800a24c:	0801ce68 	.word	0x0801ce68

0800a250 <arm_rfft_fast_init_f32>:
 800a250:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800a254:	d01f      	beq.n	800a296 <arm_rfft_fast_init_f32+0x46>
 800a256:	d90b      	bls.n	800a270 <arm_rfft_fast_init_f32+0x20>
 800a258:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 800a25c:	d019      	beq.n	800a292 <arm_rfft_fast_init_f32+0x42>
 800a25e:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800a262:	d012      	beq.n	800a28a <arm_rfft_fast_init_f32+0x3a>
 800a264:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800a268:	d00d      	beq.n	800a286 <arm_rfft_fast_init_f32+0x36>
 800a26a:	f04f 30ff 	mov.w	r0, #4294967295
 800a26e:	4770      	bx	lr
 800a270:	2940      	cmp	r1, #64	; 0x40
 800a272:	d00c      	beq.n	800a28e <arm_rfft_fast_init_f32+0x3e>
 800a274:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800a278:	d003      	beq.n	800a282 <arm_rfft_fast_init_f32+0x32>
 800a27a:	2920      	cmp	r1, #32
 800a27c:	d1f5      	bne.n	800a26a <arm_rfft_fast_init_f32+0x1a>
 800a27e:	4b07      	ldr	r3, [pc, #28]	; (800a29c <arm_rfft_fast_init_f32+0x4c>)
 800a280:	4718      	bx	r3
 800a282:	4b07      	ldr	r3, [pc, #28]	; (800a2a0 <arm_rfft_fast_init_f32+0x50>)
 800a284:	4718      	bx	r3
 800a286:	4b07      	ldr	r3, [pc, #28]	; (800a2a4 <arm_rfft_fast_init_f32+0x54>)
 800a288:	4718      	bx	r3
 800a28a:	4b07      	ldr	r3, [pc, #28]	; (800a2a8 <arm_rfft_fast_init_f32+0x58>)
 800a28c:	4718      	bx	r3
 800a28e:	4b07      	ldr	r3, [pc, #28]	; (800a2ac <arm_rfft_fast_init_f32+0x5c>)
 800a290:	e7f6      	b.n	800a280 <arm_rfft_fast_init_f32+0x30>
 800a292:	4b07      	ldr	r3, [pc, #28]	; (800a2b0 <arm_rfft_fast_init_f32+0x60>)
 800a294:	e7f4      	b.n	800a280 <arm_rfft_fast_init_f32+0x30>
 800a296:	4b07      	ldr	r3, [pc, #28]	; (800a2b4 <arm_rfft_fast_init_f32+0x64>)
 800a298:	e7f2      	b.n	800a280 <arm_rfft_fast_init_f32+0x30>
 800a29a:	bf00      	nop
 800a29c:	0800a0c1 	.word	0x0800a0c1
 800a2a0:	0800a129 	.word	0x0800a129
 800a2a4:	0800a19d 	.word	0x0800a19d
 800a2a8:	0800a215 	.word	0x0800a215
 800a2ac:	0800a0f5 	.word	0x0800a0f5
 800a2b0:	0800a1d9 	.word	0x0800a1d9
 800a2b4:	0800a161 	.word	0x0800a161

0800a2b8 <stage_rfft_f32>:
 800a2b8:	b410      	push	{r4}
 800a2ba:	edd1 7a00 	vldr	s15, [r1]
 800a2be:	ed91 7a01 	vldr	s14, [r1, #4]
 800a2c2:	8804      	ldrh	r4, [r0, #0]
 800a2c4:	6940      	ldr	r0, [r0, #20]
 800a2c6:	ee37 7a07 	vadd.f32	s14, s14, s14
 800a2ca:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800a2ce:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 800a2d2:	ee77 6a87 	vadd.f32	s13, s15, s14
 800a2d6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a2da:	3c01      	subs	r4, #1
 800a2dc:	ee26 7a84 	vmul.f32	s14, s13, s8
 800a2e0:	ee67 7a84 	vmul.f32	s15, s15, s8
 800a2e4:	eb01 03c4 	add.w	r3, r1, r4, lsl #3
 800a2e8:	ed82 7a00 	vstr	s14, [r2]
 800a2ec:	edc2 7a01 	vstr	s15, [r2, #4]
 800a2f0:	3010      	adds	r0, #16
 800a2f2:	3210      	adds	r2, #16
 800a2f4:	3b08      	subs	r3, #8
 800a2f6:	3110      	adds	r1, #16
 800a2f8:	ed11 5a02 	vldr	s10, [r1, #-8]
 800a2fc:	ed93 7a02 	vldr	s14, [r3, #8]
 800a300:	ed50 6a02 	vldr	s13, [r0, #-8]
 800a304:	edd3 4a03 	vldr	s9, [r3, #12]
 800a308:	ed51 7a01 	vldr	s15, [r1, #-4]
 800a30c:	ed10 6a01 	vldr	s12, [r0, #-4]
 800a310:	ee77 5a45 	vsub.f32	s11, s14, s10
 800a314:	ee37 7a05 	vadd.f32	s14, s14, s10
 800a318:	ee66 3aa5 	vmul.f32	s7, s13, s11
 800a31c:	ee34 5aa7 	vadd.f32	s10, s9, s15
 800a320:	ee66 5a25 	vmul.f32	s11, s12, s11
 800a324:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800a328:	ee37 7a23 	vadd.f32	s14, s14, s7
 800a32c:	ee66 6a85 	vmul.f32	s13, s13, s10
 800a330:	ee26 6a05 	vmul.f32	s12, s12, s10
 800a334:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800a338:	ee37 7a06 	vadd.f32	s14, s14, s12
 800a33c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a340:	ee27 7a04 	vmul.f32	s14, s14, s8
 800a344:	ee67 7a84 	vmul.f32	s15, s15, s8
 800a348:	3c01      	subs	r4, #1
 800a34a:	ed02 7a02 	vstr	s14, [r2, #-8]
 800a34e:	ed42 7a01 	vstr	s15, [r2, #-4]
 800a352:	f1a3 0308 	sub.w	r3, r3, #8
 800a356:	f101 0108 	add.w	r1, r1, #8
 800a35a:	f100 0008 	add.w	r0, r0, #8
 800a35e:	f102 0208 	add.w	r2, r2, #8
 800a362:	d1c9      	bne.n	800a2f8 <stage_rfft_f32+0x40>
 800a364:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a368:	4770      	bx	lr
 800a36a:	bf00      	nop

0800a36c <merge_rfft_f32>:
 800a36c:	b410      	push	{r4}
 800a36e:	edd1 7a00 	vldr	s15, [r1]
 800a372:	edd1 6a01 	vldr	s13, [r1, #4]
 800a376:	8804      	ldrh	r4, [r0, #0]
 800a378:	6940      	ldr	r0, [r0, #20]
 800a37a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800a37e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a382:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 800a386:	ee27 7a04 	vmul.f32	s14, s14, s8
 800a38a:	ee67 7a84 	vmul.f32	s15, s15, s8
 800a38e:	3c01      	subs	r4, #1
 800a390:	ed82 7a00 	vstr	s14, [r2]
 800a394:	edc2 7a01 	vstr	s15, [r2, #4]
 800a398:	b3dc      	cbz	r4, 800a412 <merge_rfft_f32+0xa6>
 800a39a:	00e3      	lsls	r3, r4, #3
 800a39c:	3b08      	subs	r3, #8
 800a39e:	440b      	add	r3, r1
 800a3a0:	3010      	adds	r0, #16
 800a3a2:	3210      	adds	r2, #16
 800a3a4:	3110      	adds	r1, #16
 800a3a6:	ed11 5a02 	vldr	s10, [r1, #-8]
 800a3aa:	ed93 7a02 	vldr	s14, [r3, #8]
 800a3ae:	ed50 6a02 	vldr	s13, [r0, #-8]
 800a3b2:	edd3 4a03 	vldr	s9, [r3, #12]
 800a3b6:	ed51 7a01 	vldr	s15, [r1, #-4]
 800a3ba:	ed10 6a01 	vldr	s12, [r0, #-4]
 800a3be:	ee75 5a47 	vsub.f32	s11, s10, s14
 800a3c2:	ee37 7a05 	vadd.f32	s14, s14, s10
 800a3c6:	ee66 3aa5 	vmul.f32	s7, s13, s11
 800a3ca:	ee34 5aa7 	vadd.f32	s10, s9, s15
 800a3ce:	ee66 5a25 	vmul.f32	s11, s12, s11
 800a3d2:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800a3d6:	ee37 7a63 	vsub.f32	s14, s14, s7
 800a3da:	ee66 6a85 	vmul.f32	s13, s13, s10
 800a3de:	ee26 6a05 	vmul.f32	s12, s12, s10
 800a3e2:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800a3e6:	ee37 7a46 	vsub.f32	s14, s14, s12
 800a3ea:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a3ee:	ee27 7a04 	vmul.f32	s14, s14, s8
 800a3f2:	ee67 7a84 	vmul.f32	s15, s15, s8
 800a3f6:	3c01      	subs	r4, #1
 800a3f8:	ed02 7a02 	vstr	s14, [r2, #-8]
 800a3fc:	ed42 7a01 	vstr	s15, [r2, #-4]
 800a400:	f1a3 0308 	sub.w	r3, r3, #8
 800a404:	f101 0108 	add.w	r1, r1, #8
 800a408:	f100 0008 	add.w	r0, r0, #8
 800a40c:	f102 0208 	add.w	r2, r2, #8
 800a410:	d1c9      	bne.n	800a3a6 <merge_rfft_f32+0x3a>
 800a412:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a416:	4770      	bx	lr

0800a418 <arm_rfft_fast_f32>:
 800a418:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a41c:	8a05      	ldrh	r5, [r0, #16]
 800a41e:	086d      	lsrs	r5, r5, #1
 800a420:	8005      	strh	r5, [r0, #0]
 800a422:	4604      	mov	r4, r0
 800a424:	4616      	mov	r6, r2
 800a426:	461d      	mov	r5, r3
 800a428:	b14b      	cbz	r3, 800a43e <arm_rfft_fast_f32+0x26>
 800a42a:	f7ff ff9f 	bl	800a36c <merge_rfft_f32>
 800a42e:	462a      	mov	r2, r5
 800a430:	4631      	mov	r1, r6
 800a432:	4620      	mov	r0, r4
 800a434:	2301      	movs	r3, #1
 800a436:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a43a:	f000 bb33 	b.w	800aaa4 <arm_cfft_f32>
 800a43e:	460f      	mov	r7, r1
 800a440:	461a      	mov	r2, r3
 800a442:	2301      	movs	r3, #1
 800a444:	f000 fb2e 	bl	800aaa4 <arm_cfft_f32>
 800a448:	4632      	mov	r2, r6
 800a44a:	4639      	mov	r1, r7
 800a44c:	4620      	mov	r0, r4
 800a44e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a452:	f7ff bf31 	b.w	800a2b8 <stage_rfft_f32>
 800a456:	bf00      	nop

0800a458 <arm_cfft_radix8by2_f32>:
 800a458:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a45c:	ed2d 8b08 	vpush	{d8-d11}
 800a460:	4607      	mov	r7, r0
 800a462:	4608      	mov	r0, r1
 800a464:	f8b7 c000 	ldrh.w	ip, [r7]
 800a468:	687a      	ldr	r2, [r7, #4]
 800a46a:	ea4f 015c 	mov.w	r1, ip, lsr #1
 800a46e:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 800a472:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800a476:	f000 80b0 	beq.w	800a5da <arm_cfft_radix8by2_f32+0x182>
 800a47a:	008c      	lsls	r4, r1, #2
 800a47c:	3410      	adds	r4, #16
 800a47e:	f100 0310 	add.w	r3, r0, #16
 800a482:	1906      	adds	r6, r0, r4
 800a484:	3210      	adds	r2, #16
 800a486:	4444      	add	r4, r8
 800a488:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 800a48c:	f108 0510 	add.w	r5, r8, #16
 800a490:	ed15 2a04 	vldr	s4, [r5, #-16]
 800a494:	ed55 2a03 	vldr	s5, [r5, #-12]
 800a498:	ed54 4a04 	vldr	s9, [r4, #-16]
 800a49c:	ed14 4a03 	vldr	s8, [r4, #-12]
 800a4a0:	ed14 6a02 	vldr	s12, [r4, #-8]
 800a4a4:	ed54 5a01 	vldr	s11, [r4, #-4]
 800a4a8:	ed53 3a04 	vldr	s7, [r3, #-16]
 800a4ac:	ed15 0a02 	vldr	s0, [r5, #-8]
 800a4b0:	ed55 0a01 	vldr	s1, [r5, #-4]
 800a4b4:	ed56 6a04 	vldr	s13, [r6, #-16]
 800a4b8:	ed16 3a03 	vldr	s6, [r6, #-12]
 800a4bc:	ed13 7a03 	vldr	s14, [r3, #-12]
 800a4c0:	ed13 5a02 	vldr	s10, [r3, #-8]
 800a4c4:	ed53 7a01 	vldr	s15, [r3, #-4]
 800a4c8:	ed16 1a02 	vldr	s2, [r6, #-8]
 800a4cc:	ed56 1a01 	vldr	s3, [r6, #-4]
 800a4d0:	ee73 ba82 	vadd.f32	s23, s7, s4
 800a4d4:	ee37 ba22 	vadd.f32	s22, s14, s5
 800a4d8:	ee76 9aa4 	vadd.f32	s19, s13, s9
 800a4dc:	ee33 9a04 	vadd.f32	s18, s6, s8
 800a4e0:	ee31 8aa5 	vadd.f32	s16, s3, s11
 800a4e4:	ee75 aa00 	vadd.f32	s21, s10, s0
 800a4e8:	ee37 aaa0 	vadd.f32	s20, s15, s1
 800a4ec:	ee71 8a06 	vadd.f32	s17, s2, s12
 800a4f0:	ed43 ba04 	vstr	s23, [r3, #-16]
 800a4f4:	ed03 ba03 	vstr	s22, [r3, #-12]
 800a4f8:	ed43 aa02 	vstr	s21, [r3, #-8]
 800a4fc:	ed03 aa01 	vstr	s20, [r3, #-4]
 800a500:	ed06 8a01 	vstr	s16, [r6, #-4]
 800a504:	ed46 9a04 	vstr	s19, [r6, #-16]
 800a508:	ed06 9a03 	vstr	s18, [r6, #-12]
 800a50c:	ed46 8a02 	vstr	s17, [r6, #-8]
 800a510:	ee37 7a62 	vsub.f32	s14, s14, s5
 800a514:	ee74 4ae6 	vsub.f32	s9, s9, s13
 800a518:	ee34 4a43 	vsub.f32	s8, s8, s6
 800a51c:	ed52 6a03 	vldr	s13, [r2, #-12]
 800a520:	ed12 3a04 	vldr	s6, [r2, #-16]
 800a524:	ee73 3ac2 	vsub.f32	s7, s7, s4
 800a528:	ee27 8a26 	vmul.f32	s16, s14, s13
 800a52c:	ee64 2aa6 	vmul.f32	s5, s9, s13
 800a530:	ee23 2a83 	vmul.f32	s4, s7, s6
 800a534:	ee64 4a83 	vmul.f32	s9, s9, s6
 800a538:	ee63 3aa6 	vmul.f32	s7, s7, s13
 800a53c:	ee27 7a03 	vmul.f32	s14, s14, s6
 800a540:	ee64 6a26 	vmul.f32	s13, s8, s13
 800a544:	ee24 4a03 	vmul.f32	s8, s8, s6
 800a548:	ee37 7a63 	vsub.f32	s14, s14, s7
 800a54c:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800a550:	ee32 4ac4 	vsub.f32	s8, s5, s8
 800a554:	ee32 3a08 	vadd.f32	s6, s4, s16
 800a558:	ed05 7a03 	vstr	s14, [r5, #-12]
 800a55c:	ed05 3a04 	vstr	s6, [r5, #-16]
 800a560:	ed04 4a04 	vstr	s8, [r4, #-16]
 800a564:	ed44 6a03 	vstr	s13, [r4, #-12]
 800a568:	ed12 7a01 	vldr	s14, [r2, #-4]
 800a56c:	ee76 6a41 	vsub.f32	s13, s12, s2
 800a570:	ee35 5a40 	vsub.f32	s10, s10, s0
 800a574:	ee35 6ae1 	vsub.f32	s12, s11, s3
 800a578:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800a57c:	ed52 5a02 	vldr	s11, [r2, #-8]
 800a580:	ee67 3a87 	vmul.f32	s7, s15, s14
 800a584:	ee66 4a87 	vmul.f32	s9, s13, s14
 800a588:	ee25 4a25 	vmul.f32	s8, s10, s11
 800a58c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800a590:	ee25 5a07 	vmul.f32	s10, s10, s14
 800a594:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800a598:	ee26 7a07 	vmul.f32	s14, s12, s14
 800a59c:	ee26 6a25 	vmul.f32	s12, s12, s11
 800a5a0:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800a5a4:	ee74 5a23 	vadd.f32	s11, s8, s7
 800a5a8:	ee34 6ac6 	vsub.f32	s12, s9, s12
 800a5ac:	ee37 7a26 	vadd.f32	s14, s14, s13
 800a5b0:	3310      	adds	r3, #16
 800a5b2:	4563      	cmp	r3, ip
 800a5b4:	ed45 5a02 	vstr	s11, [r5, #-8]
 800a5b8:	f106 0610 	add.w	r6, r6, #16
 800a5bc:	ed45 7a01 	vstr	s15, [r5, #-4]
 800a5c0:	f102 0210 	add.w	r2, r2, #16
 800a5c4:	ed04 6a02 	vstr	s12, [r4, #-8]
 800a5c8:	ed04 7a01 	vstr	s14, [r4, #-4]
 800a5cc:	f105 0510 	add.w	r5, r5, #16
 800a5d0:	f104 0410 	add.w	r4, r4, #16
 800a5d4:	f47f af5c 	bne.w	800a490 <arm_cfft_radix8by2_f32+0x38>
 800a5d8:	687a      	ldr	r2, [r7, #4]
 800a5da:	b28c      	uxth	r4, r1
 800a5dc:	4621      	mov	r1, r4
 800a5de:	2302      	movs	r3, #2
 800a5e0:	f000 faf8 	bl	800abd4 <arm_radix8_butterfly_f32>
 800a5e4:	ecbd 8b08 	vpop	{d8-d11}
 800a5e8:	4621      	mov	r1, r4
 800a5ea:	687a      	ldr	r2, [r7, #4]
 800a5ec:	4640      	mov	r0, r8
 800a5ee:	2302      	movs	r3, #2
 800a5f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a5f4:	f000 baee 	b.w	800abd4 <arm_radix8_butterfly_f32>

0800a5f8 <arm_cfft_radix8by4_f32>:
 800a5f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5fc:	ed2d 8b0a 	vpush	{d8-d12}
 800a600:	b08d      	sub	sp, #52	; 0x34
 800a602:	460d      	mov	r5, r1
 800a604:	910b      	str	r1, [sp, #44]	; 0x2c
 800a606:	8801      	ldrh	r1, [r0, #0]
 800a608:	6842      	ldr	r2, [r0, #4]
 800a60a:	900a      	str	r0, [sp, #40]	; 0x28
 800a60c:	0849      	lsrs	r1, r1, #1
 800a60e:	008b      	lsls	r3, r1, #2
 800a610:	18ee      	adds	r6, r5, r3
 800a612:	18f0      	adds	r0, r6, r3
 800a614:	edd0 5a00 	vldr	s11, [r0]
 800a618:	edd5 7a00 	vldr	s15, [r5]
 800a61c:	ed96 7a00 	vldr	s14, [r6]
 800a620:	edd0 3a01 	vldr	s7, [r0, #4]
 800a624:	ed96 4a01 	vldr	s8, [r6, #4]
 800a628:	ed95 5a01 	vldr	s10, [r5, #4]
 800a62c:	9008      	str	r0, [sp, #32]
 800a62e:	ee37 6aa5 	vadd.f32	s12, s15, s11
 800a632:	18c7      	adds	r7, r0, r3
 800a634:	edd7 4a00 	vldr	s9, [r7]
 800a638:	ed97 3a01 	vldr	s6, [r7, #4]
 800a63c:	9701      	str	r7, [sp, #4]
 800a63e:	ee77 6a06 	vadd.f32	s13, s14, s12
 800a642:	462c      	mov	r4, r5
 800a644:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800a648:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800a64c:	ee16 ca90 	vmov	ip, s13
 800a650:	f844 cb08 	str.w	ip, [r4], #8
 800a654:	ee75 6a23 	vadd.f32	s13, s10, s7
 800a658:	edd6 5a01 	vldr	s11, [r6, #4]
 800a65c:	edd7 2a01 	vldr	s5, [r7, #4]
 800a660:	9404      	str	r4, [sp, #16]
 800a662:	ee35 5a63 	vsub.f32	s10, s10, s7
 800a666:	ee74 3a27 	vadd.f32	s7, s8, s15
 800a66a:	ee36 6a47 	vsub.f32	s12, s12, s14
 800a66e:	ee76 5aa5 	vadd.f32	s11, s13, s11
 800a672:	ee73 3ac3 	vsub.f32	s7, s7, s6
 800a676:	0849      	lsrs	r1, r1, #1
 800a678:	f102 0e08 	add.w	lr, r2, #8
 800a67c:	ee76 6ac4 	vsub.f32	s13, s13, s8
 800a680:	ee77 7ac4 	vsub.f32	s15, s15, s8
 800a684:	9109      	str	r1, [sp, #36]	; 0x24
 800a686:	ee35 4a47 	vsub.f32	s8, s10, s14
 800a68a:	f1a1 0902 	sub.w	r9, r1, #2
 800a68e:	f8cd e00c 	str.w	lr, [sp, #12]
 800a692:	4631      	mov	r1, r6
 800a694:	ee13 ea90 	vmov	lr, s7
 800a698:	ee36 6a64 	vsub.f32	s12, s12, s9
 800a69c:	ee75 5aa2 	vadd.f32	s11, s11, s5
 800a6a0:	4604      	mov	r4, r0
 800a6a2:	edc5 5a01 	vstr	s11, [r5, #4]
 800a6a6:	ee37 7a05 	vadd.f32	s14, s14, s10
 800a6aa:	f841 eb08 	str.w	lr, [r1], #8
 800a6ae:	ee34 5a24 	vadd.f32	s10, s8, s9
 800a6b2:	ee16 ea10 	vmov	lr, s12
 800a6b6:	ed86 5a01 	vstr	s10, [r6, #4]
 800a6ba:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800a6be:	f844 eb08 	str.w	lr, [r4], #8
 800a6c2:	ee77 7a83 	vadd.f32	s15, s15, s6
 800a6c6:	edc0 6a01 	vstr	s13, [r0, #4]
 800a6ca:	9405      	str	r4, [sp, #20]
 800a6cc:	4604      	mov	r4, r0
 800a6ce:	ee17 0a90 	vmov	r0, s15
 800a6d2:	9106      	str	r1, [sp, #24]
 800a6d4:	ee37 7a64 	vsub.f32	s14, s14, s9
 800a6d8:	f102 0110 	add.w	r1, r2, #16
 800a6dc:	46bc      	mov	ip, r7
 800a6de:	9100      	str	r1, [sp, #0]
 800a6e0:	f847 0b08 	str.w	r0, [r7], #8
 800a6e4:	f102 0118 	add.w	r1, r2, #24
 800a6e8:	ea5f 0059 	movs.w	r0, r9, lsr #1
 800a6ec:	9102      	str	r1, [sp, #8]
 800a6ee:	ed8c 7a01 	vstr	s14, [ip, #4]
 800a6f2:	9007      	str	r0, [sp, #28]
 800a6f4:	f000 8134 	beq.w	800a960 <arm_cfft_radix8by4_f32+0x368>
 800a6f8:	f102 0920 	add.w	r9, r2, #32
 800a6fc:	f102 0830 	add.w	r8, r2, #48	; 0x30
 800a700:	9a01      	ldr	r2, [sp, #4]
 800a702:	f8dd a000 	ldr.w	sl, [sp]
 800a706:	3b0c      	subs	r3, #12
 800a708:	4683      	mov	fp, r0
 800a70a:	4463      	add	r3, ip
 800a70c:	f105 0e10 	add.w	lr, r5, #16
 800a710:	f1a4 010c 	sub.w	r1, r4, #12
 800a714:	f104 0510 	add.w	r5, r4, #16
 800a718:	f1a6 0c0c 	sub.w	ip, r6, #12
 800a71c:	f1a2 040c 	sub.w	r4, r2, #12
 800a720:	f106 0010 	add.w	r0, r6, #16
 800a724:	3210      	adds	r2, #16
 800a726:	ed1e 5a02 	vldr	s10, [lr, #-8]
 800a72a:	ed55 5a02 	vldr	s11, [r5, #-8]
 800a72e:	ed50 7a02 	vldr	s15, [r0, #-8]
 800a732:	ed52 1a02 	vldr	s3, [r2, #-8]
 800a736:	ed55 6a01 	vldr	s13, [r5, #-4]
 800a73a:	ed1e 0a01 	vldr	s0, [lr, #-4]
 800a73e:	ed12 1a01 	vldr	s2, [r2, #-4]
 800a742:	ed10 8a01 	vldr	s16, [r0, #-4]
 800a746:	ee35 4a25 	vadd.f32	s8, s10, s11
 800a74a:	ee30 6a26 	vadd.f32	s12, s0, s13
 800a74e:	ee37 7a84 	vadd.f32	s14, s15, s8
 800a752:	ee30 0a66 	vsub.f32	s0, s0, s13
 800a756:	ee37 7a21 	vadd.f32	s14, s14, s3
 800a75a:	ee75 5a65 	vsub.f32	s11, s10, s11
 800a75e:	ed0e 7a02 	vstr	s14, [lr, #-8]
 800a762:	ed10 7a01 	vldr	s14, [r0, #-4]
 800a766:	ed52 6a01 	vldr	s13, [r2, #-4]
 800a76a:	ee36 7a07 	vadd.f32	s14, s12, s14
 800a76e:	ee78 aa25 	vadd.f32	s21, s16, s11
 800a772:	ee37 7a26 	vadd.f32	s14, s14, s13
 800a776:	ee70 3a67 	vsub.f32	s7, s0, s15
 800a77a:	ed0e 7a01 	vstr	s14, [lr, #-4]
 800a77e:	ed94 7a02 	vldr	s14, [r4, #8]
 800a782:	ed9c 2a02 	vldr	s4, [ip, #8]
 800a786:	ed91 ba02 	vldr	s22, [r1, #8]
 800a78a:	edd3 9a02 	vldr	s19, [r3, #8]
 800a78e:	edd4 2a01 	vldr	s5, [r4, #4]
 800a792:	ed9c 9a01 	vldr	s18, [ip, #4]
 800a796:	ed93 5a01 	vldr	s10, [r3, #4]
 800a79a:	edd1 0a01 	vldr	s1, [r1, #4]
 800a79e:	ee72 6a07 	vadd.f32	s13, s4, s14
 800a7a2:	ee32 2a47 	vsub.f32	s4, s4, s14
 800a7a6:	ee7b 8a26 	vadd.f32	s17, s22, s13
 800a7aa:	ee79 4a22 	vadd.f32	s9, s18, s5
 800a7ae:	ee38 7aa9 	vadd.f32	s14, s17, s19
 800a7b2:	ee79 2a62 	vsub.f32	s5, s18, s5
 800a7b6:	ed8c 7a02 	vstr	s14, [ip, #8]
 800a7ba:	ed91 7a01 	vldr	s14, [r1, #4]
 800a7be:	edd3 8a01 	vldr	s17, [r3, #4]
 800a7c2:	ee34 7a87 	vadd.f32	s14, s9, s14
 800a7c6:	ee3b 3a69 	vsub.f32	s6, s22, s19
 800a7ca:	ee37 7a28 	vadd.f32	s14, s14, s17
 800a7ce:	ee32 9a60 	vsub.f32	s18, s4, s1
 800a7d2:	ed8c 7a01 	vstr	s14, [ip, #4]
 800a7d6:	ed1a 7a01 	vldr	s14, [sl, #-4]
 800a7da:	ed1a aa02 	vldr	s20, [sl, #-8]
 800a7de:	ee73 8a22 	vadd.f32	s17, s6, s5
 800a7e2:	ee39 9a05 	vadd.f32	s18, s18, s10
 800a7e6:	ee7a aac1 	vsub.f32	s21, s21, s2
 800a7ea:	ee73 3aa1 	vadd.f32	s7, s7, s3
 800a7ee:	ee2a ca8a 	vmul.f32	s24, s21, s20
 800a7f2:	ee69 ba07 	vmul.f32	s23, s18, s14
 800a7f6:	ee6a aa87 	vmul.f32	s21, s21, s14
 800a7fa:	ee29 9a0a 	vmul.f32	s18, s18, s20
 800a7fe:	ee63 ca87 	vmul.f32	s25, s7, s14
 800a802:	ee63 3a8a 	vmul.f32	s7, s7, s20
 800a806:	ee28 aa8a 	vmul.f32	s20, s17, s20
 800a80a:	ee68 8a87 	vmul.f32	s17, s17, s14
 800a80e:	ee73 3aea 	vsub.f32	s7, s7, s21
 800a812:	ee78 8a89 	vadd.f32	s17, s17, s18
 800a816:	ee3c 7a2c 	vadd.f32	s14, s24, s25
 800a81a:	ee3b aaca 	vsub.f32	s20, s23, s20
 800a81e:	ee34 4a67 	vsub.f32	s8, s8, s15
 800a822:	ee76 6acb 	vsub.f32	s13, s13, s22
 800a826:	ee36 6a48 	vsub.f32	s12, s12, s16
 800a82a:	ee74 4ae0 	vsub.f32	s9, s9, s1
 800a82e:	ed00 7a02 	vstr	s14, [r0, #-8]
 800a832:	ed40 3a01 	vstr	s7, [r0, #-4]
 800a836:	edc1 8a01 	vstr	s17, [r1, #4]
 800a83a:	ed81 aa02 	vstr	s20, [r1, #8]
 800a83e:	ed59 3a04 	vldr	s7, [r9, #-16]
 800a842:	ee36 7ae9 	vsub.f32	s14, s13, s19
 800a846:	ee74 4ac5 	vsub.f32	s9, s9, s10
 800a84a:	ed59 6a03 	vldr	s13, [r9, #-12]
 800a84e:	ee34 4a61 	vsub.f32	s8, s8, s3
 800a852:	ee36 6a41 	vsub.f32	s12, s12, s2
 800a856:	ee67 8a63 	vnmul.f32	s17, s14, s7
 800a85a:	ee66 9a26 	vmul.f32	s19, s12, s13
 800a85e:	ee24 9a23 	vmul.f32	s18, s8, s7
 800a862:	ee26 6a23 	vmul.f32	s12, s12, s7
 800a866:	ee24 4a26 	vmul.f32	s8, s8, s13
 800a86a:	ee27 7a26 	vmul.f32	s14, s14, s13
 800a86e:	ee64 6aa6 	vmul.f32	s13, s9, s13
 800a872:	ee64 4aa3 	vmul.f32	s9, s9, s7
 800a876:	ee36 6a44 	vsub.f32	s12, s12, s8
 800a87a:	ee37 7a64 	vsub.f32	s14, s14, s9
 800a87e:	ee38 4ae6 	vsub.f32	s8, s17, s13
 800a882:	ee79 3a29 	vadd.f32	s7, s18, s19
 800a886:	ee75 6a60 	vsub.f32	s13, s10, s1
 800a88a:	ee75 5ac8 	vsub.f32	s11, s11, s16
 800a88e:	ee77 7a80 	vadd.f32	s15, s15, s0
 800a892:	ed45 3a02 	vstr	s7, [r5, #-8]
 800a896:	ed05 6a01 	vstr	s12, [r5, #-4]
 800a89a:	ed84 7a01 	vstr	s14, [r4, #4]
 800a89e:	ed84 4a02 	vstr	s8, [r4, #8]
 800a8a2:	ee35 6a81 	vadd.f32	s12, s11, s2
 800a8a6:	ee36 7ac2 	vsub.f32	s14, s13, s4
 800a8aa:	ed58 5a06 	vldr	s11, [r8, #-24]	; 0xffffffe8
 800a8ae:	ed58 6a05 	vldr	s13, [r8, #-20]	; 0xffffffec
 800a8b2:	ee33 3a62 	vsub.f32	s6, s6, s5
 800a8b6:	ee77 7ae1 	vsub.f32	s15, s15, s3
 800a8ba:	ee67 2a26 	vmul.f32	s5, s14, s13
 800a8be:	ee67 4aa6 	vmul.f32	s9, s15, s13
 800a8c2:	ee26 5a25 	vmul.f32	s10, s12, s11
 800a8c6:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800a8ca:	ee26 6a26 	vmul.f32	s12, s12, s13
 800a8ce:	ee27 7a25 	vmul.f32	s14, s14, s11
 800a8d2:	ee63 6a26 	vmul.f32	s13, s6, s13
 800a8d6:	ee23 3a25 	vmul.f32	s6, s6, s11
 800a8da:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800a8de:	ee75 5a24 	vadd.f32	s11, s10, s9
 800a8e2:	ee32 3ac3 	vsub.f32	s6, s5, s6
 800a8e6:	ee36 7a87 	vadd.f32	s14, s13, s14
 800a8ea:	f1bb 0b01 	subs.w	fp, fp, #1
 800a8ee:	ed42 5a02 	vstr	s11, [r2, #-8]
 800a8f2:	ed42 7a01 	vstr	s15, [r2, #-4]
 800a8f6:	f10e 0e08 	add.w	lr, lr, #8
 800a8fa:	ed83 3a02 	vstr	s6, [r3, #8]
 800a8fe:	ed83 7a01 	vstr	s14, [r3, #4]
 800a902:	f1ac 0c08 	sub.w	ip, ip, #8
 800a906:	f10a 0a08 	add.w	sl, sl, #8
 800a90a:	f100 0008 	add.w	r0, r0, #8
 800a90e:	f1a1 0108 	sub.w	r1, r1, #8
 800a912:	f109 0910 	add.w	r9, r9, #16
 800a916:	f105 0508 	add.w	r5, r5, #8
 800a91a:	f1a4 0408 	sub.w	r4, r4, #8
 800a91e:	f108 0818 	add.w	r8, r8, #24
 800a922:	f102 0208 	add.w	r2, r2, #8
 800a926:	f1a3 0308 	sub.w	r3, r3, #8
 800a92a:	f47f aefc 	bne.w	800a726 <arm_cfft_radix8by4_f32+0x12e>
 800a92e:	9907      	ldr	r1, [sp, #28]
 800a930:	9800      	ldr	r0, [sp, #0]
 800a932:	00cb      	lsls	r3, r1, #3
 800a934:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800a938:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800a93c:	9100      	str	r1, [sp, #0]
 800a93e:	9904      	ldr	r1, [sp, #16]
 800a940:	4419      	add	r1, r3
 800a942:	9104      	str	r1, [sp, #16]
 800a944:	9903      	ldr	r1, [sp, #12]
 800a946:	4419      	add	r1, r3
 800a948:	9103      	str	r1, [sp, #12]
 800a94a:	9906      	ldr	r1, [sp, #24]
 800a94c:	4419      	add	r1, r3
 800a94e:	9106      	str	r1, [sp, #24]
 800a950:	9905      	ldr	r1, [sp, #20]
 800a952:	441f      	add	r7, r3
 800a954:	4419      	add	r1, r3
 800a956:	9b02      	ldr	r3, [sp, #8]
 800a958:	9105      	str	r1, [sp, #20]
 800a95a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a95e:	9302      	str	r3, [sp, #8]
 800a960:	9904      	ldr	r1, [sp, #16]
 800a962:	9805      	ldr	r0, [sp, #20]
 800a964:	ed91 4a00 	vldr	s8, [r1]
 800a968:	edd0 6a00 	vldr	s13, [r0]
 800a96c:	9b06      	ldr	r3, [sp, #24]
 800a96e:	ed97 3a00 	vldr	s6, [r7]
 800a972:	edd3 7a00 	vldr	s15, [r3]
 800a976:	edd0 4a01 	vldr	s9, [r0, #4]
 800a97a:	edd1 3a01 	vldr	s7, [r1, #4]
 800a97e:	ed97 2a01 	vldr	s4, [r7, #4]
 800a982:	ed93 7a01 	vldr	s14, [r3, #4]
 800a986:	9a03      	ldr	r2, [sp, #12]
 800a988:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 800a98c:	ee34 6a26 	vadd.f32	s12, s8, s13
 800a990:	ee73 5aa4 	vadd.f32	s11, s7, s9
 800a994:	ee37 5a86 	vadd.f32	s10, s15, s12
 800a998:	ee73 3ae4 	vsub.f32	s7, s7, s9
 800a99c:	ee35 5a03 	vadd.f32	s10, s10, s6
 800a9a0:	ee74 6a66 	vsub.f32	s13, s8, s13
 800a9a4:	ed81 5a00 	vstr	s10, [r1]
 800a9a8:	ed93 5a01 	vldr	s10, [r3, #4]
 800a9ac:	edd7 4a01 	vldr	s9, [r7, #4]
 800a9b0:	ee35 5a85 	vadd.f32	s10, s11, s10
 800a9b4:	ee37 4a26 	vadd.f32	s8, s14, s13
 800a9b8:	ee35 5a24 	vadd.f32	s10, s10, s9
 800a9bc:	ee73 4ae7 	vsub.f32	s9, s7, s15
 800a9c0:	ed81 5a01 	vstr	s10, [r1, #4]
 800a9c4:	edd2 1a00 	vldr	s3, [r2]
 800a9c8:	edd2 2a01 	vldr	s5, [r2, #4]
 800a9cc:	ee34 5a83 	vadd.f32	s10, s9, s6
 800a9d0:	ee34 4a42 	vsub.f32	s8, s8, s4
 800a9d4:	ee36 6a67 	vsub.f32	s12, s12, s15
 800a9d8:	ee64 4a21 	vmul.f32	s9, s8, s3
 800a9dc:	ee24 4a22 	vmul.f32	s8, s8, s5
 800a9e0:	ee65 2a22 	vmul.f32	s5, s10, s5
 800a9e4:	ee25 5a21 	vmul.f32	s10, s10, s3
 800a9e8:	ee74 2aa2 	vadd.f32	s5, s9, s5
 800a9ec:	ee35 5a44 	vsub.f32	s10, s10, s8
 800a9f0:	edc3 2a00 	vstr	s5, [r3]
 800a9f4:	ed83 5a01 	vstr	s10, [r3, #4]
 800a9f8:	ee75 5ac7 	vsub.f32	s11, s11, s14
 800a9fc:	9b00      	ldr	r3, [sp, #0]
 800a9fe:	ee36 6a43 	vsub.f32	s12, s12, s6
 800aa02:	ed93 4a01 	vldr	s8, [r3, #4]
 800aa06:	ed93 5a00 	vldr	s10, [r3]
 800aa0a:	9b02      	ldr	r3, [sp, #8]
 800aa0c:	ee75 5ac2 	vsub.f32	s11, s11, s4
 800aa10:	ee66 4a05 	vmul.f32	s9, s12, s10
 800aa14:	ee25 5a85 	vmul.f32	s10, s11, s10
 800aa18:	ee26 6a04 	vmul.f32	s12, s12, s8
 800aa1c:	ee65 5a84 	vmul.f32	s11, s11, s8
 800aa20:	ee35 6a46 	vsub.f32	s12, s10, s12
 800aa24:	ee74 5aa5 	vadd.f32	s11, s9, s11
 800aa28:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800aa2c:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800aa30:	ed80 6a01 	vstr	s12, [r0, #4]
 800aa34:	edc0 5a00 	vstr	s11, [r0]
 800aa38:	edd3 5a01 	vldr	s11, [r3, #4]
 800aa3c:	edd3 6a00 	vldr	s13, [r3]
 800aa40:	ee37 7a02 	vadd.f32	s14, s14, s4
 800aa44:	ee77 7ac3 	vsub.f32	s15, s15, s6
 800aa48:	ee27 6a26 	vmul.f32	s12, s14, s13
 800aa4c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800aa50:	ee27 7a25 	vmul.f32	s14, s14, s11
 800aa54:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800aa58:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800aa5c:	ee76 7a27 	vadd.f32	s15, s12, s15
 800aa60:	ed87 7a01 	vstr	s14, [r7, #4]
 800aa64:	edc7 7a00 	vstr	s15, [r7]
 800aa68:	e9dd 500a 	ldrd	r5, r0, [sp, #40]	; 0x28
 800aa6c:	4621      	mov	r1, r4
 800aa6e:	686a      	ldr	r2, [r5, #4]
 800aa70:	2304      	movs	r3, #4
 800aa72:	f000 f8af 	bl	800abd4 <arm_radix8_butterfly_f32>
 800aa76:	4630      	mov	r0, r6
 800aa78:	4621      	mov	r1, r4
 800aa7a:	686a      	ldr	r2, [r5, #4]
 800aa7c:	2304      	movs	r3, #4
 800aa7e:	f000 f8a9 	bl	800abd4 <arm_radix8_butterfly_f32>
 800aa82:	9808      	ldr	r0, [sp, #32]
 800aa84:	686a      	ldr	r2, [r5, #4]
 800aa86:	4621      	mov	r1, r4
 800aa88:	2304      	movs	r3, #4
 800aa8a:	f000 f8a3 	bl	800abd4 <arm_radix8_butterfly_f32>
 800aa8e:	686a      	ldr	r2, [r5, #4]
 800aa90:	9801      	ldr	r0, [sp, #4]
 800aa92:	4621      	mov	r1, r4
 800aa94:	2304      	movs	r3, #4
 800aa96:	b00d      	add	sp, #52	; 0x34
 800aa98:	ecbd 8b0a 	vpop	{d8-d12}
 800aa9c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aaa0:	f000 b898 	b.w	800abd4 <arm_radix8_butterfly_f32>

0800aaa4 <arm_cfft_f32>:
 800aaa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aaa8:	2a01      	cmp	r2, #1
 800aaaa:	4606      	mov	r6, r0
 800aaac:	4617      	mov	r7, r2
 800aaae:	460c      	mov	r4, r1
 800aab0:	4698      	mov	r8, r3
 800aab2:	8805      	ldrh	r5, [r0, #0]
 800aab4:	d056      	beq.n	800ab64 <arm_cfft_f32+0xc0>
 800aab6:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800aaba:	d063      	beq.n	800ab84 <arm_cfft_f32+0xe0>
 800aabc:	d916      	bls.n	800aaec <arm_cfft_f32+0x48>
 800aabe:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 800aac2:	d01a      	beq.n	800aafa <arm_cfft_f32+0x56>
 800aac4:	d947      	bls.n	800ab56 <arm_cfft_f32+0xb2>
 800aac6:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 800aaca:	d05b      	beq.n	800ab84 <arm_cfft_f32+0xe0>
 800aacc:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 800aad0:	d105      	bne.n	800aade <arm_cfft_f32+0x3a>
 800aad2:	2301      	movs	r3, #1
 800aad4:	6872      	ldr	r2, [r6, #4]
 800aad6:	4629      	mov	r1, r5
 800aad8:	4620      	mov	r0, r4
 800aada:	f000 f87b 	bl	800abd4 <arm_radix8_butterfly_f32>
 800aade:	f1b8 0f00 	cmp.w	r8, #0
 800aae2:	d111      	bne.n	800ab08 <arm_cfft_f32+0x64>
 800aae4:	2f01      	cmp	r7, #1
 800aae6:	d016      	beq.n	800ab16 <arm_cfft_f32+0x72>
 800aae8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aaec:	2d20      	cmp	r5, #32
 800aaee:	d049      	beq.n	800ab84 <arm_cfft_f32+0xe0>
 800aaf0:	d935      	bls.n	800ab5e <arm_cfft_f32+0xba>
 800aaf2:	2d40      	cmp	r5, #64	; 0x40
 800aaf4:	d0ed      	beq.n	800aad2 <arm_cfft_f32+0x2e>
 800aaf6:	2d80      	cmp	r5, #128	; 0x80
 800aaf8:	d1f1      	bne.n	800aade <arm_cfft_f32+0x3a>
 800aafa:	4621      	mov	r1, r4
 800aafc:	4630      	mov	r0, r6
 800aafe:	f7ff fcab 	bl	800a458 <arm_cfft_radix8by2_f32>
 800ab02:	f1b8 0f00 	cmp.w	r8, #0
 800ab06:	d0ed      	beq.n	800aae4 <arm_cfft_f32+0x40>
 800ab08:	68b2      	ldr	r2, [r6, #8]
 800ab0a:	89b1      	ldrh	r1, [r6, #12]
 800ab0c:	4620      	mov	r0, r4
 800ab0e:	f000 f841 	bl	800ab94 <arm_bitreversal_32>
 800ab12:	2f01      	cmp	r7, #1
 800ab14:	d1e8      	bne.n	800aae8 <arm_cfft_f32+0x44>
 800ab16:	ee07 5a90 	vmov	s15, r5
 800ab1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab1e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ab22:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800ab26:	2d00      	cmp	r5, #0
 800ab28:	d0de      	beq.n	800aae8 <arm_cfft_f32+0x44>
 800ab2a:	f104 0108 	add.w	r1, r4, #8
 800ab2e:	2300      	movs	r3, #0
 800ab30:	3301      	adds	r3, #1
 800ab32:	429d      	cmp	r5, r3
 800ab34:	f101 0108 	add.w	r1, r1, #8
 800ab38:	ed11 7a04 	vldr	s14, [r1, #-16]
 800ab3c:	ed51 7a03 	vldr	s15, [r1, #-12]
 800ab40:	ee27 7a26 	vmul.f32	s14, s14, s13
 800ab44:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800ab48:	ed01 7a04 	vstr	s14, [r1, #-16]
 800ab4c:	ed41 7a03 	vstr	s15, [r1, #-12]
 800ab50:	d1ee      	bne.n	800ab30 <arm_cfft_f32+0x8c>
 800ab52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab56:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 800ab5a:	d0ba      	beq.n	800aad2 <arm_cfft_f32+0x2e>
 800ab5c:	e7bf      	b.n	800aade <arm_cfft_f32+0x3a>
 800ab5e:	2d10      	cmp	r5, #16
 800ab60:	d0cb      	beq.n	800aafa <arm_cfft_f32+0x56>
 800ab62:	e7bc      	b.n	800aade <arm_cfft_f32+0x3a>
 800ab64:	b19d      	cbz	r5, 800ab8e <arm_cfft_f32+0xea>
 800ab66:	f101 030c 	add.w	r3, r1, #12
 800ab6a:	2200      	movs	r2, #0
 800ab6c:	ed53 7a02 	vldr	s15, [r3, #-8]
 800ab70:	3201      	adds	r2, #1
 800ab72:	eef1 7a67 	vneg.f32	s15, s15
 800ab76:	4295      	cmp	r5, r2
 800ab78:	ed43 7a02 	vstr	s15, [r3, #-8]
 800ab7c:	f103 0308 	add.w	r3, r3, #8
 800ab80:	d1f4      	bne.n	800ab6c <arm_cfft_f32+0xc8>
 800ab82:	e798      	b.n	800aab6 <arm_cfft_f32+0x12>
 800ab84:	4621      	mov	r1, r4
 800ab86:	4630      	mov	r0, r6
 800ab88:	f7ff fd36 	bl	800a5f8 <arm_cfft_radix8by4_f32>
 800ab8c:	e7a7      	b.n	800aade <arm_cfft_f32+0x3a>
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d0aa      	beq.n	800aae8 <arm_cfft_f32+0x44>
 800ab92:	e7b9      	b.n	800ab08 <arm_cfft_f32+0x64>

0800ab94 <arm_bitreversal_32>:
 800ab94:	b1e9      	cbz	r1, 800abd2 <arm_bitreversal_32+0x3e>
 800ab96:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab98:	2500      	movs	r5, #0
 800ab9a:	f102 0e02 	add.w	lr, r2, #2
 800ab9e:	f83e 4015 	ldrh.w	r4, [lr, r5, lsl #1]
 800aba2:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 800aba6:	08a4      	lsrs	r4, r4, #2
 800aba8:	089b      	lsrs	r3, r3, #2
 800abaa:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
 800abae:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
 800abb2:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
 800abb6:	00a6      	lsls	r6, r4, #2
 800abb8:	009b      	lsls	r3, r3, #2
 800abba:	f840 c024 	str.w	ip, [r0, r4, lsl #2]
 800abbe:	3304      	adds	r3, #4
 800abc0:	1d34      	adds	r4, r6, #4
 800abc2:	3502      	adds	r5, #2
 800abc4:	58c6      	ldr	r6, [r0, r3]
 800abc6:	5907      	ldr	r7, [r0, r4]
 800abc8:	50c7      	str	r7, [r0, r3]
 800abca:	428d      	cmp	r5, r1
 800abcc:	5106      	str	r6, [r0, r4]
 800abce:	d3e6      	bcc.n	800ab9e <arm_bitreversal_32+0xa>
 800abd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800abd2:	4770      	bx	lr

0800abd4 <arm_radix8_butterfly_f32>:
 800abd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abd8:	ed2d 8b10 	vpush	{d8-d15}
 800abdc:	b095      	sub	sp, #84	; 0x54
 800abde:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 800abe2:	4603      	mov	r3, r0
 800abe4:	3304      	adds	r3, #4
 800abe6:	ed9f bab9 	vldr	s22, [pc, #740]	; 800aecc <arm_radix8_butterfly_f32+0x2f8>
 800abea:	9012      	str	r0, [sp, #72]	; 0x48
 800abec:	468b      	mov	fp, r1
 800abee:	9313      	str	r3, [sp, #76]	; 0x4c
 800abf0:	4689      	mov	r9, r1
 800abf2:	ea4f 06db 	mov.w	r6, fp, lsr #3
 800abf6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800abf8:	960f      	str	r6, [sp, #60]	; 0x3c
 800abfa:	ea4f 1846 	mov.w	r8, r6, lsl #5
 800abfe:	ea4f 0ec6 	mov.w	lr, r6, lsl #3
 800ac02:	eb03 0508 	add.w	r5, r3, r8
 800ac06:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 800ac0a:	eb05 040e 	add.w	r4, r5, lr
 800ac0e:	0137      	lsls	r7, r6, #4
 800ac10:	eba6 030a 	sub.w	r3, r6, sl
 800ac14:	eb04 000e 	add.w	r0, r4, lr
 800ac18:	44b2      	add	sl, r6
 800ac1a:	1d3a      	adds	r2, r7, #4
 800ac1c:	9702      	str	r7, [sp, #8]
 800ac1e:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800ac22:	ea4f 07ca 	mov.w	r7, sl, lsl #3
 800ac26:	ebae 0c06 	sub.w	ip, lr, r6
 800ac2a:	9703      	str	r7, [sp, #12]
 800ac2c:	eb03 0708 	add.w	r7, r3, r8
 800ac30:	9701      	str	r7, [sp, #4]
 800ac32:	ea4f 07cc 	mov.w	r7, ip, lsl #3
 800ac36:	9706      	str	r7, [sp, #24]
 800ac38:	9f12      	ldr	r7, [sp, #72]	; 0x48
 800ac3a:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 800ac3e:	f10e 0104 	add.w	r1, lr, #4
 800ac42:	4439      	add	r1, r7
 800ac44:	443a      	add	r2, r7
 800ac46:	0137      	lsls	r7, r6, #4
 800ac48:	00f6      	lsls	r6, r6, #3
 800ac4a:	9704      	str	r7, [sp, #16]
 800ac4c:	9605      	str	r6, [sp, #20]
 800ac4e:	9f01      	ldr	r7, [sp, #4]
 800ac50:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 800ac52:	ea4f 0acb 	mov.w	sl, fp, lsl #3
 800ac56:	f04f 0c00 	mov.w	ip, #0
 800ac5a:	edd4 6a00 	vldr	s13, [r4]
 800ac5e:	edd7 1a00 	vldr	s3, [r7]
 800ac62:	ed16 aa01 	vldr	s20, [r6, #-4]
 800ac66:	edd5 5a00 	vldr	s11, [r5]
 800ac6a:	ed52 9a01 	vldr	s19, [r2, #-4]
 800ac6e:	ed90 6a00 	vldr	s12, [r0]
 800ac72:	ed51 7a01 	vldr	s15, [r1, #-4]
 800ac76:	ed93 3a00 	vldr	s6, [r3]
 800ac7a:	ee39 0a86 	vadd.f32	s0, s19, s12
 800ac7e:	ee33 2a21 	vadd.f32	s4, s6, s3
 800ac82:	ee37 5aa6 	vadd.f32	s10, s15, s13
 800ac86:	ee7a 4a25 	vadd.f32	s9, s20, s11
 800ac8a:	ee35 7a02 	vadd.f32	s14, s10, s4
 800ac8e:	ee34 4a80 	vadd.f32	s8, s9, s0
 800ac92:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800ac96:	ee74 6a07 	vadd.f32	s13, s8, s14
 800ac9a:	ee34 4a47 	vsub.f32	s8, s8, s14
 800ac9e:	ed46 6a01 	vstr	s13, [r6, #-4]
 800aca2:	ed85 4a00 	vstr	s8, [r5]
 800aca6:	edd1 6a00 	vldr	s13, [r1]
 800acaa:	ed94 9a01 	vldr	s18, [r4, #4]
 800acae:	edd3 2a01 	vldr	s5, [r3, #4]
 800acb2:	edd7 8a01 	vldr	s17, [r7, #4]
 800acb6:	edd6 0a00 	vldr	s1, [r6]
 800acba:	edd5 3a01 	vldr	s7, [r5, #4]
 800acbe:	ed90 8a01 	vldr	s16, [r0, #4]
 800acc2:	ed92 7a00 	vldr	s14, [r2]
 800acc6:	ee33 3a61 	vsub.f32	s6, s6, s3
 800acca:	ee36 4ac9 	vsub.f32	s8, s13, s18
 800acce:	ee72 aae8 	vsub.f32	s21, s5, s17
 800acd2:	ee77 1ac3 	vsub.f32	s3, s15, s6
 800acd6:	ee34 1a2a 	vadd.f32	s2, s8, s21
 800acda:	ee77 7a83 	vadd.f32	s15, s15, s6
 800acde:	ee34 4a6a 	vsub.f32	s8, s8, s21
 800ace2:	ee30 3aa3 	vadd.f32	s6, s1, s7
 800ace6:	ee39 6ac6 	vsub.f32	s12, s19, s12
 800acea:	ee70 3ae3 	vsub.f32	s7, s1, s7
 800acee:	ee72 2aa8 	vadd.f32	s5, s5, s17
 800acf2:	ee77 0a08 	vadd.f32	s1, s14, s16
 800acf6:	ee21 1a0b 	vmul.f32	s2, s2, s22
 800acfa:	ee37 7a48 	vsub.f32	s14, s14, s16
 800acfe:	ee61 1a8b 	vmul.f32	s3, s3, s22
 800ad02:	ee7a 5a65 	vsub.f32	s11, s20, s11
 800ad06:	ee76 6a89 	vadd.f32	s13, s13, s18
 800ad0a:	ee24 4a0b 	vmul.f32	s8, s8, s22
 800ad0e:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800ad12:	ee74 4ac0 	vsub.f32	s9, s9, s0
 800ad16:	ee35 5a42 	vsub.f32	s10, s10, s4
 800ad1a:	ee36 0aa2 	vadd.f32	s0, s13, s5
 800ad1e:	ee33 2a20 	vadd.f32	s4, s6, s1
 800ad22:	ee76 6ae2 	vsub.f32	s13, s13, s5
 800ad26:	ee33 3a60 	vsub.f32	s6, s6, s1
 800ad2a:	ee75 2aa1 	vadd.f32	s5, s11, s3
 800ad2e:	ee77 0a01 	vadd.f32	s1, s14, s2
 800ad32:	ee75 5ae1 	vsub.f32	s11, s11, s3
 800ad36:	ee37 7a41 	vsub.f32	s14, s14, s2
 800ad3a:	ee73 1a84 	vadd.f32	s3, s7, s8
 800ad3e:	ee33 4ac4 	vsub.f32	s8, s7, s8
 800ad42:	ee76 3a27 	vadd.f32	s7, s12, s15
 800ad46:	ee76 7a67 	vsub.f32	s15, s12, s15
 800ad4a:	ee32 8a00 	vadd.f32	s16, s4, s0
 800ad4e:	ee33 1a45 	vsub.f32	s2, s6, s10
 800ad52:	ee32 2a40 	vsub.f32	s4, s4, s0
 800ad56:	ee35 5a03 	vadd.f32	s10, s10, s6
 800ad5a:	ee34 0aa6 	vadd.f32	s0, s9, s13
 800ad5e:	ee32 3aa0 	vadd.f32	s6, s5, s1
 800ad62:	ee74 6ae6 	vsub.f32	s13, s9, s13
 800ad66:	ee34 6a67 	vsub.f32	s12, s8, s15
 800ad6a:	ee75 4a87 	vadd.f32	s9, s11, s14
 800ad6e:	ee72 2ae0 	vsub.f32	s5, s5, s1
 800ad72:	ee35 7ac7 	vsub.f32	s14, s11, s14
 800ad76:	ee77 7a84 	vadd.f32	s15, s15, s8
 800ad7a:	ee71 5ae3 	vsub.f32	s11, s3, s7
 800ad7e:	44dc      	add	ip, fp
 800ad80:	ee73 3aa1 	vadd.f32	s7, s7, s3
 800ad84:	45e1      	cmp	r9, ip
 800ad86:	ed86 8a00 	vstr	s16, [r6]
 800ad8a:	ed85 2a01 	vstr	s4, [r5, #4]
 800ad8e:	4456      	add	r6, sl
 800ad90:	ed02 0a01 	vstr	s0, [r2, #-4]
 800ad94:	4455      	add	r5, sl
 800ad96:	edc0 6a00 	vstr	s13, [r0]
 800ad9a:	ed82 1a00 	vstr	s2, [r2]
 800ad9e:	ed80 5a01 	vstr	s10, [r0, #4]
 800ada2:	4452      	add	r2, sl
 800ada4:	ed01 3a01 	vstr	s6, [r1, #-4]
 800ada8:	4450      	add	r0, sl
 800adaa:	edc7 2a00 	vstr	s5, [r7]
 800adae:	edc4 4a00 	vstr	s9, [r4]
 800adb2:	ed83 7a00 	vstr	s14, [r3]
 800adb6:	edc1 5a00 	vstr	s11, [r1]
 800adba:	edc7 3a01 	vstr	s7, [r7, #4]
 800adbe:	4451      	add	r1, sl
 800adc0:	ed84 6a01 	vstr	s12, [r4, #4]
 800adc4:	4457      	add	r7, sl
 800adc6:	edc3 7a01 	vstr	s15, [r3, #4]
 800adca:	4454      	add	r4, sl
 800adcc:	4453      	add	r3, sl
 800adce:	f63f af44 	bhi.w	800ac5a <arm_radix8_butterfly_f32+0x86>
 800add2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800add4:	2b07      	cmp	r3, #7
 800add6:	f240 81b7 	bls.w	800b148 <arm_radix8_butterfly_f32+0x574>
 800adda:	9b06      	ldr	r3, [sp, #24]
 800addc:	9903      	ldr	r1, [sp, #12]
 800adde:	9812      	ldr	r0, [sp, #72]	; 0x48
 800ade0:	9e05      	ldr	r6, [sp, #20]
 800ade2:	9a04      	ldr	r2, [sp, #16]
 800ade4:	f103 0c08 	add.w	ip, r3, #8
 800ade8:	9b02      	ldr	r3, [sp, #8]
 800adea:	3108      	adds	r1, #8
 800adec:	f108 0808 	add.w	r8, r8, #8
 800adf0:	1841      	adds	r1, r0, r1
 800adf2:	3608      	adds	r6, #8
 800adf4:	330c      	adds	r3, #12
 800adf6:	4604      	mov	r4, r0
 800adf8:	4444      	add	r4, r8
 800adfa:	18c3      	adds	r3, r0, r3
 800adfc:	9109      	str	r1, [sp, #36]	; 0x24
 800adfe:	1981      	adds	r1, r0, r6
 800ae00:	f10e 0e08 	add.w	lr, lr, #8
 800ae04:	3208      	adds	r2, #8
 800ae06:	940b      	str	r4, [sp, #44]	; 0x2c
 800ae08:	9107      	str	r1, [sp, #28]
 800ae0a:	4604      	mov	r4, r0
 800ae0c:	4601      	mov	r1, r0
 800ae0e:	9304      	str	r3, [sp, #16]
 800ae10:	f100 030c 	add.w	r3, r0, #12
 800ae14:	4474      	add	r4, lr
 800ae16:	f04f 0801 	mov.w	r8, #1
 800ae1a:	1882      	adds	r2, r0, r2
 800ae1c:	4461      	add	r1, ip
 800ae1e:	9305      	str	r3, [sp, #20]
 800ae20:	464b      	mov	r3, r9
 800ae22:	940a      	str	r4, [sp, #40]	; 0x28
 800ae24:	46c1      	mov	r9, r8
 800ae26:	9208      	str	r2, [sp, #32]
 800ae28:	46d8      	mov	r8, fp
 800ae2a:	9106      	str	r1, [sp, #24]
 800ae2c:	f04f 0e00 	mov.w	lr, #0
 800ae30:	469b      	mov	fp, r3
 800ae32:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ae34:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ae36:	449e      	add	lr, r3
 800ae38:	ea4f 03ce 	mov.w	r3, lr, lsl #3
 800ae3c:	441a      	add	r2, r3
 800ae3e:	920e      	str	r2, [sp, #56]	; 0x38
 800ae40:	441a      	add	r2, r3
 800ae42:	18d4      	adds	r4, r2, r3
 800ae44:	18e5      	adds	r5, r4, r3
 800ae46:	18ee      	adds	r6, r5, r3
 800ae48:	18f7      	adds	r7, r6, r3
 800ae4a:	eb07 0c03 	add.w	ip, r7, r3
 800ae4e:	920d      	str	r2, [sp, #52]	; 0x34
 800ae50:	ebae 028e 	sub.w	r2, lr, lr, lsl #2
 800ae54:	eb0c 1102 	add.w	r1, ip, r2, lsl #4
 800ae58:	910c      	str	r1, [sp, #48]	; 0x30
 800ae5a:	4419      	add	r1, r3
 800ae5c:	9103      	str	r1, [sp, #12]
 800ae5e:	4419      	add	r1, r3
 800ae60:	18ca      	adds	r2, r1, r3
 800ae62:	9202      	str	r2, [sp, #8]
 800ae64:	441a      	add	r2, r3
 800ae66:	18d0      	adds	r0, r2, r3
 800ae68:	ed92 ea01 	vldr	s28, [r2, #4]
 800ae6c:	9a02      	ldr	r2, [sp, #8]
 800ae6e:	edd4 7a00 	vldr	s15, [r4]
 800ae72:	edd2 da01 	vldr	s27, [r2, #4]
 800ae76:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ae78:	ed91 da01 	vldr	s26, [r1, #4]
 800ae7c:	ed92 ca01 	vldr	s24, [r2, #4]
 800ae80:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ae82:	9903      	ldr	r1, [sp, #12]
 800ae84:	edcd 7a03 	vstr	s15, [sp, #12]
 800ae88:	edd2 7a00 	vldr	s15, [r2]
 800ae8c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ae8e:	edcd 7a02 	vstr	s15, [sp, #8]
 800ae92:	edd2 7a00 	vldr	s15, [r2]
 800ae96:	edd0 ea01 	vldr	s29, [r0, #4]
 800ae9a:	edd1 ca01 	vldr	s25, [r1, #4]
 800ae9e:	eddc ba00 	vldr	s23, [ip]
 800aea2:	edd7 aa00 	vldr	s21, [r7]
 800aea6:	ed96 aa00 	vldr	s20, [r6]
 800aeaa:	edd5 9a00 	vldr	s19, [r5]
 800aeae:	edcd 7a01 	vstr	s15, [sp, #4]
 800aeb2:	4403      	add	r3, r0
 800aeb4:	ed93 fa01 	vldr	s30, [r3, #4]
 800aeb8:	e9dd 7604 	ldrd	r7, r6, [sp, #16]
 800aebc:	e9dd 5406 	ldrd	r5, r4, [sp, #24]
 800aec0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800aec4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800aec8:	46cc      	mov	ip, r9
 800aeca:	e001      	b.n	800aed0 <arm_radix8_butterfly_f32+0x2fc>
 800aecc:	3f3504f3 	.word	0x3f3504f3
 800aed0:	ed91 6a00 	vldr	s12, [r1]
 800aed4:	ed93 5a00 	vldr	s10, [r3]
 800aed8:	edd0 fa00 	vldr	s31, [r0]
 800aedc:	edd4 7a00 	vldr	s15, [r4]
 800aee0:	ed95 7a00 	vldr	s14, [r5]
 800aee4:	ed56 3a01 	vldr	s7, [r6, #-4]
 800aee8:	ed17 3a01 	vldr	s6, [r7, #-4]
 800aeec:	ed92 2a00 	vldr	s4, [r2]
 800aef0:	ed96 0a00 	vldr	s0, [r6]
 800aef4:	ee33 8a85 	vadd.f32	s16, s7, s10
 800aef8:	ee32 1a06 	vadd.f32	s2, s4, s12
 800aefc:	ee33 4a2f 	vadd.f32	s8, s6, s31
 800af00:	ee77 4a87 	vadd.f32	s9, s15, s14
 800af04:	ee78 1a04 	vadd.f32	s3, s16, s8
 800af08:	ee71 6a24 	vadd.f32	s13, s2, s9
 800af0c:	ee32 2a46 	vsub.f32	s4, s4, s12
 800af10:	ee31 6aa6 	vadd.f32	s12, s3, s13
 800af14:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800af18:	ed06 6a01 	vstr	s12, [r6, #-4]
 800af1c:	edd4 8a01 	vldr	s17, [r4, #4]
 800af20:	ed92 9a01 	vldr	s18, [r2, #4]
 800af24:	edd7 0a00 	vldr	s1, [r7]
 800af28:	edd1 2a01 	vldr	s5, [r1, #4]
 800af2c:	ed95 7a01 	vldr	s14, [r5, #4]
 800af30:	ed93 6a01 	vldr	s12, [r3, #4]
 800af34:	edd0 5a01 	vldr	s11, [r0, #4]
 800af38:	ee73 3ac5 	vsub.f32	s7, s7, s10
 800af3c:	ee33 3a6f 	vsub.f32	s6, s6, s31
 800af40:	ee39 5a62 	vsub.f32	s10, s18, s5
 800af44:	ee78 fac7 	vsub.f32	s31, s17, s14
 800af48:	ee38 4a44 	vsub.f32	s8, s16, s8
 800af4c:	ee38 7a87 	vadd.f32	s14, s17, s14
 800af50:	ee30 8aa5 	vadd.f32	s16, s1, s11
 800af54:	ee79 2a22 	vadd.f32	s5, s18, s5
 800af58:	ee32 9a27 	vadd.f32	s18, s4, s15
 800af5c:	ee72 7a67 	vsub.f32	s15, s4, s15
 800af60:	ee30 2a06 	vadd.f32	s4, s0, s12
 800af64:	ee75 8a6f 	vsub.f32	s17, s10, s31
 800af68:	ee71 4a64 	vsub.f32	s9, s2, s9
 800af6c:	ee35 5a2f 	vadd.f32	s10, s10, s31
 800af70:	ee32 1a08 	vadd.f32	s2, s4, s16
 800af74:	ee72 fa87 	vadd.f32	s31, s5, s14
 800af78:	ee32 2a48 	vsub.f32	s4, s4, s16
 800af7c:	ee68 8a8b 	vmul.f32	s17, s17, s22
 800af80:	ee25 5a0b 	vmul.f32	s10, s10, s22
 800af84:	ee70 5ae5 	vsub.f32	s11, s1, s11
 800af88:	ee72 2ac7 	vsub.f32	s5, s5, s14
 800af8c:	ee71 6ae6 	vsub.f32	s13, s3, s13
 800af90:	ee29 9a0b 	vmul.f32	s18, s18, s22
 800af94:	ee71 1a6f 	vsub.f32	s3, s2, s31
 800af98:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800af9c:	ee30 6a46 	vsub.f32	s12, s0, s12
 800afa0:	ee74 0a22 	vadd.f32	s1, s8, s5
 800afa4:	ee36 0a28 	vadd.f32	s0, s12, s17
 800afa8:	ee74 2a62 	vsub.f32	s5, s8, s5
 800afac:	ee36 6a68 	vsub.f32	s12, s12, s17
 800afb0:	ee32 4a64 	vsub.f32	s8, s4, s9
 800afb4:	ee73 8a09 	vadd.f32	s17, s6, s18
 800afb8:	ee74 4a82 	vadd.f32	s9, s9, s4
 800afbc:	ee33 9a49 	vsub.f32	s18, s6, s18
 800afc0:	ee2d 2aa1 	vmul.f32	s4, s27, s3
 800afc4:	ee35 3a85 	vadd.f32	s6, s11, s10
 800afc8:	ee75 5ac5 	vsub.f32	s11, s11, s10
 800afcc:	ee33 5aa7 	vadd.f32	s10, s7, s15
 800afd0:	ee73 7ae7 	vsub.f32	s15, s7, s15
 800afd4:	ee69 3aa6 	vmul.f32	s7, s19, s13
 800afd8:	ee30 7a68 	vsub.f32	s14, s0, s17
 800afdc:	ee35 8a03 	vadd.f32	s16, s10, s6
 800afe0:	ee38 0a80 	vadd.f32	s0, s17, s0
 800afe4:	ee73 3a82 	vadd.f32	s7, s7, s4
 800afe8:	ee69 8aa1 	vmul.f32	s17, s19, s3
 800afec:	ed9d 2a01 	vldr	s4, [sp, #4]
 800aff0:	eddd 1a02 	vldr	s3, [sp, #8]
 800aff4:	ee35 5a43 	vsub.f32	s10, s10, s6
 800aff8:	ee71 fa2f 	vadd.f32	s31, s2, s31
 800affc:	ee37 3aa5 	vadd.f32	s6, s15, s11
 800b000:	ee21 1aa0 	vmul.f32	s2, s3, s1
 800b004:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800b008:	ee6d 6aa6 	vmul.f32	s13, s27, s13
 800b00c:	ee76 5a49 	vsub.f32	s11, s12, s18
 800b010:	ee6c 0aa0 	vmul.f32	s1, s25, s1
 800b014:	ee39 6a06 	vadd.f32	s12, s18, s12
 800b018:	ee2c 9a84 	vmul.f32	s18, s25, s8
 800b01c:	ee21 4a84 	vmul.f32	s8, s3, s8
 800b020:	ee6c 1a07 	vmul.f32	s3, s24, s14
 800b024:	ee22 7a07 	vmul.f32	s14, s4, s14
 800b028:	ee22 2a08 	vmul.f32	s4, s4, s16
 800b02c:	ee2c 8a08 	vmul.f32	s16, s24, s16
 800b030:	ee78 6ae6 	vsub.f32	s13, s17, s13
 800b034:	ee31 1a09 	vadd.f32	s2, s2, s18
 800b038:	ee6a 8aa2 	vmul.f32	s17, s21, s5
 800b03c:	ee2e 9aa4 	vmul.f32	s18, s29, s9
 800b040:	ee74 0a60 	vsub.f32	s1, s8, s1
 800b044:	ee37 7a48 	vsub.f32	s14, s14, s16
 800b048:	ee2f 4a00 	vmul.f32	s8, s30, s0
 800b04c:	ee2b 8a85 	vmul.f32	s16, s23, s10
 800b050:	ee72 1a21 	vadd.f32	s3, s4, s3
 800b054:	ee6a 4aa4 	vmul.f32	s9, s21, s9
 800b058:	ee38 2a89 	vadd.f32	s4, s17, s18
 800b05c:	ee2f 5a05 	vmul.f32	s10, s30, s10
 800b060:	ee38 8a04 	vadd.f32	s16, s16, s8
 800b064:	ee2e 9a25 	vmul.f32	s18, s28, s11
 800b068:	ee2a 4a25 	vmul.f32	s8, s20, s11
 800b06c:	ee6e 2aa2 	vmul.f32	s5, s29, s5
 800b070:	eddd 5a03 	vldr	s11, [sp, #12]
 800b074:	edc6 fa00 	vstr	s31, [r6]
 800b078:	ee2b 0a80 	vmul.f32	s0, s23, s0
 800b07c:	ee74 2ae2 	vsub.f32	s5, s9, s5
 800b080:	ee30 0a45 	vsub.f32	s0, s0, s10
 800b084:	ee6a 4a03 	vmul.f32	s9, s20, s6
 800b088:	ee65 8aa7 	vmul.f32	s17, s11, s15
 800b08c:	ee2d 5a06 	vmul.f32	s10, s26, s12
 800b090:	ee2e 3a03 	vmul.f32	s6, s28, s6
 800b094:	ee6d 7a27 	vmul.f32	s15, s26, s15
 800b098:	ee25 6a86 	vmul.f32	s12, s11, s12
 800b09c:	ee74 4a89 	vadd.f32	s9, s9, s18
 800b0a0:	ee34 3a43 	vsub.f32	s6, s8, s6
 800b0a4:	ee78 8a85 	vadd.f32	s17, s17, s10
 800b0a8:	ee36 6a67 	vsub.f32	s12, s12, s15
 800b0ac:	44c4      	add	ip, r8
 800b0ae:	45e3      	cmp	fp, ip
 800b0b0:	edc3 3a00 	vstr	s7, [r3]
 800b0b4:	edc3 6a01 	vstr	s13, [r3, #4]
 800b0b8:	4456      	add	r6, sl
 800b0ba:	ed07 1a01 	vstr	s2, [r7, #-4]
 800b0be:	edc7 0a00 	vstr	s1, [r7]
 800b0c2:	4453      	add	r3, sl
 800b0c4:	ed80 2a00 	vstr	s4, [r0]
 800b0c8:	edc0 2a01 	vstr	s5, [r0, #4]
 800b0cc:	4457      	add	r7, sl
 800b0ce:	edc2 1a00 	vstr	s3, [r2]
 800b0d2:	ed82 7a01 	vstr	s14, [r2, #4]
 800b0d6:	4450      	add	r0, sl
 800b0d8:	ed85 8a00 	vstr	s16, [r5]
 800b0dc:	ed85 0a01 	vstr	s0, [r5, #4]
 800b0e0:	4452      	add	r2, sl
 800b0e2:	edc1 4a00 	vstr	s9, [r1]
 800b0e6:	4455      	add	r5, sl
 800b0e8:	ed81 3a01 	vstr	s6, [r1, #4]
 800b0ec:	edc4 8a00 	vstr	s17, [r4]
 800b0f0:	ed84 6a01 	vstr	s12, [r4, #4]
 800b0f4:	4451      	add	r1, sl
 800b0f6:	4454      	add	r4, sl
 800b0f8:	f63f aeea 	bhi.w	800aed0 <arm_radix8_butterfly_f32+0x2fc>
 800b0fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b0fe:	3308      	adds	r3, #8
 800b100:	930b      	str	r3, [sp, #44]	; 0x2c
 800b102:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b104:	3308      	adds	r3, #8
 800b106:	930a      	str	r3, [sp, #40]	; 0x28
 800b108:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b10a:	3308      	adds	r3, #8
 800b10c:	9309      	str	r3, [sp, #36]	; 0x24
 800b10e:	9b08      	ldr	r3, [sp, #32]
 800b110:	3308      	adds	r3, #8
 800b112:	9308      	str	r3, [sp, #32]
 800b114:	9b07      	ldr	r3, [sp, #28]
 800b116:	3308      	adds	r3, #8
 800b118:	9307      	str	r3, [sp, #28]
 800b11a:	9b06      	ldr	r3, [sp, #24]
 800b11c:	3308      	adds	r3, #8
 800b11e:	9306      	str	r3, [sp, #24]
 800b120:	9b05      	ldr	r3, [sp, #20]
 800b122:	3308      	adds	r3, #8
 800b124:	9305      	str	r3, [sp, #20]
 800b126:	9b04      	ldr	r3, [sp, #16]
 800b128:	3308      	adds	r3, #8
 800b12a:	9304      	str	r3, [sp, #16]
 800b12c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b12e:	f109 0901 	add.w	r9, r9, #1
 800b132:	454b      	cmp	r3, r9
 800b134:	f47f ae7d 	bne.w	800ae32 <arm_radix8_butterfly_f32+0x25e>
 800b138:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b13a:	00db      	lsls	r3, r3, #3
 800b13c:	b29b      	uxth	r3, r3
 800b13e:	46d9      	mov	r9, fp
 800b140:	9310      	str	r3, [sp, #64]	; 0x40
 800b142:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
 800b146:	e554      	b.n	800abf2 <arm_radix8_butterfly_f32+0x1e>
 800b148:	b015      	add	sp, #84	; 0x54
 800b14a:	ecbd 8b10 	vpop	{d8-d15}
 800b14e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b152:	bf00      	nop

0800b154 <malloc>:
 800b154:	4b02      	ldr	r3, [pc, #8]	; (800b160 <malloc+0xc>)
 800b156:	4601      	mov	r1, r0
 800b158:	6818      	ldr	r0, [r3, #0]
 800b15a:	f000 b823 	b.w	800b1a4 <_malloc_r>
 800b15e:	bf00      	nop
 800b160:	20000078 	.word	0x20000078

0800b164 <sbrk_aligned>:
 800b164:	b570      	push	{r4, r5, r6, lr}
 800b166:	4e0e      	ldr	r6, [pc, #56]	; (800b1a0 <sbrk_aligned+0x3c>)
 800b168:	460c      	mov	r4, r1
 800b16a:	6831      	ldr	r1, [r6, #0]
 800b16c:	4605      	mov	r5, r0
 800b16e:	b911      	cbnz	r1, 800b176 <sbrk_aligned+0x12>
 800b170:	f001 f81e 	bl	800c1b0 <_sbrk_r>
 800b174:	6030      	str	r0, [r6, #0]
 800b176:	4621      	mov	r1, r4
 800b178:	4628      	mov	r0, r5
 800b17a:	f001 f819 	bl	800c1b0 <_sbrk_r>
 800b17e:	1c43      	adds	r3, r0, #1
 800b180:	d00a      	beq.n	800b198 <sbrk_aligned+0x34>
 800b182:	1cc4      	adds	r4, r0, #3
 800b184:	f024 0403 	bic.w	r4, r4, #3
 800b188:	42a0      	cmp	r0, r4
 800b18a:	d007      	beq.n	800b19c <sbrk_aligned+0x38>
 800b18c:	1a21      	subs	r1, r4, r0
 800b18e:	4628      	mov	r0, r5
 800b190:	f001 f80e 	bl	800c1b0 <_sbrk_r>
 800b194:	3001      	adds	r0, #1
 800b196:	d101      	bne.n	800b19c <sbrk_aligned+0x38>
 800b198:	f04f 34ff 	mov.w	r4, #4294967295
 800b19c:	4620      	mov	r0, r4
 800b19e:	bd70      	pop	{r4, r5, r6, pc}
 800b1a0:	200295fc 	.word	0x200295fc

0800b1a4 <_malloc_r>:
 800b1a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b1a8:	1ccd      	adds	r5, r1, #3
 800b1aa:	f025 0503 	bic.w	r5, r5, #3
 800b1ae:	3508      	adds	r5, #8
 800b1b0:	2d0c      	cmp	r5, #12
 800b1b2:	bf38      	it	cc
 800b1b4:	250c      	movcc	r5, #12
 800b1b6:	2d00      	cmp	r5, #0
 800b1b8:	4607      	mov	r7, r0
 800b1ba:	db01      	blt.n	800b1c0 <_malloc_r+0x1c>
 800b1bc:	42a9      	cmp	r1, r5
 800b1be:	d905      	bls.n	800b1cc <_malloc_r+0x28>
 800b1c0:	230c      	movs	r3, #12
 800b1c2:	603b      	str	r3, [r7, #0]
 800b1c4:	2600      	movs	r6, #0
 800b1c6:	4630      	mov	r0, r6
 800b1c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b1cc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b2a0 <_malloc_r+0xfc>
 800b1d0:	f000 f868 	bl	800b2a4 <__malloc_lock>
 800b1d4:	f8d8 3000 	ldr.w	r3, [r8]
 800b1d8:	461c      	mov	r4, r3
 800b1da:	bb5c      	cbnz	r4, 800b234 <_malloc_r+0x90>
 800b1dc:	4629      	mov	r1, r5
 800b1de:	4638      	mov	r0, r7
 800b1e0:	f7ff ffc0 	bl	800b164 <sbrk_aligned>
 800b1e4:	1c43      	adds	r3, r0, #1
 800b1e6:	4604      	mov	r4, r0
 800b1e8:	d155      	bne.n	800b296 <_malloc_r+0xf2>
 800b1ea:	f8d8 4000 	ldr.w	r4, [r8]
 800b1ee:	4626      	mov	r6, r4
 800b1f0:	2e00      	cmp	r6, #0
 800b1f2:	d145      	bne.n	800b280 <_malloc_r+0xdc>
 800b1f4:	2c00      	cmp	r4, #0
 800b1f6:	d048      	beq.n	800b28a <_malloc_r+0xe6>
 800b1f8:	6823      	ldr	r3, [r4, #0]
 800b1fa:	4631      	mov	r1, r6
 800b1fc:	4638      	mov	r0, r7
 800b1fe:	eb04 0903 	add.w	r9, r4, r3
 800b202:	f000 ffd5 	bl	800c1b0 <_sbrk_r>
 800b206:	4581      	cmp	r9, r0
 800b208:	d13f      	bne.n	800b28a <_malloc_r+0xe6>
 800b20a:	6821      	ldr	r1, [r4, #0]
 800b20c:	1a6d      	subs	r5, r5, r1
 800b20e:	4629      	mov	r1, r5
 800b210:	4638      	mov	r0, r7
 800b212:	f7ff ffa7 	bl	800b164 <sbrk_aligned>
 800b216:	3001      	adds	r0, #1
 800b218:	d037      	beq.n	800b28a <_malloc_r+0xe6>
 800b21a:	6823      	ldr	r3, [r4, #0]
 800b21c:	442b      	add	r3, r5
 800b21e:	6023      	str	r3, [r4, #0]
 800b220:	f8d8 3000 	ldr.w	r3, [r8]
 800b224:	2b00      	cmp	r3, #0
 800b226:	d038      	beq.n	800b29a <_malloc_r+0xf6>
 800b228:	685a      	ldr	r2, [r3, #4]
 800b22a:	42a2      	cmp	r2, r4
 800b22c:	d12b      	bne.n	800b286 <_malloc_r+0xe2>
 800b22e:	2200      	movs	r2, #0
 800b230:	605a      	str	r2, [r3, #4]
 800b232:	e00f      	b.n	800b254 <_malloc_r+0xb0>
 800b234:	6822      	ldr	r2, [r4, #0]
 800b236:	1b52      	subs	r2, r2, r5
 800b238:	d41f      	bmi.n	800b27a <_malloc_r+0xd6>
 800b23a:	2a0b      	cmp	r2, #11
 800b23c:	d917      	bls.n	800b26e <_malloc_r+0xca>
 800b23e:	1961      	adds	r1, r4, r5
 800b240:	42a3      	cmp	r3, r4
 800b242:	6025      	str	r5, [r4, #0]
 800b244:	bf18      	it	ne
 800b246:	6059      	strne	r1, [r3, #4]
 800b248:	6863      	ldr	r3, [r4, #4]
 800b24a:	bf08      	it	eq
 800b24c:	f8c8 1000 	streq.w	r1, [r8]
 800b250:	5162      	str	r2, [r4, r5]
 800b252:	604b      	str	r3, [r1, #4]
 800b254:	4638      	mov	r0, r7
 800b256:	f104 060b 	add.w	r6, r4, #11
 800b25a:	f000 f829 	bl	800b2b0 <__malloc_unlock>
 800b25e:	f026 0607 	bic.w	r6, r6, #7
 800b262:	1d23      	adds	r3, r4, #4
 800b264:	1af2      	subs	r2, r6, r3
 800b266:	d0ae      	beq.n	800b1c6 <_malloc_r+0x22>
 800b268:	1b9b      	subs	r3, r3, r6
 800b26a:	50a3      	str	r3, [r4, r2]
 800b26c:	e7ab      	b.n	800b1c6 <_malloc_r+0x22>
 800b26e:	42a3      	cmp	r3, r4
 800b270:	6862      	ldr	r2, [r4, #4]
 800b272:	d1dd      	bne.n	800b230 <_malloc_r+0x8c>
 800b274:	f8c8 2000 	str.w	r2, [r8]
 800b278:	e7ec      	b.n	800b254 <_malloc_r+0xb0>
 800b27a:	4623      	mov	r3, r4
 800b27c:	6864      	ldr	r4, [r4, #4]
 800b27e:	e7ac      	b.n	800b1da <_malloc_r+0x36>
 800b280:	4634      	mov	r4, r6
 800b282:	6876      	ldr	r6, [r6, #4]
 800b284:	e7b4      	b.n	800b1f0 <_malloc_r+0x4c>
 800b286:	4613      	mov	r3, r2
 800b288:	e7cc      	b.n	800b224 <_malloc_r+0x80>
 800b28a:	230c      	movs	r3, #12
 800b28c:	603b      	str	r3, [r7, #0]
 800b28e:	4638      	mov	r0, r7
 800b290:	f000 f80e 	bl	800b2b0 <__malloc_unlock>
 800b294:	e797      	b.n	800b1c6 <_malloc_r+0x22>
 800b296:	6025      	str	r5, [r4, #0]
 800b298:	e7dc      	b.n	800b254 <_malloc_r+0xb0>
 800b29a:	605b      	str	r3, [r3, #4]
 800b29c:	deff      	udf	#255	; 0xff
 800b29e:	bf00      	nop
 800b2a0:	200295f8 	.word	0x200295f8

0800b2a4 <__malloc_lock>:
 800b2a4:	4801      	ldr	r0, [pc, #4]	; (800b2ac <__malloc_lock+0x8>)
 800b2a6:	f000 bfcf 	b.w	800c248 <__retarget_lock_acquire_recursive>
 800b2aa:	bf00      	nop
 800b2ac:	20029740 	.word	0x20029740

0800b2b0 <__malloc_unlock>:
 800b2b0:	4801      	ldr	r0, [pc, #4]	; (800b2b8 <__malloc_unlock+0x8>)
 800b2b2:	f000 bfca 	b.w	800c24a <__retarget_lock_release_recursive>
 800b2b6:	bf00      	nop
 800b2b8:	20029740 	.word	0x20029740

0800b2bc <__cvt>:
 800b2bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b2c0:	ec55 4b10 	vmov	r4, r5, d0
 800b2c4:	2d00      	cmp	r5, #0
 800b2c6:	460e      	mov	r6, r1
 800b2c8:	4619      	mov	r1, r3
 800b2ca:	462b      	mov	r3, r5
 800b2cc:	bfbb      	ittet	lt
 800b2ce:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b2d2:	461d      	movlt	r5, r3
 800b2d4:	2300      	movge	r3, #0
 800b2d6:	232d      	movlt	r3, #45	; 0x2d
 800b2d8:	700b      	strb	r3, [r1, #0]
 800b2da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b2dc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b2e0:	4691      	mov	r9, r2
 800b2e2:	f023 0820 	bic.w	r8, r3, #32
 800b2e6:	bfbc      	itt	lt
 800b2e8:	4622      	movlt	r2, r4
 800b2ea:	4614      	movlt	r4, r2
 800b2ec:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b2f0:	d005      	beq.n	800b2fe <__cvt+0x42>
 800b2f2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b2f6:	d100      	bne.n	800b2fa <__cvt+0x3e>
 800b2f8:	3601      	adds	r6, #1
 800b2fa:	2102      	movs	r1, #2
 800b2fc:	e000      	b.n	800b300 <__cvt+0x44>
 800b2fe:	2103      	movs	r1, #3
 800b300:	ab03      	add	r3, sp, #12
 800b302:	9301      	str	r3, [sp, #4]
 800b304:	ab02      	add	r3, sp, #8
 800b306:	9300      	str	r3, [sp, #0]
 800b308:	ec45 4b10 	vmov	d0, r4, r5
 800b30c:	4653      	mov	r3, sl
 800b30e:	4632      	mov	r2, r6
 800b310:	f001 f85a 	bl	800c3c8 <_dtoa_r>
 800b314:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b318:	4607      	mov	r7, r0
 800b31a:	d102      	bne.n	800b322 <__cvt+0x66>
 800b31c:	f019 0f01 	tst.w	r9, #1
 800b320:	d022      	beq.n	800b368 <__cvt+0xac>
 800b322:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b326:	eb07 0906 	add.w	r9, r7, r6
 800b32a:	d110      	bne.n	800b34e <__cvt+0x92>
 800b32c:	783b      	ldrb	r3, [r7, #0]
 800b32e:	2b30      	cmp	r3, #48	; 0x30
 800b330:	d10a      	bne.n	800b348 <__cvt+0x8c>
 800b332:	2200      	movs	r2, #0
 800b334:	2300      	movs	r3, #0
 800b336:	4620      	mov	r0, r4
 800b338:	4629      	mov	r1, r5
 800b33a:	f7f5 fbdd 	bl	8000af8 <__aeabi_dcmpeq>
 800b33e:	b918      	cbnz	r0, 800b348 <__cvt+0x8c>
 800b340:	f1c6 0601 	rsb	r6, r6, #1
 800b344:	f8ca 6000 	str.w	r6, [sl]
 800b348:	f8da 3000 	ldr.w	r3, [sl]
 800b34c:	4499      	add	r9, r3
 800b34e:	2200      	movs	r2, #0
 800b350:	2300      	movs	r3, #0
 800b352:	4620      	mov	r0, r4
 800b354:	4629      	mov	r1, r5
 800b356:	f7f5 fbcf 	bl	8000af8 <__aeabi_dcmpeq>
 800b35a:	b108      	cbz	r0, 800b360 <__cvt+0xa4>
 800b35c:	f8cd 900c 	str.w	r9, [sp, #12]
 800b360:	2230      	movs	r2, #48	; 0x30
 800b362:	9b03      	ldr	r3, [sp, #12]
 800b364:	454b      	cmp	r3, r9
 800b366:	d307      	bcc.n	800b378 <__cvt+0xbc>
 800b368:	9b03      	ldr	r3, [sp, #12]
 800b36a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b36c:	1bdb      	subs	r3, r3, r7
 800b36e:	4638      	mov	r0, r7
 800b370:	6013      	str	r3, [r2, #0]
 800b372:	b004      	add	sp, #16
 800b374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b378:	1c59      	adds	r1, r3, #1
 800b37a:	9103      	str	r1, [sp, #12]
 800b37c:	701a      	strb	r2, [r3, #0]
 800b37e:	e7f0      	b.n	800b362 <__cvt+0xa6>

0800b380 <__exponent>:
 800b380:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b382:	4603      	mov	r3, r0
 800b384:	2900      	cmp	r1, #0
 800b386:	bfb8      	it	lt
 800b388:	4249      	neglt	r1, r1
 800b38a:	f803 2b02 	strb.w	r2, [r3], #2
 800b38e:	bfb4      	ite	lt
 800b390:	222d      	movlt	r2, #45	; 0x2d
 800b392:	222b      	movge	r2, #43	; 0x2b
 800b394:	2909      	cmp	r1, #9
 800b396:	7042      	strb	r2, [r0, #1]
 800b398:	dd2a      	ble.n	800b3f0 <__exponent+0x70>
 800b39a:	f10d 0207 	add.w	r2, sp, #7
 800b39e:	4617      	mov	r7, r2
 800b3a0:	260a      	movs	r6, #10
 800b3a2:	4694      	mov	ip, r2
 800b3a4:	fb91 f5f6 	sdiv	r5, r1, r6
 800b3a8:	fb06 1415 	mls	r4, r6, r5, r1
 800b3ac:	3430      	adds	r4, #48	; 0x30
 800b3ae:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800b3b2:	460c      	mov	r4, r1
 800b3b4:	2c63      	cmp	r4, #99	; 0x63
 800b3b6:	f102 32ff 	add.w	r2, r2, #4294967295
 800b3ba:	4629      	mov	r1, r5
 800b3bc:	dcf1      	bgt.n	800b3a2 <__exponent+0x22>
 800b3be:	3130      	adds	r1, #48	; 0x30
 800b3c0:	f1ac 0402 	sub.w	r4, ip, #2
 800b3c4:	f802 1c01 	strb.w	r1, [r2, #-1]
 800b3c8:	1c41      	adds	r1, r0, #1
 800b3ca:	4622      	mov	r2, r4
 800b3cc:	42ba      	cmp	r2, r7
 800b3ce:	d30a      	bcc.n	800b3e6 <__exponent+0x66>
 800b3d0:	f10d 0209 	add.w	r2, sp, #9
 800b3d4:	eba2 020c 	sub.w	r2, r2, ip
 800b3d8:	42bc      	cmp	r4, r7
 800b3da:	bf88      	it	hi
 800b3dc:	2200      	movhi	r2, #0
 800b3de:	4413      	add	r3, r2
 800b3e0:	1a18      	subs	r0, r3, r0
 800b3e2:	b003      	add	sp, #12
 800b3e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b3e6:	f812 5b01 	ldrb.w	r5, [r2], #1
 800b3ea:	f801 5f01 	strb.w	r5, [r1, #1]!
 800b3ee:	e7ed      	b.n	800b3cc <__exponent+0x4c>
 800b3f0:	2330      	movs	r3, #48	; 0x30
 800b3f2:	3130      	adds	r1, #48	; 0x30
 800b3f4:	7083      	strb	r3, [r0, #2]
 800b3f6:	70c1      	strb	r1, [r0, #3]
 800b3f8:	1d03      	adds	r3, r0, #4
 800b3fa:	e7f1      	b.n	800b3e0 <__exponent+0x60>

0800b3fc <_printf_float>:
 800b3fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b400:	ed2d 8b02 	vpush	{d8}
 800b404:	b08d      	sub	sp, #52	; 0x34
 800b406:	460c      	mov	r4, r1
 800b408:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b40c:	4616      	mov	r6, r2
 800b40e:	461f      	mov	r7, r3
 800b410:	4605      	mov	r5, r0
 800b412:	f000 fe95 	bl	800c140 <_localeconv_r>
 800b416:	f8d0 a000 	ldr.w	sl, [r0]
 800b41a:	4650      	mov	r0, sl
 800b41c:	f7f4 ff40 	bl	80002a0 <strlen>
 800b420:	2300      	movs	r3, #0
 800b422:	930a      	str	r3, [sp, #40]	; 0x28
 800b424:	6823      	ldr	r3, [r4, #0]
 800b426:	9305      	str	r3, [sp, #20]
 800b428:	f8d8 3000 	ldr.w	r3, [r8]
 800b42c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b430:	3307      	adds	r3, #7
 800b432:	f023 0307 	bic.w	r3, r3, #7
 800b436:	f103 0208 	add.w	r2, r3, #8
 800b43a:	f8c8 2000 	str.w	r2, [r8]
 800b43e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b442:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b446:	9307      	str	r3, [sp, #28]
 800b448:	f8cd 8018 	str.w	r8, [sp, #24]
 800b44c:	ee08 0a10 	vmov	s16, r0
 800b450:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800b454:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b458:	4b9e      	ldr	r3, [pc, #632]	; (800b6d4 <_printf_float+0x2d8>)
 800b45a:	f04f 32ff 	mov.w	r2, #4294967295
 800b45e:	f7f5 fb7d 	bl	8000b5c <__aeabi_dcmpun>
 800b462:	bb88      	cbnz	r0, 800b4c8 <_printf_float+0xcc>
 800b464:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b468:	4b9a      	ldr	r3, [pc, #616]	; (800b6d4 <_printf_float+0x2d8>)
 800b46a:	f04f 32ff 	mov.w	r2, #4294967295
 800b46e:	f7f5 fb57 	bl	8000b20 <__aeabi_dcmple>
 800b472:	bb48      	cbnz	r0, 800b4c8 <_printf_float+0xcc>
 800b474:	2200      	movs	r2, #0
 800b476:	2300      	movs	r3, #0
 800b478:	4640      	mov	r0, r8
 800b47a:	4649      	mov	r1, r9
 800b47c:	f7f5 fb46 	bl	8000b0c <__aeabi_dcmplt>
 800b480:	b110      	cbz	r0, 800b488 <_printf_float+0x8c>
 800b482:	232d      	movs	r3, #45	; 0x2d
 800b484:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b488:	4a93      	ldr	r2, [pc, #588]	; (800b6d8 <_printf_float+0x2dc>)
 800b48a:	4b94      	ldr	r3, [pc, #592]	; (800b6dc <_printf_float+0x2e0>)
 800b48c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b490:	bf94      	ite	ls
 800b492:	4690      	movls	r8, r2
 800b494:	4698      	movhi	r8, r3
 800b496:	2303      	movs	r3, #3
 800b498:	6123      	str	r3, [r4, #16]
 800b49a:	9b05      	ldr	r3, [sp, #20]
 800b49c:	f023 0304 	bic.w	r3, r3, #4
 800b4a0:	6023      	str	r3, [r4, #0]
 800b4a2:	f04f 0900 	mov.w	r9, #0
 800b4a6:	9700      	str	r7, [sp, #0]
 800b4a8:	4633      	mov	r3, r6
 800b4aa:	aa0b      	add	r2, sp, #44	; 0x2c
 800b4ac:	4621      	mov	r1, r4
 800b4ae:	4628      	mov	r0, r5
 800b4b0:	f000 f9da 	bl	800b868 <_printf_common>
 800b4b4:	3001      	adds	r0, #1
 800b4b6:	f040 8090 	bne.w	800b5da <_printf_float+0x1de>
 800b4ba:	f04f 30ff 	mov.w	r0, #4294967295
 800b4be:	b00d      	add	sp, #52	; 0x34
 800b4c0:	ecbd 8b02 	vpop	{d8}
 800b4c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4c8:	4642      	mov	r2, r8
 800b4ca:	464b      	mov	r3, r9
 800b4cc:	4640      	mov	r0, r8
 800b4ce:	4649      	mov	r1, r9
 800b4d0:	f7f5 fb44 	bl	8000b5c <__aeabi_dcmpun>
 800b4d4:	b140      	cbz	r0, 800b4e8 <_printf_float+0xec>
 800b4d6:	464b      	mov	r3, r9
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	bfbc      	itt	lt
 800b4dc:	232d      	movlt	r3, #45	; 0x2d
 800b4de:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b4e2:	4a7f      	ldr	r2, [pc, #508]	; (800b6e0 <_printf_float+0x2e4>)
 800b4e4:	4b7f      	ldr	r3, [pc, #508]	; (800b6e4 <_printf_float+0x2e8>)
 800b4e6:	e7d1      	b.n	800b48c <_printf_float+0x90>
 800b4e8:	6863      	ldr	r3, [r4, #4]
 800b4ea:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b4ee:	9206      	str	r2, [sp, #24]
 800b4f0:	1c5a      	adds	r2, r3, #1
 800b4f2:	d13f      	bne.n	800b574 <_printf_float+0x178>
 800b4f4:	2306      	movs	r3, #6
 800b4f6:	6063      	str	r3, [r4, #4]
 800b4f8:	9b05      	ldr	r3, [sp, #20]
 800b4fa:	6861      	ldr	r1, [r4, #4]
 800b4fc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b500:	2300      	movs	r3, #0
 800b502:	9303      	str	r3, [sp, #12]
 800b504:	ab0a      	add	r3, sp, #40	; 0x28
 800b506:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b50a:	ab09      	add	r3, sp, #36	; 0x24
 800b50c:	ec49 8b10 	vmov	d0, r8, r9
 800b510:	9300      	str	r3, [sp, #0]
 800b512:	6022      	str	r2, [r4, #0]
 800b514:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b518:	4628      	mov	r0, r5
 800b51a:	f7ff fecf 	bl	800b2bc <__cvt>
 800b51e:	9b06      	ldr	r3, [sp, #24]
 800b520:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b522:	2b47      	cmp	r3, #71	; 0x47
 800b524:	4680      	mov	r8, r0
 800b526:	d108      	bne.n	800b53a <_printf_float+0x13e>
 800b528:	1cc8      	adds	r0, r1, #3
 800b52a:	db02      	blt.n	800b532 <_printf_float+0x136>
 800b52c:	6863      	ldr	r3, [r4, #4]
 800b52e:	4299      	cmp	r1, r3
 800b530:	dd41      	ble.n	800b5b6 <_printf_float+0x1ba>
 800b532:	f1ab 0302 	sub.w	r3, fp, #2
 800b536:	fa5f fb83 	uxtb.w	fp, r3
 800b53a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b53e:	d820      	bhi.n	800b582 <_printf_float+0x186>
 800b540:	3901      	subs	r1, #1
 800b542:	465a      	mov	r2, fp
 800b544:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b548:	9109      	str	r1, [sp, #36]	; 0x24
 800b54a:	f7ff ff19 	bl	800b380 <__exponent>
 800b54e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b550:	1813      	adds	r3, r2, r0
 800b552:	2a01      	cmp	r2, #1
 800b554:	4681      	mov	r9, r0
 800b556:	6123      	str	r3, [r4, #16]
 800b558:	dc02      	bgt.n	800b560 <_printf_float+0x164>
 800b55a:	6822      	ldr	r2, [r4, #0]
 800b55c:	07d2      	lsls	r2, r2, #31
 800b55e:	d501      	bpl.n	800b564 <_printf_float+0x168>
 800b560:	3301      	adds	r3, #1
 800b562:	6123      	str	r3, [r4, #16]
 800b564:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d09c      	beq.n	800b4a6 <_printf_float+0xaa>
 800b56c:	232d      	movs	r3, #45	; 0x2d
 800b56e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b572:	e798      	b.n	800b4a6 <_printf_float+0xaa>
 800b574:	9a06      	ldr	r2, [sp, #24]
 800b576:	2a47      	cmp	r2, #71	; 0x47
 800b578:	d1be      	bne.n	800b4f8 <_printf_float+0xfc>
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d1bc      	bne.n	800b4f8 <_printf_float+0xfc>
 800b57e:	2301      	movs	r3, #1
 800b580:	e7b9      	b.n	800b4f6 <_printf_float+0xfa>
 800b582:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b586:	d118      	bne.n	800b5ba <_printf_float+0x1be>
 800b588:	2900      	cmp	r1, #0
 800b58a:	6863      	ldr	r3, [r4, #4]
 800b58c:	dd0b      	ble.n	800b5a6 <_printf_float+0x1aa>
 800b58e:	6121      	str	r1, [r4, #16]
 800b590:	b913      	cbnz	r3, 800b598 <_printf_float+0x19c>
 800b592:	6822      	ldr	r2, [r4, #0]
 800b594:	07d0      	lsls	r0, r2, #31
 800b596:	d502      	bpl.n	800b59e <_printf_float+0x1a2>
 800b598:	3301      	adds	r3, #1
 800b59a:	440b      	add	r3, r1
 800b59c:	6123      	str	r3, [r4, #16]
 800b59e:	65a1      	str	r1, [r4, #88]	; 0x58
 800b5a0:	f04f 0900 	mov.w	r9, #0
 800b5a4:	e7de      	b.n	800b564 <_printf_float+0x168>
 800b5a6:	b913      	cbnz	r3, 800b5ae <_printf_float+0x1b2>
 800b5a8:	6822      	ldr	r2, [r4, #0]
 800b5aa:	07d2      	lsls	r2, r2, #31
 800b5ac:	d501      	bpl.n	800b5b2 <_printf_float+0x1b6>
 800b5ae:	3302      	adds	r3, #2
 800b5b0:	e7f4      	b.n	800b59c <_printf_float+0x1a0>
 800b5b2:	2301      	movs	r3, #1
 800b5b4:	e7f2      	b.n	800b59c <_printf_float+0x1a0>
 800b5b6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b5ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b5bc:	4299      	cmp	r1, r3
 800b5be:	db05      	blt.n	800b5cc <_printf_float+0x1d0>
 800b5c0:	6823      	ldr	r3, [r4, #0]
 800b5c2:	6121      	str	r1, [r4, #16]
 800b5c4:	07d8      	lsls	r0, r3, #31
 800b5c6:	d5ea      	bpl.n	800b59e <_printf_float+0x1a2>
 800b5c8:	1c4b      	adds	r3, r1, #1
 800b5ca:	e7e7      	b.n	800b59c <_printf_float+0x1a0>
 800b5cc:	2900      	cmp	r1, #0
 800b5ce:	bfd4      	ite	le
 800b5d0:	f1c1 0202 	rsble	r2, r1, #2
 800b5d4:	2201      	movgt	r2, #1
 800b5d6:	4413      	add	r3, r2
 800b5d8:	e7e0      	b.n	800b59c <_printf_float+0x1a0>
 800b5da:	6823      	ldr	r3, [r4, #0]
 800b5dc:	055a      	lsls	r2, r3, #21
 800b5de:	d407      	bmi.n	800b5f0 <_printf_float+0x1f4>
 800b5e0:	6923      	ldr	r3, [r4, #16]
 800b5e2:	4642      	mov	r2, r8
 800b5e4:	4631      	mov	r1, r6
 800b5e6:	4628      	mov	r0, r5
 800b5e8:	47b8      	blx	r7
 800b5ea:	3001      	adds	r0, #1
 800b5ec:	d12c      	bne.n	800b648 <_printf_float+0x24c>
 800b5ee:	e764      	b.n	800b4ba <_printf_float+0xbe>
 800b5f0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b5f4:	f240 80e0 	bls.w	800b7b8 <_printf_float+0x3bc>
 800b5f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b5fc:	2200      	movs	r2, #0
 800b5fe:	2300      	movs	r3, #0
 800b600:	f7f5 fa7a 	bl	8000af8 <__aeabi_dcmpeq>
 800b604:	2800      	cmp	r0, #0
 800b606:	d034      	beq.n	800b672 <_printf_float+0x276>
 800b608:	4a37      	ldr	r2, [pc, #220]	; (800b6e8 <_printf_float+0x2ec>)
 800b60a:	2301      	movs	r3, #1
 800b60c:	4631      	mov	r1, r6
 800b60e:	4628      	mov	r0, r5
 800b610:	47b8      	blx	r7
 800b612:	3001      	adds	r0, #1
 800b614:	f43f af51 	beq.w	800b4ba <_printf_float+0xbe>
 800b618:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b61c:	429a      	cmp	r2, r3
 800b61e:	db02      	blt.n	800b626 <_printf_float+0x22a>
 800b620:	6823      	ldr	r3, [r4, #0]
 800b622:	07d8      	lsls	r0, r3, #31
 800b624:	d510      	bpl.n	800b648 <_printf_float+0x24c>
 800b626:	ee18 3a10 	vmov	r3, s16
 800b62a:	4652      	mov	r2, sl
 800b62c:	4631      	mov	r1, r6
 800b62e:	4628      	mov	r0, r5
 800b630:	47b8      	blx	r7
 800b632:	3001      	adds	r0, #1
 800b634:	f43f af41 	beq.w	800b4ba <_printf_float+0xbe>
 800b638:	f04f 0800 	mov.w	r8, #0
 800b63c:	f104 091a 	add.w	r9, r4, #26
 800b640:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b642:	3b01      	subs	r3, #1
 800b644:	4543      	cmp	r3, r8
 800b646:	dc09      	bgt.n	800b65c <_printf_float+0x260>
 800b648:	6823      	ldr	r3, [r4, #0]
 800b64a:	079b      	lsls	r3, r3, #30
 800b64c:	f100 8107 	bmi.w	800b85e <_printf_float+0x462>
 800b650:	68e0      	ldr	r0, [r4, #12]
 800b652:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b654:	4298      	cmp	r0, r3
 800b656:	bfb8      	it	lt
 800b658:	4618      	movlt	r0, r3
 800b65a:	e730      	b.n	800b4be <_printf_float+0xc2>
 800b65c:	2301      	movs	r3, #1
 800b65e:	464a      	mov	r2, r9
 800b660:	4631      	mov	r1, r6
 800b662:	4628      	mov	r0, r5
 800b664:	47b8      	blx	r7
 800b666:	3001      	adds	r0, #1
 800b668:	f43f af27 	beq.w	800b4ba <_printf_float+0xbe>
 800b66c:	f108 0801 	add.w	r8, r8, #1
 800b670:	e7e6      	b.n	800b640 <_printf_float+0x244>
 800b672:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b674:	2b00      	cmp	r3, #0
 800b676:	dc39      	bgt.n	800b6ec <_printf_float+0x2f0>
 800b678:	4a1b      	ldr	r2, [pc, #108]	; (800b6e8 <_printf_float+0x2ec>)
 800b67a:	2301      	movs	r3, #1
 800b67c:	4631      	mov	r1, r6
 800b67e:	4628      	mov	r0, r5
 800b680:	47b8      	blx	r7
 800b682:	3001      	adds	r0, #1
 800b684:	f43f af19 	beq.w	800b4ba <_printf_float+0xbe>
 800b688:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800b68c:	4313      	orrs	r3, r2
 800b68e:	d102      	bne.n	800b696 <_printf_float+0x29a>
 800b690:	6823      	ldr	r3, [r4, #0]
 800b692:	07d9      	lsls	r1, r3, #31
 800b694:	d5d8      	bpl.n	800b648 <_printf_float+0x24c>
 800b696:	ee18 3a10 	vmov	r3, s16
 800b69a:	4652      	mov	r2, sl
 800b69c:	4631      	mov	r1, r6
 800b69e:	4628      	mov	r0, r5
 800b6a0:	47b8      	blx	r7
 800b6a2:	3001      	adds	r0, #1
 800b6a4:	f43f af09 	beq.w	800b4ba <_printf_float+0xbe>
 800b6a8:	f04f 0900 	mov.w	r9, #0
 800b6ac:	f104 0a1a 	add.w	sl, r4, #26
 800b6b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6b2:	425b      	negs	r3, r3
 800b6b4:	454b      	cmp	r3, r9
 800b6b6:	dc01      	bgt.n	800b6bc <_printf_float+0x2c0>
 800b6b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b6ba:	e792      	b.n	800b5e2 <_printf_float+0x1e6>
 800b6bc:	2301      	movs	r3, #1
 800b6be:	4652      	mov	r2, sl
 800b6c0:	4631      	mov	r1, r6
 800b6c2:	4628      	mov	r0, r5
 800b6c4:	47b8      	blx	r7
 800b6c6:	3001      	adds	r0, #1
 800b6c8:	f43f aef7 	beq.w	800b4ba <_printf_float+0xbe>
 800b6cc:	f109 0901 	add.w	r9, r9, #1
 800b6d0:	e7ee      	b.n	800b6b0 <_printf_float+0x2b4>
 800b6d2:	bf00      	nop
 800b6d4:	7fefffff 	.word	0x7fefffff
 800b6d8:	08021768 	.word	0x08021768
 800b6dc:	0802176c 	.word	0x0802176c
 800b6e0:	08021770 	.word	0x08021770
 800b6e4:	08021774 	.word	0x08021774
 800b6e8:	08021778 	.word	0x08021778
 800b6ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b6ee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b6f0:	429a      	cmp	r2, r3
 800b6f2:	bfa8      	it	ge
 800b6f4:	461a      	movge	r2, r3
 800b6f6:	2a00      	cmp	r2, #0
 800b6f8:	4691      	mov	r9, r2
 800b6fa:	dc37      	bgt.n	800b76c <_printf_float+0x370>
 800b6fc:	f04f 0b00 	mov.w	fp, #0
 800b700:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b704:	f104 021a 	add.w	r2, r4, #26
 800b708:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b70a:	9305      	str	r3, [sp, #20]
 800b70c:	eba3 0309 	sub.w	r3, r3, r9
 800b710:	455b      	cmp	r3, fp
 800b712:	dc33      	bgt.n	800b77c <_printf_float+0x380>
 800b714:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b718:	429a      	cmp	r2, r3
 800b71a:	db3b      	blt.n	800b794 <_printf_float+0x398>
 800b71c:	6823      	ldr	r3, [r4, #0]
 800b71e:	07da      	lsls	r2, r3, #31
 800b720:	d438      	bmi.n	800b794 <_printf_float+0x398>
 800b722:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800b726:	eba2 0903 	sub.w	r9, r2, r3
 800b72a:	9b05      	ldr	r3, [sp, #20]
 800b72c:	1ad2      	subs	r2, r2, r3
 800b72e:	4591      	cmp	r9, r2
 800b730:	bfa8      	it	ge
 800b732:	4691      	movge	r9, r2
 800b734:	f1b9 0f00 	cmp.w	r9, #0
 800b738:	dc35      	bgt.n	800b7a6 <_printf_float+0x3aa>
 800b73a:	f04f 0800 	mov.w	r8, #0
 800b73e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b742:	f104 0a1a 	add.w	sl, r4, #26
 800b746:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b74a:	1a9b      	subs	r3, r3, r2
 800b74c:	eba3 0309 	sub.w	r3, r3, r9
 800b750:	4543      	cmp	r3, r8
 800b752:	f77f af79 	ble.w	800b648 <_printf_float+0x24c>
 800b756:	2301      	movs	r3, #1
 800b758:	4652      	mov	r2, sl
 800b75a:	4631      	mov	r1, r6
 800b75c:	4628      	mov	r0, r5
 800b75e:	47b8      	blx	r7
 800b760:	3001      	adds	r0, #1
 800b762:	f43f aeaa 	beq.w	800b4ba <_printf_float+0xbe>
 800b766:	f108 0801 	add.w	r8, r8, #1
 800b76a:	e7ec      	b.n	800b746 <_printf_float+0x34a>
 800b76c:	4613      	mov	r3, r2
 800b76e:	4631      	mov	r1, r6
 800b770:	4642      	mov	r2, r8
 800b772:	4628      	mov	r0, r5
 800b774:	47b8      	blx	r7
 800b776:	3001      	adds	r0, #1
 800b778:	d1c0      	bne.n	800b6fc <_printf_float+0x300>
 800b77a:	e69e      	b.n	800b4ba <_printf_float+0xbe>
 800b77c:	2301      	movs	r3, #1
 800b77e:	4631      	mov	r1, r6
 800b780:	4628      	mov	r0, r5
 800b782:	9205      	str	r2, [sp, #20]
 800b784:	47b8      	blx	r7
 800b786:	3001      	adds	r0, #1
 800b788:	f43f ae97 	beq.w	800b4ba <_printf_float+0xbe>
 800b78c:	9a05      	ldr	r2, [sp, #20]
 800b78e:	f10b 0b01 	add.w	fp, fp, #1
 800b792:	e7b9      	b.n	800b708 <_printf_float+0x30c>
 800b794:	ee18 3a10 	vmov	r3, s16
 800b798:	4652      	mov	r2, sl
 800b79a:	4631      	mov	r1, r6
 800b79c:	4628      	mov	r0, r5
 800b79e:	47b8      	blx	r7
 800b7a0:	3001      	adds	r0, #1
 800b7a2:	d1be      	bne.n	800b722 <_printf_float+0x326>
 800b7a4:	e689      	b.n	800b4ba <_printf_float+0xbe>
 800b7a6:	9a05      	ldr	r2, [sp, #20]
 800b7a8:	464b      	mov	r3, r9
 800b7aa:	4442      	add	r2, r8
 800b7ac:	4631      	mov	r1, r6
 800b7ae:	4628      	mov	r0, r5
 800b7b0:	47b8      	blx	r7
 800b7b2:	3001      	adds	r0, #1
 800b7b4:	d1c1      	bne.n	800b73a <_printf_float+0x33e>
 800b7b6:	e680      	b.n	800b4ba <_printf_float+0xbe>
 800b7b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b7ba:	2a01      	cmp	r2, #1
 800b7bc:	dc01      	bgt.n	800b7c2 <_printf_float+0x3c6>
 800b7be:	07db      	lsls	r3, r3, #31
 800b7c0:	d53a      	bpl.n	800b838 <_printf_float+0x43c>
 800b7c2:	2301      	movs	r3, #1
 800b7c4:	4642      	mov	r2, r8
 800b7c6:	4631      	mov	r1, r6
 800b7c8:	4628      	mov	r0, r5
 800b7ca:	47b8      	blx	r7
 800b7cc:	3001      	adds	r0, #1
 800b7ce:	f43f ae74 	beq.w	800b4ba <_printf_float+0xbe>
 800b7d2:	ee18 3a10 	vmov	r3, s16
 800b7d6:	4652      	mov	r2, sl
 800b7d8:	4631      	mov	r1, r6
 800b7da:	4628      	mov	r0, r5
 800b7dc:	47b8      	blx	r7
 800b7de:	3001      	adds	r0, #1
 800b7e0:	f43f ae6b 	beq.w	800b4ba <_printf_float+0xbe>
 800b7e4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b7e8:	2200      	movs	r2, #0
 800b7ea:	2300      	movs	r3, #0
 800b7ec:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800b7f0:	f7f5 f982 	bl	8000af8 <__aeabi_dcmpeq>
 800b7f4:	b9d8      	cbnz	r0, 800b82e <_printf_float+0x432>
 800b7f6:	f10a 33ff 	add.w	r3, sl, #4294967295
 800b7fa:	f108 0201 	add.w	r2, r8, #1
 800b7fe:	4631      	mov	r1, r6
 800b800:	4628      	mov	r0, r5
 800b802:	47b8      	blx	r7
 800b804:	3001      	adds	r0, #1
 800b806:	d10e      	bne.n	800b826 <_printf_float+0x42a>
 800b808:	e657      	b.n	800b4ba <_printf_float+0xbe>
 800b80a:	2301      	movs	r3, #1
 800b80c:	4652      	mov	r2, sl
 800b80e:	4631      	mov	r1, r6
 800b810:	4628      	mov	r0, r5
 800b812:	47b8      	blx	r7
 800b814:	3001      	adds	r0, #1
 800b816:	f43f ae50 	beq.w	800b4ba <_printf_float+0xbe>
 800b81a:	f108 0801 	add.w	r8, r8, #1
 800b81e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b820:	3b01      	subs	r3, #1
 800b822:	4543      	cmp	r3, r8
 800b824:	dcf1      	bgt.n	800b80a <_printf_float+0x40e>
 800b826:	464b      	mov	r3, r9
 800b828:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b82c:	e6da      	b.n	800b5e4 <_printf_float+0x1e8>
 800b82e:	f04f 0800 	mov.w	r8, #0
 800b832:	f104 0a1a 	add.w	sl, r4, #26
 800b836:	e7f2      	b.n	800b81e <_printf_float+0x422>
 800b838:	2301      	movs	r3, #1
 800b83a:	4642      	mov	r2, r8
 800b83c:	e7df      	b.n	800b7fe <_printf_float+0x402>
 800b83e:	2301      	movs	r3, #1
 800b840:	464a      	mov	r2, r9
 800b842:	4631      	mov	r1, r6
 800b844:	4628      	mov	r0, r5
 800b846:	47b8      	blx	r7
 800b848:	3001      	adds	r0, #1
 800b84a:	f43f ae36 	beq.w	800b4ba <_printf_float+0xbe>
 800b84e:	f108 0801 	add.w	r8, r8, #1
 800b852:	68e3      	ldr	r3, [r4, #12]
 800b854:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b856:	1a5b      	subs	r3, r3, r1
 800b858:	4543      	cmp	r3, r8
 800b85a:	dcf0      	bgt.n	800b83e <_printf_float+0x442>
 800b85c:	e6f8      	b.n	800b650 <_printf_float+0x254>
 800b85e:	f04f 0800 	mov.w	r8, #0
 800b862:	f104 0919 	add.w	r9, r4, #25
 800b866:	e7f4      	b.n	800b852 <_printf_float+0x456>

0800b868 <_printf_common>:
 800b868:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b86c:	4616      	mov	r6, r2
 800b86e:	4699      	mov	r9, r3
 800b870:	688a      	ldr	r2, [r1, #8]
 800b872:	690b      	ldr	r3, [r1, #16]
 800b874:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b878:	4293      	cmp	r3, r2
 800b87a:	bfb8      	it	lt
 800b87c:	4613      	movlt	r3, r2
 800b87e:	6033      	str	r3, [r6, #0]
 800b880:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b884:	4607      	mov	r7, r0
 800b886:	460c      	mov	r4, r1
 800b888:	b10a      	cbz	r2, 800b88e <_printf_common+0x26>
 800b88a:	3301      	adds	r3, #1
 800b88c:	6033      	str	r3, [r6, #0]
 800b88e:	6823      	ldr	r3, [r4, #0]
 800b890:	0699      	lsls	r1, r3, #26
 800b892:	bf42      	ittt	mi
 800b894:	6833      	ldrmi	r3, [r6, #0]
 800b896:	3302      	addmi	r3, #2
 800b898:	6033      	strmi	r3, [r6, #0]
 800b89a:	6825      	ldr	r5, [r4, #0]
 800b89c:	f015 0506 	ands.w	r5, r5, #6
 800b8a0:	d106      	bne.n	800b8b0 <_printf_common+0x48>
 800b8a2:	f104 0a19 	add.w	sl, r4, #25
 800b8a6:	68e3      	ldr	r3, [r4, #12]
 800b8a8:	6832      	ldr	r2, [r6, #0]
 800b8aa:	1a9b      	subs	r3, r3, r2
 800b8ac:	42ab      	cmp	r3, r5
 800b8ae:	dc26      	bgt.n	800b8fe <_printf_common+0x96>
 800b8b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b8b4:	1e13      	subs	r3, r2, #0
 800b8b6:	6822      	ldr	r2, [r4, #0]
 800b8b8:	bf18      	it	ne
 800b8ba:	2301      	movne	r3, #1
 800b8bc:	0692      	lsls	r2, r2, #26
 800b8be:	d42b      	bmi.n	800b918 <_printf_common+0xb0>
 800b8c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b8c4:	4649      	mov	r1, r9
 800b8c6:	4638      	mov	r0, r7
 800b8c8:	47c0      	blx	r8
 800b8ca:	3001      	adds	r0, #1
 800b8cc:	d01e      	beq.n	800b90c <_printf_common+0xa4>
 800b8ce:	6823      	ldr	r3, [r4, #0]
 800b8d0:	6922      	ldr	r2, [r4, #16]
 800b8d2:	f003 0306 	and.w	r3, r3, #6
 800b8d6:	2b04      	cmp	r3, #4
 800b8d8:	bf02      	ittt	eq
 800b8da:	68e5      	ldreq	r5, [r4, #12]
 800b8dc:	6833      	ldreq	r3, [r6, #0]
 800b8de:	1aed      	subeq	r5, r5, r3
 800b8e0:	68a3      	ldr	r3, [r4, #8]
 800b8e2:	bf0c      	ite	eq
 800b8e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b8e8:	2500      	movne	r5, #0
 800b8ea:	4293      	cmp	r3, r2
 800b8ec:	bfc4      	itt	gt
 800b8ee:	1a9b      	subgt	r3, r3, r2
 800b8f0:	18ed      	addgt	r5, r5, r3
 800b8f2:	2600      	movs	r6, #0
 800b8f4:	341a      	adds	r4, #26
 800b8f6:	42b5      	cmp	r5, r6
 800b8f8:	d11a      	bne.n	800b930 <_printf_common+0xc8>
 800b8fa:	2000      	movs	r0, #0
 800b8fc:	e008      	b.n	800b910 <_printf_common+0xa8>
 800b8fe:	2301      	movs	r3, #1
 800b900:	4652      	mov	r2, sl
 800b902:	4649      	mov	r1, r9
 800b904:	4638      	mov	r0, r7
 800b906:	47c0      	blx	r8
 800b908:	3001      	adds	r0, #1
 800b90a:	d103      	bne.n	800b914 <_printf_common+0xac>
 800b90c:	f04f 30ff 	mov.w	r0, #4294967295
 800b910:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b914:	3501      	adds	r5, #1
 800b916:	e7c6      	b.n	800b8a6 <_printf_common+0x3e>
 800b918:	18e1      	adds	r1, r4, r3
 800b91a:	1c5a      	adds	r2, r3, #1
 800b91c:	2030      	movs	r0, #48	; 0x30
 800b91e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b922:	4422      	add	r2, r4
 800b924:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b928:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b92c:	3302      	adds	r3, #2
 800b92e:	e7c7      	b.n	800b8c0 <_printf_common+0x58>
 800b930:	2301      	movs	r3, #1
 800b932:	4622      	mov	r2, r4
 800b934:	4649      	mov	r1, r9
 800b936:	4638      	mov	r0, r7
 800b938:	47c0      	blx	r8
 800b93a:	3001      	adds	r0, #1
 800b93c:	d0e6      	beq.n	800b90c <_printf_common+0xa4>
 800b93e:	3601      	adds	r6, #1
 800b940:	e7d9      	b.n	800b8f6 <_printf_common+0x8e>
	...

0800b944 <_printf_i>:
 800b944:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b948:	7e0f      	ldrb	r7, [r1, #24]
 800b94a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b94c:	2f78      	cmp	r7, #120	; 0x78
 800b94e:	4691      	mov	r9, r2
 800b950:	4680      	mov	r8, r0
 800b952:	460c      	mov	r4, r1
 800b954:	469a      	mov	sl, r3
 800b956:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b95a:	d807      	bhi.n	800b96c <_printf_i+0x28>
 800b95c:	2f62      	cmp	r7, #98	; 0x62
 800b95e:	d80a      	bhi.n	800b976 <_printf_i+0x32>
 800b960:	2f00      	cmp	r7, #0
 800b962:	f000 80d4 	beq.w	800bb0e <_printf_i+0x1ca>
 800b966:	2f58      	cmp	r7, #88	; 0x58
 800b968:	f000 80c0 	beq.w	800baec <_printf_i+0x1a8>
 800b96c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b970:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b974:	e03a      	b.n	800b9ec <_printf_i+0xa8>
 800b976:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b97a:	2b15      	cmp	r3, #21
 800b97c:	d8f6      	bhi.n	800b96c <_printf_i+0x28>
 800b97e:	a101      	add	r1, pc, #4	; (adr r1, 800b984 <_printf_i+0x40>)
 800b980:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b984:	0800b9dd 	.word	0x0800b9dd
 800b988:	0800b9f1 	.word	0x0800b9f1
 800b98c:	0800b96d 	.word	0x0800b96d
 800b990:	0800b96d 	.word	0x0800b96d
 800b994:	0800b96d 	.word	0x0800b96d
 800b998:	0800b96d 	.word	0x0800b96d
 800b99c:	0800b9f1 	.word	0x0800b9f1
 800b9a0:	0800b96d 	.word	0x0800b96d
 800b9a4:	0800b96d 	.word	0x0800b96d
 800b9a8:	0800b96d 	.word	0x0800b96d
 800b9ac:	0800b96d 	.word	0x0800b96d
 800b9b0:	0800baf5 	.word	0x0800baf5
 800b9b4:	0800ba1d 	.word	0x0800ba1d
 800b9b8:	0800baaf 	.word	0x0800baaf
 800b9bc:	0800b96d 	.word	0x0800b96d
 800b9c0:	0800b96d 	.word	0x0800b96d
 800b9c4:	0800bb17 	.word	0x0800bb17
 800b9c8:	0800b96d 	.word	0x0800b96d
 800b9cc:	0800ba1d 	.word	0x0800ba1d
 800b9d0:	0800b96d 	.word	0x0800b96d
 800b9d4:	0800b96d 	.word	0x0800b96d
 800b9d8:	0800bab7 	.word	0x0800bab7
 800b9dc:	682b      	ldr	r3, [r5, #0]
 800b9de:	1d1a      	adds	r2, r3, #4
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	602a      	str	r2, [r5, #0]
 800b9e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b9e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b9ec:	2301      	movs	r3, #1
 800b9ee:	e09f      	b.n	800bb30 <_printf_i+0x1ec>
 800b9f0:	6820      	ldr	r0, [r4, #0]
 800b9f2:	682b      	ldr	r3, [r5, #0]
 800b9f4:	0607      	lsls	r7, r0, #24
 800b9f6:	f103 0104 	add.w	r1, r3, #4
 800b9fa:	6029      	str	r1, [r5, #0]
 800b9fc:	d501      	bpl.n	800ba02 <_printf_i+0xbe>
 800b9fe:	681e      	ldr	r6, [r3, #0]
 800ba00:	e003      	b.n	800ba0a <_printf_i+0xc6>
 800ba02:	0646      	lsls	r6, r0, #25
 800ba04:	d5fb      	bpl.n	800b9fe <_printf_i+0xba>
 800ba06:	f9b3 6000 	ldrsh.w	r6, [r3]
 800ba0a:	2e00      	cmp	r6, #0
 800ba0c:	da03      	bge.n	800ba16 <_printf_i+0xd2>
 800ba0e:	232d      	movs	r3, #45	; 0x2d
 800ba10:	4276      	negs	r6, r6
 800ba12:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ba16:	485a      	ldr	r0, [pc, #360]	; (800bb80 <_printf_i+0x23c>)
 800ba18:	230a      	movs	r3, #10
 800ba1a:	e012      	b.n	800ba42 <_printf_i+0xfe>
 800ba1c:	682b      	ldr	r3, [r5, #0]
 800ba1e:	6820      	ldr	r0, [r4, #0]
 800ba20:	1d19      	adds	r1, r3, #4
 800ba22:	6029      	str	r1, [r5, #0]
 800ba24:	0605      	lsls	r5, r0, #24
 800ba26:	d501      	bpl.n	800ba2c <_printf_i+0xe8>
 800ba28:	681e      	ldr	r6, [r3, #0]
 800ba2a:	e002      	b.n	800ba32 <_printf_i+0xee>
 800ba2c:	0641      	lsls	r1, r0, #25
 800ba2e:	d5fb      	bpl.n	800ba28 <_printf_i+0xe4>
 800ba30:	881e      	ldrh	r6, [r3, #0]
 800ba32:	4853      	ldr	r0, [pc, #332]	; (800bb80 <_printf_i+0x23c>)
 800ba34:	2f6f      	cmp	r7, #111	; 0x6f
 800ba36:	bf0c      	ite	eq
 800ba38:	2308      	moveq	r3, #8
 800ba3a:	230a      	movne	r3, #10
 800ba3c:	2100      	movs	r1, #0
 800ba3e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ba42:	6865      	ldr	r5, [r4, #4]
 800ba44:	60a5      	str	r5, [r4, #8]
 800ba46:	2d00      	cmp	r5, #0
 800ba48:	bfa2      	ittt	ge
 800ba4a:	6821      	ldrge	r1, [r4, #0]
 800ba4c:	f021 0104 	bicge.w	r1, r1, #4
 800ba50:	6021      	strge	r1, [r4, #0]
 800ba52:	b90e      	cbnz	r6, 800ba58 <_printf_i+0x114>
 800ba54:	2d00      	cmp	r5, #0
 800ba56:	d04b      	beq.n	800baf0 <_printf_i+0x1ac>
 800ba58:	4615      	mov	r5, r2
 800ba5a:	fbb6 f1f3 	udiv	r1, r6, r3
 800ba5e:	fb03 6711 	mls	r7, r3, r1, r6
 800ba62:	5dc7      	ldrb	r7, [r0, r7]
 800ba64:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ba68:	4637      	mov	r7, r6
 800ba6a:	42bb      	cmp	r3, r7
 800ba6c:	460e      	mov	r6, r1
 800ba6e:	d9f4      	bls.n	800ba5a <_printf_i+0x116>
 800ba70:	2b08      	cmp	r3, #8
 800ba72:	d10b      	bne.n	800ba8c <_printf_i+0x148>
 800ba74:	6823      	ldr	r3, [r4, #0]
 800ba76:	07de      	lsls	r6, r3, #31
 800ba78:	d508      	bpl.n	800ba8c <_printf_i+0x148>
 800ba7a:	6923      	ldr	r3, [r4, #16]
 800ba7c:	6861      	ldr	r1, [r4, #4]
 800ba7e:	4299      	cmp	r1, r3
 800ba80:	bfde      	ittt	le
 800ba82:	2330      	movle	r3, #48	; 0x30
 800ba84:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ba88:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ba8c:	1b52      	subs	r2, r2, r5
 800ba8e:	6122      	str	r2, [r4, #16]
 800ba90:	f8cd a000 	str.w	sl, [sp]
 800ba94:	464b      	mov	r3, r9
 800ba96:	aa03      	add	r2, sp, #12
 800ba98:	4621      	mov	r1, r4
 800ba9a:	4640      	mov	r0, r8
 800ba9c:	f7ff fee4 	bl	800b868 <_printf_common>
 800baa0:	3001      	adds	r0, #1
 800baa2:	d14a      	bne.n	800bb3a <_printf_i+0x1f6>
 800baa4:	f04f 30ff 	mov.w	r0, #4294967295
 800baa8:	b004      	add	sp, #16
 800baaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800baae:	6823      	ldr	r3, [r4, #0]
 800bab0:	f043 0320 	orr.w	r3, r3, #32
 800bab4:	6023      	str	r3, [r4, #0]
 800bab6:	4833      	ldr	r0, [pc, #204]	; (800bb84 <_printf_i+0x240>)
 800bab8:	2778      	movs	r7, #120	; 0x78
 800baba:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800babe:	6823      	ldr	r3, [r4, #0]
 800bac0:	6829      	ldr	r1, [r5, #0]
 800bac2:	061f      	lsls	r7, r3, #24
 800bac4:	f851 6b04 	ldr.w	r6, [r1], #4
 800bac8:	d402      	bmi.n	800bad0 <_printf_i+0x18c>
 800baca:	065f      	lsls	r7, r3, #25
 800bacc:	bf48      	it	mi
 800bace:	b2b6      	uxthmi	r6, r6
 800bad0:	07df      	lsls	r7, r3, #31
 800bad2:	bf48      	it	mi
 800bad4:	f043 0320 	orrmi.w	r3, r3, #32
 800bad8:	6029      	str	r1, [r5, #0]
 800bada:	bf48      	it	mi
 800badc:	6023      	strmi	r3, [r4, #0]
 800bade:	b91e      	cbnz	r6, 800bae8 <_printf_i+0x1a4>
 800bae0:	6823      	ldr	r3, [r4, #0]
 800bae2:	f023 0320 	bic.w	r3, r3, #32
 800bae6:	6023      	str	r3, [r4, #0]
 800bae8:	2310      	movs	r3, #16
 800baea:	e7a7      	b.n	800ba3c <_printf_i+0xf8>
 800baec:	4824      	ldr	r0, [pc, #144]	; (800bb80 <_printf_i+0x23c>)
 800baee:	e7e4      	b.n	800baba <_printf_i+0x176>
 800baf0:	4615      	mov	r5, r2
 800baf2:	e7bd      	b.n	800ba70 <_printf_i+0x12c>
 800baf4:	682b      	ldr	r3, [r5, #0]
 800baf6:	6826      	ldr	r6, [r4, #0]
 800baf8:	6961      	ldr	r1, [r4, #20]
 800bafa:	1d18      	adds	r0, r3, #4
 800bafc:	6028      	str	r0, [r5, #0]
 800bafe:	0635      	lsls	r5, r6, #24
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	d501      	bpl.n	800bb08 <_printf_i+0x1c4>
 800bb04:	6019      	str	r1, [r3, #0]
 800bb06:	e002      	b.n	800bb0e <_printf_i+0x1ca>
 800bb08:	0670      	lsls	r0, r6, #25
 800bb0a:	d5fb      	bpl.n	800bb04 <_printf_i+0x1c0>
 800bb0c:	8019      	strh	r1, [r3, #0]
 800bb0e:	2300      	movs	r3, #0
 800bb10:	6123      	str	r3, [r4, #16]
 800bb12:	4615      	mov	r5, r2
 800bb14:	e7bc      	b.n	800ba90 <_printf_i+0x14c>
 800bb16:	682b      	ldr	r3, [r5, #0]
 800bb18:	1d1a      	adds	r2, r3, #4
 800bb1a:	602a      	str	r2, [r5, #0]
 800bb1c:	681d      	ldr	r5, [r3, #0]
 800bb1e:	6862      	ldr	r2, [r4, #4]
 800bb20:	2100      	movs	r1, #0
 800bb22:	4628      	mov	r0, r5
 800bb24:	f7f4 fb6c 	bl	8000200 <memchr>
 800bb28:	b108      	cbz	r0, 800bb2e <_printf_i+0x1ea>
 800bb2a:	1b40      	subs	r0, r0, r5
 800bb2c:	6060      	str	r0, [r4, #4]
 800bb2e:	6863      	ldr	r3, [r4, #4]
 800bb30:	6123      	str	r3, [r4, #16]
 800bb32:	2300      	movs	r3, #0
 800bb34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bb38:	e7aa      	b.n	800ba90 <_printf_i+0x14c>
 800bb3a:	6923      	ldr	r3, [r4, #16]
 800bb3c:	462a      	mov	r2, r5
 800bb3e:	4649      	mov	r1, r9
 800bb40:	4640      	mov	r0, r8
 800bb42:	47d0      	blx	sl
 800bb44:	3001      	adds	r0, #1
 800bb46:	d0ad      	beq.n	800baa4 <_printf_i+0x160>
 800bb48:	6823      	ldr	r3, [r4, #0]
 800bb4a:	079b      	lsls	r3, r3, #30
 800bb4c:	d413      	bmi.n	800bb76 <_printf_i+0x232>
 800bb4e:	68e0      	ldr	r0, [r4, #12]
 800bb50:	9b03      	ldr	r3, [sp, #12]
 800bb52:	4298      	cmp	r0, r3
 800bb54:	bfb8      	it	lt
 800bb56:	4618      	movlt	r0, r3
 800bb58:	e7a6      	b.n	800baa8 <_printf_i+0x164>
 800bb5a:	2301      	movs	r3, #1
 800bb5c:	4632      	mov	r2, r6
 800bb5e:	4649      	mov	r1, r9
 800bb60:	4640      	mov	r0, r8
 800bb62:	47d0      	blx	sl
 800bb64:	3001      	adds	r0, #1
 800bb66:	d09d      	beq.n	800baa4 <_printf_i+0x160>
 800bb68:	3501      	adds	r5, #1
 800bb6a:	68e3      	ldr	r3, [r4, #12]
 800bb6c:	9903      	ldr	r1, [sp, #12]
 800bb6e:	1a5b      	subs	r3, r3, r1
 800bb70:	42ab      	cmp	r3, r5
 800bb72:	dcf2      	bgt.n	800bb5a <_printf_i+0x216>
 800bb74:	e7eb      	b.n	800bb4e <_printf_i+0x20a>
 800bb76:	2500      	movs	r5, #0
 800bb78:	f104 0619 	add.w	r6, r4, #25
 800bb7c:	e7f5      	b.n	800bb6a <_printf_i+0x226>
 800bb7e:	bf00      	nop
 800bb80:	0802177a 	.word	0x0802177a
 800bb84:	0802178b 	.word	0x0802178b

0800bb88 <std>:
 800bb88:	2300      	movs	r3, #0
 800bb8a:	b510      	push	{r4, lr}
 800bb8c:	4604      	mov	r4, r0
 800bb8e:	e9c0 3300 	strd	r3, r3, [r0]
 800bb92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bb96:	6083      	str	r3, [r0, #8]
 800bb98:	8181      	strh	r1, [r0, #12]
 800bb9a:	6643      	str	r3, [r0, #100]	; 0x64
 800bb9c:	81c2      	strh	r2, [r0, #14]
 800bb9e:	6183      	str	r3, [r0, #24]
 800bba0:	4619      	mov	r1, r3
 800bba2:	2208      	movs	r2, #8
 800bba4:	305c      	adds	r0, #92	; 0x5c
 800bba6:	f000 fa1d 	bl	800bfe4 <memset>
 800bbaa:	4b05      	ldr	r3, [pc, #20]	; (800bbc0 <std+0x38>)
 800bbac:	6263      	str	r3, [r4, #36]	; 0x24
 800bbae:	4b05      	ldr	r3, [pc, #20]	; (800bbc4 <std+0x3c>)
 800bbb0:	62a3      	str	r3, [r4, #40]	; 0x28
 800bbb2:	4b05      	ldr	r3, [pc, #20]	; (800bbc8 <std+0x40>)
 800bbb4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bbb6:	4b05      	ldr	r3, [pc, #20]	; (800bbcc <std+0x44>)
 800bbb8:	6224      	str	r4, [r4, #32]
 800bbba:	6323      	str	r3, [r4, #48]	; 0x30
 800bbbc:	bd10      	pop	{r4, pc}
 800bbbe:	bf00      	nop
 800bbc0:	0800be15 	.word	0x0800be15
 800bbc4:	0800be37 	.word	0x0800be37
 800bbc8:	0800be6f 	.word	0x0800be6f
 800bbcc:	0800be93 	.word	0x0800be93

0800bbd0 <stdio_exit_handler>:
 800bbd0:	4a02      	ldr	r2, [pc, #8]	; (800bbdc <stdio_exit_handler+0xc>)
 800bbd2:	4903      	ldr	r1, [pc, #12]	; (800bbe0 <stdio_exit_handler+0x10>)
 800bbd4:	4803      	ldr	r0, [pc, #12]	; (800bbe4 <stdio_exit_handler+0x14>)
 800bbd6:	f000 b869 	b.w	800bcac <_fwalk_sglue>
 800bbda:	bf00      	nop
 800bbdc:	20000020 	.word	0x20000020
 800bbe0:	0800dd81 	.word	0x0800dd81
 800bbe4:	2000002c 	.word	0x2000002c

0800bbe8 <cleanup_stdio>:
 800bbe8:	6841      	ldr	r1, [r0, #4]
 800bbea:	4b0c      	ldr	r3, [pc, #48]	; (800bc1c <cleanup_stdio+0x34>)
 800bbec:	4299      	cmp	r1, r3
 800bbee:	b510      	push	{r4, lr}
 800bbf0:	4604      	mov	r4, r0
 800bbf2:	d001      	beq.n	800bbf8 <cleanup_stdio+0x10>
 800bbf4:	f002 f8c4 	bl	800dd80 <_fflush_r>
 800bbf8:	68a1      	ldr	r1, [r4, #8]
 800bbfa:	4b09      	ldr	r3, [pc, #36]	; (800bc20 <cleanup_stdio+0x38>)
 800bbfc:	4299      	cmp	r1, r3
 800bbfe:	d002      	beq.n	800bc06 <cleanup_stdio+0x1e>
 800bc00:	4620      	mov	r0, r4
 800bc02:	f002 f8bd 	bl	800dd80 <_fflush_r>
 800bc06:	68e1      	ldr	r1, [r4, #12]
 800bc08:	4b06      	ldr	r3, [pc, #24]	; (800bc24 <cleanup_stdio+0x3c>)
 800bc0a:	4299      	cmp	r1, r3
 800bc0c:	d004      	beq.n	800bc18 <cleanup_stdio+0x30>
 800bc0e:	4620      	mov	r0, r4
 800bc10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bc14:	f002 b8b4 	b.w	800dd80 <_fflush_r>
 800bc18:	bd10      	pop	{r4, pc}
 800bc1a:	bf00      	nop
 800bc1c:	20029600 	.word	0x20029600
 800bc20:	20029668 	.word	0x20029668
 800bc24:	200296d0 	.word	0x200296d0

0800bc28 <global_stdio_init.part.0>:
 800bc28:	b510      	push	{r4, lr}
 800bc2a:	4b0b      	ldr	r3, [pc, #44]	; (800bc58 <global_stdio_init.part.0+0x30>)
 800bc2c:	4c0b      	ldr	r4, [pc, #44]	; (800bc5c <global_stdio_init.part.0+0x34>)
 800bc2e:	4a0c      	ldr	r2, [pc, #48]	; (800bc60 <global_stdio_init.part.0+0x38>)
 800bc30:	601a      	str	r2, [r3, #0]
 800bc32:	4620      	mov	r0, r4
 800bc34:	2200      	movs	r2, #0
 800bc36:	2104      	movs	r1, #4
 800bc38:	f7ff ffa6 	bl	800bb88 <std>
 800bc3c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800bc40:	2201      	movs	r2, #1
 800bc42:	2109      	movs	r1, #9
 800bc44:	f7ff ffa0 	bl	800bb88 <std>
 800bc48:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800bc4c:	2202      	movs	r2, #2
 800bc4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bc52:	2112      	movs	r1, #18
 800bc54:	f7ff bf98 	b.w	800bb88 <std>
 800bc58:	20029738 	.word	0x20029738
 800bc5c:	20029600 	.word	0x20029600
 800bc60:	0800bbd1 	.word	0x0800bbd1

0800bc64 <__sfp_lock_acquire>:
 800bc64:	4801      	ldr	r0, [pc, #4]	; (800bc6c <__sfp_lock_acquire+0x8>)
 800bc66:	f000 baef 	b.w	800c248 <__retarget_lock_acquire_recursive>
 800bc6a:	bf00      	nop
 800bc6c:	20029741 	.word	0x20029741

0800bc70 <__sfp_lock_release>:
 800bc70:	4801      	ldr	r0, [pc, #4]	; (800bc78 <__sfp_lock_release+0x8>)
 800bc72:	f000 baea 	b.w	800c24a <__retarget_lock_release_recursive>
 800bc76:	bf00      	nop
 800bc78:	20029741 	.word	0x20029741

0800bc7c <__sinit>:
 800bc7c:	b510      	push	{r4, lr}
 800bc7e:	4604      	mov	r4, r0
 800bc80:	f7ff fff0 	bl	800bc64 <__sfp_lock_acquire>
 800bc84:	6a23      	ldr	r3, [r4, #32]
 800bc86:	b11b      	cbz	r3, 800bc90 <__sinit+0x14>
 800bc88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bc8c:	f7ff bff0 	b.w	800bc70 <__sfp_lock_release>
 800bc90:	4b04      	ldr	r3, [pc, #16]	; (800bca4 <__sinit+0x28>)
 800bc92:	6223      	str	r3, [r4, #32]
 800bc94:	4b04      	ldr	r3, [pc, #16]	; (800bca8 <__sinit+0x2c>)
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d1f5      	bne.n	800bc88 <__sinit+0xc>
 800bc9c:	f7ff ffc4 	bl	800bc28 <global_stdio_init.part.0>
 800bca0:	e7f2      	b.n	800bc88 <__sinit+0xc>
 800bca2:	bf00      	nop
 800bca4:	0800bbe9 	.word	0x0800bbe9
 800bca8:	20029738 	.word	0x20029738

0800bcac <_fwalk_sglue>:
 800bcac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bcb0:	4607      	mov	r7, r0
 800bcb2:	4688      	mov	r8, r1
 800bcb4:	4614      	mov	r4, r2
 800bcb6:	2600      	movs	r6, #0
 800bcb8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bcbc:	f1b9 0901 	subs.w	r9, r9, #1
 800bcc0:	d505      	bpl.n	800bcce <_fwalk_sglue+0x22>
 800bcc2:	6824      	ldr	r4, [r4, #0]
 800bcc4:	2c00      	cmp	r4, #0
 800bcc6:	d1f7      	bne.n	800bcb8 <_fwalk_sglue+0xc>
 800bcc8:	4630      	mov	r0, r6
 800bcca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bcce:	89ab      	ldrh	r3, [r5, #12]
 800bcd0:	2b01      	cmp	r3, #1
 800bcd2:	d907      	bls.n	800bce4 <_fwalk_sglue+0x38>
 800bcd4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bcd8:	3301      	adds	r3, #1
 800bcda:	d003      	beq.n	800bce4 <_fwalk_sglue+0x38>
 800bcdc:	4629      	mov	r1, r5
 800bcde:	4638      	mov	r0, r7
 800bce0:	47c0      	blx	r8
 800bce2:	4306      	orrs	r6, r0
 800bce4:	3568      	adds	r5, #104	; 0x68
 800bce6:	e7e9      	b.n	800bcbc <_fwalk_sglue+0x10>

0800bce8 <iprintf>:
 800bce8:	b40f      	push	{r0, r1, r2, r3}
 800bcea:	b507      	push	{r0, r1, r2, lr}
 800bcec:	4906      	ldr	r1, [pc, #24]	; (800bd08 <iprintf+0x20>)
 800bcee:	ab04      	add	r3, sp, #16
 800bcf0:	6808      	ldr	r0, [r1, #0]
 800bcf2:	f853 2b04 	ldr.w	r2, [r3], #4
 800bcf6:	6881      	ldr	r1, [r0, #8]
 800bcf8:	9301      	str	r3, [sp, #4]
 800bcfa:	f001 fea1 	bl	800da40 <_vfiprintf_r>
 800bcfe:	b003      	add	sp, #12
 800bd00:	f85d eb04 	ldr.w	lr, [sp], #4
 800bd04:	b004      	add	sp, #16
 800bd06:	4770      	bx	lr
 800bd08:	20000078 	.word	0x20000078

0800bd0c <putchar>:
 800bd0c:	4b02      	ldr	r3, [pc, #8]	; (800bd18 <putchar+0xc>)
 800bd0e:	4601      	mov	r1, r0
 800bd10:	6818      	ldr	r0, [r3, #0]
 800bd12:	6882      	ldr	r2, [r0, #8]
 800bd14:	f002 b8d0 	b.w	800deb8 <_putc_r>
 800bd18:	20000078 	.word	0x20000078

0800bd1c <_puts_r>:
 800bd1c:	6a03      	ldr	r3, [r0, #32]
 800bd1e:	b570      	push	{r4, r5, r6, lr}
 800bd20:	6884      	ldr	r4, [r0, #8]
 800bd22:	4605      	mov	r5, r0
 800bd24:	460e      	mov	r6, r1
 800bd26:	b90b      	cbnz	r3, 800bd2c <_puts_r+0x10>
 800bd28:	f7ff ffa8 	bl	800bc7c <__sinit>
 800bd2c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bd2e:	07db      	lsls	r3, r3, #31
 800bd30:	d405      	bmi.n	800bd3e <_puts_r+0x22>
 800bd32:	89a3      	ldrh	r3, [r4, #12]
 800bd34:	0598      	lsls	r0, r3, #22
 800bd36:	d402      	bmi.n	800bd3e <_puts_r+0x22>
 800bd38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bd3a:	f000 fa85 	bl	800c248 <__retarget_lock_acquire_recursive>
 800bd3e:	89a3      	ldrh	r3, [r4, #12]
 800bd40:	0719      	lsls	r1, r3, #28
 800bd42:	d513      	bpl.n	800bd6c <_puts_r+0x50>
 800bd44:	6923      	ldr	r3, [r4, #16]
 800bd46:	b18b      	cbz	r3, 800bd6c <_puts_r+0x50>
 800bd48:	3e01      	subs	r6, #1
 800bd4a:	68a3      	ldr	r3, [r4, #8]
 800bd4c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800bd50:	3b01      	subs	r3, #1
 800bd52:	60a3      	str	r3, [r4, #8]
 800bd54:	b9e9      	cbnz	r1, 800bd92 <_puts_r+0x76>
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	da2e      	bge.n	800bdb8 <_puts_r+0x9c>
 800bd5a:	4622      	mov	r2, r4
 800bd5c:	210a      	movs	r1, #10
 800bd5e:	4628      	mov	r0, r5
 800bd60:	f000 f89b 	bl	800be9a <__swbuf_r>
 800bd64:	3001      	adds	r0, #1
 800bd66:	d007      	beq.n	800bd78 <_puts_r+0x5c>
 800bd68:	250a      	movs	r5, #10
 800bd6a:	e007      	b.n	800bd7c <_puts_r+0x60>
 800bd6c:	4621      	mov	r1, r4
 800bd6e:	4628      	mov	r0, r5
 800bd70:	f000 f8d0 	bl	800bf14 <__swsetup_r>
 800bd74:	2800      	cmp	r0, #0
 800bd76:	d0e7      	beq.n	800bd48 <_puts_r+0x2c>
 800bd78:	f04f 35ff 	mov.w	r5, #4294967295
 800bd7c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bd7e:	07da      	lsls	r2, r3, #31
 800bd80:	d405      	bmi.n	800bd8e <_puts_r+0x72>
 800bd82:	89a3      	ldrh	r3, [r4, #12]
 800bd84:	059b      	lsls	r3, r3, #22
 800bd86:	d402      	bmi.n	800bd8e <_puts_r+0x72>
 800bd88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bd8a:	f000 fa5e 	bl	800c24a <__retarget_lock_release_recursive>
 800bd8e:	4628      	mov	r0, r5
 800bd90:	bd70      	pop	{r4, r5, r6, pc}
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	da04      	bge.n	800bda0 <_puts_r+0x84>
 800bd96:	69a2      	ldr	r2, [r4, #24]
 800bd98:	429a      	cmp	r2, r3
 800bd9a:	dc06      	bgt.n	800bdaa <_puts_r+0x8e>
 800bd9c:	290a      	cmp	r1, #10
 800bd9e:	d004      	beq.n	800bdaa <_puts_r+0x8e>
 800bda0:	6823      	ldr	r3, [r4, #0]
 800bda2:	1c5a      	adds	r2, r3, #1
 800bda4:	6022      	str	r2, [r4, #0]
 800bda6:	7019      	strb	r1, [r3, #0]
 800bda8:	e7cf      	b.n	800bd4a <_puts_r+0x2e>
 800bdaa:	4622      	mov	r2, r4
 800bdac:	4628      	mov	r0, r5
 800bdae:	f000 f874 	bl	800be9a <__swbuf_r>
 800bdb2:	3001      	adds	r0, #1
 800bdb4:	d1c9      	bne.n	800bd4a <_puts_r+0x2e>
 800bdb6:	e7df      	b.n	800bd78 <_puts_r+0x5c>
 800bdb8:	6823      	ldr	r3, [r4, #0]
 800bdba:	250a      	movs	r5, #10
 800bdbc:	1c5a      	adds	r2, r3, #1
 800bdbe:	6022      	str	r2, [r4, #0]
 800bdc0:	701d      	strb	r5, [r3, #0]
 800bdc2:	e7db      	b.n	800bd7c <_puts_r+0x60>

0800bdc4 <puts>:
 800bdc4:	4b02      	ldr	r3, [pc, #8]	; (800bdd0 <puts+0xc>)
 800bdc6:	4601      	mov	r1, r0
 800bdc8:	6818      	ldr	r0, [r3, #0]
 800bdca:	f7ff bfa7 	b.w	800bd1c <_puts_r>
 800bdce:	bf00      	nop
 800bdd0:	20000078 	.word	0x20000078

0800bdd4 <siprintf>:
 800bdd4:	b40e      	push	{r1, r2, r3}
 800bdd6:	b500      	push	{lr}
 800bdd8:	b09c      	sub	sp, #112	; 0x70
 800bdda:	ab1d      	add	r3, sp, #116	; 0x74
 800bddc:	9002      	str	r0, [sp, #8]
 800bdde:	9006      	str	r0, [sp, #24]
 800bde0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bde4:	4809      	ldr	r0, [pc, #36]	; (800be0c <siprintf+0x38>)
 800bde6:	9107      	str	r1, [sp, #28]
 800bde8:	9104      	str	r1, [sp, #16]
 800bdea:	4909      	ldr	r1, [pc, #36]	; (800be10 <siprintf+0x3c>)
 800bdec:	f853 2b04 	ldr.w	r2, [r3], #4
 800bdf0:	9105      	str	r1, [sp, #20]
 800bdf2:	6800      	ldr	r0, [r0, #0]
 800bdf4:	9301      	str	r3, [sp, #4]
 800bdf6:	a902      	add	r1, sp, #8
 800bdf8:	f001 fcfa 	bl	800d7f0 <_svfiprintf_r>
 800bdfc:	9b02      	ldr	r3, [sp, #8]
 800bdfe:	2200      	movs	r2, #0
 800be00:	701a      	strb	r2, [r3, #0]
 800be02:	b01c      	add	sp, #112	; 0x70
 800be04:	f85d eb04 	ldr.w	lr, [sp], #4
 800be08:	b003      	add	sp, #12
 800be0a:	4770      	bx	lr
 800be0c:	20000078 	.word	0x20000078
 800be10:	ffff0208 	.word	0xffff0208

0800be14 <__sread>:
 800be14:	b510      	push	{r4, lr}
 800be16:	460c      	mov	r4, r1
 800be18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be1c:	f000 f9b6 	bl	800c18c <_read_r>
 800be20:	2800      	cmp	r0, #0
 800be22:	bfab      	itete	ge
 800be24:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800be26:	89a3      	ldrhlt	r3, [r4, #12]
 800be28:	181b      	addge	r3, r3, r0
 800be2a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800be2e:	bfac      	ite	ge
 800be30:	6563      	strge	r3, [r4, #84]	; 0x54
 800be32:	81a3      	strhlt	r3, [r4, #12]
 800be34:	bd10      	pop	{r4, pc}

0800be36 <__swrite>:
 800be36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be3a:	461f      	mov	r7, r3
 800be3c:	898b      	ldrh	r3, [r1, #12]
 800be3e:	05db      	lsls	r3, r3, #23
 800be40:	4605      	mov	r5, r0
 800be42:	460c      	mov	r4, r1
 800be44:	4616      	mov	r6, r2
 800be46:	d505      	bpl.n	800be54 <__swrite+0x1e>
 800be48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be4c:	2302      	movs	r3, #2
 800be4e:	2200      	movs	r2, #0
 800be50:	f000 f98a 	bl	800c168 <_lseek_r>
 800be54:	89a3      	ldrh	r3, [r4, #12]
 800be56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800be5a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800be5e:	81a3      	strh	r3, [r4, #12]
 800be60:	4632      	mov	r2, r6
 800be62:	463b      	mov	r3, r7
 800be64:	4628      	mov	r0, r5
 800be66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800be6a:	f000 b9b1 	b.w	800c1d0 <_write_r>

0800be6e <__sseek>:
 800be6e:	b510      	push	{r4, lr}
 800be70:	460c      	mov	r4, r1
 800be72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be76:	f000 f977 	bl	800c168 <_lseek_r>
 800be7a:	1c43      	adds	r3, r0, #1
 800be7c:	89a3      	ldrh	r3, [r4, #12]
 800be7e:	bf15      	itete	ne
 800be80:	6560      	strne	r0, [r4, #84]	; 0x54
 800be82:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800be86:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800be8a:	81a3      	strheq	r3, [r4, #12]
 800be8c:	bf18      	it	ne
 800be8e:	81a3      	strhne	r3, [r4, #12]
 800be90:	bd10      	pop	{r4, pc}

0800be92 <__sclose>:
 800be92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be96:	f000 b957 	b.w	800c148 <_close_r>

0800be9a <__swbuf_r>:
 800be9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be9c:	460e      	mov	r6, r1
 800be9e:	4614      	mov	r4, r2
 800bea0:	4605      	mov	r5, r0
 800bea2:	b118      	cbz	r0, 800beac <__swbuf_r+0x12>
 800bea4:	6a03      	ldr	r3, [r0, #32]
 800bea6:	b90b      	cbnz	r3, 800beac <__swbuf_r+0x12>
 800bea8:	f7ff fee8 	bl	800bc7c <__sinit>
 800beac:	69a3      	ldr	r3, [r4, #24]
 800beae:	60a3      	str	r3, [r4, #8]
 800beb0:	89a3      	ldrh	r3, [r4, #12]
 800beb2:	071a      	lsls	r2, r3, #28
 800beb4:	d525      	bpl.n	800bf02 <__swbuf_r+0x68>
 800beb6:	6923      	ldr	r3, [r4, #16]
 800beb8:	b31b      	cbz	r3, 800bf02 <__swbuf_r+0x68>
 800beba:	6823      	ldr	r3, [r4, #0]
 800bebc:	6922      	ldr	r2, [r4, #16]
 800bebe:	1a98      	subs	r0, r3, r2
 800bec0:	6963      	ldr	r3, [r4, #20]
 800bec2:	b2f6      	uxtb	r6, r6
 800bec4:	4283      	cmp	r3, r0
 800bec6:	4637      	mov	r7, r6
 800bec8:	dc04      	bgt.n	800bed4 <__swbuf_r+0x3a>
 800beca:	4621      	mov	r1, r4
 800becc:	4628      	mov	r0, r5
 800bece:	f001 ff57 	bl	800dd80 <_fflush_r>
 800bed2:	b9e0      	cbnz	r0, 800bf0e <__swbuf_r+0x74>
 800bed4:	68a3      	ldr	r3, [r4, #8]
 800bed6:	3b01      	subs	r3, #1
 800bed8:	60a3      	str	r3, [r4, #8]
 800beda:	6823      	ldr	r3, [r4, #0]
 800bedc:	1c5a      	adds	r2, r3, #1
 800bede:	6022      	str	r2, [r4, #0]
 800bee0:	701e      	strb	r6, [r3, #0]
 800bee2:	6962      	ldr	r2, [r4, #20]
 800bee4:	1c43      	adds	r3, r0, #1
 800bee6:	429a      	cmp	r2, r3
 800bee8:	d004      	beq.n	800bef4 <__swbuf_r+0x5a>
 800beea:	89a3      	ldrh	r3, [r4, #12]
 800beec:	07db      	lsls	r3, r3, #31
 800beee:	d506      	bpl.n	800befe <__swbuf_r+0x64>
 800bef0:	2e0a      	cmp	r6, #10
 800bef2:	d104      	bne.n	800befe <__swbuf_r+0x64>
 800bef4:	4621      	mov	r1, r4
 800bef6:	4628      	mov	r0, r5
 800bef8:	f001 ff42 	bl	800dd80 <_fflush_r>
 800befc:	b938      	cbnz	r0, 800bf0e <__swbuf_r+0x74>
 800befe:	4638      	mov	r0, r7
 800bf00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf02:	4621      	mov	r1, r4
 800bf04:	4628      	mov	r0, r5
 800bf06:	f000 f805 	bl	800bf14 <__swsetup_r>
 800bf0a:	2800      	cmp	r0, #0
 800bf0c:	d0d5      	beq.n	800beba <__swbuf_r+0x20>
 800bf0e:	f04f 37ff 	mov.w	r7, #4294967295
 800bf12:	e7f4      	b.n	800befe <__swbuf_r+0x64>

0800bf14 <__swsetup_r>:
 800bf14:	b538      	push	{r3, r4, r5, lr}
 800bf16:	4b2a      	ldr	r3, [pc, #168]	; (800bfc0 <__swsetup_r+0xac>)
 800bf18:	4605      	mov	r5, r0
 800bf1a:	6818      	ldr	r0, [r3, #0]
 800bf1c:	460c      	mov	r4, r1
 800bf1e:	b118      	cbz	r0, 800bf28 <__swsetup_r+0x14>
 800bf20:	6a03      	ldr	r3, [r0, #32]
 800bf22:	b90b      	cbnz	r3, 800bf28 <__swsetup_r+0x14>
 800bf24:	f7ff feaa 	bl	800bc7c <__sinit>
 800bf28:	89a3      	ldrh	r3, [r4, #12]
 800bf2a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bf2e:	0718      	lsls	r0, r3, #28
 800bf30:	d422      	bmi.n	800bf78 <__swsetup_r+0x64>
 800bf32:	06d9      	lsls	r1, r3, #27
 800bf34:	d407      	bmi.n	800bf46 <__swsetup_r+0x32>
 800bf36:	2309      	movs	r3, #9
 800bf38:	602b      	str	r3, [r5, #0]
 800bf3a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bf3e:	81a3      	strh	r3, [r4, #12]
 800bf40:	f04f 30ff 	mov.w	r0, #4294967295
 800bf44:	e034      	b.n	800bfb0 <__swsetup_r+0x9c>
 800bf46:	0758      	lsls	r0, r3, #29
 800bf48:	d512      	bpl.n	800bf70 <__swsetup_r+0x5c>
 800bf4a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bf4c:	b141      	cbz	r1, 800bf60 <__swsetup_r+0x4c>
 800bf4e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bf52:	4299      	cmp	r1, r3
 800bf54:	d002      	beq.n	800bf5c <__swsetup_r+0x48>
 800bf56:	4628      	mov	r0, r5
 800bf58:	f001 f828 	bl	800cfac <_free_r>
 800bf5c:	2300      	movs	r3, #0
 800bf5e:	6363      	str	r3, [r4, #52]	; 0x34
 800bf60:	89a3      	ldrh	r3, [r4, #12]
 800bf62:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bf66:	81a3      	strh	r3, [r4, #12]
 800bf68:	2300      	movs	r3, #0
 800bf6a:	6063      	str	r3, [r4, #4]
 800bf6c:	6923      	ldr	r3, [r4, #16]
 800bf6e:	6023      	str	r3, [r4, #0]
 800bf70:	89a3      	ldrh	r3, [r4, #12]
 800bf72:	f043 0308 	orr.w	r3, r3, #8
 800bf76:	81a3      	strh	r3, [r4, #12]
 800bf78:	6923      	ldr	r3, [r4, #16]
 800bf7a:	b94b      	cbnz	r3, 800bf90 <__swsetup_r+0x7c>
 800bf7c:	89a3      	ldrh	r3, [r4, #12]
 800bf7e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bf82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bf86:	d003      	beq.n	800bf90 <__swsetup_r+0x7c>
 800bf88:	4621      	mov	r1, r4
 800bf8a:	4628      	mov	r0, r5
 800bf8c:	f001 ff58 	bl	800de40 <__smakebuf_r>
 800bf90:	89a0      	ldrh	r0, [r4, #12]
 800bf92:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bf96:	f010 0301 	ands.w	r3, r0, #1
 800bf9a:	d00a      	beq.n	800bfb2 <__swsetup_r+0x9e>
 800bf9c:	2300      	movs	r3, #0
 800bf9e:	60a3      	str	r3, [r4, #8]
 800bfa0:	6963      	ldr	r3, [r4, #20]
 800bfa2:	425b      	negs	r3, r3
 800bfa4:	61a3      	str	r3, [r4, #24]
 800bfa6:	6923      	ldr	r3, [r4, #16]
 800bfa8:	b943      	cbnz	r3, 800bfbc <__swsetup_r+0xa8>
 800bfaa:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bfae:	d1c4      	bne.n	800bf3a <__swsetup_r+0x26>
 800bfb0:	bd38      	pop	{r3, r4, r5, pc}
 800bfb2:	0781      	lsls	r1, r0, #30
 800bfb4:	bf58      	it	pl
 800bfb6:	6963      	ldrpl	r3, [r4, #20]
 800bfb8:	60a3      	str	r3, [r4, #8]
 800bfba:	e7f4      	b.n	800bfa6 <__swsetup_r+0x92>
 800bfbc:	2000      	movs	r0, #0
 800bfbe:	e7f7      	b.n	800bfb0 <__swsetup_r+0x9c>
 800bfc0:	20000078 	.word	0x20000078

0800bfc4 <memcmp>:
 800bfc4:	b510      	push	{r4, lr}
 800bfc6:	3901      	subs	r1, #1
 800bfc8:	4402      	add	r2, r0
 800bfca:	4290      	cmp	r0, r2
 800bfcc:	d101      	bne.n	800bfd2 <memcmp+0xe>
 800bfce:	2000      	movs	r0, #0
 800bfd0:	e005      	b.n	800bfde <memcmp+0x1a>
 800bfd2:	7803      	ldrb	r3, [r0, #0]
 800bfd4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800bfd8:	42a3      	cmp	r3, r4
 800bfda:	d001      	beq.n	800bfe0 <memcmp+0x1c>
 800bfdc:	1b18      	subs	r0, r3, r4
 800bfde:	bd10      	pop	{r4, pc}
 800bfe0:	3001      	adds	r0, #1
 800bfe2:	e7f2      	b.n	800bfca <memcmp+0x6>

0800bfe4 <memset>:
 800bfe4:	4402      	add	r2, r0
 800bfe6:	4603      	mov	r3, r0
 800bfe8:	4293      	cmp	r3, r2
 800bfea:	d100      	bne.n	800bfee <memset+0xa>
 800bfec:	4770      	bx	lr
 800bfee:	f803 1b01 	strb.w	r1, [r3], #1
 800bff2:	e7f9      	b.n	800bfe8 <memset+0x4>

0800bff4 <strcat>:
 800bff4:	b510      	push	{r4, lr}
 800bff6:	4602      	mov	r2, r0
 800bff8:	7814      	ldrb	r4, [r2, #0]
 800bffa:	4613      	mov	r3, r2
 800bffc:	3201      	adds	r2, #1
 800bffe:	2c00      	cmp	r4, #0
 800c000:	d1fa      	bne.n	800bff8 <strcat+0x4>
 800c002:	3b01      	subs	r3, #1
 800c004:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c008:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c00c:	2a00      	cmp	r2, #0
 800c00e:	d1f9      	bne.n	800c004 <strcat+0x10>
 800c010:	bd10      	pop	{r4, pc}

0800c012 <strncmp>:
 800c012:	b510      	push	{r4, lr}
 800c014:	b16a      	cbz	r2, 800c032 <strncmp+0x20>
 800c016:	3901      	subs	r1, #1
 800c018:	1884      	adds	r4, r0, r2
 800c01a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c01e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c022:	429a      	cmp	r2, r3
 800c024:	d103      	bne.n	800c02e <strncmp+0x1c>
 800c026:	42a0      	cmp	r0, r4
 800c028:	d001      	beq.n	800c02e <strncmp+0x1c>
 800c02a:	2a00      	cmp	r2, #0
 800c02c:	d1f5      	bne.n	800c01a <strncmp+0x8>
 800c02e:	1ad0      	subs	r0, r2, r3
 800c030:	bd10      	pop	{r4, pc}
 800c032:	4610      	mov	r0, r2
 800c034:	e7fc      	b.n	800c030 <strncmp+0x1e>

0800c036 <strncpy>:
 800c036:	b510      	push	{r4, lr}
 800c038:	3901      	subs	r1, #1
 800c03a:	4603      	mov	r3, r0
 800c03c:	b132      	cbz	r2, 800c04c <strncpy+0x16>
 800c03e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c042:	f803 4b01 	strb.w	r4, [r3], #1
 800c046:	3a01      	subs	r2, #1
 800c048:	2c00      	cmp	r4, #0
 800c04a:	d1f7      	bne.n	800c03c <strncpy+0x6>
 800c04c:	441a      	add	r2, r3
 800c04e:	2100      	movs	r1, #0
 800c050:	4293      	cmp	r3, r2
 800c052:	d100      	bne.n	800c056 <strncpy+0x20>
 800c054:	bd10      	pop	{r4, pc}
 800c056:	f803 1b01 	strb.w	r1, [r3], #1
 800c05a:	e7f9      	b.n	800c050 <strncpy+0x1a>

0800c05c <strtok>:
 800c05c:	4b16      	ldr	r3, [pc, #88]	; (800c0b8 <strtok+0x5c>)
 800c05e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c060:	681e      	ldr	r6, [r3, #0]
 800c062:	6c74      	ldr	r4, [r6, #68]	; 0x44
 800c064:	4605      	mov	r5, r0
 800c066:	b9fc      	cbnz	r4, 800c0a8 <strtok+0x4c>
 800c068:	2050      	movs	r0, #80	; 0x50
 800c06a:	9101      	str	r1, [sp, #4]
 800c06c:	f7ff f872 	bl	800b154 <malloc>
 800c070:	9901      	ldr	r1, [sp, #4]
 800c072:	6470      	str	r0, [r6, #68]	; 0x44
 800c074:	4602      	mov	r2, r0
 800c076:	b920      	cbnz	r0, 800c082 <strtok+0x26>
 800c078:	4b10      	ldr	r3, [pc, #64]	; (800c0bc <strtok+0x60>)
 800c07a:	4811      	ldr	r0, [pc, #68]	; (800c0c0 <strtok+0x64>)
 800c07c:	215b      	movs	r1, #91	; 0x5b
 800c07e:	f000 f8fb 	bl	800c278 <__assert_func>
 800c082:	e9c0 4400 	strd	r4, r4, [r0]
 800c086:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800c08a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800c08e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800c092:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800c096:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800c09a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800c09e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800c0a2:	6184      	str	r4, [r0, #24]
 800c0a4:	7704      	strb	r4, [r0, #28]
 800c0a6:	6244      	str	r4, [r0, #36]	; 0x24
 800c0a8:	6c72      	ldr	r2, [r6, #68]	; 0x44
 800c0aa:	2301      	movs	r3, #1
 800c0ac:	4628      	mov	r0, r5
 800c0ae:	b002      	add	sp, #8
 800c0b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c0b4:	f000 b806 	b.w	800c0c4 <__strtok_r>
 800c0b8:	20000078 	.word	0x20000078
 800c0bc:	0802179c 	.word	0x0802179c
 800c0c0:	080217b3 	.word	0x080217b3

0800c0c4 <__strtok_r>:
 800c0c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c0c6:	b908      	cbnz	r0, 800c0cc <__strtok_r+0x8>
 800c0c8:	6810      	ldr	r0, [r2, #0]
 800c0ca:	b188      	cbz	r0, 800c0f0 <__strtok_r+0x2c>
 800c0cc:	4604      	mov	r4, r0
 800c0ce:	4620      	mov	r0, r4
 800c0d0:	f814 5b01 	ldrb.w	r5, [r4], #1
 800c0d4:	460f      	mov	r7, r1
 800c0d6:	f817 6b01 	ldrb.w	r6, [r7], #1
 800c0da:	b91e      	cbnz	r6, 800c0e4 <__strtok_r+0x20>
 800c0dc:	b965      	cbnz	r5, 800c0f8 <__strtok_r+0x34>
 800c0de:	6015      	str	r5, [r2, #0]
 800c0e0:	4628      	mov	r0, r5
 800c0e2:	e005      	b.n	800c0f0 <__strtok_r+0x2c>
 800c0e4:	42b5      	cmp	r5, r6
 800c0e6:	d1f6      	bne.n	800c0d6 <__strtok_r+0x12>
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d1f0      	bne.n	800c0ce <__strtok_r+0xa>
 800c0ec:	6014      	str	r4, [r2, #0]
 800c0ee:	7003      	strb	r3, [r0, #0]
 800c0f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c0f2:	461c      	mov	r4, r3
 800c0f4:	e00c      	b.n	800c110 <__strtok_r+0x4c>
 800c0f6:	b915      	cbnz	r5, 800c0fe <__strtok_r+0x3a>
 800c0f8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c0fc:	460e      	mov	r6, r1
 800c0fe:	f816 5b01 	ldrb.w	r5, [r6], #1
 800c102:	42ab      	cmp	r3, r5
 800c104:	d1f7      	bne.n	800c0f6 <__strtok_r+0x32>
 800c106:	2b00      	cmp	r3, #0
 800c108:	d0f3      	beq.n	800c0f2 <__strtok_r+0x2e>
 800c10a:	2300      	movs	r3, #0
 800c10c:	f804 3c01 	strb.w	r3, [r4, #-1]
 800c110:	6014      	str	r4, [r2, #0]
 800c112:	e7ed      	b.n	800c0f0 <__strtok_r+0x2c>

0800c114 <strstr>:
 800c114:	780a      	ldrb	r2, [r1, #0]
 800c116:	b570      	push	{r4, r5, r6, lr}
 800c118:	b96a      	cbnz	r2, 800c136 <strstr+0x22>
 800c11a:	bd70      	pop	{r4, r5, r6, pc}
 800c11c:	429a      	cmp	r2, r3
 800c11e:	d109      	bne.n	800c134 <strstr+0x20>
 800c120:	460c      	mov	r4, r1
 800c122:	4605      	mov	r5, r0
 800c124:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d0f6      	beq.n	800c11a <strstr+0x6>
 800c12c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800c130:	429e      	cmp	r6, r3
 800c132:	d0f7      	beq.n	800c124 <strstr+0x10>
 800c134:	3001      	adds	r0, #1
 800c136:	7803      	ldrb	r3, [r0, #0]
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d1ef      	bne.n	800c11c <strstr+0x8>
 800c13c:	4618      	mov	r0, r3
 800c13e:	e7ec      	b.n	800c11a <strstr+0x6>

0800c140 <_localeconv_r>:
 800c140:	4800      	ldr	r0, [pc, #0]	; (800c144 <_localeconv_r+0x4>)
 800c142:	4770      	bx	lr
 800c144:	2000016c 	.word	0x2000016c

0800c148 <_close_r>:
 800c148:	b538      	push	{r3, r4, r5, lr}
 800c14a:	4d06      	ldr	r5, [pc, #24]	; (800c164 <_close_r+0x1c>)
 800c14c:	2300      	movs	r3, #0
 800c14e:	4604      	mov	r4, r0
 800c150:	4608      	mov	r0, r1
 800c152:	602b      	str	r3, [r5, #0]
 800c154:	f7f5 fe4c 	bl	8001df0 <_close>
 800c158:	1c43      	adds	r3, r0, #1
 800c15a:	d102      	bne.n	800c162 <_close_r+0x1a>
 800c15c:	682b      	ldr	r3, [r5, #0]
 800c15e:	b103      	cbz	r3, 800c162 <_close_r+0x1a>
 800c160:	6023      	str	r3, [r4, #0]
 800c162:	bd38      	pop	{r3, r4, r5, pc}
 800c164:	2002973c 	.word	0x2002973c

0800c168 <_lseek_r>:
 800c168:	b538      	push	{r3, r4, r5, lr}
 800c16a:	4d07      	ldr	r5, [pc, #28]	; (800c188 <_lseek_r+0x20>)
 800c16c:	4604      	mov	r4, r0
 800c16e:	4608      	mov	r0, r1
 800c170:	4611      	mov	r1, r2
 800c172:	2200      	movs	r2, #0
 800c174:	602a      	str	r2, [r5, #0]
 800c176:	461a      	mov	r2, r3
 800c178:	f7f5 fe61 	bl	8001e3e <_lseek>
 800c17c:	1c43      	adds	r3, r0, #1
 800c17e:	d102      	bne.n	800c186 <_lseek_r+0x1e>
 800c180:	682b      	ldr	r3, [r5, #0]
 800c182:	b103      	cbz	r3, 800c186 <_lseek_r+0x1e>
 800c184:	6023      	str	r3, [r4, #0]
 800c186:	bd38      	pop	{r3, r4, r5, pc}
 800c188:	2002973c 	.word	0x2002973c

0800c18c <_read_r>:
 800c18c:	b538      	push	{r3, r4, r5, lr}
 800c18e:	4d07      	ldr	r5, [pc, #28]	; (800c1ac <_read_r+0x20>)
 800c190:	4604      	mov	r4, r0
 800c192:	4608      	mov	r0, r1
 800c194:	4611      	mov	r1, r2
 800c196:	2200      	movs	r2, #0
 800c198:	602a      	str	r2, [r5, #0]
 800c19a:	461a      	mov	r2, r3
 800c19c:	f7f5 fdef 	bl	8001d7e <_read>
 800c1a0:	1c43      	adds	r3, r0, #1
 800c1a2:	d102      	bne.n	800c1aa <_read_r+0x1e>
 800c1a4:	682b      	ldr	r3, [r5, #0]
 800c1a6:	b103      	cbz	r3, 800c1aa <_read_r+0x1e>
 800c1a8:	6023      	str	r3, [r4, #0]
 800c1aa:	bd38      	pop	{r3, r4, r5, pc}
 800c1ac:	2002973c 	.word	0x2002973c

0800c1b0 <_sbrk_r>:
 800c1b0:	b538      	push	{r3, r4, r5, lr}
 800c1b2:	4d06      	ldr	r5, [pc, #24]	; (800c1cc <_sbrk_r+0x1c>)
 800c1b4:	2300      	movs	r3, #0
 800c1b6:	4604      	mov	r4, r0
 800c1b8:	4608      	mov	r0, r1
 800c1ba:	602b      	str	r3, [r5, #0]
 800c1bc:	f7f5 fe4c 	bl	8001e58 <_sbrk>
 800c1c0:	1c43      	adds	r3, r0, #1
 800c1c2:	d102      	bne.n	800c1ca <_sbrk_r+0x1a>
 800c1c4:	682b      	ldr	r3, [r5, #0]
 800c1c6:	b103      	cbz	r3, 800c1ca <_sbrk_r+0x1a>
 800c1c8:	6023      	str	r3, [r4, #0]
 800c1ca:	bd38      	pop	{r3, r4, r5, pc}
 800c1cc:	2002973c 	.word	0x2002973c

0800c1d0 <_write_r>:
 800c1d0:	b538      	push	{r3, r4, r5, lr}
 800c1d2:	4d07      	ldr	r5, [pc, #28]	; (800c1f0 <_write_r+0x20>)
 800c1d4:	4604      	mov	r4, r0
 800c1d6:	4608      	mov	r0, r1
 800c1d8:	4611      	mov	r1, r2
 800c1da:	2200      	movs	r2, #0
 800c1dc:	602a      	str	r2, [r5, #0]
 800c1de:	461a      	mov	r2, r3
 800c1e0:	f7f5 fdea 	bl	8001db8 <_write>
 800c1e4:	1c43      	adds	r3, r0, #1
 800c1e6:	d102      	bne.n	800c1ee <_write_r+0x1e>
 800c1e8:	682b      	ldr	r3, [r5, #0]
 800c1ea:	b103      	cbz	r3, 800c1ee <_write_r+0x1e>
 800c1ec:	6023      	str	r3, [r4, #0]
 800c1ee:	bd38      	pop	{r3, r4, r5, pc}
 800c1f0:	2002973c 	.word	0x2002973c

0800c1f4 <__errno>:
 800c1f4:	4b01      	ldr	r3, [pc, #4]	; (800c1fc <__errno+0x8>)
 800c1f6:	6818      	ldr	r0, [r3, #0]
 800c1f8:	4770      	bx	lr
 800c1fa:	bf00      	nop
 800c1fc:	20000078 	.word	0x20000078

0800c200 <__libc_init_array>:
 800c200:	b570      	push	{r4, r5, r6, lr}
 800c202:	4d0d      	ldr	r5, [pc, #52]	; (800c238 <__libc_init_array+0x38>)
 800c204:	4c0d      	ldr	r4, [pc, #52]	; (800c23c <__libc_init_array+0x3c>)
 800c206:	1b64      	subs	r4, r4, r5
 800c208:	10a4      	asrs	r4, r4, #2
 800c20a:	2600      	movs	r6, #0
 800c20c:	42a6      	cmp	r6, r4
 800c20e:	d109      	bne.n	800c224 <__libc_init_array+0x24>
 800c210:	4d0b      	ldr	r5, [pc, #44]	; (800c240 <__libc_init_array+0x40>)
 800c212:	4c0c      	ldr	r4, [pc, #48]	; (800c244 <__libc_init_array+0x44>)
 800c214:	f001 ff9c 	bl	800e150 <_init>
 800c218:	1b64      	subs	r4, r4, r5
 800c21a:	10a4      	asrs	r4, r4, #2
 800c21c:	2600      	movs	r6, #0
 800c21e:	42a6      	cmp	r6, r4
 800c220:	d105      	bne.n	800c22e <__libc_init_array+0x2e>
 800c222:	bd70      	pop	{r4, r5, r6, pc}
 800c224:	f855 3b04 	ldr.w	r3, [r5], #4
 800c228:	4798      	blx	r3
 800c22a:	3601      	adds	r6, #1
 800c22c:	e7ee      	b.n	800c20c <__libc_init_array+0xc>
 800c22e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c232:	4798      	blx	r3
 800c234:	3601      	adds	r6, #1
 800c236:	e7f2      	b.n	800c21e <__libc_init_array+0x1e>
 800c238:	08021b38 	.word	0x08021b38
 800c23c:	08021b38 	.word	0x08021b38
 800c240:	08021b38 	.word	0x08021b38
 800c244:	08021b3c 	.word	0x08021b3c

0800c248 <__retarget_lock_acquire_recursive>:
 800c248:	4770      	bx	lr

0800c24a <__retarget_lock_release_recursive>:
 800c24a:	4770      	bx	lr

0800c24c <strcpy>:
 800c24c:	4603      	mov	r3, r0
 800c24e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c252:	f803 2b01 	strb.w	r2, [r3], #1
 800c256:	2a00      	cmp	r2, #0
 800c258:	d1f9      	bne.n	800c24e <strcpy+0x2>
 800c25a:	4770      	bx	lr

0800c25c <memcpy>:
 800c25c:	440a      	add	r2, r1
 800c25e:	4291      	cmp	r1, r2
 800c260:	f100 33ff 	add.w	r3, r0, #4294967295
 800c264:	d100      	bne.n	800c268 <memcpy+0xc>
 800c266:	4770      	bx	lr
 800c268:	b510      	push	{r4, lr}
 800c26a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c26e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c272:	4291      	cmp	r1, r2
 800c274:	d1f9      	bne.n	800c26a <memcpy+0xe>
 800c276:	bd10      	pop	{r4, pc}

0800c278 <__assert_func>:
 800c278:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c27a:	4614      	mov	r4, r2
 800c27c:	461a      	mov	r2, r3
 800c27e:	4b09      	ldr	r3, [pc, #36]	; (800c2a4 <__assert_func+0x2c>)
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	4605      	mov	r5, r0
 800c284:	68d8      	ldr	r0, [r3, #12]
 800c286:	b14c      	cbz	r4, 800c29c <__assert_func+0x24>
 800c288:	4b07      	ldr	r3, [pc, #28]	; (800c2a8 <__assert_func+0x30>)
 800c28a:	9100      	str	r1, [sp, #0]
 800c28c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c290:	4906      	ldr	r1, [pc, #24]	; (800c2ac <__assert_func+0x34>)
 800c292:	462b      	mov	r3, r5
 800c294:	f001 fd9c 	bl	800ddd0 <fiprintf>
 800c298:	f001 fe7e 	bl	800df98 <abort>
 800c29c:	4b04      	ldr	r3, [pc, #16]	; (800c2b0 <__assert_func+0x38>)
 800c29e:	461c      	mov	r4, r3
 800c2a0:	e7f3      	b.n	800c28a <__assert_func+0x12>
 800c2a2:	bf00      	nop
 800c2a4:	20000078 	.word	0x20000078
 800c2a8:	0802180d 	.word	0x0802180d
 800c2ac:	0802181a 	.word	0x0802181a
 800c2b0:	08021848 	.word	0x08021848

0800c2b4 <quorem>:
 800c2b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2b8:	6903      	ldr	r3, [r0, #16]
 800c2ba:	690c      	ldr	r4, [r1, #16]
 800c2bc:	42a3      	cmp	r3, r4
 800c2be:	4607      	mov	r7, r0
 800c2c0:	db7e      	blt.n	800c3c0 <quorem+0x10c>
 800c2c2:	3c01      	subs	r4, #1
 800c2c4:	f101 0814 	add.w	r8, r1, #20
 800c2c8:	f100 0514 	add.w	r5, r0, #20
 800c2cc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c2d0:	9301      	str	r3, [sp, #4]
 800c2d2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c2d6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c2da:	3301      	adds	r3, #1
 800c2dc:	429a      	cmp	r2, r3
 800c2de:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c2e2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c2e6:	fbb2 f6f3 	udiv	r6, r2, r3
 800c2ea:	d331      	bcc.n	800c350 <quorem+0x9c>
 800c2ec:	f04f 0e00 	mov.w	lr, #0
 800c2f0:	4640      	mov	r0, r8
 800c2f2:	46ac      	mov	ip, r5
 800c2f4:	46f2      	mov	sl, lr
 800c2f6:	f850 2b04 	ldr.w	r2, [r0], #4
 800c2fa:	b293      	uxth	r3, r2
 800c2fc:	fb06 e303 	mla	r3, r6, r3, lr
 800c300:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c304:	0c1a      	lsrs	r2, r3, #16
 800c306:	b29b      	uxth	r3, r3
 800c308:	ebaa 0303 	sub.w	r3, sl, r3
 800c30c:	f8dc a000 	ldr.w	sl, [ip]
 800c310:	fa13 f38a 	uxtah	r3, r3, sl
 800c314:	fb06 220e 	mla	r2, r6, lr, r2
 800c318:	9300      	str	r3, [sp, #0]
 800c31a:	9b00      	ldr	r3, [sp, #0]
 800c31c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c320:	b292      	uxth	r2, r2
 800c322:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c326:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c32a:	f8bd 3000 	ldrh.w	r3, [sp]
 800c32e:	4581      	cmp	r9, r0
 800c330:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c334:	f84c 3b04 	str.w	r3, [ip], #4
 800c338:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c33c:	d2db      	bcs.n	800c2f6 <quorem+0x42>
 800c33e:	f855 300b 	ldr.w	r3, [r5, fp]
 800c342:	b92b      	cbnz	r3, 800c350 <quorem+0x9c>
 800c344:	9b01      	ldr	r3, [sp, #4]
 800c346:	3b04      	subs	r3, #4
 800c348:	429d      	cmp	r5, r3
 800c34a:	461a      	mov	r2, r3
 800c34c:	d32c      	bcc.n	800c3a8 <quorem+0xf4>
 800c34e:	613c      	str	r4, [r7, #16]
 800c350:	4638      	mov	r0, r7
 800c352:	f001 f8f3 	bl	800d53c <__mcmp>
 800c356:	2800      	cmp	r0, #0
 800c358:	db22      	blt.n	800c3a0 <quorem+0xec>
 800c35a:	3601      	adds	r6, #1
 800c35c:	4629      	mov	r1, r5
 800c35e:	2000      	movs	r0, #0
 800c360:	f858 2b04 	ldr.w	r2, [r8], #4
 800c364:	f8d1 c000 	ldr.w	ip, [r1]
 800c368:	b293      	uxth	r3, r2
 800c36a:	1ac3      	subs	r3, r0, r3
 800c36c:	0c12      	lsrs	r2, r2, #16
 800c36e:	fa13 f38c 	uxtah	r3, r3, ip
 800c372:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800c376:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c37a:	b29b      	uxth	r3, r3
 800c37c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c380:	45c1      	cmp	r9, r8
 800c382:	f841 3b04 	str.w	r3, [r1], #4
 800c386:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c38a:	d2e9      	bcs.n	800c360 <quorem+0xac>
 800c38c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c390:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c394:	b922      	cbnz	r2, 800c3a0 <quorem+0xec>
 800c396:	3b04      	subs	r3, #4
 800c398:	429d      	cmp	r5, r3
 800c39a:	461a      	mov	r2, r3
 800c39c:	d30a      	bcc.n	800c3b4 <quorem+0x100>
 800c39e:	613c      	str	r4, [r7, #16]
 800c3a0:	4630      	mov	r0, r6
 800c3a2:	b003      	add	sp, #12
 800c3a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3a8:	6812      	ldr	r2, [r2, #0]
 800c3aa:	3b04      	subs	r3, #4
 800c3ac:	2a00      	cmp	r2, #0
 800c3ae:	d1ce      	bne.n	800c34e <quorem+0x9a>
 800c3b0:	3c01      	subs	r4, #1
 800c3b2:	e7c9      	b.n	800c348 <quorem+0x94>
 800c3b4:	6812      	ldr	r2, [r2, #0]
 800c3b6:	3b04      	subs	r3, #4
 800c3b8:	2a00      	cmp	r2, #0
 800c3ba:	d1f0      	bne.n	800c39e <quorem+0xea>
 800c3bc:	3c01      	subs	r4, #1
 800c3be:	e7eb      	b.n	800c398 <quorem+0xe4>
 800c3c0:	2000      	movs	r0, #0
 800c3c2:	e7ee      	b.n	800c3a2 <quorem+0xee>
 800c3c4:	0000      	movs	r0, r0
	...

0800c3c8 <_dtoa_r>:
 800c3c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3cc:	ed2d 8b04 	vpush	{d8-d9}
 800c3d0:	69c5      	ldr	r5, [r0, #28]
 800c3d2:	b093      	sub	sp, #76	; 0x4c
 800c3d4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c3d8:	ec57 6b10 	vmov	r6, r7, d0
 800c3dc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c3e0:	9107      	str	r1, [sp, #28]
 800c3e2:	4604      	mov	r4, r0
 800c3e4:	920a      	str	r2, [sp, #40]	; 0x28
 800c3e6:	930d      	str	r3, [sp, #52]	; 0x34
 800c3e8:	b975      	cbnz	r5, 800c408 <_dtoa_r+0x40>
 800c3ea:	2010      	movs	r0, #16
 800c3ec:	f7fe feb2 	bl	800b154 <malloc>
 800c3f0:	4602      	mov	r2, r0
 800c3f2:	61e0      	str	r0, [r4, #28]
 800c3f4:	b920      	cbnz	r0, 800c400 <_dtoa_r+0x38>
 800c3f6:	4bae      	ldr	r3, [pc, #696]	; (800c6b0 <_dtoa_r+0x2e8>)
 800c3f8:	21ef      	movs	r1, #239	; 0xef
 800c3fa:	48ae      	ldr	r0, [pc, #696]	; (800c6b4 <_dtoa_r+0x2ec>)
 800c3fc:	f7ff ff3c 	bl	800c278 <__assert_func>
 800c400:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c404:	6005      	str	r5, [r0, #0]
 800c406:	60c5      	str	r5, [r0, #12]
 800c408:	69e3      	ldr	r3, [r4, #28]
 800c40a:	6819      	ldr	r1, [r3, #0]
 800c40c:	b151      	cbz	r1, 800c424 <_dtoa_r+0x5c>
 800c40e:	685a      	ldr	r2, [r3, #4]
 800c410:	604a      	str	r2, [r1, #4]
 800c412:	2301      	movs	r3, #1
 800c414:	4093      	lsls	r3, r2
 800c416:	608b      	str	r3, [r1, #8]
 800c418:	4620      	mov	r0, r4
 800c41a:	f000 fe53 	bl	800d0c4 <_Bfree>
 800c41e:	69e3      	ldr	r3, [r4, #28]
 800c420:	2200      	movs	r2, #0
 800c422:	601a      	str	r2, [r3, #0]
 800c424:	1e3b      	subs	r3, r7, #0
 800c426:	bfbb      	ittet	lt
 800c428:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c42c:	9303      	strlt	r3, [sp, #12]
 800c42e:	2300      	movge	r3, #0
 800c430:	2201      	movlt	r2, #1
 800c432:	bfac      	ite	ge
 800c434:	f8c8 3000 	strge.w	r3, [r8]
 800c438:	f8c8 2000 	strlt.w	r2, [r8]
 800c43c:	4b9e      	ldr	r3, [pc, #632]	; (800c6b8 <_dtoa_r+0x2f0>)
 800c43e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800c442:	ea33 0308 	bics.w	r3, r3, r8
 800c446:	d11b      	bne.n	800c480 <_dtoa_r+0xb8>
 800c448:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c44a:	f242 730f 	movw	r3, #9999	; 0x270f
 800c44e:	6013      	str	r3, [r2, #0]
 800c450:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800c454:	4333      	orrs	r3, r6
 800c456:	f000 8593 	beq.w	800cf80 <_dtoa_r+0xbb8>
 800c45a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c45c:	b963      	cbnz	r3, 800c478 <_dtoa_r+0xb0>
 800c45e:	4b97      	ldr	r3, [pc, #604]	; (800c6bc <_dtoa_r+0x2f4>)
 800c460:	e027      	b.n	800c4b2 <_dtoa_r+0xea>
 800c462:	4b97      	ldr	r3, [pc, #604]	; (800c6c0 <_dtoa_r+0x2f8>)
 800c464:	9300      	str	r3, [sp, #0]
 800c466:	3308      	adds	r3, #8
 800c468:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c46a:	6013      	str	r3, [r2, #0]
 800c46c:	9800      	ldr	r0, [sp, #0]
 800c46e:	b013      	add	sp, #76	; 0x4c
 800c470:	ecbd 8b04 	vpop	{d8-d9}
 800c474:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c478:	4b90      	ldr	r3, [pc, #576]	; (800c6bc <_dtoa_r+0x2f4>)
 800c47a:	9300      	str	r3, [sp, #0]
 800c47c:	3303      	adds	r3, #3
 800c47e:	e7f3      	b.n	800c468 <_dtoa_r+0xa0>
 800c480:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c484:	2200      	movs	r2, #0
 800c486:	ec51 0b17 	vmov	r0, r1, d7
 800c48a:	eeb0 8a47 	vmov.f32	s16, s14
 800c48e:	eef0 8a67 	vmov.f32	s17, s15
 800c492:	2300      	movs	r3, #0
 800c494:	f7f4 fb30 	bl	8000af8 <__aeabi_dcmpeq>
 800c498:	4681      	mov	r9, r0
 800c49a:	b160      	cbz	r0, 800c4b6 <_dtoa_r+0xee>
 800c49c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c49e:	2301      	movs	r3, #1
 800c4a0:	6013      	str	r3, [r2, #0]
 800c4a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	f000 8568 	beq.w	800cf7a <_dtoa_r+0xbb2>
 800c4aa:	4b86      	ldr	r3, [pc, #536]	; (800c6c4 <_dtoa_r+0x2fc>)
 800c4ac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c4ae:	6013      	str	r3, [r2, #0]
 800c4b0:	3b01      	subs	r3, #1
 800c4b2:	9300      	str	r3, [sp, #0]
 800c4b4:	e7da      	b.n	800c46c <_dtoa_r+0xa4>
 800c4b6:	aa10      	add	r2, sp, #64	; 0x40
 800c4b8:	a911      	add	r1, sp, #68	; 0x44
 800c4ba:	4620      	mov	r0, r4
 800c4bc:	eeb0 0a48 	vmov.f32	s0, s16
 800c4c0:	eef0 0a68 	vmov.f32	s1, s17
 800c4c4:	f001 f8e0 	bl	800d688 <__d2b>
 800c4c8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800c4cc:	4682      	mov	sl, r0
 800c4ce:	2d00      	cmp	r5, #0
 800c4d0:	d07f      	beq.n	800c5d2 <_dtoa_r+0x20a>
 800c4d2:	ee18 3a90 	vmov	r3, s17
 800c4d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c4da:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800c4de:	ec51 0b18 	vmov	r0, r1, d8
 800c4e2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c4e6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c4ea:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800c4ee:	4619      	mov	r1, r3
 800c4f0:	2200      	movs	r2, #0
 800c4f2:	4b75      	ldr	r3, [pc, #468]	; (800c6c8 <_dtoa_r+0x300>)
 800c4f4:	f7f3 fee0 	bl	80002b8 <__aeabi_dsub>
 800c4f8:	a367      	add	r3, pc, #412	; (adr r3, 800c698 <_dtoa_r+0x2d0>)
 800c4fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4fe:	f7f4 f893 	bl	8000628 <__aeabi_dmul>
 800c502:	a367      	add	r3, pc, #412	; (adr r3, 800c6a0 <_dtoa_r+0x2d8>)
 800c504:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c508:	f7f3 fed8 	bl	80002bc <__adddf3>
 800c50c:	4606      	mov	r6, r0
 800c50e:	4628      	mov	r0, r5
 800c510:	460f      	mov	r7, r1
 800c512:	f7f4 f81f 	bl	8000554 <__aeabi_i2d>
 800c516:	a364      	add	r3, pc, #400	; (adr r3, 800c6a8 <_dtoa_r+0x2e0>)
 800c518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c51c:	f7f4 f884 	bl	8000628 <__aeabi_dmul>
 800c520:	4602      	mov	r2, r0
 800c522:	460b      	mov	r3, r1
 800c524:	4630      	mov	r0, r6
 800c526:	4639      	mov	r1, r7
 800c528:	f7f3 fec8 	bl	80002bc <__adddf3>
 800c52c:	4606      	mov	r6, r0
 800c52e:	460f      	mov	r7, r1
 800c530:	f7f4 fb2a 	bl	8000b88 <__aeabi_d2iz>
 800c534:	2200      	movs	r2, #0
 800c536:	4683      	mov	fp, r0
 800c538:	2300      	movs	r3, #0
 800c53a:	4630      	mov	r0, r6
 800c53c:	4639      	mov	r1, r7
 800c53e:	f7f4 fae5 	bl	8000b0c <__aeabi_dcmplt>
 800c542:	b148      	cbz	r0, 800c558 <_dtoa_r+0x190>
 800c544:	4658      	mov	r0, fp
 800c546:	f7f4 f805 	bl	8000554 <__aeabi_i2d>
 800c54a:	4632      	mov	r2, r6
 800c54c:	463b      	mov	r3, r7
 800c54e:	f7f4 fad3 	bl	8000af8 <__aeabi_dcmpeq>
 800c552:	b908      	cbnz	r0, 800c558 <_dtoa_r+0x190>
 800c554:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c558:	f1bb 0f16 	cmp.w	fp, #22
 800c55c:	d857      	bhi.n	800c60e <_dtoa_r+0x246>
 800c55e:	4b5b      	ldr	r3, [pc, #364]	; (800c6cc <_dtoa_r+0x304>)
 800c560:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c564:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c568:	ec51 0b18 	vmov	r0, r1, d8
 800c56c:	f7f4 face 	bl	8000b0c <__aeabi_dcmplt>
 800c570:	2800      	cmp	r0, #0
 800c572:	d04e      	beq.n	800c612 <_dtoa_r+0x24a>
 800c574:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c578:	2300      	movs	r3, #0
 800c57a:	930c      	str	r3, [sp, #48]	; 0x30
 800c57c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c57e:	1b5b      	subs	r3, r3, r5
 800c580:	1e5a      	subs	r2, r3, #1
 800c582:	bf45      	ittet	mi
 800c584:	f1c3 0301 	rsbmi	r3, r3, #1
 800c588:	9305      	strmi	r3, [sp, #20]
 800c58a:	2300      	movpl	r3, #0
 800c58c:	2300      	movmi	r3, #0
 800c58e:	9206      	str	r2, [sp, #24]
 800c590:	bf54      	ite	pl
 800c592:	9305      	strpl	r3, [sp, #20]
 800c594:	9306      	strmi	r3, [sp, #24]
 800c596:	f1bb 0f00 	cmp.w	fp, #0
 800c59a:	db3c      	blt.n	800c616 <_dtoa_r+0x24e>
 800c59c:	9b06      	ldr	r3, [sp, #24]
 800c59e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800c5a2:	445b      	add	r3, fp
 800c5a4:	9306      	str	r3, [sp, #24]
 800c5a6:	2300      	movs	r3, #0
 800c5a8:	9308      	str	r3, [sp, #32]
 800c5aa:	9b07      	ldr	r3, [sp, #28]
 800c5ac:	2b09      	cmp	r3, #9
 800c5ae:	d868      	bhi.n	800c682 <_dtoa_r+0x2ba>
 800c5b0:	2b05      	cmp	r3, #5
 800c5b2:	bfc4      	itt	gt
 800c5b4:	3b04      	subgt	r3, #4
 800c5b6:	9307      	strgt	r3, [sp, #28]
 800c5b8:	9b07      	ldr	r3, [sp, #28]
 800c5ba:	f1a3 0302 	sub.w	r3, r3, #2
 800c5be:	bfcc      	ite	gt
 800c5c0:	2500      	movgt	r5, #0
 800c5c2:	2501      	movle	r5, #1
 800c5c4:	2b03      	cmp	r3, #3
 800c5c6:	f200 8085 	bhi.w	800c6d4 <_dtoa_r+0x30c>
 800c5ca:	e8df f003 	tbb	[pc, r3]
 800c5ce:	3b2e      	.short	0x3b2e
 800c5d0:	5839      	.short	0x5839
 800c5d2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800c5d6:	441d      	add	r5, r3
 800c5d8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c5dc:	2b20      	cmp	r3, #32
 800c5de:	bfc1      	itttt	gt
 800c5e0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c5e4:	fa08 f803 	lslgt.w	r8, r8, r3
 800c5e8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800c5ec:	fa26 f303 	lsrgt.w	r3, r6, r3
 800c5f0:	bfd6      	itet	le
 800c5f2:	f1c3 0320 	rsble	r3, r3, #32
 800c5f6:	ea48 0003 	orrgt.w	r0, r8, r3
 800c5fa:	fa06 f003 	lslle.w	r0, r6, r3
 800c5fe:	f7f3 ff99 	bl	8000534 <__aeabi_ui2d>
 800c602:	2201      	movs	r2, #1
 800c604:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800c608:	3d01      	subs	r5, #1
 800c60a:	920e      	str	r2, [sp, #56]	; 0x38
 800c60c:	e76f      	b.n	800c4ee <_dtoa_r+0x126>
 800c60e:	2301      	movs	r3, #1
 800c610:	e7b3      	b.n	800c57a <_dtoa_r+0x1b2>
 800c612:	900c      	str	r0, [sp, #48]	; 0x30
 800c614:	e7b2      	b.n	800c57c <_dtoa_r+0x1b4>
 800c616:	9b05      	ldr	r3, [sp, #20]
 800c618:	eba3 030b 	sub.w	r3, r3, fp
 800c61c:	9305      	str	r3, [sp, #20]
 800c61e:	f1cb 0300 	rsb	r3, fp, #0
 800c622:	9308      	str	r3, [sp, #32]
 800c624:	2300      	movs	r3, #0
 800c626:	930b      	str	r3, [sp, #44]	; 0x2c
 800c628:	e7bf      	b.n	800c5aa <_dtoa_r+0x1e2>
 800c62a:	2300      	movs	r3, #0
 800c62c:	9309      	str	r3, [sp, #36]	; 0x24
 800c62e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c630:	2b00      	cmp	r3, #0
 800c632:	dc52      	bgt.n	800c6da <_dtoa_r+0x312>
 800c634:	2301      	movs	r3, #1
 800c636:	9301      	str	r3, [sp, #4]
 800c638:	9304      	str	r3, [sp, #16]
 800c63a:	461a      	mov	r2, r3
 800c63c:	920a      	str	r2, [sp, #40]	; 0x28
 800c63e:	e00b      	b.n	800c658 <_dtoa_r+0x290>
 800c640:	2301      	movs	r3, #1
 800c642:	e7f3      	b.n	800c62c <_dtoa_r+0x264>
 800c644:	2300      	movs	r3, #0
 800c646:	9309      	str	r3, [sp, #36]	; 0x24
 800c648:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c64a:	445b      	add	r3, fp
 800c64c:	9301      	str	r3, [sp, #4]
 800c64e:	3301      	adds	r3, #1
 800c650:	2b01      	cmp	r3, #1
 800c652:	9304      	str	r3, [sp, #16]
 800c654:	bfb8      	it	lt
 800c656:	2301      	movlt	r3, #1
 800c658:	69e0      	ldr	r0, [r4, #28]
 800c65a:	2100      	movs	r1, #0
 800c65c:	2204      	movs	r2, #4
 800c65e:	f102 0614 	add.w	r6, r2, #20
 800c662:	429e      	cmp	r6, r3
 800c664:	d93d      	bls.n	800c6e2 <_dtoa_r+0x31a>
 800c666:	6041      	str	r1, [r0, #4]
 800c668:	4620      	mov	r0, r4
 800c66a:	f000 fceb 	bl	800d044 <_Balloc>
 800c66e:	9000      	str	r0, [sp, #0]
 800c670:	2800      	cmp	r0, #0
 800c672:	d139      	bne.n	800c6e8 <_dtoa_r+0x320>
 800c674:	4b16      	ldr	r3, [pc, #88]	; (800c6d0 <_dtoa_r+0x308>)
 800c676:	4602      	mov	r2, r0
 800c678:	f240 11af 	movw	r1, #431	; 0x1af
 800c67c:	e6bd      	b.n	800c3fa <_dtoa_r+0x32>
 800c67e:	2301      	movs	r3, #1
 800c680:	e7e1      	b.n	800c646 <_dtoa_r+0x27e>
 800c682:	2501      	movs	r5, #1
 800c684:	2300      	movs	r3, #0
 800c686:	9307      	str	r3, [sp, #28]
 800c688:	9509      	str	r5, [sp, #36]	; 0x24
 800c68a:	f04f 33ff 	mov.w	r3, #4294967295
 800c68e:	9301      	str	r3, [sp, #4]
 800c690:	9304      	str	r3, [sp, #16]
 800c692:	2200      	movs	r2, #0
 800c694:	2312      	movs	r3, #18
 800c696:	e7d1      	b.n	800c63c <_dtoa_r+0x274>
 800c698:	636f4361 	.word	0x636f4361
 800c69c:	3fd287a7 	.word	0x3fd287a7
 800c6a0:	8b60c8b3 	.word	0x8b60c8b3
 800c6a4:	3fc68a28 	.word	0x3fc68a28
 800c6a8:	509f79fb 	.word	0x509f79fb
 800c6ac:	3fd34413 	.word	0x3fd34413
 800c6b0:	0802179c 	.word	0x0802179c
 800c6b4:	08021856 	.word	0x08021856
 800c6b8:	7ff00000 	.word	0x7ff00000
 800c6bc:	08021852 	.word	0x08021852
 800c6c0:	08021849 	.word	0x08021849
 800c6c4:	08021779 	.word	0x08021779
 800c6c8:	3ff80000 	.word	0x3ff80000
 800c6cc:	08021940 	.word	0x08021940
 800c6d0:	080218ae 	.word	0x080218ae
 800c6d4:	2301      	movs	r3, #1
 800c6d6:	9309      	str	r3, [sp, #36]	; 0x24
 800c6d8:	e7d7      	b.n	800c68a <_dtoa_r+0x2c2>
 800c6da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c6dc:	9301      	str	r3, [sp, #4]
 800c6de:	9304      	str	r3, [sp, #16]
 800c6e0:	e7ba      	b.n	800c658 <_dtoa_r+0x290>
 800c6e2:	3101      	adds	r1, #1
 800c6e4:	0052      	lsls	r2, r2, #1
 800c6e6:	e7ba      	b.n	800c65e <_dtoa_r+0x296>
 800c6e8:	69e3      	ldr	r3, [r4, #28]
 800c6ea:	9a00      	ldr	r2, [sp, #0]
 800c6ec:	601a      	str	r2, [r3, #0]
 800c6ee:	9b04      	ldr	r3, [sp, #16]
 800c6f0:	2b0e      	cmp	r3, #14
 800c6f2:	f200 80a8 	bhi.w	800c846 <_dtoa_r+0x47e>
 800c6f6:	2d00      	cmp	r5, #0
 800c6f8:	f000 80a5 	beq.w	800c846 <_dtoa_r+0x47e>
 800c6fc:	f1bb 0f00 	cmp.w	fp, #0
 800c700:	dd38      	ble.n	800c774 <_dtoa_r+0x3ac>
 800c702:	4bc0      	ldr	r3, [pc, #768]	; (800ca04 <_dtoa_r+0x63c>)
 800c704:	f00b 020f 	and.w	r2, fp, #15
 800c708:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c70c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800c710:	e9d3 6700 	ldrd	r6, r7, [r3]
 800c714:	ea4f 182b 	mov.w	r8, fp, asr #4
 800c718:	d019      	beq.n	800c74e <_dtoa_r+0x386>
 800c71a:	4bbb      	ldr	r3, [pc, #748]	; (800ca08 <_dtoa_r+0x640>)
 800c71c:	ec51 0b18 	vmov	r0, r1, d8
 800c720:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c724:	f7f4 f8aa 	bl	800087c <__aeabi_ddiv>
 800c728:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c72c:	f008 080f 	and.w	r8, r8, #15
 800c730:	2503      	movs	r5, #3
 800c732:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800ca08 <_dtoa_r+0x640>
 800c736:	f1b8 0f00 	cmp.w	r8, #0
 800c73a:	d10a      	bne.n	800c752 <_dtoa_r+0x38a>
 800c73c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c740:	4632      	mov	r2, r6
 800c742:	463b      	mov	r3, r7
 800c744:	f7f4 f89a 	bl	800087c <__aeabi_ddiv>
 800c748:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c74c:	e02b      	b.n	800c7a6 <_dtoa_r+0x3de>
 800c74e:	2502      	movs	r5, #2
 800c750:	e7ef      	b.n	800c732 <_dtoa_r+0x36a>
 800c752:	f018 0f01 	tst.w	r8, #1
 800c756:	d008      	beq.n	800c76a <_dtoa_r+0x3a2>
 800c758:	4630      	mov	r0, r6
 800c75a:	4639      	mov	r1, r7
 800c75c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800c760:	f7f3 ff62 	bl	8000628 <__aeabi_dmul>
 800c764:	3501      	adds	r5, #1
 800c766:	4606      	mov	r6, r0
 800c768:	460f      	mov	r7, r1
 800c76a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c76e:	f109 0908 	add.w	r9, r9, #8
 800c772:	e7e0      	b.n	800c736 <_dtoa_r+0x36e>
 800c774:	f000 809f 	beq.w	800c8b6 <_dtoa_r+0x4ee>
 800c778:	f1cb 0600 	rsb	r6, fp, #0
 800c77c:	4ba1      	ldr	r3, [pc, #644]	; (800ca04 <_dtoa_r+0x63c>)
 800c77e:	4fa2      	ldr	r7, [pc, #648]	; (800ca08 <_dtoa_r+0x640>)
 800c780:	f006 020f 	and.w	r2, r6, #15
 800c784:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c78c:	ec51 0b18 	vmov	r0, r1, d8
 800c790:	f7f3 ff4a 	bl	8000628 <__aeabi_dmul>
 800c794:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c798:	1136      	asrs	r6, r6, #4
 800c79a:	2300      	movs	r3, #0
 800c79c:	2502      	movs	r5, #2
 800c79e:	2e00      	cmp	r6, #0
 800c7a0:	d17e      	bne.n	800c8a0 <_dtoa_r+0x4d8>
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d1d0      	bne.n	800c748 <_dtoa_r+0x380>
 800c7a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c7a8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	f000 8084 	beq.w	800c8ba <_dtoa_r+0x4f2>
 800c7b2:	4b96      	ldr	r3, [pc, #600]	; (800ca0c <_dtoa_r+0x644>)
 800c7b4:	2200      	movs	r2, #0
 800c7b6:	4640      	mov	r0, r8
 800c7b8:	4649      	mov	r1, r9
 800c7ba:	f7f4 f9a7 	bl	8000b0c <__aeabi_dcmplt>
 800c7be:	2800      	cmp	r0, #0
 800c7c0:	d07b      	beq.n	800c8ba <_dtoa_r+0x4f2>
 800c7c2:	9b04      	ldr	r3, [sp, #16]
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d078      	beq.n	800c8ba <_dtoa_r+0x4f2>
 800c7c8:	9b01      	ldr	r3, [sp, #4]
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	dd39      	ble.n	800c842 <_dtoa_r+0x47a>
 800c7ce:	4b90      	ldr	r3, [pc, #576]	; (800ca10 <_dtoa_r+0x648>)
 800c7d0:	2200      	movs	r2, #0
 800c7d2:	4640      	mov	r0, r8
 800c7d4:	4649      	mov	r1, r9
 800c7d6:	f7f3 ff27 	bl	8000628 <__aeabi_dmul>
 800c7da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c7de:	9e01      	ldr	r6, [sp, #4]
 800c7e0:	f10b 37ff 	add.w	r7, fp, #4294967295
 800c7e4:	3501      	adds	r5, #1
 800c7e6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c7ea:	4628      	mov	r0, r5
 800c7ec:	f7f3 feb2 	bl	8000554 <__aeabi_i2d>
 800c7f0:	4642      	mov	r2, r8
 800c7f2:	464b      	mov	r3, r9
 800c7f4:	f7f3 ff18 	bl	8000628 <__aeabi_dmul>
 800c7f8:	4b86      	ldr	r3, [pc, #536]	; (800ca14 <_dtoa_r+0x64c>)
 800c7fa:	2200      	movs	r2, #0
 800c7fc:	f7f3 fd5e 	bl	80002bc <__adddf3>
 800c800:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800c804:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c808:	9303      	str	r3, [sp, #12]
 800c80a:	2e00      	cmp	r6, #0
 800c80c:	d158      	bne.n	800c8c0 <_dtoa_r+0x4f8>
 800c80e:	4b82      	ldr	r3, [pc, #520]	; (800ca18 <_dtoa_r+0x650>)
 800c810:	2200      	movs	r2, #0
 800c812:	4640      	mov	r0, r8
 800c814:	4649      	mov	r1, r9
 800c816:	f7f3 fd4f 	bl	80002b8 <__aeabi_dsub>
 800c81a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c81e:	4680      	mov	r8, r0
 800c820:	4689      	mov	r9, r1
 800c822:	f7f4 f991 	bl	8000b48 <__aeabi_dcmpgt>
 800c826:	2800      	cmp	r0, #0
 800c828:	f040 8296 	bne.w	800cd58 <_dtoa_r+0x990>
 800c82c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800c830:	4640      	mov	r0, r8
 800c832:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c836:	4649      	mov	r1, r9
 800c838:	f7f4 f968 	bl	8000b0c <__aeabi_dcmplt>
 800c83c:	2800      	cmp	r0, #0
 800c83e:	f040 8289 	bne.w	800cd54 <_dtoa_r+0x98c>
 800c842:	ed8d 8b02 	vstr	d8, [sp, #8]
 800c846:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c848:	2b00      	cmp	r3, #0
 800c84a:	f2c0 814e 	blt.w	800caea <_dtoa_r+0x722>
 800c84e:	f1bb 0f0e 	cmp.w	fp, #14
 800c852:	f300 814a 	bgt.w	800caea <_dtoa_r+0x722>
 800c856:	4b6b      	ldr	r3, [pc, #428]	; (800ca04 <_dtoa_r+0x63c>)
 800c858:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c85c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c860:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c862:	2b00      	cmp	r3, #0
 800c864:	f280 80dc 	bge.w	800ca20 <_dtoa_r+0x658>
 800c868:	9b04      	ldr	r3, [sp, #16]
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	f300 80d8 	bgt.w	800ca20 <_dtoa_r+0x658>
 800c870:	f040 826f 	bne.w	800cd52 <_dtoa_r+0x98a>
 800c874:	4b68      	ldr	r3, [pc, #416]	; (800ca18 <_dtoa_r+0x650>)
 800c876:	2200      	movs	r2, #0
 800c878:	4640      	mov	r0, r8
 800c87a:	4649      	mov	r1, r9
 800c87c:	f7f3 fed4 	bl	8000628 <__aeabi_dmul>
 800c880:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c884:	f7f4 f956 	bl	8000b34 <__aeabi_dcmpge>
 800c888:	9e04      	ldr	r6, [sp, #16]
 800c88a:	4637      	mov	r7, r6
 800c88c:	2800      	cmp	r0, #0
 800c88e:	f040 8245 	bne.w	800cd1c <_dtoa_r+0x954>
 800c892:	9d00      	ldr	r5, [sp, #0]
 800c894:	2331      	movs	r3, #49	; 0x31
 800c896:	f805 3b01 	strb.w	r3, [r5], #1
 800c89a:	f10b 0b01 	add.w	fp, fp, #1
 800c89e:	e241      	b.n	800cd24 <_dtoa_r+0x95c>
 800c8a0:	07f2      	lsls	r2, r6, #31
 800c8a2:	d505      	bpl.n	800c8b0 <_dtoa_r+0x4e8>
 800c8a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c8a8:	f7f3 febe 	bl	8000628 <__aeabi_dmul>
 800c8ac:	3501      	adds	r5, #1
 800c8ae:	2301      	movs	r3, #1
 800c8b0:	1076      	asrs	r6, r6, #1
 800c8b2:	3708      	adds	r7, #8
 800c8b4:	e773      	b.n	800c79e <_dtoa_r+0x3d6>
 800c8b6:	2502      	movs	r5, #2
 800c8b8:	e775      	b.n	800c7a6 <_dtoa_r+0x3de>
 800c8ba:	9e04      	ldr	r6, [sp, #16]
 800c8bc:	465f      	mov	r7, fp
 800c8be:	e792      	b.n	800c7e6 <_dtoa_r+0x41e>
 800c8c0:	9900      	ldr	r1, [sp, #0]
 800c8c2:	4b50      	ldr	r3, [pc, #320]	; (800ca04 <_dtoa_r+0x63c>)
 800c8c4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c8c8:	4431      	add	r1, r6
 800c8ca:	9102      	str	r1, [sp, #8]
 800c8cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c8ce:	eeb0 9a47 	vmov.f32	s18, s14
 800c8d2:	eef0 9a67 	vmov.f32	s19, s15
 800c8d6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c8da:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c8de:	2900      	cmp	r1, #0
 800c8e0:	d044      	beq.n	800c96c <_dtoa_r+0x5a4>
 800c8e2:	494e      	ldr	r1, [pc, #312]	; (800ca1c <_dtoa_r+0x654>)
 800c8e4:	2000      	movs	r0, #0
 800c8e6:	f7f3 ffc9 	bl	800087c <__aeabi_ddiv>
 800c8ea:	ec53 2b19 	vmov	r2, r3, d9
 800c8ee:	f7f3 fce3 	bl	80002b8 <__aeabi_dsub>
 800c8f2:	9d00      	ldr	r5, [sp, #0]
 800c8f4:	ec41 0b19 	vmov	d9, r0, r1
 800c8f8:	4649      	mov	r1, r9
 800c8fa:	4640      	mov	r0, r8
 800c8fc:	f7f4 f944 	bl	8000b88 <__aeabi_d2iz>
 800c900:	4606      	mov	r6, r0
 800c902:	f7f3 fe27 	bl	8000554 <__aeabi_i2d>
 800c906:	4602      	mov	r2, r0
 800c908:	460b      	mov	r3, r1
 800c90a:	4640      	mov	r0, r8
 800c90c:	4649      	mov	r1, r9
 800c90e:	f7f3 fcd3 	bl	80002b8 <__aeabi_dsub>
 800c912:	3630      	adds	r6, #48	; 0x30
 800c914:	f805 6b01 	strb.w	r6, [r5], #1
 800c918:	ec53 2b19 	vmov	r2, r3, d9
 800c91c:	4680      	mov	r8, r0
 800c91e:	4689      	mov	r9, r1
 800c920:	f7f4 f8f4 	bl	8000b0c <__aeabi_dcmplt>
 800c924:	2800      	cmp	r0, #0
 800c926:	d164      	bne.n	800c9f2 <_dtoa_r+0x62a>
 800c928:	4642      	mov	r2, r8
 800c92a:	464b      	mov	r3, r9
 800c92c:	4937      	ldr	r1, [pc, #220]	; (800ca0c <_dtoa_r+0x644>)
 800c92e:	2000      	movs	r0, #0
 800c930:	f7f3 fcc2 	bl	80002b8 <__aeabi_dsub>
 800c934:	ec53 2b19 	vmov	r2, r3, d9
 800c938:	f7f4 f8e8 	bl	8000b0c <__aeabi_dcmplt>
 800c93c:	2800      	cmp	r0, #0
 800c93e:	f040 80b6 	bne.w	800caae <_dtoa_r+0x6e6>
 800c942:	9b02      	ldr	r3, [sp, #8]
 800c944:	429d      	cmp	r5, r3
 800c946:	f43f af7c 	beq.w	800c842 <_dtoa_r+0x47a>
 800c94a:	4b31      	ldr	r3, [pc, #196]	; (800ca10 <_dtoa_r+0x648>)
 800c94c:	ec51 0b19 	vmov	r0, r1, d9
 800c950:	2200      	movs	r2, #0
 800c952:	f7f3 fe69 	bl	8000628 <__aeabi_dmul>
 800c956:	4b2e      	ldr	r3, [pc, #184]	; (800ca10 <_dtoa_r+0x648>)
 800c958:	ec41 0b19 	vmov	d9, r0, r1
 800c95c:	2200      	movs	r2, #0
 800c95e:	4640      	mov	r0, r8
 800c960:	4649      	mov	r1, r9
 800c962:	f7f3 fe61 	bl	8000628 <__aeabi_dmul>
 800c966:	4680      	mov	r8, r0
 800c968:	4689      	mov	r9, r1
 800c96a:	e7c5      	b.n	800c8f8 <_dtoa_r+0x530>
 800c96c:	ec51 0b17 	vmov	r0, r1, d7
 800c970:	f7f3 fe5a 	bl	8000628 <__aeabi_dmul>
 800c974:	9b02      	ldr	r3, [sp, #8]
 800c976:	9d00      	ldr	r5, [sp, #0]
 800c978:	930f      	str	r3, [sp, #60]	; 0x3c
 800c97a:	ec41 0b19 	vmov	d9, r0, r1
 800c97e:	4649      	mov	r1, r9
 800c980:	4640      	mov	r0, r8
 800c982:	f7f4 f901 	bl	8000b88 <__aeabi_d2iz>
 800c986:	4606      	mov	r6, r0
 800c988:	f7f3 fde4 	bl	8000554 <__aeabi_i2d>
 800c98c:	3630      	adds	r6, #48	; 0x30
 800c98e:	4602      	mov	r2, r0
 800c990:	460b      	mov	r3, r1
 800c992:	4640      	mov	r0, r8
 800c994:	4649      	mov	r1, r9
 800c996:	f7f3 fc8f 	bl	80002b8 <__aeabi_dsub>
 800c99a:	f805 6b01 	strb.w	r6, [r5], #1
 800c99e:	9b02      	ldr	r3, [sp, #8]
 800c9a0:	429d      	cmp	r5, r3
 800c9a2:	4680      	mov	r8, r0
 800c9a4:	4689      	mov	r9, r1
 800c9a6:	f04f 0200 	mov.w	r2, #0
 800c9aa:	d124      	bne.n	800c9f6 <_dtoa_r+0x62e>
 800c9ac:	4b1b      	ldr	r3, [pc, #108]	; (800ca1c <_dtoa_r+0x654>)
 800c9ae:	ec51 0b19 	vmov	r0, r1, d9
 800c9b2:	f7f3 fc83 	bl	80002bc <__adddf3>
 800c9b6:	4602      	mov	r2, r0
 800c9b8:	460b      	mov	r3, r1
 800c9ba:	4640      	mov	r0, r8
 800c9bc:	4649      	mov	r1, r9
 800c9be:	f7f4 f8c3 	bl	8000b48 <__aeabi_dcmpgt>
 800c9c2:	2800      	cmp	r0, #0
 800c9c4:	d173      	bne.n	800caae <_dtoa_r+0x6e6>
 800c9c6:	ec53 2b19 	vmov	r2, r3, d9
 800c9ca:	4914      	ldr	r1, [pc, #80]	; (800ca1c <_dtoa_r+0x654>)
 800c9cc:	2000      	movs	r0, #0
 800c9ce:	f7f3 fc73 	bl	80002b8 <__aeabi_dsub>
 800c9d2:	4602      	mov	r2, r0
 800c9d4:	460b      	mov	r3, r1
 800c9d6:	4640      	mov	r0, r8
 800c9d8:	4649      	mov	r1, r9
 800c9da:	f7f4 f897 	bl	8000b0c <__aeabi_dcmplt>
 800c9de:	2800      	cmp	r0, #0
 800c9e0:	f43f af2f 	beq.w	800c842 <_dtoa_r+0x47a>
 800c9e4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c9e6:	1e6b      	subs	r3, r5, #1
 800c9e8:	930f      	str	r3, [sp, #60]	; 0x3c
 800c9ea:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c9ee:	2b30      	cmp	r3, #48	; 0x30
 800c9f0:	d0f8      	beq.n	800c9e4 <_dtoa_r+0x61c>
 800c9f2:	46bb      	mov	fp, r7
 800c9f4:	e04a      	b.n	800ca8c <_dtoa_r+0x6c4>
 800c9f6:	4b06      	ldr	r3, [pc, #24]	; (800ca10 <_dtoa_r+0x648>)
 800c9f8:	f7f3 fe16 	bl	8000628 <__aeabi_dmul>
 800c9fc:	4680      	mov	r8, r0
 800c9fe:	4689      	mov	r9, r1
 800ca00:	e7bd      	b.n	800c97e <_dtoa_r+0x5b6>
 800ca02:	bf00      	nop
 800ca04:	08021940 	.word	0x08021940
 800ca08:	08021918 	.word	0x08021918
 800ca0c:	3ff00000 	.word	0x3ff00000
 800ca10:	40240000 	.word	0x40240000
 800ca14:	401c0000 	.word	0x401c0000
 800ca18:	40140000 	.word	0x40140000
 800ca1c:	3fe00000 	.word	0x3fe00000
 800ca20:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ca24:	9d00      	ldr	r5, [sp, #0]
 800ca26:	4642      	mov	r2, r8
 800ca28:	464b      	mov	r3, r9
 800ca2a:	4630      	mov	r0, r6
 800ca2c:	4639      	mov	r1, r7
 800ca2e:	f7f3 ff25 	bl	800087c <__aeabi_ddiv>
 800ca32:	f7f4 f8a9 	bl	8000b88 <__aeabi_d2iz>
 800ca36:	9001      	str	r0, [sp, #4]
 800ca38:	f7f3 fd8c 	bl	8000554 <__aeabi_i2d>
 800ca3c:	4642      	mov	r2, r8
 800ca3e:	464b      	mov	r3, r9
 800ca40:	f7f3 fdf2 	bl	8000628 <__aeabi_dmul>
 800ca44:	4602      	mov	r2, r0
 800ca46:	460b      	mov	r3, r1
 800ca48:	4630      	mov	r0, r6
 800ca4a:	4639      	mov	r1, r7
 800ca4c:	f7f3 fc34 	bl	80002b8 <__aeabi_dsub>
 800ca50:	9e01      	ldr	r6, [sp, #4]
 800ca52:	9f04      	ldr	r7, [sp, #16]
 800ca54:	3630      	adds	r6, #48	; 0x30
 800ca56:	f805 6b01 	strb.w	r6, [r5], #1
 800ca5a:	9e00      	ldr	r6, [sp, #0]
 800ca5c:	1bae      	subs	r6, r5, r6
 800ca5e:	42b7      	cmp	r7, r6
 800ca60:	4602      	mov	r2, r0
 800ca62:	460b      	mov	r3, r1
 800ca64:	d134      	bne.n	800cad0 <_dtoa_r+0x708>
 800ca66:	f7f3 fc29 	bl	80002bc <__adddf3>
 800ca6a:	4642      	mov	r2, r8
 800ca6c:	464b      	mov	r3, r9
 800ca6e:	4606      	mov	r6, r0
 800ca70:	460f      	mov	r7, r1
 800ca72:	f7f4 f869 	bl	8000b48 <__aeabi_dcmpgt>
 800ca76:	b9c8      	cbnz	r0, 800caac <_dtoa_r+0x6e4>
 800ca78:	4642      	mov	r2, r8
 800ca7a:	464b      	mov	r3, r9
 800ca7c:	4630      	mov	r0, r6
 800ca7e:	4639      	mov	r1, r7
 800ca80:	f7f4 f83a 	bl	8000af8 <__aeabi_dcmpeq>
 800ca84:	b110      	cbz	r0, 800ca8c <_dtoa_r+0x6c4>
 800ca86:	9b01      	ldr	r3, [sp, #4]
 800ca88:	07db      	lsls	r3, r3, #31
 800ca8a:	d40f      	bmi.n	800caac <_dtoa_r+0x6e4>
 800ca8c:	4651      	mov	r1, sl
 800ca8e:	4620      	mov	r0, r4
 800ca90:	f000 fb18 	bl	800d0c4 <_Bfree>
 800ca94:	2300      	movs	r3, #0
 800ca96:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ca98:	702b      	strb	r3, [r5, #0]
 800ca9a:	f10b 0301 	add.w	r3, fp, #1
 800ca9e:	6013      	str	r3, [r2, #0]
 800caa0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	f43f ace2 	beq.w	800c46c <_dtoa_r+0xa4>
 800caa8:	601d      	str	r5, [r3, #0]
 800caaa:	e4df      	b.n	800c46c <_dtoa_r+0xa4>
 800caac:	465f      	mov	r7, fp
 800caae:	462b      	mov	r3, r5
 800cab0:	461d      	mov	r5, r3
 800cab2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cab6:	2a39      	cmp	r2, #57	; 0x39
 800cab8:	d106      	bne.n	800cac8 <_dtoa_r+0x700>
 800caba:	9a00      	ldr	r2, [sp, #0]
 800cabc:	429a      	cmp	r2, r3
 800cabe:	d1f7      	bne.n	800cab0 <_dtoa_r+0x6e8>
 800cac0:	9900      	ldr	r1, [sp, #0]
 800cac2:	2230      	movs	r2, #48	; 0x30
 800cac4:	3701      	adds	r7, #1
 800cac6:	700a      	strb	r2, [r1, #0]
 800cac8:	781a      	ldrb	r2, [r3, #0]
 800caca:	3201      	adds	r2, #1
 800cacc:	701a      	strb	r2, [r3, #0]
 800cace:	e790      	b.n	800c9f2 <_dtoa_r+0x62a>
 800cad0:	4ba3      	ldr	r3, [pc, #652]	; (800cd60 <_dtoa_r+0x998>)
 800cad2:	2200      	movs	r2, #0
 800cad4:	f7f3 fda8 	bl	8000628 <__aeabi_dmul>
 800cad8:	2200      	movs	r2, #0
 800cada:	2300      	movs	r3, #0
 800cadc:	4606      	mov	r6, r0
 800cade:	460f      	mov	r7, r1
 800cae0:	f7f4 f80a 	bl	8000af8 <__aeabi_dcmpeq>
 800cae4:	2800      	cmp	r0, #0
 800cae6:	d09e      	beq.n	800ca26 <_dtoa_r+0x65e>
 800cae8:	e7d0      	b.n	800ca8c <_dtoa_r+0x6c4>
 800caea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800caec:	2a00      	cmp	r2, #0
 800caee:	f000 80ca 	beq.w	800cc86 <_dtoa_r+0x8be>
 800caf2:	9a07      	ldr	r2, [sp, #28]
 800caf4:	2a01      	cmp	r2, #1
 800caf6:	f300 80ad 	bgt.w	800cc54 <_dtoa_r+0x88c>
 800cafa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cafc:	2a00      	cmp	r2, #0
 800cafe:	f000 80a5 	beq.w	800cc4c <_dtoa_r+0x884>
 800cb02:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800cb06:	9e08      	ldr	r6, [sp, #32]
 800cb08:	9d05      	ldr	r5, [sp, #20]
 800cb0a:	9a05      	ldr	r2, [sp, #20]
 800cb0c:	441a      	add	r2, r3
 800cb0e:	9205      	str	r2, [sp, #20]
 800cb10:	9a06      	ldr	r2, [sp, #24]
 800cb12:	2101      	movs	r1, #1
 800cb14:	441a      	add	r2, r3
 800cb16:	4620      	mov	r0, r4
 800cb18:	9206      	str	r2, [sp, #24]
 800cb1a:	f000 fb89 	bl	800d230 <__i2b>
 800cb1e:	4607      	mov	r7, r0
 800cb20:	b165      	cbz	r5, 800cb3c <_dtoa_r+0x774>
 800cb22:	9b06      	ldr	r3, [sp, #24]
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	dd09      	ble.n	800cb3c <_dtoa_r+0x774>
 800cb28:	42ab      	cmp	r3, r5
 800cb2a:	9a05      	ldr	r2, [sp, #20]
 800cb2c:	bfa8      	it	ge
 800cb2e:	462b      	movge	r3, r5
 800cb30:	1ad2      	subs	r2, r2, r3
 800cb32:	9205      	str	r2, [sp, #20]
 800cb34:	9a06      	ldr	r2, [sp, #24]
 800cb36:	1aed      	subs	r5, r5, r3
 800cb38:	1ad3      	subs	r3, r2, r3
 800cb3a:	9306      	str	r3, [sp, #24]
 800cb3c:	9b08      	ldr	r3, [sp, #32]
 800cb3e:	b1f3      	cbz	r3, 800cb7e <_dtoa_r+0x7b6>
 800cb40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	f000 80a3 	beq.w	800cc8e <_dtoa_r+0x8c6>
 800cb48:	2e00      	cmp	r6, #0
 800cb4a:	dd10      	ble.n	800cb6e <_dtoa_r+0x7a6>
 800cb4c:	4639      	mov	r1, r7
 800cb4e:	4632      	mov	r2, r6
 800cb50:	4620      	mov	r0, r4
 800cb52:	f000 fc2d 	bl	800d3b0 <__pow5mult>
 800cb56:	4652      	mov	r2, sl
 800cb58:	4601      	mov	r1, r0
 800cb5a:	4607      	mov	r7, r0
 800cb5c:	4620      	mov	r0, r4
 800cb5e:	f000 fb7d 	bl	800d25c <__multiply>
 800cb62:	4651      	mov	r1, sl
 800cb64:	4680      	mov	r8, r0
 800cb66:	4620      	mov	r0, r4
 800cb68:	f000 faac 	bl	800d0c4 <_Bfree>
 800cb6c:	46c2      	mov	sl, r8
 800cb6e:	9b08      	ldr	r3, [sp, #32]
 800cb70:	1b9a      	subs	r2, r3, r6
 800cb72:	d004      	beq.n	800cb7e <_dtoa_r+0x7b6>
 800cb74:	4651      	mov	r1, sl
 800cb76:	4620      	mov	r0, r4
 800cb78:	f000 fc1a 	bl	800d3b0 <__pow5mult>
 800cb7c:	4682      	mov	sl, r0
 800cb7e:	2101      	movs	r1, #1
 800cb80:	4620      	mov	r0, r4
 800cb82:	f000 fb55 	bl	800d230 <__i2b>
 800cb86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	4606      	mov	r6, r0
 800cb8c:	f340 8081 	ble.w	800cc92 <_dtoa_r+0x8ca>
 800cb90:	461a      	mov	r2, r3
 800cb92:	4601      	mov	r1, r0
 800cb94:	4620      	mov	r0, r4
 800cb96:	f000 fc0b 	bl	800d3b0 <__pow5mult>
 800cb9a:	9b07      	ldr	r3, [sp, #28]
 800cb9c:	2b01      	cmp	r3, #1
 800cb9e:	4606      	mov	r6, r0
 800cba0:	dd7a      	ble.n	800cc98 <_dtoa_r+0x8d0>
 800cba2:	f04f 0800 	mov.w	r8, #0
 800cba6:	6933      	ldr	r3, [r6, #16]
 800cba8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800cbac:	6918      	ldr	r0, [r3, #16]
 800cbae:	f000 faf1 	bl	800d194 <__hi0bits>
 800cbb2:	f1c0 0020 	rsb	r0, r0, #32
 800cbb6:	9b06      	ldr	r3, [sp, #24]
 800cbb8:	4418      	add	r0, r3
 800cbba:	f010 001f 	ands.w	r0, r0, #31
 800cbbe:	f000 8094 	beq.w	800ccea <_dtoa_r+0x922>
 800cbc2:	f1c0 0320 	rsb	r3, r0, #32
 800cbc6:	2b04      	cmp	r3, #4
 800cbc8:	f340 8085 	ble.w	800ccd6 <_dtoa_r+0x90e>
 800cbcc:	9b05      	ldr	r3, [sp, #20]
 800cbce:	f1c0 001c 	rsb	r0, r0, #28
 800cbd2:	4403      	add	r3, r0
 800cbd4:	9305      	str	r3, [sp, #20]
 800cbd6:	9b06      	ldr	r3, [sp, #24]
 800cbd8:	4403      	add	r3, r0
 800cbda:	4405      	add	r5, r0
 800cbdc:	9306      	str	r3, [sp, #24]
 800cbde:	9b05      	ldr	r3, [sp, #20]
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	dd05      	ble.n	800cbf0 <_dtoa_r+0x828>
 800cbe4:	4651      	mov	r1, sl
 800cbe6:	461a      	mov	r2, r3
 800cbe8:	4620      	mov	r0, r4
 800cbea:	f000 fc3b 	bl	800d464 <__lshift>
 800cbee:	4682      	mov	sl, r0
 800cbf0:	9b06      	ldr	r3, [sp, #24]
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	dd05      	ble.n	800cc02 <_dtoa_r+0x83a>
 800cbf6:	4631      	mov	r1, r6
 800cbf8:	461a      	mov	r2, r3
 800cbfa:	4620      	mov	r0, r4
 800cbfc:	f000 fc32 	bl	800d464 <__lshift>
 800cc00:	4606      	mov	r6, r0
 800cc02:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d072      	beq.n	800ccee <_dtoa_r+0x926>
 800cc08:	4631      	mov	r1, r6
 800cc0a:	4650      	mov	r0, sl
 800cc0c:	f000 fc96 	bl	800d53c <__mcmp>
 800cc10:	2800      	cmp	r0, #0
 800cc12:	da6c      	bge.n	800ccee <_dtoa_r+0x926>
 800cc14:	2300      	movs	r3, #0
 800cc16:	4651      	mov	r1, sl
 800cc18:	220a      	movs	r2, #10
 800cc1a:	4620      	mov	r0, r4
 800cc1c:	f000 fa74 	bl	800d108 <__multadd>
 800cc20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc22:	f10b 3bff 	add.w	fp, fp, #4294967295
 800cc26:	4682      	mov	sl, r0
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	f000 81b0 	beq.w	800cf8e <_dtoa_r+0xbc6>
 800cc2e:	2300      	movs	r3, #0
 800cc30:	4639      	mov	r1, r7
 800cc32:	220a      	movs	r2, #10
 800cc34:	4620      	mov	r0, r4
 800cc36:	f000 fa67 	bl	800d108 <__multadd>
 800cc3a:	9b01      	ldr	r3, [sp, #4]
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	4607      	mov	r7, r0
 800cc40:	f300 8096 	bgt.w	800cd70 <_dtoa_r+0x9a8>
 800cc44:	9b07      	ldr	r3, [sp, #28]
 800cc46:	2b02      	cmp	r3, #2
 800cc48:	dc59      	bgt.n	800ccfe <_dtoa_r+0x936>
 800cc4a:	e091      	b.n	800cd70 <_dtoa_r+0x9a8>
 800cc4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cc4e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800cc52:	e758      	b.n	800cb06 <_dtoa_r+0x73e>
 800cc54:	9b04      	ldr	r3, [sp, #16]
 800cc56:	1e5e      	subs	r6, r3, #1
 800cc58:	9b08      	ldr	r3, [sp, #32]
 800cc5a:	42b3      	cmp	r3, r6
 800cc5c:	bfbf      	itttt	lt
 800cc5e:	9b08      	ldrlt	r3, [sp, #32]
 800cc60:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800cc62:	9608      	strlt	r6, [sp, #32]
 800cc64:	1af3      	sublt	r3, r6, r3
 800cc66:	bfb4      	ite	lt
 800cc68:	18d2      	addlt	r2, r2, r3
 800cc6a:	1b9e      	subge	r6, r3, r6
 800cc6c:	9b04      	ldr	r3, [sp, #16]
 800cc6e:	bfbc      	itt	lt
 800cc70:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800cc72:	2600      	movlt	r6, #0
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	bfb7      	itett	lt
 800cc78:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800cc7c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800cc80:	1a9d      	sublt	r5, r3, r2
 800cc82:	2300      	movlt	r3, #0
 800cc84:	e741      	b.n	800cb0a <_dtoa_r+0x742>
 800cc86:	9e08      	ldr	r6, [sp, #32]
 800cc88:	9d05      	ldr	r5, [sp, #20]
 800cc8a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800cc8c:	e748      	b.n	800cb20 <_dtoa_r+0x758>
 800cc8e:	9a08      	ldr	r2, [sp, #32]
 800cc90:	e770      	b.n	800cb74 <_dtoa_r+0x7ac>
 800cc92:	9b07      	ldr	r3, [sp, #28]
 800cc94:	2b01      	cmp	r3, #1
 800cc96:	dc19      	bgt.n	800cccc <_dtoa_r+0x904>
 800cc98:	9b02      	ldr	r3, [sp, #8]
 800cc9a:	b9bb      	cbnz	r3, 800cccc <_dtoa_r+0x904>
 800cc9c:	9b03      	ldr	r3, [sp, #12]
 800cc9e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cca2:	b99b      	cbnz	r3, 800cccc <_dtoa_r+0x904>
 800cca4:	9b03      	ldr	r3, [sp, #12]
 800cca6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ccaa:	0d1b      	lsrs	r3, r3, #20
 800ccac:	051b      	lsls	r3, r3, #20
 800ccae:	b183      	cbz	r3, 800ccd2 <_dtoa_r+0x90a>
 800ccb0:	9b05      	ldr	r3, [sp, #20]
 800ccb2:	3301      	adds	r3, #1
 800ccb4:	9305      	str	r3, [sp, #20]
 800ccb6:	9b06      	ldr	r3, [sp, #24]
 800ccb8:	3301      	adds	r3, #1
 800ccba:	9306      	str	r3, [sp, #24]
 800ccbc:	f04f 0801 	mov.w	r8, #1
 800ccc0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	f47f af6f 	bne.w	800cba6 <_dtoa_r+0x7de>
 800ccc8:	2001      	movs	r0, #1
 800ccca:	e774      	b.n	800cbb6 <_dtoa_r+0x7ee>
 800cccc:	f04f 0800 	mov.w	r8, #0
 800ccd0:	e7f6      	b.n	800ccc0 <_dtoa_r+0x8f8>
 800ccd2:	4698      	mov	r8, r3
 800ccd4:	e7f4      	b.n	800ccc0 <_dtoa_r+0x8f8>
 800ccd6:	d082      	beq.n	800cbde <_dtoa_r+0x816>
 800ccd8:	9a05      	ldr	r2, [sp, #20]
 800ccda:	331c      	adds	r3, #28
 800ccdc:	441a      	add	r2, r3
 800ccde:	9205      	str	r2, [sp, #20]
 800cce0:	9a06      	ldr	r2, [sp, #24]
 800cce2:	441a      	add	r2, r3
 800cce4:	441d      	add	r5, r3
 800cce6:	9206      	str	r2, [sp, #24]
 800cce8:	e779      	b.n	800cbde <_dtoa_r+0x816>
 800ccea:	4603      	mov	r3, r0
 800ccec:	e7f4      	b.n	800ccd8 <_dtoa_r+0x910>
 800ccee:	9b04      	ldr	r3, [sp, #16]
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	dc37      	bgt.n	800cd64 <_dtoa_r+0x99c>
 800ccf4:	9b07      	ldr	r3, [sp, #28]
 800ccf6:	2b02      	cmp	r3, #2
 800ccf8:	dd34      	ble.n	800cd64 <_dtoa_r+0x99c>
 800ccfa:	9b04      	ldr	r3, [sp, #16]
 800ccfc:	9301      	str	r3, [sp, #4]
 800ccfe:	9b01      	ldr	r3, [sp, #4]
 800cd00:	b963      	cbnz	r3, 800cd1c <_dtoa_r+0x954>
 800cd02:	4631      	mov	r1, r6
 800cd04:	2205      	movs	r2, #5
 800cd06:	4620      	mov	r0, r4
 800cd08:	f000 f9fe 	bl	800d108 <__multadd>
 800cd0c:	4601      	mov	r1, r0
 800cd0e:	4606      	mov	r6, r0
 800cd10:	4650      	mov	r0, sl
 800cd12:	f000 fc13 	bl	800d53c <__mcmp>
 800cd16:	2800      	cmp	r0, #0
 800cd18:	f73f adbb 	bgt.w	800c892 <_dtoa_r+0x4ca>
 800cd1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cd1e:	9d00      	ldr	r5, [sp, #0]
 800cd20:	ea6f 0b03 	mvn.w	fp, r3
 800cd24:	f04f 0800 	mov.w	r8, #0
 800cd28:	4631      	mov	r1, r6
 800cd2a:	4620      	mov	r0, r4
 800cd2c:	f000 f9ca 	bl	800d0c4 <_Bfree>
 800cd30:	2f00      	cmp	r7, #0
 800cd32:	f43f aeab 	beq.w	800ca8c <_dtoa_r+0x6c4>
 800cd36:	f1b8 0f00 	cmp.w	r8, #0
 800cd3a:	d005      	beq.n	800cd48 <_dtoa_r+0x980>
 800cd3c:	45b8      	cmp	r8, r7
 800cd3e:	d003      	beq.n	800cd48 <_dtoa_r+0x980>
 800cd40:	4641      	mov	r1, r8
 800cd42:	4620      	mov	r0, r4
 800cd44:	f000 f9be 	bl	800d0c4 <_Bfree>
 800cd48:	4639      	mov	r1, r7
 800cd4a:	4620      	mov	r0, r4
 800cd4c:	f000 f9ba 	bl	800d0c4 <_Bfree>
 800cd50:	e69c      	b.n	800ca8c <_dtoa_r+0x6c4>
 800cd52:	2600      	movs	r6, #0
 800cd54:	4637      	mov	r7, r6
 800cd56:	e7e1      	b.n	800cd1c <_dtoa_r+0x954>
 800cd58:	46bb      	mov	fp, r7
 800cd5a:	4637      	mov	r7, r6
 800cd5c:	e599      	b.n	800c892 <_dtoa_r+0x4ca>
 800cd5e:	bf00      	nop
 800cd60:	40240000 	.word	0x40240000
 800cd64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	f000 80c8 	beq.w	800cefc <_dtoa_r+0xb34>
 800cd6c:	9b04      	ldr	r3, [sp, #16]
 800cd6e:	9301      	str	r3, [sp, #4]
 800cd70:	2d00      	cmp	r5, #0
 800cd72:	dd05      	ble.n	800cd80 <_dtoa_r+0x9b8>
 800cd74:	4639      	mov	r1, r7
 800cd76:	462a      	mov	r2, r5
 800cd78:	4620      	mov	r0, r4
 800cd7a:	f000 fb73 	bl	800d464 <__lshift>
 800cd7e:	4607      	mov	r7, r0
 800cd80:	f1b8 0f00 	cmp.w	r8, #0
 800cd84:	d05b      	beq.n	800ce3e <_dtoa_r+0xa76>
 800cd86:	6879      	ldr	r1, [r7, #4]
 800cd88:	4620      	mov	r0, r4
 800cd8a:	f000 f95b 	bl	800d044 <_Balloc>
 800cd8e:	4605      	mov	r5, r0
 800cd90:	b928      	cbnz	r0, 800cd9e <_dtoa_r+0x9d6>
 800cd92:	4b83      	ldr	r3, [pc, #524]	; (800cfa0 <_dtoa_r+0xbd8>)
 800cd94:	4602      	mov	r2, r0
 800cd96:	f240 21ef 	movw	r1, #751	; 0x2ef
 800cd9a:	f7ff bb2e 	b.w	800c3fa <_dtoa_r+0x32>
 800cd9e:	693a      	ldr	r2, [r7, #16]
 800cda0:	3202      	adds	r2, #2
 800cda2:	0092      	lsls	r2, r2, #2
 800cda4:	f107 010c 	add.w	r1, r7, #12
 800cda8:	300c      	adds	r0, #12
 800cdaa:	f7ff fa57 	bl	800c25c <memcpy>
 800cdae:	2201      	movs	r2, #1
 800cdb0:	4629      	mov	r1, r5
 800cdb2:	4620      	mov	r0, r4
 800cdb4:	f000 fb56 	bl	800d464 <__lshift>
 800cdb8:	9b00      	ldr	r3, [sp, #0]
 800cdba:	3301      	adds	r3, #1
 800cdbc:	9304      	str	r3, [sp, #16]
 800cdbe:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cdc2:	4413      	add	r3, r2
 800cdc4:	9308      	str	r3, [sp, #32]
 800cdc6:	9b02      	ldr	r3, [sp, #8]
 800cdc8:	f003 0301 	and.w	r3, r3, #1
 800cdcc:	46b8      	mov	r8, r7
 800cdce:	9306      	str	r3, [sp, #24]
 800cdd0:	4607      	mov	r7, r0
 800cdd2:	9b04      	ldr	r3, [sp, #16]
 800cdd4:	4631      	mov	r1, r6
 800cdd6:	3b01      	subs	r3, #1
 800cdd8:	4650      	mov	r0, sl
 800cdda:	9301      	str	r3, [sp, #4]
 800cddc:	f7ff fa6a 	bl	800c2b4 <quorem>
 800cde0:	4641      	mov	r1, r8
 800cde2:	9002      	str	r0, [sp, #8]
 800cde4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800cde8:	4650      	mov	r0, sl
 800cdea:	f000 fba7 	bl	800d53c <__mcmp>
 800cdee:	463a      	mov	r2, r7
 800cdf0:	9005      	str	r0, [sp, #20]
 800cdf2:	4631      	mov	r1, r6
 800cdf4:	4620      	mov	r0, r4
 800cdf6:	f000 fbbd 	bl	800d574 <__mdiff>
 800cdfa:	68c2      	ldr	r2, [r0, #12]
 800cdfc:	4605      	mov	r5, r0
 800cdfe:	bb02      	cbnz	r2, 800ce42 <_dtoa_r+0xa7a>
 800ce00:	4601      	mov	r1, r0
 800ce02:	4650      	mov	r0, sl
 800ce04:	f000 fb9a 	bl	800d53c <__mcmp>
 800ce08:	4602      	mov	r2, r0
 800ce0a:	4629      	mov	r1, r5
 800ce0c:	4620      	mov	r0, r4
 800ce0e:	9209      	str	r2, [sp, #36]	; 0x24
 800ce10:	f000 f958 	bl	800d0c4 <_Bfree>
 800ce14:	9b07      	ldr	r3, [sp, #28]
 800ce16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ce18:	9d04      	ldr	r5, [sp, #16]
 800ce1a:	ea43 0102 	orr.w	r1, r3, r2
 800ce1e:	9b06      	ldr	r3, [sp, #24]
 800ce20:	4319      	orrs	r1, r3
 800ce22:	d110      	bne.n	800ce46 <_dtoa_r+0xa7e>
 800ce24:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ce28:	d029      	beq.n	800ce7e <_dtoa_r+0xab6>
 800ce2a:	9b05      	ldr	r3, [sp, #20]
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	dd02      	ble.n	800ce36 <_dtoa_r+0xa6e>
 800ce30:	9b02      	ldr	r3, [sp, #8]
 800ce32:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800ce36:	9b01      	ldr	r3, [sp, #4]
 800ce38:	f883 9000 	strb.w	r9, [r3]
 800ce3c:	e774      	b.n	800cd28 <_dtoa_r+0x960>
 800ce3e:	4638      	mov	r0, r7
 800ce40:	e7ba      	b.n	800cdb8 <_dtoa_r+0x9f0>
 800ce42:	2201      	movs	r2, #1
 800ce44:	e7e1      	b.n	800ce0a <_dtoa_r+0xa42>
 800ce46:	9b05      	ldr	r3, [sp, #20]
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	db04      	blt.n	800ce56 <_dtoa_r+0xa8e>
 800ce4c:	9907      	ldr	r1, [sp, #28]
 800ce4e:	430b      	orrs	r3, r1
 800ce50:	9906      	ldr	r1, [sp, #24]
 800ce52:	430b      	orrs	r3, r1
 800ce54:	d120      	bne.n	800ce98 <_dtoa_r+0xad0>
 800ce56:	2a00      	cmp	r2, #0
 800ce58:	dded      	ble.n	800ce36 <_dtoa_r+0xa6e>
 800ce5a:	4651      	mov	r1, sl
 800ce5c:	2201      	movs	r2, #1
 800ce5e:	4620      	mov	r0, r4
 800ce60:	f000 fb00 	bl	800d464 <__lshift>
 800ce64:	4631      	mov	r1, r6
 800ce66:	4682      	mov	sl, r0
 800ce68:	f000 fb68 	bl	800d53c <__mcmp>
 800ce6c:	2800      	cmp	r0, #0
 800ce6e:	dc03      	bgt.n	800ce78 <_dtoa_r+0xab0>
 800ce70:	d1e1      	bne.n	800ce36 <_dtoa_r+0xa6e>
 800ce72:	f019 0f01 	tst.w	r9, #1
 800ce76:	d0de      	beq.n	800ce36 <_dtoa_r+0xa6e>
 800ce78:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ce7c:	d1d8      	bne.n	800ce30 <_dtoa_r+0xa68>
 800ce7e:	9a01      	ldr	r2, [sp, #4]
 800ce80:	2339      	movs	r3, #57	; 0x39
 800ce82:	7013      	strb	r3, [r2, #0]
 800ce84:	462b      	mov	r3, r5
 800ce86:	461d      	mov	r5, r3
 800ce88:	3b01      	subs	r3, #1
 800ce8a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ce8e:	2a39      	cmp	r2, #57	; 0x39
 800ce90:	d06c      	beq.n	800cf6c <_dtoa_r+0xba4>
 800ce92:	3201      	adds	r2, #1
 800ce94:	701a      	strb	r2, [r3, #0]
 800ce96:	e747      	b.n	800cd28 <_dtoa_r+0x960>
 800ce98:	2a00      	cmp	r2, #0
 800ce9a:	dd07      	ble.n	800ceac <_dtoa_r+0xae4>
 800ce9c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800cea0:	d0ed      	beq.n	800ce7e <_dtoa_r+0xab6>
 800cea2:	9a01      	ldr	r2, [sp, #4]
 800cea4:	f109 0301 	add.w	r3, r9, #1
 800cea8:	7013      	strb	r3, [r2, #0]
 800ceaa:	e73d      	b.n	800cd28 <_dtoa_r+0x960>
 800ceac:	9b04      	ldr	r3, [sp, #16]
 800ceae:	9a08      	ldr	r2, [sp, #32]
 800ceb0:	f803 9c01 	strb.w	r9, [r3, #-1]
 800ceb4:	4293      	cmp	r3, r2
 800ceb6:	d043      	beq.n	800cf40 <_dtoa_r+0xb78>
 800ceb8:	4651      	mov	r1, sl
 800ceba:	2300      	movs	r3, #0
 800cebc:	220a      	movs	r2, #10
 800cebe:	4620      	mov	r0, r4
 800cec0:	f000 f922 	bl	800d108 <__multadd>
 800cec4:	45b8      	cmp	r8, r7
 800cec6:	4682      	mov	sl, r0
 800cec8:	f04f 0300 	mov.w	r3, #0
 800cecc:	f04f 020a 	mov.w	r2, #10
 800ced0:	4641      	mov	r1, r8
 800ced2:	4620      	mov	r0, r4
 800ced4:	d107      	bne.n	800cee6 <_dtoa_r+0xb1e>
 800ced6:	f000 f917 	bl	800d108 <__multadd>
 800ceda:	4680      	mov	r8, r0
 800cedc:	4607      	mov	r7, r0
 800cede:	9b04      	ldr	r3, [sp, #16]
 800cee0:	3301      	adds	r3, #1
 800cee2:	9304      	str	r3, [sp, #16]
 800cee4:	e775      	b.n	800cdd2 <_dtoa_r+0xa0a>
 800cee6:	f000 f90f 	bl	800d108 <__multadd>
 800ceea:	4639      	mov	r1, r7
 800ceec:	4680      	mov	r8, r0
 800ceee:	2300      	movs	r3, #0
 800cef0:	220a      	movs	r2, #10
 800cef2:	4620      	mov	r0, r4
 800cef4:	f000 f908 	bl	800d108 <__multadd>
 800cef8:	4607      	mov	r7, r0
 800cefa:	e7f0      	b.n	800cede <_dtoa_r+0xb16>
 800cefc:	9b04      	ldr	r3, [sp, #16]
 800cefe:	9301      	str	r3, [sp, #4]
 800cf00:	9d00      	ldr	r5, [sp, #0]
 800cf02:	4631      	mov	r1, r6
 800cf04:	4650      	mov	r0, sl
 800cf06:	f7ff f9d5 	bl	800c2b4 <quorem>
 800cf0a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800cf0e:	9b00      	ldr	r3, [sp, #0]
 800cf10:	f805 9b01 	strb.w	r9, [r5], #1
 800cf14:	1aea      	subs	r2, r5, r3
 800cf16:	9b01      	ldr	r3, [sp, #4]
 800cf18:	4293      	cmp	r3, r2
 800cf1a:	dd07      	ble.n	800cf2c <_dtoa_r+0xb64>
 800cf1c:	4651      	mov	r1, sl
 800cf1e:	2300      	movs	r3, #0
 800cf20:	220a      	movs	r2, #10
 800cf22:	4620      	mov	r0, r4
 800cf24:	f000 f8f0 	bl	800d108 <__multadd>
 800cf28:	4682      	mov	sl, r0
 800cf2a:	e7ea      	b.n	800cf02 <_dtoa_r+0xb3a>
 800cf2c:	9b01      	ldr	r3, [sp, #4]
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	bfc8      	it	gt
 800cf32:	461d      	movgt	r5, r3
 800cf34:	9b00      	ldr	r3, [sp, #0]
 800cf36:	bfd8      	it	le
 800cf38:	2501      	movle	r5, #1
 800cf3a:	441d      	add	r5, r3
 800cf3c:	f04f 0800 	mov.w	r8, #0
 800cf40:	4651      	mov	r1, sl
 800cf42:	2201      	movs	r2, #1
 800cf44:	4620      	mov	r0, r4
 800cf46:	f000 fa8d 	bl	800d464 <__lshift>
 800cf4a:	4631      	mov	r1, r6
 800cf4c:	4682      	mov	sl, r0
 800cf4e:	f000 faf5 	bl	800d53c <__mcmp>
 800cf52:	2800      	cmp	r0, #0
 800cf54:	dc96      	bgt.n	800ce84 <_dtoa_r+0xabc>
 800cf56:	d102      	bne.n	800cf5e <_dtoa_r+0xb96>
 800cf58:	f019 0f01 	tst.w	r9, #1
 800cf5c:	d192      	bne.n	800ce84 <_dtoa_r+0xabc>
 800cf5e:	462b      	mov	r3, r5
 800cf60:	461d      	mov	r5, r3
 800cf62:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cf66:	2a30      	cmp	r2, #48	; 0x30
 800cf68:	d0fa      	beq.n	800cf60 <_dtoa_r+0xb98>
 800cf6a:	e6dd      	b.n	800cd28 <_dtoa_r+0x960>
 800cf6c:	9a00      	ldr	r2, [sp, #0]
 800cf6e:	429a      	cmp	r2, r3
 800cf70:	d189      	bne.n	800ce86 <_dtoa_r+0xabe>
 800cf72:	f10b 0b01 	add.w	fp, fp, #1
 800cf76:	2331      	movs	r3, #49	; 0x31
 800cf78:	e796      	b.n	800cea8 <_dtoa_r+0xae0>
 800cf7a:	4b0a      	ldr	r3, [pc, #40]	; (800cfa4 <_dtoa_r+0xbdc>)
 800cf7c:	f7ff ba99 	b.w	800c4b2 <_dtoa_r+0xea>
 800cf80:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	f47f aa6d 	bne.w	800c462 <_dtoa_r+0x9a>
 800cf88:	4b07      	ldr	r3, [pc, #28]	; (800cfa8 <_dtoa_r+0xbe0>)
 800cf8a:	f7ff ba92 	b.w	800c4b2 <_dtoa_r+0xea>
 800cf8e:	9b01      	ldr	r3, [sp, #4]
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	dcb5      	bgt.n	800cf00 <_dtoa_r+0xb38>
 800cf94:	9b07      	ldr	r3, [sp, #28]
 800cf96:	2b02      	cmp	r3, #2
 800cf98:	f73f aeb1 	bgt.w	800ccfe <_dtoa_r+0x936>
 800cf9c:	e7b0      	b.n	800cf00 <_dtoa_r+0xb38>
 800cf9e:	bf00      	nop
 800cfa0:	080218ae 	.word	0x080218ae
 800cfa4:	08021778 	.word	0x08021778
 800cfa8:	08021849 	.word	0x08021849

0800cfac <_free_r>:
 800cfac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cfae:	2900      	cmp	r1, #0
 800cfb0:	d044      	beq.n	800d03c <_free_r+0x90>
 800cfb2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cfb6:	9001      	str	r0, [sp, #4]
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	f1a1 0404 	sub.w	r4, r1, #4
 800cfbe:	bfb8      	it	lt
 800cfc0:	18e4      	addlt	r4, r4, r3
 800cfc2:	f7fe f96f 	bl	800b2a4 <__malloc_lock>
 800cfc6:	4a1e      	ldr	r2, [pc, #120]	; (800d040 <_free_r+0x94>)
 800cfc8:	9801      	ldr	r0, [sp, #4]
 800cfca:	6813      	ldr	r3, [r2, #0]
 800cfcc:	b933      	cbnz	r3, 800cfdc <_free_r+0x30>
 800cfce:	6063      	str	r3, [r4, #4]
 800cfd0:	6014      	str	r4, [r2, #0]
 800cfd2:	b003      	add	sp, #12
 800cfd4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cfd8:	f7fe b96a 	b.w	800b2b0 <__malloc_unlock>
 800cfdc:	42a3      	cmp	r3, r4
 800cfde:	d908      	bls.n	800cff2 <_free_r+0x46>
 800cfe0:	6825      	ldr	r5, [r4, #0]
 800cfe2:	1961      	adds	r1, r4, r5
 800cfe4:	428b      	cmp	r3, r1
 800cfe6:	bf01      	itttt	eq
 800cfe8:	6819      	ldreq	r1, [r3, #0]
 800cfea:	685b      	ldreq	r3, [r3, #4]
 800cfec:	1949      	addeq	r1, r1, r5
 800cfee:	6021      	streq	r1, [r4, #0]
 800cff0:	e7ed      	b.n	800cfce <_free_r+0x22>
 800cff2:	461a      	mov	r2, r3
 800cff4:	685b      	ldr	r3, [r3, #4]
 800cff6:	b10b      	cbz	r3, 800cffc <_free_r+0x50>
 800cff8:	42a3      	cmp	r3, r4
 800cffa:	d9fa      	bls.n	800cff2 <_free_r+0x46>
 800cffc:	6811      	ldr	r1, [r2, #0]
 800cffe:	1855      	adds	r5, r2, r1
 800d000:	42a5      	cmp	r5, r4
 800d002:	d10b      	bne.n	800d01c <_free_r+0x70>
 800d004:	6824      	ldr	r4, [r4, #0]
 800d006:	4421      	add	r1, r4
 800d008:	1854      	adds	r4, r2, r1
 800d00a:	42a3      	cmp	r3, r4
 800d00c:	6011      	str	r1, [r2, #0]
 800d00e:	d1e0      	bne.n	800cfd2 <_free_r+0x26>
 800d010:	681c      	ldr	r4, [r3, #0]
 800d012:	685b      	ldr	r3, [r3, #4]
 800d014:	6053      	str	r3, [r2, #4]
 800d016:	440c      	add	r4, r1
 800d018:	6014      	str	r4, [r2, #0]
 800d01a:	e7da      	b.n	800cfd2 <_free_r+0x26>
 800d01c:	d902      	bls.n	800d024 <_free_r+0x78>
 800d01e:	230c      	movs	r3, #12
 800d020:	6003      	str	r3, [r0, #0]
 800d022:	e7d6      	b.n	800cfd2 <_free_r+0x26>
 800d024:	6825      	ldr	r5, [r4, #0]
 800d026:	1961      	adds	r1, r4, r5
 800d028:	428b      	cmp	r3, r1
 800d02a:	bf04      	itt	eq
 800d02c:	6819      	ldreq	r1, [r3, #0]
 800d02e:	685b      	ldreq	r3, [r3, #4]
 800d030:	6063      	str	r3, [r4, #4]
 800d032:	bf04      	itt	eq
 800d034:	1949      	addeq	r1, r1, r5
 800d036:	6021      	streq	r1, [r4, #0]
 800d038:	6054      	str	r4, [r2, #4]
 800d03a:	e7ca      	b.n	800cfd2 <_free_r+0x26>
 800d03c:	b003      	add	sp, #12
 800d03e:	bd30      	pop	{r4, r5, pc}
 800d040:	200295f8 	.word	0x200295f8

0800d044 <_Balloc>:
 800d044:	b570      	push	{r4, r5, r6, lr}
 800d046:	69c6      	ldr	r6, [r0, #28]
 800d048:	4604      	mov	r4, r0
 800d04a:	460d      	mov	r5, r1
 800d04c:	b976      	cbnz	r6, 800d06c <_Balloc+0x28>
 800d04e:	2010      	movs	r0, #16
 800d050:	f7fe f880 	bl	800b154 <malloc>
 800d054:	4602      	mov	r2, r0
 800d056:	61e0      	str	r0, [r4, #28]
 800d058:	b920      	cbnz	r0, 800d064 <_Balloc+0x20>
 800d05a:	4b18      	ldr	r3, [pc, #96]	; (800d0bc <_Balloc+0x78>)
 800d05c:	4818      	ldr	r0, [pc, #96]	; (800d0c0 <_Balloc+0x7c>)
 800d05e:	216b      	movs	r1, #107	; 0x6b
 800d060:	f7ff f90a 	bl	800c278 <__assert_func>
 800d064:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d068:	6006      	str	r6, [r0, #0]
 800d06a:	60c6      	str	r6, [r0, #12]
 800d06c:	69e6      	ldr	r6, [r4, #28]
 800d06e:	68f3      	ldr	r3, [r6, #12]
 800d070:	b183      	cbz	r3, 800d094 <_Balloc+0x50>
 800d072:	69e3      	ldr	r3, [r4, #28]
 800d074:	68db      	ldr	r3, [r3, #12]
 800d076:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d07a:	b9b8      	cbnz	r0, 800d0ac <_Balloc+0x68>
 800d07c:	2101      	movs	r1, #1
 800d07e:	fa01 f605 	lsl.w	r6, r1, r5
 800d082:	1d72      	adds	r2, r6, #5
 800d084:	0092      	lsls	r2, r2, #2
 800d086:	4620      	mov	r0, r4
 800d088:	f000 ff8d 	bl	800dfa6 <_calloc_r>
 800d08c:	b160      	cbz	r0, 800d0a8 <_Balloc+0x64>
 800d08e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d092:	e00e      	b.n	800d0b2 <_Balloc+0x6e>
 800d094:	2221      	movs	r2, #33	; 0x21
 800d096:	2104      	movs	r1, #4
 800d098:	4620      	mov	r0, r4
 800d09a:	f000 ff84 	bl	800dfa6 <_calloc_r>
 800d09e:	69e3      	ldr	r3, [r4, #28]
 800d0a0:	60f0      	str	r0, [r6, #12]
 800d0a2:	68db      	ldr	r3, [r3, #12]
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d1e4      	bne.n	800d072 <_Balloc+0x2e>
 800d0a8:	2000      	movs	r0, #0
 800d0aa:	bd70      	pop	{r4, r5, r6, pc}
 800d0ac:	6802      	ldr	r2, [r0, #0]
 800d0ae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d0b2:	2300      	movs	r3, #0
 800d0b4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d0b8:	e7f7      	b.n	800d0aa <_Balloc+0x66>
 800d0ba:	bf00      	nop
 800d0bc:	0802179c 	.word	0x0802179c
 800d0c0:	080218bf 	.word	0x080218bf

0800d0c4 <_Bfree>:
 800d0c4:	b570      	push	{r4, r5, r6, lr}
 800d0c6:	69c6      	ldr	r6, [r0, #28]
 800d0c8:	4605      	mov	r5, r0
 800d0ca:	460c      	mov	r4, r1
 800d0cc:	b976      	cbnz	r6, 800d0ec <_Bfree+0x28>
 800d0ce:	2010      	movs	r0, #16
 800d0d0:	f7fe f840 	bl	800b154 <malloc>
 800d0d4:	4602      	mov	r2, r0
 800d0d6:	61e8      	str	r0, [r5, #28]
 800d0d8:	b920      	cbnz	r0, 800d0e4 <_Bfree+0x20>
 800d0da:	4b09      	ldr	r3, [pc, #36]	; (800d100 <_Bfree+0x3c>)
 800d0dc:	4809      	ldr	r0, [pc, #36]	; (800d104 <_Bfree+0x40>)
 800d0de:	218f      	movs	r1, #143	; 0x8f
 800d0e0:	f7ff f8ca 	bl	800c278 <__assert_func>
 800d0e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d0e8:	6006      	str	r6, [r0, #0]
 800d0ea:	60c6      	str	r6, [r0, #12]
 800d0ec:	b13c      	cbz	r4, 800d0fe <_Bfree+0x3a>
 800d0ee:	69eb      	ldr	r3, [r5, #28]
 800d0f0:	6862      	ldr	r2, [r4, #4]
 800d0f2:	68db      	ldr	r3, [r3, #12]
 800d0f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d0f8:	6021      	str	r1, [r4, #0]
 800d0fa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d0fe:	bd70      	pop	{r4, r5, r6, pc}
 800d100:	0802179c 	.word	0x0802179c
 800d104:	080218bf 	.word	0x080218bf

0800d108 <__multadd>:
 800d108:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d10c:	690d      	ldr	r5, [r1, #16]
 800d10e:	4607      	mov	r7, r0
 800d110:	460c      	mov	r4, r1
 800d112:	461e      	mov	r6, r3
 800d114:	f101 0c14 	add.w	ip, r1, #20
 800d118:	2000      	movs	r0, #0
 800d11a:	f8dc 3000 	ldr.w	r3, [ip]
 800d11e:	b299      	uxth	r1, r3
 800d120:	fb02 6101 	mla	r1, r2, r1, r6
 800d124:	0c1e      	lsrs	r6, r3, #16
 800d126:	0c0b      	lsrs	r3, r1, #16
 800d128:	fb02 3306 	mla	r3, r2, r6, r3
 800d12c:	b289      	uxth	r1, r1
 800d12e:	3001      	adds	r0, #1
 800d130:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d134:	4285      	cmp	r5, r0
 800d136:	f84c 1b04 	str.w	r1, [ip], #4
 800d13a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d13e:	dcec      	bgt.n	800d11a <__multadd+0x12>
 800d140:	b30e      	cbz	r6, 800d186 <__multadd+0x7e>
 800d142:	68a3      	ldr	r3, [r4, #8]
 800d144:	42ab      	cmp	r3, r5
 800d146:	dc19      	bgt.n	800d17c <__multadd+0x74>
 800d148:	6861      	ldr	r1, [r4, #4]
 800d14a:	4638      	mov	r0, r7
 800d14c:	3101      	adds	r1, #1
 800d14e:	f7ff ff79 	bl	800d044 <_Balloc>
 800d152:	4680      	mov	r8, r0
 800d154:	b928      	cbnz	r0, 800d162 <__multadd+0x5a>
 800d156:	4602      	mov	r2, r0
 800d158:	4b0c      	ldr	r3, [pc, #48]	; (800d18c <__multadd+0x84>)
 800d15a:	480d      	ldr	r0, [pc, #52]	; (800d190 <__multadd+0x88>)
 800d15c:	21ba      	movs	r1, #186	; 0xba
 800d15e:	f7ff f88b 	bl	800c278 <__assert_func>
 800d162:	6922      	ldr	r2, [r4, #16]
 800d164:	3202      	adds	r2, #2
 800d166:	f104 010c 	add.w	r1, r4, #12
 800d16a:	0092      	lsls	r2, r2, #2
 800d16c:	300c      	adds	r0, #12
 800d16e:	f7ff f875 	bl	800c25c <memcpy>
 800d172:	4621      	mov	r1, r4
 800d174:	4638      	mov	r0, r7
 800d176:	f7ff ffa5 	bl	800d0c4 <_Bfree>
 800d17a:	4644      	mov	r4, r8
 800d17c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d180:	3501      	adds	r5, #1
 800d182:	615e      	str	r6, [r3, #20]
 800d184:	6125      	str	r5, [r4, #16]
 800d186:	4620      	mov	r0, r4
 800d188:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d18c:	080218ae 	.word	0x080218ae
 800d190:	080218bf 	.word	0x080218bf

0800d194 <__hi0bits>:
 800d194:	0c03      	lsrs	r3, r0, #16
 800d196:	041b      	lsls	r3, r3, #16
 800d198:	b9d3      	cbnz	r3, 800d1d0 <__hi0bits+0x3c>
 800d19a:	0400      	lsls	r0, r0, #16
 800d19c:	2310      	movs	r3, #16
 800d19e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d1a2:	bf04      	itt	eq
 800d1a4:	0200      	lsleq	r0, r0, #8
 800d1a6:	3308      	addeq	r3, #8
 800d1a8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d1ac:	bf04      	itt	eq
 800d1ae:	0100      	lsleq	r0, r0, #4
 800d1b0:	3304      	addeq	r3, #4
 800d1b2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d1b6:	bf04      	itt	eq
 800d1b8:	0080      	lsleq	r0, r0, #2
 800d1ba:	3302      	addeq	r3, #2
 800d1bc:	2800      	cmp	r0, #0
 800d1be:	db05      	blt.n	800d1cc <__hi0bits+0x38>
 800d1c0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d1c4:	f103 0301 	add.w	r3, r3, #1
 800d1c8:	bf08      	it	eq
 800d1ca:	2320      	moveq	r3, #32
 800d1cc:	4618      	mov	r0, r3
 800d1ce:	4770      	bx	lr
 800d1d0:	2300      	movs	r3, #0
 800d1d2:	e7e4      	b.n	800d19e <__hi0bits+0xa>

0800d1d4 <__lo0bits>:
 800d1d4:	6803      	ldr	r3, [r0, #0]
 800d1d6:	f013 0207 	ands.w	r2, r3, #7
 800d1da:	d00c      	beq.n	800d1f6 <__lo0bits+0x22>
 800d1dc:	07d9      	lsls	r1, r3, #31
 800d1de:	d422      	bmi.n	800d226 <__lo0bits+0x52>
 800d1e0:	079a      	lsls	r2, r3, #30
 800d1e2:	bf49      	itett	mi
 800d1e4:	085b      	lsrmi	r3, r3, #1
 800d1e6:	089b      	lsrpl	r3, r3, #2
 800d1e8:	6003      	strmi	r3, [r0, #0]
 800d1ea:	2201      	movmi	r2, #1
 800d1ec:	bf5c      	itt	pl
 800d1ee:	6003      	strpl	r3, [r0, #0]
 800d1f0:	2202      	movpl	r2, #2
 800d1f2:	4610      	mov	r0, r2
 800d1f4:	4770      	bx	lr
 800d1f6:	b299      	uxth	r1, r3
 800d1f8:	b909      	cbnz	r1, 800d1fe <__lo0bits+0x2a>
 800d1fa:	0c1b      	lsrs	r3, r3, #16
 800d1fc:	2210      	movs	r2, #16
 800d1fe:	b2d9      	uxtb	r1, r3
 800d200:	b909      	cbnz	r1, 800d206 <__lo0bits+0x32>
 800d202:	3208      	adds	r2, #8
 800d204:	0a1b      	lsrs	r3, r3, #8
 800d206:	0719      	lsls	r1, r3, #28
 800d208:	bf04      	itt	eq
 800d20a:	091b      	lsreq	r3, r3, #4
 800d20c:	3204      	addeq	r2, #4
 800d20e:	0799      	lsls	r1, r3, #30
 800d210:	bf04      	itt	eq
 800d212:	089b      	lsreq	r3, r3, #2
 800d214:	3202      	addeq	r2, #2
 800d216:	07d9      	lsls	r1, r3, #31
 800d218:	d403      	bmi.n	800d222 <__lo0bits+0x4e>
 800d21a:	085b      	lsrs	r3, r3, #1
 800d21c:	f102 0201 	add.w	r2, r2, #1
 800d220:	d003      	beq.n	800d22a <__lo0bits+0x56>
 800d222:	6003      	str	r3, [r0, #0]
 800d224:	e7e5      	b.n	800d1f2 <__lo0bits+0x1e>
 800d226:	2200      	movs	r2, #0
 800d228:	e7e3      	b.n	800d1f2 <__lo0bits+0x1e>
 800d22a:	2220      	movs	r2, #32
 800d22c:	e7e1      	b.n	800d1f2 <__lo0bits+0x1e>
	...

0800d230 <__i2b>:
 800d230:	b510      	push	{r4, lr}
 800d232:	460c      	mov	r4, r1
 800d234:	2101      	movs	r1, #1
 800d236:	f7ff ff05 	bl	800d044 <_Balloc>
 800d23a:	4602      	mov	r2, r0
 800d23c:	b928      	cbnz	r0, 800d24a <__i2b+0x1a>
 800d23e:	4b05      	ldr	r3, [pc, #20]	; (800d254 <__i2b+0x24>)
 800d240:	4805      	ldr	r0, [pc, #20]	; (800d258 <__i2b+0x28>)
 800d242:	f240 1145 	movw	r1, #325	; 0x145
 800d246:	f7ff f817 	bl	800c278 <__assert_func>
 800d24a:	2301      	movs	r3, #1
 800d24c:	6144      	str	r4, [r0, #20]
 800d24e:	6103      	str	r3, [r0, #16]
 800d250:	bd10      	pop	{r4, pc}
 800d252:	bf00      	nop
 800d254:	080218ae 	.word	0x080218ae
 800d258:	080218bf 	.word	0x080218bf

0800d25c <__multiply>:
 800d25c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d260:	4691      	mov	r9, r2
 800d262:	690a      	ldr	r2, [r1, #16]
 800d264:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d268:	429a      	cmp	r2, r3
 800d26a:	bfb8      	it	lt
 800d26c:	460b      	movlt	r3, r1
 800d26e:	460c      	mov	r4, r1
 800d270:	bfbc      	itt	lt
 800d272:	464c      	movlt	r4, r9
 800d274:	4699      	movlt	r9, r3
 800d276:	6927      	ldr	r7, [r4, #16]
 800d278:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d27c:	68a3      	ldr	r3, [r4, #8]
 800d27e:	6861      	ldr	r1, [r4, #4]
 800d280:	eb07 060a 	add.w	r6, r7, sl
 800d284:	42b3      	cmp	r3, r6
 800d286:	b085      	sub	sp, #20
 800d288:	bfb8      	it	lt
 800d28a:	3101      	addlt	r1, #1
 800d28c:	f7ff feda 	bl	800d044 <_Balloc>
 800d290:	b930      	cbnz	r0, 800d2a0 <__multiply+0x44>
 800d292:	4602      	mov	r2, r0
 800d294:	4b44      	ldr	r3, [pc, #272]	; (800d3a8 <__multiply+0x14c>)
 800d296:	4845      	ldr	r0, [pc, #276]	; (800d3ac <__multiply+0x150>)
 800d298:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800d29c:	f7fe ffec 	bl	800c278 <__assert_func>
 800d2a0:	f100 0514 	add.w	r5, r0, #20
 800d2a4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d2a8:	462b      	mov	r3, r5
 800d2aa:	2200      	movs	r2, #0
 800d2ac:	4543      	cmp	r3, r8
 800d2ae:	d321      	bcc.n	800d2f4 <__multiply+0x98>
 800d2b0:	f104 0314 	add.w	r3, r4, #20
 800d2b4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d2b8:	f109 0314 	add.w	r3, r9, #20
 800d2bc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d2c0:	9202      	str	r2, [sp, #8]
 800d2c2:	1b3a      	subs	r2, r7, r4
 800d2c4:	3a15      	subs	r2, #21
 800d2c6:	f022 0203 	bic.w	r2, r2, #3
 800d2ca:	3204      	adds	r2, #4
 800d2cc:	f104 0115 	add.w	r1, r4, #21
 800d2d0:	428f      	cmp	r7, r1
 800d2d2:	bf38      	it	cc
 800d2d4:	2204      	movcc	r2, #4
 800d2d6:	9201      	str	r2, [sp, #4]
 800d2d8:	9a02      	ldr	r2, [sp, #8]
 800d2da:	9303      	str	r3, [sp, #12]
 800d2dc:	429a      	cmp	r2, r3
 800d2de:	d80c      	bhi.n	800d2fa <__multiply+0x9e>
 800d2e0:	2e00      	cmp	r6, #0
 800d2e2:	dd03      	ble.n	800d2ec <__multiply+0x90>
 800d2e4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d05b      	beq.n	800d3a4 <__multiply+0x148>
 800d2ec:	6106      	str	r6, [r0, #16]
 800d2ee:	b005      	add	sp, #20
 800d2f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2f4:	f843 2b04 	str.w	r2, [r3], #4
 800d2f8:	e7d8      	b.n	800d2ac <__multiply+0x50>
 800d2fa:	f8b3 a000 	ldrh.w	sl, [r3]
 800d2fe:	f1ba 0f00 	cmp.w	sl, #0
 800d302:	d024      	beq.n	800d34e <__multiply+0xf2>
 800d304:	f104 0e14 	add.w	lr, r4, #20
 800d308:	46a9      	mov	r9, r5
 800d30a:	f04f 0c00 	mov.w	ip, #0
 800d30e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d312:	f8d9 1000 	ldr.w	r1, [r9]
 800d316:	fa1f fb82 	uxth.w	fp, r2
 800d31a:	b289      	uxth	r1, r1
 800d31c:	fb0a 110b 	mla	r1, sl, fp, r1
 800d320:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d324:	f8d9 2000 	ldr.w	r2, [r9]
 800d328:	4461      	add	r1, ip
 800d32a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d32e:	fb0a c20b 	mla	r2, sl, fp, ip
 800d332:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d336:	b289      	uxth	r1, r1
 800d338:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d33c:	4577      	cmp	r7, lr
 800d33e:	f849 1b04 	str.w	r1, [r9], #4
 800d342:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d346:	d8e2      	bhi.n	800d30e <__multiply+0xb2>
 800d348:	9a01      	ldr	r2, [sp, #4]
 800d34a:	f845 c002 	str.w	ip, [r5, r2]
 800d34e:	9a03      	ldr	r2, [sp, #12]
 800d350:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d354:	3304      	adds	r3, #4
 800d356:	f1b9 0f00 	cmp.w	r9, #0
 800d35a:	d021      	beq.n	800d3a0 <__multiply+0x144>
 800d35c:	6829      	ldr	r1, [r5, #0]
 800d35e:	f104 0c14 	add.w	ip, r4, #20
 800d362:	46ae      	mov	lr, r5
 800d364:	f04f 0a00 	mov.w	sl, #0
 800d368:	f8bc b000 	ldrh.w	fp, [ip]
 800d36c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d370:	fb09 220b 	mla	r2, r9, fp, r2
 800d374:	4452      	add	r2, sl
 800d376:	b289      	uxth	r1, r1
 800d378:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d37c:	f84e 1b04 	str.w	r1, [lr], #4
 800d380:	f85c 1b04 	ldr.w	r1, [ip], #4
 800d384:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d388:	f8be 1000 	ldrh.w	r1, [lr]
 800d38c:	fb09 110a 	mla	r1, r9, sl, r1
 800d390:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800d394:	4567      	cmp	r7, ip
 800d396:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d39a:	d8e5      	bhi.n	800d368 <__multiply+0x10c>
 800d39c:	9a01      	ldr	r2, [sp, #4]
 800d39e:	50a9      	str	r1, [r5, r2]
 800d3a0:	3504      	adds	r5, #4
 800d3a2:	e799      	b.n	800d2d8 <__multiply+0x7c>
 800d3a4:	3e01      	subs	r6, #1
 800d3a6:	e79b      	b.n	800d2e0 <__multiply+0x84>
 800d3a8:	080218ae 	.word	0x080218ae
 800d3ac:	080218bf 	.word	0x080218bf

0800d3b0 <__pow5mult>:
 800d3b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d3b4:	4615      	mov	r5, r2
 800d3b6:	f012 0203 	ands.w	r2, r2, #3
 800d3ba:	4606      	mov	r6, r0
 800d3bc:	460f      	mov	r7, r1
 800d3be:	d007      	beq.n	800d3d0 <__pow5mult+0x20>
 800d3c0:	4c25      	ldr	r4, [pc, #148]	; (800d458 <__pow5mult+0xa8>)
 800d3c2:	3a01      	subs	r2, #1
 800d3c4:	2300      	movs	r3, #0
 800d3c6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d3ca:	f7ff fe9d 	bl	800d108 <__multadd>
 800d3ce:	4607      	mov	r7, r0
 800d3d0:	10ad      	asrs	r5, r5, #2
 800d3d2:	d03d      	beq.n	800d450 <__pow5mult+0xa0>
 800d3d4:	69f4      	ldr	r4, [r6, #28]
 800d3d6:	b97c      	cbnz	r4, 800d3f8 <__pow5mult+0x48>
 800d3d8:	2010      	movs	r0, #16
 800d3da:	f7fd febb 	bl	800b154 <malloc>
 800d3de:	4602      	mov	r2, r0
 800d3e0:	61f0      	str	r0, [r6, #28]
 800d3e2:	b928      	cbnz	r0, 800d3f0 <__pow5mult+0x40>
 800d3e4:	4b1d      	ldr	r3, [pc, #116]	; (800d45c <__pow5mult+0xac>)
 800d3e6:	481e      	ldr	r0, [pc, #120]	; (800d460 <__pow5mult+0xb0>)
 800d3e8:	f240 11b3 	movw	r1, #435	; 0x1b3
 800d3ec:	f7fe ff44 	bl	800c278 <__assert_func>
 800d3f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d3f4:	6004      	str	r4, [r0, #0]
 800d3f6:	60c4      	str	r4, [r0, #12]
 800d3f8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800d3fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d400:	b94c      	cbnz	r4, 800d416 <__pow5mult+0x66>
 800d402:	f240 2171 	movw	r1, #625	; 0x271
 800d406:	4630      	mov	r0, r6
 800d408:	f7ff ff12 	bl	800d230 <__i2b>
 800d40c:	2300      	movs	r3, #0
 800d40e:	f8c8 0008 	str.w	r0, [r8, #8]
 800d412:	4604      	mov	r4, r0
 800d414:	6003      	str	r3, [r0, #0]
 800d416:	f04f 0900 	mov.w	r9, #0
 800d41a:	07eb      	lsls	r3, r5, #31
 800d41c:	d50a      	bpl.n	800d434 <__pow5mult+0x84>
 800d41e:	4639      	mov	r1, r7
 800d420:	4622      	mov	r2, r4
 800d422:	4630      	mov	r0, r6
 800d424:	f7ff ff1a 	bl	800d25c <__multiply>
 800d428:	4639      	mov	r1, r7
 800d42a:	4680      	mov	r8, r0
 800d42c:	4630      	mov	r0, r6
 800d42e:	f7ff fe49 	bl	800d0c4 <_Bfree>
 800d432:	4647      	mov	r7, r8
 800d434:	106d      	asrs	r5, r5, #1
 800d436:	d00b      	beq.n	800d450 <__pow5mult+0xa0>
 800d438:	6820      	ldr	r0, [r4, #0]
 800d43a:	b938      	cbnz	r0, 800d44c <__pow5mult+0x9c>
 800d43c:	4622      	mov	r2, r4
 800d43e:	4621      	mov	r1, r4
 800d440:	4630      	mov	r0, r6
 800d442:	f7ff ff0b 	bl	800d25c <__multiply>
 800d446:	6020      	str	r0, [r4, #0]
 800d448:	f8c0 9000 	str.w	r9, [r0]
 800d44c:	4604      	mov	r4, r0
 800d44e:	e7e4      	b.n	800d41a <__pow5mult+0x6a>
 800d450:	4638      	mov	r0, r7
 800d452:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d456:	bf00      	nop
 800d458:	08021a08 	.word	0x08021a08
 800d45c:	0802179c 	.word	0x0802179c
 800d460:	080218bf 	.word	0x080218bf

0800d464 <__lshift>:
 800d464:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d468:	460c      	mov	r4, r1
 800d46a:	6849      	ldr	r1, [r1, #4]
 800d46c:	6923      	ldr	r3, [r4, #16]
 800d46e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d472:	68a3      	ldr	r3, [r4, #8]
 800d474:	4607      	mov	r7, r0
 800d476:	4691      	mov	r9, r2
 800d478:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d47c:	f108 0601 	add.w	r6, r8, #1
 800d480:	42b3      	cmp	r3, r6
 800d482:	db0b      	blt.n	800d49c <__lshift+0x38>
 800d484:	4638      	mov	r0, r7
 800d486:	f7ff fddd 	bl	800d044 <_Balloc>
 800d48a:	4605      	mov	r5, r0
 800d48c:	b948      	cbnz	r0, 800d4a2 <__lshift+0x3e>
 800d48e:	4602      	mov	r2, r0
 800d490:	4b28      	ldr	r3, [pc, #160]	; (800d534 <__lshift+0xd0>)
 800d492:	4829      	ldr	r0, [pc, #164]	; (800d538 <__lshift+0xd4>)
 800d494:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800d498:	f7fe feee 	bl	800c278 <__assert_func>
 800d49c:	3101      	adds	r1, #1
 800d49e:	005b      	lsls	r3, r3, #1
 800d4a0:	e7ee      	b.n	800d480 <__lshift+0x1c>
 800d4a2:	2300      	movs	r3, #0
 800d4a4:	f100 0114 	add.w	r1, r0, #20
 800d4a8:	f100 0210 	add.w	r2, r0, #16
 800d4ac:	4618      	mov	r0, r3
 800d4ae:	4553      	cmp	r3, sl
 800d4b0:	db33      	blt.n	800d51a <__lshift+0xb6>
 800d4b2:	6920      	ldr	r0, [r4, #16]
 800d4b4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d4b8:	f104 0314 	add.w	r3, r4, #20
 800d4bc:	f019 091f 	ands.w	r9, r9, #31
 800d4c0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d4c4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d4c8:	d02b      	beq.n	800d522 <__lshift+0xbe>
 800d4ca:	f1c9 0e20 	rsb	lr, r9, #32
 800d4ce:	468a      	mov	sl, r1
 800d4d0:	2200      	movs	r2, #0
 800d4d2:	6818      	ldr	r0, [r3, #0]
 800d4d4:	fa00 f009 	lsl.w	r0, r0, r9
 800d4d8:	4310      	orrs	r0, r2
 800d4da:	f84a 0b04 	str.w	r0, [sl], #4
 800d4de:	f853 2b04 	ldr.w	r2, [r3], #4
 800d4e2:	459c      	cmp	ip, r3
 800d4e4:	fa22 f20e 	lsr.w	r2, r2, lr
 800d4e8:	d8f3      	bhi.n	800d4d2 <__lshift+0x6e>
 800d4ea:	ebac 0304 	sub.w	r3, ip, r4
 800d4ee:	3b15      	subs	r3, #21
 800d4f0:	f023 0303 	bic.w	r3, r3, #3
 800d4f4:	3304      	adds	r3, #4
 800d4f6:	f104 0015 	add.w	r0, r4, #21
 800d4fa:	4584      	cmp	ip, r0
 800d4fc:	bf38      	it	cc
 800d4fe:	2304      	movcc	r3, #4
 800d500:	50ca      	str	r2, [r1, r3]
 800d502:	b10a      	cbz	r2, 800d508 <__lshift+0xa4>
 800d504:	f108 0602 	add.w	r6, r8, #2
 800d508:	3e01      	subs	r6, #1
 800d50a:	4638      	mov	r0, r7
 800d50c:	612e      	str	r6, [r5, #16]
 800d50e:	4621      	mov	r1, r4
 800d510:	f7ff fdd8 	bl	800d0c4 <_Bfree>
 800d514:	4628      	mov	r0, r5
 800d516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d51a:	f842 0f04 	str.w	r0, [r2, #4]!
 800d51e:	3301      	adds	r3, #1
 800d520:	e7c5      	b.n	800d4ae <__lshift+0x4a>
 800d522:	3904      	subs	r1, #4
 800d524:	f853 2b04 	ldr.w	r2, [r3], #4
 800d528:	f841 2f04 	str.w	r2, [r1, #4]!
 800d52c:	459c      	cmp	ip, r3
 800d52e:	d8f9      	bhi.n	800d524 <__lshift+0xc0>
 800d530:	e7ea      	b.n	800d508 <__lshift+0xa4>
 800d532:	bf00      	nop
 800d534:	080218ae 	.word	0x080218ae
 800d538:	080218bf 	.word	0x080218bf

0800d53c <__mcmp>:
 800d53c:	b530      	push	{r4, r5, lr}
 800d53e:	6902      	ldr	r2, [r0, #16]
 800d540:	690c      	ldr	r4, [r1, #16]
 800d542:	1b12      	subs	r2, r2, r4
 800d544:	d10e      	bne.n	800d564 <__mcmp+0x28>
 800d546:	f100 0314 	add.w	r3, r0, #20
 800d54a:	3114      	adds	r1, #20
 800d54c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d550:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d554:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d558:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d55c:	42a5      	cmp	r5, r4
 800d55e:	d003      	beq.n	800d568 <__mcmp+0x2c>
 800d560:	d305      	bcc.n	800d56e <__mcmp+0x32>
 800d562:	2201      	movs	r2, #1
 800d564:	4610      	mov	r0, r2
 800d566:	bd30      	pop	{r4, r5, pc}
 800d568:	4283      	cmp	r3, r0
 800d56a:	d3f3      	bcc.n	800d554 <__mcmp+0x18>
 800d56c:	e7fa      	b.n	800d564 <__mcmp+0x28>
 800d56e:	f04f 32ff 	mov.w	r2, #4294967295
 800d572:	e7f7      	b.n	800d564 <__mcmp+0x28>

0800d574 <__mdiff>:
 800d574:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d578:	460c      	mov	r4, r1
 800d57a:	4606      	mov	r6, r0
 800d57c:	4611      	mov	r1, r2
 800d57e:	4620      	mov	r0, r4
 800d580:	4690      	mov	r8, r2
 800d582:	f7ff ffdb 	bl	800d53c <__mcmp>
 800d586:	1e05      	subs	r5, r0, #0
 800d588:	d110      	bne.n	800d5ac <__mdiff+0x38>
 800d58a:	4629      	mov	r1, r5
 800d58c:	4630      	mov	r0, r6
 800d58e:	f7ff fd59 	bl	800d044 <_Balloc>
 800d592:	b930      	cbnz	r0, 800d5a2 <__mdiff+0x2e>
 800d594:	4b3a      	ldr	r3, [pc, #232]	; (800d680 <__mdiff+0x10c>)
 800d596:	4602      	mov	r2, r0
 800d598:	f240 2137 	movw	r1, #567	; 0x237
 800d59c:	4839      	ldr	r0, [pc, #228]	; (800d684 <__mdiff+0x110>)
 800d59e:	f7fe fe6b 	bl	800c278 <__assert_func>
 800d5a2:	2301      	movs	r3, #1
 800d5a4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d5a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5ac:	bfa4      	itt	ge
 800d5ae:	4643      	movge	r3, r8
 800d5b0:	46a0      	movge	r8, r4
 800d5b2:	4630      	mov	r0, r6
 800d5b4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d5b8:	bfa6      	itte	ge
 800d5ba:	461c      	movge	r4, r3
 800d5bc:	2500      	movge	r5, #0
 800d5be:	2501      	movlt	r5, #1
 800d5c0:	f7ff fd40 	bl	800d044 <_Balloc>
 800d5c4:	b920      	cbnz	r0, 800d5d0 <__mdiff+0x5c>
 800d5c6:	4b2e      	ldr	r3, [pc, #184]	; (800d680 <__mdiff+0x10c>)
 800d5c8:	4602      	mov	r2, r0
 800d5ca:	f240 2145 	movw	r1, #581	; 0x245
 800d5ce:	e7e5      	b.n	800d59c <__mdiff+0x28>
 800d5d0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d5d4:	6926      	ldr	r6, [r4, #16]
 800d5d6:	60c5      	str	r5, [r0, #12]
 800d5d8:	f104 0914 	add.w	r9, r4, #20
 800d5dc:	f108 0514 	add.w	r5, r8, #20
 800d5e0:	f100 0e14 	add.w	lr, r0, #20
 800d5e4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d5e8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d5ec:	f108 0210 	add.w	r2, r8, #16
 800d5f0:	46f2      	mov	sl, lr
 800d5f2:	2100      	movs	r1, #0
 800d5f4:	f859 3b04 	ldr.w	r3, [r9], #4
 800d5f8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d5fc:	fa11 f88b 	uxtah	r8, r1, fp
 800d600:	b299      	uxth	r1, r3
 800d602:	0c1b      	lsrs	r3, r3, #16
 800d604:	eba8 0801 	sub.w	r8, r8, r1
 800d608:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d60c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d610:	fa1f f888 	uxth.w	r8, r8
 800d614:	1419      	asrs	r1, r3, #16
 800d616:	454e      	cmp	r6, r9
 800d618:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d61c:	f84a 3b04 	str.w	r3, [sl], #4
 800d620:	d8e8      	bhi.n	800d5f4 <__mdiff+0x80>
 800d622:	1b33      	subs	r3, r6, r4
 800d624:	3b15      	subs	r3, #21
 800d626:	f023 0303 	bic.w	r3, r3, #3
 800d62a:	3304      	adds	r3, #4
 800d62c:	3415      	adds	r4, #21
 800d62e:	42a6      	cmp	r6, r4
 800d630:	bf38      	it	cc
 800d632:	2304      	movcc	r3, #4
 800d634:	441d      	add	r5, r3
 800d636:	4473      	add	r3, lr
 800d638:	469e      	mov	lr, r3
 800d63a:	462e      	mov	r6, r5
 800d63c:	4566      	cmp	r6, ip
 800d63e:	d30e      	bcc.n	800d65e <__mdiff+0xea>
 800d640:	f10c 0203 	add.w	r2, ip, #3
 800d644:	1b52      	subs	r2, r2, r5
 800d646:	f022 0203 	bic.w	r2, r2, #3
 800d64a:	3d03      	subs	r5, #3
 800d64c:	45ac      	cmp	ip, r5
 800d64e:	bf38      	it	cc
 800d650:	2200      	movcc	r2, #0
 800d652:	4413      	add	r3, r2
 800d654:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800d658:	b17a      	cbz	r2, 800d67a <__mdiff+0x106>
 800d65a:	6107      	str	r7, [r0, #16]
 800d65c:	e7a4      	b.n	800d5a8 <__mdiff+0x34>
 800d65e:	f856 8b04 	ldr.w	r8, [r6], #4
 800d662:	fa11 f288 	uxtah	r2, r1, r8
 800d666:	1414      	asrs	r4, r2, #16
 800d668:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d66c:	b292      	uxth	r2, r2
 800d66e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d672:	f84e 2b04 	str.w	r2, [lr], #4
 800d676:	1421      	asrs	r1, r4, #16
 800d678:	e7e0      	b.n	800d63c <__mdiff+0xc8>
 800d67a:	3f01      	subs	r7, #1
 800d67c:	e7ea      	b.n	800d654 <__mdiff+0xe0>
 800d67e:	bf00      	nop
 800d680:	080218ae 	.word	0x080218ae
 800d684:	080218bf 	.word	0x080218bf

0800d688 <__d2b>:
 800d688:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d68c:	460f      	mov	r7, r1
 800d68e:	2101      	movs	r1, #1
 800d690:	ec59 8b10 	vmov	r8, r9, d0
 800d694:	4616      	mov	r6, r2
 800d696:	f7ff fcd5 	bl	800d044 <_Balloc>
 800d69a:	4604      	mov	r4, r0
 800d69c:	b930      	cbnz	r0, 800d6ac <__d2b+0x24>
 800d69e:	4602      	mov	r2, r0
 800d6a0:	4b24      	ldr	r3, [pc, #144]	; (800d734 <__d2b+0xac>)
 800d6a2:	4825      	ldr	r0, [pc, #148]	; (800d738 <__d2b+0xb0>)
 800d6a4:	f240 310f 	movw	r1, #783	; 0x30f
 800d6a8:	f7fe fde6 	bl	800c278 <__assert_func>
 800d6ac:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d6b0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d6b4:	bb2d      	cbnz	r5, 800d702 <__d2b+0x7a>
 800d6b6:	9301      	str	r3, [sp, #4]
 800d6b8:	f1b8 0300 	subs.w	r3, r8, #0
 800d6bc:	d026      	beq.n	800d70c <__d2b+0x84>
 800d6be:	4668      	mov	r0, sp
 800d6c0:	9300      	str	r3, [sp, #0]
 800d6c2:	f7ff fd87 	bl	800d1d4 <__lo0bits>
 800d6c6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d6ca:	b1e8      	cbz	r0, 800d708 <__d2b+0x80>
 800d6cc:	f1c0 0320 	rsb	r3, r0, #32
 800d6d0:	fa02 f303 	lsl.w	r3, r2, r3
 800d6d4:	430b      	orrs	r3, r1
 800d6d6:	40c2      	lsrs	r2, r0
 800d6d8:	6163      	str	r3, [r4, #20]
 800d6da:	9201      	str	r2, [sp, #4]
 800d6dc:	9b01      	ldr	r3, [sp, #4]
 800d6de:	61a3      	str	r3, [r4, #24]
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	bf14      	ite	ne
 800d6e4:	2202      	movne	r2, #2
 800d6e6:	2201      	moveq	r2, #1
 800d6e8:	6122      	str	r2, [r4, #16]
 800d6ea:	b1bd      	cbz	r5, 800d71c <__d2b+0x94>
 800d6ec:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d6f0:	4405      	add	r5, r0
 800d6f2:	603d      	str	r5, [r7, #0]
 800d6f4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d6f8:	6030      	str	r0, [r6, #0]
 800d6fa:	4620      	mov	r0, r4
 800d6fc:	b003      	add	sp, #12
 800d6fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d702:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d706:	e7d6      	b.n	800d6b6 <__d2b+0x2e>
 800d708:	6161      	str	r1, [r4, #20]
 800d70a:	e7e7      	b.n	800d6dc <__d2b+0x54>
 800d70c:	a801      	add	r0, sp, #4
 800d70e:	f7ff fd61 	bl	800d1d4 <__lo0bits>
 800d712:	9b01      	ldr	r3, [sp, #4]
 800d714:	6163      	str	r3, [r4, #20]
 800d716:	3020      	adds	r0, #32
 800d718:	2201      	movs	r2, #1
 800d71a:	e7e5      	b.n	800d6e8 <__d2b+0x60>
 800d71c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d720:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d724:	6038      	str	r0, [r7, #0]
 800d726:	6918      	ldr	r0, [r3, #16]
 800d728:	f7ff fd34 	bl	800d194 <__hi0bits>
 800d72c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d730:	e7e2      	b.n	800d6f8 <__d2b+0x70>
 800d732:	bf00      	nop
 800d734:	080218ae 	.word	0x080218ae
 800d738:	080218bf 	.word	0x080218bf

0800d73c <__ssputs_r>:
 800d73c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d740:	688e      	ldr	r6, [r1, #8]
 800d742:	461f      	mov	r7, r3
 800d744:	42be      	cmp	r6, r7
 800d746:	680b      	ldr	r3, [r1, #0]
 800d748:	4682      	mov	sl, r0
 800d74a:	460c      	mov	r4, r1
 800d74c:	4690      	mov	r8, r2
 800d74e:	d82c      	bhi.n	800d7aa <__ssputs_r+0x6e>
 800d750:	898a      	ldrh	r2, [r1, #12]
 800d752:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d756:	d026      	beq.n	800d7a6 <__ssputs_r+0x6a>
 800d758:	6965      	ldr	r5, [r4, #20]
 800d75a:	6909      	ldr	r1, [r1, #16]
 800d75c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d760:	eba3 0901 	sub.w	r9, r3, r1
 800d764:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d768:	1c7b      	adds	r3, r7, #1
 800d76a:	444b      	add	r3, r9
 800d76c:	106d      	asrs	r5, r5, #1
 800d76e:	429d      	cmp	r5, r3
 800d770:	bf38      	it	cc
 800d772:	461d      	movcc	r5, r3
 800d774:	0553      	lsls	r3, r2, #21
 800d776:	d527      	bpl.n	800d7c8 <__ssputs_r+0x8c>
 800d778:	4629      	mov	r1, r5
 800d77a:	f7fd fd13 	bl	800b1a4 <_malloc_r>
 800d77e:	4606      	mov	r6, r0
 800d780:	b360      	cbz	r0, 800d7dc <__ssputs_r+0xa0>
 800d782:	6921      	ldr	r1, [r4, #16]
 800d784:	464a      	mov	r2, r9
 800d786:	f7fe fd69 	bl	800c25c <memcpy>
 800d78a:	89a3      	ldrh	r3, [r4, #12]
 800d78c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d790:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d794:	81a3      	strh	r3, [r4, #12]
 800d796:	6126      	str	r6, [r4, #16]
 800d798:	6165      	str	r5, [r4, #20]
 800d79a:	444e      	add	r6, r9
 800d79c:	eba5 0509 	sub.w	r5, r5, r9
 800d7a0:	6026      	str	r6, [r4, #0]
 800d7a2:	60a5      	str	r5, [r4, #8]
 800d7a4:	463e      	mov	r6, r7
 800d7a6:	42be      	cmp	r6, r7
 800d7a8:	d900      	bls.n	800d7ac <__ssputs_r+0x70>
 800d7aa:	463e      	mov	r6, r7
 800d7ac:	6820      	ldr	r0, [r4, #0]
 800d7ae:	4632      	mov	r2, r6
 800d7b0:	4641      	mov	r1, r8
 800d7b2:	f000 fbb5 	bl	800df20 <memmove>
 800d7b6:	68a3      	ldr	r3, [r4, #8]
 800d7b8:	1b9b      	subs	r3, r3, r6
 800d7ba:	60a3      	str	r3, [r4, #8]
 800d7bc:	6823      	ldr	r3, [r4, #0]
 800d7be:	4433      	add	r3, r6
 800d7c0:	6023      	str	r3, [r4, #0]
 800d7c2:	2000      	movs	r0, #0
 800d7c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d7c8:	462a      	mov	r2, r5
 800d7ca:	f000 fc14 	bl	800dff6 <_realloc_r>
 800d7ce:	4606      	mov	r6, r0
 800d7d0:	2800      	cmp	r0, #0
 800d7d2:	d1e0      	bne.n	800d796 <__ssputs_r+0x5a>
 800d7d4:	6921      	ldr	r1, [r4, #16]
 800d7d6:	4650      	mov	r0, sl
 800d7d8:	f7ff fbe8 	bl	800cfac <_free_r>
 800d7dc:	230c      	movs	r3, #12
 800d7de:	f8ca 3000 	str.w	r3, [sl]
 800d7e2:	89a3      	ldrh	r3, [r4, #12]
 800d7e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d7e8:	81a3      	strh	r3, [r4, #12]
 800d7ea:	f04f 30ff 	mov.w	r0, #4294967295
 800d7ee:	e7e9      	b.n	800d7c4 <__ssputs_r+0x88>

0800d7f0 <_svfiprintf_r>:
 800d7f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7f4:	4698      	mov	r8, r3
 800d7f6:	898b      	ldrh	r3, [r1, #12]
 800d7f8:	061b      	lsls	r3, r3, #24
 800d7fa:	b09d      	sub	sp, #116	; 0x74
 800d7fc:	4607      	mov	r7, r0
 800d7fe:	460d      	mov	r5, r1
 800d800:	4614      	mov	r4, r2
 800d802:	d50e      	bpl.n	800d822 <_svfiprintf_r+0x32>
 800d804:	690b      	ldr	r3, [r1, #16]
 800d806:	b963      	cbnz	r3, 800d822 <_svfiprintf_r+0x32>
 800d808:	2140      	movs	r1, #64	; 0x40
 800d80a:	f7fd fccb 	bl	800b1a4 <_malloc_r>
 800d80e:	6028      	str	r0, [r5, #0]
 800d810:	6128      	str	r0, [r5, #16]
 800d812:	b920      	cbnz	r0, 800d81e <_svfiprintf_r+0x2e>
 800d814:	230c      	movs	r3, #12
 800d816:	603b      	str	r3, [r7, #0]
 800d818:	f04f 30ff 	mov.w	r0, #4294967295
 800d81c:	e0d0      	b.n	800d9c0 <_svfiprintf_r+0x1d0>
 800d81e:	2340      	movs	r3, #64	; 0x40
 800d820:	616b      	str	r3, [r5, #20]
 800d822:	2300      	movs	r3, #0
 800d824:	9309      	str	r3, [sp, #36]	; 0x24
 800d826:	2320      	movs	r3, #32
 800d828:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d82c:	f8cd 800c 	str.w	r8, [sp, #12]
 800d830:	2330      	movs	r3, #48	; 0x30
 800d832:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800d9d8 <_svfiprintf_r+0x1e8>
 800d836:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d83a:	f04f 0901 	mov.w	r9, #1
 800d83e:	4623      	mov	r3, r4
 800d840:	469a      	mov	sl, r3
 800d842:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d846:	b10a      	cbz	r2, 800d84c <_svfiprintf_r+0x5c>
 800d848:	2a25      	cmp	r2, #37	; 0x25
 800d84a:	d1f9      	bne.n	800d840 <_svfiprintf_r+0x50>
 800d84c:	ebba 0b04 	subs.w	fp, sl, r4
 800d850:	d00b      	beq.n	800d86a <_svfiprintf_r+0x7a>
 800d852:	465b      	mov	r3, fp
 800d854:	4622      	mov	r2, r4
 800d856:	4629      	mov	r1, r5
 800d858:	4638      	mov	r0, r7
 800d85a:	f7ff ff6f 	bl	800d73c <__ssputs_r>
 800d85e:	3001      	adds	r0, #1
 800d860:	f000 80a9 	beq.w	800d9b6 <_svfiprintf_r+0x1c6>
 800d864:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d866:	445a      	add	r2, fp
 800d868:	9209      	str	r2, [sp, #36]	; 0x24
 800d86a:	f89a 3000 	ldrb.w	r3, [sl]
 800d86e:	2b00      	cmp	r3, #0
 800d870:	f000 80a1 	beq.w	800d9b6 <_svfiprintf_r+0x1c6>
 800d874:	2300      	movs	r3, #0
 800d876:	f04f 32ff 	mov.w	r2, #4294967295
 800d87a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d87e:	f10a 0a01 	add.w	sl, sl, #1
 800d882:	9304      	str	r3, [sp, #16]
 800d884:	9307      	str	r3, [sp, #28]
 800d886:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d88a:	931a      	str	r3, [sp, #104]	; 0x68
 800d88c:	4654      	mov	r4, sl
 800d88e:	2205      	movs	r2, #5
 800d890:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d894:	4850      	ldr	r0, [pc, #320]	; (800d9d8 <_svfiprintf_r+0x1e8>)
 800d896:	f7f2 fcb3 	bl	8000200 <memchr>
 800d89a:	9a04      	ldr	r2, [sp, #16]
 800d89c:	b9d8      	cbnz	r0, 800d8d6 <_svfiprintf_r+0xe6>
 800d89e:	06d0      	lsls	r0, r2, #27
 800d8a0:	bf44      	itt	mi
 800d8a2:	2320      	movmi	r3, #32
 800d8a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d8a8:	0711      	lsls	r1, r2, #28
 800d8aa:	bf44      	itt	mi
 800d8ac:	232b      	movmi	r3, #43	; 0x2b
 800d8ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d8b2:	f89a 3000 	ldrb.w	r3, [sl]
 800d8b6:	2b2a      	cmp	r3, #42	; 0x2a
 800d8b8:	d015      	beq.n	800d8e6 <_svfiprintf_r+0xf6>
 800d8ba:	9a07      	ldr	r2, [sp, #28]
 800d8bc:	4654      	mov	r4, sl
 800d8be:	2000      	movs	r0, #0
 800d8c0:	f04f 0c0a 	mov.w	ip, #10
 800d8c4:	4621      	mov	r1, r4
 800d8c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d8ca:	3b30      	subs	r3, #48	; 0x30
 800d8cc:	2b09      	cmp	r3, #9
 800d8ce:	d94d      	bls.n	800d96c <_svfiprintf_r+0x17c>
 800d8d0:	b1b0      	cbz	r0, 800d900 <_svfiprintf_r+0x110>
 800d8d2:	9207      	str	r2, [sp, #28]
 800d8d4:	e014      	b.n	800d900 <_svfiprintf_r+0x110>
 800d8d6:	eba0 0308 	sub.w	r3, r0, r8
 800d8da:	fa09 f303 	lsl.w	r3, r9, r3
 800d8de:	4313      	orrs	r3, r2
 800d8e0:	9304      	str	r3, [sp, #16]
 800d8e2:	46a2      	mov	sl, r4
 800d8e4:	e7d2      	b.n	800d88c <_svfiprintf_r+0x9c>
 800d8e6:	9b03      	ldr	r3, [sp, #12]
 800d8e8:	1d19      	adds	r1, r3, #4
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	9103      	str	r1, [sp, #12]
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	bfbb      	ittet	lt
 800d8f2:	425b      	neglt	r3, r3
 800d8f4:	f042 0202 	orrlt.w	r2, r2, #2
 800d8f8:	9307      	strge	r3, [sp, #28]
 800d8fa:	9307      	strlt	r3, [sp, #28]
 800d8fc:	bfb8      	it	lt
 800d8fe:	9204      	strlt	r2, [sp, #16]
 800d900:	7823      	ldrb	r3, [r4, #0]
 800d902:	2b2e      	cmp	r3, #46	; 0x2e
 800d904:	d10c      	bne.n	800d920 <_svfiprintf_r+0x130>
 800d906:	7863      	ldrb	r3, [r4, #1]
 800d908:	2b2a      	cmp	r3, #42	; 0x2a
 800d90a:	d134      	bne.n	800d976 <_svfiprintf_r+0x186>
 800d90c:	9b03      	ldr	r3, [sp, #12]
 800d90e:	1d1a      	adds	r2, r3, #4
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	9203      	str	r2, [sp, #12]
 800d914:	2b00      	cmp	r3, #0
 800d916:	bfb8      	it	lt
 800d918:	f04f 33ff 	movlt.w	r3, #4294967295
 800d91c:	3402      	adds	r4, #2
 800d91e:	9305      	str	r3, [sp, #20]
 800d920:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800d9e8 <_svfiprintf_r+0x1f8>
 800d924:	7821      	ldrb	r1, [r4, #0]
 800d926:	2203      	movs	r2, #3
 800d928:	4650      	mov	r0, sl
 800d92a:	f7f2 fc69 	bl	8000200 <memchr>
 800d92e:	b138      	cbz	r0, 800d940 <_svfiprintf_r+0x150>
 800d930:	9b04      	ldr	r3, [sp, #16]
 800d932:	eba0 000a 	sub.w	r0, r0, sl
 800d936:	2240      	movs	r2, #64	; 0x40
 800d938:	4082      	lsls	r2, r0
 800d93a:	4313      	orrs	r3, r2
 800d93c:	3401      	adds	r4, #1
 800d93e:	9304      	str	r3, [sp, #16]
 800d940:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d944:	4825      	ldr	r0, [pc, #148]	; (800d9dc <_svfiprintf_r+0x1ec>)
 800d946:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d94a:	2206      	movs	r2, #6
 800d94c:	f7f2 fc58 	bl	8000200 <memchr>
 800d950:	2800      	cmp	r0, #0
 800d952:	d038      	beq.n	800d9c6 <_svfiprintf_r+0x1d6>
 800d954:	4b22      	ldr	r3, [pc, #136]	; (800d9e0 <_svfiprintf_r+0x1f0>)
 800d956:	bb1b      	cbnz	r3, 800d9a0 <_svfiprintf_r+0x1b0>
 800d958:	9b03      	ldr	r3, [sp, #12]
 800d95a:	3307      	adds	r3, #7
 800d95c:	f023 0307 	bic.w	r3, r3, #7
 800d960:	3308      	adds	r3, #8
 800d962:	9303      	str	r3, [sp, #12]
 800d964:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d966:	4433      	add	r3, r6
 800d968:	9309      	str	r3, [sp, #36]	; 0x24
 800d96a:	e768      	b.n	800d83e <_svfiprintf_r+0x4e>
 800d96c:	fb0c 3202 	mla	r2, ip, r2, r3
 800d970:	460c      	mov	r4, r1
 800d972:	2001      	movs	r0, #1
 800d974:	e7a6      	b.n	800d8c4 <_svfiprintf_r+0xd4>
 800d976:	2300      	movs	r3, #0
 800d978:	3401      	adds	r4, #1
 800d97a:	9305      	str	r3, [sp, #20]
 800d97c:	4619      	mov	r1, r3
 800d97e:	f04f 0c0a 	mov.w	ip, #10
 800d982:	4620      	mov	r0, r4
 800d984:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d988:	3a30      	subs	r2, #48	; 0x30
 800d98a:	2a09      	cmp	r2, #9
 800d98c:	d903      	bls.n	800d996 <_svfiprintf_r+0x1a6>
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d0c6      	beq.n	800d920 <_svfiprintf_r+0x130>
 800d992:	9105      	str	r1, [sp, #20]
 800d994:	e7c4      	b.n	800d920 <_svfiprintf_r+0x130>
 800d996:	fb0c 2101 	mla	r1, ip, r1, r2
 800d99a:	4604      	mov	r4, r0
 800d99c:	2301      	movs	r3, #1
 800d99e:	e7f0      	b.n	800d982 <_svfiprintf_r+0x192>
 800d9a0:	ab03      	add	r3, sp, #12
 800d9a2:	9300      	str	r3, [sp, #0]
 800d9a4:	462a      	mov	r2, r5
 800d9a6:	4b0f      	ldr	r3, [pc, #60]	; (800d9e4 <_svfiprintf_r+0x1f4>)
 800d9a8:	a904      	add	r1, sp, #16
 800d9aa:	4638      	mov	r0, r7
 800d9ac:	f7fd fd26 	bl	800b3fc <_printf_float>
 800d9b0:	1c42      	adds	r2, r0, #1
 800d9b2:	4606      	mov	r6, r0
 800d9b4:	d1d6      	bne.n	800d964 <_svfiprintf_r+0x174>
 800d9b6:	89ab      	ldrh	r3, [r5, #12]
 800d9b8:	065b      	lsls	r3, r3, #25
 800d9ba:	f53f af2d 	bmi.w	800d818 <_svfiprintf_r+0x28>
 800d9be:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d9c0:	b01d      	add	sp, #116	; 0x74
 800d9c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9c6:	ab03      	add	r3, sp, #12
 800d9c8:	9300      	str	r3, [sp, #0]
 800d9ca:	462a      	mov	r2, r5
 800d9cc:	4b05      	ldr	r3, [pc, #20]	; (800d9e4 <_svfiprintf_r+0x1f4>)
 800d9ce:	a904      	add	r1, sp, #16
 800d9d0:	4638      	mov	r0, r7
 800d9d2:	f7fd ffb7 	bl	800b944 <_printf_i>
 800d9d6:	e7eb      	b.n	800d9b0 <_svfiprintf_r+0x1c0>
 800d9d8:	08021a14 	.word	0x08021a14
 800d9dc:	08021a1e 	.word	0x08021a1e
 800d9e0:	0800b3fd 	.word	0x0800b3fd
 800d9e4:	0800d73d 	.word	0x0800d73d
 800d9e8:	08021a1a 	.word	0x08021a1a

0800d9ec <__sfputc_r>:
 800d9ec:	6893      	ldr	r3, [r2, #8]
 800d9ee:	3b01      	subs	r3, #1
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	b410      	push	{r4}
 800d9f4:	6093      	str	r3, [r2, #8]
 800d9f6:	da08      	bge.n	800da0a <__sfputc_r+0x1e>
 800d9f8:	6994      	ldr	r4, [r2, #24]
 800d9fa:	42a3      	cmp	r3, r4
 800d9fc:	db01      	blt.n	800da02 <__sfputc_r+0x16>
 800d9fe:	290a      	cmp	r1, #10
 800da00:	d103      	bne.n	800da0a <__sfputc_r+0x1e>
 800da02:	f85d 4b04 	ldr.w	r4, [sp], #4
 800da06:	f7fe ba48 	b.w	800be9a <__swbuf_r>
 800da0a:	6813      	ldr	r3, [r2, #0]
 800da0c:	1c58      	adds	r0, r3, #1
 800da0e:	6010      	str	r0, [r2, #0]
 800da10:	7019      	strb	r1, [r3, #0]
 800da12:	4608      	mov	r0, r1
 800da14:	f85d 4b04 	ldr.w	r4, [sp], #4
 800da18:	4770      	bx	lr

0800da1a <__sfputs_r>:
 800da1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da1c:	4606      	mov	r6, r0
 800da1e:	460f      	mov	r7, r1
 800da20:	4614      	mov	r4, r2
 800da22:	18d5      	adds	r5, r2, r3
 800da24:	42ac      	cmp	r4, r5
 800da26:	d101      	bne.n	800da2c <__sfputs_r+0x12>
 800da28:	2000      	movs	r0, #0
 800da2a:	e007      	b.n	800da3c <__sfputs_r+0x22>
 800da2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800da30:	463a      	mov	r2, r7
 800da32:	4630      	mov	r0, r6
 800da34:	f7ff ffda 	bl	800d9ec <__sfputc_r>
 800da38:	1c43      	adds	r3, r0, #1
 800da3a:	d1f3      	bne.n	800da24 <__sfputs_r+0xa>
 800da3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800da40 <_vfiprintf_r>:
 800da40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da44:	460d      	mov	r5, r1
 800da46:	b09d      	sub	sp, #116	; 0x74
 800da48:	4614      	mov	r4, r2
 800da4a:	4698      	mov	r8, r3
 800da4c:	4606      	mov	r6, r0
 800da4e:	b118      	cbz	r0, 800da58 <_vfiprintf_r+0x18>
 800da50:	6a03      	ldr	r3, [r0, #32]
 800da52:	b90b      	cbnz	r3, 800da58 <_vfiprintf_r+0x18>
 800da54:	f7fe f912 	bl	800bc7c <__sinit>
 800da58:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800da5a:	07d9      	lsls	r1, r3, #31
 800da5c:	d405      	bmi.n	800da6a <_vfiprintf_r+0x2a>
 800da5e:	89ab      	ldrh	r3, [r5, #12]
 800da60:	059a      	lsls	r2, r3, #22
 800da62:	d402      	bmi.n	800da6a <_vfiprintf_r+0x2a>
 800da64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800da66:	f7fe fbef 	bl	800c248 <__retarget_lock_acquire_recursive>
 800da6a:	89ab      	ldrh	r3, [r5, #12]
 800da6c:	071b      	lsls	r3, r3, #28
 800da6e:	d501      	bpl.n	800da74 <_vfiprintf_r+0x34>
 800da70:	692b      	ldr	r3, [r5, #16]
 800da72:	b99b      	cbnz	r3, 800da9c <_vfiprintf_r+0x5c>
 800da74:	4629      	mov	r1, r5
 800da76:	4630      	mov	r0, r6
 800da78:	f7fe fa4c 	bl	800bf14 <__swsetup_r>
 800da7c:	b170      	cbz	r0, 800da9c <_vfiprintf_r+0x5c>
 800da7e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800da80:	07dc      	lsls	r4, r3, #31
 800da82:	d504      	bpl.n	800da8e <_vfiprintf_r+0x4e>
 800da84:	f04f 30ff 	mov.w	r0, #4294967295
 800da88:	b01d      	add	sp, #116	; 0x74
 800da8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da8e:	89ab      	ldrh	r3, [r5, #12]
 800da90:	0598      	lsls	r0, r3, #22
 800da92:	d4f7      	bmi.n	800da84 <_vfiprintf_r+0x44>
 800da94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800da96:	f7fe fbd8 	bl	800c24a <__retarget_lock_release_recursive>
 800da9a:	e7f3      	b.n	800da84 <_vfiprintf_r+0x44>
 800da9c:	2300      	movs	r3, #0
 800da9e:	9309      	str	r3, [sp, #36]	; 0x24
 800daa0:	2320      	movs	r3, #32
 800daa2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800daa6:	f8cd 800c 	str.w	r8, [sp, #12]
 800daaa:	2330      	movs	r3, #48	; 0x30
 800daac:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800dc60 <_vfiprintf_r+0x220>
 800dab0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dab4:	f04f 0901 	mov.w	r9, #1
 800dab8:	4623      	mov	r3, r4
 800daba:	469a      	mov	sl, r3
 800dabc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dac0:	b10a      	cbz	r2, 800dac6 <_vfiprintf_r+0x86>
 800dac2:	2a25      	cmp	r2, #37	; 0x25
 800dac4:	d1f9      	bne.n	800daba <_vfiprintf_r+0x7a>
 800dac6:	ebba 0b04 	subs.w	fp, sl, r4
 800daca:	d00b      	beq.n	800dae4 <_vfiprintf_r+0xa4>
 800dacc:	465b      	mov	r3, fp
 800dace:	4622      	mov	r2, r4
 800dad0:	4629      	mov	r1, r5
 800dad2:	4630      	mov	r0, r6
 800dad4:	f7ff ffa1 	bl	800da1a <__sfputs_r>
 800dad8:	3001      	adds	r0, #1
 800dada:	f000 80a9 	beq.w	800dc30 <_vfiprintf_r+0x1f0>
 800dade:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dae0:	445a      	add	r2, fp
 800dae2:	9209      	str	r2, [sp, #36]	; 0x24
 800dae4:	f89a 3000 	ldrb.w	r3, [sl]
 800dae8:	2b00      	cmp	r3, #0
 800daea:	f000 80a1 	beq.w	800dc30 <_vfiprintf_r+0x1f0>
 800daee:	2300      	movs	r3, #0
 800daf0:	f04f 32ff 	mov.w	r2, #4294967295
 800daf4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800daf8:	f10a 0a01 	add.w	sl, sl, #1
 800dafc:	9304      	str	r3, [sp, #16]
 800dafe:	9307      	str	r3, [sp, #28]
 800db00:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800db04:	931a      	str	r3, [sp, #104]	; 0x68
 800db06:	4654      	mov	r4, sl
 800db08:	2205      	movs	r2, #5
 800db0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db0e:	4854      	ldr	r0, [pc, #336]	; (800dc60 <_vfiprintf_r+0x220>)
 800db10:	f7f2 fb76 	bl	8000200 <memchr>
 800db14:	9a04      	ldr	r2, [sp, #16]
 800db16:	b9d8      	cbnz	r0, 800db50 <_vfiprintf_r+0x110>
 800db18:	06d1      	lsls	r1, r2, #27
 800db1a:	bf44      	itt	mi
 800db1c:	2320      	movmi	r3, #32
 800db1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800db22:	0713      	lsls	r3, r2, #28
 800db24:	bf44      	itt	mi
 800db26:	232b      	movmi	r3, #43	; 0x2b
 800db28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800db2c:	f89a 3000 	ldrb.w	r3, [sl]
 800db30:	2b2a      	cmp	r3, #42	; 0x2a
 800db32:	d015      	beq.n	800db60 <_vfiprintf_r+0x120>
 800db34:	9a07      	ldr	r2, [sp, #28]
 800db36:	4654      	mov	r4, sl
 800db38:	2000      	movs	r0, #0
 800db3a:	f04f 0c0a 	mov.w	ip, #10
 800db3e:	4621      	mov	r1, r4
 800db40:	f811 3b01 	ldrb.w	r3, [r1], #1
 800db44:	3b30      	subs	r3, #48	; 0x30
 800db46:	2b09      	cmp	r3, #9
 800db48:	d94d      	bls.n	800dbe6 <_vfiprintf_r+0x1a6>
 800db4a:	b1b0      	cbz	r0, 800db7a <_vfiprintf_r+0x13a>
 800db4c:	9207      	str	r2, [sp, #28]
 800db4e:	e014      	b.n	800db7a <_vfiprintf_r+0x13a>
 800db50:	eba0 0308 	sub.w	r3, r0, r8
 800db54:	fa09 f303 	lsl.w	r3, r9, r3
 800db58:	4313      	orrs	r3, r2
 800db5a:	9304      	str	r3, [sp, #16]
 800db5c:	46a2      	mov	sl, r4
 800db5e:	e7d2      	b.n	800db06 <_vfiprintf_r+0xc6>
 800db60:	9b03      	ldr	r3, [sp, #12]
 800db62:	1d19      	adds	r1, r3, #4
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	9103      	str	r1, [sp, #12]
 800db68:	2b00      	cmp	r3, #0
 800db6a:	bfbb      	ittet	lt
 800db6c:	425b      	neglt	r3, r3
 800db6e:	f042 0202 	orrlt.w	r2, r2, #2
 800db72:	9307      	strge	r3, [sp, #28]
 800db74:	9307      	strlt	r3, [sp, #28]
 800db76:	bfb8      	it	lt
 800db78:	9204      	strlt	r2, [sp, #16]
 800db7a:	7823      	ldrb	r3, [r4, #0]
 800db7c:	2b2e      	cmp	r3, #46	; 0x2e
 800db7e:	d10c      	bne.n	800db9a <_vfiprintf_r+0x15a>
 800db80:	7863      	ldrb	r3, [r4, #1]
 800db82:	2b2a      	cmp	r3, #42	; 0x2a
 800db84:	d134      	bne.n	800dbf0 <_vfiprintf_r+0x1b0>
 800db86:	9b03      	ldr	r3, [sp, #12]
 800db88:	1d1a      	adds	r2, r3, #4
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	9203      	str	r2, [sp, #12]
 800db8e:	2b00      	cmp	r3, #0
 800db90:	bfb8      	it	lt
 800db92:	f04f 33ff 	movlt.w	r3, #4294967295
 800db96:	3402      	adds	r4, #2
 800db98:	9305      	str	r3, [sp, #20]
 800db9a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800dc70 <_vfiprintf_r+0x230>
 800db9e:	7821      	ldrb	r1, [r4, #0]
 800dba0:	2203      	movs	r2, #3
 800dba2:	4650      	mov	r0, sl
 800dba4:	f7f2 fb2c 	bl	8000200 <memchr>
 800dba8:	b138      	cbz	r0, 800dbba <_vfiprintf_r+0x17a>
 800dbaa:	9b04      	ldr	r3, [sp, #16]
 800dbac:	eba0 000a 	sub.w	r0, r0, sl
 800dbb0:	2240      	movs	r2, #64	; 0x40
 800dbb2:	4082      	lsls	r2, r0
 800dbb4:	4313      	orrs	r3, r2
 800dbb6:	3401      	adds	r4, #1
 800dbb8:	9304      	str	r3, [sp, #16]
 800dbba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dbbe:	4829      	ldr	r0, [pc, #164]	; (800dc64 <_vfiprintf_r+0x224>)
 800dbc0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dbc4:	2206      	movs	r2, #6
 800dbc6:	f7f2 fb1b 	bl	8000200 <memchr>
 800dbca:	2800      	cmp	r0, #0
 800dbcc:	d03f      	beq.n	800dc4e <_vfiprintf_r+0x20e>
 800dbce:	4b26      	ldr	r3, [pc, #152]	; (800dc68 <_vfiprintf_r+0x228>)
 800dbd0:	bb1b      	cbnz	r3, 800dc1a <_vfiprintf_r+0x1da>
 800dbd2:	9b03      	ldr	r3, [sp, #12]
 800dbd4:	3307      	adds	r3, #7
 800dbd6:	f023 0307 	bic.w	r3, r3, #7
 800dbda:	3308      	adds	r3, #8
 800dbdc:	9303      	str	r3, [sp, #12]
 800dbde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dbe0:	443b      	add	r3, r7
 800dbe2:	9309      	str	r3, [sp, #36]	; 0x24
 800dbe4:	e768      	b.n	800dab8 <_vfiprintf_r+0x78>
 800dbe6:	fb0c 3202 	mla	r2, ip, r2, r3
 800dbea:	460c      	mov	r4, r1
 800dbec:	2001      	movs	r0, #1
 800dbee:	e7a6      	b.n	800db3e <_vfiprintf_r+0xfe>
 800dbf0:	2300      	movs	r3, #0
 800dbf2:	3401      	adds	r4, #1
 800dbf4:	9305      	str	r3, [sp, #20]
 800dbf6:	4619      	mov	r1, r3
 800dbf8:	f04f 0c0a 	mov.w	ip, #10
 800dbfc:	4620      	mov	r0, r4
 800dbfe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dc02:	3a30      	subs	r2, #48	; 0x30
 800dc04:	2a09      	cmp	r2, #9
 800dc06:	d903      	bls.n	800dc10 <_vfiprintf_r+0x1d0>
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d0c6      	beq.n	800db9a <_vfiprintf_r+0x15a>
 800dc0c:	9105      	str	r1, [sp, #20]
 800dc0e:	e7c4      	b.n	800db9a <_vfiprintf_r+0x15a>
 800dc10:	fb0c 2101 	mla	r1, ip, r1, r2
 800dc14:	4604      	mov	r4, r0
 800dc16:	2301      	movs	r3, #1
 800dc18:	e7f0      	b.n	800dbfc <_vfiprintf_r+0x1bc>
 800dc1a:	ab03      	add	r3, sp, #12
 800dc1c:	9300      	str	r3, [sp, #0]
 800dc1e:	462a      	mov	r2, r5
 800dc20:	4b12      	ldr	r3, [pc, #72]	; (800dc6c <_vfiprintf_r+0x22c>)
 800dc22:	a904      	add	r1, sp, #16
 800dc24:	4630      	mov	r0, r6
 800dc26:	f7fd fbe9 	bl	800b3fc <_printf_float>
 800dc2a:	4607      	mov	r7, r0
 800dc2c:	1c78      	adds	r0, r7, #1
 800dc2e:	d1d6      	bne.n	800dbde <_vfiprintf_r+0x19e>
 800dc30:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dc32:	07d9      	lsls	r1, r3, #31
 800dc34:	d405      	bmi.n	800dc42 <_vfiprintf_r+0x202>
 800dc36:	89ab      	ldrh	r3, [r5, #12]
 800dc38:	059a      	lsls	r2, r3, #22
 800dc3a:	d402      	bmi.n	800dc42 <_vfiprintf_r+0x202>
 800dc3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dc3e:	f7fe fb04 	bl	800c24a <__retarget_lock_release_recursive>
 800dc42:	89ab      	ldrh	r3, [r5, #12]
 800dc44:	065b      	lsls	r3, r3, #25
 800dc46:	f53f af1d 	bmi.w	800da84 <_vfiprintf_r+0x44>
 800dc4a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dc4c:	e71c      	b.n	800da88 <_vfiprintf_r+0x48>
 800dc4e:	ab03      	add	r3, sp, #12
 800dc50:	9300      	str	r3, [sp, #0]
 800dc52:	462a      	mov	r2, r5
 800dc54:	4b05      	ldr	r3, [pc, #20]	; (800dc6c <_vfiprintf_r+0x22c>)
 800dc56:	a904      	add	r1, sp, #16
 800dc58:	4630      	mov	r0, r6
 800dc5a:	f7fd fe73 	bl	800b944 <_printf_i>
 800dc5e:	e7e4      	b.n	800dc2a <_vfiprintf_r+0x1ea>
 800dc60:	08021a14 	.word	0x08021a14
 800dc64:	08021a1e 	.word	0x08021a1e
 800dc68:	0800b3fd 	.word	0x0800b3fd
 800dc6c:	0800da1b 	.word	0x0800da1b
 800dc70:	08021a1a 	.word	0x08021a1a

0800dc74 <__sflush_r>:
 800dc74:	898a      	ldrh	r2, [r1, #12]
 800dc76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc7a:	4605      	mov	r5, r0
 800dc7c:	0710      	lsls	r0, r2, #28
 800dc7e:	460c      	mov	r4, r1
 800dc80:	d458      	bmi.n	800dd34 <__sflush_r+0xc0>
 800dc82:	684b      	ldr	r3, [r1, #4]
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	dc05      	bgt.n	800dc94 <__sflush_r+0x20>
 800dc88:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	dc02      	bgt.n	800dc94 <__sflush_r+0x20>
 800dc8e:	2000      	movs	r0, #0
 800dc90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc94:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dc96:	2e00      	cmp	r6, #0
 800dc98:	d0f9      	beq.n	800dc8e <__sflush_r+0x1a>
 800dc9a:	2300      	movs	r3, #0
 800dc9c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800dca0:	682f      	ldr	r7, [r5, #0]
 800dca2:	6a21      	ldr	r1, [r4, #32]
 800dca4:	602b      	str	r3, [r5, #0]
 800dca6:	d032      	beq.n	800dd0e <__sflush_r+0x9a>
 800dca8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800dcaa:	89a3      	ldrh	r3, [r4, #12]
 800dcac:	075a      	lsls	r2, r3, #29
 800dcae:	d505      	bpl.n	800dcbc <__sflush_r+0x48>
 800dcb0:	6863      	ldr	r3, [r4, #4]
 800dcb2:	1ac0      	subs	r0, r0, r3
 800dcb4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800dcb6:	b10b      	cbz	r3, 800dcbc <__sflush_r+0x48>
 800dcb8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800dcba:	1ac0      	subs	r0, r0, r3
 800dcbc:	2300      	movs	r3, #0
 800dcbe:	4602      	mov	r2, r0
 800dcc0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dcc2:	6a21      	ldr	r1, [r4, #32]
 800dcc4:	4628      	mov	r0, r5
 800dcc6:	47b0      	blx	r6
 800dcc8:	1c43      	adds	r3, r0, #1
 800dcca:	89a3      	ldrh	r3, [r4, #12]
 800dccc:	d106      	bne.n	800dcdc <__sflush_r+0x68>
 800dcce:	6829      	ldr	r1, [r5, #0]
 800dcd0:	291d      	cmp	r1, #29
 800dcd2:	d82b      	bhi.n	800dd2c <__sflush_r+0xb8>
 800dcd4:	4a29      	ldr	r2, [pc, #164]	; (800dd7c <__sflush_r+0x108>)
 800dcd6:	410a      	asrs	r2, r1
 800dcd8:	07d6      	lsls	r6, r2, #31
 800dcda:	d427      	bmi.n	800dd2c <__sflush_r+0xb8>
 800dcdc:	2200      	movs	r2, #0
 800dcde:	6062      	str	r2, [r4, #4]
 800dce0:	04d9      	lsls	r1, r3, #19
 800dce2:	6922      	ldr	r2, [r4, #16]
 800dce4:	6022      	str	r2, [r4, #0]
 800dce6:	d504      	bpl.n	800dcf2 <__sflush_r+0x7e>
 800dce8:	1c42      	adds	r2, r0, #1
 800dcea:	d101      	bne.n	800dcf0 <__sflush_r+0x7c>
 800dcec:	682b      	ldr	r3, [r5, #0]
 800dcee:	b903      	cbnz	r3, 800dcf2 <__sflush_r+0x7e>
 800dcf0:	6560      	str	r0, [r4, #84]	; 0x54
 800dcf2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dcf4:	602f      	str	r7, [r5, #0]
 800dcf6:	2900      	cmp	r1, #0
 800dcf8:	d0c9      	beq.n	800dc8e <__sflush_r+0x1a>
 800dcfa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dcfe:	4299      	cmp	r1, r3
 800dd00:	d002      	beq.n	800dd08 <__sflush_r+0x94>
 800dd02:	4628      	mov	r0, r5
 800dd04:	f7ff f952 	bl	800cfac <_free_r>
 800dd08:	2000      	movs	r0, #0
 800dd0a:	6360      	str	r0, [r4, #52]	; 0x34
 800dd0c:	e7c0      	b.n	800dc90 <__sflush_r+0x1c>
 800dd0e:	2301      	movs	r3, #1
 800dd10:	4628      	mov	r0, r5
 800dd12:	47b0      	blx	r6
 800dd14:	1c41      	adds	r1, r0, #1
 800dd16:	d1c8      	bne.n	800dcaa <__sflush_r+0x36>
 800dd18:	682b      	ldr	r3, [r5, #0]
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d0c5      	beq.n	800dcaa <__sflush_r+0x36>
 800dd1e:	2b1d      	cmp	r3, #29
 800dd20:	d001      	beq.n	800dd26 <__sflush_r+0xb2>
 800dd22:	2b16      	cmp	r3, #22
 800dd24:	d101      	bne.n	800dd2a <__sflush_r+0xb6>
 800dd26:	602f      	str	r7, [r5, #0]
 800dd28:	e7b1      	b.n	800dc8e <__sflush_r+0x1a>
 800dd2a:	89a3      	ldrh	r3, [r4, #12]
 800dd2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dd30:	81a3      	strh	r3, [r4, #12]
 800dd32:	e7ad      	b.n	800dc90 <__sflush_r+0x1c>
 800dd34:	690f      	ldr	r7, [r1, #16]
 800dd36:	2f00      	cmp	r7, #0
 800dd38:	d0a9      	beq.n	800dc8e <__sflush_r+0x1a>
 800dd3a:	0793      	lsls	r3, r2, #30
 800dd3c:	680e      	ldr	r6, [r1, #0]
 800dd3e:	bf08      	it	eq
 800dd40:	694b      	ldreq	r3, [r1, #20]
 800dd42:	600f      	str	r7, [r1, #0]
 800dd44:	bf18      	it	ne
 800dd46:	2300      	movne	r3, #0
 800dd48:	eba6 0807 	sub.w	r8, r6, r7
 800dd4c:	608b      	str	r3, [r1, #8]
 800dd4e:	f1b8 0f00 	cmp.w	r8, #0
 800dd52:	dd9c      	ble.n	800dc8e <__sflush_r+0x1a>
 800dd54:	6a21      	ldr	r1, [r4, #32]
 800dd56:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800dd58:	4643      	mov	r3, r8
 800dd5a:	463a      	mov	r2, r7
 800dd5c:	4628      	mov	r0, r5
 800dd5e:	47b0      	blx	r6
 800dd60:	2800      	cmp	r0, #0
 800dd62:	dc06      	bgt.n	800dd72 <__sflush_r+0xfe>
 800dd64:	89a3      	ldrh	r3, [r4, #12]
 800dd66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dd6a:	81a3      	strh	r3, [r4, #12]
 800dd6c:	f04f 30ff 	mov.w	r0, #4294967295
 800dd70:	e78e      	b.n	800dc90 <__sflush_r+0x1c>
 800dd72:	4407      	add	r7, r0
 800dd74:	eba8 0800 	sub.w	r8, r8, r0
 800dd78:	e7e9      	b.n	800dd4e <__sflush_r+0xda>
 800dd7a:	bf00      	nop
 800dd7c:	dfbffffe 	.word	0xdfbffffe

0800dd80 <_fflush_r>:
 800dd80:	b538      	push	{r3, r4, r5, lr}
 800dd82:	690b      	ldr	r3, [r1, #16]
 800dd84:	4605      	mov	r5, r0
 800dd86:	460c      	mov	r4, r1
 800dd88:	b913      	cbnz	r3, 800dd90 <_fflush_r+0x10>
 800dd8a:	2500      	movs	r5, #0
 800dd8c:	4628      	mov	r0, r5
 800dd8e:	bd38      	pop	{r3, r4, r5, pc}
 800dd90:	b118      	cbz	r0, 800dd9a <_fflush_r+0x1a>
 800dd92:	6a03      	ldr	r3, [r0, #32]
 800dd94:	b90b      	cbnz	r3, 800dd9a <_fflush_r+0x1a>
 800dd96:	f7fd ff71 	bl	800bc7c <__sinit>
 800dd9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d0f3      	beq.n	800dd8a <_fflush_r+0xa>
 800dda2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800dda4:	07d0      	lsls	r0, r2, #31
 800dda6:	d404      	bmi.n	800ddb2 <_fflush_r+0x32>
 800dda8:	0599      	lsls	r1, r3, #22
 800ddaa:	d402      	bmi.n	800ddb2 <_fflush_r+0x32>
 800ddac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ddae:	f7fe fa4b 	bl	800c248 <__retarget_lock_acquire_recursive>
 800ddb2:	4628      	mov	r0, r5
 800ddb4:	4621      	mov	r1, r4
 800ddb6:	f7ff ff5d 	bl	800dc74 <__sflush_r>
 800ddba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ddbc:	07da      	lsls	r2, r3, #31
 800ddbe:	4605      	mov	r5, r0
 800ddc0:	d4e4      	bmi.n	800dd8c <_fflush_r+0xc>
 800ddc2:	89a3      	ldrh	r3, [r4, #12]
 800ddc4:	059b      	lsls	r3, r3, #22
 800ddc6:	d4e1      	bmi.n	800dd8c <_fflush_r+0xc>
 800ddc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ddca:	f7fe fa3e 	bl	800c24a <__retarget_lock_release_recursive>
 800ddce:	e7dd      	b.n	800dd8c <_fflush_r+0xc>

0800ddd0 <fiprintf>:
 800ddd0:	b40e      	push	{r1, r2, r3}
 800ddd2:	b503      	push	{r0, r1, lr}
 800ddd4:	4601      	mov	r1, r0
 800ddd6:	ab03      	add	r3, sp, #12
 800ddd8:	4805      	ldr	r0, [pc, #20]	; (800ddf0 <fiprintf+0x20>)
 800ddda:	f853 2b04 	ldr.w	r2, [r3], #4
 800ddde:	6800      	ldr	r0, [r0, #0]
 800dde0:	9301      	str	r3, [sp, #4]
 800dde2:	f7ff fe2d 	bl	800da40 <_vfiprintf_r>
 800dde6:	b002      	add	sp, #8
 800dde8:	f85d eb04 	ldr.w	lr, [sp], #4
 800ddec:	b003      	add	sp, #12
 800ddee:	4770      	bx	lr
 800ddf0:	20000078 	.word	0x20000078

0800ddf4 <__swhatbuf_r>:
 800ddf4:	b570      	push	{r4, r5, r6, lr}
 800ddf6:	460c      	mov	r4, r1
 800ddf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ddfc:	2900      	cmp	r1, #0
 800ddfe:	b096      	sub	sp, #88	; 0x58
 800de00:	4615      	mov	r5, r2
 800de02:	461e      	mov	r6, r3
 800de04:	da0d      	bge.n	800de22 <__swhatbuf_r+0x2e>
 800de06:	89a3      	ldrh	r3, [r4, #12]
 800de08:	f013 0f80 	tst.w	r3, #128	; 0x80
 800de0c:	f04f 0100 	mov.w	r1, #0
 800de10:	bf0c      	ite	eq
 800de12:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800de16:	2340      	movne	r3, #64	; 0x40
 800de18:	2000      	movs	r0, #0
 800de1a:	6031      	str	r1, [r6, #0]
 800de1c:	602b      	str	r3, [r5, #0]
 800de1e:	b016      	add	sp, #88	; 0x58
 800de20:	bd70      	pop	{r4, r5, r6, pc}
 800de22:	466a      	mov	r2, sp
 800de24:	f000 f896 	bl	800df54 <_fstat_r>
 800de28:	2800      	cmp	r0, #0
 800de2a:	dbec      	blt.n	800de06 <__swhatbuf_r+0x12>
 800de2c:	9901      	ldr	r1, [sp, #4]
 800de2e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800de32:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800de36:	4259      	negs	r1, r3
 800de38:	4159      	adcs	r1, r3
 800de3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800de3e:	e7eb      	b.n	800de18 <__swhatbuf_r+0x24>

0800de40 <__smakebuf_r>:
 800de40:	898b      	ldrh	r3, [r1, #12]
 800de42:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800de44:	079d      	lsls	r5, r3, #30
 800de46:	4606      	mov	r6, r0
 800de48:	460c      	mov	r4, r1
 800de4a:	d507      	bpl.n	800de5c <__smakebuf_r+0x1c>
 800de4c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800de50:	6023      	str	r3, [r4, #0]
 800de52:	6123      	str	r3, [r4, #16]
 800de54:	2301      	movs	r3, #1
 800de56:	6163      	str	r3, [r4, #20]
 800de58:	b002      	add	sp, #8
 800de5a:	bd70      	pop	{r4, r5, r6, pc}
 800de5c:	ab01      	add	r3, sp, #4
 800de5e:	466a      	mov	r2, sp
 800de60:	f7ff ffc8 	bl	800ddf4 <__swhatbuf_r>
 800de64:	9900      	ldr	r1, [sp, #0]
 800de66:	4605      	mov	r5, r0
 800de68:	4630      	mov	r0, r6
 800de6a:	f7fd f99b 	bl	800b1a4 <_malloc_r>
 800de6e:	b948      	cbnz	r0, 800de84 <__smakebuf_r+0x44>
 800de70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800de74:	059a      	lsls	r2, r3, #22
 800de76:	d4ef      	bmi.n	800de58 <__smakebuf_r+0x18>
 800de78:	f023 0303 	bic.w	r3, r3, #3
 800de7c:	f043 0302 	orr.w	r3, r3, #2
 800de80:	81a3      	strh	r3, [r4, #12]
 800de82:	e7e3      	b.n	800de4c <__smakebuf_r+0xc>
 800de84:	89a3      	ldrh	r3, [r4, #12]
 800de86:	6020      	str	r0, [r4, #0]
 800de88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800de8c:	81a3      	strh	r3, [r4, #12]
 800de8e:	9b00      	ldr	r3, [sp, #0]
 800de90:	6163      	str	r3, [r4, #20]
 800de92:	9b01      	ldr	r3, [sp, #4]
 800de94:	6120      	str	r0, [r4, #16]
 800de96:	b15b      	cbz	r3, 800deb0 <__smakebuf_r+0x70>
 800de98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800de9c:	4630      	mov	r0, r6
 800de9e:	f000 f86b 	bl	800df78 <_isatty_r>
 800dea2:	b128      	cbz	r0, 800deb0 <__smakebuf_r+0x70>
 800dea4:	89a3      	ldrh	r3, [r4, #12]
 800dea6:	f023 0303 	bic.w	r3, r3, #3
 800deaa:	f043 0301 	orr.w	r3, r3, #1
 800deae:	81a3      	strh	r3, [r4, #12]
 800deb0:	89a3      	ldrh	r3, [r4, #12]
 800deb2:	431d      	orrs	r5, r3
 800deb4:	81a5      	strh	r5, [r4, #12]
 800deb6:	e7cf      	b.n	800de58 <__smakebuf_r+0x18>

0800deb8 <_putc_r>:
 800deb8:	b570      	push	{r4, r5, r6, lr}
 800deba:	460d      	mov	r5, r1
 800debc:	4614      	mov	r4, r2
 800debe:	4606      	mov	r6, r0
 800dec0:	b118      	cbz	r0, 800deca <_putc_r+0x12>
 800dec2:	6a03      	ldr	r3, [r0, #32]
 800dec4:	b90b      	cbnz	r3, 800deca <_putc_r+0x12>
 800dec6:	f7fd fed9 	bl	800bc7c <__sinit>
 800deca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800decc:	07d8      	lsls	r0, r3, #31
 800dece:	d405      	bmi.n	800dedc <_putc_r+0x24>
 800ded0:	89a3      	ldrh	r3, [r4, #12]
 800ded2:	0599      	lsls	r1, r3, #22
 800ded4:	d402      	bmi.n	800dedc <_putc_r+0x24>
 800ded6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ded8:	f7fe f9b6 	bl	800c248 <__retarget_lock_acquire_recursive>
 800dedc:	68a3      	ldr	r3, [r4, #8]
 800dede:	3b01      	subs	r3, #1
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	60a3      	str	r3, [r4, #8]
 800dee4:	da05      	bge.n	800def2 <_putc_r+0x3a>
 800dee6:	69a2      	ldr	r2, [r4, #24]
 800dee8:	4293      	cmp	r3, r2
 800deea:	db12      	blt.n	800df12 <_putc_r+0x5a>
 800deec:	b2eb      	uxtb	r3, r5
 800deee:	2b0a      	cmp	r3, #10
 800def0:	d00f      	beq.n	800df12 <_putc_r+0x5a>
 800def2:	6823      	ldr	r3, [r4, #0]
 800def4:	1c5a      	adds	r2, r3, #1
 800def6:	6022      	str	r2, [r4, #0]
 800def8:	701d      	strb	r5, [r3, #0]
 800defa:	b2ed      	uxtb	r5, r5
 800defc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800defe:	07da      	lsls	r2, r3, #31
 800df00:	d405      	bmi.n	800df0e <_putc_r+0x56>
 800df02:	89a3      	ldrh	r3, [r4, #12]
 800df04:	059b      	lsls	r3, r3, #22
 800df06:	d402      	bmi.n	800df0e <_putc_r+0x56>
 800df08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800df0a:	f7fe f99e 	bl	800c24a <__retarget_lock_release_recursive>
 800df0e:	4628      	mov	r0, r5
 800df10:	bd70      	pop	{r4, r5, r6, pc}
 800df12:	4629      	mov	r1, r5
 800df14:	4622      	mov	r2, r4
 800df16:	4630      	mov	r0, r6
 800df18:	f7fd ffbf 	bl	800be9a <__swbuf_r>
 800df1c:	4605      	mov	r5, r0
 800df1e:	e7ed      	b.n	800defc <_putc_r+0x44>

0800df20 <memmove>:
 800df20:	4288      	cmp	r0, r1
 800df22:	b510      	push	{r4, lr}
 800df24:	eb01 0402 	add.w	r4, r1, r2
 800df28:	d902      	bls.n	800df30 <memmove+0x10>
 800df2a:	4284      	cmp	r4, r0
 800df2c:	4623      	mov	r3, r4
 800df2e:	d807      	bhi.n	800df40 <memmove+0x20>
 800df30:	1e43      	subs	r3, r0, #1
 800df32:	42a1      	cmp	r1, r4
 800df34:	d008      	beq.n	800df48 <memmove+0x28>
 800df36:	f811 2b01 	ldrb.w	r2, [r1], #1
 800df3a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800df3e:	e7f8      	b.n	800df32 <memmove+0x12>
 800df40:	4402      	add	r2, r0
 800df42:	4601      	mov	r1, r0
 800df44:	428a      	cmp	r2, r1
 800df46:	d100      	bne.n	800df4a <memmove+0x2a>
 800df48:	bd10      	pop	{r4, pc}
 800df4a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800df4e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800df52:	e7f7      	b.n	800df44 <memmove+0x24>

0800df54 <_fstat_r>:
 800df54:	b538      	push	{r3, r4, r5, lr}
 800df56:	4d07      	ldr	r5, [pc, #28]	; (800df74 <_fstat_r+0x20>)
 800df58:	2300      	movs	r3, #0
 800df5a:	4604      	mov	r4, r0
 800df5c:	4608      	mov	r0, r1
 800df5e:	4611      	mov	r1, r2
 800df60:	602b      	str	r3, [r5, #0]
 800df62:	f7f3 ff51 	bl	8001e08 <_fstat>
 800df66:	1c43      	adds	r3, r0, #1
 800df68:	d102      	bne.n	800df70 <_fstat_r+0x1c>
 800df6a:	682b      	ldr	r3, [r5, #0]
 800df6c:	b103      	cbz	r3, 800df70 <_fstat_r+0x1c>
 800df6e:	6023      	str	r3, [r4, #0]
 800df70:	bd38      	pop	{r3, r4, r5, pc}
 800df72:	bf00      	nop
 800df74:	2002973c 	.word	0x2002973c

0800df78 <_isatty_r>:
 800df78:	b538      	push	{r3, r4, r5, lr}
 800df7a:	4d06      	ldr	r5, [pc, #24]	; (800df94 <_isatty_r+0x1c>)
 800df7c:	2300      	movs	r3, #0
 800df7e:	4604      	mov	r4, r0
 800df80:	4608      	mov	r0, r1
 800df82:	602b      	str	r3, [r5, #0]
 800df84:	f7f3 ff50 	bl	8001e28 <_isatty>
 800df88:	1c43      	adds	r3, r0, #1
 800df8a:	d102      	bne.n	800df92 <_isatty_r+0x1a>
 800df8c:	682b      	ldr	r3, [r5, #0]
 800df8e:	b103      	cbz	r3, 800df92 <_isatty_r+0x1a>
 800df90:	6023      	str	r3, [r4, #0]
 800df92:	bd38      	pop	{r3, r4, r5, pc}
 800df94:	2002973c 	.word	0x2002973c

0800df98 <abort>:
 800df98:	b508      	push	{r3, lr}
 800df9a:	2006      	movs	r0, #6
 800df9c:	f000 f890 	bl	800e0c0 <raise>
 800dfa0:	2001      	movs	r0, #1
 800dfa2:	f7f3 fee2 	bl	8001d6a <_exit>

0800dfa6 <_calloc_r>:
 800dfa6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dfa8:	fba1 2402 	umull	r2, r4, r1, r2
 800dfac:	b94c      	cbnz	r4, 800dfc2 <_calloc_r+0x1c>
 800dfae:	4611      	mov	r1, r2
 800dfb0:	9201      	str	r2, [sp, #4]
 800dfb2:	f7fd f8f7 	bl	800b1a4 <_malloc_r>
 800dfb6:	9a01      	ldr	r2, [sp, #4]
 800dfb8:	4605      	mov	r5, r0
 800dfba:	b930      	cbnz	r0, 800dfca <_calloc_r+0x24>
 800dfbc:	4628      	mov	r0, r5
 800dfbe:	b003      	add	sp, #12
 800dfc0:	bd30      	pop	{r4, r5, pc}
 800dfc2:	220c      	movs	r2, #12
 800dfc4:	6002      	str	r2, [r0, #0]
 800dfc6:	2500      	movs	r5, #0
 800dfc8:	e7f8      	b.n	800dfbc <_calloc_r+0x16>
 800dfca:	4621      	mov	r1, r4
 800dfcc:	f7fe f80a 	bl	800bfe4 <memset>
 800dfd0:	e7f4      	b.n	800dfbc <_calloc_r+0x16>

0800dfd2 <__ascii_mbtowc>:
 800dfd2:	b082      	sub	sp, #8
 800dfd4:	b901      	cbnz	r1, 800dfd8 <__ascii_mbtowc+0x6>
 800dfd6:	a901      	add	r1, sp, #4
 800dfd8:	b142      	cbz	r2, 800dfec <__ascii_mbtowc+0x1a>
 800dfda:	b14b      	cbz	r3, 800dff0 <__ascii_mbtowc+0x1e>
 800dfdc:	7813      	ldrb	r3, [r2, #0]
 800dfde:	600b      	str	r3, [r1, #0]
 800dfe0:	7812      	ldrb	r2, [r2, #0]
 800dfe2:	1e10      	subs	r0, r2, #0
 800dfe4:	bf18      	it	ne
 800dfe6:	2001      	movne	r0, #1
 800dfe8:	b002      	add	sp, #8
 800dfea:	4770      	bx	lr
 800dfec:	4610      	mov	r0, r2
 800dfee:	e7fb      	b.n	800dfe8 <__ascii_mbtowc+0x16>
 800dff0:	f06f 0001 	mvn.w	r0, #1
 800dff4:	e7f8      	b.n	800dfe8 <__ascii_mbtowc+0x16>

0800dff6 <_realloc_r>:
 800dff6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dffa:	4680      	mov	r8, r0
 800dffc:	4614      	mov	r4, r2
 800dffe:	460e      	mov	r6, r1
 800e000:	b921      	cbnz	r1, 800e00c <_realloc_r+0x16>
 800e002:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e006:	4611      	mov	r1, r2
 800e008:	f7fd b8cc 	b.w	800b1a4 <_malloc_r>
 800e00c:	b92a      	cbnz	r2, 800e01a <_realloc_r+0x24>
 800e00e:	f7fe ffcd 	bl	800cfac <_free_r>
 800e012:	4625      	mov	r5, r4
 800e014:	4628      	mov	r0, r5
 800e016:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e01a:	f000 f86d 	bl	800e0f8 <_malloc_usable_size_r>
 800e01e:	4284      	cmp	r4, r0
 800e020:	4607      	mov	r7, r0
 800e022:	d802      	bhi.n	800e02a <_realloc_r+0x34>
 800e024:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e028:	d812      	bhi.n	800e050 <_realloc_r+0x5a>
 800e02a:	4621      	mov	r1, r4
 800e02c:	4640      	mov	r0, r8
 800e02e:	f7fd f8b9 	bl	800b1a4 <_malloc_r>
 800e032:	4605      	mov	r5, r0
 800e034:	2800      	cmp	r0, #0
 800e036:	d0ed      	beq.n	800e014 <_realloc_r+0x1e>
 800e038:	42bc      	cmp	r4, r7
 800e03a:	4622      	mov	r2, r4
 800e03c:	4631      	mov	r1, r6
 800e03e:	bf28      	it	cs
 800e040:	463a      	movcs	r2, r7
 800e042:	f7fe f90b 	bl	800c25c <memcpy>
 800e046:	4631      	mov	r1, r6
 800e048:	4640      	mov	r0, r8
 800e04a:	f7fe ffaf 	bl	800cfac <_free_r>
 800e04e:	e7e1      	b.n	800e014 <_realloc_r+0x1e>
 800e050:	4635      	mov	r5, r6
 800e052:	e7df      	b.n	800e014 <_realloc_r+0x1e>

0800e054 <__ascii_wctomb>:
 800e054:	b149      	cbz	r1, 800e06a <__ascii_wctomb+0x16>
 800e056:	2aff      	cmp	r2, #255	; 0xff
 800e058:	bf85      	ittet	hi
 800e05a:	238a      	movhi	r3, #138	; 0x8a
 800e05c:	6003      	strhi	r3, [r0, #0]
 800e05e:	700a      	strbls	r2, [r1, #0]
 800e060:	f04f 30ff 	movhi.w	r0, #4294967295
 800e064:	bf98      	it	ls
 800e066:	2001      	movls	r0, #1
 800e068:	4770      	bx	lr
 800e06a:	4608      	mov	r0, r1
 800e06c:	4770      	bx	lr

0800e06e <_raise_r>:
 800e06e:	291f      	cmp	r1, #31
 800e070:	b538      	push	{r3, r4, r5, lr}
 800e072:	4604      	mov	r4, r0
 800e074:	460d      	mov	r5, r1
 800e076:	d904      	bls.n	800e082 <_raise_r+0x14>
 800e078:	2316      	movs	r3, #22
 800e07a:	6003      	str	r3, [r0, #0]
 800e07c:	f04f 30ff 	mov.w	r0, #4294967295
 800e080:	bd38      	pop	{r3, r4, r5, pc}
 800e082:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800e084:	b112      	cbz	r2, 800e08c <_raise_r+0x1e>
 800e086:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e08a:	b94b      	cbnz	r3, 800e0a0 <_raise_r+0x32>
 800e08c:	4620      	mov	r0, r4
 800e08e:	f000 f831 	bl	800e0f4 <_getpid_r>
 800e092:	462a      	mov	r2, r5
 800e094:	4601      	mov	r1, r0
 800e096:	4620      	mov	r0, r4
 800e098:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e09c:	f000 b818 	b.w	800e0d0 <_kill_r>
 800e0a0:	2b01      	cmp	r3, #1
 800e0a2:	d00a      	beq.n	800e0ba <_raise_r+0x4c>
 800e0a4:	1c59      	adds	r1, r3, #1
 800e0a6:	d103      	bne.n	800e0b0 <_raise_r+0x42>
 800e0a8:	2316      	movs	r3, #22
 800e0aa:	6003      	str	r3, [r0, #0]
 800e0ac:	2001      	movs	r0, #1
 800e0ae:	e7e7      	b.n	800e080 <_raise_r+0x12>
 800e0b0:	2400      	movs	r4, #0
 800e0b2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e0b6:	4628      	mov	r0, r5
 800e0b8:	4798      	blx	r3
 800e0ba:	2000      	movs	r0, #0
 800e0bc:	e7e0      	b.n	800e080 <_raise_r+0x12>
	...

0800e0c0 <raise>:
 800e0c0:	4b02      	ldr	r3, [pc, #8]	; (800e0cc <raise+0xc>)
 800e0c2:	4601      	mov	r1, r0
 800e0c4:	6818      	ldr	r0, [r3, #0]
 800e0c6:	f7ff bfd2 	b.w	800e06e <_raise_r>
 800e0ca:	bf00      	nop
 800e0cc:	20000078 	.word	0x20000078

0800e0d0 <_kill_r>:
 800e0d0:	b538      	push	{r3, r4, r5, lr}
 800e0d2:	4d07      	ldr	r5, [pc, #28]	; (800e0f0 <_kill_r+0x20>)
 800e0d4:	2300      	movs	r3, #0
 800e0d6:	4604      	mov	r4, r0
 800e0d8:	4608      	mov	r0, r1
 800e0da:	4611      	mov	r1, r2
 800e0dc:	602b      	str	r3, [r5, #0]
 800e0de:	f7f3 fe34 	bl	8001d4a <_kill>
 800e0e2:	1c43      	adds	r3, r0, #1
 800e0e4:	d102      	bne.n	800e0ec <_kill_r+0x1c>
 800e0e6:	682b      	ldr	r3, [r5, #0]
 800e0e8:	b103      	cbz	r3, 800e0ec <_kill_r+0x1c>
 800e0ea:	6023      	str	r3, [r4, #0]
 800e0ec:	bd38      	pop	{r3, r4, r5, pc}
 800e0ee:	bf00      	nop
 800e0f0:	2002973c 	.word	0x2002973c

0800e0f4 <_getpid_r>:
 800e0f4:	f7f3 be21 	b.w	8001d3a <_getpid>

0800e0f8 <_malloc_usable_size_r>:
 800e0f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e0fc:	1f18      	subs	r0, r3, #4
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	bfbc      	itt	lt
 800e102:	580b      	ldrlt	r3, [r1, r0]
 800e104:	18c0      	addlt	r0, r0, r3
 800e106:	4770      	bx	lr

0800e108 <roundf>:
 800e108:	ee10 0a10 	vmov	r0, s0
 800e10c:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800e110:	3a7f      	subs	r2, #127	; 0x7f
 800e112:	2a16      	cmp	r2, #22
 800e114:	dc15      	bgt.n	800e142 <roundf+0x3a>
 800e116:	2a00      	cmp	r2, #0
 800e118:	da08      	bge.n	800e12c <roundf+0x24>
 800e11a:	3201      	adds	r2, #1
 800e11c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800e120:	d101      	bne.n	800e126 <roundf+0x1e>
 800e122:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 800e126:	ee00 3a10 	vmov	s0, r3
 800e12a:	4770      	bx	lr
 800e12c:	4907      	ldr	r1, [pc, #28]	; (800e14c <roundf+0x44>)
 800e12e:	4111      	asrs	r1, r2
 800e130:	4208      	tst	r0, r1
 800e132:	d0fa      	beq.n	800e12a <roundf+0x22>
 800e134:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800e138:	4113      	asrs	r3, r2
 800e13a:	4403      	add	r3, r0
 800e13c:	ea23 0301 	bic.w	r3, r3, r1
 800e140:	e7f1      	b.n	800e126 <roundf+0x1e>
 800e142:	2a80      	cmp	r2, #128	; 0x80
 800e144:	d1f1      	bne.n	800e12a <roundf+0x22>
 800e146:	ee30 0a00 	vadd.f32	s0, s0, s0
 800e14a:	4770      	bx	lr
 800e14c:	007fffff 	.word	0x007fffff

0800e150 <_init>:
 800e150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e152:	bf00      	nop
 800e154:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e156:	bc08      	pop	{r3}
 800e158:	469e      	mov	lr, r3
 800e15a:	4770      	bx	lr

0800e15c <_fini>:
 800e15c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e15e:	bf00      	nop
 800e160:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e162:	bc08      	pop	{r3}
 800e164:	469e      	mov	lr, r3
 800e166:	4770      	bx	lr
