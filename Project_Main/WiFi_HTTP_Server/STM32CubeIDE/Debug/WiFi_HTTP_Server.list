
WiFi_HTTP_Server.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a66c  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000136c0  0800a830  0800a830  0001a830  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801def0  0801def0  000301e4  2**0
                  CONTENTS
  4 .ARM          00000008  0801def0  0801def0  0002def0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801def8  0801def8  000301e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801def8  0801def8  0002def8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801defc  0801defc  0002defc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0801df00  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00050878  200001e4  0801e0e4  000301e4  2**2
                  ALLOC
 10 ._user_heap   00010004  20050a5c  0801e0e4  00030a5c  2**0
                  ALLOC
 11 ._user_stack  00007f00  10000000  10000000  00040000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000301e4  2**0
                  CONTENTS, READONLY
 13 .comment      000000b8  00000000  00000000  00030214  2**0
                  CONTENTS, READONLY
 14 .debug_line   0001ffcc  00000000  00000000  000302cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line_str 000000c9  00000000  00000000  00050298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_info   00023c10  00000000  00000000  00050361  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00004189  00000000  00000000  00073f71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00001900  00000000  00000000  00078100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00121b52  00000000  00000000  00079a00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_rnglists 00001299  00000000  00000000  0019b552  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  00004a4a  00000000  00000000  0019c7eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00007a74  00000000  00000000  001a1238  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loc    00002f41  00000000  00000000  001a8cac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_ranges 000000b8  00000000  00000000  001abbed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800a814 	.word	0x0800a814

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e8 	.word	0x200001e8
 80001fc:	0800a814 	.word	0x0800a814

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_uldivmod>:
 8000c78:	b953      	cbnz	r3, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7a:	b94a      	cbnz	r2, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	bf08      	it	eq
 8000c80:	2800      	cmpeq	r0, #0
 8000c82:	bf1c      	itt	ne
 8000c84:	f04f 31ff 	movne.w	r1, #4294967295
 8000c88:	f04f 30ff 	movne.w	r0, #4294967295
 8000c8c:	f000 b970 	b.w	8000f70 <__aeabi_idiv0>
 8000c90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c98:	f000 f806 	bl	8000ca8 <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4770      	bx	lr

08000ca8 <__udivmoddi4>:
 8000ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cac:	9e08      	ldr	r6, [sp, #32]
 8000cae:	460d      	mov	r5, r1
 8000cb0:	4604      	mov	r4, r0
 8000cb2:	460f      	mov	r7, r1
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d14a      	bne.n	8000d4e <__udivmoddi4+0xa6>
 8000cb8:	428a      	cmp	r2, r1
 8000cba:	4694      	mov	ip, r2
 8000cbc:	d965      	bls.n	8000d8a <__udivmoddi4+0xe2>
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	b143      	cbz	r3, 8000cd6 <__udivmoddi4+0x2e>
 8000cc4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cc8:	f1c3 0220 	rsb	r2, r3, #32
 8000ccc:	409f      	lsls	r7, r3
 8000cce:	fa20 f202 	lsr.w	r2, r0, r2
 8000cd2:	4317      	orrs	r7, r2
 8000cd4:	409c      	lsls	r4, r3
 8000cd6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cda:	fa1f f58c 	uxth.w	r5, ip
 8000cde:	fbb7 f1fe 	udiv	r1, r7, lr
 8000ce2:	0c22      	lsrs	r2, r4, #16
 8000ce4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000ce8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cec:	fb01 f005 	mul.w	r0, r1, r5
 8000cf0:	4290      	cmp	r0, r2
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x62>
 8000cf4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cf8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000cfc:	f080 811c 	bcs.w	8000f38 <__udivmoddi4+0x290>
 8000d00:	4290      	cmp	r0, r2
 8000d02:	f240 8119 	bls.w	8000f38 <__udivmoddi4+0x290>
 8000d06:	3902      	subs	r1, #2
 8000d08:	4462      	add	r2, ip
 8000d0a:	1a12      	subs	r2, r2, r0
 8000d0c:	b2a4      	uxth	r4, r4
 8000d0e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d12:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d16:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d1a:	fb00 f505 	mul.w	r5, r0, r5
 8000d1e:	42a5      	cmp	r5, r4
 8000d20:	d90a      	bls.n	8000d38 <__udivmoddi4+0x90>
 8000d22:	eb1c 0404 	adds.w	r4, ip, r4
 8000d26:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d2a:	f080 8107 	bcs.w	8000f3c <__udivmoddi4+0x294>
 8000d2e:	42a5      	cmp	r5, r4
 8000d30:	f240 8104 	bls.w	8000f3c <__udivmoddi4+0x294>
 8000d34:	4464      	add	r4, ip
 8000d36:	3802      	subs	r0, #2
 8000d38:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d3c:	1b64      	subs	r4, r4, r5
 8000d3e:	2100      	movs	r1, #0
 8000d40:	b11e      	cbz	r6, 8000d4a <__udivmoddi4+0xa2>
 8000d42:	40dc      	lsrs	r4, r3
 8000d44:	2300      	movs	r3, #0
 8000d46:	e9c6 4300 	strd	r4, r3, [r6]
 8000d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d908      	bls.n	8000d64 <__udivmoddi4+0xbc>
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	f000 80ed 	beq.w	8000f32 <__udivmoddi4+0x28a>
 8000d58:	2100      	movs	r1, #0
 8000d5a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d5e:	4608      	mov	r0, r1
 8000d60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d64:	fab3 f183 	clz	r1, r3
 8000d68:	2900      	cmp	r1, #0
 8000d6a:	d149      	bne.n	8000e00 <__udivmoddi4+0x158>
 8000d6c:	42ab      	cmp	r3, r5
 8000d6e:	d302      	bcc.n	8000d76 <__udivmoddi4+0xce>
 8000d70:	4282      	cmp	r2, r0
 8000d72:	f200 80f8 	bhi.w	8000f66 <__udivmoddi4+0x2be>
 8000d76:	1a84      	subs	r4, r0, r2
 8000d78:	eb65 0203 	sbc.w	r2, r5, r3
 8000d7c:	2001      	movs	r0, #1
 8000d7e:	4617      	mov	r7, r2
 8000d80:	2e00      	cmp	r6, #0
 8000d82:	d0e2      	beq.n	8000d4a <__udivmoddi4+0xa2>
 8000d84:	e9c6 4700 	strd	r4, r7, [r6]
 8000d88:	e7df      	b.n	8000d4a <__udivmoddi4+0xa2>
 8000d8a:	b902      	cbnz	r2, 8000d8e <__udivmoddi4+0xe6>
 8000d8c:	deff      	udf	#255	; 0xff
 8000d8e:	fab2 f382 	clz	r3, r2
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	f040 8090 	bne.w	8000eb8 <__udivmoddi4+0x210>
 8000d98:	1a8a      	subs	r2, r1, r2
 8000d9a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d9e:	fa1f fe8c 	uxth.w	lr, ip
 8000da2:	2101      	movs	r1, #1
 8000da4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000da8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dac:	0c22      	lsrs	r2, r4, #16
 8000dae:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000db2:	fb0e f005 	mul.w	r0, lr, r5
 8000db6:	4290      	cmp	r0, r2
 8000db8:	d908      	bls.n	8000dcc <__udivmoddi4+0x124>
 8000dba:	eb1c 0202 	adds.w	r2, ip, r2
 8000dbe:	f105 38ff 	add.w	r8, r5, #4294967295
 8000dc2:	d202      	bcs.n	8000dca <__udivmoddi4+0x122>
 8000dc4:	4290      	cmp	r0, r2
 8000dc6:	f200 80cb 	bhi.w	8000f60 <__udivmoddi4+0x2b8>
 8000dca:	4645      	mov	r5, r8
 8000dcc:	1a12      	subs	r2, r2, r0
 8000dce:	b2a4      	uxth	r4, r4
 8000dd0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000dd4:	fb07 2210 	mls	r2, r7, r0, r2
 8000dd8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ddc:	fb0e fe00 	mul.w	lr, lr, r0
 8000de0:	45a6      	cmp	lr, r4
 8000de2:	d908      	bls.n	8000df6 <__udivmoddi4+0x14e>
 8000de4:	eb1c 0404 	adds.w	r4, ip, r4
 8000de8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dec:	d202      	bcs.n	8000df4 <__udivmoddi4+0x14c>
 8000dee:	45a6      	cmp	lr, r4
 8000df0:	f200 80bb 	bhi.w	8000f6a <__udivmoddi4+0x2c2>
 8000df4:	4610      	mov	r0, r2
 8000df6:	eba4 040e 	sub.w	r4, r4, lr
 8000dfa:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dfe:	e79f      	b.n	8000d40 <__udivmoddi4+0x98>
 8000e00:	f1c1 0720 	rsb	r7, r1, #32
 8000e04:	408b      	lsls	r3, r1
 8000e06:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e0a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e0e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e12:	fa20 f307 	lsr.w	r3, r0, r7
 8000e16:	40fd      	lsrs	r5, r7
 8000e18:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e1c:	4323      	orrs	r3, r4
 8000e1e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	fb09 5518 	mls	r5, r9, r8, r5
 8000e2a:	0c1c      	lsrs	r4, r3, #16
 8000e2c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e30:	fb08 f50e 	mul.w	r5, r8, lr
 8000e34:	42a5      	cmp	r5, r4
 8000e36:	fa02 f201 	lsl.w	r2, r2, r1
 8000e3a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e3e:	d90b      	bls.n	8000e58 <__udivmoddi4+0x1b0>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e48:	f080 8088 	bcs.w	8000f5c <__udivmoddi4+0x2b4>
 8000e4c:	42a5      	cmp	r5, r4
 8000e4e:	f240 8085 	bls.w	8000f5c <__udivmoddi4+0x2b4>
 8000e52:	f1a8 0802 	sub.w	r8, r8, #2
 8000e56:	4464      	add	r4, ip
 8000e58:	1b64      	subs	r4, r4, r5
 8000e5a:	b29d      	uxth	r5, r3
 8000e5c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e60:	fb09 4413 	mls	r4, r9, r3, r4
 8000e64:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e68:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e6c:	45a6      	cmp	lr, r4
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x1da>
 8000e70:	eb1c 0404 	adds.w	r4, ip, r4
 8000e74:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e78:	d26c      	bcs.n	8000f54 <__udivmoddi4+0x2ac>
 8000e7a:	45a6      	cmp	lr, r4
 8000e7c:	d96a      	bls.n	8000f54 <__udivmoddi4+0x2ac>
 8000e7e:	3b02      	subs	r3, #2
 8000e80:	4464      	add	r4, ip
 8000e82:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e86:	fba3 9502 	umull	r9, r5, r3, r2
 8000e8a:	eba4 040e 	sub.w	r4, r4, lr
 8000e8e:	42ac      	cmp	r4, r5
 8000e90:	46c8      	mov	r8, r9
 8000e92:	46ae      	mov	lr, r5
 8000e94:	d356      	bcc.n	8000f44 <__udivmoddi4+0x29c>
 8000e96:	d053      	beq.n	8000f40 <__udivmoddi4+0x298>
 8000e98:	b156      	cbz	r6, 8000eb0 <__udivmoddi4+0x208>
 8000e9a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e9e:	eb64 040e 	sbc.w	r4, r4, lr
 8000ea2:	fa04 f707 	lsl.w	r7, r4, r7
 8000ea6:	40ca      	lsrs	r2, r1
 8000ea8:	40cc      	lsrs	r4, r1
 8000eaa:	4317      	orrs	r7, r2
 8000eac:	e9c6 7400 	strd	r7, r4, [r6]
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eb8:	f1c3 0120 	rsb	r1, r3, #32
 8000ebc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ec0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ec4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ec8:	409d      	lsls	r5, r3
 8000eca:	432a      	orrs	r2, r5
 8000ecc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ed0:	fa1f fe8c 	uxth.w	lr, ip
 8000ed4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ed8:	fb07 1510 	mls	r5, r7, r0, r1
 8000edc:	0c11      	lsrs	r1, r2, #16
 8000ede:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ee2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ee6:	428d      	cmp	r5, r1
 8000ee8:	fa04 f403 	lsl.w	r4, r4, r3
 8000eec:	d908      	bls.n	8000f00 <__udivmoddi4+0x258>
 8000eee:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ef6:	d22f      	bcs.n	8000f58 <__udivmoddi4+0x2b0>
 8000ef8:	428d      	cmp	r5, r1
 8000efa:	d92d      	bls.n	8000f58 <__udivmoddi4+0x2b0>
 8000efc:	3802      	subs	r0, #2
 8000efe:	4461      	add	r1, ip
 8000f00:	1b49      	subs	r1, r1, r5
 8000f02:	b292      	uxth	r2, r2
 8000f04:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f08:	fb07 1115 	mls	r1, r7, r5, r1
 8000f0c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f10:	fb05 f10e 	mul.w	r1, r5, lr
 8000f14:	4291      	cmp	r1, r2
 8000f16:	d908      	bls.n	8000f2a <__udivmoddi4+0x282>
 8000f18:	eb1c 0202 	adds.w	r2, ip, r2
 8000f1c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f20:	d216      	bcs.n	8000f50 <__udivmoddi4+0x2a8>
 8000f22:	4291      	cmp	r1, r2
 8000f24:	d914      	bls.n	8000f50 <__udivmoddi4+0x2a8>
 8000f26:	3d02      	subs	r5, #2
 8000f28:	4462      	add	r2, ip
 8000f2a:	1a52      	subs	r2, r2, r1
 8000f2c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f30:	e738      	b.n	8000da4 <__udivmoddi4+0xfc>
 8000f32:	4631      	mov	r1, r6
 8000f34:	4630      	mov	r0, r6
 8000f36:	e708      	b.n	8000d4a <__udivmoddi4+0xa2>
 8000f38:	4639      	mov	r1, r7
 8000f3a:	e6e6      	b.n	8000d0a <__udivmoddi4+0x62>
 8000f3c:	4610      	mov	r0, r2
 8000f3e:	e6fb      	b.n	8000d38 <__udivmoddi4+0x90>
 8000f40:	4548      	cmp	r0, r9
 8000f42:	d2a9      	bcs.n	8000e98 <__udivmoddi4+0x1f0>
 8000f44:	ebb9 0802 	subs.w	r8, r9, r2
 8000f48:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f4c:	3b01      	subs	r3, #1
 8000f4e:	e7a3      	b.n	8000e98 <__udivmoddi4+0x1f0>
 8000f50:	4645      	mov	r5, r8
 8000f52:	e7ea      	b.n	8000f2a <__udivmoddi4+0x282>
 8000f54:	462b      	mov	r3, r5
 8000f56:	e794      	b.n	8000e82 <__udivmoddi4+0x1da>
 8000f58:	4640      	mov	r0, r8
 8000f5a:	e7d1      	b.n	8000f00 <__udivmoddi4+0x258>
 8000f5c:	46d0      	mov	r8, sl
 8000f5e:	e77b      	b.n	8000e58 <__udivmoddi4+0x1b0>
 8000f60:	3d02      	subs	r5, #2
 8000f62:	4462      	add	r2, ip
 8000f64:	e732      	b.n	8000dcc <__udivmoddi4+0x124>
 8000f66:	4608      	mov	r0, r1
 8000f68:	e70a      	b.n	8000d80 <__udivmoddi4+0xd8>
 8000f6a:	4464      	add	r4, ip
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	e742      	b.n	8000df6 <__udivmoddi4+0x14e>

08000f70 <__aeabi_idiv0>:
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop

08000f74 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000f74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fac <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f78:	f001 f894 	bl	80020a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000f7c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000f7e:	e003      	b.n	8000f88 <LoopCopyDataInit>

08000f80 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000f80:	4b0b      	ldr	r3, [pc, #44]	; (8000fb0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000f82:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000f84:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000f86:	3104      	adds	r1, #4

08000f88 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000f88:	480a      	ldr	r0, [pc, #40]	; (8000fb4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000f8a:	4b0b      	ldr	r3, [pc, #44]	; (8000fb8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000f8c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000f8e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000f90:	d3f6      	bcc.n	8000f80 <CopyDataInit>
	ldr	r2, =_sbss
 8000f92:	4a0a      	ldr	r2, [pc, #40]	; (8000fbc <LoopForever+0x12>)
	b	LoopFillZerobss
 8000f94:	e002      	b.n	8000f9c <LoopFillZerobss>

08000f96 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000f96:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000f98:	f842 3b04 	str.w	r3, [r2], #4

08000f9c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000f9c:	4b08      	ldr	r3, [pc, #32]	; (8000fc0 <LoopForever+0x16>)
	cmp	r2, r3
 8000f9e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000fa0:	d3f9      	bcc.n	8000f96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fa2:	f007 fe2f 	bl	8008c04 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000fa6:	f000 f80f 	bl	8000fc8 <main>

08000faa <LoopForever>:

LoopForever:
    b LoopForever
 8000faa:	e7fe      	b.n	8000faa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000fac:	2007d000 	.word	0x2007d000
	ldr	r3, =_sidata
 8000fb0:	0801df00 	.word	0x0801df00
	ldr	r0, =_sdata
 8000fb4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000fb8:	200001e4 	.word	0x200001e4
	ldr	r2, =_sbss
 8000fbc:	200001e4 	.word	0x200001e4
	ldr	r3, = _ebss
 8000fc0:	20050a5c 	.word	0x20050a5c

08000fc4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000fc4:	e7fe      	b.n	8000fc4 <ADC1_IRQHandler>
	...

08000fc8 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af02      	add	r7, sp, #8
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fce:	f001 f94b 	bl	8002268 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8000fd2:	f000 fb77 	bl	80016c4 <SystemClock_Config>

  /* Configure LED2 */
  BSP_LED_Init(LED2);
 8000fd6:	2000      	movs	r0, #0
 8000fd8:	f001 f8aa 	bl	8002130 <BSP_LED_Init>

  /* Initialize all configured peripherals */
  MX_DMA_Init();
 8000fdc:	f000 fce6 	bl	80019ac <MX_DMA_Init>
  MX_DAC1_Init();
 8000fe0:	f000 fbf0 	bl	80017c4 <MX_DAC1_Init>
  MX_TIM2_Init();
 8000fe4:	f000 fc94 	bl	8001910 <MX_TIM2_Init>
  MX_DFSDM1_Init();
 8000fe8:	f000 fc2e 	bl	8001848 <MX_DFSDM1_Init>
  MX_GPIO_Init();
 8000fec:	f000 fba4 	bl	8001738 <MX_GPIO_Init>


  //HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
  HAL_TIM_Base_Start_IT(&htim2); // the _IT at the end of fn. means interrupt
 8000ff0:	4856      	ldr	r0, [pc, #344]	; (800114c <main+0x184>)
 8000ff2:	f004 fbfd 	bl	80057f0 <HAL_TIM_Base_Start_IT>

  /* WIFI Web Server demonstration */
#if defined (TERMINAL_USE)
  /* Initialize all configured peripherals */
  hDiscoUart.Instance = DISCOVERY_COM1;
 8000ff6:	4b56      	ldr	r3, [pc, #344]	; (8001150 <main+0x188>)
 8000ff8:	4a56      	ldr	r2, [pc, #344]	; (8001154 <main+0x18c>)
 8000ffa:	601a      	str	r2, [r3, #0]
  hDiscoUart.Init.BaudRate = 115200;
 8000ffc:	4b54      	ldr	r3, [pc, #336]	; (8001150 <main+0x188>)
 8000ffe:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001002:	605a      	str	r2, [r3, #4]
  hDiscoUart.Init.WordLength = UART_WORDLENGTH_8B;
 8001004:	4b52      	ldr	r3, [pc, #328]	; (8001150 <main+0x188>)
 8001006:	2200      	movs	r2, #0
 8001008:	609a      	str	r2, [r3, #8]
  hDiscoUart.Init.StopBits = UART_STOPBITS_1;
 800100a:	4b51      	ldr	r3, [pc, #324]	; (8001150 <main+0x188>)
 800100c:	2200      	movs	r2, #0
 800100e:	60da      	str	r2, [r3, #12]
  hDiscoUart.Init.Parity = UART_PARITY_NONE;
 8001010:	4b4f      	ldr	r3, [pc, #316]	; (8001150 <main+0x188>)
 8001012:	2200      	movs	r2, #0
 8001014:	611a      	str	r2, [r3, #16]
  hDiscoUart.Init.Mode = UART_MODE_TX_RX;
 8001016:	4b4e      	ldr	r3, [pc, #312]	; (8001150 <main+0x188>)
 8001018:	220c      	movs	r2, #12
 800101a:	615a      	str	r2, [r3, #20]
  hDiscoUart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800101c:	4b4c      	ldr	r3, [pc, #304]	; (8001150 <main+0x188>)
 800101e:	2200      	movs	r2, #0
 8001020:	619a      	str	r2, [r3, #24]
  hDiscoUart.Init.OverSampling = UART_OVERSAMPLING_16;
 8001022:	4b4b      	ldr	r3, [pc, #300]	; (8001150 <main+0x188>)
 8001024:	2200      	movs	r2, #0
 8001026:	61da      	str	r2, [r3, #28]
  hDiscoUart.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001028:	4b49      	ldr	r3, [pc, #292]	; (8001150 <main+0x188>)
 800102a:	2200      	movs	r2, #0
 800102c:	621a      	str	r2, [r3, #32]
  hDiscoUart.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800102e:	4b48      	ldr	r3, [pc, #288]	; (8001150 <main+0x188>)
 8001030:	2200      	movs	r2, #0
 8001032:	629a      	str	r2, [r3, #40]	; 0x28


  BSP_COM_Init(COM1, &hDiscoUart);
 8001034:	4946      	ldr	r1, [pc, #280]	; (8001150 <main+0x188>)
 8001036:	2000      	movs	r0, #0
 8001038:	f001 f8aa 	bl	8002190 <BSP_COM_Init>

  /* resetting buffers */
  memset(recordingBuffer, 0, RECORDING_BUFLEN*sizeof(int32_t));
 800103c:	f44f 3220 	mov.w	r2, #163840	; 0x28000
 8001040:	2100      	movs	r1, #0
 8001042:	4845      	ldr	r0, [pc, #276]	; (8001158 <main+0x190>)
 8001044:	f007 fd76 	bl	8008b34 <memset>
  memset(sendingBuffer, 0, SENDING_BUFLEN);
 8001048:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800104c:	2100      	movs	r1, #0
 800104e:	4843      	ldr	r0, [pc, #268]	; (800115c <main+0x194>)
 8001050:	f007 fd70 	bl	8008b34 <memset>

  printf("****** SENDING BOARD Initiating ****** \r\n");
 8001054:	4842      	ldr	r0, [pc, #264]	; (8001160 <main+0x198>)
 8001056:	f007 fc8d 	bl	8008974 <puts>
	  return -1;
  }
  */

  /* Initializing FFT */
  if (arm_rfft_fast_init_f32(&S_RFFT_F, N_FFT) != ARM_MATH_SUCCESS) {
 800105a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800105e:	4841      	ldr	r0, [pc, #260]	; (8001164 <main+0x19c>)
 8001060:	f005 fed6 	bl	8006e10 <arm_rfft_fast_init_f32>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d005      	beq.n	8001076 <main+0xae>
	  printf("Could not initiate FFT \r\n");
 800106a:	483f      	ldr	r0, [pc, #252]	; (8001168 <main+0x1a0>)
 800106c:	f007 fc82 	bl	8008974 <puts>
	  return -1;
 8001070:	f04f 33ff 	mov.w	r3, #4294967295
 8001074:	e065      	b.n	8001142 <main+0x17a>
  }


  /************* TESTING FOR DCT4 **********************/

  if (HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter0, recordingBuffer, RECORDING_BUFLEN) != HAL_OK) {
 8001076:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 800107a:	4937      	ldr	r1, [pc, #220]	; (8001158 <main+0x190>)
 800107c:	483b      	ldr	r0, [pc, #236]	; (800116c <main+0x1a4>)
 800107e:	f001 ff9b 	bl	8002fb8 <HAL_DFSDM_FilterRegularStart_DMA>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d002      	beq.n	800108e <main+0xc6>
	  printf("Failed to start DFSDM\r\n");
 8001088:	4839      	ldr	r0, [pc, #228]	; (8001170 <main+0x1a8>)
 800108a:	f007 fc73 	bl	8008974 <puts>
  }
  while (!DFSDM_finished) {
 800108e:	bf00      	nop
 8001090:	4b38      	ldr	r3, [pc, #224]	; (8001174 <main+0x1ac>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	b2db      	uxtb	r3, r3
 8001096:	2b00      	cmp	r3, #0
 8001098:	d0fa      	beq.n	8001090 <main+0xc8>
  }
  DFSDM_finished = false;
 800109a:	4b36      	ldr	r3, [pc, #216]	; (8001174 <main+0x1ac>)
 800109c:	2200      	movs	r2, #0
 800109e:	701a      	strb	r2, [r3, #0]
  HAL_DFSDM_FilterRegularStop_DMA(&hdfsdm1_filter0); //  this is necessary
 80010a0:	4832      	ldr	r0, [pc, #200]	; (800116c <main+0x1a4>)
 80010a2:	f002 f80b 	bl	80030bc <HAL_DFSDM_FilterRegularStop_DMA>
  memcpy(play, recordingBuffer, RECORDING_BUFLEN);
 80010a6:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 80010aa:	492b      	ldr	r1, [pc, #172]	; (8001158 <main+0x190>)
 80010ac:	4832      	ldr	r0, [pc, #200]	; (8001178 <main+0x1b0>)
 80010ae:	f007 fdcf 	bl	8008c50 <memcpy>

  // go thru every block
  // convert original signal to DAC
  transformBufferToDAC(play, RECORDING_BUFLEN, true);
 80010b2:	2201      	movs	r2, #1
 80010b4:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 80010b8:	482f      	ldr	r0, [pc, #188]	; (8001178 <main+0x1b0>)
 80010ba:	f000 f865 	bl	8001188 <transformBufferToDAC>
  if (HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, play, RECORDING_BUFLEN, DAC_ALIGN_8B_R) != HAL_OK) {
 80010be:	2308      	movs	r3, #8
 80010c0:	9300      	str	r3, [sp, #0]
 80010c2:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80010c6:	4a2c      	ldr	r2, [pc, #176]	; (8001178 <main+0x1b0>)
 80010c8:	2100      	movs	r1, #0
 80010ca:	482c      	ldr	r0, [pc, #176]	; (800117c <main+0x1b4>)
 80010cc:	f001 fa98 	bl	8002600 <HAL_DAC_Start_DMA>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d002      	beq.n	80010dc <main+0x114>
	  printf("Failed to start DAC");
 80010d6:	482a      	ldr	r0, [pc, #168]	; (8001180 <main+0x1b8>)
 80010d8:	f007 fbe6 	bl	80088a8 <iprintf>
  }
  while(!DAC_finished) {
 80010dc:	bf00      	nop
 80010de:	4b29      	ldr	r3, [pc, #164]	; (8001184 <main+0x1bc>)
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d0fa      	beq.n	80010de <main+0x116>
  }
  DAC_finished = false;
 80010e8:	4b26      	ldr	r3, [pc, #152]	; (8001184 <main+0x1bc>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	701a      	strb	r2, [r3, #0]
  HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 80010ee:	2100      	movs	r1, #0
 80010f0:	4822      	ldr	r0, [pc, #136]	; (800117c <main+0x1b4>)
 80010f2:	f001 fb51 	bl	8002798 <HAL_DAC_Stop_DMA>
  for (int blockIdx = 0; blockIdx < RECORDING_BUFLEN/N_FFT; blockIdx++) {
 80010f6:	2300      	movs	r3, #0
 80010f8:	607b      	str	r3, [r7, #4]
 80010fa:	e00f      	b.n	800111c <main+0x154>
	  computeFFTBlock(blockIdx);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	b29b      	uxth	r3, r3
 8001100:	4618      	mov	r0, r3
 8001102:	f000 f8c9 	bl	8001298 <computeFFTBlock>
	  // sendingBuffer will contain result of computeFFTBlock
	  receiveFFTBlock(sendingBuffer, blockIdx, 500); // ASSUME THAT 500 is the maximum length containing information
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	b29b      	uxth	r3, r3
 800110a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800110e:	4619      	mov	r1, r3
 8001110:	4812      	ldr	r0, [pc, #72]	; (800115c <main+0x194>)
 8001112:	f000 fa03 	bl	800151c <receiveFFTBlock>
  for (int blockIdx = 0; blockIdx < RECORDING_BUFLEN/N_FFT; blockIdx++) {
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	3301      	adds	r3, #1
 800111a:	607b      	str	r3, [r7, #4]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2b27      	cmp	r3, #39	; 0x27
 8001120:	ddec      	ble.n	80010fc <main+0x134>
	  printf("%d ", play[i]);
  }
  */
  // play

  if (HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, play, RECORDING_BUFLEN, DAC_ALIGN_8B_R) != HAL_OK) {
 8001122:	2308      	movs	r3, #8
 8001124:	9300      	str	r3, [sp, #0]
 8001126:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800112a:	4a13      	ldr	r2, [pc, #76]	; (8001178 <main+0x1b0>)
 800112c:	2100      	movs	r1, #0
 800112e:	4813      	ldr	r0, [pc, #76]	; (800117c <main+0x1b4>)
 8001130:	f001 fa66 	bl	8002600 <HAL_DAC_Start_DMA>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d002      	beq.n	8001140 <main+0x178>
	  printf("Failed to start DAC");
 800113a:	4811      	ldr	r0, [pc, #68]	; (8001180 <main+0x1b8>)
 800113c:	f007 fbb4 	bl	80088a8 <iprintf>
  }
  //HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);

  while(true) {
 8001140:	e7fe      	b.n	8001140 <main+0x178>
			}
		}
   // }
    buttonPressed = false;
  }
}
 8001142:	4618      	mov	r0, r3
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	20000360 	.word	0x20000360
 8001150:	20050854 	.word	0x20050854
 8001154:	40013800 	.word	0x40013800
 8001158:	200003ac 	.word	0x200003ac
 800115c:	200503ac 	.word	0x200503ac
 8001160:	0800a830 	.word	0x0800a830
 8001164:	200507ac 	.word	0x200507ac
 8001168:	0800a85c 	.word	0x0800a85c
 800116c:	20000274 	.word	0x20000274
 8001170:	0800a878 	.word	0x0800a878
 8001174:	200507dd 	.word	0x200507dd
 8001178:	200283ac 	.word	0x200283ac
 800117c:	20000200 	.word	0x20000200
 8001180:	0800a890 	.word	0x0800a890
 8001184:	200507df 	.word	0x200507df

08001188 <transformBufferToDAC>:
}

/**
 * Transforms a buffer's values into valid DAC 8bit right aligned values
 */
void transformBufferToDAC(int32_t *buffer, uint32_t recording_buffer_length, uint8_t shift) {
 8001188:	b580      	push	{r7, lr}
 800118a:	b088      	sub	sp, #32
 800118c:	af00      	add	r7, sp, #0
 800118e:	60f8      	str	r0, [r7, #12]
 8001190:	60b9      	str	r1, [r7, #8]
 8001192:	4613      	mov	r3, r2
 8001194:	71fb      	strb	r3, [r7, #7]
	// need to map buffer values to 8bit right alligned values (uint8_t)
	// from experimentation (screaming at the board): min values tend to be -3000 and max seems to be ~1000
	const int16_t MAX_VAL = 1000;
 8001196:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800119a:	82fb      	strh	r3, [r7, #22]
	const int16_t MIN_VAL = -3000;
 800119c:	f24f 4348 	movw	r3, #62536	; 0xf448
 80011a0:	82bb      	strh	r3, [r7, #20]
	const float a = (255.0)/(MAX_VAL - MIN_VAL); // slope
 80011a2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80011a6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80011aa:	1ad3      	subs	r3, r2, r3
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff f9d1 	bl	8000554 <__aeabi_i2d>
 80011b2:	4602      	mov	r2, r0
 80011b4:	460b      	mov	r3, r1
 80011b6:	a136      	add	r1, pc, #216	; (adr r1, 8001290 <transformBufferToDAC+0x108>)
 80011b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80011bc:	f7ff fb5e 	bl	800087c <__aeabi_ddiv>
 80011c0:	4602      	mov	r2, r0
 80011c2:	460b      	mov	r3, r1
 80011c4:	4610      	mov	r0, r2
 80011c6:	4619      	mov	r1, r3
 80011c8:	f7ff fd06 	bl	8000bd8 <__aeabi_d2f>
 80011cc:	4603      	mov	r3, r0
 80011ce:	613b      	str	r3, [r7, #16]
	for (int i = 0; i < recording_buffer_length; i++) {
 80011d0:	2300      	movs	r3, #0
 80011d2:	61fb      	str	r3, [r7, #28]
 80011d4:	e051      	b.n	800127a <transformBufferToDAC+0xf2>
		int32_t val = buffer[i]; // 24-bit value
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	68fa      	ldr	r2, [r7, #12]
 80011dc:	4413      	add	r3, r2
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	61bb      	str	r3, [r7, #24]
		if (shift)
 80011e2:	79fb      	ldrb	r3, [r7, #7]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d002      	beq.n	80011ee <transformBufferToDAC+0x66>
			val = val >> 8; // remove this for LOUDER but MORE SCUFFED NOISE
 80011e8:	69bb      	ldr	r3, [r7, #24]
 80011ea:	121b      	asrs	r3, r3, #8
 80011ec:	61bb      	str	r3, [r7, #24]
		// clip buffer values to within [-MIN_VAL, MAX_VAL]
		if (val <= MIN_VAL) {
 80011ee:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80011f2:	69ba      	ldr	r2, [r7, #24]
 80011f4:	429a      	cmp	r2, r3
 80011f6:	dc02      	bgt.n	80011fe <transformBufferToDAC+0x76>
			val = MIN_VAL;
 80011f8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80011fc:	61bb      	str	r3, [r7, #24]
		}
		if (val >= MAX_VAL) {
 80011fe:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001202:	69ba      	ldr	r2, [r7, #24]
 8001204:	429a      	cmp	r2, r3
 8001206:	db02      	blt.n	800120e <transformBufferToDAC+0x86>
			val = MAX_VAL;
 8001208:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800120c:	61bb      	str	r3, [r7, #24]
		}
		// scale values up by [-MIN_VAL] to make sure no negatives
		if (MIN_VAL < 0) {
 800120e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001212:	2b00      	cmp	r3, #0
 8001214:	da04      	bge.n	8001220 <transformBufferToDAC+0x98>
			val += (-MIN_VAL);
 8001216:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800121a:	69ba      	ldr	r2, [r7, #24]
 800121c:	1ad3      	subs	r3, r2, r3
 800121e:	61bb      	str	r3, [r7, #24]
		}
		// now the range of val should be [0, MAX_VAL-MIN_VAL], apply linear function to get DAC val
		val = round(a*val);
 8001220:	69bb      	ldr	r3, [r7, #24]
 8001222:	ee07 3a90 	vmov	s15, r3
 8001226:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800122a:	edd7 7a04 	vldr	s15, [r7, #16]
 800122e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001232:	ee17 0a90 	vmov	r0, s15
 8001236:	f7ff f99f 	bl	8000578 <__aeabi_f2d>
 800123a:	4602      	mov	r2, r0
 800123c:	460b      	mov	r3, r1
 800123e:	ec43 2b10 	vmov	d0, r2, r3
 8001242:	f009 fa7b 	bl	800a73c <round>
 8001246:	ec53 2b10 	vmov	r2, r3, d0
 800124a:	4610      	mov	r0, r2
 800124c:	4619      	mov	r1, r3
 800124e:	f7ff fc9b 	bl	8000b88 <__aeabi_d2iz>
 8001252:	4603      	mov	r3, r0
 8001254:	61bb      	str	r3, [r7, #24]
		if (val >= 0 && val <= 255) {
 8001256:	69bb      	ldr	r3, [r7, #24]
 8001258:	2b00      	cmp	r3, #0
 800125a:	db09      	blt.n	8001270 <transformBufferToDAC+0xe8>
 800125c:	69bb      	ldr	r3, [r7, #24]
 800125e:	2bff      	cmp	r3, #255	; 0xff
 8001260:	dc06      	bgt.n	8001270 <transformBufferToDAC+0xe8>
			buffer[i]=val;
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	009b      	lsls	r3, r3, #2
 8001266:	68fa      	ldr	r2, [r7, #12]
 8001268:	4413      	add	r3, r2
 800126a:	69ba      	ldr	r2, [r7, #24]
 800126c:	601a      	str	r2, [r3, #0]
 800126e:	e001      	b.n	8001274 <transformBufferToDAC+0xec>
		} else {
			Error_Handler(); // should not happen
 8001270:	f000 fc22 	bl	8001ab8 <Error_Handler>
	for (int i = 0; i < recording_buffer_length; i++) {
 8001274:	69fb      	ldr	r3, [r7, #28]
 8001276:	3301      	adds	r3, #1
 8001278:	61fb      	str	r3, [r7, #28]
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	68ba      	ldr	r2, [r7, #8]
 800127e:	429a      	cmp	r2, r3
 8001280:	d8a9      	bhi.n	80011d6 <transformBufferToDAC+0x4e>
		}
	}
}
 8001282:	bf00      	nop
 8001284:	bf00      	nop
 8001286:	3720      	adds	r7, #32
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	f3af 8000 	nop.w
 8001290:	00000000 	.word	0x00000000
 8001294:	406fe000 	.word	0x406fe000

08001298 <computeFFTBlock>:
/**
 * Compute 2048 Point FFT on a block (given by blockIndex) of the recordingBuffer.
 * Filters out low magnitude freq. components (< FFT_THRESHOLD_MAG)
 * Transforms resulting FFT buffer into char array to be sent by Wi-Fi.
 */
void computeFFTBlock(uint16_t blockIndex) {
 8001298:	b590      	push	{r4, r7, lr}
 800129a:	f5ad 5d00 	sub.w	sp, sp, #8192	; 0x2000
 800129e:	b08b      	sub	sp, #44	; 0x2c
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	4602      	mov	r2, r0
 80012a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012a8:	f823 2c22 	strh.w	r2, [r3, #-34]
	if (arm_rfft_fast_init_f32(&S_RFFT_F, N_FFT) != ARM_MATH_SUCCESS) {
 80012ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012b0:	4892      	ldr	r0, [pc, #584]	; (80014fc <computeFFTBlock+0x264>)
 80012b2:	f005 fdad 	bl	8006e10 <arm_rfft_fast_init_f32>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d003      	beq.n	80012c4 <computeFFTBlock+0x2c>
		  printf("Could not initiate FFT \r\n");
 80012bc:	4890      	ldr	r0, [pc, #576]	; (8001500 <computeFFTBlock+0x268>)
 80012be:	f007 fb59 	bl	8008974 <puts>
		  return -1;
 80012c2:	e115      	b.n	80014f0 <computeFFTBlock+0x258>
	}

	if (arm_rfft_fast_init_f32(&S_RFFT_F_I, N_FFT) != ARM_MATH_SUCCESS) {
 80012c4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012c8:	488e      	ldr	r0, [pc, #568]	; (8001504 <computeFFTBlock+0x26c>)
 80012ca:	f005 fda1 	bl	8006e10 <arm_rfft_fast_init_f32>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d003      	beq.n	80012dc <computeFFTBlock+0x44>
		  printf("Could not initiate I_FFT \r\n");
 80012d4:	488c      	ldr	r0, [pc, #560]	; (8001508 <computeFFTBlock+0x270>)
 80012d6:	f007 fb4d 	bl	8008974 <puts>
		  return -1;
 80012da:	e109      	b.n	80014f0 <computeFFTBlock+0x258>
	}
	float fftInBuffer[N_FFT];
	float fftOutBuffer[N_FFT];
	//float dctCoeffs[N_DCT];
	//float pState[S_DCT4->N]; // this array serves as "cache" for the function DCT4
	uint16_t offset = blockIndex*SENDING_BUFLEN;
 80012dc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012e0:	f833 3c22 	ldrh.w	r3, [r3, #-34]
 80012e4:	029b      	lsls	r3, r3, #10
 80012e6:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 80012ea:	f102 021a 	add.w	r2, r2, #26
 80012ee:	8013      	strh	r3, [r2, #0]
		cur--;
		fftInBuffer[i] = cur;
		//printf("%f ", cur);
	}
	*/
	for (int i = 0; i < N_FFT; i++) {
 80012f0:	2300      	movs	r3, #0
 80012f2:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 80012f6:	f102 0224 	add.w	r2, r2, #36	; 0x24
 80012fa:	6013      	str	r3, [r2, #0]
 80012fc:	e02c      	b.n	8001358 <computeFFTBlock+0xc0>
		fftInBuffer[i] = (float) (recordingBuffer[offset+i]>>8);
 80012fe:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8001302:	f103 031a 	add.w	r3, r3, #26
 8001306:	881a      	ldrh	r2, [r3, #0]
 8001308:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800130c:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4413      	add	r3, r2
 8001314:	4a7d      	ldr	r2, [pc, #500]	; (800150c <computeFFTBlock+0x274>)
 8001316:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800131a:	121b      	asrs	r3, r3, #8
 800131c:	ee07 3a90 	vmov	s15, r3
 8001320:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001324:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001328:	f103 0308 	add.w	r3, r3, #8
 800132c:	461a      	mov	r2, r3
 800132e:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8001332:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	009b      	lsls	r3, r3, #2
 800133a:	4413      	add	r3, r2
 800133c:	3b1c      	subs	r3, #28
 800133e:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < N_FFT; i++) {
 8001342:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8001346:	f103 0324 	add.w	r3, r3, #36	; 0x24
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	3301      	adds	r3, #1
 800134e:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8001352:	f102 0224 	add.w	r2, r2, #36	; 0x24
 8001356:	6013      	str	r3, [r2, #0]
 8001358:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800135c:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001366:	dbca      	blt.n	80012fe <computeFFTBlock+0x66>
		//printf("%d ", (recordingBuffer[offset+i]>>8));
	}

	// apply FFT
	arm_rfft_fast_f32(&S_RFFT_F, fftInBuffer, fftOutBuffer, 0);
 8001368:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800136c:	3a1c      	subs	r2, #28
 800136e:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 8001372:	f101 0108 	add.w	r1, r1, #8
 8001376:	391c      	subs	r1, #28
 8001378:	2300      	movs	r3, #0
 800137a:	4860      	ldr	r0, [pc, #384]	; (80014fc <computeFFTBlock+0x264>)
 800137c:	f005 fe2c 	bl	8006fd8 <arm_rfft_fast_f32>
	/*
	float min_f = MAXFLOAT;
	float max_f = -MAXFLOAT;
	*/
	// get rid of components whose amplitude is not very high
	for (int index = 0; index < N_FFT; index+=2) {
 8001380:	2300      	movs	r3, #0
 8001382:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8001386:	f102 0220 	add.w	r2, r2, #32
 800138a:	6013      	str	r3, [r2, #0]
 800138c:	e06d      	b.n	800146a <computeFFTBlock+0x1d2>
		float curReal = fftOutBuffer[index];
 800138e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001392:	461a      	mov	r2, r3
 8001394:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8001398:	f103 0320 	add.w	r3, r3, #32
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	009b      	lsls	r3, r3, #2
 80013a0:	4413      	add	r3, r2
 80013a2:	3b1c      	subs	r3, #28
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 80013aa:	f102 0214 	add.w	r2, r2, #20
 80013ae:	6013      	str	r3, [r2, #0]
		float curIm = fftOutBuffer[index+1];
 80013b0:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80013b4:	f103 0320 	add.w	r3, r3, #32
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	3301      	adds	r3, #1
 80013bc:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80013c0:	009b      	lsls	r3, r3, #2
 80013c2:	4413      	add	r3, r2
 80013c4:	3b1c      	subs	r3, #28
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 80013cc:	f102 0210 	add.w	r2, r2, #16
 80013d0:	6013      	str	r3, [r2, #0]
		float mag = curReal*curReal + curIm*curIm;
 80013d2:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80013d6:	f103 0314 	add.w	r3, r3, #20
 80013da:	edd3 7a00 	vldr	s15, [r3]
 80013de:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80013e2:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80013e6:	f103 0310 	add.w	r3, r3, #16
 80013ea:	edd3 7a00 	vldr	s15, [r3]
 80013ee:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80013f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013f6:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80013fa:	f103 030c 	add.w	r3, r3, #12
 80013fe:	edc3 7a00 	vstr	s15, [r3]
		if (mag < FFT_THRESHOLD_MAG*FFT_THRESHOLD_MAG) {
 8001402:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8001406:	f103 030c 	add.w	r3, r3, #12
 800140a:	edd3 7a00 	vldr	s15, [r3]
 800140e:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8001510 <computeFFTBlock+0x278>
 8001412:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001416:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800141a:	d51b      	bpl.n	8001454 <computeFFTBlock+0x1bc>
			fftOutBuffer[index] = 0;
 800141c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001420:	461a      	mov	r2, r3
 8001422:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8001426:	f103 0320 	add.w	r3, r3, #32
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	4413      	add	r3, r2
 8001430:	3b1c      	subs	r3, #28
 8001432:	f04f 0200 	mov.w	r2, #0
 8001436:	601a      	str	r2, [r3, #0]
			fftOutBuffer[index+1] = 0;
 8001438:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800143c:	f103 0320 	add.w	r3, r3, #32
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	3301      	adds	r3, #1
 8001444:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001448:	009b      	lsls	r3, r3, #2
 800144a:	4413      	add	r3, r2
 800144c:	3b1c      	subs	r3, #28
 800144e:	f04f 0200 	mov.w	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
	for (int index = 0; index < N_FFT; index+=2) {
 8001454:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8001458:	f103 0320 	add.w	r3, r3, #32
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	3302      	adds	r3, #2
 8001460:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8001464:	f102 0220 	add.w	r2, r2, #32
 8001468:	6013      	str	r3, [r2, #0]
 800146a:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800146e:	f103 0320 	add.w	r3, r3, #32
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001478:	db89      	blt.n	800138e <computeFFTBlock+0xf6>
		if (curIm > max_f)
			max_f = curIm;
		*/
	}
	/* Weird pointer trick to store floats inside of a char array, this is needed for wifi */
	for (int i = 0; i < SENDING_BUFLEN; i++) {
 800147a:	2300      	movs	r3, #0
 800147c:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8001480:	f102 021c 	add.w	r2, r2, #28
 8001484:	6013      	str	r3, [r2, #0]
 8001486:	e01e      	b.n	80014c6 <computeFFTBlock+0x22e>
		sendingBuffer[i] = ((uint8_t*)fftOutBuffer)[i];
 8001488:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800148c:	f103 031c 	add.w	r3, r3, #28
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001496:	3b1c      	subs	r3, #28
 8001498:	4413      	add	r3, r2
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	b259      	sxtb	r1, r3
 800149e:	4a1d      	ldr	r2, [pc, #116]	; (8001514 <computeFFTBlock+0x27c>)
 80014a0:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80014a4:	f103 031c 	add.w	r3, r3, #28
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4413      	add	r3, r2
 80014ac:	460a      	mov	r2, r1
 80014ae:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < SENDING_BUFLEN; i++) {
 80014b0:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80014b4:	f103 031c 	add.w	r3, r3, #28
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	3301      	adds	r3, #1
 80014bc:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 80014c0:	f102 021c 	add.w	r2, r2, #28
 80014c4:	6013      	str	r3, [r2, #0]
 80014c6:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80014ca:	f103 031c 	add.w	r3, r3, #28
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014d4:	dbd8      	blt.n	8001488 <computeFFTBlock+0x1f0>
	for (int i = 0; i<SENDING_BUFLEN; i++) {
		printf("%d ", sendingBuffer[i]);
	}
	*/

	printf("\r\n Length of fftOutBuffer for index %d: %d\r\n", blockIndex, strlen((char*)sendingBuffer));
 80014d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014da:	f833 4c22 	ldrh.w	r4, [r3, #-34]
 80014de:	480d      	ldr	r0, [pc, #52]	; (8001514 <computeFFTBlock+0x27c>)
 80014e0:	f7fe fede 	bl	80002a0 <strlen>
 80014e4:	4603      	mov	r3, r0
 80014e6:	461a      	mov	r2, r3
 80014e8:	4621      	mov	r1, r4
 80014ea:	480b      	ldr	r0, [pc, #44]	; (8001518 <computeFFTBlock+0x280>)
 80014ec:	f007 f9dc 	bl	80088a8 <iprintf>
	for (int i = 0; i < N_FFT; i++) {
		printf("%f ", fftOutBuffer[i]);
	}
	*/

}
 80014f0:	f507 5700 	add.w	r7, r7, #8192	; 0x2000
 80014f4:	372c      	adds	r7, #44	; 0x2c
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd90      	pop	{r4, r7, pc}
 80014fa:	bf00      	nop
 80014fc:	200507ac 	.word	0x200507ac
 8001500:	0800a85c 	.word	0x0800a85c
 8001504:	200507c4 	.word	0x200507c4
 8001508:	0800aabc 	.word	0x0800aabc
 800150c:	200003ac 	.word	0x200003ac
 8001510:	48742400 	.word	0x48742400
 8001514:	200503ac 	.word	0x200503ac
 8001518:	0800aad8 	.word	0x0800aad8

0800151c <receiveFFTBlock>:
 * Convert the q7_t values in resp to float32_t using arm_q7_to_float.
 * Apply inverse FFT
 * Rescale values to be in [0, 255] range and int32_t
 * Store these values in the right place given the blockIndex in the play buffer
 */
static void receiveFFTBlock(q7_t *resp, uint16_t blockIndex, uint16_t respLen) {
 800151c:	b580      	push	{r7, lr}
 800151e:	f5ad 5d00 	sub.w	sp, sp, #8192	; 0x2000
 8001522:	b086      	sub	sp, #24
 8001524:	af00      	add	r7, sp, #0
 8001526:	f107 0318 	add.w	r3, r7, #24
 800152a:	f843 0c14 	str.w	r0, [r3, #-20]
 800152e:	4608      	mov	r0, r1
 8001530:	4611      	mov	r1, r2
 8001532:	f107 0318 	add.w	r3, r7, #24
 8001536:	4602      	mov	r2, r0
 8001538:	f823 2c16 	strh.w	r2, [r3, #-22]
 800153c:	f107 0318 	add.w	r3, r7, #24
 8001540:	460a      	mov	r2, r1
 8001542:	f823 2c18 	strh.w	r2, [r3, #-24]
	/* STEP 1: Perform Inverse FFT */
	float ifftInputBuf[N_FFT];
	float ifftOutputBuf[N_FFT];
	memset(ifftInputBuf, 0, N_FFT*sizeof(float)); //SETS everything to 0 since resp has a SMALLER length then ifftInputBuf
 8001546:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800154a:	f103 0318 	add.w	r3, r3, #24
 800154e:	3b0c      	subs	r3, #12
 8001550:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001554:	2100      	movs	r1, #0
 8001556:	4618      	mov	r0, r3
 8001558:	f007 faec 	bl	8008b34 <memset>
	//arm_q7_to_float(resp, ifftInputBuf, respLen);

	/* Weird pointer trick to convert char array back into floats, divide by 4 because each float contains 4 chars */
	for (int i = 0; i < respLen/4; i++) {
 800155c:	2300      	movs	r3, #0
 800155e:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8001562:	f102 0214 	add.w	r2, r2, #20
 8001566:	6013      	str	r3, [r2, #0]
 8001568:	e024      	b.n	80015b4 <receiveFFTBlock+0x98>
		ifftInputBuf[i] = ((float*)resp)[i];
 800156a:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800156e:	f103 0314 	add.w	r3, r3, #20
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	009b      	lsls	r3, r3, #2
 8001576:	f107 0218 	add.w	r2, r7, #24
 800157a:	f852 2c14 	ldr.w	r2, [r2, #-20]
 800157e:	4413      	add	r3, r2
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001586:	f103 0318 	add.w	r3, r3, #24
 800158a:	4619      	mov	r1, r3
 800158c:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8001590:	f103 0314 	add.w	r3, r3, #20
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	440b      	add	r3, r1
 800159a:	3b0c      	subs	r3, #12
 800159c:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < respLen/4; i++) {
 800159e:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80015a2:	f103 0314 	add.w	r3, r3, #20
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	3301      	adds	r3, #1
 80015aa:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 80015ae:	f102 0214 	add.w	r2, r2, #20
 80015b2:	6013      	str	r3, [r2, #0]
 80015b4:	f107 0318 	add.w	r3, r7, #24
 80015b8:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80015bc:	089b      	lsrs	r3, r3, #2
 80015be:	b29b      	uxth	r3, r3
 80015c0:	461a      	mov	r2, r3
 80015c2:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80015c6:	f103 0314 	add.w	r3, r3, #20
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4293      	cmp	r3, r2
 80015ce:	dbcc      	blt.n	800156a <receiveFFTBlock+0x4e>
	}
	/* Now ifftInputBuf should contain the values in resp along with a long string of zeroes  */
	if (arm_rfft_fast_init_f32(&S_RFFT_F_I, N_FFT) != ARM_MATH_SUCCESS) {
 80015d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015d4:	4838      	ldr	r0, [pc, #224]	; (80016b8 <receiveFFTBlock+0x19c>)
 80015d6:	f005 fc1b 	bl	8006e10 <arm_rfft_fast_init_f32>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d003      	beq.n	80015e8 <receiveFFTBlock+0xcc>
		printf("ERROR: Couldn't initialize FFT instance \r\n");
 80015e0:	4836      	ldr	r0, [pc, #216]	; (80016bc <receiveFFTBlock+0x1a0>)
 80015e2:	f007 f9c7 	bl	8008974 <puts>
 80015e6:	e062      	b.n	80016ae <receiveFFTBlock+0x192>
	for (int i = 0; i < N_FFT; i++) {
		ifftInputBuf[i] *= scaleFactor;
	}
	*/
	/* The last argument to indicate that we want an inverse FFT */
	arm_rfft_fast_f32(&S_RFFT_F_I, ifftInputBuf, ifftOutputBuf, true);
 80015e8:	f107 0218 	add.w	r2, r7, #24
 80015ec:	3a0c      	subs	r2, #12
 80015ee:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 80015f2:	f101 0118 	add.w	r1, r1, #24
 80015f6:	390c      	subs	r1, #12
 80015f8:	2301      	movs	r3, #1
 80015fa:	482f      	ldr	r0, [pc, #188]	; (80016b8 <receiveFFTBlock+0x19c>)
 80015fc:	f005 fcec 	bl	8006fd8 <arm_rfft_fast_f32>
	} else {
		printf("ERROR: Unexpected division by zero in receiveFFTBlock \r\n");
		return;
	}
	*/
	uint16_t offset = blockIndex*N_FFT;
 8001600:	f107 0318 	add.w	r3, r7, #24
 8001604:	f833 3c16 	ldrh.w	r3, [r3, #-22]
 8001608:	029b      	lsls	r3, r3, #10
 800160a:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800160e:	f102 020e 	add.w	r2, r2, #14
 8001612:	8013      	strh	r3, [r2, #0]
	for (int i = 0; i < N_FFT; i++) {
 8001614:	2300      	movs	r3, #0
 8001616:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800161a:	f102 0210 	add.w	r2, r2, #16
 800161e:	6013      	str	r3, [r2, #0]
 8001620:	e02f      	b.n	8001682 <receiveFFTBlock+0x166>
		play[offset+i] = (int32_t) roundf(ifftOutputBuf[i]);
 8001622:	f107 0318 	add.w	r3, r7, #24
 8001626:	461a      	mov	r2, r3
 8001628:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800162c:	f103 0310 	add.w	r3, r3, #16
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	4413      	add	r3, r2
 8001636:	3b0c      	subs	r3, #12
 8001638:	edd3 7a00 	vldr	s15, [r3]
 800163c:	eeb0 0a67 	vmov.f32	s0, s15
 8001640:	f009 f8c4 	bl	800a7cc <roundf>
 8001644:	eef0 7a40 	vmov.f32	s15, s0
 8001648:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800164c:	f103 030e 	add.w	r3, r3, #14
 8001650:	881a      	ldrh	r2, [r3, #0]
 8001652:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8001656:	f103 0310 	add.w	r3, r3, #16
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4413      	add	r3, r2
 800165e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001662:	ee17 1a90 	vmov	r1, s15
 8001666:	4a16      	ldr	r2, [pc, #88]	; (80016c0 <receiveFFTBlock+0x1a4>)
 8001668:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < N_FFT; i++) {
 800166c:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8001670:	f103 0310 	add.w	r3, r3, #16
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	3301      	adds	r3, #1
 8001678:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800167c:	f102 0210 	add.w	r2, r2, #16
 8001680:	6013      	str	r3, [r2, #0]
 8001682:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8001686:	f103 0310 	add.w	r3, r3, #16
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001690:	dbc7      	blt.n	8001622 <receiveFFTBlock+0x106>
	}
	transformBufferToDAC(play+offset, N_FFT, false);
 8001692:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8001696:	f103 030e 	add.w	r3, r3, #14
 800169a:	881b      	ldrh	r3, [r3, #0]
 800169c:	009b      	lsls	r3, r3, #2
 800169e:	4a08      	ldr	r2, [pc, #32]	; (80016c0 <receiveFFTBlock+0x1a4>)
 80016a0:	4413      	add	r3, r2
 80016a2:	2200      	movs	r2, #0
 80016a4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7ff fd6d 	bl	8001188 <transformBufferToDAC>
//		cur = cur - min_f;
		/*[0, maximum-minimum] -> [0, 255]*/
//		cur = cur * scalingFactor;
//		play[offset+i] = (int32_t) roundf(cur);
//	}
}
 80016ae:	f507 5700 	add.w	r7, r7, #8192	; 0x2000
 80016b2:	3718      	adds	r7, #24
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	200507c4 	.word	0x200507c4
 80016bc:	0800ab08 	.word	0x0800ab08
 80016c0:	200283ac 	.word	0x200283ac

080016c4 <SystemClock_Config>:
  *            Flash Latency(WS)              = 4
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b096      	sub	sp, #88	; 0x58
 80016c8:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  /* MSI is enabled after System reset, activate PLL with MSI as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80016ca:	2310      	movs	r3, #16
 80016cc:	603b      	str	r3, [r7, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80016ce:	2301      	movs	r3, #1
 80016d0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80016d2:	2360      	movs	r3, #96	; 0x60
 80016d4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80016d6:	2300      	movs	r3, #0
 80016d8:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016da:	2302      	movs	r3, #2
 80016dc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80016de:	2301      	movs	r3, #1
 80016e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80016e2:	2301      	movs	r3, #1
 80016e4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLN = 40;
 80016e6:	2328      	movs	r3, #40	; 0x28
 80016e8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLR = 2;
 80016ea:	2302      	movs	r3, #2
 80016ec:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = 7;
 80016ee:	2307      	movs	r3, #7
 80016f0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80016f2:	2304      	movs	r3, #4
 80016f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016f6:	463b      	mov	r3, r7
 80016f8:	4618      	mov	r0, r3
 80016fa:	f002 fb1f 	bl	8003d3c <HAL_RCC_OscConfig>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d000      	beq.n	8001706 <SystemClock_Config+0x42>
  {
    /* Initialization Error */
    while(1);
 8001704:	e7fe      	b.n	8001704 <SystemClock_Config+0x40>
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8001706:	230f      	movs	r3, #15
 8001708:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800170a:	2303      	movs	r3, #3
 800170c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800170e:	2300      	movs	r3, #0
 8001710:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001712:	2300      	movs	r3, #0
 8001714:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001716:	2300      	movs	r3, #0
 8001718:	657b      	str	r3, [r7, #84]	; 0x54
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800171a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800171e:	2104      	movs	r1, #4
 8001720:	4618      	mov	r0, r3
 8001722:	f002 ff25 	bl	8004570 <HAL_RCC_ClockConfig>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d000      	beq.n	800172e <SystemClock_Config+0x6a>
  {
    /* Initialization Error */
    while(1);
 800172c:	e7fe      	b.n	800172c <SystemClock_Config+0x68>
  }
}
 800172e:	bf00      	nop
 8001730:	3758      	adds	r7, #88	; 0x58
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
	...

08001738 <MX_GPIO_Init>:
static void MX_GPIO_Init(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b086      	sub	sp, #24
 800173c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800173e:	1d3b      	adds	r3, r7, #4
 8001740:	2200      	movs	r2, #0
 8001742:	601a      	str	r2, [r3, #0]
 8001744:	605a      	str	r2, [r3, #4]
 8001746:	609a      	str	r2, [r3, #8]
 8001748:	60da      	str	r2, [r3, #12]
 800174a:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800174c:	4b12      	ldr	r3, [pc, #72]	; (8001798 <MX_GPIO_Init+0x60>)
 800174e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001750:	4a11      	ldr	r2, [pc, #68]	; (8001798 <MX_GPIO_Init+0x60>)
 8001752:	f043 0304 	orr.w	r3, r3, #4
 8001756:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001758:	4b0f      	ldr	r3, [pc, #60]	; (8001798 <MX_GPIO_Init+0x60>)
 800175a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800175c:	f003 0304 	and.w	r3, r3, #4
 8001760:	603b      	str	r3, [r7, #0]
 8001762:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001764:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001768:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800176a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800176e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001770:	2300      	movs	r3, #0
 8001772:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001774:	1d3b      	adds	r3, r7, #4
 8001776:	4619      	mov	r1, r3
 8001778:	4808      	ldr	r0, [pc, #32]	; (800179c <MX_GPIO_Init+0x64>)
 800177a:	f002 f915 	bl	80039a8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800177e:	2200      	movs	r2, #0
 8001780:	2100      	movs	r1, #0
 8001782:	2028      	movs	r0, #40	; 0x28
 8001784:	f000 fee3 	bl	800254e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001788:	2028      	movs	r0, #40	; 0x28
 800178a:	f000 fefc 	bl	8002586 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800178e:	bf00      	nop
 8001790:	3718      	adds	r7, #24
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	40021000 	.word	0x40021000
 800179c:	48000800 	.word	0x48000800

080017a0 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&hDiscoUart, (uint8_t *)&ch, 1, 0xFFFF);
 80017a8:	1d39      	adds	r1, r7, #4
 80017aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017ae:	2201      	movs	r2, #1
 80017b0:	4803      	ldr	r0, [pc, #12]	; (80017c0 <__io_putchar+0x20>)
 80017b2:	f004 fcbf 	bl	8006134 <HAL_UART_Transmit>

  return ch;
 80017b6:	687b      	ldr	r3, [r7, #4]
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	3708      	adds	r7, #8
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	20050854 	.word	0x20050854

080017c4 <MX_DAC1_Init>:
}

#endif

static void MX_DAC1_Init(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b08a      	sub	sp, #40	; 0x28
 80017c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80017ca:	463b      	mov	r3, r7
 80017cc:	2228      	movs	r2, #40	; 0x28
 80017ce:	2100      	movs	r1, #0
 80017d0:	4618      	mov	r0, r3
 80017d2:	f007 f9af 	bl	8008b34 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80017d6:	4b1a      	ldr	r3, [pc, #104]	; (8001840 <MX_DAC1_Init+0x7c>)
 80017d8:	4a1a      	ldr	r2, [pc, #104]	; (8001844 <MX_DAC1_Init+0x80>)
 80017da:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80017dc:	4818      	ldr	r0, [pc, #96]	; (8001840 <MX_DAC1_Init+0x7c>)
 80017de:	f000 feec 	bl	80025ba <HAL_DAC_Init>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d001      	beq.n	80017ec <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80017e8:	f000 f966 	bl	8001ab8 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80017ec:	2300      	movs	r3, #0
 80017ee:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 80017f0:	230a      	movs	r3, #10
 80017f2:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80017f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80017f8:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80017fa:	2300      	movs	r3, #0
 80017fc:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80017fe:	2300      	movs	r3, #0
 8001800:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001802:	2300      	movs	r3, #0
 8001804:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001806:	463b      	mov	r3, r7
 8001808:	2200      	movs	r2, #0
 800180a:	4619      	mov	r1, r3
 800180c:	480c      	ldr	r0, [pc, #48]	; (8001840 <MX_DAC1_Init+0x7c>)
 800180e:	f001 f81d 	bl	800284c <HAL_DAC_ConfigChannel>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d001      	beq.n	800181c <MX_DAC1_Init+0x58>
  {
    Error_Handler();
 8001818:	f000 f94e 	bl	8001ab8 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800181c:	2300      	movs	r3, #0
 800181e:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001820:	463b      	mov	r3, r7
 8001822:	2210      	movs	r2, #16
 8001824:	4619      	mov	r1, r3
 8001826:	4806      	ldr	r0, [pc, #24]	; (8001840 <MX_DAC1_Init+0x7c>)
 8001828:	f001 f810 	bl	800284c <HAL_DAC_ConfigChannel>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d001      	beq.n	8001836 <MX_DAC1_Init+0x72>
  {
    Error_Handler();
 8001832:	f000 f941 	bl	8001ab8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001836:	bf00      	nop
 8001838:	3728      	adds	r7, #40	; 0x28
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	20000200 	.word	0x20000200
 8001844:	40007400 	.word	0x40007400

08001848 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 800184c:	4b2b      	ldr	r3, [pc, #172]	; (80018fc <MX_DFSDM1_Init+0xb4>)
 800184e:	4a2c      	ldr	r2, [pc, #176]	; (8001900 <MX_DFSDM1_Init+0xb8>)
 8001850:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 8001852:	4b2a      	ldr	r3, [pc, #168]	; (80018fc <MX_DFSDM1_Init+0xb4>)
 8001854:	2200      	movs	r2, #0
 8001856:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 8001858:	4b28      	ldr	r3, [pc, #160]	; (80018fc <MX_DFSDM1_Init+0xb4>)
 800185a:	2201      	movs	r2, #1
 800185c:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 800185e:	4b27      	ldr	r3, [pc, #156]	; (80018fc <MX_DFSDM1_Init+0xb4>)
 8001860:	2201      	movs	r2, #1
 8001862:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_FASTSINC_ORDER;
 8001864:	4b25      	ldr	r3, [pc, #148]	; (80018fc <MX_DFSDM1_Init+0xb4>)
 8001866:	2200      	movs	r2, #0
 8001868:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 100;
 800186a:	4b24      	ldr	r3, [pc, #144]	; (80018fc <MX_DFSDM1_Init+0xb4>)
 800186c:	2264      	movs	r2, #100	; 0x64
 800186e:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 8001870:	4b22      	ldr	r3, [pc, #136]	; (80018fc <MX_DFSDM1_Init+0xb4>)
 8001872:	2201      	movs	r2, #1
 8001874:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter0) != HAL_OK)
 8001876:	4821      	ldr	r0, [pc, #132]	; (80018fc <MX_DFSDM1_Init+0xb4>)
 8001878:	f001 fa7e 	bl	8002d78 <HAL_DFSDM_FilterInit>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <MX_DFSDM1_Init+0x3e>
  {
    Error_Handler();
 8001882:	f000 f919 	bl	8001ab8 <Error_Handler>
  }
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 8001886:	4b1f      	ldr	r3, [pc, #124]	; (8001904 <MX_DFSDM1_Init+0xbc>)
 8001888:	4a1f      	ldr	r2, [pc, #124]	; (8001908 <MX_DFSDM1_Init+0xc0>)
 800188a:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 800188c:	4b1d      	ldr	r3, [pc, #116]	; (8001904 <MX_DFSDM1_Init+0xbc>)
 800188e:	2201      	movs	r2, #1
 8001890:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8001892:	4b1c      	ldr	r3, [pc, #112]	; (8001904 <MX_DFSDM1_Init+0xbc>)
 8001894:	2200      	movs	r2, #0
 8001896:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 50*SAMPLING_RATE_FACTOR; // CHANGED FROM 50 to 100 so that SAMPLING RATE IS 10K
 8001898:	4b1a      	ldr	r3, [pc, #104]	; (8001904 <MX_DFSDM1_Init+0xbc>)
 800189a:	2264      	movs	r2, #100	; 0x64
 800189c:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 800189e:	4b19      	ldr	r3, [pc, #100]	; (8001904 <MX_DFSDM1_Init+0xbc>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80018a4:	4b17      	ldr	r3, [pc, #92]	; (8001904 <MX_DFSDM1_Init+0xbc>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 80018aa:	4b16      	ldr	r3, [pc, #88]	; (8001904 <MX_DFSDM1_Init+0xbc>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80018b0:	4b14      	ldr	r3, [pc, #80]	; (8001904 <MX_DFSDM1_Init+0xbc>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80018b6:	4b13      	ldr	r3, [pc, #76]	; (8001904 <MX_DFSDM1_Init+0xbc>)
 80018b8:	2204      	movs	r2, #4
 80018ba:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80018bc:	4b11      	ldr	r3, [pc, #68]	; (8001904 <MX_DFSDM1_Init+0xbc>)
 80018be:	2200      	movs	r2, #0
 80018c0:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 80018c2:	4b10      	ldr	r3, [pc, #64]	; (8001904 <MX_DFSDM1_Init+0xbc>)
 80018c4:	2201      	movs	r2, #1
 80018c6:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 80018c8:	4b0e      	ldr	r3, [pc, #56]	; (8001904 <MX_DFSDM1_Init+0xbc>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 80018ce:	4b0d      	ldr	r3, [pc, #52]	; (8001904 <MX_DFSDM1_Init+0xbc>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 80018d4:	480b      	ldr	r0, [pc, #44]	; (8001904 <MX_DFSDM1_Init+0xbc>)
 80018d6:	f001 f98f 	bl	8002bf8 <HAL_DFSDM_ChannelInit>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d001      	beq.n	80018e4 <MX_DFSDM1_Init+0x9c>
  {
    Error_Handler();
 80018e0:	f000 f8ea 	bl	8001ab8 <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_2, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 80018e4:	2201      	movs	r2, #1
 80018e6:	4909      	ldr	r1, [pc, #36]	; (800190c <MX_DFSDM1_Init+0xc4>)
 80018e8:	4804      	ldr	r0, [pc, #16]	; (80018fc <MX_DFSDM1_Init+0xb4>)
 80018ea:	f001 fb1f 	bl	8002f2c <HAL_DFSDM_FilterConfigRegChannel>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d001      	beq.n	80018f8 <MX_DFSDM1_Init+0xb0>
  {
    Error_Handler();
 80018f4:	f000 f8e0 	bl	8001ab8 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80018f8:	bf00      	nop
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	20000274 	.word	0x20000274
 8001900:	40016100 	.word	0x40016100
 8001904:	200002c8 	.word	0x200002c8
 8001908:	40016040 	.word	0x40016040
 800190c:	00020004 	.word	0x00020004

08001910 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b088      	sub	sp, #32
 8001914:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001916:	f107 0310 	add.w	r3, r7, #16
 800191a:	2200      	movs	r2, #0
 800191c:	601a      	str	r2, [r3, #0]
 800191e:	605a      	str	r2, [r3, #4]
 8001920:	609a      	str	r2, [r3, #8]
 8001922:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001924:	1d3b      	adds	r3, r7, #4
 8001926:	2200      	movs	r2, #0
 8001928:	601a      	str	r2, [r3, #0]
 800192a:	605a      	str	r2, [r3, #4]
 800192c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800192e:	4b1e      	ldr	r3, [pc, #120]	; (80019a8 <MX_TIM2_Init+0x98>)
 8001930:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001934:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001936:	4b1c      	ldr	r3, [pc, #112]	; (80019a8 <MX_TIM2_Init+0x98>)
 8001938:	2200      	movs	r2, #0
 800193a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800193c:	4b1a      	ldr	r3, [pc, #104]	; (80019a8 <MX_TIM2_Init+0x98>)
 800193e:	2200      	movs	r2, #0
 8001940:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5000*SAMPLING_RATE_FACTOR;
 8001942:	4b19      	ldr	r3, [pc, #100]	; (80019a8 <MX_TIM2_Init+0x98>)
 8001944:	f242 7210 	movw	r2, #10000	; 0x2710
 8001948:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800194a:	4b17      	ldr	r3, [pc, #92]	; (80019a8 <MX_TIM2_Init+0x98>)
 800194c:	2200      	movs	r2, #0
 800194e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001950:	4b15      	ldr	r3, [pc, #84]	; (80019a8 <MX_TIM2_Init+0x98>)
 8001952:	2200      	movs	r2, #0
 8001954:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001956:	4814      	ldr	r0, [pc, #80]	; (80019a8 <MX_TIM2_Init+0x98>)
 8001958:	f003 fef3 	bl	8005742 <HAL_TIM_Base_Init>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001962:	f000 f8a9 	bl	8001ab8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001966:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800196a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800196c:	f107 0310 	add.w	r3, r7, #16
 8001970:	4619      	mov	r1, r3
 8001972:	480d      	ldr	r0, [pc, #52]	; (80019a8 <MX_TIM2_Init+0x98>)
 8001974:	f004 f8ae 	bl	8005ad4 <HAL_TIM_ConfigClockSource>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800197e:	f000 f89b 	bl	8001ab8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001982:	2320      	movs	r3, #32
 8001984:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001986:	2300      	movs	r3, #0
 8001988:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800198a:	1d3b      	adds	r3, r7, #4
 800198c:	4619      	mov	r1, r3
 800198e:	4806      	ldr	r0, [pc, #24]	; (80019a8 <MX_TIM2_Init+0x98>)
 8001990:	f004 fad0 	bl	8005f34 <HAL_TIMEx_MasterConfigSynchronization>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800199a:	f000 f88d 	bl	8001ab8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800199e:	bf00      	nop
 80019a0:	3720      	adds	r7, #32
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	20000360 	.word	0x20000360

080019ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80019b2:	4b16      	ldr	r3, [pc, #88]	; (8001a0c <MX_DMA_Init+0x60>)
 80019b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019b6:	4a15      	ldr	r2, [pc, #84]	; (8001a0c <MX_DMA_Init+0x60>)
 80019b8:	f043 0304 	orr.w	r3, r3, #4
 80019bc:	6493      	str	r3, [r2, #72]	; 0x48
 80019be:	4b13      	ldr	r3, [pc, #76]	; (8001a0c <MX_DMA_Init+0x60>)
 80019c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019c2:	f003 0304 	and.w	r3, r3, #4
 80019c6:	607b      	str	r3, [r7, #4]
 80019c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80019ca:	4b10      	ldr	r3, [pc, #64]	; (8001a0c <MX_DMA_Init+0x60>)
 80019cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019ce:	4a0f      	ldr	r2, [pc, #60]	; (8001a0c <MX_DMA_Init+0x60>)
 80019d0:	f043 0301 	orr.w	r3, r3, #1
 80019d4:	6493      	str	r3, [r2, #72]	; 0x48
 80019d6:	4b0d      	ldr	r3, [pc, #52]	; (8001a0c <MX_DMA_Init+0x60>)
 80019d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019da:	f003 0301 	and.w	r3, r3, #1
 80019de:	603b      	str	r3, [r7, #0]
 80019e0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80019e2:	2200      	movs	r2, #0
 80019e4:	2100      	movs	r1, #0
 80019e6:	200b      	movs	r0, #11
 80019e8:	f000 fdb1 	bl	800254e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80019ec:	200b      	movs	r0, #11
 80019ee:	f000 fdca 	bl	8002586 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80019f2:	2200      	movs	r2, #0
 80019f4:	2100      	movs	r1, #0
 80019f6:	200c      	movs	r0, #12
 80019f8:	f000 fda9 	bl	800254e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80019fc:	200c      	movs	r0, #12
 80019fe:	f000 fdc2 	bl	8002586 <HAL_NVIC_EnableIRQ>

}
 8001a02:	bf00      	nop
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	40021000 	.word	0x40021000

08001a10 <HAL_GPIO_EXTI_Callback>:
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	4603      	mov	r3, r0
 8001a18:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 8001a1a:	88fb      	ldrh	r3, [r7, #6]
 8001a1c:	2b02      	cmp	r3, #2
 8001a1e:	d003      	beq.n	8001a28 <HAL_GPIO_EXTI_Callback+0x18>
 8001a20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a24:	d003      	beq.n	8001a2e <HAL_GPIO_EXTI_Callback+0x1e>
      buttonPressed=1;
        break;
     }
    default:
    {
      break;
 8001a26:	e006      	b.n	8001a36 <HAL_GPIO_EXTI_Callback+0x26>
      SPI_WIFI_ISR();
 8001a28:	f000 fb72 	bl	8002110 <SPI_WIFI_ISR>
      break;
 8001a2c:	e003      	b.n	8001a36 <HAL_GPIO_EXTI_Callback+0x26>
      buttonPressed=1;
 8001a2e:	4b04      	ldr	r3, [pc, #16]	; (8001a40 <HAL_GPIO_EXTI_Callback+0x30>)
 8001a30:	2201      	movs	r2, #1
 8001a32:	701a      	strb	r2, [r3, #0]
        break;
 8001a34:	bf00      	nop
    }
  }
}
 8001a36:	bf00      	nop
 8001a38:	3708      	adds	r7, #8
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	200507de 	.word	0x200507de

08001a44 <HAL_DFSDM_FilterRegConvCpltCallback>:
    {
     buttonPressed=true;
    }
}*/

void HAL_DFSDM_FilterRegConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter) {
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
	DFSDM_finished = true;
 8001a4c:	4b04      	ldr	r3, [pc, #16]	; (8001a60 <HAL_DFSDM_FilterRegConvCpltCallback+0x1c>)
 8001a4e:	2201      	movs	r2, #1
 8001a50:	701a      	strb	r2, [r3, #0]
}
 8001a52:	bf00      	nop
 8001a54:	370c      	adds	r7, #12
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	200507dd 	.word	0x200507dd

08001a64 <HAL_DFSDM_FilterRegConvHalfCpltCallback>:

void HAL_DFSDM_FilterRegConvHalfCpltCallback (DFSDM_Filter_HandleTypeDef * hdfsdm_filter) {
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
	DFSDM_half_finished = true;
 8001a6c:	4b04      	ldr	r3, [pc, #16]	; (8001a80 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1c>)
 8001a6e:	2201      	movs	r2, #1
 8001a70:	701a      	strb	r2, [r3, #0]
}
 8001a72:	bf00      	nop
 8001a74:	370c      	adds	r7, #12
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	200507dc 	.word	0x200507dc

08001a84 <HAL_DAC_ConvCpltCallbackCh1>:

void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef * hdac) {
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
	DAC_finished = true;
 8001a8c:	4b04      	ldr	r3, [pc, #16]	; (8001aa0 <HAL_DAC_ConvCpltCallbackCh1+0x1c>)
 8001a8e:	2201      	movs	r2, #1
 8001a90:	701a      	strb	r2, [r3, #0]
}
 8001a92:	bf00      	nop
 8001a94:	370c      	adds	r7, #12
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop
 8001aa0:	200507df 	.word	0x200507df

08001aa4 <SPI3_IRQHandler>:
  * @brief  SPI3 line detection callback.
  * @param  None
  * @retval None
  */
void SPI3_IRQHandler(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
  HAL_SPI_IRQHandler(&hspi);
 8001aa8:	4802      	ldr	r0, [pc, #8]	; (8001ab4 <SPI3_IRQHandler+0x10>)
 8001aaa:	f003 fd37 	bl	800551c <HAL_SPI_IRQHandler>
}
 8001aae:	bf00      	nop
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	200507ec 	.word	0x200507ec

08001ab8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001abc:	b672      	cpsid	i
}
 8001abe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ac0:	e7fe      	b.n	8001ac0 <Error_Handler+0x8>
	...

08001ac4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aca:	4b0f      	ldr	r3, [pc, #60]	; (8001b08 <HAL_MspInit+0x44>)
 8001acc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ace:	4a0e      	ldr	r2, [pc, #56]	; (8001b08 <HAL_MspInit+0x44>)
 8001ad0:	f043 0301 	orr.w	r3, r3, #1
 8001ad4:	6613      	str	r3, [r2, #96]	; 0x60
 8001ad6:	4b0c      	ldr	r3, [pc, #48]	; (8001b08 <HAL_MspInit+0x44>)
 8001ad8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ada:	f003 0301 	and.w	r3, r3, #1
 8001ade:	607b      	str	r3, [r7, #4]
 8001ae0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ae2:	4b09      	ldr	r3, [pc, #36]	; (8001b08 <HAL_MspInit+0x44>)
 8001ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ae6:	4a08      	ldr	r2, [pc, #32]	; (8001b08 <HAL_MspInit+0x44>)
 8001ae8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aec:	6593      	str	r3, [r2, #88]	; 0x58
 8001aee:	4b06      	ldr	r3, [pc, #24]	; (8001b08 <HAL_MspInit+0x44>)
 8001af0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001af6:	603b      	str	r3, [r7, #0]
 8001af8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001afa:	bf00      	nop
 8001afc:	370c      	adds	r7, #12
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop
 8001b08:	40021000 	.word	0x40021000

08001b0c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b08a      	sub	sp, #40	; 0x28
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b14:	f107 0314 	add.w	r3, r7, #20
 8001b18:	2200      	movs	r2, #0
 8001b1a:	601a      	str	r2, [r3, #0]
 8001b1c:	605a      	str	r2, [r3, #4]
 8001b1e:	609a      	str	r2, [r3, #8]
 8001b20:	60da      	str	r2, [r3, #12]
 8001b22:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a2a      	ldr	r2, [pc, #168]	; (8001bd4 <HAL_DAC_MspInit+0xc8>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d14e      	bne.n	8001bcc <HAL_DAC_MspInit+0xc0>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001b2e:	4b2a      	ldr	r3, [pc, #168]	; (8001bd8 <HAL_DAC_MspInit+0xcc>)
 8001b30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b32:	4a29      	ldr	r2, [pc, #164]	; (8001bd8 <HAL_DAC_MspInit+0xcc>)
 8001b34:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001b38:	6593      	str	r3, [r2, #88]	; 0x58
 8001b3a:	4b27      	ldr	r3, [pc, #156]	; (8001bd8 <HAL_DAC_MspInit+0xcc>)
 8001b3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b3e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001b42:	613b      	str	r3, [r7, #16]
 8001b44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b46:	4b24      	ldr	r3, [pc, #144]	; (8001bd8 <HAL_DAC_MspInit+0xcc>)
 8001b48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b4a:	4a23      	ldr	r2, [pc, #140]	; (8001bd8 <HAL_DAC_MspInit+0xcc>)
 8001b4c:	f043 0301 	orr.w	r3, r3, #1
 8001b50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b52:	4b21      	ldr	r3, [pc, #132]	; (8001bd8 <HAL_DAC_MspInit+0xcc>)
 8001b54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b56:	f003 0301 	and.w	r3, r3, #1
 8001b5a:	60fb      	str	r3, [r7, #12]
 8001b5c:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001b5e:	2330      	movs	r3, #48	; 0x30
 8001b60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b62:	2303      	movs	r3, #3
 8001b64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b66:	2300      	movs	r3, #0
 8001b68:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b6a:	f107 0314 	add.w	r3, r7, #20
 8001b6e:	4619      	mov	r1, r3
 8001b70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b74:	f001 ff18 	bl	80039a8 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel1;
 8001b78:	4b18      	ldr	r3, [pc, #96]	; (8001bdc <HAL_DAC_MspInit+0xd0>)
 8001b7a:	4a19      	ldr	r2, [pc, #100]	; (8001be0 <HAL_DAC_MspInit+0xd4>)
 8001b7c:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CH1;
 8001b7e:	4b17      	ldr	r3, [pc, #92]	; (8001bdc <HAL_DAC_MspInit+0xd0>)
 8001b80:	2206      	movs	r2, #6
 8001b82:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b84:	4b15      	ldr	r3, [pc, #84]	; (8001bdc <HAL_DAC_MspInit+0xd0>)
 8001b86:	2210      	movs	r2, #16
 8001b88:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b8a:	4b14      	ldr	r3, [pc, #80]	; (8001bdc <HAL_DAC_MspInit+0xd0>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001b90:	4b12      	ldr	r3, [pc, #72]	; (8001bdc <HAL_DAC_MspInit+0xd0>)
 8001b92:	2280      	movs	r2, #128	; 0x80
 8001b94:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b96:	4b11      	ldr	r3, [pc, #68]	; (8001bdc <HAL_DAC_MspInit+0xd0>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001b9c:	4b0f      	ldr	r3, [pc, #60]	; (8001bdc <HAL_DAC_MspInit+0xd0>)
 8001b9e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001ba2:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_NORMAL;
 8001ba4:	4b0d      	ldr	r3, [pc, #52]	; (8001bdc <HAL_DAC_MspInit+0xd0>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001baa:	4b0c      	ldr	r3, [pc, #48]	; (8001bdc <HAL_DAC_MspInit+0xd0>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8001bb0:	480a      	ldr	r0, [pc, #40]	; (8001bdc <HAL_DAC_MspInit+0xd0>)
 8001bb2:	f001 fbcb 	bl	800334c <HAL_DMA_Init>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d001      	beq.n	8001bc0 <HAL_DAC_MspInit+0xb4>
    {
      Error_Handler();
 8001bbc:	f7ff ff7c 	bl	8001ab8 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	4a06      	ldr	r2, [pc, #24]	; (8001bdc <HAL_DAC_MspInit+0xd0>)
 8001bc4:	609a      	str	r2, [r3, #8]
 8001bc6:	4a05      	ldr	r2, [pc, #20]	; (8001bdc <HAL_DAC_MspInit+0xd0>)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001bcc:	bf00      	nop
 8001bce:	3728      	adds	r7, #40	; 0x28
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	40007400 	.word	0x40007400
 8001bd8:	40021000 	.word	0x40021000
 8001bdc:	20000214 	.word	0x20000214
 8001be0:	40020008 	.word	0x40020008

08001be4 <HAL_DFSDM_FilterMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_filter: DFSDM_Filter handle pointer
* @retval None
*/
void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b0ae      	sub	sp, #184	; 0xb8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bec:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	601a      	str	r2, [r3, #0]
 8001bf4:	605a      	str	r2, [r3, #4]
 8001bf6:	609a      	str	r2, [r3, #8]
 8001bf8:	60da      	str	r2, [r3, #12]
 8001bfa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001bfc:	f107 0310 	add.w	r3, r7, #16
 8001c00:	2294      	movs	r2, #148	; 0x94
 8001c02:	2100      	movs	r1, #0
 8001c04:	4618      	mov	r0, r3
 8001c06:	f006 ff95 	bl	8008b34 <memset>
  if(DFSDM1_Init == 0)
 8001c0a:	4b45      	ldr	r3, [pc, #276]	; (8001d20 <HAL_DFSDM_FilterMspInit+0x13c>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d14b      	bne.n	8001caa <HAL_DFSDM_FilterMspInit+0xc6>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8001c12:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c16:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c1e:	f107 0310 	add.w	r3, r7, #16
 8001c22:	4618      	mov	r0, r3
 8001c24:	f002 ff62 	bl	8004aec <HAL_RCCEx_PeriphCLKConfig>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d001      	beq.n	8001c32 <HAL_DFSDM_FilterMspInit+0x4e>
    {
      Error_Handler();
 8001c2e:	f7ff ff43 	bl	8001ab8 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8001c32:	4b3c      	ldr	r3, [pc, #240]	; (8001d24 <HAL_DFSDM_FilterMspInit+0x140>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	3301      	adds	r3, #1
 8001c38:	4a3a      	ldr	r2, [pc, #232]	; (8001d24 <HAL_DFSDM_FilterMspInit+0x140>)
 8001c3a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8001c3c:	4b39      	ldr	r3, [pc, #228]	; (8001d24 <HAL_DFSDM_FilterMspInit+0x140>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d10b      	bne.n	8001c5c <HAL_DFSDM_FilterMspInit+0x78>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001c44:	4b38      	ldr	r3, [pc, #224]	; (8001d28 <HAL_DFSDM_FilterMspInit+0x144>)
 8001c46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c48:	4a37      	ldr	r2, [pc, #220]	; (8001d28 <HAL_DFSDM_FilterMspInit+0x144>)
 8001c4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c4e:	6613      	str	r3, [r2, #96]	; 0x60
 8001c50:	4b35      	ldr	r3, [pc, #212]	; (8001d28 <HAL_DFSDM_FilterMspInit+0x144>)
 8001c52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c58:	60fb      	str	r3, [r7, #12]
 8001c5a:	68fb      	ldr	r3, [r7, #12]
    }

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c5c:	4b32      	ldr	r3, [pc, #200]	; (8001d28 <HAL_DFSDM_FilterMspInit+0x144>)
 8001c5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c60:	4a31      	ldr	r2, [pc, #196]	; (8001d28 <HAL_DFSDM_FilterMspInit+0x144>)
 8001c62:	f043 0310 	orr.w	r3, r3, #16
 8001c66:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c68:	4b2f      	ldr	r3, [pc, #188]	; (8001d28 <HAL_DFSDM_FilterMspInit+0x144>)
 8001c6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c6c:	f003 0310 	and.w	r3, r3, #16
 8001c70:	60bb      	str	r3, [r7, #8]
 8001c72:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8001c74:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001c78:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c7c:	2302      	movs	r3, #2
 8001c7e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c82:	2300      	movs	r3, #0
 8001c84:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001c8e:	2306      	movs	r3, #6
 8001c90:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c94:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001c98:	4619      	mov	r1, r3
 8001c9a:	4824      	ldr	r0, [pc, #144]	; (8001d2c <HAL_DFSDM_FilterMspInit+0x148>)
 8001c9c:	f001 fe84 	bl	80039a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8001ca0:	4b1f      	ldr	r3, [pc, #124]	; (8001d20 <HAL_DFSDM_FilterMspInit+0x13c>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	4a1e      	ldr	r2, [pc, #120]	; (8001d20 <HAL_DFSDM_FilterMspInit+0x13c>)
 8001ca8:	6013      	str	r3, [r2, #0]
  }

    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(hdfsdm_filter->Instance == DFSDM1_Filter0){
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a20      	ldr	r2, [pc, #128]	; (8001d30 <HAL_DFSDM_FilterMspInit+0x14c>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d130      	bne.n	8001d16 <HAL_DFSDM_FilterMspInit+0x132>
    hdma_dfsdm1_flt0.Instance = DMA1_Channel2;
 8001cb4:	4b1f      	ldr	r3, [pc, #124]	; (8001d34 <HAL_DFSDM_FilterMspInit+0x150>)
 8001cb6:	4a20      	ldr	r2, [pc, #128]	; (8001d38 <HAL_DFSDM_FilterMspInit+0x154>)
 8001cb8:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt0.Init.Request = DMA_REQUEST_DFSDM1_FLT0;
 8001cba:	4b1e      	ldr	r3, [pc, #120]	; (8001d34 <HAL_DFSDM_FilterMspInit+0x150>)
 8001cbc:	2256      	movs	r2, #86	; 0x56
 8001cbe:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001cc0:	4b1c      	ldr	r3, [pc, #112]	; (8001d34 <HAL_DFSDM_FilterMspInit+0x150>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cc6:	4b1b      	ldr	r3, [pc, #108]	; (8001d34 <HAL_DFSDM_FilterMspInit+0x150>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 8001ccc:	4b19      	ldr	r3, [pc, #100]	; (8001d34 <HAL_DFSDM_FilterMspInit+0x150>)
 8001cce:	2280      	movs	r2, #128	; 0x80
 8001cd0:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001cd2:	4b18      	ldr	r3, [pc, #96]	; (8001d34 <HAL_DFSDM_FilterMspInit+0x150>)
 8001cd4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cd8:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001cda:	4b16      	ldr	r3, [pc, #88]	; (8001d34 <HAL_DFSDM_FilterMspInit+0x150>)
 8001cdc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001ce0:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_NORMAL;
 8001ce2:	4b14      	ldr	r3, [pc, #80]	; (8001d34 <HAL_DFSDM_FilterMspInit+0x150>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_LOW;
 8001ce8:	4b12      	ldr	r3, [pc, #72]	; (8001d34 <HAL_DFSDM_FilterMspInit+0x150>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 8001cee:	4811      	ldr	r0, [pc, #68]	; (8001d34 <HAL_DFSDM_FilterMspInit+0x150>)
 8001cf0:	f001 fb2c 	bl	800334c <HAL_DMA_Init>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d001      	beq.n	8001cfe <HAL_DFSDM_FilterMspInit+0x11a>
    {
      Error_Handler();
 8001cfa:	f7ff fedd 	bl	8001ab8 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hdfsdm_filter,hdmaInj,hdma_dfsdm1_flt0);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	4a0c      	ldr	r2, [pc, #48]	; (8001d34 <HAL_DFSDM_FilterMspInit+0x150>)
 8001d02:	62da      	str	r2, [r3, #44]	; 0x2c
 8001d04:	4a0b      	ldr	r2, [pc, #44]	; (8001d34 <HAL_DFSDM_FilterMspInit+0x150>)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(hdfsdm_filter,hdmaReg,hdma_dfsdm1_flt0);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4a09      	ldr	r2, [pc, #36]	; (8001d34 <HAL_DFSDM_FilterMspInit+0x150>)
 8001d0e:	629a      	str	r2, [r3, #40]	; 0x28
 8001d10:	4a08      	ldr	r2, [pc, #32]	; (8001d34 <HAL_DFSDM_FilterMspInit+0x150>)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6293      	str	r3, [r2, #40]	; 0x28
  }

}
 8001d16:	bf00      	nop
 8001d18:	37b8      	adds	r7, #184	; 0xb8
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	200507e4 	.word	0x200507e4
 8001d24:	200507e0 	.word	0x200507e0
 8001d28:	40021000 	.word	0x40021000
 8001d2c:	48001000 	.word	0x48001000
 8001d30:	40016100 	.word	0x40016100
 8001d34:	20000300 	.word	0x20000300
 8001d38:	4002001c 	.word	0x4002001c

08001d3c <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b0ae      	sub	sp, #184	; 0xb8
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d44:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001d48:	2200      	movs	r2, #0
 8001d4a:	601a      	str	r2, [r3, #0]
 8001d4c:	605a      	str	r2, [r3, #4]
 8001d4e:	609a      	str	r2, [r3, #8]
 8001d50:	60da      	str	r2, [r3, #12]
 8001d52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d54:	f107 0310 	add.w	r3, r7, #16
 8001d58:	2294      	movs	r2, #148	; 0x94
 8001d5a:	2100      	movs	r1, #0
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f006 fee9 	bl	8008b34 <memset>
  if(DFSDM1_Init == 0)
 8001d62:	4b2a      	ldr	r3, [pc, #168]	; (8001e0c <HAL_DFSDM_ChannelMspInit+0xd0>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d14b      	bne.n	8001e02 <HAL_DFSDM_ChannelMspInit+0xc6>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8001d6a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d6e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001d70:	2300      	movs	r3, #0
 8001d72:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d76:	f107 0310 	add.w	r3, r7, #16
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f002 feb6 	bl	8004aec <HAL_RCCEx_PeriphCLKConfig>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8001d86:	f7ff fe97 	bl	8001ab8 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8001d8a:	4b21      	ldr	r3, [pc, #132]	; (8001e10 <HAL_DFSDM_ChannelMspInit+0xd4>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	3301      	adds	r3, #1
 8001d90:	4a1f      	ldr	r2, [pc, #124]	; (8001e10 <HAL_DFSDM_ChannelMspInit+0xd4>)
 8001d92:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8001d94:	4b1e      	ldr	r3, [pc, #120]	; (8001e10 <HAL_DFSDM_ChannelMspInit+0xd4>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d10b      	bne.n	8001db4 <HAL_DFSDM_ChannelMspInit+0x78>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001d9c:	4b1d      	ldr	r3, [pc, #116]	; (8001e14 <HAL_DFSDM_ChannelMspInit+0xd8>)
 8001d9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001da0:	4a1c      	ldr	r2, [pc, #112]	; (8001e14 <HAL_DFSDM_ChannelMspInit+0xd8>)
 8001da2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001da6:	6613      	str	r3, [r2, #96]	; 0x60
 8001da8:	4b1a      	ldr	r3, [pc, #104]	; (8001e14 <HAL_DFSDM_ChannelMspInit+0xd8>)
 8001daa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001db0:	60fb      	str	r3, [r7, #12]
 8001db2:	68fb      	ldr	r3, [r7, #12]
    }

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001db4:	4b17      	ldr	r3, [pc, #92]	; (8001e14 <HAL_DFSDM_ChannelMspInit+0xd8>)
 8001db6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001db8:	4a16      	ldr	r2, [pc, #88]	; (8001e14 <HAL_DFSDM_ChannelMspInit+0xd8>)
 8001dba:	f043 0310 	orr.w	r3, r3, #16
 8001dbe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dc0:	4b14      	ldr	r3, [pc, #80]	; (8001e14 <HAL_DFSDM_ChannelMspInit+0xd8>)
 8001dc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dc4:	f003 0310 	and.w	r3, r3, #16
 8001dc8:	60bb      	str	r3, [r7, #8]
 8001dca:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8001dcc:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001dd0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001de0:	2300      	movs	r3, #0
 8001de2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001de6:	2306      	movs	r3, #6
 8001de8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001dec:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001df0:	4619      	mov	r1, r3
 8001df2:	4809      	ldr	r0, [pc, #36]	; (8001e18 <HAL_DFSDM_ChannelMspInit+0xdc>)
 8001df4:	f001 fdd8 	bl	80039a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8001df8:	4b04      	ldr	r3, [pc, #16]	; (8001e0c <HAL_DFSDM_ChannelMspInit+0xd0>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	3301      	adds	r3, #1
 8001dfe:	4a03      	ldr	r2, [pc, #12]	; (8001e0c <HAL_DFSDM_ChannelMspInit+0xd0>)
 8001e00:	6013      	str	r3, [r2, #0]
  }

}
 8001e02:	bf00      	nop
 8001e04:	37b8      	adds	r7, #184	; 0xb8
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	200507e4 	.word	0x200507e4
 8001e10:	200507e0 	.word	0x200507e0
 8001e14:	40021000 	.word	0x40021000
 8001e18:	48001000 	.word	0x48001000

08001e1c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b084      	sub	sp, #16
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e2c:	d113      	bne.n	8001e56 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e2e:	4b0c      	ldr	r3, [pc, #48]	; (8001e60 <HAL_TIM_Base_MspInit+0x44>)
 8001e30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e32:	4a0b      	ldr	r2, [pc, #44]	; (8001e60 <HAL_TIM_Base_MspInit+0x44>)
 8001e34:	f043 0301 	orr.w	r3, r3, #1
 8001e38:	6593      	str	r3, [r2, #88]	; 0x58
 8001e3a:	4b09      	ldr	r3, [pc, #36]	; (8001e60 <HAL_TIM_Base_MspInit+0x44>)
 8001e3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e3e:	f003 0301 	and.w	r3, r3, #1
 8001e42:	60fb      	str	r3, [r7, #12]
 8001e44:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001e46:	2200      	movs	r2, #0
 8001e48:	2100      	movs	r1, #0
 8001e4a:	201c      	movs	r0, #28
 8001e4c:	f000 fb7f 	bl	800254e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001e50:	201c      	movs	r0, #28
 8001e52:	f000 fb98 	bl	8002586 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001e56:	bf00      	nop
 8001e58:	3710      	adds	r7, #16
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	40021000 	.word	0x40021000

08001e64 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
}
 8001e68:	bf00      	nop
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr

08001e72 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8001e72:	b480      	push	{r7}
 8001e74:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8001e76:	e7fe      	b.n	8001e76 <HardFault_Handler+0x4>

08001e78 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8001e7c:	e7fe      	b.n	8001e7c <MemManage_Handler+0x4>

08001e7e <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8001e7e:	b480      	push	{r7}
 8001e80:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8001e82:	e7fe      	b.n	8001e82 <BusFault_Handler+0x4>

08001e84 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8001e88:	e7fe      	b.n	8001e88 <UsageFault_Handler+0x4>

08001e8a <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8001e8a:	b480      	push	{r7}
 8001e8c:	af00      	add	r7, sp, #0
}
 8001e8e:	bf00      	nop
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr

08001e98 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0
}
 8001e9c:	bf00      	nop
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr

08001ea6 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8001ea6:	b480      	push	{r7}
 8001ea8:	af00      	add	r7, sp, #0
}
 8001eaa:	bf00      	nop
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr

08001eb4 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8001eb8:	f000 fa2a 	bl	8002310 <HAL_IncTick>
}
 8001ebc:	bf00      	nop
 8001ebe:	bd80      	pop	{r7, pc}

08001ec0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8001ec4:	4802      	ldr	r0, [pc, #8]	; (8001ed0 <DMA1_Channel1_IRQHandler+0x10>)
 8001ec6:	f001 fc1f 	bl	8003708 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001eca:	bf00      	nop
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	20000214 	.word	0x20000214

08001ed4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 8001ed8:	4802      	ldr	r0, [pc, #8]	; (8001ee4 <DMA1_Channel2_IRQHandler+0x10>)
 8001eda:	f001 fc15 	bl	8003708 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001ede:	bf00      	nop
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	20000300 	.word	0x20000300

08001ee8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001eec:	4802      	ldr	r0, [pc, #8]	; (8001ef8 <TIM2_IRQHandler+0x10>)
 8001eee:	f003 fcef 	bl	80058d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001ef2:	bf00      	nop
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	20000360 	.word	0x20000360

08001efc <EXTI1_IRQHandler>:
  * @brief  This function handles external lines 1interrupt request.
  * @param  None
  * @retval None
  */
void EXTI1_IRQHandler(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0
 HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001f00:	2002      	movs	r0, #2
 8001f02:	f001 fee3 	bl	8003ccc <HAL_GPIO_EXTI_IRQHandler>
}
 8001f06:	bf00      	nop
 8001f08:	bd80      	pop	{r7, pc}

08001f0a <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 8001f0a:	b580      	push	{r7, lr}
 8001f0c:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(USER_BUTTON_PIN);
 8001f0e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001f12:	f001 fedb 	bl	8003ccc <HAL_GPIO_EXTI_IRQHandler>
}
 8001f16:	bf00      	nop
 8001f18:	bd80      	pop	{r7, pc}

08001f1a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f1a:	b480      	push	{r7}
 8001f1c:	af00      	add	r7, sp, #0
  return 1;
 8001f1e:	2301      	movs	r3, #1
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr

08001f2a <_kill>:

int _kill(int pid, int sig)
{
 8001f2a:	b580      	push	{r7, lr}
 8001f2c:	b082      	sub	sp, #8
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	6078      	str	r0, [r7, #4]
 8001f32:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001f34:	f006 fe60 	bl	8008bf8 <__errno>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2216      	movs	r2, #22
 8001f3c:	601a      	str	r2, [r3, #0]
  return -1;
 8001f3e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3708      	adds	r7, #8
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}

08001f4a <_exit>:

void _exit (int status)
{
 8001f4a:	b580      	push	{r7, lr}
 8001f4c:	b082      	sub	sp, #8
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001f52:	f04f 31ff 	mov.w	r1, #4294967295
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f7ff ffe7 	bl	8001f2a <_kill>
  while (1) {}    /* Make sure we hang here */
 8001f5c:	e7fe      	b.n	8001f5c <_exit+0x12>

08001f5e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f5e:	b580      	push	{r7, lr}
 8001f60:	b086      	sub	sp, #24
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	60f8      	str	r0, [r7, #12]
 8001f66:	60b9      	str	r1, [r7, #8]
 8001f68:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	617b      	str	r3, [r7, #20]
 8001f6e:	e00a      	b.n	8001f86 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f70:	f3af 8000 	nop.w
 8001f74:	4601      	mov	r1, r0
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	1c5a      	adds	r2, r3, #1
 8001f7a:	60ba      	str	r2, [r7, #8]
 8001f7c:	b2ca      	uxtb	r2, r1
 8001f7e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	3301      	adds	r3, #1
 8001f84:	617b      	str	r3, [r7, #20]
 8001f86:	697a      	ldr	r2, [r7, #20]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	dbf0      	blt.n	8001f70 <_read+0x12>
  }

  return len;
 8001f8e:	687b      	ldr	r3, [r7, #4]
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	3718      	adds	r7, #24
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}

08001f98 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b086      	sub	sp, #24
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	60f8      	str	r0, [r7, #12]
 8001fa0:	60b9      	str	r1, [r7, #8]
 8001fa2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	617b      	str	r3, [r7, #20]
 8001fa8:	e009      	b.n	8001fbe <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	1c5a      	adds	r2, r3, #1
 8001fae:	60ba      	str	r2, [r7, #8]
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f7ff fbf4 	bl	80017a0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	3301      	adds	r3, #1
 8001fbc:	617b      	str	r3, [r7, #20]
 8001fbe:	697a      	ldr	r2, [r7, #20]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	429a      	cmp	r2, r3
 8001fc4:	dbf1      	blt.n	8001faa <_write+0x12>
  }
  return len;
 8001fc6:	687b      	ldr	r3, [r7, #4]
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3718      	adds	r7, #24
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}

08001fd0 <_close>:

int _close(int file)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001fd8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	370c      	adds	r7, #12
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr

08001fe8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
 8001ff0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ff8:	605a      	str	r2, [r3, #4]
  return 0;
 8001ffa:	2300      	movs	r3, #0
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	370c      	adds	r7, #12
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr

08002008 <_isatty>:

int _isatty(int file)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002010:	2301      	movs	r3, #1
}
 8002012:	4618      	mov	r0, r3
 8002014:	370c      	adds	r7, #12
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr

0800201e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800201e:	b480      	push	{r7}
 8002020:	b085      	sub	sp, #20
 8002022:	af00      	add	r7, sp, #0
 8002024:	60f8      	str	r0, [r7, #12]
 8002026:	60b9      	str	r1, [r7, #8]
 8002028:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800202a:	2300      	movs	r3, #0
}
 800202c:	4618      	mov	r0, r3
 800202e:	3714      	adds	r7, #20
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr

08002038 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b086      	sub	sp, #24
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002040:	4a14      	ldr	r2, [pc, #80]	; (8002094 <_sbrk+0x5c>)
 8002042:	4b15      	ldr	r3, [pc, #84]	; (8002098 <_sbrk+0x60>)
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800204c:	4b13      	ldr	r3, [pc, #76]	; (800209c <_sbrk+0x64>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d102      	bne.n	800205a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002054:	4b11      	ldr	r3, [pc, #68]	; (800209c <_sbrk+0x64>)
 8002056:	4a12      	ldr	r2, [pc, #72]	; (80020a0 <_sbrk+0x68>)
 8002058:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800205a:	4b10      	ldr	r3, [pc, #64]	; (800209c <_sbrk+0x64>)
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4413      	add	r3, r2
 8002062:	693a      	ldr	r2, [r7, #16]
 8002064:	429a      	cmp	r2, r3
 8002066:	d207      	bcs.n	8002078 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002068:	f006 fdc6 	bl	8008bf8 <__errno>
 800206c:	4603      	mov	r3, r0
 800206e:	220c      	movs	r2, #12
 8002070:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002072:	f04f 33ff 	mov.w	r3, #4294967295
 8002076:	e009      	b.n	800208c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002078:	4b08      	ldr	r3, [pc, #32]	; (800209c <_sbrk+0x64>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800207e:	4b07      	ldr	r3, [pc, #28]	; (800209c <_sbrk+0x64>)
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4413      	add	r3, r2
 8002086:	4a05      	ldr	r2, [pc, #20]	; (800209c <_sbrk+0x64>)
 8002088:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800208a:	68fb      	ldr	r3, [r7, #12]
}
 800208c:	4618      	mov	r0, r3
 800208e:	3718      	adds	r7, #24
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	2007d000 	.word	0x2007d000
 8002098:	00007f00 	.word	0x00007f00
 800209c:	200507e8 	.word	0x200507e8
 80020a0:	20050a60 	.word	0x20050a60

080020a4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020a8:	4b17      	ldr	r3, [pc, #92]	; (8002108 <SystemInit+0x64>)
 80020aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020ae:	4a16      	ldr	r2, [pc, #88]	; (8002108 <SystemInit+0x64>)
 80020b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80020b8:	4b14      	ldr	r3, [pc, #80]	; (800210c <SystemInit+0x68>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a13      	ldr	r2, [pc, #76]	; (800210c <SystemInit+0x68>)
 80020be:	f043 0301 	orr.w	r3, r3, #1
 80020c2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80020c4:	4b11      	ldr	r3, [pc, #68]	; (800210c <SystemInit+0x68>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 80020ca:	4b10      	ldr	r3, [pc, #64]	; (800210c <SystemInit+0x68>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a0f      	ldr	r2, [pc, #60]	; (800210c <SystemInit+0x68>)
 80020d0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80020d4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80020d8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000;
 80020da:	4b0c      	ldr	r3, [pc, #48]	; (800210c <SystemInit+0x68>)
 80020dc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80020e0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80020e2:	4b0a      	ldr	r3, [pc, #40]	; (800210c <SystemInit+0x68>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a09      	ldr	r2, [pc, #36]	; (800210c <SystemInit+0x68>)
 80020e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020ec:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80020ee:	4b07      	ldr	r3, [pc, #28]	; (800210c <SystemInit+0x68>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80020f4:	4b04      	ldr	r3, [pc, #16]	; (8002108 <SystemInit+0x64>)
 80020f6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80020fa:	609a      	str	r2, [r3, #8]
#endif
}
 80020fc:	bf00      	nop
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	e000ed00 	.word	0xe000ed00
 800210c:	40021000 	.word	0x40021000

08002110 <SPI_WIFI_ISR>:
  * @brief  Interrupt handler for CMDDATARDY input signal
  * @param  None
  * @retval None
  */
void    SPI_WIFI_ISR(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0
   if (cmddata_rdy_rising_event == 1)
 8002114:	4b05      	ldr	r3, [pc, #20]	; (800212c <SPI_WIFI_ISR+0x1c>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	2b01      	cmp	r3, #1
 800211a:	d102      	bne.n	8002122 <SPI_WIFI_ISR+0x12>
   {
     SEM_SIGNAL(cmddata_rdy_rising_sem);
     cmddata_rdy_rising_event = 0;
 800211c:	4b03      	ldr	r3, [pc, #12]	; (800212c <SPI_WIFI_ISR+0x1c>)
 800211e:	2200      	movs	r2, #0
 8002120:	601a      	str	r2, [r3, #0]
   }
}
 8002122:	bf00      	nop
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr
 800212c:	20050850 	.word	0x20050850

08002130 <BSP_LED_Init>:
  * @param  Led  LED to be initialized. 
  *              This parameter can be one of the following values:
  *                @arg  LED2
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b088      	sub	sp, #32
 8002134:	af00      	add	r7, sp, #0
 8002136:	4603      	mov	r3, r0
 8002138:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;
  
  LEDx_GPIO_CLK_ENABLE(Led);
 800213a:	79fb      	ldrb	r3, [r7, #7]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d10b      	bne.n	8002158 <BSP_LED_Init+0x28>
 8002140:	4b11      	ldr	r3, [pc, #68]	; (8002188 <BSP_LED_Init+0x58>)
 8002142:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002144:	4a10      	ldr	r2, [pc, #64]	; (8002188 <BSP_LED_Init+0x58>)
 8002146:	f043 0302 	orr.w	r3, r3, #2
 800214a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800214c:	4b0e      	ldr	r3, [pc, #56]	; (8002188 <BSP_LED_Init+0x58>)
 800214e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002150:	f003 0302 	and.w	r3, r3, #2
 8002154:	60bb      	str	r3, [r7, #8]
 8002156:	68bb      	ldr	r3, [r7, #8]
  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = GPIO_PIN[Led];
 8002158:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800215c:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 800215e:	2301      	movs	r3, #1
 8002160:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8002162:	2300      	movs	r3, #0
 8002164:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002166:	2302      	movs	r3, #2
 8002168:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpio_init_structure);
 800216a:	79fb      	ldrb	r3, [r7, #7]
 800216c:	4a07      	ldr	r2, [pc, #28]	; (800218c <BSP_LED_Init+0x5c>)
 800216e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002172:	f107 020c 	add.w	r2, r7, #12
 8002176:	4611      	mov	r1, r2
 8002178:	4618      	mov	r0, r3
 800217a:	f001 fc15 	bl	80039a8 <HAL_GPIO_Init>
}
 800217e:	bf00      	nop
 8002180:	3720      	adds	r7, #32
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	40021000 	.word	0x40021000
 800218c:	20000004 	.word	0x20000004

08002190 <BSP_COM_Init>:
  *                @arg  COM1 
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains the
  *                configuration information for the specified USART peripheral.
  */
void BSP_COM_Init(COM_TypeDef COM, UART_HandleTypeDef *huart)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b08a      	sub	sp, #40	; 0x28
 8002194:	af00      	add	r7, sp, #0
 8002196:	4603      	mov	r3, r0
 8002198:	6039      	str	r1, [r7, #0]
 800219a:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable GPIO clock */
  DISCOVERY_COMx_TX_GPIO_CLK_ENABLE(COM);
 800219c:	79fb      	ldrb	r3, [r7, #7]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d10b      	bne.n	80021ba <BSP_COM_Init+0x2a>
 80021a2:	4b2d      	ldr	r3, [pc, #180]	; (8002258 <BSP_COM_Init+0xc8>)
 80021a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021a6:	4a2c      	ldr	r2, [pc, #176]	; (8002258 <BSP_COM_Init+0xc8>)
 80021a8:	f043 0302 	orr.w	r3, r3, #2
 80021ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021ae:	4b2a      	ldr	r3, [pc, #168]	; (8002258 <BSP_COM_Init+0xc8>)
 80021b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021b2:	f003 0302 	and.w	r3, r3, #2
 80021b6:	613b      	str	r3, [r7, #16]
 80021b8:	693b      	ldr	r3, [r7, #16]
  DISCOVERY_COMx_RX_GPIO_CLK_ENABLE(COM);
 80021ba:	79fb      	ldrb	r3, [r7, #7]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d10b      	bne.n	80021d8 <BSP_COM_Init+0x48>
 80021c0:	4b25      	ldr	r3, [pc, #148]	; (8002258 <BSP_COM_Init+0xc8>)
 80021c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021c4:	4a24      	ldr	r2, [pc, #144]	; (8002258 <BSP_COM_Init+0xc8>)
 80021c6:	f043 0302 	orr.w	r3, r3, #2
 80021ca:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021cc:	4b22      	ldr	r3, [pc, #136]	; (8002258 <BSP_COM_Init+0xc8>)
 80021ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021d0:	f003 0302 	and.w	r3, r3, #2
 80021d4:	60fb      	str	r3, [r7, #12]
 80021d6:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  DISCOVERY_COMx_CLK_ENABLE(COM);
 80021d8:	79fb      	ldrb	r3, [r7, #7]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d10b      	bne.n	80021f6 <BSP_COM_Init+0x66>
 80021de:	4b1e      	ldr	r3, [pc, #120]	; (8002258 <BSP_COM_Init+0xc8>)
 80021e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021e2:	4a1d      	ldr	r2, [pc, #116]	; (8002258 <BSP_COM_Init+0xc8>)
 80021e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021e8:	6613      	str	r3, [r2, #96]	; 0x60
 80021ea:	4b1b      	ldr	r3, [pc, #108]	; (8002258 <BSP_COM_Init+0xc8>)
 80021ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021f2:	60bb      	str	r3, [r7, #8]
 80021f4:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM_TX_PIN[COM];
 80021f6:	2340      	movs	r3, #64	; 0x40
 80021f8:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80021fa:	2302      	movs	r3, #2
 80021fc:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80021fe:	2302      	movs	r3, #2
 8002200:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8002202:	2300      	movs	r3, #0
 8002204:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM_TX_AF[COM];
 8002206:	2307      	movs	r3, #7
 8002208:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(COM_TX_PORT[COM], &gpio_init_structure);
 800220a:	79fb      	ldrb	r3, [r7, #7]
 800220c:	4a13      	ldr	r2, [pc, #76]	; (800225c <BSP_COM_Init+0xcc>)
 800220e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002212:	f107 0214 	add.w	r2, r7, #20
 8002216:	4611      	mov	r1, r2
 8002218:	4618      	mov	r0, r3
 800221a:	f001 fbc5 	bl	80039a8 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM_RX_PIN[COM];
 800221e:	2380      	movs	r3, #128	; 0x80
 8002220:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8002222:	2302      	movs	r3, #2
 8002224:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM_RX_AF[COM];
 8002226:	2307      	movs	r3, #7
 8002228:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(COM_RX_PORT[COM], &gpio_init_structure);
 800222a:	79fb      	ldrb	r3, [r7, #7]
 800222c:	4a0c      	ldr	r2, [pc, #48]	; (8002260 <BSP_COM_Init+0xd0>)
 800222e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002232:	f107 0214 	add.w	r2, r7, #20
 8002236:	4611      	mov	r1, r2
 8002238:	4618      	mov	r0, r3
 800223a:	f001 fbb5 	bl	80039a8 <HAL_GPIO_Init>

  /* USART configuration */
  huart->Instance = COM_USART[COM];
 800223e:	79fb      	ldrb	r3, [r7, #7]
 8002240:	4a08      	ldr	r2, [pc, #32]	; (8002264 <BSP_COM_Init+0xd4>)
 8002242:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	601a      	str	r2, [r3, #0]
  HAL_UART_Init(huart);
 800224a:	6838      	ldr	r0, [r7, #0]
 800224c:	f003 ff18 	bl	8006080 <HAL_UART_Init>
}
 8002250:	bf00      	nop
 8002252:	3728      	adds	r7, #40	; 0x28
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}
 8002258:	40021000 	.word	0x40021000
 800225c:	2000000c 	.word	0x2000000c
 8002260:	20000010 	.word	0x20000010
 8002264:	20000008 	.word	0x20000008

08002268 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b082      	sub	sp, #8
 800226c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800226e:	2300      	movs	r3, #0
 8002270:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002272:	2003      	movs	r0, #3
 8002274:	f000 f960 	bl	8002538 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002278:	200f      	movs	r0, #15
 800227a:	f000 f80d 	bl	8002298 <HAL_InitTick>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d002      	beq.n	800228a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	71fb      	strb	r3, [r7, #7]
 8002288:	e001      	b.n	800228e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800228a:	f7ff fc1b 	bl	8001ac4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800228e:	79fb      	ldrb	r3, [r7, #7]
}
 8002290:	4618      	mov	r0, r3
 8002292:	3708      	adds	r7, #8
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}

08002298 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b084      	sub	sp, #16
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80022a0:	2300      	movs	r3, #0
 80022a2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80022a4:	4b17      	ldr	r3, [pc, #92]	; (8002304 <HAL_InitTick+0x6c>)
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d023      	beq.n	80022f4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80022ac:	4b16      	ldr	r3, [pc, #88]	; (8002308 <HAL_InitTick+0x70>)
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	4b14      	ldr	r3, [pc, #80]	; (8002304 <HAL_InitTick+0x6c>)
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	4619      	mov	r1, r3
 80022b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80022be:	fbb2 f3f3 	udiv	r3, r2, r3
 80022c2:	4618      	mov	r0, r3
 80022c4:	f000 f96d 	bl	80025a2 <HAL_SYSTICK_Config>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d10f      	bne.n	80022ee <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2b0f      	cmp	r3, #15
 80022d2:	d809      	bhi.n	80022e8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022d4:	2200      	movs	r2, #0
 80022d6:	6879      	ldr	r1, [r7, #4]
 80022d8:	f04f 30ff 	mov.w	r0, #4294967295
 80022dc:	f000 f937 	bl	800254e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80022e0:	4a0a      	ldr	r2, [pc, #40]	; (800230c <HAL_InitTick+0x74>)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6013      	str	r3, [r2, #0]
 80022e6:	e007      	b.n	80022f8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	73fb      	strb	r3, [r7, #15]
 80022ec:	e004      	b.n	80022f8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	73fb      	strb	r3, [r7, #15]
 80022f2:	e001      	b.n	80022f8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80022f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3710      	adds	r7, #16
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	20000018 	.word	0x20000018
 8002308:	20000000 	.word	0x20000000
 800230c:	20000014 	.word	0x20000014

08002310 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002314:	4b06      	ldr	r3, [pc, #24]	; (8002330 <HAL_IncTick+0x20>)
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	461a      	mov	r2, r3
 800231a:	4b06      	ldr	r3, [pc, #24]	; (8002334 <HAL_IncTick+0x24>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4413      	add	r3, r2
 8002320:	4a04      	ldr	r2, [pc, #16]	; (8002334 <HAL_IncTick+0x24>)
 8002322:	6013      	str	r3, [r2, #0]
}
 8002324:	bf00      	nop
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr
 800232e:	bf00      	nop
 8002330:	20000018 	.word	0x20000018
 8002334:	200508e8 	.word	0x200508e8

08002338 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002338:	b480      	push	{r7}
 800233a:	af00      	add	r7, sp, #0
  return uwTick;
 800233c:	4b03      	ldr	r3, [pc, #12]	; (800234c <HAL_GetTick+0x14>)
 800233e:	681b      	ldr	r3, [r3, #0]
}
 8002340:	4618      	mov	r0, r3
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr
 800234a:	bf00      	nop
 800234c:	200508e8 	.word	0x200508e8

08002350 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b084      	sub	sp, #16
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002358:	f7ff ffee 	bl	8002338 <HAL_GetTick>
 800235c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002368:	d005      	beq.n	8002376 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800236a:	4b0a      	ldr	r3, [pc, #40]	; (8002394 <HAL_Delay+0x44>)
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	461a      	mov	r2, r3
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	4413      	add	r3, r2
 8002374:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002376:	bf00      	nop
 8002378:	f7ff ffde 	bl	8002338 <HAL_GetTick>
 800237c:	4602      	mov	r2, r0
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	68fa      	ldr	r2, [r7, #12]
 8002384:	429a      	cmp	r2, r3
 8002386:	d8f7      	bhi.n	8002378 <HAL_Delay+0x28>
  {
  }
}
 8002388:	bf00      	nop
 800238a:	bf00      	nop
 800238c:	3710      	adds	r7, #16
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	20000018 	.word	0x20000018

08002398 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002398:	b480      	push	{r7}
 800239a:	b085      	sub	sp, #20
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	f003 0307 	and.w	r3, r3, #7
 80023a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023a8:	4b0c      	ldr	r3, [pc, #48]	; (80023dc <__NVIC_SetPriorityGrouping+0x44>)
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023ae:	68ba      	ldr	r2, [r7, #8]
 80023b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023b4:	4013      	ands	r3, r2
 80023b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023ca:	4a04      	ldr	r2, [pc, #16]	; (80023dc <__NVIC_SetPriorityGrouping+0x44>)
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	60d3      	str	r3, [r2, #12]
}
 80023d0:	bf00      	nop
 80023d2:	3714      	adds	r7, #20
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr
 80023dc:	e000ed00 	.word	0xe000ed00

080023e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023e4:	4b04      	ldr	r3, [pc, #16]	; (80023f8 <__NVIC_GetPriorityGrouping+0x18>)
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	0a1b      	lsrs	r3, r3, #8
 80023ea:	f003 0307 	and.w	r3, r3, #7
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr
 80023f8:	e000ed00 	.word	0xe000ed00

080023fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b083      	sub	sp, #12
 8002400:	af00      	add	r7, sp, #0
 8002402:	4603      	mov	r3, r0
 8002404:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800240a:	2b00      	cmp	r3, #0
 800240c:	db0b      	blt.n	8002426 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800240e:	79fb      	ldrb	r3, [r7, #7]
 8002410:	f003 021f 	and.w	r2, r3, #31
 8002414:	4907      	ldr	r1, [pc, #28]	; (8002434 <__NVIC_EnableIRQ+0x38>)
 8002416:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800241a:	095b      	lsrs	r3, r3, #5
 800241c:	2001      	movs	r0, #1
 800241e:	fa00 f202 	lsl.w	r2, r0, r2
 8002422:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002426:	bf00      	nop
 8002428:	370c      	adds	r7, #12
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	e000e100 	.word	0xe000e100

08002438 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	4603      	mov	r3, r0
 8002440:	6039      	str	r1, [r7, #0]
 8002442:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002444:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002448:	2b00      	cmp	r3, #0
 800244a:	db0a      	blt.n	8002462 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	b2da      	uxtb	r2, r3
 8002450:	490c      	ldr	r1, [pc, #48]	; (8002484 <__NVIC_SetPriority+0x4c>)
 8002452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002456:	0112      	lsls	r2, r2, #4
 8002458:	b2d2      	uxtb	r2, r2
 800245a:	440b      	add	r3, r1
 800245c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002460:	e00a      	b.n	8002478 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	b2da      	uxtb	r2, r3
 8002466:	4908      	ldr	r1, [pc, #32]	; (8002488 <__NVIC_SetPriority+0x50>)
 8002468:	79fb      	ldrb	r3, [r7, #7]
 800246a:	f003 030f 	and.w	r3, r3, #15
 800246e:	3b04      	subs	r3, #4
 8002470:	0112      	lsls	r2, r2, #4
 8002472:	b2d2      	uxtb	r2, r2
 8002474:	440b      	add	r3, r1
 8002476:	761a      	strb	r2, [r3, #24]
}
 8002478:	bf00      	nop
 800247a:	370c      	adds	r7, #12
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr
 8002484:	e000e100 	.word	0xe000e100
 8002488:	e000ed00 	.word	0xe000ed00

0800248c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800248c:	b480      	push	{r7}
 800248e:	b089      	sub	sp, #36	; 0x24
 8002490:	af00      	add	r7, sp, #0
 8002492:	60f8      	str	r0, [r7, #12]
 8002494:	60b9      	str	r1, [r7, #8]
 8002496:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	f003 0307 	and.w	r3, r3, #7
 800249e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	f1c3 0307 	rsb	r3, r3, #7
 80024a6:	2b04      	cmp	r3, #4
 80024a8:	bf28      	it	cs
 80024aa:	2304      	movcs	r3, #4
 80024ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	3304      	adds	r3, #4
 80024b2:	2b06      	cmp	r3, #6
 80024b4:	d902      	bls.n	80024bc <NVIC_EncodePriority+0x30>
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	3b03      	subs	r3, #3
 80024ba:	e000      	b.n	80024be <NVIC_EncodePriority+0x32>
 80024bc:	2300      	movs	r3, #0
 80024be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024c0:	f04f 32ff 	mov.w	r2, #4294967295
 80024c4:	69bb      	ldr	r3, [r7, #24]
 80024c6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ca:	43da      	mvns	r2, r3
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	401a      	ands	r2, r3
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024d4:	f04f 31ff 	mov.w	r1, #4294967295
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	fa01 f303 	lsl.w	r3, r1, r3
 80024de:	43d9      	mvns	r1, r3
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024e4:	4313      	orrs	r3, r2
         );
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3724      	adds	r7, #36	; 0x24
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr
	...

080024f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	3b01      	subs	r3, #1
 8002500:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002504:	d301      	bcc.n	800250a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002506:	2301      	movs	r3, #1
 8002508:	e00f      	b.n	800252a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800250a:	4a0a      	ldr	r2, [pc, #40]	; (8002534 <SysTick_Config+0x40>)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	3b01      	subs	r3, #1
 8002510:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002512:	210f      	movs	r1, #15
 8002514:	f04f 30ff 	mov.w	r0, #4294967295
 8002518:	f7ff ff8e 	bl	8002438 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800251c:	4b05      	ldr	r3, [pc, #20]	; (8002534 <SysTick_Config+0x40>)
 800251e:	2200      	movs	r2, #0
 8002520:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002522:	4b04      	ldr	r3, [pc, #16]	; (8002534 <SysTick_Config+0x40>)
 8002524:	2207      	movs	r2, #7
 8002526:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002528:	2300      	movs	r3, #0
}
 800252a:	4618      	mov	r0, r3
 800252c:	3708      	adds	r7, #8
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	e000e010 	.word	0xe000e010

08002538 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	f7ff ff29 	bl	8002398 <__NVIC_SetPriorityGrouping>
}
 8002546:	bf00      	nop
 8002548:	3708      	adds	r7, #8
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}

0800254e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800254e:	b580      	push	{r7, lr}
 8002550:	b086      	sub	sp, #24
 8002552:	af00      	add	r7, sp, #0
 8002554:	4603      	mov	r3, r0
 8002556:	60b9      	str	r1, [r7, #8]
 8002558:	607a      	str	r2, [r7, #4]
 800255a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800255c:	2300      	movs	r3, #0
 800255e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002560:	f7ff ff3e 	bl	80023e0 <__NVIC_GetPriorityGrouping>
 8002564:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	68b9      	ldr	r1, [r7, #8]
 800256a:	6978      	ldr	r0, [r7, #20]
 800256c:	f7ff ff8e 	bl	800248c <NVIC_EncodePriority>
 8002570:	4602      	mov	r2, r0
 8002572:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002576:	4611      	mov	r1, r2
 8002578:	4618      	mov	r0, r3
 800257a:	f7ff ff5d 	bl	8002438 <__NVIC_SetPriority>
}
 800257e:	bf00      	nop
 8002580:	3718      	adds	r7, #24
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}

08002586 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002586:	b580      	push	{r7, lr}
 8002588:	b082      	sub	sp, #8
 800258a:	af00      	add	r7, sp, #0
 800258c:	4603      	mov	r3, r0
 800258e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002590:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002594:	4618      	mov	r0, r3
 8002596:	f7ff ff31 	bl	80023fc <__NVIC_EnableIRQ>
}
 800259a:	bf00      	nop
 800259c:	3708      	adds	r7, #8
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}

080025a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025a2:	b580      	push	{r7, lr}
 80025a4:	b082      	sub	sp, #8
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f7ff ffa2 	bl	80024f4 <SysTick_Config>
 80025b0:	4603      	mov	r3, r0
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3708      	adds	r7, #8
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}

080025ba <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80025ba:	b580      	push	{r7, lr}
 80025bc:	b082      	sub	sp, #8
 80025be:	af00      	add	r7, sp, #0
 80025c0:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d101      	bne.n	80025cc <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e014      	b.n	80025f6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	791b      	ldrb	r3, [r3, #4]
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d105      	bne.n	80025e2 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2200      	movs	r2, #0
 80025da:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80025dc:	6878      	ldr	r0, [r7, #4]
 80025de:	f7ff fa95 	bl	8001b0c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2202      	movs	r2, #2
 80025e6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2200      	movs	r2, #0
 80025ec:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2201      	movs	r2, #1
 80025f2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80025f4:	2300      	movs	r3, #0
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3708      	adds	r7, #8
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
	...

08002600 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b086      	sub	sp, #24
 8002604:	af00      	add	r7, sp, #0
 8002606:	60f8      	str	r0, [r7, #12]
 8002608:	60b9      	str	r1, [r7, #8]
 800260a:	607a      	str	r2, [r7, #4]
 800260c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 800260e:	2300      	movs	r3, #0
 8002610:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	795b      	ldrb	r3, [r3, #5]
 8002616:	2b01      	cmp	r3, #1
 8002618:	d101      	bne.n	800261e <HAL_DAC_Start_DMA+0x1e>
 800261a:	2302      	movs	r3, #2
 800261c:	e0ab      	b.n	8002776 <HAL_DAC_Start_DMA+0x176>
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2201      	movs	r2, #1
 8002622:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2202      	movs	r2, #2
 8002628:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d12f      	bne.n	8002690 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	4a52      	ldr	r2, [pc, #328]	; (8002780 <HAL_DAC_Start_DMA+0x180>)
 8002636:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	4a51      	ldr	r2, [pc, #324]	; (8002784 <HAL_DAC_Start_DMA+0x184>)
 800263e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	4a50      	ldr	r2, [pc, #320]	; (8002788 <HAL_DAC_Start_DMA+0x188>)
 8002646:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002656:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8002658:	6a3b      	ldr	r3, [r7, #32]
 800265a:	2b08      	cmp	r3, #8
 800265c:	d013      	beq.n	8002686 <HAL_DAC_Start_DMA+0x86>
 800265e:	6a3b      	ldr	r3, [r7, #32]
 8002660:	2b08      	cmp	r3, #8
 8002662:	d845      	bhi.n	80026f0 <HAL_DAC_Start_DMA+0xf0>
 8002664:	6a3b      	ldr	r3, [r7, #32]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d003      	beq.n	8002672 <HAL_DAC_Start_DMA+0x72>
 800266a:	6a3b      	ldr	r3, [r7, #32]
 800266c:	2b04      	cmp	r3, #4
 800266e:	d005      	beq.n	800267c <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8002670:	e03e      	b.n	80026f0 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	3308      	adds	r3, #8
 8002678:	613b      	str	r3, [r7, #16]
        break;
 800267a:	e03c      	b.n	80026f6 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	330c      	adds	r3, #12
 8002682:	613b      	str	r3, [r7, #16]
        break;
 8002684:	e037      	b.n	80026f6 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	3310      	adds	r3, #16
 800268c:	613b      	str	r3, [r7, #16]
        break;
 800268e:	e032      	b.n	80026f6 <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	4a3d      	ldr	r2, [pc, #244]	; (800278c <HAL_DAC_Start_DMA+0x18c>)
 8002696:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	4a3c      	ldr	r2, [pc, #240]	; (8002790 <HAL_DAC_Start_DMA+0x190>)
 800269e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	4a3b      	ldr	r2, [pc, #236]	; (8002794 <HAL_DAC_Start_DMA+0x194>)
 80026a6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80026b6:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80026b8:	6a3b      	ldr	r3, [r7, #32]
 80026ba:	2b08      	cmp	r3, #8
 80026bc:	d013      	beq.n	80026e6 <HAL_DAC_Start_DMA+0xe6>
 80026be:	6a3b      	ldr	r3, [r7, #32]
 80026c0:	2b08      	cmp	r3, #8
 80026c2:	d817      	bhi.n	80026f4 <HAL_DAC_Start_DMA+0xf4>
 80026c4:	6a3b      	ldr	r3, [r7, #32]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d003      	beq.n	80026d2 <HAL_DAC_Start_DMA+0xd2>
 80026ca:	6a3b      	ldr	r3, [r7, #32]
 80026cc:	2b04      	cmp	r3, #4
 80026ce:	d005      	beq.n	80026dc <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 80026d0:	e010      	b.n	80026f4 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	3314      	adds	r3, #20
 80026d8:	613b      	str	r3, [r7, #16]
        break;
 80026da:	e00c      	b.n	80026f6 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	3318      	adds	r3, #24
 80026e2:	613b      	str	r3, [r7, #16]
        break;
 80026e4:	e007      	b.n	80026f6 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	331c      	adds	r3, #28
 80026ec:	613b      	str	r3, [r7, #16]
        break;
 80026ee:	e002      	b.n	80026f6 <HAL_DAC_Start_DMA+0xf6>
        break;
 80026f0:	bf00      	nop
 80026f2:	e000      	b.n	80026f6 <HAL_DAC_Start_DMA+0xf6>
        break;
 80026f4:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d111      	bne.n	8002720 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800270a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	6898      	ldr	r0, [r3, #8]
 8002710:	6879      	ldr	r1, [r7, #4]
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	693a      	ldr	r2, [r7, #16]
 8002716:	f000 fec1 	bl	800349c <HAL_DMA_Start_IT>
 800271a:	4603      	mov	r3, r0
 800271c:	75fb      	strb	r3, [r7, #23]
 800271e:	e010      	b.n	8002742 <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800272e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	68d8      	ldr	r0, [r3, #12]
 8002734:	6879      	ldr	r1, [r7, #4]
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	693a      	ldr	r2, [r7, #16]
 800273a:	f000 feaf 	bl	800349c <HAL_DMA_Start_IT>
 800273e:	4603      	mov	r3, r0
 8002740:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2200      	movs	r2, #0
 8002746:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8002748:	7dfb      	ldrb	r3, [r7, #23]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d10c      	bne.n	8002768 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	6819      	ldr	r1, [r3, #0]
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	f003 0310 	and.w	r3, r3, #16
 800275a:	2201      	movs	r2, #1
 800275c:	409a      	lsls	r2, r3
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	430a      	orrs	r2, r1
 8002764:	601a      	str	r2, [r3, #0]
 8002766:	e005      	b.n	8002774 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	691b      	ldr	r3, [r3, #16]
 800276c:	f043 0204 	orr.w	r2, r3, #4
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8002774:	7dfb      	ldrb	r3, [r7, #23]
}
 8002776:	4618      	mov	r0, r3
 8002778:	3718      	adds	r7, #24
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	08002ae5 	.word	0x08002ae5
 8002784:	08002b07 	.word	0x08002b07
 8002788:	08002b23 	.word	0x08002b23
 800278c:	08002b8d 	.word	0x08002b8d
 8002790:	08002baf 	.word	0x08002baf
 8002794:	08002bcb 	.word	0x08002bcb

08002798 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
 80027a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	6819      	ldr	r1, [r3, #0]
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	f003 0310 	and.w	r3, r3, #16
 80027ae:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80027b2:	fa02 f303 	lsl.w	r3, r2, r3
 80027b6:	43da      	mvns	r2, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	400a      	ands	r2, r1
 80027be:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	6819      	ldr	r1, [r3, #0]
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	f003 0310 	and.w	r3, r3, #16
 80027cc:	2201      	movs	r2, #1
 80027ce:	fa02 f303 	lsl.w	r3, r2, r3
 80027d2:	43da      	mvns	r2, r3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	400a      	ands	r2, r1
 80027da:	601a      	str	r2, [r3, #0]
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d10d      	bne.n	80027fe <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	4618      	mov	r0, r3
 80027e8:	f000 fed3 	bl	8003592 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80027fa:	601a      	str	r2, [r3, #0]
 80027fc:	e00c      	b.n	8002818 <HAL_DAC_Stop_DMA+0x80>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	68db      	ldr	r3, [r3, #12]
 8002802:	4618      	mov	r0, r3
 8002804:	f000 fec5 	bl	8003592 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8002816:	601a      	str	r2, [r3, #0]
  /* Disable the DAC DMA underrun interrupt */
  __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
#endif /* STM32L451xx STM32L452xx STM32L462xx */

  /* Return function status */
  return HAL_OK;
 8002818:	2300      	movs	r3, #0
}
 800281a:	4618      	mov	r0, r3
 800281c:	3708      	adds	r7, #8
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}

08002822 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002822:	b480      	push	{r7}
 8002824:	b083      	sub	sp, #12
 8002826:	af00      	add	r7, sp, #0
 8002828:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 800282a:	bf00      	nop
 800282c:	370c      	adds	r7, #12
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr

08002836 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002836:	b480      	push	{r7}
 8002838:	b083      	sub	sp, #12
 800283a:	af00      	add	r7, sp, #0
 800283c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 800283e:	bf00      	nop
 8002840:	370c      	adds	r7, #12
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr
	...

0800284c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b088      	sub	sp, #32
 8002850:	af00      	add	r7, sp, #0
 8002852:	60f8      	str	r0, [r7, #12]
 8002854:	60b9      	str	r1, [r7, #8]
 8002856:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8002858:	2300      	movs	r3, #0
 800285a:	61bb      	str	r3, [r7, #24]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	795b      	ldrb	r3, [r3, #5]
 8002860:	2b01      	cmp	r3, #1
 8002862:	d101      	bne.n	8002868 <HAL_DAC_ConfigChannel+0x1c>
 8002864:	2302      	movs	r3, #2
 8002866:	e137      	b.n	8002ad8 <HAL_DAC_ConfigChannel+0x28c>
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2201      	movs	r2, #1
 800286c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2202      	movs	r2, #2
 8002872:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	2b04      	cmp	r3, #4
 800287a:	f040 8081 	bne.w	8002980 <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800287e:	f7ff fd5b 	bl	8002338 <HAL_GetTick>
 8002882:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d140      	bne.n	800290c <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800288a:	e018      	b.n	80028be <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800288c:	f7ff fd54 	bl	8002338 <HAL_GetTick>
 8002890:	4602      	mov	r2, r0
 8002892:	69bb      	ldr	r3, [r7, #24]
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	2b01      	cmp	r3, #1
 8002898:	d911      	bls.n	80028be <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d00a      	beq.n	80028be <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	691b      	ldr	r3, [r3, #16]
 80028ac:	f043 0208 	orr.w	r2, r3, #8
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2203      	movs	r2, #3
 80028b8:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80028ba:	2303      	movs	r3, #3
 80028bc:	e10c      	b.n	8002ad8 <HAL_DAC_ConfigChannel+0x28c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d1df      	bne.n	800288c <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 80028cc:	2001      	movs	r0, #1
 80028ce:	f7ff fd3f 	bl	8002350 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	68ba      	ldr	r2, [r7, #8]
 80028d8:	69d2      	ldr	r2, [r2, #28]
 80028da:	641a      	str	r2, [r3, #64]	; 0x40
 80028dc:	e023      	b.n	8002926 <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80028de:	f7ff fd2b 	bl	8002338 <HAL_GetTick>
 80028e2:	4602      	mov	r2, r0
 80028e4:	69bb      	ldr	r3, [r7, #24]
 80028e6:	1ad3      	subs	r3, r2, r3
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d90f      	bls.n	800290c <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	da0a      	bge.n	800290c <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	691b      	ldr	r3, [r3, #16]
 80028fa:	f043 0208 	orr.w	r2, r3, #8
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2203      	movs	r2, #3
 8002906:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002908:	2303      	movs	r3, #3
 800290a:	e0e5      	b.n	8002ad8 <HAL_DAC_ConfigChannel+0x28c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002912:	2b00      	cmp	r3, #0
 8002914:	dbe3      	blt.n	80028de <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 8002916:	2001      	movs	r0, #1
 8002918:	f7ff fd1a 	bl	8002350 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	68ba      	ldr	r2, [r7, #8]
 8002922:	69d2      	ldr	r2, [r2, #28]
 8002924:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	f003 0310 	and.w	r3, r3, #16
 8002932:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8002936:	fa01 f303 	lsl.w	r3, r1, r3
 800293a:	43db      	mvns	r3, r3
 800293c:	ea02 0103 	and.w	r1, r2, r3
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	6a1a      	ldr	r2, [r3, #32]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	f003 0310 	and.w	r3, r3, #16
 800294a:	409a      	lsls	r2, r3
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	430a      	orrs	r2, r1
 8002952:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	f003 0310 	and.w	r3, r3, #16
 8002960:	21ff      	movs	r1, #255	; 0xff
 8002962:	fa01 f303 	lsl.w	r3, r1, r3
 8002966:	43db      	mvns	r3, r3
 8002968:	ea02 0103 	and.w	r1, r2, r3
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	f003 0310 	and.w	r3, r3, #16
 8002976:	409a      	lsls	r2, r3
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	430a      	orrs	r2, r1
 800297e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	695b      	ldr	r3, [r3, #20]
 8002984:	2b01      	cmp	r3, #1
 8002986:	d11d      	bne.n	80029c4 <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800298e:	61fb      	str	r3, [r7, #28]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	f003 0310 	and.w	r3, r3, #16
 8002996:	221f      	movs	r2, #31
 8002998:	fa02 f303 	lsl.w	r3, r2, r3
 800299c:	43db      	mvns	r3, r3
 800299e:	69fa      	ldr	r2, [r7, #28]
 80029a0:	4013      	ands	r3, r2
 80029a2:	61fb      	str	r3, [r7, #28]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	699b      	ldr	r3, [r3, #24]
 80029a8:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	f003 0310 	and.w	r3, r3, #16
 80029b0:	697a      	ldr	r2, [r7, #20]
 80029b2:	fa02 f303 	lsl.w	r3, r2, r3
 80029b6:	69fa      	ldr	r2, [r7, #28]
 80029b8:	4313      	orrs	r3, r2
 80029ba:	61fb      	str	r3, [r7, #28]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	69fa      	ldr	r2, [r7, #28]
 80029c2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029ca:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	f003 0310 	and.w	r3, r3, #16
 80029d2:	2207      	movs	r2, #7
 80029d4:	fa02 f303 	lsl.w	r3, r2, r3
 80029d8:	43db      	mvns	r3, r3
 80029da:	69fa      	ldr	r2, [r7, #28]
 80029dc:	4013      	ands	r3, r2
 80029de:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	685a      	ldr	r2, [r3, #4]
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	431a      	orrs	r2, r3
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	691b      	ldr	r3, [r3, #16]
 80029ee:	4313      	orrs	r3, r2
 80029f0:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	f003 0310 	and.w	r3, r3, #16
 80029f8:	697a      	ldr	r2, [r7, #20]
 80029fa:	fa02 f303 	lsl.w	r3, r2, r3
 80029fe:	69fa      	ldr	r2, [r7, #28]
 8002a00:	4313      	orrs	r3, r2
 8002a02:	61fb      	str	r3, [r7, #28]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	69fa      	ldr	r2, [r7, #28]
 8002a0a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	6819      	ldr	r1, [r3, #0]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	f003 0310 	and.w	r3, r3, #16
 8002a18:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a20:	43da      	mvns	r2, r3
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	400a      	ands	r2, r1
 8002a28:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	61fb      	str	r3, [r7, #28]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	f003 0310 	and.w	r3, r3, #16
 8002a38:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a40:	43db      	mvns	r3, r3
 8002a42:	69fa      	ldr	r2, [r7, #28]
 8002a44:	4013      	ands	r3, r2
 8002a46:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	f003 0310 	and.w	r3, r3, #16
 8002a54:	697a      	ldr	r2, [r7, #20]
 8002a56:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5a:	69fa      	ldr	r2, [r7, #28]
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	61fb      	str	r3, [r7, #28]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a68:	d104      	bne.n	8002a74 <HAL_DAC_ConfigChannel+0x228>
  {
    tmpreg1 |= DAC_CR_HFSEL;
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a70:	61fb      	str	r3, [r7, #28]
 8002a72:	e018      	b.n	8002aa6 <HAL_DAC_ConfigChannel+0x25a>
  }
  else
  {
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d104      	bne.n	8002a86 <HAL_DAC_ConfigChannel+0x23a>
    {
      tmpreg1 &= ~(DAC_CR_HFSEL);
 8002a7c:	69fb      	ldr	r3, [r7, #28]
 8002a7e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002a82:	61fb      	str	r3, [r7, #28]
 8002a84:	e00f      	b.n	8002aa6 <HAL_DAC_ConfigChannel+0x25a>
    }
    else /* Automatic selection */
    {
      hclkfreq = HAL_RCC_GetHCLKFreq();
 8002a86:	f001 ff39 	bl	80048fc <HAL_RCC_GetHCLKFreq>
 8002a8a:	6138      	str	r0, [r7, #16]
      if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	4a14      	ldr	r2, [pc, #80]	; (8002ae0 <HAL_DAC_ConfigChannel+0x294>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d904      	bls.n	8002a9e <HAL_DAC_ConfigChannel+0x252>
      {
        /* High frequency enable when HCLK frequency higher than 80   */
         tmpreg1 |= DAC_CR_HFSEL;
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a9a:	61fb      	str	r3, [r7, #28]
 8002a9c:	e003      	b.n	8002aa6 <HAL_DAC_ConfigChannel+0x25a>
      }
      else
      {
        /* High frequency disable when HCLK frequency higher than 80  */
        tmpreg1 &= ~(DAC_CR_HFSEL);
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002aa4:	61fb      	str	r3, [r7, #28]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	69fa      	ldr	r2, [r7, #28]
 8002aac:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	6819      	ldr	r1, [r3, #0]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	f003 0310 	and.w	r3, r3, #16
 8002aba:	22c0      	movs	r2, #192	; 0xc0
 8002abc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac0:	43da      	mvns	r2, r3
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	400a      	ands	r2, r1
 8002ac8:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2201      	movs	r2, #1
 8002ace:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002ad6:	2300      	movs	r3, #0
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3720      	adds	r7, #32
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	04c4b400 	.word	0x04c4b400

08002ae4 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b084      	sub	sp, #16
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002af0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8002af2:	68f8      	ldr	r0, [r7, #12]
 8002af4:	f7fe ffc6 	bl	8001a84 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2201      	movs	r2, #1
 8002afc:	711a      	strb	r2, [r3, #4]
}
 8002afe:	bf00      	nop
 8002b00:	3710      	adds	r7, #16
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}

08002b06 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002b06:	b580      	push	{r7, lr}
 8002b08:	b084      	sub	sp, #16
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b12:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8002b14:	68f8      	ldr	r0, [r7, #12]
 8002b16:	f7ff fe84 	bl	8002822 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002b1a:	bf00      	nop
 8002b1c:	3710      	adds	r7, #16
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}

08002b22 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8002b22:	b580      	push	{r7, lr}
 8002b24:	b084      	sub	sp, #16
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b2e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	691b      	ldr	r3, [r3, #16]
 8002b34:	f043 0204 	orr.w	r2, r3, #4
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8002b3c:	68f8      	ldr	r0, [r7, #12]
 8002b3e:	f7ff fe7a 	bl	8002836 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2201      	movs	r2, #1
 8002b46:	711a      	strb	r2, [r3, #4]
}
 8002b48:	bf00      	nop
 8002b4a:	3710      	adds	r7, #16
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}

08002b50 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8002b58:	bf00      	nop
 8002b5a:	370c      	adds	r7, #12
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr

08002b64 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8002b6c:	bf00      	nop
 8002b6e:	370c      	adds	r7, #12
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr

08002b78 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b083      	sub	sp, #12
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8002b80:	bf00      	nop
 8002b82:	370c      	adds	r7, #12
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr

08002b8c <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b084      	sub	sp, #16
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b98:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8002b9a:	68f8      	ldr	r0, [r7, #12]
 8002b9c:	f7ff ffd8 	bl	8002b50 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	711a      	strb	r2, [r3, #4]
}
 8002ba6:	bf00      	nop
 8002ba8:	3710      	adds	r7, #16
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}

08002bae <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002bae:	b580      	push	{r7, lr}
 8002bb0:	b084      	sub	sp, #16
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bba:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8002bbc:	68f8      	ldr	r0, [r7, #12]
 8002bbe:	f7ff ffd1 	bl	8002b64 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002bc2:	bf00      	nop
 8002bc4:	3710      	adds	r7, #16
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}

08002bca <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8002bca:	b580      	push	{r7, lr}
 8002bcc:	b084      	sub	sp, #16
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bd6:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	691b      	ldr	r3, [r3, #16]
 8002bdc:	f043 0204 	orr.w	r2, r3, #4
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8002be4:	68f8      	ldr	r0, [r7, #12]
 8002be6:	f7ff ffc7 	bl	8002b78 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2201      	movs	r2, #1
 8002bee:	711a      	strb	r2, [r3, #4]
}
 8002bf0:	bf00      	nop
 8002bf2:	3710      	adds	r7, #16
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}

08002bf8 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b082      	sub	sp, #8
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d101      	bne.n	8002c0a <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e0ac      	b.n	8002d64 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f000 faac 	bl	800316c <DFSDM_GetChannelFromInstance>
 8002c14:	4603      	mov	r3, r0
 8002c16:	4a55      	ldr	r2, [pc, #340]	; (8002d6c <HAL_DFSDM_ChannelInit+0x174>)
 8002c18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d001      	beq.n	8002c24 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	e09f      	b.n	8002d64 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	f7ff f889 	bl	8001d3c <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8002c2a:	4b51      	ldr	r3, [pc, #324]	; (8002d70 <HAL_DFSDM_ChannelInit+0x178>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	3301      	adds	r3, #1
 8002c30:	4a4f      	ldr	r2, [pc, #316]	; (8002d70 <HAL_DFSDM_ChannelInit+0x178>)
 8002c32:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8002c34:	4b4e      	ldr	r3, [pc, #312]	; (8002d70 <HAL_DFSDM_ChannelInit+0x178>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d125      	bne.n	8002c88 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8002c3c:	4b4d      	ldr	r3, [pc, #308]	; (8002d74 <HAL_DFSDM_ChannelInit+0x17c>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a4c      	ldr	r2, [pc, #304]	; (8002d74 <HAL_DFSDM_ChannelInit+0x17c>)
 8002c42:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002c46:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8002c48:	4b4a      	ldr	r3, [pc, #296]	; (8002d74 <HAL_DFSDM_ChannelInit+0x17c>)
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	4948      	ldr	r1, [pc, #288]	; (8002d74 <HAL_DFSDM_ChannelInit+0x17c>)
 8002c52:	4313      	orrs	r3, r2
 8002c54:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8002c56:	4b47      	ldr	r3, [pc, #284]	; (8002d74 <HAL_DFSDM_ChannelInit+0x17c>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a46      	ldr	r2, [pc, #280]	; (8002d74 <HAL_DFSDM_ChannelInit+0x17c>)
 8002c5c:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8002c60:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	791b      	ldrb	r3, [r3, #4]
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d108      	bne.n	8002c7c <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8002c6a:	4b42      	ldr	r3, [pc, #264]	; (8002d74 <HAL_DFSDM_ChannelInit+0x17c>)
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	68db      	ldr	r3, [r3, #12]
 8002c72:	3b01      	subs	r3, #1
 8002c74:	041b      	lsls	r3, r3, #16
 8002c76:	493f      	ldr	r1, [pc, #252]	; (8002d74 <HAL_DFSDM_ChannelInit+0x17c>)
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8002c7c:	4b3d      	ldr	r3, [pc, #244]	; (8002d74 <HAL_DFSDM_ChannelInit+0x17c>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a3c      	ldr	r2, [pc, #240]	; (8002d74 <HAL_DFSDM_ChannelInit+0x17c>)
 8002c82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002c86:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8002c96:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	6819      	ldr	r1, [r3, #0]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002ca6:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002cac:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	430a      	orrs	r2, r1
 8002cb4:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f022 020f 	bic.w	r2, r2, #15
 8002cc4:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	6819      	ldr	r1, [r3, #0]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002cd4:	431a      	orrs	r2, r3
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	430a      	orrs	r2, r1
 8002cdc:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	689a      	ldr	r2, [r3, #8]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8002cec:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	6899      	ldr	r1, [r3, #8]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cfc:	3b01      	subs	r3, #1
 8002cfe:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002d00:	431a      	orrs	r2, r3
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	430a      	orrs	r2, r1
 8002d08:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	685a      	ldr	r2, [r3, #4]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f002 0207 	and.w	r2, r2, #7
 8002d18:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	6859      	ldr	r1, [r3, #4]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d24:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d2a:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002d2c:	431a      	orrs	r2, r3
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	430a      	orrs	r2, r1
 8002d34:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002d44:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2201      	movs	r2, #1
 8002d4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4618      	mov	r0, r3
 8002d54:	f000 fa0a 	bl	800316c <DFSDM_GetChannelFromInstance>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	4904      	ldr	r1, [pc, #16]	; (8002d6c <HAL_DFSDM_ChannelInit+0x174>)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8002d62:	2300      	movs	r3, #0
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3708      	adds	r7, #8
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}
 8002d6c:	200508f0 	.word	0x200508f0
 8002d70:	200508ec 	.word	0x200508ec
 8002d74:	40016000 	.word	0x40016000

08002d78 <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b082      	sub	sp, #8
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_filter == NULL)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d101      	bne.n	8002d8a <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e0ca      	b.n	8002f20 <HAL_DFSDM_FilterInit+0x1a8>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a66      	ldr	r2, [pc, #408]	; (8002f28 <HAL_DFSDM_FilterInit+0x1b0>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d109      	bne.n	8002da8 <HAL_DFSDM_FilterInit+0x30>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	685b      	ldr	r3, [r3, #4]
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d003      	beq.n	8002da4 <HAL_DFSDM_FilterInit+0x2c>
       (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	68db      	ldr	r3, [r3, #12]
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d101      	bne.n	8002da8 <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e0bb      	b.n	8002f20 <HAL_DFSDM_FilterInit+0x1a8>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2200      	movs	r2, #0
 8002dac:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2201      	movs	r2, #1
 8002db2:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2201      	movs	r2, #1
 8002db8:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 8002dc0:	6878      	ldr	r0, [r7, #4]
 8002dc2:	f7fe ff0f 	bl	8001be4 <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8002dd4:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	7a1b      	ldrb	r3, [r3, #8]
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	d108      	bne.n	8002df0 <HAL_DFSDM_FilterInit+0x78>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002dec:	601a      	str	r2, [r3, #0]
 8002dee:	e007      	b.n	8002e00 <HAL_DFSDM_FilterInit+0x88>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8002dfe:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	7a5b      	ldrb	r3, [r3, #9]
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d108      	bne.n	8002e1a <HAL_DFSDM_FilterInit+0xa2>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8002e16:	601a      	str	r2, [r3, #0]
 8002e18:	e007      	b.n	8002e2a <HAL_DFSDM_FilterInit+0xb2>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8002e28:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	687a      	ldr	r2, [r7, #4]
 8002e32:	6812      	ldr	r2, [r2, #0]
 8002e34:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002e38:	f023 0308 	bic.w	r3, r3, #8
 8002e3c:	6013      	str	r3, [r2, #0]
  if (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	68db      	ldr	r3, [r3, #12]
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	d108      	bne.n	8002e58 <HAL_DFSDM_FilterInit+0xe0>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	6819      	ldr	r1, [r3, #0]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	695a      	ldr	r2, [r3, #20]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	430a      	orrs	r2, r1
 8002e56:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	7c1b      	ldrb	r3, [r3, #16]
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d108      	bne.n	8002e72 <HAL_DFSDM_FilterInit+0xfa>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f042 0210 	orr.w	r2, r2, #16
 8002e6e:	601a      	str	r2, [r3, #0]
 8002e70:	e007      	b.n	8002e82 <HAL_DFSDM_FilterInit+0x10a>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f022 0210 	bic.w	r2, r2, #16
 8002e80:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	7c5b      	ldrb	r3, [r3, #17]
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d108      	bne.n	8002e9c <HAL_DFSDM_FilterInit+0x124>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f042 0220 	orr.w	r2, r2, #32
 8002e98:	601a      	str	r2, [r3, #0]
 8002e9a:	e007      	b.n	8002eac <HAL_DFSDM_FilterInit+0x134>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f022 0220 	bic.w	r2, r2, #32
 8002eaa:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	695b      	ldr	r3, [r3, #20]
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	6812      	ldr	r2, [r2, #0]
 8002eb6:	f023 4363 	bic.w	r3, r3, #3808428032	; 0xe3000000
 8002eba:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 8002ebe:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	6959      	ldr	r1, [r3, #20]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	69da      	ldr	r2, [r3, #28]
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6a1b      	ldr	r3, [r3, #32]
 8002ece:	3b01      	subs	r3, #1
 8002ed0:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8002ed2:	431a      	orrs	r2, r3
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed8:	3b01      	subs	r3, #1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8002eda:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	430a      	orrs	r2, r1
 8002ee2:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	685a      	ldr	r2, [r3, #4]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	68da      	ldr	r2, [r3, #12]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	699a      	ldr	r2, [r3, #24]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	7c1a      	ldrb	r2, [r3, #16]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f042 0201 	orr.w	r2, r2, #1
 8002f14:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2201      	movs	r2, #1
 8002f1a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 8002f1e:	2300      	movs	r3, #0
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	3708      	adds	r7, #8
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}
 8002f28:	40016100 	.word	0x40016100

08002f2c <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b087      	sub	sp, #28
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	60f8      	str	r0, [r7, #12]
 8002f34:	60b9      	str	r1, [r7, #8]
 8002f36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d02e      	beq.n	8002fa4 <HAL_DFSDM_FilterConfigRegChannel+0x78>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8002f4c:	2bff      	cmp	r3, #255	; 0xff
 8002f4e:	d029      	beq.n	8002fa4 <HAL_DFSDM_FilterConfigRegChannel+0x78>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	68fa      	ldr	r2, [r7, #12]
 8002f58:	6812      	ldr	r2, [r2, #0]
 8002f5a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002f5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f62:	6013      	str	r3, [r2, #0]
    if (ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d10d      	bne.n	8002f86 <HAL_DFSDM_FilterConfigRegChannel+0x5a>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)(((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	021b      	lsls	r3, r3, #8
 8002f74:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002f78:	431a      	orrs	r2, r3
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002f82:	601a      	str	r2, [r3, #0]
 8002f84:	e00a      	b.n	8002f9c <HAL_DFSDM_FilterConfigRegChannel+0x70>
                                                    DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	6819      	ldr	r1, [r3, #0]
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	021b      	lsls	r3, r3, #8
 8002f90:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	430a      	orrs	r2, r1
 8002f9a:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	631a      	str	r2, [r3, #48]	; 0x30
 8002fa2:	e001      	b.n	8002fa8 <HAL_DFSDM_FilterConfigRegChannel+0x7c>
  }
  else
  {
    status = HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 8002fa8:	7dfb      	ldrb	r3, [r7, #23]
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	371c      	adds	r7, #28
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr
	...

08002fb8 <HAL_DFSDM_FilterRegularStart_DMA>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStart_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   int32_t                    *pData,
                                                   uint32_t                    Length)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b086      	sub	sp, #24
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	60f8      	str	r0, [r7, #12]
 8002fc0:	60b9      	str	r1, [r7, #8]
 8002fc2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check destination address and length */
  if ((pData == NULL) || (Length == 0U))
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d002      	beq.n	8002fd4 <HAL_DFSDM_FilterRegularStart_DMA+0x1c>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d102      	bne.n	8002fda <HAL_DFSDM_FilterRegularStart_DMA+0x22>
  {
    status = HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	75fb      	strb	r3, [r7, #23]
 8002fd8:	e064      	b.n	80030a4 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check that DMA is enabled for regular conversion */
  else if ((hdfsdm_filter->Instance->FLTCR1 & DFSDM_FLTCR1_RDMAEN) != DFSDM_FLTCR1_RDMAEN)
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fe4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002fe8:	d002      	beq.n	8002ff0 <HAL_DFSDM_FilterRegularStart_DMA+0x38>
  {
    status = HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	75fb      	strb	r3, [r7, #23]
 8002fee:	e059      	b.n	80030a4 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check parameters compatibility */
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d10e      	bne.n	8003016 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d10a      	bne.n	8003016 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003004:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8003006:	2b00      	cmp	r3, #0
 8003008:	d105      	bne.n	8003016 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2b01      	cmp	r3, #1
 800300e:	d002      	beq.n	8003016 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (Length != 1U))
  {
    status = HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	75fb      	strb	r3, [r7, #23]
 8003014:	e046      	b.n	80030a4 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800301a:	2b00      	cmp	r3, #0
 800301c:	d10b      	bne.n	8003036 <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8003022:	2b00      	cmp	r3, #0
 8003024:	d107      	bne.n	8003036 <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR))
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800302a:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 800302c:	2b20      	cmp	r3, #32
 800302e:	d102      	bne.n	8003036 <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
  {
    status = HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	75fb      	strb	r3, [r7, #23]
 8003034:	e036      	b.n	80030a4 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check DFSDM filter state */
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800303c:	2b01      	cmp	r3, #1
 800303e:	d004      	beq.n	800304a <HAL_DFSDM_FilterRegularStart_DMA+0x92>
           (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ))
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8003046:	2b03      	cmp	r3, #3
 8003048:	d12a      	bne.n	80030a0 <HAL_DFSDM_FilterRegularStart_DMA+0xe8>
  {
    /* Set callbacks on DMA handler */
    hdfsdm_filter->hdmaReg->XferCpltCallback = DFSDM_DMARegularConvCplt;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800304e:	4a18      	ldr	r2, [pc, #96]	; (80030b0 <HAL_DFSDM_FilterRegularStart_DMA+0xf8>)
 8003050:	62da      	str	r2, [r3, #44]	; 0x2c
    hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003056:	4a17      	ldr	r2, [pc, #92]	; (80030b4 <HAL_DFSDM_FilterRegularStart_DMA+0xfc>)
 8003058:	635a      	str	r2, [r3, #52]	; 0x34
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800305e:	69db      	ldr	r3, [r3, #28]
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 8003060:	2b20      	cmp	r3, #32
 8003062:	d101      	bne.n	8003068 <HAL_DFSDM_FilterRegularStart_DMA+0xb0>
 8003064:	4a14      	ldr	r2, [pc, #80]	; (80030b8 <HAL_DFSDM_FilterRegularStart_DMA+0x100>)
 8003066:	e000      	b.n	800306a <HAL_DFSDM_FilterRegularStart_DMA+0xb2>
 8003068:	2200      	movs	r2, #0
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800306e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Start DMA in interrupt mode */
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	331c      	adds	r3, #28
 800307a:	4619      	mov	r1, r3
 800307c:	68ba      	ldr	r2, [r7, #8]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	f000 fa0c 	bl	800349c <HAL_DMA_Start_IT>
 8003084:	4603      	mov	r3, r0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d006      	beq.n	8003098 <HAL_DFSDM_FilterRegularStart_DMA+0xe0>
                         (uint32_t) pData, Length) != HAL_OK)
    {
      /* Set DFSDM filter in error state */
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	22ff      	movs	r2, #255	; 0xff
 800308e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      status = HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	75fb      	strb	r3, [r7, #23]
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8003096:	e005      	b.n	80030a4 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
    else
    {
      /* Start regular conversion */
      DFSDM_RegConvStart(hdfsdm_filter);
 8003098:	68f8      	ldr	r0, [r7, #12]
 800309a:	f000 f8b3 	bl	8003204 <DFSDM_RegConvStart>
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 800309e:	e001      	b.n	80030a4 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
  }
  else
  {
    status = HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 80030a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3718      	adds	r7, #24
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	bf00      	nop
 80030b0:	0800312d 	.word	0x0800312d
 80030b4:	08003149 	.word	0x08003149
 80030b8:	08003111 	.word	0x08003111

080030bc <HAL_DFSDM_FilterRegularStop_DMA>:
  * @note   This function should be called only if regular conversion is ongoing.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStop_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b084      	sub	sp, #16
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030c4:	2300      	movs	r3, #0
 80030c6:	73fb      	strb	r3, [r7, #15]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG) && \
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80030ce:	2b02      	cmp	r3, #2
 80030d0:	d007      	beq.n	80030e2 <HAL_DFSDM_FilterRegularStop_DMA+0x26>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG_INJ))
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG) && \
 80030d8:	2b04      	cmp	r3, #4
 80030da:	d002      	beq.n	80030e2 <HAL_DFSDM_FilterRegularStop_DMA+0x26>
  {
    /* Return error status */
    status = HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	73fb      	strb	r3, [r7, #15]
 80030e0:	e007      	b.n	80030f2 <HAL_DFSDM_FilterRegularStop_DMA+0x36>
  else
  {
    /* Stop current DMA transfer */
    /* No need to check the returned value of HAL_DMA_Abort. */
    /* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for DFSDM. */
    (void) HAL_DMA_Abort(hdfsdm_filter->hdmaReg);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030e6:	4618      	mov	r0, r3
 80030e8:	f000 fa53 	bl	8003592 <HAL_DMA_Abort>

    /* Stop regular conversion */
    DFSDM_RegConvStop(hdfsdm_filter);
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	f000 f8df 	bl	80032b0 <DFSDM_RegConvStop>
  }
  /* Return function status */
  return status;
 80030f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3710      	adds	r7, #16
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}

080030fc <HAL_DFSDM_FilterErrorCallback>:
  * @brief  Error callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterErrorCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b083      	sub	sp, #12
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterErrorCallback could be implemented in the user file.
   */
}
 8003104:	bf00      	nop
 8003106:	370c      	adds	r7, #12
 8003108:	46bd      	mov	sp, r7
 800310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310e:	4770      	bx	lr

08003110 <DFSDM_DMARegularHalfConvCplt>:
  * @brief  DMA half transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b084      	sub	sp, #16
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800311c:	60fb      	str	r3, [r7, #12]

  /* Call regular half conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvHalfCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvHalfCpltCallback(hdfsdm_filter);
 800311e:	68f8      	ldr	r0, [r7, #12]
 8003120:	f7fe fca0 	bl	8001a64 <HAL_DFSDM_FilterRegConvHalfCpltCallback>
#endif
}
 8003124:	bf00      	nop
 8003126:	3710      	adds	r7, #16
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}

0800312c <DFSDM_DMARegularConvCplt>:
  * @brief  DMA transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularConvCplt(DMA_HandleTypeDef *hdma)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b084      	sub	sp, #16
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003138:	60fb      	str	r3, [r7, #12]

  /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 800313a:	68f8      	ldr	r0, [r7, #12]
 800313c:	f7fe fc82 	bl	8001a44 <HAL_DFSDM_FilterRegConvCpltCallback>
#endif
}
 8003140:	bf00      	nop
 8003142:	3710      	adds	r7, #16
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}

08003148 <DFSDM_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMAError(DMA_HandleTypeDef *hdma)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b084      	sub	sp, #16
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003154:	60fb      	str	r3, [r7, #12]

  /* Update error code */
  hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_DMA;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2203      	movs	r2, #3
 800315a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 800315c:	68f8      	ldr	r0, [r7, #12]
 800315e:	f7ff ffcd 	bl	80030fc <HAL_DFSDM_FilterErrorCallback>
#endif
}
 8003162:	bf00      	nop
 8003164:	3710      	adds	r7, #16
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
	...

0800316c <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 800316c:	b480      	push	{r7}
 800316e:	b085      	sub	sp, #20
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	4a1c      	ldr	r2, [pc, #112]	; (80031e8 <DFSDM_GetChannelFromInstance+0x7c>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d102      	bne.n	8003182 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 800317c:	2300      	movs	r3, #0
 800317e:	60fb      	str	r3, [r7, #12]
 8003180:	e02b      	b.n	80031da <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4a19      	ldr	r2, [pc, #100]	; (80031ec <DFSDM_GetChannelFromInstance+0x80>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d102      	bne.n	8003190 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 800318a:	2301      	movs	r3, #1
 800318c:	60fb      	str	r3, [r7, #12]
 800318e:	e024      	b.n	80031da <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	4a17      	ldr	r2, [pc, #92]	; (80031f0 <DFSDM_GetChannelFromInstance+0x84>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d102      	bne.n	800319e <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8003198:	2302      	movs	r3, #2
 800319a:	60fb      	str	r3, [r7, #12]
 800319c:	e01d      	b.n	80031da <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4a14      	ldr	r2, [pc, #80]	; (80031f4 <DFSDM_GetChannelFromInstance+0x88>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d102      	bne.n	80031ac <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 80031a6:	2304      	movs	r3, #4
 80031a8:	60fb      	str	r3, [r7, #12]
 80031aa:	e016      	b.n	80031da <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	4a12      	ldr	r2, [pc, #72]	; (80031f8 <DFSDM_GetChannelFromInstance+0x8c>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d102      	bne.n	80031ba <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 80031b4:	2305      	movs	r3, #5
 80031b6:	60fb      	str	r3, [r7, #12]
 80031b8:	e00f      	b.n	80031da <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4a0f      	ldr	r2, [pc, #60]	; (80031fc <DFSDM_GetChannelFromInstance+0x90>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d102      	bne.n	80031c8 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 80031c2:	2306      	movs	r3, #6
 80031c4:	60fb      	str	r3, [r7, #12]
 80031c6:	e008      	b.n	80031da <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	4a0d      	ldr	r2, [pc, #52]	; (8003200 <DFSDM_GetChannelFromInstance+0x94>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d102      	bne.n	80031d6 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 80031d0:	2307      	movs	r3, #7
 80031d2:	60fb      	str	r3, [r7, #12]
 80031d4:	e001      	b.n	80031da <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 80031d6:	2303      	movs	r3, #3
 80031d8:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 80031da:	68fb      	ldr	r3, [r7, #12]
}
 80031dc:	4618      	mov	r0, r3
 80031de:	3714      	adds	r7, #20
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr
 80031e8:	40016000 	.word	0x40016000
 80031ec:	40016020 	.word	0x40016020
 80031f0:	40016040 	.word	0x40016040
 80031f4:	40016080 	.word	0x40016080
 80031f8:	400160a0 	.word	0x400160a0
 80031fc:	400160c0 	.word	0x400160c0
 8003200:	400160e0 	.word	0x400160e0

08003204 <DFSDM_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8003204:	b480      	push	{r7}
 8003206:	b083      	sub	sp, #12
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  /* Check regular trigger */
  if (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003210:	2b00      	cmp	r3, #0
 8003212:	d108      	bne.n	8003226 <DFSDM_RegConvStart+0x22>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003222:	601a      	str	r2, [r3, #0]
 8003224:	e033      	b.n	800328e <DFSDM_RegConvStart+0x8a>
  }
  else /* synchronous trigger */
  {
    /* Disable DFSDM filter */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f022 0201 	bic.w	r2, r2, #1
 8003234:	601a      	str	r2, [r3, #0]

    /* Set RSYNC bit in DFSDM_FLTCR1 register */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8003244:	601a      	str	r2, [r3, #0]

    /* Enable DFSDM  filter */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f042 0201 	orr.w	r2, r2, #1
 8003254:	601a      	str	r2, [r3, #0]

    /* If injected conversion was in progress, restart it */
    if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800325c:	2b03      	cmp	r3, #3
 800325e:	d116      	bne.n	800328e <DFSDM_RegConvStart+0x8a>
    {
      if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003264:	2b00      	cmp	r3, #0
 8003266:	d107      	bne.n	8003278 <DFSDM_RegConvStart+0x74>
      {
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f042 0202 	orr.w	r2, r2, #2
 8003276:	601a      	str	r2, [r3, #0]
      }
      /* Update remaining injected conversions */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
 800327e:	2b01      	cmp	r3, #1
 8003280:	d102      	bne.n	8003288 <DFSDM_RegConvStart+0x84>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003286:	e000      	b.n	800328a <DFSDM_RegConvStart+0x86>
 8003288:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 800328a:	687a      	ldr	r2, [r7, #4]
 800328c:	6493      	str	r3, [r2, #72]	; 0x48
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                         HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 8003294:	2b01      	cmp	r3, #1
 8003296:	d101      	bne.n	800329c <DFSDM_RegConvStart+0x98>
 8003298:	2202      	movs	r2, #2
 800329a:	e000      	b.n	800329e <DFSDM_RegConvStart+0x9a>
 800329c:	2204      	movs	r2, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 80032a4:	bf00      	nop
 80032a6:	370c      	adds	r7, #12
 80032a8:	46bd      	mov	sp, r7
 80032aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ae:	4770      	bx	lr

080032b0 <DFSDM_RegConvStop>:
  * @brief  This function allows to really stop regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStop(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b083      	sub	sp, #12
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  /* Disable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f022 0201 	bic.w	r2, r2, #1
 80032c6:	601a      	str	r2, [r3, #0]

  /* If regular trigger was synchronous, reset RSYNC bit in DFSDM_FLTCR1 register */
  if (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SYNC_TRIGGER)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d107      	bne.n	80032e0 <DFSDM_RegConvStop+0x30>
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 80032de:	601a      	str	r2, [r3, #0]
  }

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f042 0201 	orr.w	r2, r2, #1
 80032ee:	601a      	str	r2, [r3, #0]

  /* If injected conversion was in progress, restart it */
  if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG_INJ)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80032f6:	2b04      	cmp	r3, #4
 80032f8:	d116      	bne.n	8003328 <DFSDM_RegConvStop+0x78>
  {
    if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d107      	bne.n	8003312 <DFSDM_RegConvStop+0x62>
    {
      hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f042 0202 	orr.w	r2, r2, #2
 8003310:	601a      	str	r2, [r3, #0]
    }
    /* Update remaining injected conversions */
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                      hdfsdm_filter->InjectedChannelsNbr : 1U;
 8003318:	2b01      	cmp	r3, #1
 800331a:	d102      	bne.n	8003322 <DFSDM_RegConvStop+0x72>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003320:	e000      	b.n	8003324 <DFSDM_RegConvStop+0x74>
 8003322:	2301      	movs	r3, #1
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8003324:	687a      	ldr	r2, [r7, #4]
 8003326:	6493      	str	r3, [r2, #72]	; 0x48
  }

  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                         HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_INJ;
 800332e:	2b02      	cmp	r3, #2
 8003330:	d101      	bne.n	8003336 <DFSDM_RegConvStop+0x86>
 8003332:	2201      	movs	r2, #1
 8003334:	e000      	b.n	8003338 <DFSDM_RegConvStop+0x88>
 8003336:	2203      	movs	r2, #3
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 800333e:	bf00      	nop
 8003340:	370c      	adds	r7, #12
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr
	...

0800334c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b084      	sub	sp, #16
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d101      	bne.n	800335e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e08d      	b.n	800347a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	461a      	mov	r2, r3
 8003364:	4b47      	ldr	r3, [pc, #284]	; (8003484 <HAL_DMA_Init+0x138>)
 8003366:	429a      	cmp	r2, r3
 8003368:	d80f      	bhi.n	800338a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	461a      	mov	r2, r3
 8003370:	4b45      	ldr	r3, [pc, #276]	; (8003488 <HAL_DMA_Init+0x13c>)
 8003372:	4413      	add	r3, r2
 8003374:	4a45      	ldr	r2, [pc, #276]	; (800348c <HAL_DMA_Init+0x140>)
 8003376:	fba2 2303 	umull	r2, r3, r2, r3
 800337a:	091b      	lsrs	r3, r3, #4
 800337c:	009a      	lsls	r2, r3, #2
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4a42      	ldr	r2, [pc, #264]	; (8003490 <HAL_DMA_Init+0x144>)
 8003386:	641a      	str	r2, [r3, #64]	; 0x40
 8003388:	e00e      	b.n	80033a8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	461a      	mov	r2, r3
 8003390:	4b40      	ldr	r3, [pc, #256]	; (8003494 <HAL_DMA_Init+0x148>)
 8003392:	4413      	add	r3, r2
 8003394:	4a3d      	ldr	r2, [pc, #244]	; (800348c <HAL_DMA_Init+0x140>)
 8003396:	fba2 2303 	umull	r2, r3, r2, r3
 800339a:	091b      	lsrs	r3, r3, #4
 800339c:	009a      	lsls	r2, r3, #2
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	4a3c      	ldr	r2, [pc, #240]	; (8003498 <HAL_DMA_Init+0x14c>)
 80033a6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2202      	movs	r2, #2
 80033ac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80033be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033c2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80033cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	691b      	ldr	r3, [r3, #16]
 80033d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	699b      	ldr	r3, [r3, #24]
 80033de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033e4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6a1b      	ldr	r3, [r3, #32]
 80033ea:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80033ec:	68fa      	ldr	r2, [r7, #12]
 80033ee:	4313      	orrs	r3, r2
 80033f0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	68fa      	ldr	r2, [r7, #12]
 80033f8:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f000 fa72 	bl	80038e4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003408:	d102      	bne.n	8003410 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2200      	movs	r2, #0
 800340e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	685a      	ldr	r2, [r3, #4]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003418:	b2d2      	uxtb	r2, r2
 800341a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003420:	687a      	ldr	r2, [r7, #4]
 8003422:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003424:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d010      	beq.n	8003450 <HAL_DMA_Init+0x104>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	2b04      	cmp	r3, #4
 8003434:	d80c      	bhi.n	8003450 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f000 fa92 	bl	8003960 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003440:	2200      	movs	r2, #0
 8003442:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003448:	687a      	ldr	r2, [r7, #4]
 800344a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800344c:	605a      	str	r2, [r3, #4]
 800344e:	e008      	b.n	8003462 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2200      	movs	r2, #0
 8003454:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2200      	movs	r2, #0
 800345a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2200      	movs	r2, #0
 8003460:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2200      	movs	r2, #0
 8003466:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2201      	movs	r2, #1
 800346c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2200      	movs	r2, #0
 8003474:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003478:	2300      	movs	r3, #0
}
 800347a:	4618      	mov	r0, r3
 800347c:	3710      	adds	r7, #16
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
 8003482:	bf00      	nop
 8003484:	40020407 	.word	0x40020407
 8003488:	bffdfff8 	.word	0xbffdfff8
 800348c:	cccccccd 	.word	0xcccccccd
 8003490:	40020000 	.word	0x40020000
 8003494:	bffdfbf8 	.word	0xbffdfbf8
 8003498:	40020400 	.word	0x40020400

0800349c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b086      	sub	sp, #24
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	60f8      	str	r0, [r7, #12]
 80034a4:	60b9      	str	r1, [r7, #8]
 80034a6:	607a      	str	r2, [r7, #4]
 80034a8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80034aa:	2300      	movs	r3, #0
 80034ac:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d101      	bne.n	80034bc <HAL_DMA_Start_IT+0x20>
 80034b8:	2302      	movs	r3, #2
 80034ba:	e066      	b.n	800358a <HAL_DMA_Start_IT+0xee>
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2201      	movs	r2, #1
 80034c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d155      	bne.n	800357c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2202      	movs	r2, #2
 80034d4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2200      	movs	r2, #0
 80034dc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f022 0201 	bic.w	r2, r2, #1
 80034ec:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	687a      	ldr	r2, [r7, #4]
 80034f2:	68b9      	ldr	r1, [r7, #8]
 80034f4:	68f8      	ldr	r0, [r7, #12]
 80034f6:	f000 f9b6 	bl	8003866 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d008      	beq.n	8003514 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f042 020e 	orr.w	r2, r2, #14
 8003510:	601a      	str	r2, [r3, #0]
 8003512:	e00f      	b.n	8003534 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f022 0204 	bic.w	r2, r2, #4
 8003522:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f042 020a 	orr.w	r2, r2, #10
 8003532:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800353e:	2b00      	cmp	r3, #0
 8003540:	d007      	beq.n	8003552 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800354c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003550:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003556:	2b00      	cmp	r3, #0
 8003558:	d007      	beq.n	800356a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800355e:	681a      	ldr	r2, [r3, #0]
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003564:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003568:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f042 0201 	orr.w	r2, r2, #1
 8003578:	601a      	str	r2, [r3, #0]
 800357a:	e005      	b.n	8003588 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2200      	movs	r2, #0
 8003580:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003584:	2302      	movs	r3, #2
 8003586:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003588:	7dfb      	ldrb	r3, [r7, #23]
}
 800358a:	4618      	mov	r0, r3
 800358c:	3718      	adds	r7, #24
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}

08003592 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003592:	b480      	push	{r7}
 8003594:	b085      	sub	sp, #20
 8003596:	af00      	add	r7, sp, #0
 8003598:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800359a:	2300      	movs	r3, #0
 800359c:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	2b02      	cmp	r3, #2
 80035a8:	d008      	beq.n	80035bc <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2204      	movs	r2, #4
 80035ae:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2200      	movs	r2, #0
 80035b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	e040      	b.n	800363e <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f022 020e 	bic.w	r2, r2, #14
 80035ca:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035d6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80035da:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f022 0201 	bic.w	r2, r2, #1
 80035ea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035f0:	f003 021c 	and.w	r2, r3, #28
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f8:	2101      	movs	r1, #1
 80035fa:	fa01 f202 	lsl.w	r2, r1, r2
 80035fe:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003604:	687a      	ldr	r2, [r7, #4]
 8003606:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003608:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800360e:	2b00      	cmp	r3, #0
 8003610:	d00c      	beq.n	800362c <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800361c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003620:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003626:	687a      	ldr	r2, [r7, #4]
 8003628:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800362a:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2201      	movs	r2, #1
 8003630:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2200      	movs	r2, #0
 8003638:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800363c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800363e:	4618      	mov	r0, r3
 8003640:	3714      	adds	r7, #20
 8003642:	46bd      	mov	sp, r7
 8003644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003648:	4770      	bx	lr

0800364a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800364a:	b580      	push	{r7, lr}
 800364c:	b084      	sub	sp, #16
 800364e:	af00      	add	r7, sp, #0
 8003650:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003652:	2300      	movs	r3, #0
 8003654:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800365c:	b2db      	uxtb	r3, r3
 800365e:	2b02      	cmp	r3, #2
 8003660:	d005      	beq.n	800366e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2204      	movs	r2, #4
 8003666:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	73fb      	strb	r3, [r7, #15]
 800366c:	e047      	b.n	80036fe <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f022 020e 	bic.w	r2, r2, #14
 800367c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f022 0201 	bic.w	r2, r2, #1
 800368c:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003698:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800369c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036a2:	f003 021c 	and.w	r2, r3, #28
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036aa:	2101      	movs	r1, #1
 80036ac:	fa01 f202 	lsl.w	r2, r1, r2
 80036b0:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80036ba:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d00c      	beq.n	80036de <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036ce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80036d2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036d8:	687a      	ldr	r2, [r7, #4]
 80036da:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80036dc:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2201      	movs	r2, #1
 80036e2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2200      	movs	r2, #0
 80036ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d003      	beq.n	80036fe <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	4798      	blx	r3
    }
  }
  return status;
 80036fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003700:	4618      	mov	r0, r3
 8003702:	3710      	adds	r7, #16
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}

08003708 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b084      	sub	sp, #16
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003724:	f003 031c 	and.w	r3, r3, #28
 8003728:	2204      	movs	r2, #4
 800372a:	409a      	lsls	r2, r3
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	4013      	ands	r3, r2
 8003730:	2b00      	cmp	r3, #0
 8003732:	d026      	beq.n	8003782 <HAL_DMA_IRQHandler+0x7a>
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	f003 0304 	and.w	r3, r3, #4
 800373a:	2b00      	cmp	r3, #0
 800373c:	d021      	beq.n	8003782 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f003 0320 	and.w	r3, r3, #32
 8003748:	2b00      	cmp	r3, #0
 800374a:	d107      	bne.n	800375c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f022 0204 	bic.w	r2, r2, #4
 800375a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003760:	f003 021c 	and.w	r2, r3, #28
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003768:	2104      	movs	r1, #4
 800376a:	fa01 f202 	lsl.w	r2, r1, r2
 800376e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003774:	2b00      	cmp	r3, #0
 8003776:	d071      	beq.n	800385c <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003780:	e06c      	b.n	800385c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003786:	f003 031c 	and.w	r3, r3, #28
 800378a:	2202      	movs	r2, #2
 800378c:	409a      	lsls	r2, r3
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	4013      	ands	r3, r2
 8003792:	2b00      	cmp	r3, #0
 8003794:	d02e      	beq.n	80037f4 <HAL_DMA_IRQHandler+0xec>
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	f003 0302 	and.w	r3, r3, #2
 800379c:	2b00      	cmp	r3, #0
 800379e:	d029      	beq.n	80037f4 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 0320 	and.w	r3, r3, #32
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d10b      	bne.n	80037c6 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f022 020a 	bic.w	r2, r2, #10
 80037bc:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2201      	movs	r2, #1
 80037c2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ca:	f003 021c 	and.w	r2, r3, #28
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d2:	2102      	movs	r1, #2
 80037d4:	fa01 f202 	lsl.w	r2, r1, r2
 80037d8:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2200      	movs	r2, #0
 80037de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d038      	beq.n	800385c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80037f2:	e033      	b.n	800385c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037f8:	f003 031c 	and.w	r3, r3, #28
 80037fc:	2208      	movs	r2, #8
 80037fe:	409a      	lsls	r2, r3
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	4013      	ands	r3, r2
 8003804:	2b00      	cmp	r3, #0
 8003806:	d02a      	beq.n	800385e <HAL_DMA_IRQHandler+0x156>
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	f003 0308 	and.w	r3, r3, #8
 800380e:	2b00      	cmp	r3, #0
 8003810:	d025      	beq.n	800385e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f022 020e 	bic.w	r2, r2, #14
 8003820:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003826:	f003 021c 	and.w	r2, r3, #28
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800382e:	2101      	movs	r1, #1
 8003830:	fa01 f202 	lsl.w	r2, r1, r2
 8003834:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2201      	movs	r2, #1
 800383a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2201      	movs	r2, #1
 8003840:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2200      	movs	r2, #0
 8003848:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003850:	2b00      	cmp	r3, #0
 8003852:	d004      	beq.n	800385e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800385c:	bf00      	nop
 800385e:	bf00      	nop
}
 8003860:	3710      	adds	r7, #16
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}

08003866 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003866:	b480      	push	{r7}
 8003868:	b085      	sub	sp, #20
 800386a:	af00      	add	r7, sp, #0
 800386c:	60f8      	str	r0, [r7, #12]
 800386e:	60b9      	str	r1, [r7, #8]
 8003870:	607a      	str	r2, [r7, #4]
 8003872:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003878:	68fa      	ldr	r2, [r7, #12]
 800387a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800387c:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003882:	2b00      	cmp	r3, #0
 8003884:	d004      	beq.n	8003890 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800388a:	68fa      	ldr	r2, [r7, #12]
 800388c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800388e:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003894:	f003 021c 	and.w	r2, r3, #28
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389c:	2101      	movs	r1, #1
 800389e:	fa01 f202 	lsl.w	r2, r1, r2
 80038a2:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	683a      	ldr	r2, [r7, #0]
 80038aa:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	2b10      	cmp	r3, #16
 80038b2:	d108      	bne.n	80038c6 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	687a      	ldr	r2, [r7, #4]
 80038ba:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	68ba      	ldr	r2, [r7, #8]
 80038c2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80038c4:	e007      	b.n	80038d6 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	68ba      	ldr	r2, [r7, #8]
 80038cc:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	687a      	ldr	r2, [r7, #4]
 80038d4:	60da      	str	r2, [r3, #12]
}
 80038d6:	bf00      	nop
 80038d8:	3714      	adds	r7, #20
 80038da:	46bd      	mov	sp, r7
 80038dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e0:	4770      	bx	lr
	...

080038e4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b085      	sub	sp, #20
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	461a      	mov	r2, r3
 80038f2:	4b17      	ldr	r3, [pc, #92]	; (8003950 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d80a      	bhi.n	800390e <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038fc:	089b      	lsrs	r3, r3, #2
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003904:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8003908:	687a      	ldr	r2, [r7, #4]
 800390a:	6493      	str	r3, [r2, #72]	; 0x48
 800390c:	e007      	b.n	800391e <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003912:	089b      	lsrs	r3, r3, #2
 8003914:	009a      	lsls	r2, r3, #2
 8003916:	4b0f      	ldr	r3, [pc, #60]	; (8003954 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003918:	4413      	add	r3, r2
 800391a:	687a      	ldr	r2, [r7, #4]
 800391c:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	b2db      	uxtb	r3, r3
 8003924:	3b08      	subs	r3, #8
 8003926:	4a0c      	ldr	r2, [pc, #48]	; (8003958 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003928:	fba2 2303 	umull	r2, r3, r2, r3
 800392c:	091b      	lsrs	r3, r3, #4
 800392e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	4a0a      	ldr	r2, [pc, #40]	; (800395c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003934:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	f003 031f 	and.w	r3, r3, #31
 800393c:	2201      	movs	r2, #1
 800393e:	409a      	lsls	r2, r3
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003944:	bf00      	nop
 8003946:	3714      	adds	r7, #20
 8003948:	46bd      	mov	sp, r7
 800394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394e:	4770      	bx	lr
 8003950:	40020407 	.word	0x40020407
 8003954:	4002081c 	.word	0x4002081c
 8003958:	cccccccd 	.word	0xcccccccd
 800395c:	40020880 	.word	0x40020880

08003960 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003960:	b480      	push	{r7}
 8003962:	b085      	sub	sp, #20
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	b2db      	uxtb	r3, r3
 800396e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003970:	68fa      	ldr	r2, [r7, #12]
 8003972:	4b0b      	ldr	r3, [pc, #44]	; (80039a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003974:	4413      	add	r3, r2
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	461a      	mov	r2, r3
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	4a08      	ldr	r2, [pc, #32]	; (80039a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003982:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	3b01      	subs	r3, #1
 8003988:	f003 0303 	and.w	r3, r3, #3
 800398c:	2201      	movs	r2, #1
 800398e:	409a      	lsls	r2, r3
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003994:	bf00      	nop
 8003996:	3714      	adds	r7, #20
 8003998:	46bd      	mov	sp, r7
 800399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399e:	4770      	bx	lr
 80039a0:	1000823f 	.word	0x1000823f
 80039a4:	40020940 	.word	0x40020940

080039a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b087      	sub	sp, #28
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
 80039b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80039b2:	2300      	movs	r3, #0
 80039b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80039b6:	e166      	b.n	8003c86 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	2101      	movs	r1, #1
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	fa01 f303 	lsl.w	r3, r1, r3
 80039c4:	4013      	ands	r3, r2
 80039c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	f000 8158 	beq.w	8003c80 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	f003 0303 	and.w	r3, r3, #3
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d005      	beq.n	80039e8 <HAL_GPIO_Init+0x40>
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	f003 0303 	and.w	r3, r3, #3
 80039e4:	2b02      	cmp	r3, #2
 80039e6:	d130      	bne.n	8003a4a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	005b      	lsls	r3, r3, #1
 80039f2:	2203      	movs	r2, #3
 80039f4:	fa02 f303 	lsl.w	r3, r2, r3
 80039f8:	43db      	mvns	r3, r3
 80039fa:	693a      	ldr	r2, [r7, #16]
 80039fc:	4013      	ands	r3, r2
 80039fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	68da      	ldr	r2, [r3, #12]
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	005b      	lsls	r3, r3, #1
 8003a08:	fa02 f303 	lsl.w	r3, r2, r3
 8003a0c:	693a      	ldr	r2, [r7, #16]
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	693a      	ldr	r2, [r7, #16]
 8003a16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003a1e:	2201      	movs	r2, #1
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	fa02 f303 	lsl.w	r3, r2, r3
 8003a26:	43db      	mvns	r3, r3
 8003a28:	693a      	ldr	r2, [r7, #16]
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	091b      	lsrs	r3, r3, #4
 8003a34:	f003 0201 	and.w	r2, r3, #1
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a3e:	693a      	ldr	r2, [r7, #16]
 8003a40:	4313      	orrs	r3, r2
 8003a42:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	693a      	ldr	r2, [r7, #16]
 8003a48:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	f003 0303 	and.w	r3, r3, #3
 8003a52:	2b03      	cmp	r3, #3
 8003a54:	d017      	beq.n	8003a86 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	68db      	ldr	r3, [r3, #12]
 8003a5a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	005b      	lsls	r3, r3, #1
 8003a60:	2203      	movs	r2, #3
 8003a62:	fa02 f303 	lsl.w	r3, r2, r3
 8003a66:	43db      	mvns	r3, r3
 8003a68:	693a      	ldr	r2, [r7, #16]
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	689a      	ldr	r2, [r3, #8]
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	005b      	lsls	r3, r3, #1
 8003a76:	fa02 f303 	lsl.w	r3, r2, r3
 8003a7a:	693a      	ldr	r2, [r7, #16]
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	693a      	ldr	r2, [r7, #16]
 8003a84:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	f003 0303 	and.w	r3, r3, #3
 8003a8e:	2b02      	cmp	r3, #2
 8003a90:	d123      	bne.n	8003ada <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	08da      	lsrs	r2, r3, #3
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	3208      	adds	r2, #8
 8003a9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a9e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	f003 0307 	and.w	r3, r3, #7
 8003aa6:	009b      	lsls	r3, r3, #2
 8003aa8:	220f      	movs	r2, #15
 8003aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8003aae:	43db      	mvns	r3, r3
 8003ab0:	693a      	ldr	r2, [r7, #16]
 8003ab2:	4013      	ands	r3, r2
 8003ab4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	691a      	ldr	r2, [r3, #16]
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	f003 0307 	and.w	r3, r3, #7
 8003ac0:	009b      	lsls	r3, r3, #2
 8003ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac6:	693a      	ldr	r2, [r7, #16]
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	08da      	lsrs	r2, r3, #3
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	3208      	adds	r2, #8
 8003ad4:	6939      	ldr	r1, [r7, #16]
 8003ad6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	005b      	lsls	r3, r3, #1
 8003ae4:	2203      	movs	r2, #3
 8003ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aea:	43db      	mvns	r3, r3
 8003aec:	693a      	ldr	r2, [r7, #16]
 8003aee:	4013      	ands	r3, r2
 8003af0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	f003 0203 	and.w	r2, r3, #3
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	005b      	lsls	r3, r3, #1
 8003afe:	fa02 f303 	lsl.w	r3, r2, r3
 8003b02:	693a      	ldr	r2, [r7, #16]
 8003b04:	4313      	orrs	r3, r2
 8003b06:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	693a      	ldr	r2, [r7, #16]
 8003b0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	f000 80b2 	beq.w	8003c80 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b1c:	4b61      	ldr	r3, [pc, #388]	; (8003ca4 <HAL_GPIO_Init+0x2fc>)
 8003b1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b20:	4a60      	ldr	r2, [pc, #384]	; (8003ca4 <HAL_GPIO_Init+0x2fc>)
 8003b22:	f043 0301 	orr.w	r3, r3, #1
 8003b26:	6613      	str	r3, [r2, #96]	; 0x60
 8003b28:	4b5e      	ldr	r3, [pc, #376]	; (8003ca4 <HAL_GPIO_Init+0x2fc>)
 8003b2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b2c:	f003 0301 	and.w	r3, r3, #1
 8003b30:	60bb      	str	r3, [r7, #8]
 8003b32:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003b34:	4a5c      	ldr	r2, [pc, #368]	; (8003ca8 <HAL_GPIO_Init+0x300>)
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	089b      	lsrs	r3, r3, #2
 8003b3a:	3302      	adds	r3, #2
 8003b3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b40:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	f003 0303 	and.w	r3, r3, #3
 8003b48:	009b      	lsls	r3, r3, #2
 8003b4a:	220f      	movs	r2, #15
 8003b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b50:	43db      	mvns	r3, r3
 8003b52:	693a      	ldr	r2, [r7, #16]
 8003b54:	4013      	ands	r3, r2
 8003b56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003b5e:	d02b      	beq.n	8003bb8 <HAL_GPIO_Init+0x210>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	4a52      	ldr	r2, [pc, #328]	; (8003cac <HAL_GPIO_Init+0x304>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d025      	beq.n	8003bb4 <HAL_GPIO_Init+0x20c>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	4a51      	ldr	r2, [pc, #324]	; (8003cb0 <HAL_GPIO_Init+0x308>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d01f      	beq.n	8003bb0 <HAL_GPIO_Init+0x208>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	4a50      	ldr	r2, [pc, #320]	; (8003cb4 <HAL_GPIO_Init+0x30c>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d019      	beq.n	8003bac <HAL_GPIO_Init+0x204>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	4a4f      	ldr	r2, [pc, #316]	; (8003cb8 <HAL_GPIO_Init+0x310>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d013      	beq.n	8003ba8 <HAL_GPIO_Init+0x200>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	4a4e      	ldr	r2, [pc, #312]	; (8003cbc <HAL_GPIO_Init+0x314>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d00d      	beq.n	8003ba4 <HAL_GPIO_Init+0x1fc>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	4a4d      	ldr	r2, [pc, #308]	; (8003cc0 <HAL_GPIO_Init+0x318>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d007      	beq.n	8003ba0 <HAL_GPIO_Init+0x1f8>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	4a4c      	ldr	r2, [pc, #304]	; (8003cc4 <HAL_GPIO_Init+0x31c>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d101      	bne.n	8003b9c <HAL_GPIO_Init+0x1f4>
 8003b98:	2307      	movs	r3, #7
 8003b9a:	e00e      	b.n	8003bba <HAL_GPIO_Init+0x212>
 8003b9c:	2308      	movs	r3, #8
 8003b9e:	e00c      	b.n	8003bba <HAL_GPIO_Init+0x212>
 8003ba0:	2306      	movs	r3, #6
 8003ba2:	e00a      	b.n	8003bba <HAL_GPIO_Init+0x212>
 8003ba4:	2305      	movs	r3, #5
 8003ba6:	e008      	b.n	8003bba <HAL_GPIO_Init+0x212>
 8003ba8:	2304      	movs	r3, #4
 8003baa:	e006      	b.n	8003bba <HAL_GPIO_Init+0x212>
 8003bac:	2303      	movs	r3, #3
 8003bae:	e004      	b.n	8003bba <HAL_GPIO_Init+0x212>
 8003bb0:	2302      	movs	r3, #2
 8003bb2:	e002      	b.n	8003bba <HAL_GPIO_Init+0x212>
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e000      	b.n	8003bba <HAL_GPIO_Init+0x212>
 8003bb8:	2300      	movs	r3, #0
 8003bba:	697a      	ldr	r2, [r7, #20]
 8003bbc:	f002 0203 	and.w	r2, r2, #3
 8003bc0:	0092      	lsls	r2, r2, #2
 8003bc2:	4093      	lsls	r3, r2
 8003bc4:	693a      	ldr	r2, [r7, #16]
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003bca:	4937      	ldr	r1, [pc, #220]	; (8003ca8 <HAL_GPIO_Init+0x300>)
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	089b      	lsrs	r3, r3, #2
 8003bd0:	3302      	adds	r3, #2
 8003bd2:	693a      	ldr	r2, [r7, #16]
 8003bd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003bd8:	4b3b      	ldr	r3, [pc, #236]	; (8003cc8 <HAL_GPIO_Init+0x320>)
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	43db      	mvns	r3, r3
 8003be2:	693a      	ldr	r2, [r7, #16]
 8003be4:	4013      	ands	r3, r2
 8003be6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d003      	beq.n	8003bfc <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003bf4:	693a      	ldr	r2, [r7, #16]
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003bfc:	4a32      	ldr	r2, [pc, #200]	; (8003cc8 <HAL_GPIO_Init+0x320>)
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003c02:	4b31      	ldr	r3, [pc, #196]	; (8003cc8 <HAL_GPIO_Init+0x320>)
 8003c04:	68db      	ldr	r3, [r3, #12]
 8003c06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	43db      	mvns	r3, r3
 8003c0c:	693a      	ldr	r2, [r7, #16]
 8003c0e:	4013      	ands	r3, r2
 8003c10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d003      	beq.n	8003c26 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8003c1e:	693a      	ldr	r2, [r7, #16]
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	4313      	orrs	r3, r2
 8003c24:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003c26:	4a28      	ldr	r2, [pc, #160]	; (8003cc8 <HAL_GPIO_Init+0x320>)
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003c2c:	4b26      	ldr	r3, [pc, #152]	; (8003cc8 <HAL_GPIO_Init+0x320>)
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	43db      	mvns	r3, r3
 8003c36:	693a      	ldr	r2, [r7, #16]
 8003c38:	4013      	ands	r3, r2
 8003c3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d003      	beq.n	8003c50 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8003c48:	693a      	ldr	r2, [r7, #16]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003c50:	4a1d      	ldr	r2, [pc, #116]	; (8003cc8 <HAL_GPIO_Init+0x320>)
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003c56:	4b1c      	ldr	r3, [pc, #112]	; (8003cc8 <HAL_GPIO_Init+0x320>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	43db      	mvns	r3, r3
 8003c60:	693a      	ldr	r2, [r7, #16]
 8003c62:	4013      	ands	r3, r2
 8003c64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d003      	beq.n	8003c7a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8003c72:	693a      	ldr	r2, [r7, #16]
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	4313      	orrs	r3, r2
 8003c78:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003c7a:	4a13      	ldr	r2, [pc, #76]	; (8003cc8 <HAL_GPIO_Init+0x320>)
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	3301      	adds	r3, #1
 8003c84:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	fa22 f303 	lsr.w	r3, r2, r3
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	f47f ae91 	bne.w	80039b8 <HAL_GPIO_Init+0x10>
  }
}
 8003c96:	bf00      	nop
 8003c98:	bf00      	nop
 8003c9a:	371c      	adds	r7, #28
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr
 8003ca4:	40021000 	.word	0x40021000
 8003ca8:	40010000 	.word	0x40010000
 8003cac:	48000400 	.word	0x48000400
 8003cb0:	48000800 	.word	0x48000800
 8003cb4:	48000c00 	.word	0x48000c00
 8003cb8:	48001000 	.word	0x48001000
 8003cbc:	48001400 	.word	0x48001400
 8003cc0:	48001800 	.word	0x48001800
 8003cc4:	48001c00 	.word	0x48001c00
 8003cc8:	40010400 	.word	0x40010400

08003ccc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b082      	sub	sp, #8
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003cd6:	4b08      	ldr	r3, [pc, #32]	; (8003cf8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003cd8:	695a      	ldr	r2, [r3, #20]
 8003cda:	88fb      	ldrh	r3, [r7, #6]
 8003cdc:	4013      	ands	r3, r2
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d006      	beq.n	8003cf0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003ce2:	4a05      	ldr	r2, [pc, #20]	; (8003cf8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ce4:	88fb      	ldrh	r3, [r7, #6]
 8003ce6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003ce8:	88fb      	ldrh	r3, [r7, #6]
 8003cea:	4618      	mov	r0, r3
 8003cec:	f7fd fe90 	bl	8001a10 <HAL_GPIO_EXTI_Callback>
  }
}
 8003cf0:	bf00      	nop
 8003cf2:	3708      	adds	r7, #8
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}
 8003cf8:	40010400 	.word	0x40010400

08003cfc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d00:	4b0d      	ldr	r3, [pc, #52]	; (8003d38 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003d08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d0c:	d102      	bne.n	8003d14 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8003d0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d12:	e00b      	b.n	8003d2c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8003d14:	4b08      	ldr	r3, [pc, #32]	; (8003d38 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003d16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d22:	d102      	bne.n	8003d2a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8003d24:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003d28:	e000      	b.n	8003d2c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8003d2a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr
 8003d36:	bf00      	nop
 8003d38:	40007000 	.word	0x40007000

08003d3c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b088      	sub	sp, #32
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d102      	bne.n	8003d50 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	f000 bc08 	b.w	8004560 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d50:	4b96      	ldr	r3, [pc, #600]	; (8003fac <HAL_RCC_OscConfig+0x270>)
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	f003 030c 	and.w	r3, r3, #12
 8003d58:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d5a:	4b94      	ldr	r3, [pc, #592]	; (8003fac <HAL_RCC_OscConfig+0x270>)
 8003d5c:	68db      	ldr	r3, [r3, #12]
 8003d5e:	f003 0303 	and.w	r3, r3, #3
 8003d62:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 0310 	and.w	r3, r3, #16
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	f000 80e4 	beq.w	8003f3a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003d72:	69bb      	ldr	r3, [r7, #24]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d007      	beq.n	8003d88 <HAL_RCC_OscConfig+0x4c>
 8003d78:	69bb      	ldr	r3, [r7, #24]
 8003d7a:	2b0c      	cmp	r3, #12
 8003d7c:	f040 808b 	bne.w	8003e96 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	f040 8087 	bne.w	8003e96 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003d88:	4b88      	ldr	r3, [pc, #544]	; (8003fac <HAL_RCC_OscConfig+0x270>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 0302 	and.w	r3, r3, #2
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d005      	beq.n	8003da0 <HAL_RCC_OscConfig+0x64>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	699b      	ldr	r3, [r3, #24]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d101      	bne.n	8003da0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	e3df      	b.n	8004560 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6a1a      	ldr	r2, [r3, #32]
 8003da4:	4b81      	ldr	r3, [pc, #516]	; (8003fac <HAL_RCC_OscConfig+0x270>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f003 0308 	and.w	r3, r3, #8
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d004      	beq.n	8003dba <HAL_RCC_OscConfig+0x7e>
 8003db0:	4b7e      	ldr	r3, [pc, #504]	; (8003fac <HAL_RCC_OscConfig+0x270>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003db8:	e005      	b.n	8003dc6 <HAL_RCC_OscConfig+0x8a>
 8003dba:	4b7c      	ldr	r3, [pc, #496]	; (8003fac <HAL_RCC_OscConfig+0x270>)
 8003dbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003dc0:	091b      	lsrs	r3, r3, #4
 8003dc2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d223      	bcs.n	8003e12 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6a1b      	ldr	r3, [r3, #32]
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f000 fdcc 	bl	800496c <RCC_SetFlashLatencyFromMSIRange>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d001      	beq.n	8003dde <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e3c0      	b.n	8004560 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003dde:	4b73      	ldr	r3, [pc, #460]	; (8003fac <HAL_RCC_OscConfig+0x270>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a72      	ldr	r2, [pc, #456]	; (8003fac <HAL_RCC_OscConfig+0x270>)
 8003de4:	f043 0308 	orr.w	r3, r3, #8
 8003de8:	6013      	str	r3, [r2, #0]
 8003dea:	4b70      	ldr	r3, [pc, #448]	; (8003fac <HAL_RCC_OscConfig+0x270>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6a1b      	ldr	r3, [r3, #32]
 8003df6:	496d      	ldr	r1, [pc, #436]	; (8003fac <HAL_RCC_OscConfig+0x270>)
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003dfc:	4b6b      	ldr	r3, [pc, #428]	; (8003fac <HAL_RCC_OscConfig+0x270>)
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	69db      	ldr	r3, [r3, #28]
 8003e08:	021b      	lsls	r3, r3, #8
 8003e0a:	4968      	ldr	r1, [pc, #416]	; (8003fac <HAL_RCC_OscConfig+0x270>)
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	604b      	str	r3, [r1, #4]
 8003e10:	e025      	b.n	8003e5e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e12:	4b66      	ldr	r3, [pc, #408]	; (8003fac <HAL_RCC_OscConfig+0x270>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a65      	ldr	r2, [pc, #404]	; (8003fac <HAL_RCC_OscConfig+0x270>)
 8003e18:	f043 0308 	orr.w	r3, r3, #8
 8003e1c:	6013      	str	r3, [r2, #0]
 8003e1e:	4b63      	ldr	r3, [pc, #396]	; (8003fac <HAL_RCC_OscConfig+0x270>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6a1b      	ldr	r3, [r3, #32]
 8003e2a:	4960      	ldr	r1, [pc, #384]	; (8003fac <HAL_RCC_OscConfig+0x270>)
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e30:	4b5e      	ldr	r3, [pc, #376]	; (8003fac <HAL_RCC_OscConfig+0x270>)
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	69db      	ldr	r3, [r3, #28]
 8003e3c:	021b      	lsls	r3, r3, #8
 8003e3e:	495b      	ldr	r1, [pc, #364]	; (8003fac <HAL_RCC_OscConfig+0x270>)
 8003e40:	4313      	orrs	r3, r2
 8003e42:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e44:	69bb      	ldr	r3, [r7, #24]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d109      	bne.n	8003e5e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6a1b      	ldr	r3, [r3, #32]
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f000 fd8c 	bl	800496c <RCC_SetFlashLatencyFromMSIRange>
 8003e54:	4603      	mov	r3, r0
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d001      	beq.n	8003e5e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e380      	b.n	8004560 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003e5e:	f000 fcc1 	bl	80047e4 <HAL_RCC_GetSysClockFreq>
 8003e62:	4602      	mov	r2, r0
 8003e64:	4b51      	ldr	r3, [pc, #324]	; (8003fac <HAL_RCC_OscConfig+0x270>)
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	091b      	lsrs	r3, r3, #4
 8003e6a:	f003 030f 	and.w	r3, r3, #15
 8003e6e:	4950      	ldr	r1, [pc, #320]	; (8003fb0 <HAL_RCC_OscConfig+0x274>)
 8003e70:	5ccb      	ldrb	r3, [r1, r3]
 8003e72:	f003 031f 	and.w	r3, r3, #31
 8003e76:	fa22 f303 	lsr.w	r3, r2, r3
 8003e7a:	4a4e      	ldr	r2, [pc, #312]	; (8003fb4 <HAL_RCC_OscConfig+0x278>)
 8003e7c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003e7e:	4b4e      	ldr	r3, [pc, #312]	; (8003fb8 <HAL_RCC_OscConfig+0x27c>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4618      	mov	r0, r3
 8003e84:	f7fe fa08 	bl	8002298 <HAL_InitTick>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003e8c:	7bfb      	ldrb	r3, [r7, #15]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d052      	beq.n	8003f38 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003e92:	7bfb      	ldrb	r3, [r7, #15]
 8003e94:	e364      	b.n	8004560 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	699b      	ldr	r3, [r3, #24]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d032      	beq.n	8003f04 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003e9e:	4b43      	ldr	r3, [pc, #268]	; (8003fac <HAL_RCC_OscConfig+0x270>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a42      	ldr	r2, [pc, #264]	; (8003fac <HAL_RCC_OscConfig+0x270>)
 8003ea4:	f043 0301 	orr.w	r3, r3, #1
 8003ea8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003eaa:	f7fe fa45 	bl	8002338 <HAL_GetTick>
 8003eae:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003eb0:	e008      	b.n	8003ec4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003eb2:	f7fe fa41 	bl	8002338 <HAL_GetTick>
 8003eb6:	4602      	mov	r2, r0
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	1ad3      	subs	r3, r2, r3
 8003ebc:	2b02      	cmp	r3, #2
 8003ebe:	d901      	bls.n	8003ec4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003ec0:	2303      	movs	r3, #3
 8003ec2:	e34d      	b.n	8004560 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003ec4:	4b39      	ldr	r3, [pc, #228]	; (8003fac <HAL_RCC_OscConfig+0x270>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f003 0302 	and.w	r3, r3, #2
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d0f0      	beq.n	8003eb2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ed0:	4b36      	ldr	r3, [pc, #216]	; (8003fac <HAL_RCC_OscConfig+0x270>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a35      	ldr	r2, [pc, #212]	; (8003fac <HAL_RCC_OscConfig+0x270>)
 8003ed6:	f043 0308 	orr.w	r3, r3, #8
 8003eda:	6013      	str	r3, [r2, #0]
 8003edc:	4b33      	ldr	r3, [pc, #204]	; (8003fac <HAL_RCC_OscConfig+0x270>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6a1b      	ldr	r3, [r3, #32]
 8003ee8:	4930      	ldr	r1, [pc, #192]	; (8003fac <HAL_RCC_OscConfig+0x270>)
 8003eea:	4313      	orrs	r3, r2
 8003eec:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003eee:	4b2f      	ldr	r3, [pc, #188]	; (8003fac <HAL_RCC_OscConfig+0x270>)
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	69db      	ldr	r3, [r3, #28]
 8003efa:	021b      	lsls	r3, r3, #8
 8003efc:	492b      	ldr	r1, [pc, #172]	; (8003fac <HAL_RCC_OscConfig+0x270>)
 8003efe:	4313      	orrs	r3, r2
 8003f00:	604b      	str	r3, [r1, #4]
 8003f02:	e01a      	b.n	8003f3a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003f04:	4b29      	ldr	r3, [pc, #164]	; (8003fac <HAL_RCC_OscConfig+0x270>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a28      	ldr	r2, [pc, #160]	; (8003fac <HAL_RCC_OscConfig+0x270>)
 8003f0a:	f023 0301 	bic.w	r3, r3, #1
 8003f0e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003f10:	f7fe fa12 	bl	8002338 <HAL_GetTick>
 8003f14:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003f16:	e008      	b.n	8003f2a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003f18:	f7fe fa0e 	bl	8002338 <HAL_GetTick>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	1ad3      	subs	r3, r2, r3
 8003f22:	2b02      	cmp	r3, #2
 8003f24:	d901      	bls.n	8003f2a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003f26:	2303      	movs	r3, #3
 8003f28:	e31a      	b.n	8004560 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003f2a:	4b20      	ldr	r3, [pc, #128]	; (8003fac <HAL_RCC_OscConfig+0x270>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 0302 	and.w	r3, r3, #2
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d1f0      	bne.n	8003f18 <HAL_RCC_OscConfig+0x1dc>
 8003f36:	e000      	b.n	8003f3a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003f38:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f003 0301 	and.w	r3, r3, #1
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d073      	beq.n	800402e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003f46:	69bb      	ldr	r3, [r7, #24]
 8003f48:	2b08      	cmp	r3, #8
 8003f4a:	d005      	beq.n	8003f58 <HAL_RCC_OscConfig+0x21c>
 8003f4c:	69bb      	ldr	r3, [r7, #24]
 8003f4e:	2b0c      	cmp	r3, #12
 8003f50:	d10e      	bne.n	8003f70 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	2b03      	cmp	r3, #3
 8003f56:	d10b      	bne.n	8003f70 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f58:	4b14      	ldr	r3, [pc, #80]	; (8003fac <HAL_RCC_OscConfig+0x270>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d063      	beq.n	800402c <HAL_RCC_OscConfig+0x2f0>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d15f      	bne.n	800402c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	e2f7      	b.n	8004560 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f78:	d106      	bne.n	8003f88 <HAL_RCC_OscConfig+0x24c>
 8003f7a:	4b0c      	ldr	r3, [pc, #48]	; (8003fac <HAL_RCC_OscConfig+0x270>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a0b      	ldr	r2, [pc, #44]	; (8003fac <HAL_RCC_OscConfig+0x270>)
 8003f80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f84:	6013      	str	r3, [r2, #0]
 8003f86:	e025      	b.n	8003fd4 <HAL_RCC_OscConfig+0x298>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f90:	d114      	bne.n	8003fbc <HAL_RCC_OscConfig+0x280>
 8003f92:	4b06      	ldr	r3, [pc, #24]	; (8003fac <HAL_RCC_OscConfig+0x270>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a05      	ldr	r2, [pc, #20]	; (8003fac <HAL_RCC_OscConfig+0x270>)
 8003f98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f9c:	6013      	str	r3, [r2, #0]
 8003f9e:	4b03      	ldr	r3, [pc, #12]	; (8003fac <HAL_RCC_OscConfig+0x270>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a02      	ldr	r2, [pc, #8]	; (8003fac <HAL_RCC_OscConfig+0x270>)
 8003fa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fa8:	6013      	str	r3, [r2, #0]
 8003faa:	e013      	b.n	8003fd4 <HAL_RCC_OscConfig+0x298>
 8003fac:	40021000 	.word	0x40021000
 8003fb0:	0800ab34 	.word	0x0800ab34
 8003fb4:	20000000 	.word	0x20000000
 8003fb8:	20000014 	.word	0x20000014
 8003fbc:	4ba0      	ldr	r3, [pc, #640]	; (8004240 <HAL_RCC_OscConfig+0x504>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a9f      	ldr	r2, [pc, #636]	; (8004240 <HAL_RCC_OscConfig+0x504>)
 8003fc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fc6:	6013      	str	r3, [r2, #0]
 8003fc8:	4b9d      	ldr	r3, [pc, #628]	; (8004240 <HAL_RCC_OscConfig+0x504>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a9c      	ldr	r2, [pc, #624]	; (8004240 <HAL_RCC_OscConfig+0x504>)
 8003fce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d013      	beq.n	8004004 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fdc:	f7fe f9ac 	bl	8002338 <HAL_GetTick>
 8003fe0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003fe2:	e008      	b.n	8003ff6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fe4:	f7fe f9a8 	bl	8002338 <HAL_GetTick>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	1ad3      	subs	r3, r2, r3
 8003fee:	2b64      	cmp	r3, #100	; 0x64
 8003ff0:	d901      	bls.n	8003ff6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003ff2:	2303      	movs	r3, #3
 8003ff4:	e2b4      	b.n	8004560 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ff6:	4b92      	ldr	r3, [pc, #584]	; (8004240 <HAL_RCC_OscConfig+0x504>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d0f0      	beq.n	8003fe4 <HAL_RCC_OscConfig+0x2a8>
 8004002:	e014      	b.n	800402e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004004:	f7fe f998 	bl	8002338 <HAL_GetTick>
 8004008:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800400a:	e008      	b.n	800401e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800400c:	f7fe f994 	bl	8002338 <HAL_GetTick>
 8004010:	4602      	mov	r2, r0
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	1ad3      	subs	r3, r2, r3
 8004016:	2b64      	cmp	r3, #100	; 0x64
 8004018:	d901      	bls.n	800401e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800401a:	2303      	movs	r3, #3
 800401c:	e2a0      	b.n	8004560 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800401e:	4b88      	ldr	r3, [pc, #544]	; (8004240 <HAL_RCC_OscConfig+0x504>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004026:	2b00      	cmp	r3, #0
 8004028:	d1f0      	bne.n	800400c <HAL_RCC_OscConfig+0x2d0>
 800402a:	e000      	b.n	800402e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800402c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 0302 	and.w	r3, r3, #2
 8004036:	2b00      	cmp	r3, #0
 8004038:	d060      	beq.n	80040fc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800403a:	69bb      	ldr	r3, [r7, #24]
 800403c:	2b04      	cmp	r3, #4
 800403e:	d005      	beq.n	800404c <HAL_RCC_OscConfig+0x310>
 8004040:	69bb      	ldr	r3, [r7, #24]
 8004042:	2b0c      	cmp	r3, #12
 8004044:	d119      	bne.n	800407a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	2b02      	cmp	r3, #2
 800404a:	d116      	bne.n	800407a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800404c:	4b7c      	ldr	r3, [pc, #496]	; (8004240 <HAL_RCC_OscConfig+0x504>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004054:	2b00      	cmp	r3, #0
 8004056:	d005      	beq.n	8004064 <HAL_RCC_OscConfig+0x328>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d101      	bne.n	8004064 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	e27d      	b.n	8004560 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004064:	4b76      	ldr	r3, [pc, #472]	; (8004240 <HAL_RCC_OscConfig+0x504>)
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	691b      	ldr	r3, [r3, #16]
 8004070:	061b      	lsls	r3, r3, #24
 8004072:	4973      	ldr	r1, [pc, #460]	; (8004240 <HAL_RCC_OscConfig+0x504>)
 8004074:	4313      	orrs	r3, r2
 8004076:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004078:	e040      	b.n	80040fc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	68db      	ldr	r3, [r3, #12]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d023      	beq.n	80040ca <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004082:	4b6f      	ldr	r3, [pc, #444]	; (8004240 <HAL_RCC_OscConfig+0x504>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a6e      	ldr	r2, [pc, #440]	; (8004240 <HAL_RCC_OscConfig+0x504>)
 8004088:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800408c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800408e:	f7fe f953 	bl	8002338 <HAL_GetTick>
 8004092:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004094:	e008      	b.n	80040a8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004096:	f7fe f94f 	bl	8002338 <HAL_GetTick>
 800409a:	4602      	mov	r2, r0
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	1ad3      	subs	r3, r2, r3
 80040a0:	2b02      	cmp	r3, #2
 80040a2:	d901      	bls.n	80040a8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80040a4:	2303      	movs	r3, #3
 80040a6:	e25b      	b.n	8004560 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80040a8:	4b65      	ldr	r3, [pc, #404]	; (8004240 <HAL_RCC_OscConfig+0x504>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d0f0      	beq.n	8004096 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040b4:	4b62      	ldr	r3, [pc, #392]	; (8004240 <HAL_RCC_OscConfig+0x504>)
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	691b      	ldr	r3, [r3, #16]
 80040c0:	061b      	lsls	r3, r3, #24
 80040c2:	495f      	ldr	r1, [pc, #380]	; (8004240 <HAL_RCC_OscConfig+0x504>)
 80040c4:	4313      	orrs	r3, r2
 80040c6:	604b      	str	r3, [r1, #4]
 80040c8:	e018      	b.n	80040fc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040ca:	4b5d      	ldr	r3, [pc, #372]	; (8004240 <HAL_RCC_OscConfig+0x504>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a5c      	ldr	r2, [pc, #368]	; (8004240 <HAL_RCC_OscConfig+0x504>)
 80040d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040d6:	f7fe f92f 	bl	8002338 <HAL_GetTick>
 80040da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80040dc:	e008      	b.n	80040f0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040de:	f7fe f92b 	bl	8002338 <HAL_GetTick>
 80040e2:	4602      	mov	r2, r0
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	1ad3      	subs	r3, r2, r3
 80040e8:	2b02      	cmp	r3, #2
 80040ea:	d901      	bls.n	80040f0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80040ec:	2303      	movs	r3, #3
 80040ee:	e237      	b.n	8004560 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80040f0:	4b53      	ldr	r3, [pc, #332]	; (8004240 <HAL_RCC_OscConfig+0x504>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d1f0      	bne.n	80040de <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 0308 	and.w	r3, r3, #8
 8004104:	2b00      	cmp	r3, #0
 8004106:	d03c      	beq.n	8004182 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	695b      	ldr	r3, [r3, #20]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d01c      	beq.n	800414a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004110:	4b4b      	ldr	r3, [pc, #300]	; (8004240 <HAL_RCC_OscConfig+0x504>)
 8004112:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004116:	4a4a      	ldr	r2, [pc, #296]	; (8004240 <HAL_RCC_OscConfig+0x504>)
 8004118:	f043 0301 	orr.w	r3, r3, #1
 800411c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004120:	f7fe f90a 	bl	8002338 <HAL_GetTick>
 8004124:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004126:	e008      	b.n	800413a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004128:	f7fe f906 	bl	8002338 <HAL_GetTick>
 800412c:	4602      	mov	r2, r0
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	2b02      	cmp	r3, #2
 8004134:	d901      	bls.n	800413a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004136:	2303      	movs	r3, #3
 8004138:	e212      	b.n	8004560 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800413a:	4b41      	ldr	r3, [pc, #260]	; (8004240 <HAL_RCC_OscConfig+0x504>)
 800413c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004140:	f003 0302 	and.w	r3, r3, #2
 8004144:	2b00      	cmp	r3, #0
 8004146:	d0ef      	beq.n	8004128 <HAL_RCC_OscConfig+0x3ec>
 8004148:	e01b      	b.n	8004182 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800414a:	4b3d      	ldr	r3, [pc, #244]	; (8004240 <HAL_RCC_OscConfig+0x504>)
 800414c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004150:	4a3b      	ldr	r2, [pc, #236]	; (8004240 <HAL_RCC_OscConfig+0x504>)
 8004152:	f023 0301 	bic.w	r3, r3, #1
 8004156:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800415a:	f7fe f8ed 	bl	8002338 <HAL_GetTick>
 800415e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004160:	e008      	b.n	8004174 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004162:	f7fe f8e9 	bl	8002338 <HAL_GetTick>
 8004166:	4602      	mov	r2, r0
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	1ad3      	subs	r3, r2, r3
 800416c:	2b02      	cmp	r3, #2
 800416e:	d901      	bls.n	8004174 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004170:	2303      	movs	r3, #3
 8004172:	e1f5      	b.n	8004560 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004174:	4b32      	ldr	r3, [pc, #200]	; (8004240 <HAL_RCC_OscConfig+0x504>)
 8004176:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800417a:	f003 0302 	and.w	r3, r3, #2
 800417e:	2b00      	cmp	r3, #0
 8004180:	d1ef      	bne.n	8004162 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f003 0304 	and.w	r3, r3, #4
 800418a:	2b00      	cmp	r3, #0
 800418c:	f000 80a6 	beq.w	80042dc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004190:	2300      	movs	r3, #0
 8004192:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004194:	4b2a      	ldr	r3, [pc, #168]	; (8004240 <HAL_RCC_OscConfig+0x504>)
 8004196:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004198:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800419c:	2b00      	cmp	r3, #0
 800419e:	d10d      	bne.n	80041bc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041a0:	4b27      	ldr	r3, [pc, #156]	; (8004240 <HAL_RCC_OscConfig+0x504>)
 80041a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041a4:	4a26      	ldr	r2, [pc, #152]	; (8004240 <HAL_RCC_OscConfig+0x504>)
 80041a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041aa:	6593      	str	r3, [r2, #88]	; 0x58
 80041ac:	4b24      	ldr	r3, [pc, #144]	; (8004240 <HAL_RCC_OscConfig+0x504>)
 80041ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041b4:	60bb      	str	r3, [r7, #8]
 80041b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041b8:	2301      	movs	r3, #1
 80041ba:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041bc:	4b21      	ldr	r3, [pc, #132]	; (8004244 <HAL_RCC_OscConfig+0x508>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d118      	bne.n	80041fa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80041c8:	4b1e      	ldr	r3, [pc, #120]	; (8004244 <HAL_RCC_OscConfig+0x508>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a1d      	ldr	r2, [pc, #116]	; (8004244 <HAL_RCC_OscConfig+0x508>)
 80041ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041d2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041d4:	f7fe f8b0 	bl	8002338 <HAL_GetTick>
 80041d8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041da:	e008      	b.n	80041ee <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041dc:	f7fe f8ac 	bl	8002338 <HAL_GetTick>
 80041e0:	4602      	mov	r2, r0
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	1ad3      	subs	r3, r2, r3
 80041e6:	2b02      	cmp	r3, #2
 80041e8:	d901      	bls.n	80041ee <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80041ea:	2303      	movs	r3, #3
 80041ec:	e1b8      	b.n	8004560 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041ee:	4b15      	ldr	r3, [pc, #84]	; (8004244 <HAL_RCC_OscConfig+0x508>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d0f0      	beq.n	80041dc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d108      	bne.n	8004214 <HAL_RCC_OscConfig+0x4d8>
 8004202:	4b0f      	ldr	r3, [pc, #60]	; (8004240 <HAL_RCC_OscConfig+0x504>)
 8004204:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004208:	4a0d      	ldr	r2, [pc, #52]	; (8004240 <HAL_RCC_OscConfig+0x504>)
 800420a:	f043 0301 	orr.w	r3, r3, #1
 800420e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004212:	e029      	b.n	8004268 <HAL_RCC_OscConfig+0x52c>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	2b05      	cmp	r3, #5
 800421a:	d115      	bne.n	8004248 <HAL_RCC_OscConfig+0x50c>
 800421c:	4b08      	ldr	r3, [pc, #32]	; (8004240 <HAL_RCC_OscConfig+0x504>)
 800421e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004222:	4a07      	ldr	r2, [pc, #28]	; (8004240 <HAL_RCC_OscConfig+0x504>)
 8004224:	f043 0304 	orr.w	r3, r3, #4
 8004228:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800422c:	4b04      	ldr	r3, [pc, #16]	; (8004240 <HAL_RCC_OscConfig+0x504>)
 800422e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004232:	4a03      	ldr	r2, [pc, #12]	; (8004240 <HAL_RCC_OscConfig+0x504>)
 8004234:	f043 0301 	orr.w	r3, r3, #1
 8004238:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800423c:	e014      	b.n	8004268 <HAL_RCC_OscConfig+0x52c>
 800423e:	bf00      	nop
 8004240:	40021000 	.word	0x40021000
 8004244:	40007000 	.word	0x40007000
 8004248:	4b9d      	ldr	r3, [pc, #628]	; (80044c0 <HAL_RCC_OscConfig+0x784>)
 800424a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800424e:	4a9c      	ldr	r2, [pc, #624]	; (80044c0 <HAL_RCC_OscConfig+0x784>)
 8004250:	f023 0301 	bic.w	r3, r3, #1
 8004254:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004258:	4b99      	ldr	r3, [pc, #612]	; (80044c0 <HAL_RCC_OscConfig+0x784>)
 800425a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800425e:	4a98      	ldr	r2, [pc, #608]	; (80044c0 <HAL_RCC_OscConfig+0x784>)
 8004260:	f023 0304 	bic.w	r3, r3, #4
 8004264:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d016      	beq.n	800429e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004270:	f7fe f862 	bl	8002338 <HAL_GetTick>
 8004274:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004276:	e00a      	b.n	800428e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004278:	f7fe f85e 	bl	8002338 <HAL_GetTick>
 800427c:	4602      	mov	r2, r0
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	1ad3      	subs	r3, r2, r3
 8004282:	f241 3288 	movw	r2, #5000	; 0x1388
 8004286:	4293      	cmp	r3, r2
 8004288:	d901      	bls.n	800428e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800428a:	2303      	movs	r3, #3
 800428c:	e168      	b.n	8004560 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800428e:	4b8c      	ldr	r3, [pc, #560]	; (80044c0 <HAL_RCC_OscConfig+0x784>)
 8004290:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004294:	f003 0302 	and.w	r3, r3, #2
 8004298:	2b00      	cmp	r3, #0
 800429a:	d0ed      	beq.n	8004278 <HAL_RCC_OscConfig+0x53c>
 800429c:	e015      	b.n	80042ca <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800429e:	f7fe f84b 	bl	8002338 <HAL_GetTick>
 80042a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80042a4:	e00a      	b.n	80042bc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042a6:	f7fe f847 	bl	8002338 <HAL_GetTick>
 80042aa:	4602      	mov	r2, r0
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	1ad3      	subs	r3, r2, r3
 80042b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d901      	bls.n	80042bc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80042b8:	2303      	movs	r3, #3
 80042ba:	e151      	b.n	8004560 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80042bc:	4b80      	ldr	r3, [pc, #512]	; (80044c0 <HAL_RCC_OscConfig+0x784>)
 80042be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042c2:	f003 0302 	and.w	r3, r3, #2
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d1ed      	bne.n	80042a6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80042ca:	7ffb      	ldrb	r3, [r7, #31]
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d105      	bne.n	80042dc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042d0:	4b7b      	ldr	r3, [pc, #492]	; (80044c0 <HAL_RCC_OscConfig+0x784>)
 80042d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042d4:	4a7a      	ldr	r2, [pc, #488]	; (80044c0 <HAL_RCC_OscConfig+0x784>)
 80042d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042da:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f003 0320 	and.w	r3, r3, #32
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d03c      	beq.n	8004362 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d01c      	beq.n	800432a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80042f0:	4b73      	ldr	r3, [pc, #460]	; (80044c0 <HAL_RCC_OscConfig+0x784>)
 80042f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80042f6:	4a72      	ldr	r2, [pc, #456]	; (80044c0 <HAL_RCC_OscConfig+0x784>)
 80042f8:	f043 0301 	orr.w	r3, r3, #1
 80042fc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004300:	f7fe f81a 	bl	8002338 <HAL_GetTick>
 8004304:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004306:	e008      	b.n	800431a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004308:	f7fe f816 	bl	8002338 <HAL_GetTick>
 800430c:	4602      	mov	r2, r0
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	2b02      	cmp	r3, #2
 8004314:	d901      	bls.n	800431a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004316:	2303      	movs	r3, #3
 8004318:	e122      	b.n	8004560 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800431a:	4b69      	ldr	r3, [pc, #420]	; (80044c0 <HAL_RCC_OscConfig+0x784>)
 800431c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004320:	f003 0302 	and.w	r3, r3, #2
 8004324:	2b00      	cmp	r3, #0
 8004326:	d0ef      	beq.n	8004308 <HAL_RCC_OscConfig+0x5cc>
 8004328:	e01b      	b.n	8004362 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800432a:	4b65      	ldr	r3, [pc, #404]	; (80044c0 <HAL_RCC_OscConfig+0x784>)
 800432c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004330:	4a63      	ldr	r2, [pc, #396]	; (80044c0 <HAL_RCC_OscConfig+0x784>)
 8004332:	f023 0301 	bic.w	r3, r3, #1
 8004336:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800433a:	f7fd fffd 	bl	8002338 <HAL_GetTick>
 800433e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004340:	e008      	b.n	8004354 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004342:	f7fd fff9 	bl	8002338 <HAL_GetTick>
 8004346:	4602      	mov	r2, r0
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	1ad3      	subs	r3, r2, r3
 800434c:	2b02      	cmp	r3, #2
 800434e:	d901      	bls.n	8004354 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004350:	2303      	movs	r3, #3
 8004352:	e105      	b.n	8004560 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004354:	4b5a      	ldr	r3, [pc, #360]	; (80044c0 <HAL_RCC_OscConfig+0x784>)
 8004356:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800435a:	f003 0302 	and.w	r3, r3, #2
 800435e:	2b00      	cmp	r3, #0
 8004360:	d1ef      	bne.n	8004342 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004366:	2b00      	cmp	r3, #0
 8004368:	f000 80f9 	beq.w	800455e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004370:	2b02      	cmp	r3, #2
 8004372:	f040 80cf 	bne.w	8004514 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004376:	4b52      	ldr	r3, [pc, #328]	; (80044c0 <HAL_RCC_OscConfig+0x784>)
 8004378:	68db      	ldr	r3, [r3, #12]
 800437a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	f003 0203 	and.w	r2, r3, #3
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004386:	429a      	cmp	r2, r3
 8004388:	d12c      	bne.n	80043e4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004394:	3b01      	subs	r3, #1
 8004396:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004398:	429a      	cmp	r2, r3
 800439a:	d123      	bne.n	80043e4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043a6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d11b      	bne.n	80043e4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043b6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d113      	bne.n	80043e4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043c6:	085b      	lsrs	r3, r3, #1
 80043c8:	3b01      	subs	r3, #1
 80043ca:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d109      	bne.n	80043e4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043da:	085b      	lsrs	r3, r3, #1
 80043dc:	3b01      	subs	r3, #1
 80043de:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80043e0:	429a      	cmp	r2, r3
 80043e2:	d071      	beq.n	80044c8 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80043e4:	69bb      	ldr	r3, [r7, #24]
 80043e6:	2b0c      	cmp	r3, #12
 80043e8:	d068      	beq.n	80044bc <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80043ea:	4b35      	ldr	r3, [pc, #212]	; (80044c0 <HAL_RCC_OscConfig+0x784>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d105      	bne.n	8004402 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80043f6:	4b32      	ldr	r3, [pc, #200]	; (80044c0 <HAL_RCC_OscConfig+0x784>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d001      	beq.n	8004406 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	e0ac      	b.n	8004560 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004406:	4b2e      	ldr	r3, [pc, #184]	; (80044c0 <HAL_RCC_OscConfig+0x784>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a2d      	ldr	r2, [pc, #180]	; (80044c0 <HAL_RCC_OscConfig+0x784>)
 800440c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004410:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004412:	f7fd ff91 	bl	8002338 <HAL_GetTick>
 8004416:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004418:	e008      	b.n	800442c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800441a:	f7fd ff8d 	bl	8002338 <HAL_GetTick>
 800441e:	4602      	mov	r2, r0
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	1ad3      	subs	r3, r2, r3
 8004424:	2b02      	cmp	r3, #2
 8004426:	d901      	bls.n	800442c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8004428:	2303      	movs	r3, #3
 800442a:	e099      	b.n	8004560 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800442c:	4b24      	ldr	r3, [pc, #144]	; (80044c0 <HAL_RCC_OscConfig+0x784>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004434:	2b00      	cmp	r3, #0
 8004436:	d1f0      	bne.n	800441a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004438:	4b21      	ldr	r3, [pc, #132]	; (80044c0 <HAL_RCC_OscConfig+0x784>)
 800443a:	68da      	ldr	r2, [r3, #12]
 800443c:	4b21      	ldr	r3, [pc, #132]	; (80044c4 <HAL_RCC_OscConfig+0x788>)
 800443e:	4013      	ands	r3, r2
 8004440:	687a      	ldr	r2, [r7, #4]
 8004442:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004444:	687a      	ldr	r2, [r7, #4]
 8004446:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004448:	3a01      	subs	r2, #1
 800444a:	0112      	lsls	r2, r2, #4
 800444c:	4311      	orrs	r1, r2
 800444e:	687a      	ldr	r2, [r7, #4]
 8004450:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004452:	0212      	lsls	r2, r2, #8
 8004454:	4311      	orrs	r1, r2
 8004456:	687a      	ldr	r2, [r7, #4]
 8004458:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800445a:	0852      	lsrs	r2, r2, #1
 800445c:	3a01      	subs	r2, #1
 800445e:	0552      	lsls	r2, r2, #21
 8004460:	4311      	orrs	r1, r2
 8004462:	687a      	ldr	r2, [r7, #4]
 8004464:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004466:	0852      	lsrs	r2, r2, #1
 8004468:	3a01      	subs	r2, #1
 800446a:	0652      	lsls	r2, r2, #25
 800446c:	4311      	orrs	r1, r2
 800446e:	687a      	ldr	r2, [r7, #4]
 8004470:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004472:	06d2      	lsls	r2, r2, #27
 8004474:	430a      	orrs	r2, r1
 8004476:	4912      	ldr	r1, [pc, #72]	; (80044c0 <HAL_RCC_OscConfig+0x784>)
 8004478:	4313      	orrs	r3, r2
 800447a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800447c:	4b10      	ldr	r3, [pc, #64]	; (80044c0 <HAL_RCC_OscConfig+0x784>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a0f      	ldr	r2, [pc, #60]	; (80044c0 <HAL_RCC_OscConfig+0x784>)
 8004482:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004486:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004488:	4b0d      	ldr	r3, [pc, #52]	; (80044c0 <HAL_RCC_OscConfig+0x784>)
 800448a:	68db      	ldr	r3, [r3, #12]
 800448c:	4a0c      	ldr	r2, [pc, #48]	; (80044c0 <HAL_RCC_OscConfig+0x784>)
 800448e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004492:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004494:	f7fd ff50 	bl	8002338 <HAL_GetTick>
 8004498:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800449a:	e008      	b.n	80044ae <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800449c:	f7fd ff4c 	bl	8002338 <HAL_GetTick>
 80044a0:	4602      	mov	r2, r0
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	1ad3      	subs	r3, r2, r3
 80044a6:	2b02      	cmp	r3, #2
 80044a8:	d901      	bls.n	80044ae <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80044aa:	2303      	movs	r3, #3
 80044ac:	e058      	b.n	8004560 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044ae:	4b04      	ldr	r3, [pc, #16]	; (80044c0 <HAL_RCC_OscConfig+0x784>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d0f0      	beq.n	800449c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80044ba:	e050      	b.n	800455e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80044bc:	2301      	movs	r3, #1
 80044be:	e04f      	b.n	8004560 <HAL_RCC_OscConfig+0x824>
 80044c0:	40021000 	.word	0x40021000
 80044c4:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044c8:	4b27      	ldr	r3, [pc, #156]	; (8004568 <HAL_RCC_OscConfig+0x82c>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d144      	bne.n	800455e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80044d4:	4b24      	ldr	r3, [pc, #144]	; (8004568 <HAL_RCC_OscConfig+0x82c>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a23      	ldr	r2, [pc, #140]	; (8004568 <HAL_RCC_OscConfig+0x82c>)
 80044da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044de:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80044e0:	4b21      	ldr	r3, [pc, #132]	; (8004568 <HAL_RCC_OscConfig+0x82c>)
 80044e2:	68db      	ldr	r3, [r3, #12]
 80044e4:	4a20      	ldr	r2, [pc, #128]	; (8004568 <HAL_RCC_OscConfig+0x82c>)
 80044e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044ea:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80044ec:	f7fd ff24 	bl	8002338 <HAL_GetTick>
 80044f0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044f2:	e008      	b.n	8004506 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044f4:	f7fd ff20 	bl	8002338 <HAL_GetTick>
 80044f8:	4602      	mov	r2, r0
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	2b02      	cmp	r3, #2
 8004500:	d901      	bls.n	8004506 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8004502:	2303      	movs	r3, #3
 8004504:	e02c      	b.n	8004560 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004506:	4b18      	ldr	r3, [pc, #96]	; (8004568 <HAL_RCC_OscConfig+0x82c>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800450e:	2b00      	cmp	r3, #0
 8004510:	d0f0      	beq.n	80044f4 <HAL_RCC_OscConfig+0x7b8>
 8004512:	e024      	b.n	800455e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004514:	69bb      	ldr	r3, [r7, #24]
 8004516:	2b0c      	cmp	r3, #12
 8004518:	d01f      	beq.n	800455a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800451a:	4b13      	ldr	r3, [pc, #76]	; (8004568 <HAL_RCC_OscConfig+0x82c>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a12      	ldr	r2, [pc, #72]	; (8004568 <HAL_RCC_OscConfig+0x82c>)
 8004520:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004524:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004526:	f7fd ff07 	bl	8002338 <HAL_GetTick>
 800452a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800452c:	e008      	b.n	8004540 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800452e:	f7fd ff03 	bl	8002338 <HAL_GetTick>
 8004532:	4602      	mov	r2, r0
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	1ad3      	subs	r3, r2, r3
 8004538:	2b02      	cmp	r3, #2
 800453a:	d901      	bls.n	8004540 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 800453c:	2303      	movs	r3, #3
 800453e:	e00f      	b.n	8004560 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004540:	4b09      	ldr	r3, [pc, #36]	; (8004568 <HAL_RCC_OscConfig+0x82c>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004548:	2b00      	cmp	r3, #0
 800454a:	d1f0      	bne.n	800452e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800454c:	4b06      	ldr	r3, [pc, #24]	; (8004568 <HAL_RCC_OscConfig+0x82c>)
 800454e:	68da      	ldr	r2, [r3, #12]
 8004550:	4905      	ldr	r1, [pc, #20]	; (8004568 <HAL_RCC_OscConfig+0x82c>)
 8004552:	4b06      	ldr	r3, [pc, #24]	; (800456c <HAL_RCC_OscConfig+0x830>)
 8004554:	4013      	ands	r3, r2
 8004556:	60cb      	str	r3, [r1, #12]
 8004558:	e001      	b.n	800455e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	e000      	b.n	8004560 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800455e:	2300      	movs	r3, #0
}
 8004560:	4618      	mov	r0, r3
 8004562:	3720      	adds	r7, #32
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}
 8004568:	40021000 	.word	0x40021000
 800456c:	feeefffc 	.word	0xfeeefffc

08004570 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b086      	sub	sp, #24
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
 8004578:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800457a:	2300      	movs	r3, #0
 800457c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d101      	bne.n	8004588 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	e11d      	b.n	80047c4 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004588:	4b90      	ldr	r3, [pc, #576]	; (80047cc <HAL_RCC_ClockConfig+0x25c>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f003 030f 	and.w	r3, r3, #15
 8004590:	683a      	ldr	r2, [r7, #0]
 8004592:	429a      	cmp	r2, r3
 8004594:	d910      	bls.n	80045b8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004596:	4b8d      	ldr	r3, [pc, #564]	; (80047cc <HAL_RCC_ClockConfig+0x25c>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f023 020f 	bic.w	r2, r3, #15
 800459e:	498b      	ldr	r1, [pc, #556]	; (80047cc <HAL_RCC_ClockConfig+0x25c>)
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	4313      	orrs	r3, r2
 80045a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045a6:	4b89      	ldr	r3, [pc, #548]	; (80047cc <HAL_RCC_ClockConfig+0x25c>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f003 030f 	and.w	r3, r3, #15
 80045ae:	683a      	ldr	r2, [r7, #0]
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d001      	beq.n	80045b8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	e105      	b.n	80047c4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f003 0302 	and.w	r3, r3, #2
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d010      	beq.n	80045e6 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	689a      	ldr	r2, [r3, #8]
 80045c8:	4b81      	ldr	r3, [pc, #516]	; (80047d0 <HAL_RCC_ClockConfig+0x260>)
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045d0:	429a      	cmp	r2, r3
 80045d2:	d908      	bls.n	80045e6 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045d4:	4b7e      	ldr	r3, [pc, #504]	; (80047d0 <HAL_RCC_ClockConfig+0x260>)
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	497b      	ldr	r1, [pc, #492]	; (80047d0 <HAL_RCC_ClockConfig+0x260>)
 80045e2:	4313      	orrs	r3, r2
 80045e4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f003 0301 	and.w	r3, r3, #1
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d079      	beq.n	80046e6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	2b03      	cmp	r3, #3
 80045f8:	d11e      	bne.n	8004638 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045fa:	4b75      	ldr	r3, [pc, #468]	; (80047d0 <HAL_RCC_ClockConfig+0x260>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004602:	2b00      	cmp	r3, #0
 8004604:	d101      	bne.n	800460a <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	e0dc      	b.n	80047c4 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800460a:	f000 fa09 	bl	8004a20 <RCC_GetSysClockFreqFromPLLSource>
 800460e:	4603      	mov	r3, r0
 8004610:	4a70      	ldr	r2, [pc, #448]	; (80047d4 <HAL_RCC_ClockConfig+0x264>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d946      	bls.n	80046a4 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004616:	4b6e      	ldr	r3, [pc, #440]	; (80047d0 <HAL_RCC_ClockConfig+0x260>)
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800461e:	2b00      	cmp	r3, #0
 8004620:	d140      	bne.n	80046a4 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004622:	4b6b      	ldr	r3, [pc, #428]	; (80047d0 <HAL_RCC_ClockConfig+0x260>)
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800462a:	4a69      	ldr	r2, [pc, #420]	; (80047d0 <HAL_RCC_ClockConfig+0x260>)
 800462c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004630:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004632:	2380      	movs	r3, #128	; 0x80
 8004634:	617b      	str	r3, [r7, #20]
 8004636:	e035      	b.n	80046a4 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	2b02      	cmp	r3, #2
 800463e:	d107      	bne.n	8004650 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004640:	4b63      	ldr	r3, [pc, #396]	; (80047d0 <HAL_RCC_ClockConfig+0x260>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004648:	2b00      	cmp	r3, #0
 800464a:	d115      	bne.n	8004678 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800464c:	2301      	movs	r3, #1
 800464e:	e0b9      	b.n	80047c4 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d107      	bne.n	8004668 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004658:	4b5d      	ldr	r3, [pc, #372]	; (80047d0 <HAL_RCC_ClockConfig+0x260>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 0302 	and.w	r3, r3, #2
 8004660:	2b00      	cmp	r3, #0
 8004662:	d109      	bne.n	8004678 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	e0ad      	b.n	80047c4 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004668:	4b59      	ldr	r3, [pc, #356]	; (80047d0 <HAL_RCC_ClockConfig+0x260>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004670:	2b00      	cmp	r3, #0
 8004672:	d101      	bne.n	8004678 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004674:	2301      	movs	r3, #1
 8004676:	e0a5      	b.n	80047c4 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8004678:	f000 f8b4 	bl	80047e4 <HAL_RCC_GetSysClockFreq>
 800467c:	4603      	mov	r3, r0
 800467e:	4a55      	ldr	r2, [pc, #340]	; (80047d4 <HAL_RCC_ClockConfig+0x264>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d90f      	bls.n	80046a4 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004684:	4b52      	ldr	r3, [pc, #328]	; (80047d0 <HAL_RCC_ClockConfig+0x260>)
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800468c:	2b00      	cmp	r3, #0
 800468e:	d109      	bne.n	80046a4 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004690:	4b4f      	ldr	r3, [pc, #316]	; (80047d0 <HAL_RCC_ClockConfig+0x260>)
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004698:	4a4d      	ldr	r2, [pc, #308]	; (80047d0 <HAL_RCC_ClockConfig+0x260>)
 800469a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800469e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80046a0:	2380      	movs	r3, #128	; 0x80
 80046a2:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80046a4:	4b4a      	ldr	r3, [pc, #296]	; (80047d0 <HAL_RCC_ClockConfig+0x260>)
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	f023 0203 	bic.w	r2, r3, #3
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	4947      	ldr	r1, [pc, #284]	; (80047d0 <HAL_RCC_ClockConfig+0x260>)
 80046b2:	4313      	orrs	r3, r2
 80046b4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046b6:	f7fd fe3f 	bl	8002338 <HAL_GetTick>
 80046ba:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046bc:	e00a      	b.n	80046d4 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046be:	f7fd fe3b 	bl	8002338 <HAL_GetTick>
 80046c2:	4602      	mov	r2, r0
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	1ad3      	subs	r3, r2, r3
 80046c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d901      	bls.n	80046d4 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80046d0:	2303      	movs	r3, #3
 80046d2:	e077      	b.n	80047c4 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046d4:	4b3e      	ldr	r3, [pc, #248]	; (80047d0 <HAL_RCC_ClockConfig+0x260>)
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	f003 020c 	and.w	r2, r3, #12
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	009b      	lsls	r3, r3, #2
 80046e2:	429a      	cmp	r2, r3
 80046e4:	d1eb      	bne.n	80046be <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	2b80      	cmp	r3, #128	; 0x80
 80046ea:	d105      	bne.n	80046f8 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80046ec:	4b38      	ldr	r3, [pc, #224]	; (80047d0 <HAL_RCC_ClockConfig+0x260>)
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	4a37      	ldr	r2, [pc, #220]	; (80047d0 <HAL_RCC_ClockConfig+0x260>)
 80046f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80046f6:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f003 0302 	and.w	r3, r3, #2
 8004700:	2b00      	cmp	r3, #0
 8004702:	d010      	beq.n	8004726 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	689a      	ldr	r2, [r3, #8]
 8004708:	4b31      	ldr	r3, [pc, #196]	; (80047d0 <HAL_RCC_ClockConfig+0x260>)
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004710:	429a      	cmp	r2, r3
 8004712:	d208      	bcs.n	8004726 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004714:	4b2e      	ldr	r3, [pc, #184]	; (80047d0 <HAL_RCC_ClockConfig+0x260>)
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	492b      	ldr	r1, [pc, #172]	; (80047d0 <HAL_RCC_ClockConfig+0x260>)
 8004722:	4313      	orrs	r3, r2
 8004724:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004726:	4b29      	ldr	r3, [pc, #164]	; (80047cc <HAL_RCC_ClockConfig+0x25c>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 030f 	and.w	r3, r3, #15
 800472e:	683a      	ldr	r2, [r7, #0]
 8004730:	429a      	cmp	r2, r3
 8004732:	d210      	bcs.n	8004756 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004734:	4b25      	ldr	r3, [pc, #148]	; (80047cc <HAL_RCC_ClockConfig+0x25c>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f023 020f 	bic.w	r2, r3, #15
 800473c:	4923      	ldr	r1, [pc, #140]	; (80047cc <HAL_RCC_ClockConfig+0x25c>)
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	4313      	orrs	r3, r2
 8004742:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004744:	4b21      	ldr	r3, [pc, #132]	; (80047cc <HAL_RCC_ClockConfig+0x25c>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f003 030f 	and.w	r3, r3, #15
 800474c:	683a      	ldr	r2, [r7, #0]
 800474e:	429a      	cmp	r2, r3
 8004750:	d001      	beq.n	8004756 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8004752:	2301      	movs	r3, #1
 8004754:	e036      	b.n	80047c4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f003 0304 	and.w	r3, r3, #4
 800475e:	2b00      	cmp	r3, #0
 8004760:	d008      	beq.n	8004774 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004762:	4b1b      	ldr	r3, [pc, #108]	; (80047d0 <HAL_RCC_ClockConfig+0x260>)
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	68db      	ldr	r3, [r3, #12]
 800476e:	4918      	ldr	r1, [pc, #96]	; (80047d0 <HAL_RCC_ClockConfig+0x260>)
 8004770:	4313      	orrs	r3, r2
 8004772:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f003 0308 	and.w	r3, r3, #8
 800477c:	2b00      	cmp	r3, #0
 800477e:	d009      	beq.n	8004794 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004780:	4b13      	ldr	r3, [pc, #76]	; (80047d0 <HAL_RCC_ClockConfig+0x260>)
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	691b      	ldr	r3, [r3, #16]
 800478c:	00db      	lsls	r3, r3, #3
 800478e:	4910      	ldr	r1, [pc, #64]	; (80047d0 <HAL_RCC_ClockConfig+0x260>)
 8004790:	4313      	orrs	r3, r2
 8004792:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004794:	f000 f826 	bl	80047e4 <HAL_RCC_GetSysClockFreq>
 8004798:	4602      	mov	r2, r0
 800479a:	4b0d      	ldr	r3, [pc, #52]	; (80047d0 <HAL_RCC_ClockConfig+0x260>)
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	091b      	lsrs	r3, r3, #4
 80047a0:	f003 030f 	and.w	r3, r3, #15
 80047a4:	490c      	ldr	r1, [pc, #48]	; (80047d8 <HAL_RCC_ClockConfig+0x268>)
 80047a6:	5ccb      	ldrb	r3, [r1, r3]
 80047a8:	f003 031f 	and.w	r3, r3, #31
 80047ac:	fa22 f303 	lsr.w	r3, r2, r3
 80047b0:	4a0a      	ldr	r2, [pc, #40]	; (80047dc <HAL_RCC_ClockConfig+0x26c>)
 80047b2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80047b4:	4b0a      	ldr	r3, [pc, #40]	; (80047e0 <HAL_RCC_ClockConfig+0x270>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4618      	mov	r0, r3
 80047ba:	f7fd fd6d 	bl	8002298 <HAL_InitTick>
 80047be:	4603      	mov	r3, r0
 80047c0:	73fb      	strb	r3, [r7, #15]

  return status;
 80047c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	3718      	adds	r7, #24
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}
 80047cc:	40022000 	.word	0x40022000
 80047d0:	40021000 	.word	0x40021000
 80047d4:	04c4b400 	.word	0x04c4b400
 80047d8:	0800ab34 	.word	0x0800ab34
 80047dc:	20000000 	.word	0x20000000
 80047e0:	20000014 	.word	0x20000014

080047e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b089      	sub	sp, #36	; 0x24
 80047e8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80047ea:	2300      	movs	r3, #0
 80047ec:	61fb      	str	r3, [r7, #28]
 80047ee:	2300      	movs	r3, #0
 80047f0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80047f2:	4b3e      	ldr	r3, [pc, #248]	; (80048ec <HAL_RCC_GetSysClockFreq+0x108>)
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	f003 030c 	and.w	r3, r3, #12
 80047fa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80047fc:	4b3b      	ldr	r3, [pc, #236]	; (80048ec <HAL_RCC_GetSysClockFreq+0x108>)
 80047fe:	68db      	ldr	r3, [r3, #12]
 8004800:	f003 0303 	and.w	r3, r3, #3
 8004804:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d005      	beq.n	8004818 <HAL_RCC_GetSysClockFreq+0x34>
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	2b0c      	cmp	r3, #12
 8004810:	d121      	bne.n	8004856 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2b01      	cmp	r3, #1
 8004816:	d11e      	bne.n	8004856 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004818:	4b34      	ldr	r3, [pc, #208]	; (80048ec <HAL_RCC_GetSysClockFreq+0x108>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f003 0308 	and.w	r3, r3, #8
 8004820:	2b00      	cmp	r3, #0
 8004822:	d107      	bne.n	8004834 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004824:	4b31      	ldr	r3, [pc, #196]	; (80048ec <HAL_RCC_GetSysClockFreq+0x108>)
 8004826:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800482a:	0a1b      	lsrs	r3, r3, #8
 800482c:	f003 030f 	and.w	r3, r3, #15
 8004830:	61fb      	str	r3, [r7, #28]
 8004832:	e005      	b.n	8004840 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004834:	4b2d      	ldr	r3, [pc, #180]	; (80048ec <HAL_RCC_GetSysClockFreq+0x108>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	091b      	lsrs	r3, r3, #4
 800483a:	f003 030f 	and.w	r3, r3, #15
 800483e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004840:	4a2b      	ldr	r2, [pc, #172]	; (80048f0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004842:	69fb      	ldr	r3, [r7, #28]
 8004844:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004848:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d10d      	bne.n	800486c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004850:	69fb      	ldr	r3, [r7, #28]
 8004852:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004854:	e00a      	b.n	800486c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	2b04      	cmp	r3, #4
 800485a:	d102      	bne.n	8004862 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800485c:	4b25      	ldr	r3, [pc, #148]	; (80048f4 <HAL_RCC_GetSysClockFreq+0x110>)
 800485e:	61bb      	str	r3, [r7, #24]
 8004860:	e004      	b.n	800486c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	2b08      	cmp	r3, #8
 8004866:	d101      	bne.n	800486c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004868:	4b23      	ldr	r3, [pc, #140]	; (80048f8 <HAL_RCC_GetSysClockFreq+0x114>)
 800486a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	2b0c      	cmp	r3, #12
 8004870:	d134      	bne.n	80048dc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004872:	4b1e      	ldr	r3, [pc, #120]	; (80048ec <HAL_RCC_GetSysClockFreq+0x108>)
 8004874:	68db      	ldr	r3, [r3, #12]
 8004876:	f003 0303 	and.w	r3, r3, #3
 800487a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	2b02      	cmp	r3, #2
 8004880:	d003      	beq.n	800488a <HAL_RCC_GetSysClockFreq+0xa6>
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	2b03      	cmp	r3, #3
 8004886:	d003      	beq.n	8004890 <HAL_RCC_GetSysClockFreq+0xac>
 8004888:	e005      	b.n	8004896 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800488a:	4b1a      	ldr	r3, [pc, #104]	; (80048f4 <HAL_RCC_GetSysClockFreq+0x110>)
 800488c:	617b      	str	r3, [r7, #20]
      break;
 800488e:	e005      	b.n	800489c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004890:	4b19      	ldr	r3, [pc, #100]	; (80048f8 <HAL_RCC_GetSysClockFreq+0x114>)
 8004892:	617b      	str	r3, [r7, #20]
      break;
 8004894:	e002      	b.n	800489c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004896:	69fb      	ldr	r3, [r7, #28]
 8004898:	617b      	str	r3, [r7, #20]
      break;
 800489a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800489c:	4b13      	ldr	r3, [pc, #76]	; (80048ec <HAL_RCC_GetSysClockFreq+0x108>)
 800489e:	68db      	ldr	r3, [r3, #12]
 80048a0:	091b      	lsrs	r3, r3, #4
 80048a2:	f003 030f 	and.w	r3, r3, #15
 80048a6:	3301      	adds	r3, #1
 80048a8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80048aa:	4b10      	ldr	r3, [pc, #64]	; (80048ec <HAL_RCC_GetSysClockFreq+0x108>)
 80048ac:	68db      	ldr	r3, [r3, #12]
 80048ae:	0a1b      	lsrs	r3, r3, #8
 80048b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048b4:	697a      	ldr	r2, [r7, #20]
 80048b6:	fb03 f202 	mul.w	r2, r3, r2
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80048c0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80048c2:	4b0a      	ldr	r3, [pc, #40]	; (80048ec <HAL_RCC_GetSysClockFreq+0x108>)
 80048c4:	68db      	ldr	r3, [r3, #12]
 80048c6:	0e5b      	lsrs	r3, r3, #25
 80048c8:	f003 0303 	and.w	r3, r3, #3
 80048cc:	3301      	adds	r3, #1
 80048ce:	005b      	lsls	r3, r3, #1
 80048d0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80048d2:	697a      	ldr	r2, [r7, #20]
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80048da:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80048dc:	69bb      	ldr	r3, [r7, #24]
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3724      	adds	r7, #36	; 0x24
 80048e2:	46bd      	mov	sp, r7
 80048e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e8:	4770      	bx	lr
 80048ea:	bf00      	nop
 80048ec:	40021000 	.word	0x40021000
 80048f0:	0800ab4c 	.word	0x0800ab4c
 80048f4:	00f42400 	.word	0x00f42400
 80048f8:	007a1200 	.word	0x007a1200

080048fc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048fc:	b480      	push	{r7}
 80048fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004900:	4b03      	ldr	r3, [pc, #12]	; (8004910 <HAL_RCC_GetHCLKFreq+0x14>)
 8004902:	681b      	ldr	r3, [r3, #0]
}
 8004904:	4618      	mov	r0, r3
 8004906:	46bd      	mov	sp, r7
 8004908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490c:	4770      	bx	lr
 800490e:	bf00      	nop
 8004910:	20000000 	.word	0x20000000

08004914 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004918:	f7ff fff0 	bl	80048fc <HAL_RCC_GetHCLKFreq>
 800491c:	4602      	mov	r2, r0
 800491e:	4b06      	ldr	r3, [pc, #24]	; (8004938 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	0a1b      	lsrs	r3, r3, #8
 8004924:	f003 0307 	and.w	r3, r3, #7
 8004928:	4904      	ldr	r1, [pc, #16]	; (800493c <HAL_RCC_GetPCLK1Freq+0x28>)
 800492a:	5ccb      	ldrb	r3, [r1, r3]
 800492c:	f003 031f 	and.w	r3, r3, #31
 8004930:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004934:	4618      	mov	r0, r3
 8004936:	bd80      	pop	{r7, pc}
 8004938:	40021000 	.word	0x40021000
 800493c:	0800ab44 	.word	0x0800ab44

08004940 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004944:	f7ff ffda 	bl	80048fc <HAL_RCC_GetHCLKFreq>
 8004948:	4602      	mov	r2, r0
 800494a:	4b06      	ldr	r3, [pc, #24]	; (8004964 <HAL_RCC_GetPCLK2Freq+0x24>)
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	0adb      	lsrs	r3, r3, #11
 8004950:	f003 0307 	and.w	r3, r3, #7
 8004954:	4904      	ldr	r1, [pc, #16]	; (8004968 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004956:	5ccb      	ldrb	r3, [r1, r3]
 8004958:	f003 031f 	and.w	r3, r3, #31
 800495c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004960:	4618      	mov	r0, r3
 8004962:	bd80      	pop	{r7, pc}
 8004964:	40021000 	.word	0x40021000
 8004968:	0800ab44 	.word	0x0800ab44

0800496c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b086      	sub	sp, #24
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004974:	2300      	movs	r3, #0
 8004976:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004978:	4b27      	ldr	r3, [pc, #156]	; (8004a18 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800497a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800497c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004980:	2b00      	cmp	r3, #0
 8004982:	d003      	beq.n	800498c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004984:	f7ff f9ba 	bl	8003cfc <HAL_PWREx_GetVoltageRange>
 8004988:	6178      	str	r0, [r7, #20]
 800498a:	e014      	b.n	80049b6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800498c:	4b22      	ldr	r3, [pc, #136]	; (8004a18 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800498e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004990:	4a21      	ldr	r2, [pc, #132]	; (8004a18 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004992:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004996:	6593      	str	r3, [r2, #88]	; 0x58
 8004998:	4b1f      	ldr	r3, [pc, #124]	; (8004a18 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800499a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800499c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049a0:	60fb      	str	r3, [r7, #12]
 80049a2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80049a4:	f7ff f9aa 	bl	8003cfc <HAL_PWREx_GetVoltageRange>
 80049a8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80049aa:	4b1b      	ldr	r3, [pc, #108]	; (8004a18 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80049ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049ae:	4a1a      	ldr	r2, [pc, #104]	; (8004a18 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80049b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049b4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049bc:	d10b      	bne.n	80049d6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2b80      	cmp	r3, #128	; 0x80
 80049c2:	d913      	bls.n	80049ec <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2ba0      	cmp	r3, #160	; 0xa0
 80049c8:	d902      	bls.n	80049d0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80049ca:	2302      	movs	r3, #2
 80049cc:	613b      	str	r3, [r7, #16]
 80049ce:	e00d      	b.n	80049ec <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80049d0:	2301      	movs	r3, #1
 80049d2:	613b      	str	r3, [r7, #16]
 80049d4:	e00a      	b.n	80049ec <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2b7f      	cmp	r3, #127	; 0x7f
 80049da:	d902      	bls.n	80049e2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80049dc:	2302      	movs	r3, #2
 80049de:	613b      	str	r3, [r7, #16]
 80049e0:	e004      	b.n	80049ec <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2b70      	cmp	r3, #112	; 0x70
 80049e6:	d101      	bne.n	80049ec <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80049e8:	2301      	movs	r3, #1
 80049ea:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80049ec:	4b0b      	ldr	r3, [pc, #44]	; (8004a1c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f023 020f 	bic.w	r2, r3, #15
 80049f4:	4909      	ldr	r1, [pc, #36]	; (8004a1c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	4313      	orrs	r3, r2
 80049fa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80049fc:	4b07      	ldr	r3, [pc, #28]	; (8004a1c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f003 030f 	and.w	r3, r3, #15
 8004a04:	693a      	ldr	r2, [r7, #16]
 8004a06:	429a      	cmp	r2, r3
 8004a08:	d001      	beq.n	8004a0e <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e000      	b.n	8004a10 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8004a0e:	2300      	movs	r3, #0
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	3718      	adds	r7, #24
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}
 8004a18:	40021000 	.word	0x40021000
 8004a1c:	40022000 	.word	0x40022000

08004a20 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b087      	sub	sp, #28
 8004a24:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004a26:	4b2d      	ldr	r3, [pc, #180]	; (8004adc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004a28:	68db      	ldr	r3, [r3, #12]
 8004a2a:	f003 0303 	and.w	r3, r3, #3
 8004a2e:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2b03      	cmp	r3, #3
 8004a34:	d00b      	beq.n	8004a4e <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2b03      	cmp	r3, #3
 8004a3a:	d825      	bhi.n	8004a88 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2b01      	cmp	r3, #1
 8004a40:	d008      	beq.n	8004a54 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2b02      	cmp	r3, #2
 8004a46:	d11f      	bne.n	8004a88 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8004a48:	4b25      	ldr	r3, [pc, #148]	; (8004ae0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004a4a:	613b      	str	r3, [r7, #16]
    break;
 8004a4c:	e01f      	b.n	8004a8e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8004a4e:	4b25      	ldr	r3, [pc, #148]	; (8004ae4 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8004a50:	613b      	str	r3, [r7, #16]
    break;
 8004a52:	e01c      	b.n	8004a8e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004a54:	4b21      	ldr	r3, [pc, #132]	; (8004adc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f003 0308 	and.w	r3, r3, #8
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d107      	bne.n	8004a70 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004a60:	4b1e      	ldr	r3, [pc, #120]	; (8004adc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004a62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a66:	0a1b      	lsrs	r3, r3, #8
 8004a68:	f003 030f 	and.w	r3, r3, #15
 8004a6c:	617b      	str	r3, [r7, #20]
 8004a6e:	e005      	b.n	8004a7c <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004a70:	4b1a      	ldr	r3, [pc, #104]	; (8004adc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	091b      	lsrs	r3, r3, #4
 8004a76:	f003 030f 	and.w	r3, r3, #15
 8004a7a:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8004a7c:	4a1a      	ldr	r2, [pc, #104]	; (8004ae8 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a84:	613b      	str	r3, [r7, #16]
    break;
 8004a86:	e002      	b.n	8004a8e <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	613b      	str	r3, [r7, #16]
    break;
 8004a8c:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004a8e:	4b13      	ldr	r3, [pc, #76]	; (8004adc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004a90:	68db      	ldr	r3, [r3, #12]
 8004a92:	091b      	lsrs	r3, r3, #4
 8004a94:	f003 030f 	and.w	r3, r3, #15
 8004a98:	3301      	adds	r3, #1
 8004a9a:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004a9c:	4b0f      	ldr	r3, [pc, #60]	; (8004adc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004a9e:	68db      	ldr	r3, [r3, #12]
 8004aa0:	0a1b      	lsrs	r3, r3, #8
 8004aa2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004aa6:	693a      	ldr	r2, [r7, #16]
 8004aa8:	fb03 f202 	mul.w	r2, r3, r2
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ab2:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004ab4:	4b09      	ldr	r3, [pc, #36]	; (8004adc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004ab6:	68db      	ldr	r3, [r3, #12]
 8004ab8:	0e5b      	lsrs	r3, r3, #25
 8004aba:	f003 0303 	and.w	r3, r3, #3
 8004abe:	3301      	adds	r3, #1
 8004ac0:	005b      	lsls	r3, r3, #1
 8004ac2:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8004ac4:	693a      	ldr	r2, [r7, #16]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004acc:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8004ace:	683b      	ldr	r3, [r7, #0]
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	371c      	adds	r7, #28
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ada:	4770      	bx	lr
 8004adc:	40021000 	.word	0x40021000
 8004ae0:	00f42400 	.word	0x00f42400
 8004ae4:	007a1200 	.word	0x007a1200
 8004ae8:	0800ab4c 	.word	0x0800ab4c

08004aec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b086      	sub	sp, #24
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004af4:	2300      	movs	r3, #0
 8004af6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004af8:	2300      	movs	r3, #0
 8004afa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d040      	beq.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b0c:	2b80      	cmp	r3, #128	; 0x80
 8004b0e:	d02a      	beq.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004b10:	2b80      	cmp	r3, #128	; 0x80
 8004b12:	d825      	bhi.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004b14:	2b60      	cmp	r3, #96	; 0x60
 8004b16:	d026      	beq.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004b18:	2b60      	cmp	r3, #96	; 0x60
 8004b1a:	d821      	bhi.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004b1c:	2b40      	cmp	r3, #64	; 0x40
 8004b1e:	d006      	beq.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x42>
 8004b20:	2b40      	cmp	r3, #64	; 0x40
 8004b22:	d81d      	bhi.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d009      	beq.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x50>
 8004b28:	2b20      	cmp	r3, #32
 8004b2a:	d010      	beq.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x62>
 8004b2c:	e018      	b.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004b2e:	4b89      	ldr	r3, [pc, #548]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b30:	68db      	ldr	r3, [r3, #12]
 8004b32:	4a88      	ldr	r2, [pc, #544]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b38:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004b3a:	e015      	b.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	3304      	adds	r3, #4
 8004b40:	2100      	movs	r1, #0
 8004b42:	4618      	mov	r0, r3
 8004b44:	f000 fb02 	bl	800514c <RCCEx_PLLSAI1_Config>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004b4c:	e00c      	b.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	3320      	adds	r3, #32
 8004b52:	2100      	movs	r1, #0
 8004b54:	4618      	mov	r0, r3
 8004b56:	f000 fbed 	bl	8005334 <RCCEx_PLLSAI2_Config>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004b5e:	e003      	b.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b60:	2301      	movs	r3, #1
 8004b62:	74fb      	strb	r3, [r7, #19]
      break;
 8004b64:	e000      	b.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8004b66:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b68:	7cfb      	ldrb	r3, [r7, #19]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d10b      	bne.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004b6e:	4b79      	ldr	r3, [pc, #484]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b70:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004b74:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b7c:	4975      	ldr	r1, [pc, #468]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004b84:	e001      	b.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b86:	7cfb      	ldrb	r3, [r7, #19]
 8004b88:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d047      	beq.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b9e:	d030      	beq.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004ba0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ba4:	d82a      	bhi.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004ba6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004baa:	d02a      	beq.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004bac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004bb0:	d824      	bhi.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004bb2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bb6:	d008      	beq.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004bb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bbc:	d81e      	bhi.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d00a      	beq.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004bc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bc6:	d010      	beq.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004bc8:	e018      	b.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004bca:	4b62      	ldr	r3, [pc, #392]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004bcc:	68db      	ldr	r3, [r3, #12]
 8004bce:	4a61      	ldr	r2, [pc, #388]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004bd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bd4:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004bd6:	e015      	b.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	3304      	adds	r3, #4
 8004bdc:	2100      	movs	r1, #0
 8004bde:	4618      	mov	r0, r3
 8004be0:	f000 fab4 	bl	800514c <RCCEx_PLLSAI1_Config>
 8004be4:	4603      	mov	r3, r0
 8004be6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004be8:	e00c      	b.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	3320      	adds	r3, #32
 8004bee:	2100      	movs	r1, #0
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	f000 fb9f 	bl	8005334 <RCCEx_PLLSAI2_Config>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004bfa:	e003      	b.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	74fb      	strb	r3, [r7, #19]
      break;
 8004c00:	e000      	b.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8004c02:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c04:	7cfb      	ldrb	r3, [r7, #19]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d10b      	bne.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004c0a:	4b52      	ldr	r3, [pc, #328]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c0c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004c10:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c18:	494e      	ldr	r1, [pc, #312]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004c20:	e001      	b.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c22:	7cfb      	ldrb	r3, [r7, #19]
 8004c24:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	f000 809f 	beq.w	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c34:	2300      	movs	r3, #0
 8004c36:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004c38:	4b46      	ldr	r3, [pc, #280]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d101      	bne.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004c44:	2301      	movs	r3, #1
 8004c46:	e000      	b.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004c48:	2300      	movs	r3, #0
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d00d      	beq.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c4e:	4b41      	ldr	r3, [pc, #260]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c52:	4a40      	ldr	r2, [pc, #256]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c58:	6593      	str	r3, [r2, #88]	; 0x58
 8004c5a:	4b3e      	ldr	r3, [pc, #248]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c62:	60bb      	str	r3, [r7, #8]
 8004c64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c66:	2301      	movs	r3, #1
 8004c68:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c6a:	4b3b      	ldr	r3, [pc, #236]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a3a      	ldr	r2, [pc, #232]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004c70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c74:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004c76:	f7fd fb5f 	bl	8002338 <HAL_GetTick>
 8004c7a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004c7c:	e009      	b.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c7e:	f7fd fb5b 	bl	8002338 <HAL_GetTick>
 8004c82:	4602      	mov	r2, r0
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	1ad3      	subs	r3, r2, r3
 8004c88:	2b02      	cmp	r3, #2
 8004c8a:	d902      	bls.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8004c8c:	2303      	movs	r3, #3
 8004c8e:	74fb      	strb	r3, [r7, #19]
        break;
 8004c90:	e005      	b.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004c92:	4b31      	ldr	r3, [pc, #196]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d0ef      	beq.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8004c9e:	7cfb      	ldrb	r3, [r7, #19]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d15b      	bne.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004ca4:	4b2b      	ldr	r3, [pc, #172]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004caa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cae:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d01f      	beq.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cbc:	697a      	ldr	r2, [r7, #20]
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	d019      	beq.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004cc2:	4b24      	ldr	r3, [pc, #144]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004cc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ccc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004cce:	4b21      	ldr	r3, [pc, #132]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004cd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cd4:	4a1f      	ldr	r2, [pc, #124]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004cd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cda:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004cde:	4b1d      	ldr	r3, [pc, #116]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004ce0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ce4:	4a1b      	ldr	r2, [pc, #108]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004ce6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004cee:	4a19      	ldr	r2, [pc, #100]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	f003 0301 	and.w	r3, r3, #1
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d016      	beq.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d00:	f7fd fb1a 	bl	8002338 <HAL_GetTick>
 8004d04:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d06:	e00b      	b.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d08:	f7fd fb16 	bl	8002338 <HAL_GetTick>
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	1ad3      	subs	r3, r2, r3
 8004d12:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d902      	bls.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8004d1a:	2303      	movs	r3, #3
 8004d1c:	74fb      	strb	r3, [r7, #19]
            break;
 8004d1e:	e006      	b.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d20:	4b0c      	ldr	r3, [pc, #48]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d26:	f003 0302 	and.w	r3, r3, #2
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d0ec      	beq.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8004d2e:	7cfb      	ldrb	r3, [r7, #19]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d10c      	bne.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d34:	4b07      	ldr	r3, [pc, #28]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d3a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d44:	4903      	ldr	r1, [pc, #12]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d46:	4313      	orrs	r3, r2
 8004d48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004d4c:	e008      	b.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004d4e:	7cfb      	ldrb	r3, [r7, #19]
 8004d50:	74bb      	strb	r3, [r7, #18]
 8004d52:	e005      	b.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8004d54:	40021000 	.word	0x40021000
 8004d58:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d5c:	7cfb      	ldrb	r3, [r7, #19]
 8004d5e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d60:	7c7b      	ldrb	r3, [r7, #17]
 8004d62:	2b01      	cmp	r3, #1
 8004d64:	d105      	bne.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d66:	4ba0      	ldr	r3, [pc, #640]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d6a:	4a9f      	ldr	r2, [pc, #636]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d70:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f003 0301 	and.w	r3, r3, #1
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d00a      	beq.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004d7e:	4b9a      	ldr	r3, [pc, #616]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d84:	f023 0203 	bic.w	r2, r3, #3
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d8c:	4996      	ldr	r1, [pc, #600]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f003 0302 	and.w	r3, r3, #2
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d00a      	beq.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004da0:	4b91      	ldr	r3, [pc, #580]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004da6:	f023 020c 	bic.w	r2, r3, #12
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dae:	498e      	ldr	r1, [pc, #568]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004db0:	4313      	orrs	r3, r2
 8004db2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f003 0304 	and.w	r3, r3, #4
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d00a      	beq.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004dc2:	4b89      	ldr	r3, [pc, #548]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004dc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dc8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dd0:	4985      	ldr	r1, [pc, #532]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f003 0308 	and.w	r3, r3, #8
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d00a      	beq.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004de4:	4b80      	ldr	r3, [pc, #512]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dea:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004df2:	497d      	ldr	r1, [pc, #500]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004df4:	4313      	orrs	r3, r2
 8004df6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f003 0310 	and.w	r3, r3, #16
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d00a      	beq.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004e06:	4b78      	ldr	r3, [pc, #480]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e0c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e14:	4974      	ldr	r1, [pc, #464]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e16:	4313      	orrs	r3, r2
 8004e18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f003 0320 	and.w	r3, r3, #32
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d00a      	beq.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004e28:	4b6f      	ldr	r3, [pc, #444]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e2e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e36:	496c      	ldr	r1, [pc, #432]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d00a      	beq.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004e4a:	4b67      	ldr	r3, [pc, #412]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e50:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e58:	4963      	ldr	r1, [pc, #396]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d00a      	beq.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004e6c:	4b5e      	ldr	r3, [pc, #376]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e72:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e7a:	495b      	ldr	r1, [pc, #364]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d00a      	beq.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004e8e:	4b56      	ldr	r3, [pc, #344]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e94:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e9c:	4952      	ldr	r1, [pc, #328]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d00a      	beq.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004eb0:	4b4d      	ldr	r3, [pc, #308]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eb6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ebe:	494a      	ldr	r1, [pc, #296]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d00a      	beq.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004ed2:	4b45      	ldr	r3, [pc, #276]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ed4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ed8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ee0:	4941      	ldr	r1, [pc, #260]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d00a      	beq.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004ef4:	4b3c      	ldr	r3, [pc, #240]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ef6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004efa:	f023 0203 	bic.w	r2, r3, #3
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f02:	4939      	ldr	r1, [pc, #228]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f04:	4313      	orrs	r3, r2
 8004f06:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d028      	beq.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004f16:	4b34      	ldr	r3, [pc, #208]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f1c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f24:	4930      	ldr	r1, [pc, #192]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f26:	4313      	orrs	r3, r2
 8004f28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f30:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f34:	d106      	bne.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f36:	4b2c      	ldr	r3, [pc, #176]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f38:	68db      	ldr	r3, [r3, #12]
 8004f3a:	4a2b      	ldr	r2, [pc, #172]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f3c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f40:	60d3      	str	r3, [r2, #12]
 8004f42:	e011      	b.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f48:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004f4c:	d10c      	bne.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	3304      	adds	r3, #4
 8004f52:	2101      	movs	r1, #1
 8004f54:	4618      	mov	r0, r3
 8004f56:	f000 f8f9 	bl	800514c <RCCEx_PLLSAI1_Config>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004f5e:	7cfb      	ldrb	r3, [r7, #19]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d001      	beq.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8004f64:	7cfb      	ldrb	r3, [r7, #19]
 8004f66:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d04d      	beq.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f78:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f7c:	d108      	bne.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8004f7e:	4b1a      	ldr	r3, [pc, #104]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f80:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004f84:	4a18      	ldr	r2, [pc, #96]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f86:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004f8a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004f8e:	e012      	b.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004f90:	4b15      	ldr	r3, [pc, #84]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f92:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004f96:	4a14      	ldr	r2, [pc, #80]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f98:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f9c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004fa0:	4b11      	ldr	r3, [pc, #68]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fa6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004fae:	490e      	ldr	r1, [pc, #56]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004fba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004fbe:	d106      	bne.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004fc0:	4b09      	ldr	r3, [pc, #36]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004fc2:	68db      	ldr	r3, [r3, #12]
 8004fc4:	4a08      	ldr	r2, [pc, #32]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004fc6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004fca:	60d3      	str	r3, [r2, #12]
 8004fcc:	e020      	b.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004fd2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004fd6:	d109      	bne.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004fd8:	4b03      	ldr	r3, [pc, #12]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004fda:	68db      	ldr	r3, [r3, #12]
 8004fdc:	4a02      	ldr	r2, [pc, #8]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004fde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fe2:	60d3      	str	r3, [r2, #12]
 8004fe4:	e014      	b.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004fe6:	bf00      	nop
 8004fe8:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ff0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ff4:	d10c      	bne.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	3304      	adds	r3, #4
 8004ffa:	2101      	movs	r1, #1
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	f000 f8a5 	bl	800514c <RCCEx_PLLSAI1_Config>
 8005002:	4603      	mov	r3, r0
 8005004:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005006:	7cfb      	ldrb	r3, [r7, #19]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d001      	beq.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 800500c:	7cfb      	ldrb	r3, [r7, #19]
 800500e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005018:	2b00      	cmp	r3, #0
 800501a:	d028      	beq.n	800506e <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800501c:	4b4a      	ldr	r3, [pc, #296]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800501e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005022:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800502a:	4947      	ldr	r1, [pc, #284]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800502c:	4313      	orrs	r3, r2
 800502e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005036:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800503a:	d106      	bne.n	800504a <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800503c:	4b42      	ldr	r3, [pc, #264]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800503e:	68db      	ldr	r3, [r3, #12]
 8005040:	4a41      	ldr	r2, [pc, #260]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005042:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005046:	60d3      	str	r3, [r2, #12]
 8005048:	e011      	b.n	800506e <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800504e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005052:	d10c      	bne.n	800506e <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	3304      	adds	r3, #4
 8005058:	2101      	movs	r1, #1
 800505a:	4618      	mov	r0, r3
 800505c:	f000 f876 	bl	800514c <RCCEx_PLLSAI1_Config>
 8005060:	4603      	mov	r3, r0
 8005062:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005064:	7cfb      	ldrb	r3, [r7, #19]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d001      	beq.n	800506e <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800506a:	7cfb      	ldrb	r3, [r7, #19]
 800506c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005076:	2b00      	cmp	r3, #0
 8005078:	d01e      	beq.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800507a:	4b33      	ldr	r3, [pc, #204]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800507c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005080:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800508a:	492f      	ldr	r1, [pc, #188]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800508c:	4313      	orrs	r3, r2
 800508e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005098:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800509c:	d10c      	bne.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	3304      	adds	r3, #4
 80050a2:	2102      	movs	r1, #2
 80050a4:	4618      	mov	r0, r3
 80050a6:	f000 f851 	bl	800514c <RCCEx_PLLSAI1_Config>
 80050aa:	4603      	mov	r3, r0
 80050ac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80050ae:	7cfb      	ldrb	r3, [r7, #19]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d001      	beq.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80050b4:	7cfb      	ldrb	r3, [r7, #19]
 80050b6:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d00b      	beq.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80050c4:	4b20      	ldr	r3, [pc, #128]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80050c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80050ca:	f023 0204 	bic.w	r2, r3, #4
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050d4:	491c      	ldr	r1, [pc, #112]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80050d6:	4313      	orrs	r3, r2
 80050d8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d00b      	beq.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80050e8:	4b17      	ldr	r3, [pc, #92]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80050ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80050ee:	f023 0218 	bic.w	r2, r3, #24
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050f8:	4913      	ldr	r1, [pc, #76]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80050fa:	4313      	orrs	r3, r2
 80050fc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005108:	2b00      	cmp	r3, #0
 800510a:	d017      	beq.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800510c:	4b0e      	ldr	r3, [pc, #56]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800510e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005112:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800511c:	490a      	ldr	r1, [pc, #40]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800511e:	4313      	orrs	r3, r2
 8005120:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800512a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800512e:	d105      	bne.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005130:	4b05      	ldr	r3, [pc, #20]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005132:	68db      	ldr	r3, [r3, #12]
 8005134:	4a04      	ldr	r2, [pc, #16]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005136:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800513a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800513c:	7cbb      	ldrb	r3, [r7, #18]
}
 800513e:	4618      	mov	r0, r3
 8005140:	3718      	adds	r7, #24
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}
 8005146:	bf00      	nop
 8005148:	40021000 	.word	0x40021000

0800514c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b084      	sub	sp, #16
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
 8005154:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005156:	2300      	movs	r3, #0
 8005158:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800515a:	4b72      	ldr	r3, [pc, #456]	; (8005324 <RCCEx_PLLSAI1_Config+0x1d8>)
 800515c:	68db      	ldr	r3, [r3, #12]
 800515e:	f003 0303 	and.w	r3, r3, #3
 8005162:	2b00      	cmp	r3, #0
 8005164:	d00e      	beq.n	8005184 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005166:	4b6f      	ldr	r3, [pc, #444]	; (8005324 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005168:	68db      	ldr	r3, [r3, #12]
 800516a:	f003 0203 	and.w	r2, r3, #3
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	429a      	cmp	r2, r3
 8005174:	d103      	bne.n	800517e <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
       ||
 800517a:	2b00      	cmp	r3, #0
 800517c:	d142      	bne.n	8005204 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800517e:	2301      	movs	r3, #1
 8005180:	73fb      	strb	r3, [r7, #15]
 8005182:	e03f      	b.n	8005204 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	2b03      	cmp	r3, #3
 800518a:	d018      	beq.n	80051be <RCCEx_PLLSAI1_Config+0x72>
 800518c:	2b03      	cmp	r3, #3
 800518e:	d825      	bhi.n	80051dc <RCCEx_PLLSAI1_Config+0x90>
 8005190:	2b01      	cmp	r3, #1
 8005192:	d002      	beq.n	800519a <RCCEx_PLLSAI1_Config+0x4e>
 8005194:	2b02      	cmp	r3, #2
 8005196:	d009      	beq.n	80051ac <RCCEx_PLLSAI1_Config+0x60>
 8005198:	e020      	b.n	80051dc <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800519a:	4b62      	ldr	r3, [pc, #392]	; (8005324 <RCCEx_PLLSAI1_Config+0x1d8>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f003 0302 	and.w	r3, r3, #2
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d11d      	bne.n	80051e2 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80051aa:	e01a      	b.n	80051e2 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80051ac:	4b5d      	ldr	r3, [pc, #372]	; (8005324 <RCCEx_PLLSAI1_Config+0x1d8>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d116      	bne.n	80051e6 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80051b8:	2301      	movs	r3, #1
 80051ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80051bc:	e013      	b.n	80051e6 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80051be:	4b59      	ldr	r3, [pc, #356]	; (8005324 <RCCEx_PLLSAI1_Config+0x1d8>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d10f      	bne.n	80051ea <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80051ca:	4b56      	ldr	r3, [pc, #344]	; (8005324 <RCCEx_PLLSAI1_Config+0x1d8>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d109      	bne.n	80051ea <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80051d6:	2301      	movs	r3, #1
 80051d8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80051da:	e006      	b.n	80051ea <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80051dc:	2301      	movs	r3, #1
 80051de:	73fb      	strb	r3, [r7, #15]
      break;
 80051e0:	e004      	b.n	80051ec <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80051e2:	bf00      	nop
 80051e4:	e002      	b.n	80051ec <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80051e6:	bf00      	nop
 80051e8:	e000      	b.n	80051ec <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80051ea:	bf00      	nop
    }

    if(status == HAL_OK)
 80051ec:	7bfb      	ldrb	r3, [r7, #15]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d108      	bne.n	8005204 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80051f2:	4b4c      	ldr	r3, [pc, #304]	; (8005324 <RCCEx_PLLSAI1_Config+0x1d8>)
 80051f4:	68db      	ldr	r3, [r3, #12]
 80051f6:	f023 0203 	bic.w	r2, r3, #3
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4949      	ldr	r1, [pc, #292]	; (8005324 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005200:	4313      	orrs	r3, r2
 8005202:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005204:	7bfb      	ldrb	r3, [r7, #15]
 8005206:	2b00      	cmp	r3, #0
 8005208:	f040 8086 	bne.w	8005318 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800520c:	4b45      	ldr	r3, [pc, #276]	; (8005324 <RCCEx_PLLSAI1_Config+0x1d8>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a44      	ldr	r2, [pc, #272]	; (8005324 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005212:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005216:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005218:	f7fd f88e 	bl	8002338 <HAL_GetTick>
 800521c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800521e:	e009      	b.n	8005234 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005220:	f7fd f88a 	bl	8002338 <HAL_GetTick>
 8005224:	4602      	mov	r2, r0
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	1ad3      	subs	r3, r2, r3
 800522a:	2b02      	cmp	r3, #2
 800522c:	d902      	bls.n	8005234 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800522e:	2303      	movs	r3, #3
 8005230:	73fb      	strb	r3, [r7, #15]
        break;
 8005232:	e005      	b.n	8005240 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005234:	4b3b      	ldr	r3, [pc, #236]	; (8005324 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800523c:	2b00      	cmp	r3, #0
 800523e:	d1ef      	bne.n	8005220 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005240:	7bfb      	ldrb	r3, [r7, #15]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d168      	bne.n	8005318 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d113      	bne.n	8005274 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800524c:	4b35      	ldr	r3, [pc, #212]	; (8005324 <RCCEx_PLLSAI1_Config+0x1d8>)
 800524e:	691a      	ldr	r2, [r3, #16]
 8005250:	4b35      	ldr	r3, [pc, #212]	; (8005328 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005252:	4013      	ands	r3, r2
 8005254:	687a      	ldr	r2, [r7, #4]
 8005256:	6892      	ldr	r2, [r2, #8]
 8005258:	0211      	lsls	r1, r2, #8
 800525a:	687a      	ldr	r2, [r7, #4]
 800525c:	68d2      	ldr	r2, [r2, #12]
 800525e:	06d2      	lsls	r2, r2, #27
 8005260:	4311      	orrs	r1, r2
 8005262:	687a      	ldr	r2, [r7, #4]
 8005264:	6852      	ldr	r2, [r2, #4]
 8005266:	3a01      	subs	r2, #1
 8005268:	0112      	lsls	r2, r2, #4
 800526a:	430a      	orrs	r2, r1
 800526c:	492d      	ldr	r1, [pc, #180]	; (8005324 <RCCEx_PLLSAI1_Config+0x1d8>)
 800526e:	4313      	orrs	r3, r2
 8005270:	610b      	str	r3, [r1, #16]
 8005272:	e02d      	b.n	80052d0 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	2b01      	cmp	r3, #1
 8005278:	d115      	bne.n	80052a6 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800527a:	4b2a      	ldr	r3, [pc, #168]	; (8005324 <RCCEx_PLLSAI1_Config+0x1d8>)
 800527c:	691a      	ldr	r2, [r3, #16]
 800527e:	4b2b      	ldr	r3, [pc, #172]	; (800532c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005280:	4013      	ands	r3, r2
 8005282:	687a      	ldr	r2, [r7, #4]
 8005284:	6892      	ldr	r2, [r2, #8]
 8005286:	0211      	lsls	r1, r2, #8
 8005288:	687a      	ldr	r2, [r7, #4]
 800528a:	6912      	ldr	r2, [r2, #16]
 800528c:	0852      	lsrs	r2, r2, #1
 800528e:	3a01      	subs	r2, #1
 8005290:	0552      	lsls	r2, r2, #21
 8005292:	4311      	orrs	r1, r2
 8005294:	687a      	ldr	r2, [r7, #4]
 8005296:	6852      	ldr	r2, [r2, #4]
 8005298:	3a01      	subs	r2, #1
 800529a:	0112      	lsls	r2, r2, #4
 800529c:	430a      	orrs	r2, r1
 800529e:	4921      	ldr	r1, [pc, #132]	; (8005324 <RCCEx_PLLSAI1_Config+0x1d8>)
 80052a0:	4313      	orrs	r3, r2
 80052a2:	610b      	str	r3, [r1, #16]
 80052a4:	e014      	b.n	80052d0 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80052a6:	4b1f      	ldr	r3, [pc, #124]	; (8005324 <RCCEx_PLLSAI1_Config+0x1d8>)
 80052a8:	691a      	ldr	r2, [r3, #16]
 80052aa:	4b21      	ldr	r3, [pc, #132]	; (8005330 <RCCEx_PLLSAI1_Config+0x1e4>)
 80052ac:	4013      	ands	r3, r2
 80052ae:	687a      	ldr	r2, [r7, #4]
 80052b0:	6892      	ldr	r2, [r2, #8]
 80052b2:	0211      	lsls	r1, r2, #8
 80052b4:	687a      	ldr	r2, [r7, #4]
 80052b6:	6952      	ldr	r2, [r2, #20]
 80052b8:	0852      	lsrs	r2, r2, #1
 80052ba:	3a01      	subs	r2, #1
 80052bc:	0652      	lsls	r2, r2, #25
 80052be:	4311      	orrs	r1, r2
 80052c0:	687a      	ldr	r2, [r7, #4]
 80052c2:	6852      	ldr	r2, [r2, #4]
 80052c4:	3a01      	subs	r2, #1
 80052c6:	0112      	lsls	r2, r2, #4
 80052c8:	430a      	orrs	r2, r1
 80052ca:	4916      	ldr	r1, [pc, #88]	; (8005324 <RCCEx_PLLSAI1_Config+0x1d8>)
 80052cc:	4313      	orrs	r3, r2
 80052ce:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80052d0:	4b14      	ldr	r3, [pc, #80]	; (8005324 <RCCEx_PLLSAI1_Config+0x1d8>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a13      	ldr	r2, [pc, #76]	; (8005324 <RCCEx_PLLSAI1_Config+0x1d8>)
 80052d6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80052da:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052dc:	f7fd f82c 	bl	8002338 <HAL_GetTick>
 80052e0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80052e2:	e009      	b.n	80052f8 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80052e4:	f7fd f828 	bl	8002338 <HAL_GetTick>
 80052e8:	4602      	mov	r2, r0
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	1ad3      	subs	r3, r2, r3
 80052ee:	2b02      	cmp	r3, #2
 80052f0:	d902      	bls.n	80052f8 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80052f2:	2303      	movs	r3, #3
 80052f4:	73fb      	strb	r3, [r7, #15]
          break;
 80052f6:	e005      	b.n	8005304 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80052f8:	4b0a      	ldr	r3, [pc, #40]	; (8005324 <RCCEx_PLLSAI1_Config+0x1d8>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005300:	2b00      	cmp	r3, #0
 8005302:	d0ef      	beq.n	80052e4 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005304:	7bfb      	ldrb	r3, [r7, #15]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d106      	bne.n	8005318 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800530a:	4b06      	ldr	r3, [pc, #24]	; (8005324 <RCCEx_PLLSAI1_Config+0x1d8>)
 800530c:	691a      	ldr	r2, [r3, #16]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	699b      	ldr	r3, [r3, #24]
 8005312:	4904      	ldr	r1, [pc, #16]	; (8005324 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005314:	4313      	orrs	r3, r2
 8005316:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005318:	7bfb      	ldrb	r3, [r7, #15]
}
 800531a:	4618      	mov	r0, r3
 800531c:	3710      	adds	r7, #16
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}
 8005322:	bf00      	nop
 8005324:	40021000 	.word	0x40021000
 8005328:	07ff800f 	.word	0x07ff800f
 800532c:	ff9f800f 	.word	0xff9f800f
 8005330:	f9ff800f 	.word	0xf9ff800f

08005334 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b084      	sub	sp, #16
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
 800533c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800533e:	2300      	movs	r3, #0
 8005340:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005342:	4b72      	ldr	r3, [pc, #456]	; (800550c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005344:	68db      	ldr	r3, [r3, #12]
 8005346:	f003 0303 	and.w	r3, r3, #3
 800534a:	2b00      	cmp	r3, #0
 800534c:	d00e      	beq.n	800536c <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800534e:	4b6f      	ldr	r3, [pc, #444]	; (800550c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005350:	68db      	ldr	r3, [r3, #12]
 8005352:	f003 0203 	and.w	r2, r3, #3
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	429a      	cmp	r2, r3
 800535c:	d103      	bne.n	8005366 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
       ||
 8005362:	2b00      	cmp	r3, #0
 8005364:	d142      	bne.n	80053ec <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8005366:	2301      	movs	r3, #1
 8005368:	73fb      	strb	r3, [r7, #15]
 800536a:	e03f      	b.n	80053ec <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	2b03      	cmp	r3, #3
 8005372:	d018      	beq.n	80053a6 <RCCEx_PLLSAI2_Config+0x72>
 8005374:	2b03      	cmp	r3, #3
 8005376:	d825      	bhi.n	80053c4 <RCCEx_PLLSAI2_Config+0x90>
 8005378:	2b01      	cmp	r3, #1
 800537a:	d002      	beq.n	8005382 <RCCEx_PLLSAI2_Config+0x4e>
 800537c:	2b02      	cmp	r3, #2
 800537e:	d009      	beq.n	8005394 <RCCEx_PLLSAI2_Config+0x60>
 8005380:	e020      	b.n	80053c4 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005382:	4b62      	ldr	r3, [pc, #392]	; (800550c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f003 0302 	and.w	r3, r3, #2
 800538a:	2b00      	cmp	r3, #0
 800538c:	d11d      	bne.n	80053ca <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800538e:	2301      	movs	r3, #1
 8005390:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005392:	e01a      	b.n	80053ca <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005394:	4b5d      	ldr	r3, [pc, #372]	; (800550c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800539c:	2b00      	cmp	r3, #0
 800539e:	d116      	bne.n	80053ce <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80053a0:	2301      	movs	r3, #1
 80053a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80053a4:	e013      	b.n	80053ce <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80053a6:	4b59      	ldr	r3, [pc, #356]	; (800550c <RCCEx_PLLSAI2_Config+0x1d8>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d10f      	bne.n	80053d2 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80053b2:	4b56      	ldr	r3, [pc, #344]	; (800550c <RCCEx_PLLSAI2_Config+0x1d8>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d109      	bne.n	80053d2 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80053c2:	e006      	b.n	80053d2 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80053c4:	2301      	movs	r3, #1
 80053c6:	73fb      	strb	r3, [r7, #15]
      break;
 80053c8:	e004      	b.n	80053d4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80053ca:	bf00      	nop
 80053cc:	e002      	b.n	80053d4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80053ce:	bf00      	nop
 80053d0:	e000      	b.n	80053d4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80053d2:	bf00      	nop
    }

    if(status == HAL_OK)
 80053d4:	7bfb      	ldrb	r3, [r7, #15]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d108      	bne.n	80053ec <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80053da:	4b4c      	ldr	r3, [pc, #304]	; (800550c <RCCEx_PLLSAI2_Config+0x1d8>)
 80053dc:	68db      	ldr	r3, [r3, #12]
 80053de:	f023 0203 	bic.w	r2, r3, #3
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4949      	ldr	r1, [pc, #292]	; (800550c <RCCEx_PLLSAI2_Config+0x1d8>)
 80053e8:	4313      	orrs	r3, r2
 80053ea:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80053ec:	7bfb      	ldrb	r3, [r7, #15]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	f040 8086 	bne.w	8005500 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80053f4:	4b45      	ldr	r3, [pc, #276]	; (800550c <RCCEx_PLLSAI2_Config+0x1d8>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a44      	ldr	r2, [pc, #272]	; (800550c <RCCEx_PLLSAI2_Config+0x1d8>)
 80053fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005400:	f7fc ff9a 	bl	8002338 <HAL_GetTick>
 8005404:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005406:	e009      	b.n	800541c <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005408:	f7fc ff96 	bl	8002338 <HAL_GetTick>
 800540c:	4602      	mov	r2, r0
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	1ad3      	subs	r3, r2, r3
 8005412:	2b02      	cmp	r3, #2
 8005414:	d902      	bls.n	800541c <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005416:	2303      	movs	r3, #3
 8005418:	73fb      	strb	r3, [r7, #15]
        break;
 800541a:	e005      	b.n	8005428 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800541c:	4b3b      	ldr	r3, [pc, #236]	; (800550c <RCCEx_PLLSAI2_Config+0x1d8>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005424:	2b00      	cmp	r3, #0
 8005426:	d1ef      	bne.n	8005408 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005428:	7bfb      	ldrb	r3, [r7, #15]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d168      	bne.n	8005500 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d113      	bne.n	800545c <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005434:	4b35      	ldr	r3, [pc, #212]	; (800550c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005436:	695a      	ldr	r2, [r3, #20]
 8005438:	4b35      	ldr	r3, [pc, #212]	; (8005510 <RCCEx_PLLSAI2_Config+0x1dc>)
 800543a:	4013      	ands	r3, r2
 800543c:	687a      	ldr	r2, [r7, #4]
 800543e:	6892      	ldr	r2, [r2, #8]
 8005440:	0211      	lsls	r1, r2, #8
 8005442:	687a      	ldr	r2, [r7, #4]
 8005444:	68d2      	ldr	r2, [r2, #12]
 8005446:	06d2      	lsls	r2, r2, #27
 8005448:	4311      	orrs	r1, r2
 800544a:	687a      	ldr	r2, [r7, #4]
 800544c:	6852      	ldr	r2, [r2, #4]
 800544e:	3a01      	subs	r2, #1
 8005450:	0112      	lsls	r2, r2, #4
 8005452:	430a      	orrs	r2, r1
 8005454:	492d      	ldr	r1, [pc, #180]	; (800550c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005456:	4313      	orrs	r3, r2
 8005458:	614b      	str	r3, [r1, #20]
 800545a:	e02d      	b.n	80054b8 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	2b01      	cmp	r3, #1
 8005460:	d115      	bne.n	800548e <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005462:	4b2a      	ldr	r3, [pc, #168]	; (800550c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005464:	695a      	ldr	r2, [r3, #20]
 8005466:	4b2b      	ldr	r3, [pc, #172]	; (8005514 <RCCEx_PLLSAI2_Config+0x1e0>)
 8005468:	4013      	ands	r3, r2
 800546a:	687a      	ldr	r2, [r7, #4]
 800546c:	6892      	ldr	r2, [r2, #8]
 800546e:	0211      	lsls	r1, r2, #8
 8005470:	687a      	ldr	r2, [r7, #4]
 8005472:	6912      	ldr	r2, [r2, #16]
 8005474:	0852      	lsrs	r2, r2, #1
 8005476:	3a01      	subs	r2, #1
 8005478:	0552      	lsls	r2, r2, #21
 800547a:	4311      	orrs	r1, r2
 800547c:	687a      	ldr	r2, [r7, #4]
 800547e:	6852      	ldr	r2, [r2, #4]
 8005480:	3a01      	subs	r2, #1
 8005482:	0112      	lsls	r2, r2, #4
 8005484:	430a      	orrs	r2, r1
 8005486:	4921      	ldr	r1, [pc, #132]	; (800550c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005488:	4313      	orrs	r3, r2
 800548a:	614b      	str	r3, [r1, #20]
 800548c:	e014      	b.n	80054b8 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800548e:	4b1f      	ldr	r3, [pc, #124]	; (800550c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005490:	695a      	ldr	r2, [r3, #20]
 8005492:	4b21      	ldr	r3, [pc, #132]	; (8005518 <RCCEx_PLLSAI2_Config+0x1e4>)
 8005494:	4013      	ands	r3, r2
 8005496:	687a      	ldr	r2, [r7, #4]
 8005498:	6892      	ldr	r2, [r2, #8]
 800549a:	0211      	lsls	r1, r2, #8
 800549c:	687a      	ldr	r2, [r7, #4]
 800549e:	6952      	ldr	r2, [r2, #20]
 80054a0:	0852      	lsrs	r2, r2, #1
 80054a2:	3a01      	subs	r2, #1
 80054a4:	0652      	lsls	r2, r2, #25
 80054a6:	4311      	orrs	r1, r2
 80054a8:	687a      	ldr	r2, [r7, #4]
 80054aa:	6852      	ldr	r2, [r2, #4]
 80054ac:	3a01      	subs	r2, #1
 80054ae:	0112      	lsls	r2, r2, #4
 80054b0:	430a      	orrs	r2, r1
 80054b2:	4916      	ldr	r1, [pc, #88]	; (800550c <RCCEx_PLLSAI2_Config+0x1d8>)
 80054b4:	4313      	orrs	r3, r2
 80054b6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80054b8:	4b14      	ldr	r3, [pc, #80]	; (800550c <RCCEx_PLLSAI2_Config+0x1d8>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a13      	ldr	r2, [pc, #76]	; (800550c <RCCEx_PLLSAI2_Config+0x1d8>)
 80054be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054c2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054c4:	f7fc ff38 	bl	8002338 <HAL_GetTick>
 80054c8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80054ca:	e009      	b.n	80054e0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80054cc:	f7fc ff34 	bl	8002338 <HAL_GetTick>
 80054d0:	4602      	mov	r2, r0
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	1ad3      	subs	r3, r2, r3
 80054d6:	2b02      	cmp	r3, #2
 80054d8:	d902      	bls.n	80054e0 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80054da:	2303      	movs	r3, #3
 80054dc:	73fb      	strb	r3, [r7, #15]
          break;
 80054de:	e005      	b.n	80054ec <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80054e0:	4b0a      	ldr	r3, [pc, #40]	; (800550c <RCCEx_PLLSAI2_Config+0x1d8>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d0ef      	beq.n	80054cc <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80054ec:	7bfb      	ldrb	r3, [r7, #15]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d106      	bne.n	8005500 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80054f2:	4b06      	ldr	r3, [pc, #24]	; (800550c <RCCEx_PLLSAI2_Config+0x1d8>)
 80054f4:	695a      	ldr	r2, [r3, #20]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	699b      	ldr	r3, [r3, #24]
 80054fa:	4904      	ldr	r1, [pc, #16]	; (800550c <RCCEx_PLLSAI2_Config+0x1d8>)
 80054fc:	4313      	orrs	r3, r2
 80054fe:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005500:	7bfb      	ldrb	r3, [r7, #15]
}
 8005502:	4618      	mov	r0, r3
 8005504:	3710      	adds	r7, #16
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}
 800550a:	bf00      	nop
 800550c:	40021000 	.word	0x40021000
 8005510:	07ff800f 	.word	0x07ff800f
 8005514:	ff9f800f 	.word	0xff9f800f
 8005518:	f9ff800f 	.word	0xf9ff800f

0800551c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b088      	sub	sp, #32
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	689b      	ldr	r3, [r3, #8]
 8005532:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005534:	69bb      	ldr	r3, [r7, #24]
 8005536:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800553a:	2b00      	cmp	r3, #0
 800553c:	d10e      	bne.n	800555c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800553e:	69bb      	ldr	r3, [r7, #24]
 8005540:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005544:	2b00      	cmp	r3, #0
 8005546:	d009      	beq.n	800555c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005548:	69fb      	ldr	r3, [r7, #28]
 800554a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800554e:	2b00      	cmp	r3, #0
 8005550:	d004      	beq.n	800555c <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	4798      	blx	r3
    return;
 800555a:	e0ce      	b.n	80056fa <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800555c:	69bb      	ldr	r3, [r7, #24]
 800555e:	f003 0302 	and.w	r3, r3, #2
 8005562:	2b00      	cmp	r3, #0
 8005564:	d009      	beq.n	800557a <HAL_SPI_IRQHandler+0x5e>
 8005566:	69fb      	ldr	r3, [r7, #28]
 8005568:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800556c:	2b00      	cmp	r3, #0
 800556e:	d004      	beq.n	800557a <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005574:	6878      	ldr	r0, [r7, #4]
 8005576:	4798      	blx	r3
    return;
 8005578:	e0bf      	b.n	80056fa <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800557a:	69bb      	ldr	r3, [r7, #24]
 800557c:	f003 0320 	and.w	r3, r3, #32
 8005580:	2b00      	cmp	r3, #0
 8005582:	d10a      	bne.n	800559a <HAL_SPI_IRQHandler+0x7e>
 8005584:	69bb      	ldr	r3, [r7, #24]
 8005586:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800558a:	2b00      	cmp	r3, #0
 800558c:	d105      	bne.n	800559a <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800558e:	69bb      	ldr	r3, [r7, #24]
 8005590:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005594:	2b00      	cmp	r3, #0
 8005596:	f000 80b0 	beq.w	80056fa <HAL_SPI_IRQHandler+0x1de>
 800559a:	69fb      	ldr	r3, [r7, #28]
 800559c:	f003 0320 	and.w	r3, r3, #32
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	f000 80aa 	beq.w	80056fa <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80055a6:	69bb      	ldr	r3, [r7, #24]
 80055a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d023      	beq.n	80055f8 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80055b6:	b2db      	uxtb	r3, r3
 80055b8:	2b03      	cmp	r3, #3
 80055ba:	d011      	beq.n	80055e0 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055c0:	f043 0204 	orr.w	r2, r3, #4
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80055c8:	2300      	movs	r3, #0
 80055ca:	617b      	str	r3, [r7, #20]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	68db      	ldr	r3, [r3, #12]
 80055d2:	617b      	str	r3, [r7, #20]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	689b      	ldr	r3, [r3, #8]
 80055da:	617b      	str	r3, [r7, #20]
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	e00b      	b.n	80055f8 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80055e0:	2300      	movs	r3, #0
 80055e2:	613b      	str	r3, [r7, #16]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	68db      	ldr	r3, [r3, #12]
 80055ea:	613b      	str	r3, [r7, #16]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	689b      	ldr	r3, [r3, #8]
 80055f2:	613b      	str	r3, [r7, #16]
 80055f4:	693b      	ldr	r3, [r7, #16]
        return;
 80055f6:	e080      	b.n	80056fa <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80055f8:	69bb      	ldr	r3, [r7, #24]
 80055fa:	f003 0320 	and.w	r3, r3, #32
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d014      	beq.n	800562c <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005606:	f043 0201 	orr.w	r2, r3, #1
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800560e:	2300      	movs	r3, #0
 8005610:	60fb      	str	r3, [r7, #12]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	689b      	ldr	r3, [r3, #8]
 8005618:	60fb      	str	r3, [r7, #12]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	681a      	ldr	r2, [r3, #0]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005628:	601a      	str	r2, [r3, #0]
 800562a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800562c:	69bb      	ldr	r3, [r7, #24]
 800562e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005632:	2b00      	cmp	r3, #0
 8005634:	d00c      	beq.n	8005650 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800563a:	f043 0208 	orr.w	r2, r3, #8
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005642:	2300      	movs	r3, #0
 8005644:	60bb      	str	r3, [r7, #8]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	689b      	ldr	r3, [r3, #8]
 800564c:	60bb      	str	r3, [r7, #8]
 800564e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005654:	2b00      	cmp	r3, #0
 8005656:	d04f      	beq.n	80056f8 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	685a      	ldr	r2, [r3, #4]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005666:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2201      	movs	r2, #1
 800566c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005670:	69fb      	ldr	r3, [r7, #28]
 8005672:	f003 0302 	and.w	r3, r3, #2
 8005676:	2b00      	cmp	r3, #0
 8005678:	d104      	bne.n	8005684 <HAL_SPI_IRQHandler+0x168>
 800567a:	69fb      	ldr	r3, [r7, #28]
 800567c:	f003 0301 	and.w	r3, r3, #1
 8005680:	2b00      	cmp	r3, #0
 8005682:	d034      	beq.n	80056ee <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	685a      	ldr	r2, [r3, #4]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f022 0203 	bic.w	r2, r2, #3
 8005692:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005698:	2b00      	cmp	r3, #0
 800569a:	d011      	beq.n	80056c0 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056a0:	4a17      	ldr	r2, [pc, #92]	; (8005700 <HAL_SPI_IRQHandler+0x1e4>)
 80056a2:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056a8:	4618      	mov	r0, r3
 80056aa:	f7fd ffce 	bl	800364a <HAL_DMA_Abort_IT>
 80056ae:	4603      	mov	r3, r0
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d005      	beq.n	80056c0 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056b8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d016      	beq.n	80056f6 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056cc:	4a0c      	ldr	r2, [pc, #48]	; (8005700 <HAL_SPI_IRQHandler+0x1e4>)
 80056ce:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056d4:	4618      	mov	r0, r3
 80056d6:	f7fd ffb8 	bl	800364a <HAL_DMA_Abort_IT>
 80056da:	4603      	mov	r3, r0
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d00a      	beq.n	80056f6 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056e4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 80056ec:	e003      	b.n	80056f6 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f000 f808 	bl	8005704 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80056f4:	e000      	b.n	80056f8 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 80056f6:	bf00      	nop
    return;
 80056f8:	bf00      	nop
  }
}
 80056fa:	3720      	adds	r7, #32
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}
 8005700:	08005719 	.word	0x08005719

08005704 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005704:	b480      	push	{r7}
 8005706:	b083      	sub	sp, #12
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800570c:	bf00      	nop
 800570e:	370c      	adds	r7, #12
 8005710:	46bd      	mov	sp, r7
 8005712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005716:	4770      	bx	lr

08005718 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b084      	sub	sp, #16
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005724:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	2200      	movs	r2, #0
 800572a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	2200      	movs	r2, #0
 8005732:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005734:	68f8      	ldr	r0, [r7, #12]
 8005736:	f7ff ffe5 	bl	8005704 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800573a:	bf00      	nop
 800573c:	3710      	adds	r7, #16
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}

08005742 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005742:	b580      	push	{r7, lr}
 8005744:	b082      	sub	sp, #8
 8005746:	af00      	add	r7, sp, #0
 8005748:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d101      	bne.n	8005754 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005750:	2301      	movs	r3, #1
 8005752:	e049      	b.n	80057e8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800575a:	b2db      	uxtb	r3, r3
 800575c:	2b00      	cmp	r3, #0
 800575e:	d106      	bne.n	800576e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2200      	movs	r2, #0
 8005764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005768:	6878      	ldr	r0, [r7, #4]
 800576a:	f7fc fb57 	bl	8001e1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2202      	movs	r2, #2
 8005772:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681a      	ldr	r2, [r3, #0]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	3304      	adds	r3, #4
 800577e:	4619      	mov	r1, r3
 8005780:	4610      	mov	r0, r2
 8005782:	f000 faa3 	bl	8005ccc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2201      	movs	r2, #1
 800578a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2201      	movs	r2, #1
 8005792:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2201      	movs	r2, #1
 800579a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2201      	movs	r2, #1
 80057a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2201      	movs	r2, #1
 80057aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2201      	movs	r2, #1
 80057b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2201      	movs	r2, #1
 80057ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2201      	movs	r2, #1
 80057c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2201      	movs	r2, #1
 80057ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2201      	movs	r2, #1
 80057d2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2201      	movs	r2, #1
 80057da:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2201      	movs	r2, #1
 80057e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80057e6:	2300      	movs	r3, #0
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	3708      	adds	r7, #8
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bd80      	pop	{r7, pc}

080057f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b085      	sub	sp, #20
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057fe:	b2db      	uxtb	r3, r3
 8005800:	2b01      	cmp	r3, #1
 8005802:	d001      	beq.n	8005808 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005804:	2301      	movs	r3, #1
 8005806:	e04f      	b.n	80058a8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2202      	movs	r2, #2
 800580c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	68da      	ldr	r2, [r3, #12]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f042 0201 	orr.w	r2, r2, #1
 800581e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a23      	ldr	r2, [pc, #140]	; (80058b4 <HAL_TIM_Base_Start_IT+0xc4>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d01d      	beq.n	8005866 <HAL_TIM_Base_Start_IT+0x76>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005832:	d018      	beq.n	8005866 <HAL_TIM_Base_Start_IT+0x76>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4a1f      	ldr	r2, [pc, #124]	; (80058b8 <HAL_TIM_Base_Start_IT+0xc8>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d013      	beq.n	8005866 <HAL_TIM_Base_Start_IT+0x76>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a1e      	ldr	r2, [pc, #120]	; (80058bc <HAL_TIM_Base_Start_IT+0xcc>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d00e      	beq.n	8005866 <HAL_TIM_Base_Start_IT+0x76>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a1c      	ldr	r2, [pc, #112]	; (80058c0 <HAL_TIM_Base_Start_IT+0xd0>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d009      	beq.n	8005866 <HAL_TIM_Base_Start_IT+0x76>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a1b      	ldr	r2, [pc, #108]	; (80058c4 <HAL_TIM_Base_Start_IT+0xd4>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d004      	beq.n	8005866 <HAL_TIM_Base_Start_IT+0x76>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a19      	ldr	r2, [pc, #100]	; (80058c8 <HAL_TIM_Base_Start_IT+0xd8>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d115      	bne.n	8005892 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	689a      	ldr	r2, [r3, #8]
 800586c:	4b17      	ldr	r3, [pc, #92]	; (80058cc <HAL_TIM_Base_Start_IT+0xdc>)
 800586e:	4013      	ands	r3, r2
 8005870:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	2b06      	cmp	r3, #6
 8005876:	d015      	beq.n	80058a4 <HAL_TIM_Base_Start_IT+0xb4>
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800587e:	d011      	beq.n	80058a4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	681a      	ldr	r2, [r3, #0]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f042 0201 	orr.w	r2, r2, #1
 800588e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005890:	e008      	b.n	80058a4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	681a      	ldr	r2, [r3, #0]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f042 0201 	orr.w	r2, r2, #1
 80058a0:	601a      	str	r2, [r3, #0]
 80058a2:	e000      	b.n	80058a6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058a4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80058a6:	2300      	movs	r3, #0
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	3714      	adds	r7, #20
 80058ac:	46bd      	mov	sp, r7
 80058ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b2:	4770      	bx	lr
 80058b4:	40012c00 	.word	0x40012c00
 80058b8:	40000400 	.word	0x40000400
 80058bc:	40000800 	.word	0x40000800
 80058c0:	40000c00 	.word	0x40000c00
 80058c4:	40013400 	.word	0x40013400
 80058c8:	40014000 	.word	0x40014000
 80058cc:	00010007 	.word	0x00010007

080058d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b084      	sub	sp, #16
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	68db      	ldr	r3, [r3, #12]
 80058de:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	691b      	ldr	r3, [r3, #16]
 80058e6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	f003 0302 	and.w	r3, r3, #2
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d020      	beq.n	8005934 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	f003 0302 	and.w	r3, r3, #2
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d01b      	beq.n	8005934 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f06f 0202 	mvn.w	r2, #2
 8005904:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2201      	movs	r2, #1
 800590a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	699b      	ldr	r3, [r3, #24]
 8005912:	f003 0303 	and.w	r3, r3, #3
 8005916:	2b00      	cmp	r3, #0
 8005918:	d003      	beq.n	8005922 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f000 f9b7 	bl	8005c8e <HAL_TIM_IC_CaptureCallback>
 8005920:	e005      	b.n	800592e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f000 f9a9 	bl	8005c7a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005928:	6878      	ldr	r0, [r7, #4]
 800592a:	f000 f9ba 	bl	8005ca2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2200      	movs	r2, #0
 8005932:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	f003 0304 	and.w	r3, r3, #4
 800593a:	2b00      	cmp	r3, #0
 800593c:	d020      	beq.n	8005980 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	f003 0304 	and.w	r3, r3, #4
 8005944:	2b00      	cmp	r3, #0
 8005946:	d01b      	beq.n	8005980 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f06f 0204 	mvn.w	r2, #4
 8005950:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2202      	movs	r2, #2
 8005956:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	699b      	ldr	r3, [r3, #24]
 800595e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005962:	2b00      	cmp	r3, #0
 8005964:	d003      	beq.n	800596e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f000 f991 	bl	8005c8e <HAL_TIM_IC_CaptureCallback>
 800596c:	e005      	b.n	800597a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f000 f983 	bl	8005c7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005974:	6878      	ldr	r0, [r7, #4]
 8005976:	f000 f994 	bl	8005ca2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2200      	movs	r2, #0
 800597e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	f003 0308 	and.w	r3, r3, #8
 8005986:	2b00      	cmp	r3, #0
 8005988:	d020      	beq.n	80059cc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	f003 0308 	and.w	r3, r3, #8
 8005990:	2b00      	cmp	r3, #0
 8005992:	d01b      	beq.n	80059cc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f06f 0208 	mvn.w	r2, #8
 800599c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2204      	movs	r2, #4
 80059a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	69db      	ldr	r3, [r3, #28]
 80059aa:	f003 0303 	and.w	r3, r3, #3
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d003      	beq.n	80059ba <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059b2:	6878      	ldr	r0, [r7, #4]
 80059b4:	f000 f96b 	bl	8005c8e <HAL_TIM_IC_CaptureCallback>
 80059b8:	e005      	b.n	80059c6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	f000 f95d 	bl	8005c7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	f000 f96e 	bl	8005ca2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2200      	movs	r2, #0
 80059ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	f003 0310 	and.w	r3, r3, #16
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d020      	beq.n	8005a18 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	f003 0310 	and.w	r3, r3, #16
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d01b      	beq.n	8005a18 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f06f 0210 	mvn.w	r2, #16
 80059e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2208      	movs	r2, #8
 80059ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	69db      	ldr	r3, [r3, #28]
 80059f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d003      	beq.n	8005a06 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f000 f945 	bl	8005c8e <HAL_TIM_IC_CaptureCallback>
 8005a04:	e005      	b.n	8005a12 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f000 f937 	bl	8005c7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a0c:	6878      	ldr	r0, [r7, #4]
 8005a0e:	f000 f948 	bl	8005ca2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2200      	movs	r2, #0
 8005a16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	f003 0301 	and.w	r3, r3, #1
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d00c      	beq.n	8005a3c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	f003 0301 	and.w	r3, r3, #1
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d007      	beq.n	8005a3c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f06f 0201 	mvn.w	r2, #1
 8005a34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f000 f915 	bl	8005c66 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d00c      	beq.n	8005a60 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d007      	beq.n	8005a60 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005a58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f000 fafc 	bl	8006058 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d00c      	beq.n	8005a84 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d007      	beq.n	8005a84 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005a7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f000 faf4 	bl	800606c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d00c      	beq.n	8005aa8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d007      	beq.n	8005aa8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005aa0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f000 f907 	bl	8005cb6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	f003 0320 	and.w	r3, r3, #32
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d00c      	beq.n	8005acc <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	f003 0320 	and.w	r3, r3, #32
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d007      	beq.n	8005acc <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f06f 0220 	mvn.w	r2, #32
 8005ac4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f000 fabc 	bl	8006044 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005acc:	bf00      	nop
 8005ace:	3710      	adds	r7, #16
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd80      	pop	{r7, pc}

08005ad4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b084      	sub	sp, #16
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
 8005adc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	d101      	bne.n	8005af0 <HAL_TIM_ConfigClockSource+0x1c>
 8005aec:	2302      	movs	r3, #2
 8005aee:	e0b6      	b.n	8005c5e <HAL_TIM_ConfigClockSource+0x18a>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2201      	movs	r2, #1
 8005af4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2202      	movs	r2, #2
 8005afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	689b      	ldr	r3, [r3, #8]
 8005b06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b0e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005b12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b1a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	68ba      	ldr	r2, [r7, #8]
 8005b22:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b2c:	d03e      	beq.n	8005bac <HAL_TIM_ConfigClockSource+0xd8>
 8005b2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b32:	f200 8087 	bhi.w	8005c44 <HAL_TIM_ConfigClockSource+0x170>
 8005b36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b3a:	f000 8086 	beq.w	8005c4a <HAL_TIM_ConfigClockSource+0x176>
 8005b3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b42:	d87f      	bhi.n	8005c44 <HAL_TIM_ConfigClockSource+0x170>
 8005b44:	2b70      	cmp	r3, #112	; 0x70
 8005b46:	d01a      	beq.n	8005b7e <HAL_TIM_ConfigClockSource+0xaa>
 8005b48:	2b70      	cmp	r3, #112	; 0x70
 8005b4a:	d87b      	bhi.n	8005c44 <HAL_TIM_ConfigClockSource+0x170>
 8005b4c:	2b60      	cmp	r3, #96	; 0x60
 8005b4e:	d050      	beq.n	8005bf2 <HAL_TIM_ConfigClockSource+0x11e>
 8005b50:	2b60      	cmp	r3, #96	; 0x60
 8005b52:	d877      	bhi.n	8005c44 <HAL_TIM_ConfigClockSource+0x170>
 8005b54:	2b50      	cmp	r3, #80	; 0x50
 8005b56:	d03c      	beq.n	8005bd2 <HAL_TIM_ConfigClockSource+0xfe>
 8005b58:	2b50      	cmp	r3, #80	; 0x50
 8005b5a:	d873      	bhi.n	8005c44 <HAL_TIM_ConfigClockSource+0x170>
 8005b5c:	2b40      	cmp	r3, #64	; 0x40
 8005b5e:	d058      	beq.n	8005c12 <HAL_TIM_ConfigClockSource+0x13e>
 8005b60:	2b40      	cmp	r3, #64	; 0x40
 8005b62:	d86f      	bhi.n	8005c44 <HAL_TIM_ConfigClockSource+0x170>
 8005b64:	2b30      	cmp	r3, #48	; 0x30
 8005b66:	d064      	beq.n	8005c32 <HAL_TIM_ConfigClockSource+0x15e>
 8005b68:	2b30      	cmp	r3, #48	; 0x30
 8005b6a:	d86b      	bhi.n	8005c44 <HAL_TIM_ConfigClockSource+0x170>
 8005b6c:	2b20      	cmp	r3, #32
 8005b6e:	d060      	beq.n	8005c32 <HAL_TIM_ConfigClockSource+0x15e>
 8005b70:	2b20      	cmp	r3, #32
 8005b72:	d867      	bhi.n	8005c44 <HAL_TIM_ConfigClockSource+0x170>
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d05c      	beq.n	8005c32 <HAL_TIM_ConfigClockSource+0x15e>
 8005b78:	2b10      	cmp	r3, #16
 8005b7a:	d05a      	beq.n	8005c32 <HAL_TIM_ConfigClockSource+0x15e>
 8005b7c:	e062      	b.n	8005c44 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005b8e:	f000 f9b1 	bl	8005ef4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005ba0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	68ba      	ldr	r2, [r7, #8]
 8005ba8:	609a      	str	r2, [r3, #8]
      break;
 8005baa:	e04f      	b.n	8005c4c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005bbc:	f000 f99a 	bl	8005ef4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	689a      	ldr	r2, [r3, #8]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005bce:	609a      	str	r2, [r3, #8]
      break;
 8005bd0:	e03c      	b.n	8005c4c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bde:	461a      	mov	r2, r3
 8005be0:	f000 f90e 	bl	8005e00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	2150      	movs	r1, #80	; 0x50
 8005bea:	4618      	mov	r0, r3
 8005bec:	f000 f967 	bl	8005ebe <TIM_ITRx_SetConfig>
      break;
 8005bf0:	e02c      	b.n	8005c4c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005bfe:	461a      	mov	r2, r3
 8005c00:	f000 f92d 	bl	8005e5e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	2160      	movs	r1, #96	; 0x60
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	f000 f957 	bl	8005ebe <TIM_ITRx_SetConfig>
      break;
 8005c10:	e01c      	b.n	8005c4c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c1e:	461a      	mov	r2, r3
 8005c20:	f000 f8ee 	bl	8005e00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	2140      	movs	r1, #64	; 0x40
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	f000 f947 	bl	8005ebe <TIM_ITRx_SetConfig>
      break;
 8005c30:	e00c      	b.n	8005c4c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681a      	ldr	r2, [r3, #0]
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4619      	mov	r1, r3
 8005c3c:	4610      	mov	r0, r2
 8005c3e:	f000 f93e 	bl	8005ebe <TIM_ITRx_SetConfig>
      break;
 8005c42:	e003      	b.n	8005c4c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005c44:	2301      	movs	r3, #1
 8005c46:	73fb      	strb	r3, [r7, #15]
      break;
 8005c48:	e000      	b.n	8005c4c <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005c4a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2201      	movs	r2, #1
 8005c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2200      	movs	r2, #0
 8005c58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005c5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c5e:	4618      	mov	r0, r3
 8005c60:	3710      	adds	r7, #16
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bd80      	pop	{r7, pc}

08005c66 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c66:	b480      	push	{r7}
 8005c68:	b083      	sub	sp, #12
 8005c6a:	af00      	add	r7, sp, #0
 8005c6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005c6e:	bf00      	nop
 8005c70:	370c      	adds	r7, #12
 8005c72:	46bd      	mov	sp, r7
 8005c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c78:	4770      	bx	lr

08005c7a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c7a:	b480      	push	{r7}
 8005c7c:	b083      	sub	sp, #12
 8005c7e:	af00      	add	r7, sp, #0
 8005c80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005c82:	bf00      	nop
 8005c84:	370c      	adds	r7, #12
 8005c86:	46bd      	mov	sp, r7
 8005c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8c:	4770      	bx	lr

08005c8e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005c8e:	b480      	push	{r7}
 8005c90:	b083      	sub	sp, #12
 8005c92:	af00      	add	r7, sp, #0
 8005c94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005c96:	bf00      	nop
 8005c98:	370c      	adds	r7, #12
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca0:	4770      	bx	lr

08005ca2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005ca2:	b480      	push	{r7}
 8005ca4:	b083      	sub	sp, #12
 8005ca6:	af00      	add	r7, sp, #0
 8005ca8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005caa:	bf00      	nop
 8005cac:	370c      	adds	r7, #12
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb4:	4770      	bx	lr

08005cb6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005cb6:	b480      	push	{r7}
 8005cb8:	b083      	sub	sp, #12
 8005cba:	af00      	add	r7, sp, #0
 8005cbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005cbe:	bf00      	nop
 8005cc0:	370c      	adds	r7, #12
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc8:	4770      	bx	lr
	...

08005ccc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b085      	sub	sp, #20
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
 8005cd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	4a40      	ldr	r2, [pc, #256]	; (8005de0 <TIM_Base_SetConfig+0x114>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d013      	beq.n	8005d0c <TIM_Base_SetConfig+0x40>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cea:	d00f      	beq.n	8005d0c <TIM_Base_SetConfig+0x40>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	4a3d      	ldr	r2, [pc, #244]	; (8005de4 <TIM_Base_SetConfig+0x118>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d00b      	beq.n	8005d0c <TIM_Base_SetConfig+0x40>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	4a3c      	ldr	r2, [pc, #240]	; (8005de8 <TIM_Base_SetConfig+0x11c>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d007      	beq.n	8005d0c <TIM_Base_SetConfig+0x40>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	4a3b      	ldr	r2, [pc, #236]	; (8005dec <TIM_Base_SetConfig+0x120>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d003      	beq.n	8005d0c <TIM_Base_SetConfig+0x40>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	4a3a      	ldr	r2, [pc, #232]	; (8005df0 <TIM_Base_SetConfig+0x124>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d108      	bne.n	8005d1e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	68fa      	ldr	r2, [r7, #12]
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	4a2f      	ldr	r2, [pc, #188]	; (8005de0 <TIM_Base_SetConfig+0x114>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d01f      	beq.n	8005d66 <TIM_Base_SetConfig+0x9a>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d2c:	d01b      	beq.n	8005d66 <TIM_Base_SetConfig+0x9a>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	4a2c      	ldr	r2, [pc, #176]	; (8005de4 <TIM_Base_SetConfig+0x118>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d017      	beq.n	8005d66 <TIM_Base_SetConfig+0x9a>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	4a2b      	ldr	r2, [pc, #172]	; (8005de8 <TIM_Base_SetConfig+0x11c>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d013      	beq.n	8005d66 <TIM_Base_SetConfig+0x9a>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	4a2a      	ldr	r2, [pc, #168]	; (8005dec <TIM_Base_SetConfig+0x120>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d00f      	beq.n	8005d66 <TIM_Base_SetConfig+0x9a>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	4a29      	ldr	r2, [pc, #164]	; (8005df0 <TIM_Base_SetConfig+0x124>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d00b      	beq.n	8005d66 <TIM_Base_SetConfig+0x9a>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	4a28      	ldr	r2, [pc, #160]	; (8005df4 <TIM_Base_SetConfig+0x128>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d007      	beq.n	8005d66 <TIM_Base_SetConfig+0x9a>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	4a27      	ldr	r2, [pc, #156]	; (8005df8 <TIM_Base_SetConfig+0x12c>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d003      	beq.n	8005d66 <TIM_Base_SetConfig+0x9a>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	4a26      	ldr	r2, [pc, #152]	; (8005dfc <TIM_Base_SetConfig+0x130>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d108      	bne.n	8005d78 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	68db      	ldr	r3, [r3, #12]
 8005d72:	68fa      	ldr	r2, [r7, #12]
 8005d74:	4313      	orrs	r3, r2
 8005d76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	695b      	ldr	r3, [r3, #20]
 8005d82:	4313      	orrs	r3, r2
 8005d84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	68fa      	ldr	r2, [r7, #12]
 8005d8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	689a      	ldr	r2, [r3, #8]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	681a      	ldr	r2, [r3, #0]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	4a10      	ldr	r2, [pc, #64]	; (8005de0 <TIM_Base_SetConfig+0x114>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d00f      	beq.n	8005dc4 <TIM_Base_SetConfig+0xf8>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	4a12      	ldr	r2, [pc, #72]	; (8005df0 <TIM_Base_SetConfig+0x124>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d00b      	beq.n	8005dc4 <TIM_Base_SetConfig+0xf8>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	4a11      	ldr	r2, [pc, #68]	; (8005df4 <TIM_Base_SetConfig+0x128>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d007      	beq.n	8005dc4 <TIM_Base_SetConfig+0xf8>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	4a10      	ldr	r2, [pc, #64]	; (8005df8 <TIM_Base_SetConfig+0x12c>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d003      	beq.n	8005dc4 <TIM_Base_SetConfig+0xf8>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	4a0f      	ldr	r2, [pc, #60]	; (8005dfc <TIM_Base_SetConfig+0x130>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d103      	bne.n	8005dcc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	691a      	ldr	r2, [r3, #16]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2201      	movs	r2, #1
 8005dd0:	615a      	str	r2, [r3, #20]
}
 8005dd2:	bf00      	nop
 8005dd4:	3714      	adds	r7, #20
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ddc:	4770      	bx	lr
 8005dde:	bf00      	nop
 8005de0:	40012c00 	.word	0x40012c00
 8005de4:	40000400 	.word	0x40000400
 8005de8:	40000800 	.word	0x40000800
 8005dec:	40000c00 	.word	0x40000c00
 8005df0:	40013400 	.word	0x40013400
 8005df4:	40014000 	.word	0x40014000
 8005df8:	40014400 	.word	0x40014400
 8005dfc:	40014800 	.word	0x40014800

08005e00 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b087      	sub	sp, #28
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	60f8      	str	r0, [r7, #12]
 8005e08:	60b9      	str	r1, [r7, #8]
 8005e0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	6a1b      	ldr	r3, [r3, #32]
 8005e10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	6a1b      	ldr	r3, [r3, #32]
 8005e16:	f023 0201 	bic.w	r2, r3, #1
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	699b      	ldr	r3, [r3, #24]
 8005e22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005e24:	693b      	ldr	r3, [r7, #16]
 8005e26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005e2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	011b      	lsls	r3, r3, #4
 8005e30:	693a      	ldr	r2, [r7, #16]
 8005e32:	4313      	orrs	r3, r2
 8005e34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	f023 030a 	bic.w	r3, r3, #10
 8005e3c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005e3e:	697a      	ldr	r2, [r7, #20]
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	4313      	orrs	r3, r2
 8005e44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	693a      	ldr	r2, [r7, #16]
 8005e4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	697a      	ldr	r2, [r7, #20]
 8005e50:	621a      	str	r2, [r3, #32]
}
 8005e52:	bf00      	nop
 8005e54:	371c      	adds	r7, #28
 8005e56:	46bd      	mov	sp, r7
 8005e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5c:	4770      	bx	lr

08005e5e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e5e:	b480      	push	{r7}
 8005e60:	b087      	sub	sp, #28
 8005e62:	af00      	add	r7, sp, #0
 8005e64:	60f8      	str	r0, [r7, #12]
 8005e66:	60b9      	str	r1, [r7, #8]
 8005e68:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	6a1b      	ldr	r3, [r3, #32]
 8005e6e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	6a1b      	ldr	r3, [r3, #32]
 8005e74:	f023 0210 	bic.w	r2, r3, #16
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	699b      	ldr	r3, [r3, #24]
 8005e80:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005e88:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	031b      	lsls	r3, r3, #12
 8005e8e:	693a      	ldr	r2, [r7, #16]
 8005e90:	4313      	orrs	r3, r2
 8005e92:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e94:	697b      	ldr	r3, [r7, #20]
 8005e96:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005e9a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	011b      	lsls	r3, r3, #4
 8005ea0:	697a      	ldr	r2, [r7, #20]
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	693a      	ldr	r2, [r7, #16]
 8005eaa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	697a      	ldr	r2, [r7, #20]
 8005eb0:	621a      	str	r2, [r3, #32]
}
 8005eb2:	bf00      	nop
 8005eb4:	371c      	adds	r7, #28
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebc:	4770      	bx	lr

08005ebe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005ebe:	b480      	push	{r7}
 8005ec0:	b085      	sub	sp, #20
 8005ec2:	af00      	add	r7, sp, #0
 8005ec4:	6078      	str	r0, [r7, #4]
 8005ec6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	689b      	ldr	r3, [r3, #8]
 8005ecc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ed4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005ed6:	683a      	ldr	r2, [r7, #0]
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	4313      	orrs	r3, r2
 8005edc:	f043 0307 	orr.w	r3, r3, #7
 8005ee0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	68fa      	ldr	r2, [r7, #12]
 8005ee6:	609a      	str	r2, [r3, #8]
}
 8005ee8:	bf00      	nop
 8005eea:	3714      	adds	r7, #20
 8005eec:	46bd      	mov	sp, r7
 8005eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef2:	4770      	bx	lr

08005ef4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b087      	sub	sp, #28
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	60f8      	str	r0, [r7, #12]
 8005efc:	60b9      	str	r1, [r7, #8]
 8005efe:	607a      	str	r2, [r7, #4]
 8005f00:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	689b      	ldr	r3, [r3, #8]
 8005f06:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005f0e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	021a      	lsls	r2, r3, #8
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	431a      	orrs	r2, r3
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	697a      	ldr	r2, [r7, #20]
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	697a      	ldr	r2, [r7, #20]
 8005f26:	609a      	str	r2, [r3, #8]
}
 8005f28:	bf00      	nop
 8005f2a:	371c      	adds	r7, #28
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f32:	4770      	bx	lr

08005f34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005f34:	b480      	push	{r7}
 8005f36:	b085      	sub	sp, #20
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
 8005f3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f44:	2b01      	cmp	r3, #1
 8005f46:	d101      	bne.n	8005f4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005f48:	2302      	movs	r3, #2
 8005f4a:	e068      	b.n	800601e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2201      	movs	r2, #1
 8005f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2202      	movs	r2, #2
 8005f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	689b      	ldr	r3, [r3, #8]
 8005f6a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a2e      	ldr	r2, [pc, #184]	; (800602c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d004      	beq.n	8005f80 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4a2d      	ldr	r2, [pc, #180]	; (8006030 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d108      	bne.n	8005f92 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005f86:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	685b      	ldr	r3, [r3, #4]
 8005f8c:	68fa      	ldr	r2, [r7, #12]
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f98:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	68fa      	ldr	r2, [r7, #12]
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	68fa      	ldr	r2, [r7, #12]
 8005faa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4a1e      	ldr	r2, [pc, #120]	; (800602c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d01d      	beq.n	8005ff2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fbe:	d018      	beq.n	8005ff2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a1b      	ldr	r2, [pc, #108]	; (8006034 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d013      	beq.n	8005ff2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4a1a      	ldr	r2, [pc, #104]	; (8006038 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d00e      	beq.n	8005ff2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a18      	ldr	r2, [pc, #96]	; (800603c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d009      	beq.n	8005ff2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a13      	ldr	r2, [pc, #76]	; (8006030 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d004      	beq.n	8005ff2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a14      	ldr	r2, [pc, #80]	; (8006040 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d10c      	bne.n	800600c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ff8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	689b      	ldr	r3, [r3, #8]
 8005ffe:	68ba      	ldr	r2, [r7, #8]
 8006000:	4313      	orrs	r3, r2
 8006002:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	68ba      	ldr	r2, [r7, #8]
 800600a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2201      	movs	r2, #1
 8006010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2200      	movs	r2, #0
 8006018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800601c:	2300      	movs	r3, #0
}
 800601e:	4618      	mov	r0, r3
 8006020:	3714      	adds	r7, #20
 8006022:	46bd      	mov	sp, r7
 8006024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006028:	4770      	bx	lr
 800602a:	bf00      	nop
 800602c:	40012c00 	.word	0x40012c00
 8006030:	40013400 	.word	0x40013400
 8006034:	40000400 	.word	0x40000400
 8006038:	40000800 	.word	0x40000800
 800603c:	40000c00 	.word	0x40000c00
 8006040:	40014000 	.word	0x40014000

08006044 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006044:	b480      	push	{r7}
 8006046:	b083      	sub	sp, #12
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800604c:	bf00      	nop
 800604e:	370c      	adds	r7, #12
 8006050:	46bd      	mov	sp, r7
 8006052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006056:	4770      	bx	lr

08006058 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006058:	b480      	push	{r7}
 800605a:	b083      	sub	sp, #12
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006060:	bf00      	nop
 8006062:	370c      	adds	r7, #12
 8006064:	46bd      	mov	sp, r7
 8006066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606a:	4770      	bx	lr

0800606c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800606c:	b480      	push	{r7}
 800606e:	b083      	sub	sp, #12
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006074:	bf00      	nop
 8006076:	370c      	adds	r7, #12
 8006078:	46bd      	mov	sp, r7
 800607a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607e:	4770      	bx	lr

08006080 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b082      	sub	sp, #8
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d101      	bne.n	8006092 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800608e:	2301      	movs	r3, #1
 8006090:	e042      	b.n	8006118 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006098:	2b00      	cmp	r3, #0
 800609a:	d106      	bne.n	80060aa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2200      	movs	r2, #0
 80060a0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80060a4:	6878      	ldr	r0, [r7, #4]
 80060a6:	f000 f83b 	bl	8006120 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2224      	movs	r2, #36	; 0x24
 80060ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	681a      	ldr	r2, [r3, #0]
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f022 0201 	bic.w	r2, r2, #1
 80060c0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d002      	beq.n	80060d0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f000 fbbe 	bl	800684c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80060d0:	6878      	ldr	r0, [r7, #4]
 80060d2:	f000 f8bf 	bl	8006254 <UART_SetConfig>
 80060d6:	4603      	mov	r3, r0
 80060d8:	2b01      	cmp	r3, #1
 80060da:	d101      	bne.n	80060e0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80060dc:	2301      	movs	r3, #1
 80060de:	e01b      	b.n	8006118 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	685a      	ldr	r2, [r3, #4]
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80060ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	689a      	ldr	r2, [r3, #8]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80060fe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	681a      	ldr	r2, [r3, #0]
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f042 0201 	orr.w	r2, r2, #1
 800610e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	f000 fc3d 	bl	8006990 <UART_CheckIdleState>
 8006116:	4603      	mov	r3, r0
}
 8006118:	4618      	mov	r0, r3
 800611a:	3708      	adds	r7, #8
 800611c:	46bd      	mov	sp, r7
 800611e:	bd80      	pop	{r7, pc}

08006120 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8006120:	b480      	push	{r7}
 8006122:	b083      	sub	sp, #12
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8006128:	bf00      	nop
 800612a:	370c      	adds	r7, #12
 800612c:	46bd      	mov	sp, r7
 800612e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006132:	4770      	bx	lr

08006134 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b08a      	sub	sp, #40	; 0x28
 8006138:	af02      	add	r7, sp, #8
 800613a:	60f8      	str	r0, [r7, #12]
 800613c:	60b9      	str	r1, [r7, #8]
 800613e:	603b      	str	r3, [r7, #0]
 8006140:	4613      	mov	r3, r2
 8006142:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800614a:	2b20      	cmp	r3, #32
 800614c:	d17c      	bne.n	8006248 <HAL_UART_Transmit+0x114>
  {
    if ((pData == NULL) || (Size == 0U))
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d002      	beq.n	800615a <HAL_UART_Transmit+0x26>
 8006154:	88fb      	ldrh	r3, [r7, #6]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d101      	bne.n	800615e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800615a:	2301      	movs	r3, #1
 800615c:	e075      	b.n	800624a <HAL_UART_Transmit+0x116>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	2200      	movs	r2, #0
 8006162:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	2221      	movs	r2, #33	; 0x21
 800616a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800616e:	f7fc f8e3 	bl	8002338 <HAL_GetTick>
 8006172:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	88fa      	ldrh	r2, [r7, #6]
 8006178:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	88fa      	ldrh	r2, [r7, #6]
 8006180:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	689b      	ldr	r3, [r3, #8]
 8006188:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800618c:	d108      	bne.n	80061a0 <HAL_UART_Transmit+0x6c>
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	691b      	ldr	r3, [r3, #16]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d104      	bne.n	80061a0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006196:	2300      	movs	r3, #0
 8006198:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	61bb      	str	r3, [r7, #24]
 800619e:	e003      	b.n	80061a8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80061a4:	2300      	movs	r3, #0
 80061a6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80061a8:	e031      	b.n	800620e <HAL_UART_Transmit+0xda>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	9300      	str	r3, [sp, #0]
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	2200      	movs	r2, #0
 80061b2:	2180      	movs	r1, #128	; 0x80
 80061b4:	68f8      	ldr	r0, [r7, #12]
 80061b6:	f000 fc95 	bl	8006ae4 <UART_WaitOnFlagUntilTimeout>
 80061ba:	4603      	mov	r3, r0
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d005      	beq.n	80061cc <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	2220      	movs	r2, #32
 80061c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80061c8:	2303      	movs	r3, #3
 80061ca:	e03e      	b.n	800624a <HAL_UART_Transmit+0x116>
      }
      if (pdata8bits == NULL)
 80061cc:	69fb      	ldr	r3, [r7, #28]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d10b      	bne.n	80061ea <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80061d2:	69bb      	ldr	r3, [r7, #24]
 80061d4:	881a      	ldrh	r2, [r3, #0]
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80061de:	b292      	uxth	r2, r2
 80061e0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80061e2:	69bb      	ldr	r3, [r7, #24]
 80061e4:	3302      	adds	r3, #2
 80061e6:	61bb      	str	r3, [r7, #24]
 80061e8:	e008      	b.n	80061fc <HAL_UART_Transmit+0xc8>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80061ea:	69fb      	ldr	r3, [r7, #28]
 80061ec:	781a      	ldrb	r2, [r3, #0]
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	b292      	uxth	r2, r2
 80061f4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80061f6:	69fb      	ldr	r3, [r7, #28]
 80061f8:	3301      	adds	r3, #1
 80061fa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006202:	b29b      	uxth	r3, r3
 8006204:	3b01      	subs	r3, #1
 8006206:	b29a      	uxth	r2, r3
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006214:	b29b      	uxth	r3, r3
 8006216:	2b00      	cmp	r3, #0
 8006218:	d1c7      	bne.n	80061aa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	9300      	str	r3, [sp, #0]
 800621e:	697b      	ldr	r3, [r7, #20]
 8006220:	2200      	movs	r2, #0
 8006222:	2140      	movs	r1, #64	; 0x40
 8006224:	68f8      	ldr	r0, [r7, #12]
 8006226:	f000 fc5d 	bl	8006ae4 <UART_WaitOnFlagUntilTimeout>
 800622a:	4603      	mov	r3, r0
 800622c:	2b00      	cmp	r3, #0
 800622e:	d005      	beq.n	800623c <HAL_UART_Transmit+0x108>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	2220      	movs	r2, #32
 8006234:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8006238:	2303      	movs	r3, #3
 800623a:	e006      	b.n	800624a <HAL_UART_Transmit+0x116>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	2220      	movs	r2, #32
 8006240:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8006244:	2300      	movs	r3, #0
 8006246:	e000      	b.n	800624a <HAL_UART_Transmit+0x116>
  }
  else
  {
    return HAL_BUSY;
 8006248:	2302      	movs	r3, #2
  }
}
 800624a:	4618      	mov	r0, r3
 800624c:	3720      	adds	r7, #32
 800624e:	46bd      	mov	sp, r7
 8006250:	bd80      	pop	{r7, pc}
	...

08006254 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006254:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006258:	b08c      	sub	sp, #48	; 0x30
 800625a:	af00      	add	r7, sp, #0
 800625c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800625e:	2300      	movs	r3, #0
 8006260:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006264:	697b      	ldr	r3, [r7, #20]
 8006266:	689a      	ldr	r2, [r3, #8]
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	691b      	ldr	r3, [r3, #16]
 800626c:	431a      	orrs	r2, r3
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	695b      	ldr	r3, [r3, #20]
 8006272:	431a      	orrs	r2, r3
 8006274:	697b      	ldr	r3, [r7, #20]
 8006276:	69db      	ldr	r3, [r3, #28]
 8006278:	4313      	orrs	r3, r2
 800627a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800627c:	697b      	ldr	r3, [r7, #20]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	681a      	ldr	r2, [r3, #0]
 8006282:	4baa      	ldr	r3, [pc, #680]	; (800652c <UART_SetConfig+0x2d8>)
 8006284:	4013      	ands	r3, r2
 8006286:	697a      	ldr	r2, [r7, #20]
 8006288:	6812      	ldr	r2, [r2, #0]
 800628a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800628c:	430b      	orrs	r3, r1
 800628e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	68da      	ldr	r2, [r3, #12]
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	430a      	orrs	r2, r1
 80062a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	699b      	ldr	r3, [r3, #24]
 80062aa:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80062ac:	697b      	ldr	r3, [r7, #20]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a9f      	ldr	r2, [pc, #636]	; (8006530 <UART_SetConfig+0x2dc>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d004      	beq.n	80062c0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80062b6:	697b      	ldr	r3, [r7, #20]
 80062b8:	6a1b      	ldr	r3, [r3, #32]
 80062ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80062bc:	4313      	orrs	r3, r2
 80062be:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80062c0:	697b      	ldr	r3, [r7, #20]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	689b      	ldr	r3, [r3, #8]
 80062c6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80062ca:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80062ce:	697a      	ldr	r2, [r7, #20]
 80062d0:	6812      	ldr	r2, [r2, #0]
 80062d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80062d4:	430b      	orrs	r3, r1
 80062d6:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80062d8:	697b      	ldr	r3, [r7, #20]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062de:	f023 010f 	bic.w	r1, r3, #15
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80062e6:	697b      	ldr	r3, [r7, #20]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	430a      	orrs	r2, r1
 80062ec:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4a90      	ldr	r2, [pc, #576]	; (8006534 <UART_SetConfig+0x2e0>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d125      	bne.n	8006344 <UART_SetConfig+0xf0>
 80062f8:	4b8f      	ldr	r3, [pc, #572]	; (8006538 <UART_SetConfig+0x2e4>)
 80062fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062fe:	f003 0303 	and.w	r3, r3, #3
 8006302:	2b03      	cmp	r3, #3
 8006304:	d81a      	bhi.n	800633c <UART_SetConfig+0xe8>
 8006306:	a201      	add	r2, pc, #4	; (adr r2, 800630c <UART_SetConfig+0xb8>)
 8006308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800630c:	0800631d 	.word	0x0800631d
 8006310:	0800632d 	.word	0x0800632d
 8006314:	08006325 	.word	0x08006325
 8006318:	08006335 	.word	0x08006335
 800631c:	2301      	movs	r3, #1
 800631e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006322:	e116      	b.n	8006552 <UART_SetConfig+0x2fe>
 8006324:	2302      	movs	r3, #2
 8006326:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800632a:	e112      	b.n	8006552 <UART_SetConfig+0x2fe>
 800632c:	2304      	movs	r3, #4
 800632e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006332:	e10e      	b.n	8006552 <UART_SetConfig+0x2fe>
 8006334:	2308      	movs	r3, #8
 8006336:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800633a:	e10a      	b.n	8006552 <UART_SetConfig+0x2fe>
 800633c:	2310      	movs	r3, #16
 800633e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006342:	e106      	b.n	8006552 <UART_SetConfig+0x2fe>
 8006344:	697b      	ldr	r3, [r7, #20]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a7c      	ldr	r2, [pc, #496]	; (800653c <UART_SetConfig+0x2e8>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d138      	bne.n	80063c0 <UART_SetConfig+0x16c>
 800634e:	4b7a      	ldr	r3, [pc, #488]	; (8006538 <UART_SetConfig+0x2e4>)
 8006350:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006354:	f003 030c 	and.w	r3, r3, #12
 8006358:	2b0c      	cmp	r3, #12
 800635a:	d82d      	bhi.n	80063b8 <UART_SetConfig+0x164>
 800635c:	a201      	add	r2, pc, #4	; (adr r2, 8006364 <UART_SetConfig+0x110>)
 800635e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006362:	bf00      	nop
 8006364:	08006399 	.word	0x08006399
 8006368:	080063b9 	.word	0x080063b9
 800636c:	080063b9 	.word	0x080063b9
 8006370:	080063b9 	.word	0x080063b9
 8006374:	080063a9 	.word	0x080063a9
 8006378:	080063b9 	.word	0x080063b9
 800637c:	080063b9 	.word	0x080063b9
 8006380:	080063b9 	.word	0x080063b9
 8006384:	080063a1 	.word	0x080063a1
 8006388:	080063b9 	.word	0x080063b9
 800638c:	080063b9 	.word	0x080063b9
 8006390:	080063b9 	.word	0x080063b9
 8006394:	080063b1 	.word	0x080063b1
 8006398:	2300      	movs	r3, #0
 800639a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800639e:	e0d8      	b.n	8006552 <UART_SetConfig+0x2fe>
 80063a0:	2302      	movs	r3, #2
 80063a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063a6:	e0d4      	b.n	8006552 <UART_SetConfig+0x2fe>
 80063a8:	2304      	movs	r3, #4
 80063aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063ae:	e0d0      	b.n	8006552 <UART_SetConfig+0x2fe>
 80063b0:	2308      	movs	r3, #8
 80063b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063b6:	e0cc      	b.n	8006552 <UART_SetConfig+0x2fe>
 80063b8:	2310      	movs	r3, #16
 80063ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063be:	e0c8      	b.n	8006552 <UART_SetConfig+0x2fe>
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4a5e      	ldr	r2, [pc, #376]	; (8006540 <UART_SetConfig+0x2ec>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d125      	bne.n	8006416 <UART_SetConfig+0x1c2>
 80063ca:	4b5b      	ldr	r3, [pc, #364]	; (8006538 <UART_SetConfig+0x2e4>)
 80063cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063d0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80063d4:	2b30      	cmp	r3, #48	; 0x30
 80063d6:	d016      	beq.n	8006406 <UART_SetConfig+0x1b2>
 80063d8:	2b30      	cmp	r3, #48	; 0x30
 80063da:	d818      	bhi.n	800640e <UART_SetConfig+0x1ba>
 80063dc:	2b20      	cmp	r3, #32
 80063de:	d00a      	beq.n	80063f6 <UART_SetConfig+0x1a2>
 80063e0:	2b20      	cmp	r3, #32
 80063e2:	d814      	bhi.n	800640e <UART_SetConfig+0x1ba>
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d002      	beq.n	80063ee <UART_SetConfig+0x19a>
 80063e8:	2b10      	cmp	r3, #16
 80063ea:	d008      	beq.n	80063fe <UART_SetConfig+0x1aa>
 80063ec:	e00f      	b.n	800640e <UART_SetConfig+0x1ba>
 80063ee:	2300      	movs	r3, #0
 80063f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063f4:	e0ad      	b.n	8006552 <UART_SetConfig+0x2fe>
 80063f6:	2302      	movs	r3, #2
 80063f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063fc:	e0a9      	b.n	8006552 <UART_SetConfig+0x2fe>
 80063fe:	2304      	movs	r3, #4
 8006400:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006404:	e0a5      	b.n	8006552 <UART_SetConfig+0x2fe>
 8006406:	2308      	movs	r3, #8
 8006408:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800640c:	e0a1      	b.n	8006552 <UART_SetConfig+0x2fe>
 800640e:	2310      	movs	r3, #16
 8006410:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006414:	e09d      	b.n	8006552 <UART_SetConfig+0x2fe>
 8006416:	697b      	ldr	r3, [r7, #20]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a4a      	ldr	r2, [pc, #296]	; (8006544 <UART_SetConfig+0x2f0>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d125      	bne.n	800646c <UART_SetConfig+0x218>
 8006420:	4b45      	ldr	r3, [pc, #276]	; (8006538 <UART_SetConfig+0x2e4>)
 8006422:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006426:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800642a:	2bc0      	cmp	r3, #192	; 0xc0
 800642c:	d016      	beq.n	800645c <UART_SetConfig+0x208>
 800642e:	2bc0      	cmp	r3, #192	; 0xc0
 8006430:	d818      	bhi.n	8006464 <UART_SetConfig+0x210>
 8006432:	2b80      	cmp	r3, #128	; 0x80
 8006434:	d00a      	beq.n	800644c <UART_SetConfig+0x1f8>
 8006436:	2b80      	cmp	r3, #128	; 0x80
 8006438:	d814      	bhi.n	8006464 <UART_SetConfig+0x210>
 800643a:	2b00      	cmp	r3, #0
 800643c:	d002      	beq.n	8006444 <UART_SetConfig+0x1f0>
 800643e:	2b40      	cmp	r3, #64	; 0x40
 8006440:	d008      	beq.n	8006454 <UART_SetConfig+0x200>
 8006442:	e00f      	b.n	8006464 <UART_SetConfig+0x210>
 8006444:	2300      	movs	r3, #0
 8006446:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800644a:	e082      	b.n	8006552 <UART_SetConfig+0x2fe>
 800644c:	2302      	movs	r3, #2
 800644e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006452:	e07e      	b.n	8006552 <UART_SetConfig+0x2fe>
 8006454:	2304      	movs	r3, #4
 8006456:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800645a:	e07a      	b.n	8006552 <UART_SetConfig+0x2fe>
 800645c:	2308      	movs	r3, #8
 800645e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006462:	e076      	b.n	8006552 <UART_SetConfig+0x2fe>
 8006464:	2310      	movs	r3, #16
 8006466:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800646a:	e072      	b.n	8006552 <UART_SetConfig+0x2fe>
 800646c:	697b      	ldr	r3, [r7, #20]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4a35      	ldr	r2, [pc, #212]	; (8006548 <UART_SetConfig+0x2f4>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d12a      	bne.n	80064cc <UART_SetConfig+0x278>
 8006476:	4b30      	ldr	r3, [pc, #192]	; (8006538 <UART_SetConfig+0x2e4>)
 8006478:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800647c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006480:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006484:	d01a      	beq.n	80064bc <UART_SetConfig+0x268>
 8006486:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800648a:	d81b      	bhi.n	80064c4 <UART_SetConfig+0x270>
 800648c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006490:	d00c      	beq.n	80064ac <UART_SetConfig+0x258>
 8006492:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006496:	d815      	bhi.n	80064c4 <UART_SetConfig+0x270>
 8006498:	2b00      	cmp	r3, #0
 800649a:	d003      	beq.n	80064a4 <UART_SetConfig+0x250>
 800649c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064a0:	d008      	beq.n	80064b4 <UART_SetConfig+0x260>
 80064a2:	e00f      	b.n	80064c4 <UART_SetConfig+0x270>
 80064a4:	2300      	movs	r3, #0
 80064a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80064aa:	e052      	b.n	8006552 <UART_SetConfig+0x2fe>
 80064ac:	2302      	movs	r3, #2
 80064ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80064b2:	e04e      	b.n	8006552 <UART_SetConfig+0x2fe>
 80064b4:	2304      	movs	r3, #4
 80064b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80064ba:	e04a      	b.n	8006552 <UART_SetConfig+0x2fe>
 80064bc:	2308      	movs	r3, #8
 80064be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80064c2:	e046      	b.n	8006552 <UART_SetConfig+0x2fe>
 80064c4:	2310      	movs	r3, #16
 80064c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80064ca:	e042      	b.n	8006552 <UART_SetConfig+0x2fe>
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4a17      	ldr	r2, [pc, #92]	; (8006530 <UART_SetConfig+0x2dc>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d13a      	bne.n	800654c <UART_SetConfig+0x2f8>
 80064d6:	4b18      	ldr	r3, [pc, #96]	; (8006538 <UART_SetConfig+0x2e4>)
 80064d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064dc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80064e0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80064e4:	d01a      	beq.n	800651c <UART_SetConfig+0x2c8>
 80064e6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80064ea:	d81b      	bhi.n	8006524 <UART_SetConfig+0x2d0>
 80064ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064f0:	d00c      	beq.n	800650c <UART_SetConfig+0x2b8>
 80064f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064f6:	d815      	bhi.n	8006524 <UART_SetConfig+0x2d0>
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d003      	beq.n	8006504 <UART_SetConfig+0x2b0>
 80064fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006500:	d008      	beq.n	8006514 <UART_SetConfig+0x2c0>
 8006502:	e00f      	b.n	8006524 <UART_SetConfig+0x2d0>
 8006504:	2300      	movs	r3, #0
 8006506:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800650a:	e022      	b.n	8006552 <UART_SetConfig+0x2fe>
 800650c:	2302      	movs	r3, #2
 800650e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006512:	e01e      	b.n	8006552 <UART_SetConfig+0x2fe>
 8006514:	2304      	movs	r3, #4
 8006516:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800651a:	e01a      	b.n	8006552 <UART_SetConfig+0x2fe>
 800651c:	2308      	movs	r3, #8
 800651e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006522:	e016      	b.n	8006552 <UART_SetConfig+0x2fe>
 8006524:	2310      	movs	r3, #16
 8006526:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800652a:	e012      	b.n	8006552 <UART_SetConfig+0x2fe>
 800652c:	cfff69f3 	.word	0xcfff69f3
 8006530:	40008000 	.word	0x40008000
 8006534:	40013800 	.word	0x40013800
 8006538:	40021000 	.word	0x40021000
 800653c:	40004400 	.word	0x40004400
 8006540:	40004800 	.word	0x40004800
 8006544:	40004c00 	.word	0x40004c00
 8006548:	40005000 	.word	0x40005000
 800654c:	2310      	movs	r3, #16
 800654e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4aae      	ldr	r2, [pc, #696]	; (8006810 <UART_SetConfig+0x5bc>)
 8006558:	4293      	cmp	r3, r2
 800655a:	f040 8097 	bne.w	800668c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800655e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006562:	2b08      	cmp	r3, #8
 8006564:	d823      	bhi.n	80065ae <UART_SetConfig+0x35a>
 8006566:	a201      	add	r2, pc, #4	; (adr r2, 800656c <UART_SetConfig+0x318>)
 8006568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800656c:	08006591 	.word	0x08006591
 8006570:	080065af 	.word	0x080065af
 8006574:	08006599 	.word	0x08006599
 8006578:	080065af 	.word	0x080065af
 800657c:	0800659f 	.word	0x0800659f
 8006580:	080065af 	.word	0x080065af
 8006584:	080065af 	.word	0x080065af
 8006588:	080065af 	.word	0x080065af
 800658c:	080065a7 	.word	0x080065a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006590:	f7fe f9c0 	bl	8004914 <HAL_RCC_GetPCLK1Freq>
 8006594:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006596:	e010      	b.n	80065ba <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006598:	4b9e      	ldr	r3, [pc, #632]	; (8006814 <UART_SetConfig+0x5c0>)
 800659a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800659c:	e00d      	b.n	80065ba <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800659e:	f7fe f921 	bl	80047e4 <HAL_RCC_GetSysClockFreq>
 80065a2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80065a4:	e009      	b.n	80065ba <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065aa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80065ac:	e005      	b.n	80065ba <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80065ae:	2300      	movs	r3, #0
 80065b0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80065b2:	2301      	movs	r3, #1
 80065b4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80065b8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80065ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065bc:	2b00      	cmp	r3, #0
 80065be:	f000 8130 	beq.w	8006822 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80065c2:	697b      	ldr	r3, [r7, #20]
 80065c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065c6:	4a94      	ldr	r2, [pc, #592]	; (8006818 <UART_SetConfig+0x5c4>)
 80065c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80065cc:	461a      	mov	r2, r3
 80065ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80065d4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	685a      	ldr	r2, [r3, #4]
 80065da:	4613      	mov	r3, r2
 80065dc:	005b      	lsls	r3, r3, #1
 80065de:	4413      	add	r3, r2
 80065e0:	69ba      	ldr	r2, [r7, #24]
 80065e2:	429a      	cmp	r2, r3
 80065e4:	d305      	bcc.n	80065f2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80065e6:	697b      	ldr	r3, [r7, #20]
 80065e8:	685b      	ldr	r3, [r3, #4]
 80065ea:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80065ec:	69ba      	ldr	r2, [r7, #24]
 80065ee:	429a      	cmp	r2, r3
 80065f0:	d903      	bls.n	80065fa <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80065f2:	2301      	movs	r3, #1
 80065f4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80065f8:	e113      	b.n	8006822 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80065fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065fc:	2200      	movs	r2, #0
 80065fe:	60bb      	str	r3, [r7, #8]
 8006600:	60fa      	str	r2, [r7, #12]
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006606:	4a84      	ldr	r2, [pc, #528]	; (8006818 <UART_SetConfig+0x5c4>)
 8006608:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800660c:	b29b      	uxth	r3, r3
 800660e:	2200      	movs	r2, #0
 8006610:	603b      	str	r3, [r7, #0]
 8006612:	607a      	str	r2, [r7, #4]
 8006614:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006618:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800661c:	f7fa fb2c 	bl	8000c78 <__aeabi_uldivmod>
 8006620:	4602      	mov	r2, r0
 8006622:	460b      	mov	r3, r1
 8006624:	4610      	mov	r0, r2
 8006626:	4619      	mov	r1, r3
 8006628:	f04f 0200 	mov.w	r2, #0
 800662c:	f04f 0300 	mov.w	r3, #0
 8006630:	020b      	lsls	r3, r1, #8
 8006632:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006636:	0202      	lsls	r2, r0, #8
 8006638:	6979      	ldr	r1, [r7, #20]
 800663a:	6849      	ldr	r1, [r1, #4]
 800663c:	0849      	lsrs	r1, r1, #1
 800663e:	2000      	movs	r0, #0
 8006640:	460c      	mov	r4, r1
 8006642:	4605      	mov	r5, r0
 8006644:	eb12 0804 	adds.w	r8, r2, r4
 8006648:	eb43 0905 	adc.w	r9, r3, r5
 800664c:	697b      	ldr	r3, [r7, #20]
 800664e:	685b      	ldr	r3, [r3, #4]
 8006650:	2200      	movs	r2, #0
 8006652:	469a      	mov	sl, r3
 8006654:	4693      	mov	fp, r2
 8006656:	4652      	mov	r2, sl
 8006658:	465b      	mov	r3, fp
 800665a:	4640      	mov	r0, r8
 800665c:	4649      	mov	r1, r9
 800665e:	f7fa fb0b 	bl	8000c78 <__aeabi_uldivmod>
 8006662:	4602      	mov	r2, r0
 8006664:	460b      	mov	r3, r1
 8006666:	4613      	mov	r3, r2
 8006668:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800666a:	6a3b      	ldr	r3, [r7, #32]
 800666c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006670:	d308      	bcc.n	8006684 <UART_SetConfig+0x430>
 8006672:	6a3b      	ldr	r3, [r7, #32]
 8006674:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006678:	d204      	bcs.n	8006684 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	6a3a      	ldr	r2, [r7, #32]
 8006680:	60da      	str	r2, [r3, #12]
 8006682:	e0ce      	b.n	8006822 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006684:	2301      	movs	r3, #1
 8006686:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800668a:	e0ca      	b.n	8006822 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800668c:	697b      	ldr	r3, [r7, #20]
 800668e:	69db      	ldr	r3, [r3, #28]
 8006690:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006694:	d166      	bne.n	8006764 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006696:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800669a:	2b08      	cmp	r3, #8
 800669c:	d827      	bhi.n	80066ee <UART_SetConfig+0x49a>
 800669e:	a201      	add	r2, pc, #4	; (adr r2, 80066a4 <UART_SetConfig+0x450>)
 80066a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066a4:	080066c9 	.word	0x080066c9
 80066a8:	080066d1 	.word	0x080066d1
 80066ac:	080066d9 	.word	0x080066d9
 80066b0:	080066ef 	.word	0x080066ef
 80066b4:	080066df 	.word	0x080066df
 80066b8:	080066ef 	.word	0x080066ef
 80066bc:	080066ef 	.word	0x080066ef
 80066c0:	080066ef 	.word	0x080066ef
 80066c4:	080066e7 	.word	0x080066e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80066c8:	f7fe f924 	bl	8004914 <HAL_RCC_GetPCLK1Freq>
 80066cc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80066ce:	e014      	b.n	80066fa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80066d0:	f7fe f936 	bl	8004940 <HAL_RCC_GetPCLK2Freq>
 80066d4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80066d6:	e010      	b.n	80066fa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80066d8:	4b4e      	ldr	r3, [pc, #312]	; (8006814 <UART_SetConfig+0x5c0>)
 80066da:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80066dc:	e00d      	b.n	80066fa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80066de:	f7fe f881 	bl	80047e4 <HAL_RCC_GetSysClockFreq>
 80066e2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80066e4:	e009      	b.n	80066fa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80066e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80066ea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80066ec:	e005      	b.n	80066fa <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80066ee:	2300      	movs	r3, #0
 80066f0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80066f2:	2301      	movs	r3, #1
 80066f4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80066f8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80066fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	f000 8090 	beq.w	8006822 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006706:	4a44      	ldr	r2, [pc, #272]	; (8006818 <UART_SetConfig+0x5c4>)
 8006708:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800670c:	461a      	mov	r2, r3
 800670e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006710:	fbb3 f3f2 	udiv	r3, r3, r2
 8006714:	005a      	lsls	r2, r3, #1
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	685b      	ldr	r3, [r3, #4]
 800671a:	085b      	lsrs	r3, r3, #1
 800671c:	441a      	add	r2, r3
 800671e:	697b      	ldr	r3, [r7, #20]
 8006720:	685b      	ldr	r3, [r3, #4]
 8006722:	fbb2 f3f3 	udiv	r3, r2, r3
 8006726:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006728:	6a3b      	ldr	r3, [r7, #32]
 800672a:	2b0f      	cmp	r3, #15
 800672c:	d916      	bls.n	800675c <UART_SetConfig+0x508>
 800672e:	6a3b      	ldr	r3, [r7, #32]
 8006730:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006734:	d212      	bcs.n	800675c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006736:	6a3b      	ldr	r3, [r7, #32]
 8006738:	b29b      	uxth	r3, r3
 800673a:	f023 030f 	bic.w	r3, r3, #15
 800673e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006740:	6a3b      	ldr	r3, [r7, #32]
 8006742:	085b      	lsrs	r3, r3, #1
 8006744:	b29b      	uxth	r3, r3
 8006746:	f003 0307 	and.w	r3, r3, #7
 800674a:	b29a      	uxth	r2, r3
 800674c:	8bfb      	ldrh	r3, [r7, #30]
 800674e:	4313      	orrs	r3, r2
 8006750:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006752:	697b      	ldr	r3, [r7, #20]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	8bfa      	ldrh	r2, [r7, #30]
 8006758:	60da      	str	r2, [r3, #12]
 800675a:	e062      	b.n	8006822 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800675c:	2301      	movs	r3, #1
 800675e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006762:	e05e      	b.n	8006822 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006764:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006768:	2b08      	cmp	r3, #8
 800676a:	d828      	bhi.n	80067be <UART_SetConfig+0x56a>
 800676c:	a201      	add	r2, pc, #4	; (adr r2, 8006774 <UART_SetConfig+0x520>)
 800676e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006772:	bf00      	nop
 8006774:	08006799 	.word	0x08006799
 8006778:	080067a1 	.word	0x080067a1
 800677c:	080067a9 	.word	0x080067a9
 8006780:	080067bf 	.word	0x080067bf
 8006784:	080067af 	.word	0x080067af
 8006788:	080067bf 	.word	0x080067bf
 800678c:	080067bf 	.word	0x080067bf
 8006790:	080067bf 	.word	0x080067bf
 8006794:	080067b7 	.word	0x080067b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006798:	f7fe f8bc 	bl	8004914 <HAL_RCC_GetPCLK1Freq>
 800679c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800679e:	e014      	b.n	80067ca <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80067a0:	f7fe f8ce 	bl	8004940 <HAL_RCC_GetPCLK2Freq>
 80067a4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80067a6:	e010      	b.n	80067ca <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80067a8:	4b1a      	ldr	r3, [pc, #104]	; (8006814 <UART_SetConfig+0x5c0>)
 80067aa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80067ac:	e00d      	b.n	80067ca <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80067ae:	f7fe f819 	bl	80047e4 <HAL_RCC_GetSysClockFreq>
 80067b2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80067b4:	e009      	b.n	80067ca <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80067b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80067ba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80067bc:	e005      	b.n	80067ca <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80067be:	2300      	movs	r3, #0
 80067c0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80067c2:	2301      	movs	r3, #1
 80067c4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80067c8:	bf00      	nop
    }

    if (pclk != 0U)
 80067ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d028      	beq.n	8006822 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80067d0:	697b      	ldr	r3, [r7, #20]
 80067d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067d4:	4a10      	ldr	r2, [pc, #64]	; (8006818 <UART_SetConfig+0x5c4>)
 80067d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80067da:	461a      	mov	r2, r3
 80067dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067de:	fbb3 f2f2 	udiv	r2, r3, r2
 80067e2:	697b      	ldr	r3, [r7, #20]
 80067e4:	685b      	ldr	r3, [r3, #4]
 80067e6:	085b      	lsrs	r3, r3, #1
 80067e8:	441a      	add	r2, r3
 80067ea:	697b      	ldr	r3, [r7, #20]
 80067ec:	685b      	ldr	r3, [r3, #4]
 80067ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80067f2:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80067f4:	6a3b      	ldr	r3, [r7, #32]
 80067f6:	2b0f      	cmp	r3, #15
 80067f8:	d910      	bls.n	800681c <UART_SetConfig+0x5c8>
 80067fa:	6a3b      	ldr	r3, [r7, #32]
 80067fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006800:	d20c      	bcs.n	800681c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006802:	6a3b      	ldr	r3, [r7, #32]
 8006804:	b29a      	uxth	r2, r3
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	60da      	str	r2, [r3, #12]
 800680c:	e009      	b.n	8006822 <UART_SetConfig+0x5ce>
 800680e:	bf00      	nop
 8006810:	40008000 	.word	0x40008000
 8006814:	00f42400 	.word	0x00f42400
 8006818:	0800ab7c 	.word	0x0800ab7c
      }
      else
      {
        ret = HAL_ERROR;
 800681c:	2301      	movs	r3, #1
 800681e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	2201      	movs	r2, #1
 8006826:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800682a:	697b      	ldr	r3, [r7, #20]
 800682c:	2201      	movs	r2, #1
 800682e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006832:	697b      	ldr	r3, [r7, #20]
 8006834:	2200      	movs	r2, #0
 8006836:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8006838:	697b      	ldr	r3, [r7, #20]
 800683a:	2200      	movs	r2, #0
 800683c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800683e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8006842:	4618      	mov	r0, r3
 8006844:	3730      	adds	r7, #48	; 0x30
 8006846:	46bd      	mov	sp, r7
 8006848:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800684c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800684c:	b480      	push	{r7}
 800684e:	b083      	sub	sp, #12
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006858:	f003 0308 	and.w	r3, r3, #8
 800685c:	2b00      	cmp	r3, #0
 800685e:	d00a      	beq.n	8006876 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	685b      	ldr	r3, [r3, #4]
 8006866:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	430a      	orrs	r2, r1
 8006874:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800687a:	f003 0301 	and.w	r3, r3, #1
 800687e:	2b00      	cmp	r3, #0
 8006880:	d00a      	beq.n	8006898 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	685b      	ldr	r3, [r3, #4]
 8006888:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	430a      	orrs	r2, r1
 8006896:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800689c:	f003 0302 	and.w	r3, r3, #2
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d00a      	beq.n	80068ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	685b      	ldr	r3, [r3, #4]
 80068aa:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	430a      	orrs	r2, r1
 80068b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068be:	f003 0304 	and.w	r3, r3, #4
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d00a      	beq.n	80068dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	685b      	ldr	r3, [r3, #4]
 80068cc:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	430a      	orrs	r2, r1
 80068da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068e0:	f003 0310 	and.w	r3, r3, #16
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d00a      	beq.n	80068fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	689b      	ldr	r3, [r3, #8]
 80068ee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	430a      	orrs	r2, r1
 80068fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006902:	f003 0320 	and.w	r3, r3, #32
 8006906:	2b00      	cmp	r3, #0
 8006908:	d00a      	beq.n	8006920 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	689b      	ldr	r3, [r3, #8]
 8006910:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	430a      	orrs	r2, r1
 800691e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006924:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006928:	2b00      	cmp	r3, #0
 800692a:	d01a      	beq.n	8006962 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	685b      	ldr	r3, [r3, #4]
 8006932:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	430a      	orrs	r2, r1
 8006940:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006946:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800694a:	d10a      	bne.n	8006962 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	685b      	ldr	r3, [r3, #4]
 8006952:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	430a      	orrs	r2, r1
 8006960:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006966:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800696a:	2b00      	cmp	r3, #0
 800696c:	d00a      	beq.n	8006984 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	685b      	ldr	r3, [r3, #4]
 8006974:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	430a      	orrs	r2, r1
 8006982:	605a      	str	r2, [r3, #4]
  }
}
 8006984:	bf00      	nop
 8006986:	370c      	adds	r7, #12
 8006988:	46bd      	mov	sp, r7
 800698a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698e:	4770      	bx	lr

08006990 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b098      	sub	sp, #96	; 0x60
 8006994:	af02      	add	r7, sp, #8
 8006996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2200      	movs	r2, #0
 800699c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80069a0:	f7fb fcca 	bl	8002338 <HAL_GetTick>
 80069a4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f003 0308 	and.w	r3, r3, #8
 80069b0:	2b08      	cmp	r3, #8
 80069b2:	d12f      	bne.n	8006a14 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80069b4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80069b8:	9300      	str	r3, [sp, #0]
 80069ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80069bc:	2200      	movs	r2, #0
 80069be:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	f000 f88e 	bl	8006ae4 <UART_WaitOnFlagUntilTimeout>
 80069c8:	4603      	mov	r3, r0
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d022      	beq.n	8006a14 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069d6:	e853 3f00 	ldrex	r3, [r3]
 80069da:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80069dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80069e2:	653b      	str	r3, [r7, #80]	; 0x50
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	461a      	mov	r2, r3
 80069ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069ec:	647b      	str	r3, [r7, #68]	; 0x44
 80069ee:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069f0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80069f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80069f4:	e841 2300 	strex	r3, r2, [r1]
 80069f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80069fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d1e6      	bne.n	80069ce <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2220      	movs	r2, #32
 8006a04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a10:	2303      	movs	r3, #3
 8006a12:	e063      	b.n	8006adc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f003 0304 	and.w	r3, r3, #4
 8006a1e:	2b04      	cmp	r3, #4
 8006a20:	d149      	bne.n	8006ab6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a22:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006a26:	9300      	str	r3, [sp, #0]
 8006a28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	f000 f857 	bl	8006ae4 <UART_WaitOnFlagUntilTimeout>
 8006a36:	4603      	mov	r3, r0
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d03c      	beq.n	8006ab6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a44:	e853 3f00 	ldrex	r3, [r3]
 8006a48:	623b      	str	r3, [r7, #32]
   return(result);
 8006a4a:	6a3b      	ldr	r3, [r7, #32]
 8006a4c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a50:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	461a      	mov	r2, r3
 8006a58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a5a:	633b      	str	r3, [r7, #48]	; 0x30
 8006a5c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a5e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006a60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a62:	e841 2300 	strex	r3, r2, [r1]
 8006a66:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d1e6      	bne.n	8006a3c <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	3308      	adds	r3, #8
 8006a74:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a76:	693b      	ldr	r3, [r7, #16]
 8006a78:	e853 3f00 	ldrex	r3, [r3]
 8006a7c:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	f023 0301 	bic.w	r3, r3, #1
 8006a84:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	3308      	adds	r3, #8
 8006a8c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a8e:	61fa      	str	r2, [r7, #28]
 8006a90:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a92:	69b9      	ldr	r1, [r7, #24]
 8006a94:	69fa      	ldr	r2, [r7, #28]
 8006a96:	e841 2300 	strex	r3, r2, [r1]
 8006a9a:	617b      	str	r3, [r7, #20]
   return(result);
 8006a9c:	697b      	ldr	r3, [r7, #20]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d1e5      	bne.n	8006a6e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2220      	movs	r2, #32
 8006aa6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2200      	movs	r2, #0
 8006aae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ab2:	2303      	movs	r3, #3
 8006ab4:	e012      	b.n	8006adc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2220      	movs	r2, #32
 8006aba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2220      	movs	r2, #32
 8006ac2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2200      	movs	r2, #0
 8006aca:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2200      	movs	r2, #0
 8006ad0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006ada:	2300      	movs	r3, #0
}
 8006adc:	4618      	mov	r0, r3
 8006ade:	3758      	adds	r7, #88	; 0x58
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	bd80      	pop	{r7, pc}

08006ae4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b084      	sub	sp, #16
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	60f8      	str	r0, [r7, #12]
 8006aec:	60b9      	str	r1, [r7, #8]
 8006aee:	603b      	str	r3, [r7, #0]
 8006af0:	4613      	mov	r3, r2
 8006af2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006af4:	e049      	b.n	8006b8a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006af6:	69bb      	ldr	r3, [r7, #24]
 8006af8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006afc:	d045      	beq.n	8006b8a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006afe:	f7fb fc1b 	bl	8002338 <HAL_GetTick>
 8006b02:	4602      	mov	r2, r0
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	1ad3      	subs	r3, r2, r3
 8006b08:	69ba      	ldr	r2, [r7, #24]
 8006b0a:	429a      	cmp	r2, r3
 8006b0c:	d302      	bcc.n	8006b14 <UART_WaitOnFlagUntilTimeout+0x30>
 8006b0e:	69bb      	ldr	r3, [r7, #24]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d101      	bne.n	8006b18 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006b14:	2303      	movs	r3, #3
 8006b16:	e048      	b.n	8006baa <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f003 0304 	and.w	r3, r3, #4
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d031      	beq.n	8006b8a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	69db      	ldr	r3, [r3, #28]
 8006b2c:	f003 0308 	and.w	r3, r3, #8
 8006b30:	2b08      	cmp	r3, #8
 8006b32:	d110      	bne.n	8006b56 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	2208      	movs	r2, #8
 8006b3a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006b3c:	68f8      	ldr	r0, [r7, #12]
 8006b3e:	f000 f838 	bl	8006bb2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	2208      	movs	r2, #8
 8006b46:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8006b52:	2301      	movs	r3, #1
 8006b54:	e029      	b.n	8006baa <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	69db      	ldr	r3, [r3, #28]
 8006b5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b64:	d111      	bne.n	8006b8a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006b6e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006b70:	68f8      	ldr	r0, [r7, #12]
 8006b72:	f000 f81e 	bl	8006bb2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	2220      	movs	r2, #32
 8006b7a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	2200      	movs	r2, #0
 8006b82:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8006b86:	2303      	movs	r3, #3
 8006b88:	e00f      	b.n	8006baa <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	69da      	ldr	r2, [r3, #28]
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	4013      	ands	r3, r2
 8006b94:	68ba      	ldr	r2, [r7, #8]
 8006b96:	429a      	cmp	r2, r3
 8006b98:	bf0c      	ite	eq
 8006b9a:	2301      	moveq	r3, #1
 8006b9c:	2300      	movne	r3, #0
 8006b9e:	b2db      	uxtb	r3, r3
 8006ba0:	461a      	mov	r2, r3
 8006ba2:	79fb      	ldrb	r3, [r7, #7]
 8006ba4:	429a      	cmp	r2, r3
 8006ba6:	d0a6      	beq.n	8006af6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006ba8:	2300      	movs	r3, #0
}
 8006baa:	4618      	mov	r0, r3
 8006bac:	3710      	adds	r7, #16
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	bd80      	pop	{r7, pc}

08006bb2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006bb2:	b480      	push	{r7}
 8006bb4:	b095      	sub	sp, #84	; 0x54
 8006bb6:	af00      	add	r7, sp, #0
 8006bb8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bc2:	e853 3f00 	ldrex	r3, [r3]
 8006bc6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006bce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	461a      	mov	r2, r3
 8006bd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bd8:	643b      	str	r3, [r7, #64]	; 0x40
 8006bda:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bdc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006bde:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006be0:	e841 2300 	strex	r3, r2, [r1]
 8006be4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d1e6      	bne.n	8006bba <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	3308      	adds	r3, #8
 8006bf2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bf4:	6a3b      	ldr	r3, [r7, #32]
 8006bf6:	e853 3f00 	ldrex	r3, [r3]
 8006bfa:	61fb      	str	r3, [r7, #28]
   return(result);
 8006bfc:	69fb      	ldr	r3, [r7, #28]
 8006bfe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c02:	f023 0301 	bic.w	r3, r3, #1
 8006c06:	64bb      	str	r3, [r7, #72]	; 0x48
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	3308      	adds	r3, #8
 8006c0e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006c10:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006c12:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006c16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c18:	e841 2300 	strex	r3, r2, [r1]
 8006c1c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d1e3      	bne.n	8006bec <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c28:	2b01      	cmp	r3, #1
 8006c2a:	d118      	bne.n	8006c5e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	e853 3f00 	ldrex	r3, [r3]
 8006c38:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	f023 0310 	bic.w	r3, r3, #16
 8006c40:	647b      	str	r3, [r7, #68]	; 0x44
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	461a      	mov	r2, r3
 8006c48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c4a:	61bb      	str	r3, [r7, #24]
 8006c4c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c4e:	6979      	ldr	r1, [r7, #20]
 8006c50:	69ba      	ldr	r2, [r7, #24]
 8006c52:	e841 2300 	strex	r3, r2, [r1]
 8006c56:	613b      	str	r3, [r7, #16]
   return(result);
 8006c58:	693b      	ldr	r3, [r7, #16]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d1e6      	bne.n	8006c2c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2220      	movs	r2, #32
 8006c62:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006c72:	bf00      	nop
 8006c74:	3754      	adds	r7, #84	; 0x54
 8006c76:	46bd      	mov	sp, r7
 8006c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7c:	4770      	bx	lr
	...

08006c80 <arm_rfft_32_fast_init_f32>:
 8006c80:	b178      	cbz	r0, 8006ca2 <arm_rfft_32_fast_init_f32+0x22>
 8006c82:	b430      	push	{r4, r5}
 8006c84:	4908      	ldr	r1, [pc, #32]	; (8006ca8 <arm_rfft_32_fast_init_f32+0x28>)
 8006c86:	4a09      	ldr	r2, [pc, #36]	; (8006cac <arm_rfft_32_fast_init_f32+0x2c>)
 8006c88:	2310      	movs	r3, #16
 8006c8a:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8006c8e:	8003      	strh	r3, [r0, #0]
 8006c90:	2520      	movs	r5, #32
 8006c92:	2414      	movs	r4, #20
 8006c94:	4b06      	ldr	r3, [pc, #24]	; (8006cb0 <arm_rfft_32_fast_init_f32+0x30>)
 8006c96:	8205      	strh	r5, [r0, #16]
 8006c98:	8184      	strh	r4, [r0, #12]
 8006c9a:	6143      	str	r3, [r0, #20]
 8006c9c:	bc30      	pop	{r4, r5}
 8006c9e:	2000      	movs	r0, #0
 8006ca0:	4770      	bx	lr
 8006ca2:	f04f 30ff 	mov.w	r0, #4294967295
 8006ca6:	4770      	bx	lr
 8006ca8:	0800bb44 	.word	0x0800bb44
 8006cac:	0801047c 	.word	0x0801047c
 8006cb0:	080191fc 	.word	0x080191fc

08006cb4 <arm_rfft_64_fast_init_f32>:
 8006cb4:	b178      	cbz	r0, 8006cd6 <arm_rfft_64_fast_init_f32+0x22>
 8006cb6:	b430      	push	{r4, r5}
 8006cb8:	4908      	ldr	r1, [pc, #32]	; (8006cdc <arm_rfft_64_fast_init_f32+0x28>)
 8006cba:	4a09      	ldr	r2, [pc, #36]	; (8006ce0 <arm_rfft_64_fast_init_f32+0x2c>)
 8006cbc:	2320      	movs	r3, #32
 8006cbe:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8006cc2:	8003      	strh	r3, [r0, #0]
 8006cc4:	2540      	movs	r5, #64	; 0x40
 8006cc6:	2430      	movs	r4, #48	; 0x30
 8006cc8:	4b06      	ldr	r3, [pc, #24]	; (8006ce4 <arm_rfft_64_fast_init_f32+0x30>)
 8006cca:	8205      	strh	r5, [r0, #16]
 8006ccc:	8184      	strh	r4, [r0, #12]
 8006cce:	6143      	str	r3, [r0, #20]
 8006cd0:	bc30      	pop	{r4, r5}
 8006cd2:	2000      	movs	r0, #0
 8006cd4:	4770      	bx	lr
 8006cd6:	f04f 30ff 	mov.w	r0, #4294967295
 8006cda:	4770      	bx	lr
 8006cdc:	0800dc9c 	.word	0x0800dc9c
 8006ce0:	08014cfc 	.word	0x08014cfc
 8006ce4:	0801da7c 	.word	0x0801da7c

08006ce8 <arm_rfft_256_fast_init_f32>:
 8006ce8:	b180      	cbz	r0, 8006d0c <arm_rfft_256_fast_init_f32+0x24>
 8006cea:	b430      	push	{r4, r5}
 8006cec:	4909      	ldr	r1, [pc, #36]	; (8006d14 <arm_rfft_256_fast_init_f32+0x2c>)
 8006cee:	4a0a      	ldr	r2, [pc, #40]	; (8006d18 <arm_rfft_256_fast_init_f32+0x30>)
 8006cf0:	2380      	movs	r3, #128	; 0x80
 8006cf2:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8006cf6:	8003      	strh	r3, [r0, #0]
 8006cf8:	f44f 7580 	mov.w	r5, #256	; 0x100
 8006cfc:	24d0      	movs	r4, #208	; 0xd0
 8006cfe:	4b07      	ldr	r3, [pc, #28]	; (8006d1c <arm_rfft_256_fast_init_f32+0x34>)
 8006d00:	8205      	strh	r5, [r0, #16]
 8006d02:	8184      	strh	r4, [r0, #12]
 8006d04:	6143      	str	r3, [r0, #20]
 8006d06:	bc30      	pop	{r4, r5}
 8006d08:	2000      	movs	r0, #0
 8006d0a:	4770      	bx	lr
 8006d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8006d10:	4770      	bx	lr
 8006d12:	bf00      	nop
 8006d14:	0800b9a4 	.word	0x0800b9a4
 8006d18:	0801007c 	.word	0x0801007c
 8006d1c:	08018dfc 	.word	0x08018dfc

08006d20 <arm_rfft_512_fast_init_f32>:
 8006d20:	b190      	cbz	r0, 8006d48 <arm_rfft_512_fast_init_f32+0x28>
 8006d22:	b430      	push	{r4, r5}
 8006d24:	490a      	ldr	r1, [pc, #40]	; (8006d50 <arm_rfft_512_fast_init_f32+0x30>)
 8006d26:	4a0b      	ldr	r2, [pc, #44]	; (8006d54 <arm_rfft_512_fast_init_f32+0x34>)
 8006d28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006d2c:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8006d30:	8003      	strh	r3, [r0, #0]
 8006d32:	f44f 7500 	mov.w	r5, #512	; 0x200
 8006d36:	f44f 74dc 	mov.w	r4, #440	; 0x1b8
 8006d3a:	4b07      	ldr	r3, [pc, #28]	; (8006d58 <arm_rfft_512_fast_init_f32+0x38>)
 8006d3c:	8205      	strh	r5, [r0, #16]
 8006d3e:	8184      	strh	r4, [r0, #12]
 8006d40:	6143      	str	r3, [r0, #20]
 8006d42:	bc30      	pop	{r4, r5}
 8006d44:	2000      	movs	r0, #0
 8006d46:	4770      	bx	lr
 8006d48:	f04f 30ff 	mov.w	r0, #4294967295
 8006d4c:	4770      	bx	lr
 8006d4e:	bf00      	nop
 8006d50:	0800d92c 	.word	0x0800d92c
 8006d54:	080144fc 	.word	0x080144fc
 8006d58:	0801d27c 	.word	0x0801d27c

08006d5c <arm_rfft_1024_fast_init_f32>:
 8006d5c:	b190      	cbz	r0, 8006d84 <arm_rfft_1024_fast_init_f32+0x28>
 8006d5e:	b430      	push	{r4, r5}
 8006d60:	490a      	ldr	r1, [pc, #40]	; (8006d8c <arm_rfft_1024_fast_init_f32+0x30>)
 8006d62:	4a0b      	ldr	r2, [pc, #44]	; (8006d90 <arm_rfft_1024_fast_init_f32+0x34>)
 8006d64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d68:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8006d6c:	8003      	strh	r3, [r0, #0]
 8006d6e:	f44f 6580 	mov.w	r5, #1024	; 0x400
 8006d72:	f44f 74e0 	mov.w	r4, #448	; 0x1c0
 8006d76:	4b07      	ldr	r3, [pc, #28]	; (8006d94 <arm_rfft_1024_fast_init_f32+0x38>)
 8006d78:	8205      	strh	r5, [r0, #16]
 8006d7a:	8184      	strh	r4, [r0, #12]
 8006d7c:	6143      	str	r3, [r0, #20]
 8006d7e:	bc30      	pop	{r4, r5}
 8006d80:	2000      	movs	r0, #0
 8006d82:	4770      	bx	lr
 8006d84:	f04f 30ff 	mov.w	r0, #4294967295
 8006d88:	4770      	bx	lr
 8006d8a:	bf00      	nop
 8006d8c:	0800dcfc 	.word	0x0800dcfc
 8006d90:	08014dfc 	.word	0x08014dfc
 8006d94:	08015dfc 	.word	0x08015dfc

08006d98 <arm_rfft_2048_fast_init_f32>:
 8006d98:	b190      	cbz	r0, 8006dc0 <arm_rfft_2048_fast_init_f32+0x28>
 8006d9a:	b430      	push	{r4, r5}
 8006d9c:	490a      	ldr	r1, [pc, #40]	; (8006dc8 <arm_rfft_2048_fast_init_f32+0x30>)
 8006d9e:	4a0b      	ldr	r2, [pc, #44]	; (8006dcc <arm_rfft_2048_fast_init_f32+0x34>)
 8006da0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006da4:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8006da8:	8003      	strh	r3, [r0, #0]
 8006daa:	f44f 6500 	mov.w	r5, #2048	; 0x800
 8006dae:	f44f 64e1 	mov.w	r4, #1800	; 0x708
 8006db2:	4b07      	ldr	r3, [pc, #28]	; (8006dd0 <arm_rfft_2048_fast_init_f32+0x38>)
 8006db4:	8205      	strh	r5, [r0, #16]
 8006db6:	8184      	strh	r4, [r0, #12]
 8006db8:	6143      	str	r3, [r0, #20]
 8006dba:	bc30      	pop	{r4, r5}
 8006dbc:	2000      	movs	r0, #0
 8006dbe:	4770      	bx	lr
 8006dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8006dc4:	4770      	bx	lr
 8006dc6:	bf00      	nop
 8006dc8:	0800ab94 	.word	0x0800ab94
 8006dcc:	0800e07c 	.word	0x0800e07c
 8006dd0:	08016dfc 	.word	0x08016dfc

08006dd4 <arm_rfft_4096_fast_init_f32>:
 8006dd4:	b190      	cbz	r0, 8006dfc <arm_rfft_4096_fast_init_f32+0x28>
 8006dd6:	b430      	push	{r4, r5}
 8006dd8:	490a      	ldr	r1, [pc, #40]	; (8006e04 <arm_rfft_4096_fast_init_f32+0x30>)
 8006dda:	4a0b      	ldr	r2, [pc, #44]	; (8006e08 <arm_rfft_4096_fast_init_f32+0x34>)
 8006ddc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006de0:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8006de4:	8003      	strh	r3, [r0, #0]
 8006de6:	f44f 5580 	mov.w	r5, #4096	; 0x1000
 8006dea:	f44f 646e 	mov.w	r4, #3808	; 0xee0
 8006dee:	4b07      	ldr	r3, [pc, #28]	; (8006e0c <arm_rfft_4096_fast_init_f32+0x38>)
 8006df0:	8205      	strh	r5, [r0, #16]
 8006df2:	8184      	strh	r4, [r0, #12]
 8006df4:	6143      	str	r3, [r0, #20]
 8006df6:	bc30      	pop	{r4, r5}
 8006df8:	2000      	movs	r0, #0
 8006dfa:	4770      	bx	lr
 8006dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8006e00:	4770      	bx	lr
 8006e02:	bf00      	nop
 8006e04:	0800bb6c 	.word	0x0800bb6c
 8006e08:	080104fc 	.word	0x080104fc
 8006e0c:	0801927c 	.word	0x0801927c

08006e10 <arm_rfft_fast_init_f32>:
 8006e10:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8006e14:	d01f      	beq.n	8006e56 <arm_rfft_fast_init_f32+0x46>
 8006e16:	d90b      	bls.n	8006e30 <arm_rfft_fast_init_f32+0x20>
 8006e18:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8006e1c:	d019      	beq.n	8006e52 <arm_rfft_fast_init_f32+0x42>
 8006e1e:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8006e22:	d012      	beq.n	8006e4a <arm_rfft_fast_init_f32+0x3a>
 8006e24:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006e28:	d00d      	beq.n	8006e46 <arm_rfft_fast_init_f32+0x36>
 8006e2a:	f04f 30ff 	mov.w	r0, #4294967295
 8006e2e:	4770      	bx	lr
 8006e30:	2940      	cmp	r1, #64	; 0x40
 8006e32:	d00c      	beq.n	8006e4e <arm_rfft_fast_init_f32+0x3e>
 8006e34:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8006e38:	d003      	beq.n	8006e42 <arm_rfft_fast_init_f32+0x32>
 8006e3a:	2920      	cmp	r1, #32
 8006e3c:	d1f5      	bne.n	8006e2a <arm_rfft_fast_init_f32+0x1a>
 8006e3e:	4b07      	ldr	r3, [pc, #28]	; (8006e5c <arm_rfft_fast_init_f32+0x4c>)
 8006e40:	4718      	bx	r3
 8006e42:	4b07      	ldr	r3, [pc, #28]	; (8006e60 <arm_rfft_fast_init_f32+0x50>)
 8006e44:	4718      	bx	r3
 8006e46:	4b07      	ldr	r3, [pc, #28]	; (8006e64 <arm_rfft_fast_init_f32+0x54>)
 8006e48:	4718      	bx	r3
 8006e4a:	4b07      	ldr	r3, [pc, #28]	; (8006e68 <arm_rfft_fast_init_f32+0x58>)
 8006e4c:	4718      	bx	r3
 8006e4e:	4b07      	ldr	r3, [pc, #28]	; (8006e6c <arm_rfft_fast_init_f32+0x5c>)
 8006e50:	e7f6      	b.n	8006e40 <arm_rfft_fast_init_f32+0x30>
 8006e52:	4b07      	ldr	r3, [pc, #28]	; (8006e70 <arm_rfft_fast_init_f32+0x60>)
 8006e54:	e7f4      	b.n	8006e40 <arm_rfft_fast_init_f32+0x30>
 8006e56:	4b07      	ldr	r3, [pc, #28]	; (8006e74 <arm_rfft_fast_init_f32+0x64>)
 8006e58:	e7f2      	b.n	8006e40 <arm_rfft_fast_init_f32+0x30>
 8006e5a:	bf00      	nop
 8006e5c:	08006c81 	.word	0x08006c81
 8006e60:	08006ce9 	.word	0x08006ce9
 8006e64:	08006d5d 	.word	0x08006d5d
 8006e68:	08006dd5 	.word	0x08006dd5
 8006e6c:	08006cb5 	.word	0x08006cb5
 8006e70:	08006d99 	.word	0x08006d99
 8006e74:	08006d21 	.word	0x08006d21

08006e78 <stage_rfft_f32>:
 8006e78:	b410      	push	{r4}
 8006e7a:	edd1 7a00 	vldr	s15, [r1]
 8006e7e:	ed91 7a01 	vldr	s14, [r1, #4]
 8006e82:	8804      	ldrh	r4, [r0, #0]
 8006e84:	6940      	ldr	r0, [r0, #20]
 8006e86:	ee37 7a07 	vadd.f32	s14, s14, s14
 8006e8a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006e8e:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 8006e92:	ee77 6a87 	vadd.f32	s13, s15, s14
 8006e96:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006e9a:	3c01      	subs	r4, #1
 8006e9c:	ee26 7a84 	vmul.f32	s14, s13, s8
 8006ea0:	ee67 7a84 	vmul.f32	s15, s15, s8
 8006ea4:	eb01 03c4 	add.w	r3, r1, r4, lsl #3
 8006ea8:	ed82 7a00 	vstr	s14, [r2]
 8006eac:	edc2 7a01 	vstr	s15, [r2, #4]
 8006eb0:	3010      	adds	r0, #16
 8006eb2:	3210      	adds	r2, #16
 8006eb4:	3b08      	subs	r3, #8
 8006eb6:	3110      	adds	r1, #16
 8006eb8:	ed11 5a02 	vldr	s10, [r1, #-8]
 8006ebc:	ed93 7a02 	vldr	s14, [r3, #8]
 8006ec0:	ed50 6a02 	vldr	s13, [r0, #-8]
 8006ec4:	edd3 4a03 	vldr	s9, [r3, #12]
 8006ec8:	ed51 7a01 	vldr	s15, [r1, #-4]
 8006ecc:	ed10 6a01 	vldr	s12, [r0, #-4]
 8006ed0:	ee77 5a45 	vsub.f32	s11, s14, s10
 8006ed4:	ee37 7a05 	vadd.f32	s14, s14, s10
 8006ed8:	ee66 3aa5 	vmul.f32	s7, s13, s11
 8006edc:	ee34 5aa7 	vadd.f32	s10, s9, s15
 8006ee0:	ee66 5a25 	vmul.f32	s11, s12, s11
 8006ee4:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8006ee8:	ee37 7a23 	vadd.f32	s14, s14, s7
 8006eec:	ee66 6a85 	vmul.f32	s13, s13, s10
 8006ef0:	ee26 6a05 	vmul.f32	s12, s12, s10
 8006ef4:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8006ef8:	ee37 7a06 	vadd.f32	s14, s14, s12
 8006efc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006f00:	ee27 7a04 	vmul.f32	s14, s14, s8
 8006f04:	ee67 7a84 	vmul.f32	s15, s15, s8
 8006f08:	3c01      	subs	r4, #1
 8006f0a:	ed02 7a02 	vstr	s14, [r2, #-8]
 8006f0e:	ed42 7a01 	vstr	s15, [r2, #-4]
 8006f12:	f1a3 0308 	sub.w	r3, r3, #8
 8006f16:	f101 0108 	add.w	r1, r1, #8
 8006f1a:	f100 0008 	add.w	r0, r0, #8
 8006f1e:	f102 0208 	add.w	r2, r2, #8
 8006f22:	d1c9      	bne.n	8006eb8 <stage_rfft_f32+0x40>
 8006f24:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006f28:	4770      	bx	lr
 8006f2a:	bf00      	nop

08006f2c <merge_rfft_f32>:
 8006f2c:	b410      	push	{r4}
 8006f2e:	edd1 7a00 	vldr	s15, [r1]
 8006f32:	edd1 6a01 	vldr	s13, [r1, #4]
 8006f36:	8804      	ldrh	r4, [r0, #0]
 8006f38:	6940      	ldr	r0, [r0, #20]
 8006f3a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8006f3e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006f42:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 8006f46:	ee27 7a04 	vmul.f32	s14, s14, s8
 8006f4a:	ee67 7a84 	vmul.f32	s15, s15, s8
 8006f4e:	3c01      	subs	r4, #1
 8006f50:	ed82 7a00 	vstr	s14, [r2]
 8006f54:	edc2 7a01 	vstr	s15, [r2, #4]
 8006f58:	b3dc      	cbz	r4, 8006fd2 <merge_rfft_f32+0xa6>
 8006f5a:	00e3      	lsls	r3, r4, #3
 8006f5c:	3b08      	subs	r3, #8
 8006f5e:	440b      	add	r3, r1
 8006f60:	3010      	adds	r0, #16
 8006f62:	3210      	adds	r2, #16
 8006f64:	3110      	adds	r1, #16
 8006f66:	ed11 5a02 	vldr	s10, [r1, #-8]
 8006f6a:	ed93 7a02 	vldr	s14, [r3, #8]
 8006f6e:	ed50 6a02 	vldr	s13, [r0, #-8]
 8006f72:	edd3 4a03 	vldr	s9, [r3, #12]
 8006f76:	ed51 7a01 	vldr	s15, [r1, #-4]
 8006f7a:	ed10 6a01 	vldr	s12, [r0, #-4]
 8006f7e:	ee75 5a47 	vsub.f32	s11, s10, s14
 8006f82:	ee37 7a05 	vadd.f32	s14, s14, s10
 8006f86:	ee66 3aa5 	vmul.f32	s7, s13, s11
 8006f8a:	ee34 5aa7 	vadd.f32	s10, s9, s15
 8006f8e:	ee66 5a25 	vmul.f32	s11, s12, s11
 8006f92:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8006f96:	ee37 7a63 	vsub.f32	s14, s14, s7
 8006f9a:	ee66 6a85 	vmul.f32	s13, s13, s10
 8006f9e:	ee26 6a05 	vmul.f32	s12, s12, s10
 8006fa2:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8006fa6:	ee37 7a46 	vsub.f32	s14, s14, s12
 8006faa:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006fae:	ee27 7a04 	vmul.f32	s14, s14, s8
 8006fb2:	ee67 7a84 	vmul.f32	s15, s15, s8
 8006fb6:	3c01      	subs	r4, #1
 8006fb8:	ed02 7a02 	vstr	s14, [r2, #-8]
 8006fbc:	ed42 7a01 	vstr	s15, [r2, #-4]
 8006fc0:	f1a3 0308 	sub.w	r3, r3, #8
 8006fc4:	f101 0108 	add.w	r1, r1, #8
 8006fc8:	f100 0008 	add.w	r0, r0, #8
 8006fcc:	f102 0208 	add.w	r2, r2, #8
 8006fd0:	d1c9      	bne.n	8006f66 <merge_rfft_f32+0x3a>
 8006fd2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006fd6:	4770      	bx	lr

08006fd8 <arm_rfft_fast_f32>:
 8006fd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fdc:	8a05      	ldrh	r5, [r0, #16]
 8006fde:	086d      	lsrs	r5, r5, #1
 8006fe0:	8005      	strh	r5, [r0, #0]
 8006fe2:	4604      	mov	r4, r0
 8006fe4:	4616      	mov	r6, r2
 8006fe6:	461d      	mov	r5, r3
 8006fe8:	b14b      	cbz	r3, 8006ffe <arm_rfft_fast_f32+0x26>
 8006fea:	f7ff ff9f 	bl	8006f2c <merge_rfft_f32>
 8006fee:	462a      	mov	r2, r5
 8006ff0:	4631      	mov	r1, r6
 8006ff2:	4620      	mov	r0, r4
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006ffa:	f000 bb33 	b.w	8007664 <arm_cfft_f32>
 8006ffe:	460f      	mov	r7, r1
 8007000:	461a      	mov	r2, r3
 8007002:	2301      	movs	r3, #1
 8007004:	f000 fb2e 	bl	8007664 <arm_cfft_f32>
 8007008:	4632      	mov	r2, r6
 800700a:	4639      	mov	r1, r7
 800700c:	4620      	mov	r0, r4
 800700e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007012:	f7ff bf31 	b.w	8006e78 <stage_rfft_f32>
 8007016:	bf00      	nop

08007018 <arm_cfft_radix8by2_f32>:
 8007018:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800701c:	ed2d 8b08 	vpush	{d8-d11}
 8007020:	4607      	mov	r7, r0
 8007022:	4608      	mov	r0, r1
 8007024:	f8b7 c000 	ldrh.w	ip, [r7]
 8007028:	687a      	ldr	r2, [r7, #4]
 800702a:	ea4f 015c 	mov.w	r1, ip, lsr #1
 800702e:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 8007032:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8007036:	f000 80b0 	beq.w	800719a <arm_cfft_radix8by2_f32+0x182>
 800703a:	008c      	lsls	r4, r1, #2
 800703c:	3410      	adds	r4, #16
 800703e:	f100 0310 	add.w	r3, r0, #16
 8007042:	1906      	adds	r6, r0, r4
 8007044:	3210      	adds	r2, #16
 8007046:	4444      	add	r4, r8
 8007048:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 800704c:	f108 0510 	add.w	r5, r8, #16
 8007050:	ed15 2a04 	vldr	s4, [r5, #-16]
 8007054:	ed55 2a03 	vldr	s5, [r5, #-12]
 8007058:	ed54 4a04 	vldr	s9, [r4, #-16]
 800705c:	ed14 4a03 	vldr	s8, [r4, #-12]
 8007060:	ed14 6a02 	vldr	s12, [r4, #-8]
 8007064:	ed54 5a01 	vldr	s11, [r4, #-4]
 8007068:	ed53 3a04 	vldr	s7, [r3, #-16]
 800706c:	ed15 0a02 	vldr	s0, [r5, #-8]
 8007070:	ed55 0a01 	vldr	s1, [r5, #-4]
 8007074:	ed56 6a04 	vldr	s13, [r6, #-16]
 8007078:	ed16 3a03 	vldr	s6, [r6, #-12]
 800707c:	ed13 7a03 	vldr	s14, [r3, #-12]
 8007080:	ed13 5a02 	vldr	s10, [r3, #-8]
 8007084:	ed53 7a01 	vldr	s15, [r3, #-4]
 8007088:	ed16 1a02 	vldr	s2, [r6, #-8]
 800708c:	ed56 1a01 	vldr	s3, [r6, #-4]
 8007090:	ee73 ba82 	vadd.f32	s23, s7, s4
 8007094:	ee37 ba22 	vadd.f32	s22, s14, s5
 8007098:	ee76 9aa4 	vadd.f32	s19, s13, s9
 800709c:	ee33 9a04 	vadd.f32	s18, s6, s8
 80070a0:	ee31 8aa5 	vadd.f32	s16, s3, s11
 80070a4:	ee75 aa00 	vadd.f32	s21, s10, s0
 80070a8:	ee37 aaa0 	vadd.f32	s20, s15, s1
 80070ac:	ee71 8a06 	vadd.f32	s17, s2, s12
 80070b0:	ed43 ba04 	vstr	s23, [r3, #-16]
 80070b4:	ed03 ba03 	vstr	s22, [r3, #-12]
 80070b8:	ed43 aa02 	vstr	s21, [r3, #-8]
 80070bc:	ed03 aa01 	vstr	s20, [r3, #-4]
 80070c0:	ed06 8a01 	vstr	s16, [r6, #-4]
 80070c4:	ed46 9a04 	vstr	s19, [r6, #-16]
 80070c8:	ed06 9a03 	vstr	s18, [r6, #-12]
 80070cc:	ed46 8a02 	vstr	s17, [r6, #-8]
 80070d0:	ee37 7a62 	vsub.f32	s14, s14, s5
 80070d4:	ee74 4ae6 	vsub.f32	s9, s9, s13
 80070d8:	ee34 4a43 	vsub.f32	s8, s8, s6
 80070dc:	ed52 6a03 	vldr	s13, [r2, #-12]
 80070e0:	ed12 3a04 	vldr	s6, [r2, #-16]
 80070e4:	ee73 3ac2 	vsub.f32	s7, s7, s4
 80070e8:	ee27 8a26 	vmul.f32	s16, s14, s13
 80070ec:	ee64 2aa6 	vmul.f32	s5, s9, s13
 80070f0:	ee23 2a83 	vmul.f32	s4, s7, s6
 80070f4:	ee64 4a83 	vmul.f32	s9, s9, s6
 80070f8:	ee63 3aa6 	vmul.f32	s7, s7, s13
 80070fc:	ee27 7a03 	vmul.f32	s14, s14, s6
 8007100:	ee64 6a26 	vmul.f32	s13, s8, s13
 8007104:	ee24 4a03 	vmul.f32	s8, s8, s6
 8007108:	ee37 7a63 	vsub.f32	s14, s14, s7
 800710c:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8007110:	ee32 4ac4 	vsub.f32	s8, s5, s8
 8007114:	ee32 3a08 	vadd.f32	s6, s4, s16
 8007118:	ed05 7a03 	vstr	s14, [r5, #-12]
 800711c:	ed05 3a04 	vstr	s6, [r5, #-16]
 8007120:	ed04 4a04 	vstr	s8, [r4, #-16]
 8007124:	ed44 6a03 	vstr	s13, [r4, #-12]
 8007128:	ed12 7a01 	vldr	s14, [r2, #-4]
 800712c:	ee76 6a41 	vsub.f32	s13, s12, s2
 8007130:	ee35 5a40 	vsub.f32	s10, s10, s0
 8007134:	ee35 6ae1 	vsub.f32	s12, s11, s3
 8007138:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800713c:	ed52 5a02 	vldr	s11, [r2, #-8]
 8007140:	ee67 3a87 	vmul.f32	s7, s15, s14
 8007144:	ee66 4a87 	vmul.f32	s9, s13, s14
 8007148:	ee25 4a25 	vmul.f32	s8, s10, s11
 800714c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8007150:	ee25 5a07 	vmul.f32	s10, s10, s14
 8007154:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8007158:	ee26 7a07 	vmul.f32	s14, s12, s14
 800715c:	ee26 6a25 	vmul.f32	s12, s12, s11
 8007160:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8007164:	ee74 5a23 	vadd.f32	s11, s8, s7
 8007168:	ee34 6ac6 	vsub.f32	s12, s9, s12
 800716c:	ee37 7a26 	vadd.f32	s14, s14, s13
 8007170:	3310      	adds	r3, #16
 8007172:	4563      	cmp	r3, ip
 8007174:	ed45 5a02 	vstr	s11, [r5, #-8]
 8007178:	f106 0610 	add.w	r6, r6, #16
 800717c:	ed45 7a01 	vstr	s15, [r5, #-4]
 8007180:	f102 0210 	add.w	r2, r2, #16
 8007184:	ed04 6a02 	vstr	s12, [r4, #-8]
 8007188:	ed04 7a01 	vstr	s14, [r4, #-4]
 800718c:	f105 0510 	add.w	r5, r5, #16
 8007190:	f104 0410 	add.w	r4, r4, #16
 8007194:	f47f af5c 	bne.w	8007050 <arm_cfft_radix8by2_f32+0x38>
 8007198:	687a      	ldr	r2, [r7, #4]
 800719a:	b28c      	uxth	r4, r1
 800719c:	4621      	mov	r1, r4
 800719e:	2302      	movs	r3, #2
 80071a0:	f000 faf8 	bl	8007794 <arm_radix8_butterfly_f32>
 80071a4:	ecbd 8b08 	vpop	{d8-d11}
 80071a8:	4621      	mov	r1, r4
 80071aa:	687a      	ldr	r2, [r7, #4]
 80071ac:	4640      	mov	r0, r8
 80071ae:	2302      	movs	r3, #2
 80071b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80071b4:	f000 baee 	b.w	8007794 <arm_radix8_butterfly_f32>

080071b8 <arm_cfft_radix8by4_f32>:
 80071b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071bc:	ed2d 8b0a 	vpush	{d8-d12}
 80071c0:	b08d      	sub	sp, #52	; 0x34
 80071c2:	460d      	mov	r5, r1
 80071c4:	910b      	str	r1, [sp, #44]	; 0x2c
 80071c6:	8801      	ldrh	r1, [r0, #0]
 80071c8:	6842      	ldr	r2, [r0, #4]
 80071ca:	900a      	str	r0, [sp, #40]	; 0x28
 80071cc:	0849      	lsrs	r1, r1, #1
 80071ce:	008b      	lsls	r3, r1, #2
 80071d0:	18ee      	adds	r6, r5, r3
 80071d2:	18f0      	adds	r0, r6, r3
 80071d4:	edd0 5a00 	vldr	s11, [r0]
 80071d8:	edd5 7a00 	vldr	s15, [r5]
 80071dc:	ed96 7a00 	vldr	s14, [r6]
 80071e0:	edd0 3a01 	vldr	s7, [r0, #4]
 80071e4:	ed96 4a01 	vldr	s8, [r6, #4]
 80071e8:	ed95 5a01 	vldr	s10, [r5, #4]
 80071ec:	9008      	str	r0, [sp, #32]
 80071ee:	ee37 6aa5 	vadd.f32	s12, s15, s11
 80071f2:	18c7      	adds	r7, r0, r3
 80071f4:	edd7 4a00 	vldr	s9, [r7]
 80071f8:	ed97 3a01 	vldr	s6, [r7, #4]
 80071fc:	9701      	str	r7, [sp, #4]
 80071fe:	ee77 6a06 	vadd.f32	s13, s14, s12
 8007202:	462c      	mov	r4, r5
 8007204:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8007208:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800720c:	ee16 ca90 	vmov	ip, s13
 8007210:	f844 cb08 	str.w	ip, [r4], #8
 8007214:	ee75 6a23 	vadd.f32	s13, s10, s7
 8007218:	edd6 5a01 	vldr	s11, [r6, #4]
 800721c:	edd7 2a01 	vldr	s5, [r7, #4]
 8007220:	9404      	str	r4, [sp, #16]
 8007222:	ee35 5a63 	vsub.f32	s10, s10, s7
 8007226:	ee74 3a27 	vadd.f32	s7, s8, s15
 800722a:	ee36 6a47 	vsub.f32	s12, s12, s14
 800722e:	ee76 5aa5 	vadd.f32	s11, s13, s11
 8007232:	ee73 3ac3 	vsub.f32	s7, s7, s6
 8007236:	0849      	lsrs	r1, r1, #1
 8007238:	f102 0e08 	add.w	lr, r2, #8
 800723c:	ee76 6ac4 	vsub.f32	s13, s13, s8
 8007240:	ee77 7ac4 	vsub.f32	s15, s15, s8
 8007244:	9109      	str	r1, [sp, #36]	; 0x24
 8007246:	ee35 4a47 	vsub.f32	s8, s10, s14
 800724a:	f1a1 0902 	sub.w	r9, r1, #2
 800724e:	f8cd e00c 	str.w	lr, [sp, #12]
 8007252:	4631      	mov	r1, r6
 8007254:	ee13 ea90 	vmov	lr, s7
 8007258:	ee36 6a64 	vsub.f32	s12, s12, s9
 800725c:	ee75 5aa2 	vadd.f32	s11, s11, s5
 8007260:	4604      	mov	r4, r0
 8007262:	edc5 5a01 	vstr	s11, [r5, #4]
 8007266:	ee37 7a05 	vadd.f32	s14, s14, s10
 800726a:	f841 eb08 	str.w	lr, [r1], #8
 800726e:	ee34 5a24 	vadd.f32	s10, s8, s9
 8007272:	ee16 ea10 	vmov	lr, s12
 8007276:	ed86 5a01 	vstr	s10, [r6, #4]
 800727a:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800727e:	f844 eb08 	str.w	lr, [r4], #8
 8007282:	ee77 7a83 	vadd.f32	s15, s15, s6
 8007286:	edc0 6a01 	vstr	s13, [r0, #4]
 800728a:	9405      	str	r4, [sp, #20]
 800728c:	4604      	mov	r4, r0
 800728e:	ee17 0a90 	vmov	r0, s15
 8007292:	9106      	str	r1, [sp, #24]
 8007294:	ee37 7a64 	vsub.f32	s14, s14, s9
 8007298:	f102 0110 	add.w	r1, r2, #16
 800729c:	46bc      	mov	ip, r7
 800729e:	9100      	str	r1, [sp, #0]
 80072a0:	f847 0b08 	str.w	r0, [r7], #8
 80072a4:	f102 0118 	add.w	r1, r2, #24
 80072a8:	ea5f 0059 	movs.w	r0, r9, lsr #1
 80072ac:	9102      	str	r1, [sp, #8]
 80072ae:	ed8c 7a01 	vstr	s14, [ip, #4]
 80072b2:	9007      	str	r0, [sp, #28]
 80072b4:	f000 8134 	beq.w	8007520 <arm_cfft_radix8by4_f32+0x368>
 80072b8:	f102 0920 	add.w	r9, r2, #32
 80072bc:	f102 0830 	add.w	r8, r2, #48	; 0x30
 80072c0:	9a01      	ldr	r2, [sp, #4]
 80072c2:	f8dd a000 	ldr.w	sl, [sp]
 80072c6:	3b0c      	subs	r3, #12
 80072c8:	4683      	mov	fp, r0
 80072ca:	4463      	add	r3, ip
 80072cc:	f105 0e10 	add.w	lr, r5, #16
 80072d0:	f1a4 010c 	sub.w	r1, r4, #12
 80072d4:	f104 0510 	add.w	r5, r4, #16
 80072d8:	f1a6 0c0c 	sub.w	ip, r6, #12
 80072dc:	f1a2 040c 	sub.w	r4, r2, #12
 80072e0:	f106 0010 	add.w	r0, r6, #16
 80072e4:	3210      	adds	r2, #16
 80072e6:	ed1e 5a02 	vldr	s10, [lr, #-8]
 80072ea:	ed55 5a02 	vldr	s11, [r5, #-8]
 80072ee:	ed50 7a02 	vldr	s15, [r0, #-8]
 80072f2:	ed52 1a02 	vldr	s3, [r2, #-8]
 80072f6:	ed55 6a01 	vldr	s13, [r5, #-4]
 80072fa:	ed1e 0a01 	vldr	s0, [lr, #-4]
 80072fe:	ed12 1a01 	vldr	s2, [r2, #-4]
 8007302:	ed10 8a01 	vldr	s16, [r0, #-4]
 8007306:	ee35 4a25 	vadd.f32	s8, s10, s11
 800730a:	ee30 6a26 	vadd.f32	s12, s0, s13
 800730e:	ee37 7a84 	vadd.f32	s14, s15, s8
 8007312:	ee30 0a66 	vsub.f32	s0, s0, s13
 8007316:	ee37 7a21 	vadd.f32	s14, s14, s3
 800731a:	ee75 5a65 	vsub.f32	s11, s10, s11
 800731e:	ed0e 7a02 	vstr	s14, [lr, #-8]
 8007322:	ed10 7a01 	vldr	s14, [r0, #-4]
 8007326:	ed52 6a01 	vldr	s13, [r2, #-4]
 800732a:	ee36 7a07 	vadd.f32	s14, s12, s14
 800732e:	ee78 aa25 	vadd.f32	s21, s16, s11
 8007332:	ee37 7a26 	vadd.f32	s14, s14, s13
 8007336:	ee70 3a67 	vsub.f32	s7, s0, s15
 800733a:	ed0e 7a01 	vstr	s14, [lr, #-4]
 800733e:	ed94 7a02 	vldr	s14, [r4, #8]
 8007342:	ed9c 2a02 	vldr	s4, [ip, #8]
 8007346:	ed91 ba02 	vldr	s22, [r1, #8]
 800734a:	edd3 9a02 	vldr	s19, [r3, #8]
 800734e:	edd4 2a01 	vldr	s5, [r4, #4]
 8007352:	ed9c 9a01 	vldr	s18, [ip, #4]
 8007356:	ed93 5a01 	vldr	s10, [r3, #4]
 800735a:	edd1 0a01 	vldr	s1, [r1, #4]
 800735e:	ee72 6a07 	vadd.f32	s13, s4, s14
 8007362:	ee32 2a47 	vsub.f32	s4, s4, s14
 8007366:	ee7b 8a26 	vadd.f32	s17, s22, s13
 800736a:	ee79 4a22 	vadd.f32	s9, s18, s5
 800736e:	ee38 7aa9 	vadd.f32	s14, s17, s19
 8007372:	ee79 2a62 	vsub.f32	s5, s18, s5
 8007376:	ed8c 7a02 	vstr	s14, [ip, #8]
 800737a:	ed91 7a01 	vldr	s14, [r1, #4]
 800737e:	edd3 8a01 	vldr	s17, [r3, #4]
 8007382:	ee34 7a87 	vadd.f32	s14, s9, s14
 8007386:	ee3b 3a69 	vsub.f32	s6, s22, s19
 800738a:	ee37 7a28 	vadd.f32	s14, s14, s17
 800738e:	ee32 9a60 	vsub.f32	s18, s4, s1
 8007392:	ed8c 7a01 	vstr	s14, [ip, #4]
 8007396:	ed1a 7a01 	vldr	s14, [sl, #-4]
 800739a:	ed1a aa02 	vldr	s20, [sl, #-8]
 800739e:	ee73 8a22 	vadd.f32	s17, s6, s5
 80073a2:	ee39 9a05 	vadd.f32	s18, s18, s10
 80073a6:	ee7a aac1 	vsub.f32	s21, s21, s2
 80073aa:	ee73 3aa1 	vadd.f32	s7, s7, s3
 80073ae:	ee2a ca8a 	vmul.f32	s24, s21, s20
 80073b2:	ee69 ba07 	vmul.f32	s23, s18, s14
 80073b6:	ee6a aa87 	vmul.f32	s21, s21, s14
 80073ba:	ee29 9a0a 	vmul.f32	s18, s18, s20
 80073be:	ee63 ca87 	vmul.f32	s25, s7, s14
 80073c2:	ee63 3a8a 	vmul.f32	s7, s7, s20
 80073c6:	ee28 aa8a 	vmul.f32	s20, s17, s20
 80073ca:	ee68 8a87 	vmul.f32	s17, s17, s14
 80073ce:	ee73 3aea 	vsub.f32	s7, s7, s21
 80073d2:	ee78 8a89 	vadd.f32	s17, s17, s18
 80073d6:	ee3c 7a2c 	vadd.f32	s14, s24, s25
 80073da:	ee3b aaca 	vsub.f32	s20, s23, s20
 80073de:	ee34 4a67 	vsub.f32	s8, s8, s15
 80073e2:	ee76 6acb 	vsub.f32	s13, s13, s22
 80073e6:	ee36 6a48 	vsub.f32	s12, s12, s16
 80073ea:	ee74 4ae0 	vsub.f32	s9, s9, s1
 80073ee:	ed00 7a02 	vstr	s14, [r0, #-8]
 80073f2:	ed40 3a01 	vstr	s7, [r0, #-4]
 80073f6:	edc1 8a01 	vstr	s17, [r1, #4]
 80073fa:	ed81 aa02 	vstr	s20, [r1, #8]
 80073fe:	ed59 3a04 	vldr	s7, [r9, #-16]
 8007402:	ee36 7ae9 	vsub.f32	s14, s13, s19
 8007406:	ee74 4ac5 	vsub.f32	s9, s9, s10
 800740a:	ed59 6a03 	vldr	s13, [r9, #-12]
 800740e:	ee34 4a61 	vsub.f32	s8, s8, s3
 8007412:	ee36 6a41 	vsub.f32	s12, s12, s2
 8007416:	ee67 8a63 	vnmul.f32	s17, s14, s7
 800741a:	ee66 9a26 	vmul.f32	s19, s12, s13
 800741e:	ee24 9a23 	vmul.f32	s18, s8, s7
 8007422:	ee26 6a23 	vmul.f32	s12, s12, s7
 8007426:	ee24 4a26 	vmul.f32	s8, s8, s13
 800742a:	ee27 7a26 	vmul.f32	s14, s14, s13
 800742e:	ee64 6aa6 	vmul.f32	s13, s9, s13
 8007432:	ee64 4aa3 	vmul.f32	s9, s9, s7
 8007436:	ee36 6a44 	vsub.f32	s12, s12, s8
 800743a:	ee37 7a64 	vsub.f32	s14, s14, s9
 800743e:	ee38 4ae6 	vsub.f32	s8, s17, s13
 8007442:	ee79 3a29 	vadd.f32	s7, s18, s19
 8007446:	ee75 6a60 	vsub.f32	s13, s10, s1
 800744a:	ee75 5ac8 	vsub.f32	s11, s11, s16
 800744e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8007452:	ed45 3a02 	vstr	s7, [r5, #-8]
 8007456:	ed05 6a01 	vstr	s12, [r5, #-4]
 800745a:	ed84 7a01 	vstr	s14, [r4, #4]
 800745e:	ed84 4a02 	vstr	s8, [r4, #8]
 8007462:	ee35 6a81 	vadd.f32	s12, s11, s2
 8007466:	ee36 7ac2 	vsub.f32	s14, s13, s4
 800746a:	ed58 5a06 	vldr	s11, [r8, #-24]	; 0xffffffe8
 800746e:	ed58 6a05 	vldr	s13, [r8, #-20]	; 0xffffffec
 8007472:	ee33 3a62 	vsub.f32	s6, s6, s5
 8007476:	ee77 7ae1 	vsub.f32	s15, s15, s3
 800747a:	ee67 2a26 	vmul.f32	s5, s14, s13
 800747e:	ee67 4aa6 	vmul.f32	s9, s15, s13
 8007482:	ee26 5a25 	vmul.f32	s10, s12, s11
 8007486:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800748a:	ee26 6a26 	vmul.f32	s12, s12, s13
 800748e:	ee27 7a25 	vmul.f32	s14, s14, s11
 8007492:	ee63 6a26 	vmul.f32	s13, s6, s13
 8007496:	ee23 3a25 	vmul.f32	s6, s6, s11
 800749a:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800749e:	ee75 5a24 	vadd.f32	s11, s10, s9
 80074a2:	ee32 3ac3 	vsub.f32	s6, s5, s6
 80074a6:	ee36 7a87 	vadd.f32	s14, s13, s14
 80074aa:	f1bb 0b01 	subs.w	fp, fp, #1
 80074ae:	ed42 5a02 	vstr	s11, [r2, #-8]
 80074b2:	ed42 7a01 	vstr	s15, [r2, #-4]
 80074b6:	f10e 0e08 	add.w	lr, lr, #8
 80074ba:	ed83 3a02 	vstr	s6, [r3, #8]
 80074be:	ed83 7a01 	vstr	s14, [r3, #4]
 80074c2:	f1ac 0c08 	sub.w	ip, ip, #8
 80074c6:	f10a 0a08 	add.w	sl, sl, #8
 80074ca:	f100 0008 	add.w	r0, r0, #8
 80074ce:	f1a1 0108 	sub.w	r1, r1, #8
 80074d2:	f109 0910 	add.w	r9, r9, #16
 80074d6:	f105 0508 	add.w	r5, r5, #8
 80074da:	f1a4 0408 	sub.w	r4, r4, #8
 80074de:	f108 0818 	add.w	r8, r8, #24
 80074e2:	f102 0208 	add.w	r2, r2, #8
 80074e6:	f1a3 0308 	sub.w	r3, r3, #8
 80074ea:	f47f aefc 	bne.w	80072e6 <arm_cfft_radix8by4_f32+0x12e>
 80074ee:	9907      	ldr	r1, [sp, #28]
 80074f0:	9800      	ldr	r0, [sp, #0]
 80074f2:	00cb      	lsls	r3, r1, #3
 80074f4:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 80074f8:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 80074fc:	9100      	str	r1, [sp, #0]
 80074fe:	9904      	ldr	r1, [sp, #16]
 8007500:	4419      	add	r1, r3
 8007502:	9104      	str	r1, [sp, #16]
 8007504:	9903      	ldr	r1, [sp, #12]
 8007506:	4419      	add	r1, r3
 8007508:	9103      	str	r1, [sp, #12]
 800750a:	9906      	ldr	r1, [sp, #24]
 800750c:	4419      	add	r1, r3
 800750e:	9106      	str	r1, [sp, #24]
 8007510:	9905      	ldr	r1, [sp, #20]
 8007512:	441f      	add	r7, r3
 8007514:	4419      	add	r1, r3
 8007516:	9b02      	ldr	r3, [sp, #8]
 8007518:	9105      	str	r1, [sp, #20]
 800751a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800751e:	9302      	str	r3, [sp, #8]
 8007520:	9904      	ldr	r1, [sp, #16]
 8007522:	9805      	ldr	r0, [sp, #20]
 8007524:	ed91 4a00 	vldr	s8, [r1]
 8007528:	edd0 6a00 	vldr	s13, [r0]
 800752c:	9b06      	ldr	r3, [sp, #24]
 800752e:	ed97 3a00 	vldr	s6, [r7]
 8007532:	edd3 7a00 	vldr	s15, [r3]
 8007536:	edd0 4a01 	vldr	s9, [r0, #4]
 800753a:	edd1 3a01 	vldr	s7, [r1, #4]
 800753e:	ed97 2a01 	vldr	s4, [r7, #4]
 8007542:	ed93 7a01 	vldr	s14, [r3, #4]
 8007546:	9a03      	ldr	r2, [sp, #12]
 8007548:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 800754c:	ee34 6a26 	vadd.f32	s12, s8, s13
 8007550:	ee73 5aa4 	vadd.f32	s11, s7, s9
 8007554:	ee37 5a86 	vadd.f32	s10, s15, s12
 8007558:	ee73 3ae4 	vsub.f32	s7, s7, s9
 800755c:	ee35 5a03 	vadd.f32	s10, s10, s6
 8007560:	ee74 6a66 	vsub.f32	s13, s8, s13
 8007564:	ed81 5a00 	vstr	s10, [r1]
 8007568:	ed93 5a01 	vldr	s10, [r3, #4]
 800756c:	edd7 4a01 	vldr	s9, [r7, #4]
 8007570:	ee35 5a85 	vadd.f32	s10, s11, s10
 8007574:	ee37 4a26 	vadd.f32	s8, s14, s13
 8007578:	ee35 5a24 	vadd.f32	s10, s10, s9
 800757c:	ee73 4ae7 	vsub.f32	s9, s7, s15
 8007580:	ed81 5a01 	vstr	s10, [r1, #4]
 8007584:	edd2 1a00 	vldr	s3, [r2]
 8007588:	edd2 2a01 	vldr	s5, [r2, #4]
 800758c:	ee34 5a83 	vadd.f32	s10, s9, s6
 8007590:	ee34 4a42 	vsub.f32	s8, s8, s4
 8007594:	ee36 6a67 	vsub.f32	s12, s12, s15
 8007598:	ee64 4a21 	vmul.f32	s9, s8, s3
 800759c:	ee24 4a22 	vmul.f32	s8, s8, s5
 80075a0:	ee65 2a22 	vmul.f32	s5, s10, s5
 80075a4:	ee25 5a21 	vmul.f32	s10, s10, s3
 80075a8:	ee74 2aa2 	vadd.f32	s5, s9, s5
 80075ac:	ee35 5a44 	vsub.f32	s10, s10, s8
 80075b0:	edc3 2a00 	vstr	s5, [r3]
 80075b4:	ed83 5a01 	vstr	s10, [r3, #4]
 80075b8:	ee75 5ac7 	vsub.f32	s11, s11, s14
 80075bc:	9b00      	ldr	r3, [sp, #0]
 80075be:	ee36 6a43 	vsub.f32	s12, s12, s6
 80075c2:	ed93 4a01 	vldr	s8, [r3, #4]
 80075c6:	ed93 5a00 	vldr	s10, [r3]
 80075ca:	9b02      	ldr	r3, [sp, #8]
 80075cc:	ee75 5ac2 	vsub.f32	s11, s11, s4
 80075d0:	ee66 4a05 	vmul.f32	s9, s12, s10
 80075d4:	ee25 5a85 	vmul.f32	s10, s11, s10
 80075d8:	ee26 6a04 	vmul.f32	s12, s12, s8
 80075dc:	ee65 5a84 	vmul.f32	s11, s11, s8
 80075e0:	ee35 6a46 	vsub.f32	s12, s10, s12
 80075e4:	ee74 5aa5 	vadd.f32	s11, s9, s11
 80075e8:	ee77 7aa3 	vadd.f32	s15, s15, s7
 80075ec:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80075f0:	ed80 6a01 	vstr	s12, [r0, #4]
 80075f4:	edc0 5a00 	vstr	s11, [r0]
 80075f8:	edd3 5a01 	vldr	s11, [r3, #4]
 80075fc:	edd3 6a00 	vldr	s13, [r3]
 8007600:	ee37 7a02 	vadd.f32	s14, s14, s4
 8007604:	ee77 7ac3 	vsub.f32	s15, s15, s6
 8007608:	ee27 6a26 	vmul.f32	s12, s14, s13
 800760c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8007610:	ee27 7a25 	vmul.f32	s14, s14, s11
 8007614:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8007618:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800761c:	ee76 7a27 	vadd.f32	s15, s12, s15
 8007620:	ed87 7a01 	vstr	s14, [r7, #4]
 8007624:	edc7 7a00 	vstr	s15, [r7]
 8007628:	e9dd 500a 	ldrd	r5, r0, [sp, #40]	; 0x28
 800762c:	4621      	mov	r1, r4
 800762e:	686a      	ldr	r2, [r5, #4]
 8007630:	2304      	movs	r3, #4
 8007632:	f000 f8af 	bl	8007794 <arm_radix8_butterfly_f32>
 8007636:	4630      	mov	r0, r6
 8007638:	4621      	mov	r1, r4
 800763a:	686a      	ldr	r2, [r5, #4]
 800763c:	2304      	movs	r3, #4
 800763e:	f000 f8a9 	bl	8007794 <arm_radix8_butterfly_f32>
 8007642:	9808      	ldr	r0, [sp, #32]
 8007644:	686a      	ldr	r2, [r5, #4]
 8007646:	4621      	mov	r1, r4
 8007648:	2304      	movs	r3, #4
 800764a:	f000 f8a3 	bl	8007794 <arm_radix8_butterfly_f32>
 800764e:	686a      	ldr	r2, [r5, #4]
 8007650:	9801      	ldr	r0, [sp, #4]
 8007652:	4621      	mov	r1, r4
 8007654:	2304      	movs	r3, #4
 8007656:	b00d      	add	sp, #52	; 0x34
 8007658:	ecbd 8b0a 	vpop	{d8-d12}
 800765c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007660:	f000 b898 	b.w	8007794 <arm_radix8_butterfly_f32>

08007664 <arm_cfft_f32>:
 8007664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007668:	2a01      	cmp	r2, #1
 800766a:	4606      	mov	r6, r0
 800766c:	4617      	mov	r7, r2
 800766e:	460c      	mov	r4, r1
 8007670:	4698      	mov	r8, r3
 8007672:	8805      	ldrh	r5, [r0, #0]
 8007674:	d056      	beq.n	8007724 <arm_cfft_f32+0xc0>
 8007676:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800767a:	d063      	beq.n	8007744 <arm_cfft_f32+0xe0>
 800767c:	d916      	bls.n	80076ac <arm_cfft_f32+0x48>
 800767e:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8007682:	d01a      	beq.n	80076ba <arm_cfft_f32+0x56>
 8007684:	d947      	bls.n	8007716 <arm_cfft_f32+0xb2>
 8007686:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 800768a:	d05b      	beq.n	8007744 <arm_cfft_f32+0xe0>
 800768c:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 8007690:	d105      	bne.n	800769e <arm_cfft_f32+0x3a>
 8007692:	2301      	movs	r3, #1
 8007694:	6872      	ldr	r2, [r6, #4]
 8007696:	4629      	mov	r1, r5
 8007698:	4620      	mov	r0, r4
 800769a:	f000 f87b 	bl	8007794 <arm_radix8_butterfly_f32>
 800769e:	f1b8 0f00 	cmp.w	r8, #0
 80076a2:	d111      	bne.n	80076c8 <arm_cfft_f32+0x64>
 80076a4:	2f01      	cmp	r7, #1
 80076a6:	d016      	beq.n	80076d6 <arm_cfft_f32+0x72>
 80076a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076ac:	2d20      	cmp	r5, #32
 80076ae:	d049      	beq.n	8007744 <arm_cfft_f32+0xe0>
 80076b0:	d935      	bls.n	800771e <arm_cfft_f32+0xba>
 80076b2:	2d40      	cmp	r5, #64	; 0x40
 80076b4:	d0ed      	beq.n	8007692 <arm_cfft_f32+0x2e>
 80076b6:	2d80      	cmp	r5, #128	; 0x80
 80076b8:	d1f1      	bne.n	800769e <arm_cfft_f32+0x3a>
 80076ba:	4621      	mov	r1, r4
 80076bc:	4630      	mov	r0, r6
 80076be:	f7ff fcab 	bl	8007018 <arm_cfft_radix8by2_f32>
 80076c2:	f1b8 0f00 	cmp.w	r8, #0
 80076c6:	d0ed      	beq.n	80076a4 <arm_cfft_f32+0x40>
 80076c8:	68b2      	ldr	r2, [r6, #8]
 80076ca:	89b1      	ldrh	r1, [r6, #12]
 80076cc:	4620      	mov	r0, r4
 80076ce:	f000 f841 	bl	8007754 <arm_bitreversal_32>
 80076d2:	2f01      	cmp	r7, #1
 80076d4:	d1e8      	bne.n	80076a8 <arm_cfft_f32+0x44>
 80076d6:	ee07 5a90 	vmov	s15, r5
 80076da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80076e2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80076e6:	2d00      	cmp	r5, #0
 80076e8:	d0de      	beq.n	80076a8 <arm_cfft_f32+0x44>
 80076ea:	f104 0108 	add.w	r1, r4, #8
 80076ee:	2300      	movs	r3, #0
 80076f0:	3301      	adds	r3, #1
 80076f2:	429d      	cmp	r5, r3
 80076f4:	f101 0108 	add.w	r1, r1, #8
 80076f8:	ed11 7a04 	vldr	s14, [r1, #-16]
 80076fc:	ed51 7a03 	vldr	s15, [r1, #-12]
 8007700:	ee27 7a26 	vmul.f32	s14, s14, s13
 8007704:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8007708:	ed01 7a04 	vstr	s14, [r1, #-16]
 800770c:	ed41 7a03 	vstr	s15, [r1, #-12]
 8007710:	d1ee      	bne.n	80076f0 <arm_cfft_f32+0x8c>
 8007712:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007716:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 800771a:	d0ba      	beq.n	8007692 <arm_cfft_f32+0x2e>
 800771c:	e7bf      	b.n	800769e <arm_cfft_f32+0x3a>
 800771e:	2d10      	cmp	r5, #16
 8007720:	d0cb      	beq.n	80076ba <arm_cfft_f32+0x56>
 8007722:	e7bc      	b.n	800769e <arm_cfft_f32+0x3a>
 8007724:	b19d      	cbz	r5, 800774e <arm_cfft_f32+0xea>
 8007726:	f101 030c 	add.w	r3, r1, #12
 800772a:	2200      	movs	r2, #0
 800772c:	ed53 7a02 	vldr	s15, [r3, #-8]
 8007730:	3201      	adds	r2, #1
 8007732:	eef1 7a67 	vneg.f32	s15, s15
 8007736:	4295      	cmp	r5, r2
 8007738:	ed43 7a02 	vstr	s15, [r3, #-8]
 800773c:	f103 0308 	add.w	r3, r3, #8
 8007740:	d1f4      	bne.n	800772c <arm_cfft_f32+0xc8>
 8007742:	e798      	b.n	8007676 <arm_cfft_f32+0x12>
 8007744:	4621      	mov	r1, r4
 8007746:	4630      	mov	r0, r6
 8007748:	f7ff fd36 	bl	80071b8 <arm_cfft_radix8by4_f32>
 800774c:	e7a7      	b.n	800769e <arm_cfft_f32+0x3a>
 800774e:	2b00      	cmp	r3, #0
 8007750:	d0aa      	beq.n	80076a8 <arm_cfft_f32+0x44>
 8007752:	e7b9      	b.n	80076c8 <arm_cfft_f32+0x64>

08007754 <arm_bitreversal_32>:
 8007754:	b1e9      	cbz	r1, 8007792 <arm_bitreversal_32+0x3e>
 8007756:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007758:	2500      	movs	r5, #0
 800775a:	f102 0e02 	add.w	lr, r2, #2
 800775e:	f83e 4015 	ldrh.w	r4, [lr, r5, lsl #1]
 8007762:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 8007766:	08a4      	lsrs	r4, r4, #2
 8007768:	089b      	lsrs	r3, r3, #2
 800776a:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
 800776e:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
 8007772:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
 8007776:	00a6      	lsls	r6, r4, #2
 8007778:	009b      	lsls	r3, r3, #2
 800777a:	f840 c024 	str.w	ip, [r0, r4, lsl #2]
 800777e:	3304      	adds	r3, #4
 8007780:	1d34      	adds	r4, r6, #4
 8007782:	3502      	adds	r5, #2
 8007784:	58c6      	ldr	r6, [r0, r3]
 8007786:	5907      	ldr	r7, [r0, r4]
 8007788:	50c7      	str	r7, [r0, r3]
 800778a:	428d      	cmp	r5, r1
 800778c:	5106      	str	r6, [r0, r4]
 800778e:	d3e6      	bcc.n	800775e <arm_bitreversal_32+0xa>
 8007790:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007792:	4770      	bx	lr

08007794 <arm_radix8_butterfly_f32>:
 8007794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007798:	ed2d 8b10 	vpush	{d8-d15}
 800779c:	b095      	sub	sp, #84	; 0x54
 800779e:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 80077a2:	4603      	mov	r3, r0
 80077a4:	3304      	adds	r3, #4
 80077a6:	ed9f bab9 	vldr	s22, [pc, #740]	; 8007a8c <arm_radix8_butterfly_f32+0x2f8>
 80077aa:	9012      	str	r0, [sp, #72]	; 0x48
 80077ac:	468b      	mov	fp, r1
 80077ae:	9313      	str	r3, [sp, #76]	; 0x4c
 80077b0:	4689      	mov	r9, r1
 80077b2:	ea4f 06db 	mov.w	r6, fp, lsr #3
 80077b6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80077b8:	960f      	str	r6, [sp, #60]	; 0x3c
 80077ba:	ea4f 1846 	mov.w	r8, r6, lsl #5
 80077be:	ea4f 0ec6 	mov.w	lr, r6, lsl #3
 80077c2:	eb03 0508 	add.w	r5, r3, r8
 80077c6:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 80077ca:	eb05 040e 	add.w	r4, r5, lr
 80077ce:	0137      	lsls	r7, r6, #4
 80077d0:	eba6 030a 	sub.w	r3, r6, sl
 80077d4:	eb04 000e 	add.w	r0, r4, lr
 80077d8:	44b2      	add	sl, r6
 80077da:	1d3a      	adds	r2, r7, #4
 80077dc:	9702      	str	r7, [sp, #8]
 80077de:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 80077e2:	ea4f 07ca 	mov.w	r7, sl, lsl #3
 80077e6:	ebae 0c06 	sub.w	ip, lr, r6
 80077ea:	9703      	str	r7, [sp, #12]
 80077ec:	eb03 0708 	add.w	r7, r3, r8
 80077f0:	9701      	str	r7, [sp, #4]
 80077f2:	ea4f 07cc 	mov.w	r7, ip, lsl #3
 80077f6:	9706      	str	r7, [sp, #24]
 80077f8:	9f12      	ldr	r7, [sp, #72]	; 0x48
 80077fa:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80077fe:	f10e 0104 	add.w	r1, lr, #4
 8007802:	4439      	add	r1, r7
 8007804:	443a      	add	r2, r7
 8007806:	0137      	lsls	r7, r6, #4
 8007808:	00f6      	lsls	r6, r6, #3
 800780a:	9704      	str	r7, [sp, #16]
 800780c:	9605      	str	r6, [sp, #20]
 800780e:	9f01      	ldr	r7, [sp, #4]
 8007810:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8007812:	ea4f 0acb 	mov.w	sl, fp, lsl #3
 8007816:	f04f 0c00 	mov.w	ip, #0
 800781a:	edd4 6a00 	vldr	s13, [r4]
 800781e:	edd7 1a00 	vldr	s3, [r7]
 8007822:	ed16 aa01 	vldr	s20, [r6, #-4]
 8007826:	edd5 5a00 	vldr	s11, [r5]
 800782a:	ed52 9a01 	vldr	s19, [r2, #-4]
 800782e:	ed90 6a00 	vldr	s12, [r0]
 8007832:	ed51 7a01 	vldr	s15, [r1, #-4]
 8007836:	ed93 3a00 	vldr	s6, [r3]
 800783a:	ee39 0a86 	vadd.f32	s0, s19, s12
 800783e:	ee33 2a21 	vadd.f32	s4, s6, s3
 8007842:	ee37 5aa6 	vadd.f32	s10, s15, s13
 8007846:	ee7a 4a25 	vadd.f32	s9, s20, s11
 800784a:	ee35 7a02 	vadd.f32	s14, s10, s4
 800784e:	ee34 4a80 	vadd.f32	s8, s9, s0
 8007852:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007856:	ee74 6a07 	vadd.f32	s13, s8, s14
 800785a:	ee34 4a47 	vsub.f32	s8, s8, s14
 800785e:	ed46 6a01 	vstr	s13, [r6, #-4]
 8007862:	ed85 4a00 	vstr	s8, [r5]
 8007866:	edd1 6a00 	vldr	s13, [r1]
 800786a:	ed94 9a01 	vldr	s18, [r4, #4]
 800786e:	edd3 2a01 	vldr	s5, [r3, #4]
 8007872:	edd7 8a01 	vldr	s17, [r7, #4]
 8007876:	edd6 0a00 	vldr	s1, [r6]
 800787a:	edd5 3a01 	vldr	s7, [r5, #4]
 800787e:	ed90 8a01 	vldr	s16, [r0, #4]
 8007882:	ed92 7a00 	vldr	s14, [r2]
 8007886:	ee33 3a61 	vsub.f32	s6, s6, s3
 800788a:	ee36 4ac9 	vsub.f32	s8, s13, s18
 800788e:	ee72 aae8 	vsub.f32	s21, s5, s17
 8007892:	ee77 1ac3 	vsub.f32	s3, s15, s6
 8007896:	ee34 1a2a 	vadd.f32	s2, s8, s21
 800789a:	ee77 7a83 	vadd.f32	s15, s15, s6
 800789e:	ee34 4a6a 	vsub.f32	s8, s8, s21
 80078a2:	ee30 3aa3 	vadd.f32	s6, s1, s7
 80078a6:	ee39 6ac6 	vsub.f32	s12, s19, s12
 80078aa:	ee70 3ae3 	vsub.f32	s7, s1, s7
 80078ae:	ee72 2aa8 	vadd.f32	s5, s5, s17
 80078b2:	ee77 0a08 	vadd.f32	s1, s14, s16
 80078b6:	ee21 1a0b 	vmul.f32	s2, s2, s22
 80078ba:	ee37 7a48 	vsub.f32	s14, s14, s16
 80078be:	ee61 1a8b 	vmul.f32	s3, s3, s22
 80078c2:	ee7a 5a65 	vsub.f32	s11, s20, s11
 80078c6:	ee76 6a89 	vadd.f32	s13, s13, s18
 80078ca:	ee24 4a0b 	vmul.f32	s8, s8, s22
 80078ce:	ee67 7a8b 	vmul.f32	s15, s15, s22
 80078d2:	ee74 4ac0 	vsub.f32	s9, s9, s0
 80078d6:	ee35 5a42 	vsub.f32	s10, s10, s4
 80078da:	ee36 0aa2 	vadd.f32	s0, s13, s5
 80078de:	ee33 2a20 	vadd.f32	s4, s6, s1
 80078e2:	ee76 6ae2 	vsub.f32	s13, s13, s5
 80078e6:	ee33 3a60 	vsub.f32	s6, s6, s1
 80078ea:	ee75 2aa1 	vadd.f32	s5, s11, s3
 80078ee:	ee77 0a01 	vadd.f32	s1, s14, s2
 80078f2:	ee75 5ae1 	vsub.f32	s11, s11, s3
 80078f6:	ee37 7a41 	vsub.f32	s14, s14, s2
 80078fa:	ee73 1a84 	vadd.f32	s3, s7, s8
 80078fe:	ee33 4ac4 	vsub.f32	s8, s7, s8
 8007902:	ee76 3a27 	vadd.f32	s7, s12, s15
 8007906:	ee76 7a67 	vsub.f32	s15, s12, s15
 800790a:	ee32 8a00 	vadd.f32	s16, s4, s0
 800790e:	ee33 1a45 	vsub.f32	s2, s6, s10
 8007912:	ee32 2a40 	vsub.f32	s4, s4, s0
 8007916:	ee35 5a03 	vadd.f32	s10, s10, s6
 800791a:	ee34 0aa6 	vadd.f32	s0, s9, s13
 800791e:	ee32 3aa0 	vadd.f32	s6, s5, s1
 8007922:	ee74 6ae6 	vsub.f32	s13, s9, s13
 8007926:	ee34 6a67 	vsub.f32	s12, s8, s15
 800792a:	ee75 4a87 	vadd.f32	s9, s11, s14
 800792e:	ee72 2ae0 	vsub.f32	s5, s5, s1
 8007932:	ee35 7ac7 	vsub.f32	s14, s11, s14
 8007936:	ee77 7a84 	vadd.f32	s15, s15, s8
 800793a:	ee71 5ae3 	vsub.f32	s11, s3, s7
 800793e:	44dc      	add	ip, fp
 8007940:	ee73 3aa1 	vadd.f32	s7, s7, s3
 8007944:	45e1      	cmp	r9, ip
 8007946:	ed86 8a00 	vstr	s16, [r6]
 800794a:	ed85 2a01 	vstr	s4, [r5, #4]
 800794e:	4456      	add	r6, sl
 8007950:	ed02 0a01 	vstr	s0, [r2, #-4]
 8007954:	4455      	add	r5, sl
 8007956:	edc0 6a00 	vstr	s13, [r0]
 800795a:	ed82 1a00 	vstr	s2, [r2]
 800795e:	ed80 5a01 	vstr	s10, [r0, #4]
 8007962:	4452      	add	r2, sl
 8007964:	ed01 3a01 	vstr	s6, [r1, #-4]
 8007968:	4450      	add	r0, sl
 800796a:	edc7 2a00 	vstr	s5, [r7]
 800796e:	edc4 4a00 	vstr	s9, [r4]
 8007972:	ed83 7a00 	vstr	s14, [r3]
 8007976:	edc1 5a00 	vstr	s11, [r1]
 800797a:	edc7 3a01 	vstr	s7, [r7, #4]
 800797e:	4451      	add	r1, sl
 8007980:	ed84 6a01 	vstr	s12, [r4, #4]
 8007984:	4457      	add	r7, sl
 8007986:	edc3 7a01 	vstr	s15, [r3, #4]
 800798a:	4454      	add	r4, sl
 800798c:	4453      	add	r3, sl
 800798e:	f63f af44 	bhi.w	800781a <arm_radix8_butterfly_f32+0x86>
 8007992:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007994:	2b07      	cmp	r3, #7
 8007996:	f240 81b7 	bls.w	8007d08 <arm_radix8_butterfly_f32+0x574>
 800799a:	9b06      	ldr	r3, [sp, #24]
 800799c:	9903      	ldr	r1, [sp, #12]
 800799e:	9812      	ldr	r0, [sp, #72]	; 0x48
 80079a0:	9e05      	ldr	r6, [sp, #20]
 80079a2:	9a04      	ldr	r2, [sp, #16]
 80079a4:	f103 0c08 	add.w	ip, r3, #8
 80079a8:	9b02      	ldr	r3, [sp, #8]
 80079aa:	3108      	adds	r1, #8
 80079ac:	f108 0808 	add.w	r8, r8, #8
 80079b0:	1841      	adds	r1, r0, r1
 80079b2:	3608      	adds	r6, #8
 80079b4:	330c      	adds	r3, #12
 80079b6:	4604      	mov	r4, r0
 80079b8:	4444      	add	r4, r8
 80079ba:	18c3      	adds	r3, r0, r3
 80079bc:	9109      	str	r1, [sp, #36]	; 0x24
 80079be:	1981      	adds	r1, r0, r6
 80079c0:	f10e 0e08 	add.w	lr, lr, #8
 80079c4:	3208      	adds	r2, #8
 80079c6:	940b      	str	r4, [sp, #44]	; 0x2c
 80079c8:	9107      	str	r1, [sp, #28]
 80079ca:	4604      	mov	r4, r0
 80079cc:	4601      	mov	r1, r0
 80079ce:	9304      	str	r3, [sp, #16]
 80079d0:	f100 030c 	add.w	r3, r0, #12
 80079d4:	4474      	add	r4, lr
 80079d6:	f04f 0801 	mov.w	r8, #1
 80079da:	1882      	adds	r2, r0, r2
 80079dc:	4461      	add	r1, ip
 80079de:	9305      	str	r3, [sp, #20]
 80079e0:	464b      	mov	r3, r9
 80079e2:	940a      	str	r4, [sp, #40]	; 0x28
 80079e4:	46c1      	mov	r9, r8
 80079e6:	9208      	str	r2, [sp, #32]
 80079e8:	46d8      	mov	r8, fp
 80079ea:	9106      	str	r1, [sp, #24]
 80079ec:	f04f 0e00 	mov.w	lr, #0
 80079f0:	469b      	mov	fp, r3
 80079f2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80079f4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80079f6:	449e      	add	lr, r3
 80079f8:	ea4f 03ce 	mov.w	r3, lr, lsl #3
 80079fc:	441a      	add	r2, r3
 80079fe:	920e      	str	r2, [sp, #56]	; 0x38
 8007a00:	441a      	add	r2, r3
 8007a02:	18d4      	adds	r4, r2, r3
 8007a04:	18e5      	adds	r5, r4, r3
 8007a06:	18ee      	adds	r6, r5, r3
 8007a08:	18f7      	adds	r7, r6, r3
 8007a0a:	eb07 0c03 	add.w	ip, r7, r3
 8007a0e:	920d      	str	r2, [sp, #52]	; 0x34
 8007a10:	ebae 028e 	sub.w	r2, lr, lr, lsl #2
 8007a14:	eb0c 1102 	add.w	r1, ip, r2, lsl #4
 8007a18:	910c      	str	r1, [sp, #48]	; 0x30
 8007a1a:	4419      	add	r1, r3
 8007a1c:	9103      	str	r1, [sp, #12]
 8007a1e:	4419      	add	r1, r3
 8007a20:	18ca      	adds	r2, r1, r3
 8007a22:	9202      	str	r2, [sp, #8]
 8007a24:	441a      	add	r2, r3
 8007a26:	18d0      	adds	r0, r2, r3
 8007a28:	ed92 ea01 	vldr	s28, [r2, #4]
 8007a2c:	9a02      	ldr	r2, [sp, #8]
 8007a2e:	edd4 7a00 	vldr	s15, [r4]
 8007a32:	edd2 da01 	vldr	s27, [r2, #4]
 8007a36:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007a38:	ed91 da01 	vldr	s26, [r1, #4]
 8007a3c:	ed92 ca01 	vldr	s24, [r2, #4]
 8007a40:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007a42:	9903      	ldr	r1, [sp, #12]
 8007a44:	edcd 7a03 	vstr	s15, [sp, #12]
 8007a48:	edd2 7a00 	vldr	s15, [r2]
 8007a4c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007a4e:	edcd 7a02 	vstr	s15, [sp, #8]
 8007a52:	edd2 7a00 	vldr	s15, [r2]
 8007a56:	edd0 ea01 	vldr	s29, [r0, #4]
 8007a5a:	edd1 ca01 	vldr	s25, [r1, #4]
 8007a5e:	eddc ba00 	vldr	s23, [ip]
 8007a62:	edd7 aa00 	vldr	s21, [r7]
 8007a66:	ed96 aa00 	vldr	s20, [r6]
 8007a6a:	edd5 9a00 	vldr	s19, [r5]
 8007a6e:	edcd 7a01 	vstr	s15, [sp, #4]
 8007a72:	4403      	add	r3, r0
 8007a74:	ed93 fa01 	vldr	s30, [r3, #4]
 8007a78:	e9dd 7604 	ldrd	r7, r6, [sp, #16]
 8007a7c:	e9dd 5406 	ldrd	r5, r4, [sp, #24]
 8007a80:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007a84:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007a88:	46cc      	mov	ip, r9
 8007a8a:	e001      	b.n	8007a90 <arm_radix8_butterfly_f32+0x2fc>
 8007a8c:	3f3504f3 	.word	0x3f3504f3
 8007a90:	ed91 6a00 	vldr	s12, [r1]
 8007a94:	ed93 5a00 	vldr	s10, [r3]
 8007a98:	edd0 fa00 	vldr	s31, [r0]
 8007a9c:	edd4 7a00 	vldr	s15, [r4]
 8007aa0:	ed95 7a00 	vldr	s14, [r5]
 8007aa4:	ed56 3a01 	vldr	s7, [r6, #-4]
 8007aa8:	ed17 3a01 	vldr	s6, [r7, #-4]
 8007aac:	ed92 2a00 	vldr	s4, [r2]
 8007ab0:	ed96 0a00 	vldr	s0, [r6]
 8007ab4:	ee33 8a85 	vadd.f32	s16, s7, s10
 8007ab8:	ee32 1a06 	vadd.f32	s2, s4, s12
 8007abc:	ee33 4a2f 	vadd.f32	s8, s6, s31
 8007ac0:	ee77 4a87 	vadd.f32	s9, s15, s14
 8007ac4:	ee78 1a04 	vadd.f32	s3, s16, s8
 8007ac8:	ee71 6a24 	vadd.f32	s13, s2, s9
 8007acc:	ee32 2a46 	vsub.f32	s4, s4, s12
 8007ad0:	ee31 6aa6 	vadd.f32	s12, s3, s13
 8007ad4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007ad8:	ed06 6a01 	vstr	s12, [r6, #-4]
 8007adc:	edd4 8a01 	vldr	s17, [r4, #4]
 8007ae0:	ed92 9a01 	vldr	s18, [r2, #4]
 8007ae4:	edd7 0a00 	vldr	s1, [r7]
 8007ae8:	edd1 2a01 	vldr	s5, [r1, #4]
 8007aec:	ed95 7a01 	vldr	s14, [r5, #4]
 8007af0:	ed93 6a01 	vldr	s12, [r3, #4]
 8007af4:	edd0 5a01 	vldr	s11, [r0, #4]
 8007af8:	ee73 3ac5 	vsub.f32	s7, s7, s10
 8007afc:	ee33 3a6f 	vsub.f32	s6, s6, s31
 8007b00:	ee39 5a62 	vsub.f32	s10, s18, s5
 8007b04:	ee78 fac7 	vsub.f32	s31, s17, s14
 8007b08:	ee38 4a44 	vsub.f32	s8, s16, s8
 8007b0c:	ee38 7a87 	vadd.f32	s14, s17, s14
 8007b10:	ee30 8aa5 	vadd.f32	s16, s1, s11
 8007b14:	ee79 2a22 	vadd.f32	s5, s18, s5
 8007b18:	ee32 9a27 	vadd.f32	s18, s4, s15
 8007b1c:	ee72 7a67 	vsub.f32	s15, s4, s15
 8007b20:	ee30 2a06 	vadd.f32	s4, s0, s12
 8007b24:	ee75 8a6f 	vsub.f32	s17, s10, s31
 8007b28:	ee71 4a64 	vsub.f32	s9, s2, s9
 8007b2c:	ee35 5a2f 	vadd.f32	s10, s10, s31
 8007b30:	ee32 1a08 	vadd.f32	s2, s4, s16
 8007b34:	ee72 fa87 	vadd.f32	s31, s5, s14
 8007b38:	ee32 2a48 	vsub.f32	s4, s4, s16
 8007b3c:	ee68 8a8b 	vmul.f32	s17, s17, s22
 8007b40:	ee25 5a0b 	vmul.f32	s10, s10, s22
 8007b44:	ee70 5ae5 	vsub.f32	s11, s1, s11
 8007b48:	ee72 2ac7 	vsub.f32	s5, s5, s14
 8007b4c:	ee71 6ae6 	vsub.f32	s13, s3, s13
 8007b50:	ee29 9a0b 	vmul.f32	s18, s18, s22
 8007b54:	ee71 1a6f 	vsub.f32	s3, s2, s31
 8007b58:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8007b5c:	ee30 6a46 	vsub.f32	s12, s0, s12
 8007b60:	ee74 0a22 	vadd.f32	s1, s8, s5
 8007b64:	ee36 0a28 	vadd.f32	s0, s12, s17
 8007b68:	ee74 2a62 	vsub.f32	s5, s8, s5
 8007b6c:	ee36 6a68 	vsub.f32	s12, s12, s17
 8007b70:	ee32 4a64 	vsub.f32	s8, s4, s9
 8007b74:	ee73 8a09 	vadd.f32	s17, s6, s18
 8007b78:	ee74 4a82 	vadd.f32	s9, s9, s4
 8007b7c:	ee33 9a49 	vsub.f32	s18, s6, s18
 8007b80:	ee2d 2aa1 	vmul.f32	s4, s27, s3
 8007b84:	ee35 3a85 	vadd.f32	s6, s11, s10
 8007b88:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8007b8c:	ee33 5aa7 	vadd.f32	s10, s7, s15
 8007b90:	ee73 7ae7 	vsub.f32	s15, s7, s15
 8007b94:	ee69 3aa6 	vmul.f32	s7, s19, s13
 8007b98:	ee30 7a68 	vsub.f32	s14, s0, s17
 8007b9c:	ee35 8a03 	vadd.f32	s16, s10, s6
 8007ba0:	ee38 0a80 	vadd.f32	s0, s17, s0
 8007ba4:	ee73 3a82 	vadd.f32	s7, s7, s4
 8007ba8:	ee69 8aa1 	vmul.f32	s17, s19, s3
 8007bac:	ed9d 2a01 	vldr	s4, [sp, #4]
 8007bb0:	eddd 1a02 	vldr	s3, [sp, #8]
 8007bb4:	ee35 5a43 	vsub.f32	s10, s10, s6
 8007bb8:	ee71 fa2f 	vadd.f32	s31, s2, s31
 8007bbc:	ee37 3aa5 	vadd.f32	s6, s15, s11
 8007bc0:	ee21 1aa0 	vmul.f32	s2, s3, s1
 8007bc4:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8007bc8:	ee6d 6aa6 	vmul.f32	s13, s27, s13
 8007bcc:	ee76 5a49 	vsub.f32	s11, s12, s18
 8007bd0:	ee6c 0aa0 	vmul.f32	s1, s25, s1
 8007bd4:	ee39 6a06 	vadd.f32	s12, s18, s12
 8007bd8:	ee2c 9a84 	vmul.f32	s18, s25, s8
 8007bdc:	ee21 4a84 	vmul.f32	s8, s3, s8
 8007be0:	ee6c 1a07 	vmul.f32	s3, s24, s14
 8007be4:	ee22 7a07 	vmul.f32	s14, s4, s14
 8007be8:	ee22 2a08 	vmul.f32	s4, s4, s16
 8007bec:	ee2c 8a08 	vmul.f32	s16, s24, s16
 8007bf0:	ee78 6ae6 	vsub.f32	s13, s17, s13
 8007bf4:	ee31 1a09 	vadd.f32	s2, s2, s18
 8007bf8:	ee6a 8aa2 	vmul.f32	s17, s21, s5
 8007bfc:	ee2e 9aa4 	vmul.f32	s18, s29, s9
 8007c00:	ee74 0a60 	vsub.f32	s1, s8, s1
 8007c04:	ee37 7a48 	vsub.f32	s14, s14, s16
 8007c08:	ee2f 4a00 	vmul.f32	s8, s30, s0
 8007c0c:	ee2b 8a85 	vmul.f32	s16, s23, s10
 8007c10:	ee72 1a21 	vadd.f32	s3, s4, s3
 8007c14:	ee6a 4aa4 	vmul.f32	s9, s21, s9
 8007c18:	ee38 2a89 	vadd.f32	s4, s17, s18
 8007c1c:	ee2f 5a05 	vmul.f32	s10, s30, s10
 8007c20:	ee38 8a04 	vadd.f32	s16, s16, s8
 8007c24:	ee2e 9a25 	vmul.f32	s18, s28, s11
 8007c28:	ee2a 4a25 	vmul.f32	s8, s20, s11
 8007c2c:	ee6e 2aa2 	vmul.f32	s5, s29, s5
 8007c30:	eddd 5a03 	vldr	s11, [sp, #12]
 8007c34:	edc6 fa00 	vstr	s31, [r6]
 8007c38:	ee2b 0a80 	vmul.f32	s0, s23, s0
 8007c3c:	ee74 2ae2 	vsub.f32	s5, s9, s5
 8007c40:	ee30 0a45 	vsub.f32	s0, s0, s10
 8007c44:	ee6a 4a03 	vmul.f32	s9, s20, s6
 8007c48:	ee65 8aa7 	vmul.f32	s17, s11, s15
 8007c4c:	ee2d 5a06 	vmul.f32	s10, s26, s12
 8007c50:	ee2e 3a03 	vmul.f32	s6, s28, s6
 8007c54:	ee6d 7a27 	vmul.f32	s15, s26, s15
 8007c58:	ee25 6a86 	vmul.f32	s12, s11, s12
 8007c5c:	ee74 4a89 	vadd.f32	s9, s9, s18
 8007c60:	ee34 3a43 	vsub.f32	s6, s8, s6
 8007c64:	ee78 8a85 	vadd.f32	s17, s17, s10
 8007c68:	ee36 6a67 	vsub.f32	s12, s12, s15
 8007c6c:	44c4      	add	ip, r8
 8007c6e:	45e3      	cmp	fp, ip
 8007c70:	edc3 3a00 	vstr	s7, [r3]
 8007c74:	edc3 6a01 	vstr	s13, [r3, #4]
 8007c78:	4456      	add	r6, sl
 8007c7a:	ed07 1a01 	vstr	s2, [r7, #-4]
 8007c7e:	edc7 0a00 	vstr	s1, [r7]
 8007c82:	4453      	add	r3, sl
 8007c84:	ed80 2a00 	vstr	s4, [r0]
 8007c88:	edc0 2a01 	vstr	s5, [r0, #4]
 8007c8c:	4457      	add	r7, sl
 8007c8e:	edc2 1a00 	vstr	s3, [r2]
 8007c92:	ed82 7a01 	vstr	s14, [r2, #4]
 8007c96:	4450      	add	r0, sl
 8007c98:	ed85 8a00 	vstr	s16, [r5]
 8007c9c:	ed85 0a01 	vstr	s0, [r5, #4]
 8007ca0:	4452      	add	r2, sl
 8007ca2:	edc1 4a00 	vstr	s9, [r1]
 8007ca6:	4455      	add	r5, sl
 8007ca8:	ed81 3a01 	vstr	s6, [r1, #4]
 8007cac:	edc4 8a00 	vstr	s17, [r4]
 8007cb0:	ed84 6a01 	vstr	s12, [r4, #4]
 8007cb4:	4451      	add	r1, sl
 8007cb6:	4454      	add	r4, sl
 8007cb8:	f63f aeea 	bhi.w	8007a90 <arm_radix8_butterfly_f32+0x2fc>
 8007cbc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007cbe:	3308      	adds	r3, #8
 8007cc0:	930b      	str	r3, [sp, #44]	; 0x2c
 8007cc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cc4:	3308      	adds	r3, #8
 8007cc6:	930a      	str	r3, [sp, #40]	; 0x28
 8007cc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cca:	3308      	adds	r3, #8
 8007ccc:	9309      	str	r3, [sp, #36]	; 0x24
 8007cce:	9b08      	ldr	r3, [sp, #32]
 8007cd0:	3308      	adds	r3, #8
 8007cd2:	9308      	str	r3, [sp, #32]
 8007cd4:	9b07      	ldr	r3, [sp, #28]
 8007cd6:	3308      	adds	r3, #8
 8007cd8:	9307      	str	r3, [sp, #28]
 8007cda:	9b06      	ldr	r3, [sp, #24]
 8007cdc:	3308      	adds	r3, #8
 8007cde:	9306      	str	r3, [sp, #24]
 8007ce0:	9b05      	ldr	r3, [sp, #20]
 8007ce2:	3308      	adds	r3, #8
 8007ce4:	9305      	str	r3, [sp, #20]
 8007ce6:	9b04      	ldr	r3, [sp, #16]
 8007ce8:	3308      	adds	r3, #8
 8007cea:	9304      	str	r3, [sp, #16]
 8007cec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007cee:	f109 0901 	add.w	r9, r9, #1
 8007cf2:	454b      	cmp	r3, r9
 8007cf4:	f47f ae7d 	bne.w	80079f2 <arm_radix8_butterfly_f32+0x25e>
 8007cf8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007cfa:	00db      	lsls	r3, r3, #3
 8007cfc:	b29b      	uxth	r3, r3
 8007cfe:	46d9      	mov	r9, fp
 8007d00:	9310      	str	r3, [sp, #64]	; 0x40
 8007d02:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
 8007d06:	e554      	b.n	80077b2 <arm_radix8_butterfly_f32+0x1e>
 8007d08:	b015      	add	sp, #84	; 0x54
 8007d0a:	ecbd 8b10 	vpop	{d8-d15}
 8007d0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d12:	bf00      	nop

08007d14 <malloc>:
 8007d14:	4b02      	ldr	r3, [pc, #8]	; (8007d20 <malloc+0xc>)
 8007d16:	4601      	mov	r1, r0
 8007d18:	6818      	ldr	r0, [r3, #0]
 8007d1a:	f000 b823 	b.w	8007d64 <_malloc_r>
 8007d1e:	bf00      	nop
 8007d20:	20000074 	.word	0x20000074

08007d24 <sbrk_aligned>:
 8007d24:	b570      	push	{r4, r5, r6, lr}
 8007d26:	4e0e      	ldr	r6, [pc, #56]	; (8007d60 <sbrk_aligned+0x3c>)
 8007d28:	460c      	mov	r4, r1
 8007d2a:	6831      	ldr	r1, [r6, #0]
 8007d2c:	4605      	mov	r5, r0
 8007d2e:	b911      	cbnz	r1, 8007d36 <sbrk_aligned+0x12>
 8007d30:	f000 ff40 	bl	8008bb4 <_sbrk_r>
 8007d34:	6030      	str	r0, [r6, #0]
 8007d36:	4621      	mov	r1, r4
 8007d38:	4628      	mov	r0, r5
 8007d3a:	f000 ff3b 	bl	8008bb4 <_sbrk_r>
 8007d3e:	1c43      	adds	r3, r0, #1
 8007d40:	d00a      	beq.n	8007d58 <sbrk_aligned+0x34>
 8007d42:	1cc4      	adds	r4, r0, #3
 8007d44:	f024 0403 	bic.w	r4, r4, #3
 8007d48:	42a0      	cmp	r0, r4
 8007d4a:	d007      	beq.n	8007d5c <sbrk_aligned+0x38>
 8007d4c:	1a21      	subs	r1, r4, r0
 8007d4e:	4628      	mov	r0, r5
 8007d50:	f000 ff30 	bl	8008bb4 <_sbrk_r>
 8007d54:	3001      	adds	r0, #1
 8007d56:	d101      	bne.n	8007d5c <sbrk_aligned+0x38>
 8007d58:	f04f 34ff 	mov.w	r4, #4294967295
 8007d5c:	4620      	mov	r0, r4
 8007d5e:	bd70      	pop	{r4, r5, r6, pc}
 8007d60:	20050914 	.word	0x20050914

08007d64 <_malloc_r>:
 8007d64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d68:	1ccd      	adds	r5, r1, #3
 8007d6a:	f025 0503 	bic.w	r5, r5, #3
 8007d6e:	3508      	adds	r5, #8
 8007d70:	2d0c      	cmp	r5, #12
 8007d72:	bf38      	it	cc
 8007d74:	250c      	movcc	r5, #12
 8007d76:	2d00      	cmp	r5, #0
 8007d78:	4607      	mov	r7, r0
 8007d7a:	db01      	blt.n	8007d80 <_malloc_r+0x1c>
 8007d7c:	42a9      	cmp	r1, r5
 8007d7e:	d905      	bls.n	8007d8c <_malloc_r+0x28>
 8007d80:	230c      	movs	r3, #12
 8007d82:	603b      	str	r3, [r7, #0]
 8007d84:	2600      	movs	r6, #0
 8007d86:	4630      	mov	r0, r6
 8007d88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d8c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007e60 <_malloc_r+0xfc>
 8007d90:	f000 f868 	bl	8007e64 <__malloc_lock>
 8007d94:	f8d8 3000 	ldr.w	r3, [r8]
 8007d98:	461c      	mov	r4, r3
 8007d9a:	bb5c      	cbnz	r4, 8007df4 <_malloc_r+0x90>
 8007d9c:	4629      	mov	r1, r5
 8007d9e:	4638      	mov	r0, r7
 8007da0:	f7ff ffc0 	bl	8007d24 <sbrk_aligned>
 8007da4:	1c43      	adds	r3, r0, #1
 8007da6:	4604      	mov	r4, r0
 8007da8:	d155      	bne.n	8007e56 <_malloc_r+0xf2>
 8007daa:	f8d8 4000 	ldr.w	r4, [r8]
 8007dae:	4626      	mov	r6, r4
 8007db0:	2e00      	cmp	r6, #0
 8007db2:	d145      	bne.n	8007e40 <_malloc_r+0xdc>
 8007db4:	2c00      	cmp	r4, #0
 8007db6:	d048      	beq.n	8007e4a <_malloc_r+0xe6>
 8007db8:	6823      	ldr	r3, [r4, #0]
 8007dba:	4631      	mov	r1, r6
 8007dbc:	4638      	mov	r0, r7
 8007dbe:	eb04 0903 	add.w	r9, r4, r3
 8007dc2:	f000 fef7 	bl	8008bb4 <_sbrk_r>
 8007dc6:	4581      	cmp	r9, r0
 8007dc8:	d13f      	bne.n	8007e4a <_malloc_r+0xe6>
 8007dca:	6821      	ldr	r1, [r4, #0]
 8007dcc:	1a6d      	subs	r5, r5, r1
 8007dce:	4629      	mov	r1, r5
 8007dd0:	4638      	mov	r0, r7
 8007dd2:	f7ff ffa7 	bl	8007d24 <sbrk_aligned>
 8007dd6:	3001      	adds	r0, #1
 8007dd8:	d037      	beq.n	8007e4a <_malloc_r+0xe6>
 8007dda:	6823      	ldr	r3, [r4, #0]
 8007ddc:	442b      	add	r3, r5
 8007dde:	6023      	str	r3, [r4, #0]
 8007de0:	f8d8 3000 	ldr.w	r3, [r8]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d038      	beq.n	8007e5a <_malloc_r+0xf6>
 8007de8:	685a      	ldr	r2, [r3, #4]
 8007dea:	42a2      	cmp	r2, r4
 8007dec:	d12b      	bne.n	8007e46 <_malloc_r+0xe2>
 8007dee:	2200      	movs	r2, #0
 8007df0:	605a      	str	r2, [r3, #4]
 8007df2:	e00f      	b.n	8007e14 <_malloc_r+0xb0>
 8007df4:	6822      	ldr	r2, [r4, #0]
 8007df6:	1b52      	subs	r2, r2, r5
 8007df8:	d41f      	bmi.n	8007e3a <_malloc_r+0xd6>
 8007dfa:	2a0b      	cmp	r2, #11
 8007dfc:	d917      	bls.n	8007e2e <_malloc_r+0xca>
 8007dfe:	1961      	adds	r1, r4, r5
 8007e00:	42a3      	cmp	r3, r4
 8007e02:	6025      	str	r5, [r4, #0]
 8007e04:	bf18      	it	ne
 8007e06:	6059      	strne	r1, [r3, #4]
 8007e08:	6863      	ldr	r3, [r4, #4]
 8007e0a:	bf08      	it	eq
 8007e0c:	f8c8 1000 	streq.w	r1, [r8]
 8007e10:	5162      	str	r2, [r4, r5]
 8007e12:	604b      	str	r3, [r1, #4]
 8007e14:	4638      	mov	r0, r7
 8007e16:	f104 060b 	add.w	r6, r4, #11
 8007e1a:	f000 f829 	bl	8007e70 <__malloc_unlock>
 8007e1e:	f026 0607 	bic.w	r6, r6, #7
 8007e22:	1d23      	adds	r3, r4, #4
 8007e24:	1af2      	subs	r2, r6, r3
 8007e26:	d0ae      	beq.n	8007d86 <_malloc_r+0x22>
 8007e28:	1b9b      	subs	r3, r3, r6
 8007e2a:	50a3      	str	r3, [r4, r2]
 8007e2c:	e7ab      	b.n	8007d86 <_malloc_r+0x22>
 8007e2e:	42a3      	cmp	r3, r4
 8007e30:	6862      	ldr	r2, [r4, #4]
 8007e32:	d1dd      	bne.n	8007df0 <_malloc_r+0x8c>
 8007e34:	f8c8 2000 	str.w	r2, [r8]
 8007e38:	e7ec      	b.n	8007e14 <_malloc_r+0xb0>
 8007e3a:	4623      	mov	r3, r4
 8007e3c:	6864      	ldr	r4, [r4, #4]
 8007e3e:	e7ac      	b.n	8007d9a <_malloc_r+0x36>
 8007e40:	4634      	mov	r4, r6
 8007e42:	6876      	ldr	r6, [r6, #4]
 8007e44:	e7b4      	b.n	8007db0 <_malloc_r+0x4c>
 8007e46:	4613      	mov	r3, r2
 8007e48:	e7cc      	b.n	8007de4 <_malloc_r+0x80>
 8007e4a:	230c      	movs	r3, #12
 8007e4c:	603b      	str	r3, [r7, #0]
 8007e4e:	4638      	mov	r0, r7
 8007e50:	f000 f80e 	bl	8007e70 <__malloc_unlock>
 8007e54:	e797      	b.n	8007d86 <_malloc_r+0x22>
 8007e56:	6025      	str	r5, [r4, #0]
 8007e58:	e7dc      	b.n	8007e14 <_malloc_r+0xb0>
 8007e5a:	605b      	str	r3, [r3, #4]
 8007e5c:	deff      	udf	#255	; 0xff
 8007e5e:	bf00      	nop
 8007e60:	20050910 	.word	0x20050910

08007e64 <__malloc_lock>:
 8007e64:	4801      	ldr	r0, [pc, #4]	; (8007e6c <__malloc_lock+0x8>)
 8007e66:	f000 bef1 	b.w	8008c4c <__retarget_lock_acquire_recursive>
 8007e6a:	bf00      	nop
 8007e6c:	20050a58 	.word	0x20050a58

08007e70 <__malloc_unlock>:
 8007e70:	4801      	ldr	r0, [pc, #4]	; (8007e78 <__malloc_unlock+0x8>)
 8007e72:	f000 beec 	b.w	8008c4e <__retarget_lock_release_recursive>
 8007e76:	bf00      	nop
 8007e78:	20050a58 	.word	0x20050a58

08007e7c <__cvt>:
 8007e7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007e80:	ec55 4b10 	vmov	r4, r5, d0
 8007e84:	2d00      	cmp	r5, #0
 8007e86:	460e      	mov	r6, r1
 8007e88:	4619      	mov	r1, r3
 8007e8a:	462b      	mov	r3, r5
 8007e8c:	bfbb      	ittet	lt
 8007e8e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007e92:	461d      	movlt	r5, r3
 8007e94:	2300      	movge	r3, #0
 8007e96:	232d      	movlt	r3, #45	; 0x2d
 8007e98:	700b      	strb	r3, [r1, #0]
 8007e9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007e9c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007ea0:	4691      	mov	r9, r2
 8007ea2:	f023 0820 	bic.w	r8, r3, #32
 8007ea6:	bfbc      	itt	lt
 8007ea8:	4622      	movlt	r2, r4
 8007eaa:	4614      	movlt	r4, r2
 8007eac:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007eb0:	d005      	beq.n	8007ebe <__cvt+0x42>
 8007eb2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007eb6:	d100      	bne.n	8007eba <__cvt+0x3e>
 8007eb8:	3601      	adds	r6, #1
 8007eba:	2102      	movs	r1, #2
 8007ebc:	e000      	b.n	8007ec0 <__cvt+0x44>
 8007ebe:	2103      	movs	r1, #3
 8007ec0:	ab03      	add	r3, sp, #12
 8007ec2:	9301      	str	r3, [sp, #4]
 8007ec4:	ab02      	add	r3, sp, #8
 8007ec6:	9300      	str	r3, [sp, #0]
 8007ec8:	ec45 4b10 	vmov	d0, r4, r5
 8007ecc:	4653      	mov	r3, sl
 8007ece:	4632      	mov	r2, r6
 8007ed0:	f000 ff72 	bl	8008db8 <_dtoa_r>
 8007ed4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007ed8:	4607      	mov	r7, r0
 8007eda:	d102      	bne.n	8007ee2 <__cvt+0x66>
 8007edc:	f019 0f01 	tst.w	r9, #1
 8007ee0:	d022      	beq.n	8007f28 <__cvt+0xac>
 8007ee2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007ee6:	eb07 0906 	add.w	r9, r7, r6
 8007eea:	d110      	bne.n	8007f0e <__cvt+0x92>
 8007eec:	783b      	ldrb	r3, [r7, #0]
 8007eee:	2b30      	cmp	r3, #48	; 0x30
 8007ef0:	d10a      	bne.n	8007f08 <__cvt+0x8c>
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	4620      	mov	r0, r4
 8007ef8:	4629      	mov	r1, r5
 8007efa:	f7f8 fdfd 	bl	8000af8 <__aeabi_dcmpeq>
 8007efe:	b918      	cbnz	r0, 8007f08 <__cvt+0x8c>
 8007f00:	f1c6 0601 	rsb	r6, r6, #1
 8007f04:	f8ca 6000 	str.w	r6, [sl]
 8007f08:	f8da 3000 	ldr.w	r3, [sl]
 8007f0c:	4499      	add	r9, r3
 8007f0e:	2200      	movs	r2, #0
 8007f10:	2300      	movs	r3, #0
 8007f12:	4620      	mov	r0, r4
 8007f14:	4629      	mov	r1, r5
 8007f16:	f7f8 fdef 	bl	8000af8 <__aeabi_dcmpeq>
 8007f1a:	b108      	cbz	r0, 8007f20 <__cvt+0xa4>
 8007f1c:	f8cd 900c 	str.w	r9, [sp, #12]
 8007f20:	2230      	movs	r2, #48	; 0x30
 8007f22:	9b03      	ldr	r3, [sp, #12]
 8007f24:	454b      	cmp	r3, r9
 8007f26:	d307      	bcc.n	8007f38 <__cvt+0xbc>
 8007f28:	9b03      	ldr	r3, [sp, #12]
 8007f2a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007f2c:	1bdb      	subs	r3, r3, r7
 8007f2e:	4638      	mov	r0, r7
 8007f30:	6013      	str	r3, [r2, #0]
 8007f32:	b004      	add	sp, #16
 8007f34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f38:	1c59      	adds	r1, r3, #1
 8007f3a:	9103      	str	r1, [sp, #12]
 8007f3c:	701a      	strb	r2, [r3, #0]
 8007f3e:	e7f0      	b.n	8007f22 <__cvt+0xa6>

08007f40 <__exponent>:
 8007f40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007f42:	4603      	mov	r3, r0
 8007f44:	2900      	cmp	r1, #0
 8007f46:	bfb8      	it	lt
 8007f48:	4249      	neglt	r1, r1
 8007f4a:	f803 2b02 	strb.w	r2, [r3], #2
 8007f4e:	bfb4      	ite	lt
 8007f50:	222d      	movlt	r2, #45	; 0x2d
 8007f52:	222b      	movge	r2, #43	; 0x2b
 8007f54:	2909      	cmp	r1, #9
 8007f56:	7042      	strb	r2, [r0, #1]
 8007f58:	dd2a      	ble.n	8007fb0 <__exponent+0x70>
 8007f5a:	f10d 0207 	add.w	r2, sp, #7
 8007f5e:	4617      	mov	r7, r2
 8007f60:	260a      	movs	r6, #10
 8007f62:	4694      	mov	ip, r2
 8007f64:	fb91 f5f6 	sdiv	r5, r1, r6
 8007f68:	fb06 1415 	mls	r4, r6, r5, r1
 8007f6c:	3430      	adds	r4, #48	; 0x30
 8007f6e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8007f72:	460c      	mov	r4, r1
 8007f74:	2c63      	cmp	r4, #99	; 0x63
 8007f76:	f102 32ff 	add.w	r2, r2, #4294967295
 8007f7a:	4629      	mov	r1, r5
 8007f7c:	dcf1      	bgt.n	8007f62 <__exponent+0x22>
 8007f7e:	3130      	adds	r1, #48	; 0x30
 8007f80:	f1ac 0402 	sub.w	r4, ip, #2
 8007f84:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007f88:	1c41      	adds	r1, r0, #1
 8007f8a:	4622      	mov	r2, r4
 8007f8c:	42ba      	cmp	r2, r7
 8007f8e:	d30a      	bcc.n	8007fa6 <__exponent+0x66>
 8007f90:	f10d 0209 	add.w	r2, sp, #9
 8007f94:	eba2 020c 	sub.w	r2, r2, ip
 8007f98:	42bc      	cmp	r4, r7
 8007f9a:	bf88      	it	hi
 8007f9c:	2200      	movhi	r2, #0
 8007f9e:	4413      	add	r3, r2
 8007fa0:	1a18      	subs	r0, r3, r0
 8007fa2:	b003      	add	sp, #12
 8007fa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007fa6:	f812 5b01 	ldrb.w	r5, [r2], #1
 8007faa:	f801 5f01 	strb.w	r5, [r1, #1]!
 8007fae:	e7ed      	b.n	8007f8c <__exponent+0x4c>
 8007fb0:	2330      	movs	r3, #48	; 0x30
 8007fb2:	3130      	adds	r1, #48	; 0x30
 8007fb4:	7083      	strb	r3, [r0, #2]
 8007fb6:	70c1      	strb	r1, [r0, #3]
 8007fb8:	1d03      	adds	r3, r0, #4
 8007fba:	e7f1      	b.n	8007fa0 <__exponent+0x60>

08007fbc <_printf_float>:
 8007fbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fc0:	ed2d 8b02 	vpush	{d8}
 8007fc4:	b08d      	sub	sp, #52	; 0x34
 8007fc6:	460c      	mov	r4, r1
 8007fc8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007fcc:	4616      	mov	r6, r2
 8007fce:	461f      	mov	r7, r3
 8007fd0:	4605      	mov	r5, r0
 8007fd2:	f000 fdb7 	bl	8008b44 <_localeconv_r>
 8007fd6:	f8d0 a000 	ldr.w	sl, [r0]
 8007fda:	4650      	mov	r0, sl
 8007fdc:	f7f8 f960 	bl	80002a0 <strlen>
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	930a      	str	r3, [sp, #40]	; 0x28
 8007fe4:	6823      	ldr	r3, [r4, #0]
 8007fe6:	9305      	str	r3, [sp, #20]
 8007fe8:	f8d8 3000 	ldr.w	r3, [r8]
 8007fec:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007ff0:	3307      	adds	r3, #7
 8007ff2:	f023 0307 	bic.w	r3, r3, #7
 8007ff6:	f103 0208 	add.w	r2, r3, #8
 8007ffa:	f8c8 2000 	str.w	r2, [r8]
 8007ffe:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008002:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008006:	9307      	str	r3, [sp, #28]
 8008008:	f8cd 8018 	str.w	r8, [sp, #24]
 800800c:	ee08 0a10 	vmov	s16, r0
 8008010:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8008014:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008018:	4b9e      	ldr	r3, [pc, #632]	; (8008294 <_printf_float+0x2d8>)
 800801a:	f04f 32ff 	mov.w	r2, #4294967295
 800801e:	f7f8 fd9d 	bl	8000b5c <__aeabi_dcmpun>
 8008022:	bb88      	cbnz	r0, 8008088 <_printf_float+0xcc>
 8008024:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008028:	4b9a      	ldr	r3, [pc, #616]	; (8008294 <_printf_float+0x2d8>)
 800802a:	f04f 32ff 	mov.w	r2, #4294967295
 800802e:	f7f8 fd77 	bl	8000b20 <__aeabi_dcmple>
 8008032:	bb48      	cbnz	r0, 8008088 <_printf_float+0xcc>
 8008034:	2200      	movs	r2, #0
 8008036:	2300      	movs	r3, #0
 8008038:	4640      	mov	r0, r8
 800803a:	4649      	mov	r1, r9
 800803c:	f7f8 fd66 	bl	8000b0c <__aeabi_dcmplt>
 8008040:	b110      	cbz	r0, 8008048 <_printf_float+0x8c>
 8008042:	232d      	movs	r3, #45	; 0x2d
 8008044:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008048:	4a93      	ldr	r2, [pc, #588]	; (8008298 <_printf_float+0x2dc>)
 800804a:	4b94      	ldr	r3, [pc, #592]	; (800829c <_printf_float+0x2e0>)
 800804c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008050:	bf94      	ite	ls
 8008052:	4690      	movls	r8, r2
 8008054:	4698      	movhi	r8, r3
 8008056:	2303      	movs	r3, #3
 8008058:	6123      	str	r3, [r4, #16]
 800805a:	9b05      	ldr	r3, [sp, #20]
 800805c:	f023 0304 	bic.w	r3, r3, #4
 8008060:	6023      	str	r3, [r4, #0]
 8008062:	f04f 0900 	mov.w	r9, #0
 8008066:	9700      	str	r7, [sp, #0]
 8008068:	4633      	mov	r3, r6
 800806a:	aa0b      	add	r2, sp, #44	; 0x2c
 800806c:	4621      	mov	r1, r4
 800806e:	4628      	mov	r0, r5
 8008070:	f000 f9da 	bl	8008428 <_printf_common>
 8008074:	3001      	adds	r0, #1
 8008076:	f040 8090 	bne.w	800819a <_printf_float+0x1de>
 800807a:	f04f 30ff 	mov.w	r0, #4294967295
 800807e:	b00d      	add	sp, #52	; 0x34
 8008080:	ecbd 8b02 	vpop	{d8}
 8008084:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008088:	4642      	mov	r2, r8
 800808a:	464b      	mov	r3, r9
 800808c:	4640      	mov	r0, r8
 800808e:	4649      	mov	r1, r9
 8008090:	f7f8 fd64 	bl	8000b5c <__aeabi_dcmpun>
 8008094:	b140      	cbz	r0, 80080a8 <_printf_float+0xec>
 8008096:	464b      	mov	r3, r9
 8008098:	2b00      	cmp	r3, #0
 800809a:	bfbc      	itt	lt
 800809c:	232d      	movlt	r3, #45	; 0x2d
 800809e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80080a2:	4a7f      	ldr	r2, [pc, #508]	; (80082a0 <_printf_float+0x2e4>)
 80080a4:	4b7f      	ldr	r3, [pc, #508]	; (80082a4 <_printf_float+0x2e8>)
 80080a6:	e7d1      	b.n	800804c <_printf_float+0x90>
 80080a8:	6863      	ldr	r3, [r4, #4]
 80080aa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80080ae:	9206      	str	r2, [sp, #24]
 80080b0:	1c5a      	adds	r2, r3, #1
 80080b2:	d13f      	bne.n	8008134 <_printf_float+0x178>
 80080b4:	2306      	movs	r3, #6
 80080b6:	6063      	str	r3, [r4, #4]
 80080b8:	9b05      	ldr	r3, [sp, #20]
 80080ba:	6861      	ldr	r1, [r4, #4]
 80080bc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80080c0:	2300      	movs	r3, #0
 80080c2:	9303      	str	r3, [sp, #12]
 80080c4:	ab0a      	add	r3, sp, #40	; 0x28
 80080c6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80080ca:	ab09      	add	r3, sp, #36	; 0x24
 80080cc:	ec49 8b10 	vmov	d0, r8, r9
 80080d0:	9300      	str	r3, [sp, #0]
 80080d2:	6022      	str	r2, [r4, #0]
 80080d4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80080d8:	4628      	mov	r0, r5
 80080da:	f7ff fecf 	bl	8007e7c <__cvt>
 80080de:	9b06      	ldr	r3, [sp, #24]
 80080e0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80080e2:	2b47      	cmp	r3, #71	; 0x47
 80080e4:	4680      	mov	r8, r0
 80080e6:	d108      	bne.n	80080fa <_printf_float+0x13e>
 80080e8:	1cc8      	adds	r0, r1, #3
 80080ea:	db02      	blt.n	80080f2 <_printf_float+0x136>
 80080ec:	6863      	ldr	r3, [r4, #4]
 80080ee:	4299      	cmp	r1, r3
 80080f0:	dd41      	ble.n	8008176 <_printf_float+0x1ba>
 80080f2:	f1ab 0302 	sub.w	r3, fp, #2
 80080f6:	fa5f fb83 	uxtb.w	fp, r3
 80080fa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80080fe:	d820      	bhi.n	8008142 <_printf_float+0x186>
 8008100:	3901      	subs	r1, #1
 8008102:	465a      	mov	r2, fp
 8008104:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008108:	9109      	str	r1, [sp, #36]	; 0x24
 800810a:	f7ff ff19 	bl	8007f40 <__exponent>
 800810e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008110:	1813      	adds	r3, r2, r0
 8008112:	2a01      	cmp	r2, #1
 8008114:	4681      	mov	r9, r0
 8008116:	6123      	str	r3, [r4, #16]
 8008118:	dc02      	bgt.n	8008120 <_printf_float+0x164>
 800811a:	6822      	ldr	r2, [r4, #0]
 800811c:	07d2      	lsls	r2, r2, #31
 800811e:	d501      	bpl.n	8008124 <_printf_float+0x168>
 8008120:	3301      	adds	r3, #1
 8008122:	6123      	str	r3, [r4, #16]
 8008124:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008128:	2b00      	cmp	r3, #0
 800812a:	d09c      	beq.n	8008066 <_printf_float+0xaa>
 800812c:	232d      	movs	r3, #45	; 0x2d
 800812e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008132:	e798      	b.n	8008066 <_printf_float+0xaa>
 8008134:	9a06      	ldr	r2, [sp, #24]
 8008136:	2a47      	cmp	r2, #71	; 0x47
 8008138:	d1be      	bne.n	80080b8 <_printf_float+0xfc>
 800813a:	2b00      	cmp	r3, #0
 800813c:	d1bc      	bne.n	80080b8 <_printf_float+0xfc>
 800813e:	2301      	movs	r3, #1
 8008140:	e7b9      	b.n	80080b6 <_printf_float+0xfa>
 8008142:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008146:	d118      	bne.n	800817a <_printf_float+0x1be>
 8008148:	2900      	cmp	r1, #0
 800814a:	6863      	ldr	r3, [r4, #4]
 800814c:	dd0b      	ble.n	8008166 <_printf_float+0x1aa>
 800814e:	6121      	str	r1, [r4, #16]
 8008150:	b913      	cbnz	r3, 8008158 <_printf_float+0x19c>
 8008152:	6822      	ldr	r2, [r4, #0]
 8008154:	07d0      	lsls	r0, r2, #31
 8008156:	d502      	bpl.n	800815e <_printf_float+0x1a2>
 8008158:	3301      	adds	r3, #1
 800815a:	440b      	add	r3, r1
 800815c:	6123      	str	r3, [r4, #16]
 800815e:	65a1      	str	r1, [r4, #88]	; 0x58
 8008160:	f04f 0900 	mov.w	r9, #0
 8008164:	e7de      	b.n	8008124 <_printf_float+0x168>
 8008166:	b913      	cbnz	r3, 800816e <_printf_float+0x1b2>
 8008168:	6822      	ldr	r2, [r4, #0]
 800816a:	07d2      	lsls	r2, r2, #31
 800816c:	d501      	bpl.n	8008172 <_printf_float+0x1b6>
 800816e:	3302      	adds	r3, #2
 8008170:	e7f4      	b.n	800815c <_printf_float+0x1a0>
 8008172:	2301      	movs	r3, #1
 8008174:	e7f2      	b.n	800815c <_printf_float+0x1a0>
 8008176:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800817a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800817c:	4299      	cmp	r1, r3
 800817e:	db05      	blt.n	800818c <_printf_float+0x1d0>
 8008180:	6823      	ldr	r3, [r4, #0]
 8008182:	6121      	str	r1, [r4, #16]
 8008184:	07d8      	lsls	r0, r3, #31
 8008186:	d5ea      	bpl.n	800815e <_printf_float+0x1a2>
 8008188:	1c4b      	adds	r3, r1, #1
 800818a:	e7e7      	b.n	800815c <_printf_float+0x1a0>
 800818c:	2900      	cmp	r1, #0
 800818e:	bfd4      	ite	le
 8008190:	f1c1 0202 	rsble	r2, r1, #2
 8008194:	2201      	movgt	r2, #1
 8008196:	4413      	add	r3, r2
 8008198:	e7e0      	b.n	800815c <_printf_float+0x1a0>
 800819a:	6823      	ldr	r3, [r4, #0]
 800819c:	055a      	lsls	r2, r3, #21
 800819e:	d407      	bmi.n	80081b0 <_printf_float+0x1f4>
 80081a0:	6923      	ldr	r3, [r4, #16]
 80081a2:	4642      	mov	r2, r8
 80081a4:	4631      	mov	r1, r6
 80081a6:	4628      	mov	r0, r5
 80081a8:	47b8      	blx	r7
 80081aa:	3001      	adds	r0, #1
 80081ac:	d12c      	bne.n	8008208 <_printf_float+0x24c>
 80081ae:	e764      	b.n	800807a <_printf_float+0xbe>
 80081b0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80081b4:	f240 80e0 	bls.w	8008378 <_printf_float+0x3bc>
 80081b8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80081bc:	2200      	movs	r2, #0
 80081be:	2300      	movs	r3, #0
 80081c0:	f7f8 fc9a 	bl	8000af8 <__aeabi_dcmpeq>
 80081c4:	2800      	cmp	r0, #0
 80081c6:	d034      	beq.n	8008232 <_printf_float+0x276>
 80081c8:	4a37      	ldr	r2, [pc, #220]	; (80082a8 <_printf_float+0x2ec>)
 80081ca:	2301      	movs	r3, #1
 80081cc:	4631      	mov	r1, r6
 80081ce:	4628      	mov	r0, r5
 80081d0:	47b8      	blx	r7
 80081d2:	3001      	adds	r0, #1
 80081d4:	f43f af51 	beq.w	800807a <_printf_float+0xbe>
 80081d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80081dc:	429a      	cmp	r2, r3
 80081de:	db02      	blt.n	80081e6 <_printf_float+0x22a>
 80081e0:	6823      	ldr	r3, [r4, #0]
 80081e2:	07d8      	lsls	r0, r3, #31
 80081e4:	d510      	bpl.n	8008208 <_printf_float+0x24c>
 80081e6:	ee18 3a10 	vmov	r3, s16
 80081ea:	4652      	mov	r2, sl
 80081ec:	4631      	mov	r1, r6
 80081ee:	4628      	mov	r0, r5
 80081f0:	47b8      	blx	r7
 80081f2:	3001      	adds	r0, #1
 80081f4:	f43f af41 	beq.w	800807a <_printf_float+0xbe>
 80081f8:	f04f 0800 	mov.w	r8, #0
 80081fc:	f104 091a 	add.w	r9, r4, #26
 8008200:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008202:	3b01      	subs	r3, #1
 8008204:	4543      	cmp	r3, r8
 8008206:	dc09      	bgt.n	800821c <_printf_float+0x260>
 8008208:	6823      	ldr	r3, [r4, #0]
 800820a:	079b      	lsls	r3, r3, #30
 800820c:	f100 8107 	bmi.w	800841e <_printf_float+0x462>
 8008210:	68e0      	ldr	r0, [r4, #12]
 8008212:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008214:	4298      	cmp	r0, r3
 8008216:	bfb8      	it	lt
 8008218:	4618      	movlt	r0, r3
 800821a:	e730      	b.n	800807e <_printf_float+0xc2>
 800821c:	2301      	movs	r3, #1
 800821e:	464a      	mov	r2, r9
 8008220:	4631      	mov	r1, r6
 8008222:	4628      	mov	r0, r5
 8008224:	47b8      	blx	r7
 8008226:	3001      	adds	r0, #1
 8008228:	f43f af27 	beq.w	800807a <_printf_float+0xbe>
 800822c:	f108 0801 	add.w	r8, r8, #1
 8008230:	e7e6      	b.n	8008200 <_printf_float+0x244>
 8008232:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008234:	2b00      	cmp	r3, #0
 8008236:	dc39      	bgt.n	80082ac <_printf_float+0x2f0>
 8008238:	4a1b      	ldr	r2, [pc, #108]	; (80082a8 <_printf_float+0x2ec>)
 800823a:	2301      	movs	r3, #1
 800823c:	4631      	mov	r1, r6
 800823e:	4628      	mov	r0, r5
 8008240:	47b8      	blx	r7
 8008242:	3001      	adds	r0, #1
 8008244:	f43f af19 	beq.w	800807a <_printf_float+0xbe>
 8008248:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800824c:	4313      	orrs	r3, r2
 800824e:	d102      	bne.n	8008256 <_printf_float+0x29a>
 8008250:	6823      	ldr	r3, [r4, #0]
 8008252:	07d9      	lsls	r1, r3, #31
 8008254:	d5d8      	bpl.n	8008208 <_printf_float+0x24c>
 8008256:	ee18 3a10 	vmov	r3, s16
 800825a:	4652      	mov	r2, sl
 800825c:	4631      	mov	r1, r6
 800825e:	4628      	mov	r0, r5
 8008260:	47b8      	blx	r7
 8008262:	3001      	adds	r0, #1
 8008264:	f43f af09 	beq.w	800807a <_printf_float+0xbe>
 8008268:	f04f 0900 	mov.w	r9, #0
 800826c:	f104 0a1a 	add.w	sl, r4, #26
 8008270:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008272:	425b      	negs	r3, r3
 8008274:	454b      	cmp	r3, r9
 8008276:	dc01      	bgt.n	800827c <_printf_float+0x2c0>
 8008278:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800827a:	e792      	b.n	80081a2 <_printf_float+0x1e6>
 800827c:	2301      	movs	r3, #1
 800827e:	4652      	mov	r2, sl
 8008280:	4631      	mov	r1, r6
 8008282:	4628      	mov	r0, r5
 8008284:	47b8      	blx	r7
 8008286:	3001      	adds	r0, #1
 8008288:	f43f aef7 	beq.w	800807a <_printf_float+0xbe>
 800828c:	f109 0901 	add.w	r9, r9, #1
 8008290:	e7ee      	b.n	8008270 <_printf_float+0x2b4>
 8008292:	bf00      	nop
 8008294:	7fefffff 	.word	0x7fefffff
 8008298:	0801db7c 	.word	0x0801db7c
 800829c:	0801db80 	.word	0x0801db80
 80082a0:	0801db84 	.word	0x0801db84
 80082a4:	0801db88 	.word	0x0801db88
 80082a8:	0801db8c 	.word	0x0801db8c
 80082ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80082ae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80082b0:	429a      	cmp	r2, r3
 80082b2:	bfa8      	it	ge
 80082b4:	461a      	movge	r2, r3
 80082b6:	2a00      	cmp	r2, #0
 80082b8:	4691      	mov	r9, r2
 80082ba:	dc37      	bgt.n	800832c <_printf_float+0x370>
 80082bc:	f04f 0b00 	mov.w	fp, #0
 80082c0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80082c4:	f104 021a 	add.w	r2, r4, #26
 80082c8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80082ca:	9305      	str	r3, [sp, #20]
 80082cc:	eba3 0309 	sub.w	r3, r3, r9
 80082d0:	455b      	cmp	r3, fp
 80082d2:	dc33      	bgt.n	800833c <_printf_float+0x380>
 80082d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80082d8:	429a      	cmp	r2, r3
 80082da:	db3b      	blt.n	8008354 <_printf_float+0x398>
 80082dc:	6823      	ldr	r3, [r4, #0]
 80082de:	07da      	lsls	r2, r3, #31
 80082e0:	d438      	bmi.n	8008354 <_printf_float+0x398>
 80082e2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80082e6:	eba2 0903 	sub.w	r9, r2, r3
 80082ea:	9b05      	ldr	r3, [sp, #20]
 80082ec:	1ad2      	subs	r2, r2, r3
 80082ee:	4591      	cmp	r9, r2
 80082f0:	bfa8      	it	ge
 80082f2:	4691      	movge	r9, r2
 80082f4:	f1b9 0f00 	cmp.w	r9, #0
 80082f8:	dc35      	bgt.n	8008366 <_printf_float+0x3aa>
 80082fa:	f04f 0800 	mov.w	r8, #0
 80082fe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008302:	f104 0a1a 	add.w	sl, r4, #26
 8008306:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800830a:	1a9b      	subs	r3, r3, r2
 800830c:	eba3 0309 	sub.w	r3, r3, r9
 8008310:	4543      	cmp	r3, r8
 8008312:	f77f af79 	ble.w	8008208 <_printf_float+0x24c>
 8008316:	2301      	movs	r3, #1
 8008318:	4652      	mov	r2, sl
 800831a:	4631      	mov	r1, r6
 800831c:	4628      	mov	r0, r5
 800831e:	47b8      	blx	r7
 8008320:	3001      	adds	r0, #1
 8008322:	f43f aeaa 	beq.w	800807a <_printf_float+0xbe>
 8008326:	f108 0801 	add.w	r8, r8, #1
 800832a:	e7ec      	b.n	8008306 <_printf_float+0x34a>
 800832c:	4613      	mov	r3, r2
 800832e:	4631      	mov	r1, r6
 8008330:	4642      	mov	r2, r8
 8008332:	4628      	mov	r0, r5
 8008334:	47b8      	blx	r7
 8008336:	3001      	adds	r0, #1
 8008338:	d1c0      	bne.n	80082bc <_printf_float+0x300>
 800833a:	e69e      	b.n	800807a <_printf_float+0xbe>
 800833c:	2301      	movs	r3, #1
 800833e:	4631      	mov	r1, r6
 8008340:	4628      	mov	r0, r5
 8008342:	9205      	str	r2, [sp, #20]
 8008344:	47b8      	blx	r7
 8008346:	3001      	adds	r0, #1
 8008348:	f43f ae97 	beq.w	800807a <_printf_float+0xbe>
 800834c:	9a05      	ldr	r2, [sp, #20]
 800834e:	f10b 0b01 	add.w	fp, fp, #1
 8008352:	e7b9      	b.n	80082c8 <_printf_float+0x30c>
 8008354:	ee18 3a10 	vmov	r3, s16
 8008358:	4652      	mov	r2, sl
 800835a:	4631      	mov	r1, r6
 800835c:	4628      	mov	r0, r5
 800835e:	47b8      	blx	r7
 8008360:	3001      	adds	r0, #1
 8008362:	d1be      	bne.n	80082e2 <_printf_float+0x326>
 8008364:	e689      	b.n	800807a <_printf_float+0xbe>
 8008366:	9a05      	ldr	r2, [sp, #20]
 8008368:	464b      	mov	r3, r9
 800836a:	4442      	add	r2, r8
 800836c:	4631      	mov	r1, r6
 800836e:	4628      	mov	r0, r5
 8008370:	47b8      	blx	r7
 8008372:	3001      	adds	r0, #1
 8008374:	d1c1      	bne.n	80082fa <_printf_float+0x33e>
 8008376:	e680      	b.n	800807a <_printf_float+0xbe>
 8008378:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800837a:	2a01      	cmp	r2, #1
 800837c:	dc01      	bgt.n	8008382 <_printf_float+0x3c6>
 800837e:	07db      	lsls	r3, r3, #31
 8008380:	d53a      	bpl.n	80083f8 <_printf_float+0x43c>
 8008382:	2301      	movs	r3, #1
 8008384:	4642      	mov	r2, r8
 8008386:	4631      	mov	r1, r6
 8008388:	4628      	mov	r0, r5
 800838a:	47b8      	blx	r7
 800838c:	3001      	adds	r0, #1
 800838e:	f43f ae74 	beq.w	800807a <_printf_float+0xbe>
 8008392:	ee18 3a10 	vmov	r3, s16
 8008396:	4652      	mov	r2, sl
 8008398:	4631      	mov	r1, r6
 800839a:	4628      	mov	r0, r5
 800839c:	47b8      	blx	r7
 800839e:	3001      	adds	r0, #1
 80083a0:	f43f ae6b 	beq.w	800807a <_printf_float+0xbe>
 80083a4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80083a8:	2200      	movs	r2, #0
 80083aa:	2300      	movs	r3, #0
 80083ac:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80083b0:	f7f8 fba2 	bl	8000af8 <__aeabi_dcmpeq>
 80083b4:	b9d8      	cbnz	r0, 80083ee <_printf_float+0x432>
 80083b6:	f10a 33ff 	add.w	r3, sl, #4294967295
 80083ba:	f108 0201 	add.w	r2, r8, #1
 80083be:	4631      	mov	r1, r6
 80083c0:	4628      	mov	r0, r5
 80083c2:	47b8      	blx	r7
 80083c4:	3001      	adds	r0, #1
 80083c6:	d10e      	bne.n	80083e6 <_printf_float+0x42a>
 80083c8:	e657      	b.n	800807a <_printf_float+0xbe>
 80083ca:	2301      	movs	r3, #1
 80083cc:	4652      	mov	r2, sl
 80083ce:	4631      	mov	r1, r6
 80083d0:	4628      	mov	r0, r5
 80083d2:	47b8      	blx	r7
 80083d4:	3001      	adds	r0, #1
 80083d6:	f43f ae50 	beq.w	800807a <_printf_float+0xbe>
 80083da:	f108 0801 	add.w	r8, r8, #1
 80083de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083e0:	3b01      	subs	r3, #1
 80083e2:	4543      	cmp	r3, r8
 80083e4:	dcf1      	bgt.n	80083ca <_printf_float+0x40e>
 80083e6:	464b      	mov	r3, r9
 80083e8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80083ec:	e6da      	b.n	80081a4 <_printf_float+0x1e8>
 80083ee:	f04f 0800 	mov.w	r8, #0
 80083f2:	f104 0a1a 	add.w	sl, r4, #26
 80083f6:	e7f2      	b.n	80083de <_printf_float+0x422>
 80083f8:	2301      	movs	r3, #1
 80083fa:	4642      	mov	r2, r8
 80083fc:	e7df      	b.n	80083be <_printf_float+0x402>
 80083fe:	2301      	movs	r3, #1
 8008400:	464a      	mov	r2, r9
 8008402:	4631      	mov	r1, r6
 8008404:	4628      	mov	r0, r5
 8008406:	47b8      	blx	r7
 8008408:	3001      	adds	r0, #1
 800840a:	f43f ae36 	beq.w	800807a <_printf_float+0xbe>
 800840e:	f108 0801 	add.w	r8, r8, #1
 8008412:	68e3      	ldr	r3, [r4, #12]
 8008414:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008416:	1a5b      	subs	r3, r3, r1
 8008418:	4543      	cmp	r3, r8
 800841a:	dcf0      	bgt.n	80083fe <_printf_float+0x442>
 800841c:	e6f8      	b.n	8008210 <_printf_float+0x254>
 800841e:	f04f 0800 	mov.w	r8, #0
 8008422:	f104 0919 	add.w	r9, r4, #25
 8008426:	e7f4      	b.n	8008412 <_printf_float+0x456>

08008428 <_printf_common>:
 8008428:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800842c:	4616      	mov	r6, r2
 800842e:	4699      	mov	r9, r3
 8008430:	688a      	ldr	r2, [r1, #8]
 8008432:	690b      	ldr	r3, [r1, #16]
 8008434:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008438:	4293      	cmp	r3, r2
 800843a:	bfb8      	it	lt
 800843c:	4613      	movlt	r3, r2
 800843e:	6033      	str	r3, [r6, #0]
 8008440:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008444:	4607      	mov	r7, r0
 8008446:	460c      	mov	r4, r1
 8008448:	b10a      	cbz	r2, 800844e <_printf_common+0x26>
 800844a:	3301      	adds	r3, #1
 800844c:	6033      	str	r3, [r6, #0]
 800844e:	6823      	ldr	r3, [r4, #0]
 8008450:	0699      	lsls	r1, r3, #26
 8008452:	bf42      	ittt	mi
 8008454:	6833      	ldrmi	r3, [r6, #0]
 8008456:	3302      	addmi	r3, #2
 8008458:	6033      	strmi	r3, [r6, #0]
 800845a:	6825      	ldr	r5, [r4, #0]
 800845c:	f015 0506 	ands.w	r5, r5, #6
 8008460:	d106      	bne.n	8008470 <_printf_common+0x48>
 8008462:	f104 0a19 	add.w	sl, r4, #25
 8008466:	68e3      	ldr	r3, [r4, #12]
 8008468:	6832      	ldr	r2, [r6, #0]
 800846a:	1a9b      	subs	r3, r3, r2
 800846c:	42ab      	cmp	r3, r5
 800846e:	dc26      	bgt.n	80084be <_printf_common+0x96>
 8008470:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008474:	1e13      	subs	r3, r2, #0
 8008476:	6822      	ldr	r2, [r4, #0]
 8008478:	bf18      	it	ne
 800847a:	2301      	movne	r3, #1
 800847c:	0692      	lsls	r2, r2, #26
 800847e:	d42b      	bmi.n	80084d8 <_printf_common+0xb0>
 8008480:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008484:	4649      	mov	r1, r9
 8008486:	4638      	mov	r0, r7
 8008488:	47c0      	blx	r8
 800848a:	3001      	adds	r0, #1
 800848c:	d01e      	beq.n	80084cc <_printf_common+0xa4>
 800848e:	6823      	ldr	r3, [r4, #0]
 8008490:	6922      	ldr	r2, [r4, #16]
 8008492:	f003 0306 	and.w	r3, r3, #6
 8008496:	2b04      	cmp	r3, #4
 8008498:	bf02      	ittt	eq
 800849a:	68e5      	ldreq	r5, [r4, #12]
 800849c:	6833      	ldreq	r3, [r6, #0]
 800849e:	1aed      	subeq	r5, r5, r3
 80084a0:	68a3      	ldr	r3, [r4, #8]
 80084a2:	bf0c      	ite	eq
 80084a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80084a8:	2500      	movne	r5, #0
 80084aa:	4293      	cmp	r3, r2
 80084ac:	bfc4      	itt	gt
 80084ae:	1a9b      	subgt	r3, r3, r2
 80084b0:	18ed      	addgt	r5, r5, r3
 80084b2:	2600      	movs	r6, #0
 80084b4:	341a      	adds	r4, #26
 80084b6:	42b5      	cmp	r5, r6
 80084b8:	d11a      	bne.n	80084f0 <_printf_common+0xc8>
 80084ba:	2000      	movs	r0, #0
 80084bc:	e008      	b.n	80084d0 <_printf_common+0xa8>
 80084be:	2301      	movs	r3, #1
 80084c0:	4652      	mov	r2, sl
 80084c2:	4649      	mov	r1, r9
 80084c4:	4638      	mov	r0, r7
 80084c6:	47c0      	blx	r8
 80084c8:	3001      	adds	r0, #1
 80084ca:	d103      	bne.n	80084d4 <_printf_common+0xac>
 80084cc:	f04f 30ff 	mov.w	r0, #4294967295
 80084d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084d4:	3501      	adds	r5, #1
 80084d6:	e7c6      	b.n	8008466 <_printf_common+0x3e>
 80084d8:	18e1      	adds	r1, r4, r3
 80084da:	1c5a      	adds	r2, r3, #1
 80084dc:	2030      	movs	r0, #48	; 0x30
 80084de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80084e2:	4422      	add	r2, r4
 80084e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80084e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80084ec:	3302      	adds	r3, #2
 80084ee:	e7c7      	b.n	8008480 <_printf_common+0x58>
 80084f0:	2301      	movs	r3, #1
 80084f2:	4622      	mov	r2, r4
 80084f4:	4649      	mov	r1, r9
 80084f6:	4638      	mov	r0, r7
 80084f8:	47c0      	blx	r8
 80084fa:	3001      	adds	r0, #1
 80084fc:	d0e6      	beq.n	80084cc <_printf_common+0xa4>
 80084fe:	3601      	adds	r6, #1
 8008500:	e7d9      	b.n	80084b6 <_printf_common+0x8e>
	...

08008504 <_printf_i>:
 8008504:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008508:	7e0f      	ldrb	r7, [r1, #24]
 800850a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800850c:	2f78      	cmp	r7, #120	; 0x78
 800850e:	4691      	mov	r9, r2
 8008510:	4680      	mov	r8, r0
 8008512:	460c      	mov	r4, r1
 8008514:	469a      	mov	sl, r3
 8008516:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800851a:	d807      	bhi.n	800852c <_printf_i+0x28>
 800851c:	2f62      	cmp	r7, #98	; 0x62
 800851e:	d80a      	bhi.n	8008536 <_printf_i+0x32>
 8008520:	2f00      	cmp	r7, #0
 8008522:	f000 80d4 	beq.w	80086ce <_printf_i+0x1ca>
 8008526:	2f58      	cmp	r7, #88	; 0x58
 8008528:	f000 80c0 	beq.w	80086ac <_printf_i+0x1a8>
 800852c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008530:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008534:	e03a      	b.n	80085ac <_printf_i+0xa8>
 8008536:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800853a:	2b15      	cmp	r3, #21
 800853c:	d8f6      	bhi.n	800852c <_printf_i+0x28>
 800853e:	a101      	add	r1, pc, #4	; (adr r1, 8008544 <_printf_i+0x40>)
 8008540:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008544:	0800859d 	.word	0x0800859d
 8008548:	080085b1 	.word	0x080085b1
 800854c:	0800852d 	.word	0x0800852d
 8008550:	0800852d 	.word	0x0800852d
 8008554:	0800852d 	.word	0x0800852d
 8008558:	0800852d 	.word	0x0800852d
 800855c:	080085b1 	.word	0x080085b1
 8008560:	0800852d 	.word	0x0800852d
 8008564:	0800852d 	.word	0x0800852d
 8008568:	0800852d 	.word	0x0800852d
 800856c:	0800852d 	.word	0x0800852d
 8008570:	080086b5 	.word	0x080086b5
 8008574:	080085dd 	.word	0x080085dd
 8008578:	0800866f 	.word	0x0800866f
 800857c:	0800852d 	.word	0x0800852d
 8008580:	0800852d 	.word	0x0800852d
 8008584:	080086d7 	.word	0x080086d7
 8008588:	0800852d 	.word	0x0800852d
 800858c:	080085dd 	.word	0x080085dd
 8008590:	0800852d 	.word	0x0800852d
 8008594:	0800852d 	.word	0x0800852d
 8008598:	08008677 	.word	0x08008677
 800859c:	682b      	ldr	r3, [r5, #0]
 800859e:	1d1a      	adds	r2, r3, #4
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	602a      	str	r2, [r5, #0]
 80085a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80085a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80085ac:	2301      	movs	r3, #1
 80085ae:	e09f      	b.n	80086f0 <_printf_i+0x1ec>
 80085b0:	6820      	ldr	r0, [r4, #0]
 80085b2:	682b      	ldr	r3, [r5, #0]
 80085b4:	0607      	lsls	r7, r0, #24
 80085b6:	f103 0104 	add.w	r1, r3, #4
 80085ba:	6029      	str	r1, [r5, #0]
 80085bc:	d501      	bpl.n	80085c2 <_printf_i+0xbe>
 80085be:	681e      	ldr	r6, [r3, #0]
 80085c0:	e003      	b.n	80085ca <_printf_i+0xc6>
 80085c2:	0646      	lsls	r6, r0, #25
 80085c4:	d5fb      	bpl.n	80085be <_printf_i+0xba>
 80085c6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80085ca:	2e00      	cmp	r6, #0
 80085cc:	da03      	bge.n	80085d6 <_printf_i+0xd2>
 80085ce:	232d      	movs	r3, #45	; 0x2d
 80085d0:	4276      	negs	r6, r6
 80085d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80085d6:	485a      	ldr	r0, [pc, #360]	; (8008740 <_printf_i+0x23c>)
 80085d8:	230a      	movs	r3, #10
 80085da:	e012      	b.n	8008602 <_printf_i+0xfe>
 80085dc:	682b      	ldr	r3, [r5, #0]
 80085de:	6820      	ldr	r0, [r4, #0]
 80085e0:	1d19      	adds	r1, r3, #4
 80085e2:	6029      	str	r1, [r5, #0]
 80085e4:	0605      	lsls	r5, r0, #24
 80085e6:	d501      	bpl.n	80085ec <_printf_i+0xe8>
 80085e8:	681e      	ldr	r6, [r3, #0]
 80085ea:	e002      	b.n	80085f2 <_printf_i+0xee>
 80085ec:	0641      	lsls	r1, r0, #25
 80085ee:	d5fb      	bpl.n	80085e8 <_printf_i+0xe4>
 80085f0:	881e      	ldrh	r6, [r3, #0]
 80085f2:	4853      	ldr	r0, [pc, #332]	; (8008740 <_printf_i+0x23c>)
 80085f4:	2f6f      	cmp	r7, #111	; 0x6f
 80085f6:	bf0c      	ite	eq
 80085f8:	2308      	moveq	r3, #8
 80085fa:	230a      	movne	r3, #10
 80085fc:	2100      	movs	r1, #0
 80085fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008602:	6865      	ldr	r5, [r4, #4]
 8008604:	60a5      	str	r5, [r4, #8]
 8008606:	2d00      	cmp	r5, #0
 8008608:	bfa2      	ittt	ge
 800860a:	6821      	ldrge	r1, [r4, #0]
 800860c:	f021 0104 	bicge.w	r1, r1, #4
 8008610:	6021      	strge	r1, [r4, #0]
 8008612:	b90e      	cbnz	r6, 8008618 <_printf_i+0x114>
 8008614:	2d00      	cmp	r5, #0
 8008616:	d04b      	beq.n	80086b0 <_printf_i+0x1ac>
 8008618:	4615      	mov	r5, r2
 800861a:	fbb6 f1f3 	udiv	r1, r6, r3
 800861e:	fb03 6711 	mls	r7, r3, r1, r6
 8008622:	5dc7      	ldrb	r7, [r0, r7]
 8008624:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008628:	4637      	mov	r7, r6
 800862a:	42bb      	cmp	r3, r7
 800862c:	460e      	mov	r6, r1
 800862e:	d9f4      	bls.n	800861a <_printf_i+0x116>
 8008630:	2b08      	cmp	r3, #8
 8008632:	d10b      	bne.n	800864c <_printf_i+0x148>
 8008634:	6823      	ldr	r3, [r4, #0]
 8008636:	07de      	lsls	r6, r3, #31
 8008638:	d508      	bpl.n	800864c <_printf_i+0x148>
 800863a:	6923      	ldr	r3, [r4, #16]
 800863c:	6861      	ldr	r1, [r4, #4]
 800863e:	4299      	cmp	r1, r3
 8008640:	bfde      	ittt	le
 8008642:	2330      	movle	r3, #48	; 0x30
 8008644:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008648:	f105 35ff 	addle.w	r5, r5, #4294967295
 800864c:	1b52      	subs	r2, r2, r5
 800864e:	6122      	str	r2, [r4, #16]
 8008650:	f8cd a000 	str.w	sl, [sp]
 8008654:	464b      	mov	r3, r9
 8008656:	aa03      	add	r2, sp, #12
 8008658:	4621      	mov	r1, r4
 800865a:	4640      	mov	r0, r8
 800865c:	f7ff fee4 	bl	8008428 <_printf_common>
 8008660:	3001      	adds	r0, #1
 8008662:	d14a      	bne.n	80086fa <_printf_i+0x1f6>
 8008664:	f04f 30ff 	mov.w	r0, #4294967295
 8008668:	b004      	add	sp, #16
 800866a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800866e:	6823      	ldr	r3, [r4, #0]
 8008670:	f043 0320 	orr.w	r3, r3, #32
 8008674:	6023      	str	r3, [r4, #0]
 8008676:	4833      	ldr	r0, [pc, #204]	; (8008744 <_printf_i+0x240>)
 8008678:	2778      	movs	r7, #120	; 0x78
 800867a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800867e:	6823      	ldr	r3, [r4, #0]
 8008680:	6829      	ldr	r1, [r5, #0]
 8008682:	061f      	lsls	r7, r3, #24
 8008684:	f851 6b04 	ldr.w	r6, [r1], #4
 8008688:	d402      	bmi.n	8008690 <_printf_i+0x18c>
 800868a:	065f      	lsls	r7, r3, #25
 800868c:	bf48      	it	mi
 800868e:	b2b6      	uxthmi	r6, r6
 8008690:	07df      	lsls	r7, r3, #31
 8008692:	bf48      	it	mi
 8008694:	f043 0320 	orrmi.w	r3, r3, #32
 8008698:	6029      	str	r1, [r5, #0]
 800869a:	bf48      	it	mi
 800869c:	6023      	strmi	r3, [r4, #0]
 800869e:	b91e      	cbnz	r6, 80086a8 <_printf_i+0x1a4>
 80086a0:	6823      	ldr	r3, [r4, #0]
 80086a2:	f023 0320 	bic.w	r3, r3, #32
 80086a6:	6023      	str	r3, [r4, #0]
 80086a8:	2310      	movs	r3, #16
 80086aa:	e7a7      	b.n	80085fc <_printf_i+0xf8>
 80086ac:	4824      	ldr	r0, [pc, #144]	; (8008740 <_printf_i+0x23c>)
 80086ae:	e7e4      	b.n	800867a <_printf_i+0x176>
 80086b0:	4615      	mov	r5, r2
 80086b2:	e7bd      	b.n	8008630 <_printf_i+0x12c>
 80086b4:	682b      	ldr	r3, [r5, #0]
 80086b6:	6826      	ldr	r6, [r4, #0]
 80086b8:	6961      	ldr	r1, [r4, #20]
 80086ba:	1d18      	adds	r0, r3, #4
 80086bc:	6028      	str	r0, [r5, #0]
 80086be:	0635      	lsls	r5, r6, #24
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	d501      	bpl.n	80086c8 <_printf_i+0x1c4>
 80086c4:	6019      	str	r1, [r3, #0]
 80086c6:	e002      	b.n	80086ce <_printf_i+0x1ca>
 80086c8:	0670      	lsls	r0, r6, #25
 80086ca:	d5fb      	bpl.n	80086c4 <_printf_i+0x1c0>
 80086cc:	8019      	strh	r1, [r3, #0]
 80086ce:	2300      	movs	r3, #0
 80086d0:	6123      	str	r3, [r4, #16]
 80086d2:	4615      	mov	r5, r2
 80086d4:	e7bc      	b.n	8008650 <_printf_i+0x14c>
 80086d6:	682b      	ldr	r3, [r5, #0]
 80086d8:	1d1a      	adds	r2, r3, #4
 80086da:	602a      	str	r2, [r5, #0]
 80086dc:	681d      	ldr	r5, [r3, #0]
 80086de:	6862      	ldr	r2, [r4, #4]
 80086e0:	2100      	movs	r1, #0
 80086e2:	4628      	mov	r0, r5
 80086e4:	f7f7 fd8c 	bl	8000200 <memchr>
 80086e8:	b108      	cbz	r0, 80086ee <_printf_i+0x1ea>
 80086ea:	1b40      	subs	r0, r0, r5
 80086ec:	6060      	str	r0, [r4, #4]
 80086ee:	6863      	ldr	r3, [r4, #4]
 80086f0:	6123      	str	r3, [r4, #16]
 80086f2:	2300      	movs	r3, #0
 80086f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80086f8:	e7aa      	b.n	8008650 <_printf_i+0x14c>
 80086fa:	6923      	ldr	r3, [r4, #16]
 80086fc:	462a      	mov	r2, r5
 80086fe:	4649      	mov	r1, r9
 8008700:	4640      	mov	r0, r8
 8008702:	47d0      	blx	sl
 8008704:	3001      	adds	r0, #1
 8008706:	d0ad      	beq.n	8008664 <_printf_i+0x160>
 8008708:	6823      	ldr	r3, [r4, #0]
 800870a:	079b      	lsls	r3, r3, #30
 800870c:	d413      	bmi.n	8008736 <_printf_i+0x232>
 800870e:	68e0      	ldr	r0, [r4, #12]
 8008710:	9b03      	ldr	r3, [sp, #12]
 8008712:	4298      	cmp	r0, r3
 8008714:	bfb8      	it	lt
 8008716:	4618      	movlt	r0, r3
 8008718:	e7a6      	b.n	8008668 <_printf_i+0x164>
 800871a:	2301      	movs	r3, #1
 800871c:	4632      	mov	r2, r6
 800871e:	4649      	mov	r1, r9
 8008720:	4640      	mov	r0, r8
 8008722:	47d0      	blx	sl
 8008724:	3001      	adds	r0, #1
 8008726:	d09d      	beq.n	8008664 <_printf_i+0x160>
 8008728:	3501      	adds	r5, #1
 800872a:	68e3      	ldr	r3, [r4, #12]
 800872c:	9903      	ldr	r1, [sp, #12]
 800872e:	1a5b      	subs	r3, r3, r1
 8008730:	42ab      	cmp	r3, r5
 8008732:	dcf2      	bgt.n	800871a <_printf_i+0x216>
 8008734:	e7eb      	b.n	800870e <_printf_i+0x20a>
 8008736:	2500      	movs	r5, #0
 8008738:	f104 0619 	add.w	r6, r4, #25
 800873c:	e7f5      	b.n	800872a <_printf_i+0x226>
 800873e:	bf00      	nop
 8008740:	0801db8e 	.word	0x0801db8e
 8008744:	0801db9f 	.word	0x0801db9f

08008748 <std>:
 8008748:	2300      	movs	r3, #0
 800874a:	b510      	push	{r4, lr}
 800874c:	4604      	mov	r4, r0
 800874e:	e9c0 3300 	strd	r3, r3, [r0]
 8008752:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008756:	6083      	str	r3, [r0, #8]
 8008758:	8181      	strh	r1, [r0, #12]
 800875a:	6643      	str	r3, [r0, #100]	; 0x64
 800875c:	81c2      	strh	r2, [r0, #14]
 800875e:	6183      	str	r3, [r0, #24]
 8008760:	4619      	mov	r1, r3
 8008762:	2208      	movs	r2, #8
 8008764:	305c      	adds	r0, #92	; 0x5c
 8008766:	f000 f9e5 	bl	8008b34 <memset>
 800876a:	4b05      	ldr	r3, [pc, #20]	; (8008780 <std+0x38>)
 800876c:	6263      	str	r3, [r4, #36]	; 0x24
 800876e:	4b05      	ldr	r3, [pc, #20]	; (8008784 <std+0x3c>)
 8008770:	62a3      	str	r3, [r4, #40]	; 0x28
 8008772:	4b05      	ldr	r3, [pc, #20]	; (8008788 <std+0x40>)
 8008774:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008776:	4b05      	ldr	r3, [pc, #20]	; (800878c <std+0x44>)
 8008778:	6224      	str	r4, [r4, #32]
 800877a:	6323      	str	r3, [r4, #48]	; 0x30
 800877c:	bd10      	pop	{r4, pc}
 800877e:	bf00      	nop
 8008780:	08008985 	.word	0x08008985
 8008784:	080089a7 	.word	0x080089a7
 8008788:	080089df 	.word	0x080089df
 800878c:	08008a03 	.word	0x08008a03

08008790 <stdio_exit_handler>:
 8008790:	4a02      	ldr	r2, [pc, #8]	; (800879c <stdio_exit_handler+0xc>)
 8008792:	4903      	ldr	r1, [pc, #12]	; (80087a0 <stdio_exit_handler+0x10>)
 8008794:	4803      	ldr	r0, [pc, #12]	; (80087a4 <stdio_exit_handler+0x14>)
 8008796:	f000 b869 	b.w	800886c <_fwalk_sglue>
 800879a:	bf00      	nop
 800879c:	2000001c 	.word	0x2000001c
 80087a0:	0800a4c1 	.word	0x0800a4c1
 80087a4:	20000028 	.word	0x20000028

080087a8 <cleanup_stdio>:
 80087a8:	6841      	ldr	r1, [r0, #4]
 80087aa:	4b0c      	ldr	r3, [pc, #48]	; (80087dc <cleanup_stdio+0x34>)
 80087ac:	4299      	cmp	r1, r3
 80087ae:	b510      	push	{r4, lr}
 80087b0:	4604      	mov	r4, r0
 80087b2:	d001      	beq.n	80087b8 <cleanup_stdio+0x10>
 80087b4:	f001 fe84 	bl	800a4c0 <_fflush_r>
 80087b8:	68a1      	ldr	r1, [r4, #8]
 80087ba:	4b09      	ldr	r3, [pc, #36]	; (80087e0 <cleanup_stdio+0x38>)
 80087bc:	4299      	cmp	r1, r3
 80087be:	d002      	beq.n	80087c6 <cleanup_stdio+0x1e>
 80087c0:	4620      	mov	r0, r4
 80087c2:	f001 fe7d 	bl	800a4c0 <_fflush_r>
 80087c6:	68e1      	ldr	r1, [r4, #12]
 80087c8:	4b06      	ldr	r3, [pc, #24]	; (80087e4 <cleanup_stdio+0x3c>)
 80087ca:	4299      	cmp	r1, r3
 80087cc:	d004      	beq.n	80087d8 <cleanup_stdio+0x30>
 80087ce:	4620      	mov	r0, r4
 80087d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80087d4:	f001 be74 	b.w	800a4c0 <_fflush_r>
 80087d8:	bd10      	pop	{r4, pc}
 80087da:	bf00      	nop
 80087dc:	20050918 	.word	0x20050918
 80087e0:	20050980 	.word	0x20050980
 80087e4:	200509e8 	.word	0x200509e8

080087e8 <global_stdio_init.part.0>:
 80087e8:	b510      	push	{r4, lr}
 80087ea:	4b0b      	ldr	r3, [pc, #44]	; (8008818 <global_stdio_init.part.0+0x30>)
 80087ec:	4c0b      	ldr	r4, [pc, #44]	; (800881c <global_stdio_init.part.0+0x34>)
 80087ee:	4a0c      	ldr	r2, [pc, #48]	; (8008820 <global_stdio_init.part.0+0x38>)
 80087f0:	601a      	str	r2, [r3, #0]
 80087f2:	4620      	mov	r0, r4
 80087f4:	2200      	movs	r2, #0
 80087f6:	2104      	movs	r1, #4
 80087f8:	f7ff ffa6 	bl	8008748 <std>
 80087fc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008800:	2201      	movs	r2, #1
 8008802:	2109      	movs	r1, #9
 8008804:	f7ff ffa0 	bl	8008748 <std>
 8008808:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800880c:	2202      	movs	r2, #2
 800880e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008812:	2112      	movs	r1, #18
 8008814:	f7ff bf98 	b.w	8008748 <std>
 8008818:	20050a50 	.word	0x20050a50
 800881c:	20050918 	.word	0x20050918
 8008820:	08008791 	.word	0x08008791

08008824 <__sfp_lock_acquire>:
 8008824:	4801      	ldr	r0, [pc, #4]	; (800882c <__sfp_lock_acquire+0x8>)
 8008826:	f000 ba11 	b.w	8008c4c <__retarget_lock_acquire_recursive>
 800882a:	bf00      	nop
 800882c:	20050a59 	.word	0x20050a59

08008830 <__sfp_lock_release>:
 8008830:	4801      	ldr	r0, [pc, #4]	; (8008838 <__sfp_lock_release+0x8>)
 8008832:	f000 ba0c 	b.w	8008c4e <__retarget_lock_release_recursive>
 8008836:	bf00      	nop
 8008838:	20050a59 	.word	0x20050a59

0800883c <__sinit>:
 800883c:	b510      	push	{r4, lr}
 800883e:	4604      	mov	r4, r0
 8008840:	f7ff fff0 	bl	8008824 <__sfp_lock_acquire>
 8008844:	6a23      	ldr	r3, [r4, #32]
 8008846:	b11b      	cbz	r3, 8008850 <__sinit+0x14>
 8008848:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800884c:	f7ff bff0 	b.w	8008830 <__sfp_lock_release>
 8008850:	4b04      	ldr	r3, [pc, #16]	; (8008864 <__sinit+0x28>)
 8008852:	6223      	str	r3, [r4, #32]
 8008854:	4b04      	ldr	r3, [pc, #16]	; (8008868 <__sinit+0x2c>)
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d1f5      	bne.n	8008848 <__sinit+0xc>
 800885c:	f7ff ffc4 	bl	80087e8 <global_stdio_init.part.0>
 8008860:	e7f2      	b.n	8008848 <__sinit+0xc>
 8008862:	bf00      	nop
 8008864:	080087a9 	.word	0x080087a9
 8008868:	20050a50 	.word	0x20050a50

0800886c <_fwalk_sglue>:
 800886c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008870:	4607      	mov	r7, r0
 8008872:	4688      	mov	r8, r1
 8008874:	4614      	mov	r4, r2
 8008876:	2600      	movs	r6, #0
 8008878:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800887c:	f1b9 0901 	subs.w	r9, r9, #1
 8008880:	d505      	bpl.n	800888e <_fwalk_sglue+0x22>
 8008882:	6824      	ldr	r4, [r4, #0]
 8008884:	2c00      	cmp	r4, #0
 8008886:	d1f7      	bne.n	8008878 <_fwalk_sglue+0xc>
 8008888:	4630      	mov	r0, r6
 800888a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800888e:	89ab      	ldrh	r3, [r5, #12]
 8008890:	2b01      	cmp	r3, #1
 8008892:	d907      	bls.n	80088a4 <_fwalk_sglue+0x38>
 8008894:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008898:	3301      	adds	r3, #1
 800889a:	d003      	beq.n	80088a4 <_fwalk_sglue+0x38>
 800889c:	4629      	mov	r1, r5
 800889e:	4638      	mov	r0, r7
 80088a0:	47c0      	blx	r8
 80088a2:	4306      	orrs	r6, r0
 80088a4:	3568      	adds	r5, #104	; 0x68
 80088a6:	e7e9      	b.n	800887c <_fwalk_sglue+0x10>

080088a8 <iprintf>:
 80088a8:	b40f      	push	{r0, r1, r2, r3}
 80088aa:	b507      	push	{r0, r1, r2, lr}
 80088ac:	4906      	ldr	r1, [pc, #24]	; (80088c8 <iprintf+0x20>)
 80088ae:	ab04      	add	r3, sp, #16
 80088b0:	6808      	ldr	r0, [r1, #0]
 80088b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80088b6:	6881      	ldr	r1, [r0, #8]
 80088b8:	9301      	str	r3, [sp, #4]
 80088ba:	f001 fc61 	bl	800a180 <_vfiprintf_r>
 80088be:	b003      	add	sp, #12
 80088c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80088c4:	b004      	add	sp, #16
 80088c6:	4770      	bx	lr
 80088c8:	20000074 	.word	0x20000074

080088cc <_puts_r>:
 80088cc:	6a03      	ldr	r3, [r0, #32]
 80088ce:	b570      	push	{r4, r5, r6, lr}
 80088d0:	6884      	ldr	r4, [r0, #8]
 80088d2:	4605      	mov	r5, r0
 80088d4:	460e      	mov	r6, r1
 80088d6:	b90b      	cbnz	r3, 80088dc <_puts_r+0x10>
 80088d8:	f7ff ffb0 	bl	800883c <__sinit>
 80088dc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80088de:	07db      	lsls	r3, r3, #31
 80088e0:	d405      	bmi.n	80088ee <_puts_r+0x22>
 80088e2:	89a3      	ldrh	r3, [r4, #12]
 80088e4:	0598      	lsls	r0, r3, #22
 80088e6:	d402      	bmi.n	80088ee <_puts_r+0x22>
 80088e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80088ea:	f000 f9af 	bl	8008c4c <__retarget_lock_acquire_recursive>
 80088ee:	89a3      	ldrh	r3, [r4, #12]
 80088f0:	0719      	lsls	r1, r3, #28
 80088f2:	d513      	bpl.n	800891c <_puts_r+0x50>
 80088f4:	6923      	ldr	r3, [r4, #16]
 80088f6:	b18b      	cbz	r3, 800891c <_puts_r+0x50>
 80088f8:	3e01      	subs	r6, #1
 80088fa:	68a3      	ldr	r3, [r4, #8]
 80088fc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008900:	3b01      	subs	r3, #1
 8008902:	60a3      	str	r3, [r4, #8]
 8008904:	b9e9      	cbnz	r1, 8008942 <_puts_r+0x76>
 8008906:	2b00      	cmp	r3, #0
 8008908:	da2e      	bge.n	8008968 <_puts_r+0x9c>
 800890a:	4622      	mov	r2, r4
 800890c:	210a      	movs	r1, #10
 800890e:	4628      	mov	r0, r5
 8008910:	f000 f87b 	bl	8008a0a <__swbuf_r>
 8008914:	3001      	adds	r0, #1
 8008916:	d007      	beq.n	8008928 <_puts_r+0x5c>
 8008918:	250a      	movs	r5, #10
 800891a:	e007      	b.n	800892c <_puts_r+0x60>
 800891c:	4621      	mov	r1, r4
 800891e:	4628      	mov	r0, r5
 8008920:	f000 f8b0 	bl	8008a84 <__swsetup_r>
 8008924:	2800      	cmp	r0, #0
 8008926:	d0e7      	beq.n	80088f8 <_puts_r+0x2c>
 8008928:	f04f 35ff 	mov.w	r5, #4294967295
 800892c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800892e:	07da      	lsls	r2, r3, #31
 8008930:	d405      	bmi.n	800893e <_puts_r+0x72>
 8008932:	89a3      	ldrh	r3, [r4, #12]
 8008934:	059b      	lsls	r3, r3, #22
 8008936:	d402      	bmi.n	800893e <_puts_r+0x72>
 8008938:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800893a:	f000 f988 	bl	8008c4e <__retarget_lock_release_recursive>
 800893e:	4628      	mov	r0, r5
 8008940:	bd70      	pop	{r4, r5, r6, pc}
 8008942:	2b00      	cmp	r3, #0
 8008944:	da04      	bge.n	8008950 <_puts_r+0x84>
 8008946:	69a2      	ldr	r2, [r4, #24]
 8008948:	429a      	cmp	r2, r3
 800894a:	dc06      	bgt.n	800895a <_puts_r+0x8e>
 800894c:	290a      	cmp	r1, #10
 800894e:	d004      	beq.n	800895a <_puts_r+0x8e>
 8008950:	6823      	ldr	r3, [r4, #0]
 8008952:	1c5a      	adds	r2, r3, #1
 8008954:	6022      	str	r2, [r4, #0]
 8008956:	7019      	strb	r1, [r3, #0]
 8008958:	e7cf      	b.n	80088fa <_puts_r+0x2e>
 800895a:	4622      	mov	r2, r4
 800895c:	4628      	mov	r0, r5
 800895e:	f000 f854 	bl	8008a0a <__swbuf_r>
 8008962:	3001      	adds	r0, #1
 8008964:	d1c9      	bne.n	80088fa <_puts_r+0x2e>
 8008966:	e7df      	b.n	8008928 <_puts_r+0x5c>
 8008968:	6823      	ldr	r3, [r4, #0]
 800896a:	250a      	movs	r5, #10
 800896c:	1c5a      	adds	r2, r3, #1
 800896e:	6022      	str	r2, [r4, #0]
 8008970:	701d      	strb	r5, [r3, #0]
 8008972:	e7db      	b.n	800892c <_puts_r+0x60>

08008974 <puts>:
 8008974:	4b02      	ldr	r3, [pc, #8]	; (8008980 <puts+0xc>)
 8008976:	4601      	mov	r1, r0
 8008978:	6818      	ldr	r0, [r3, #0]
 800897a:	f7ff bfa7 	b.w	80088cc <_puts_r>
 800897e:	bf00      	nop
 8008980:	20000074 	.word	0x20000074

08008984 <__sread>:
 8008984:	b510      	push	{r4, lr}
 8008986:	460c      	mov	r4, r1
 8008988:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800898c:	f000 f900 	bl	8008b90 <_read_r>
 8008990:	2800      	cmp	r0, #0
 8008992:	bfab      	itete	ge
 8008994:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008996:	89a3      	ldrhlt	r3, [r4, #12]
 8008998:	181b      	addge	r3, r3, r0
 800899a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800899e:	bfac      	ite	ge
 80089a0:	6563      	strge	r3, [r4, #84]	; 0x54
 80089a2:	81a3      	strhlt	r3, [r4, #12]
 80089a4:	bd10      	pop	{r4, pc}

080089a6 <__swrite>:
 80089a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089aa:	461f      	mov	r7, r3
 80089ac:	898b      	ldrh	r3, [r1, #12]
 80089ae:	05db      	lsls	r3, r3, #23
 80089b0:	4605      	mov	r5, r0
 80089b2:	460c      	mov	r4, r1
 80089b4:	4616      	mov	r6, r2
 80089b6:	d505      	bpl.n	80089c4 <__swrite+0x1e>
 80089b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089bc:	2302      	movs	r3, #2
 80089be:	2200      	movs	r2, #0
 80089c0:	f000 f8d4 	bl	8008b6c <_lseek_r>
 80089c4:	89a3      	ldrh	r3, [r4, #12]
 80089c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80089ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80089ce:	81a3      	strh	r3, [r4, #12]
 80089d0:	4632      	mov	r2, r6
 80089d2:	463b      	mov	r3, r7
 80089d4:	4628      	mov	r0, r5
 80089d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80089da:	f000 b8fb 	b.w	8008bd4 <_write_r>

080089de <__sseek>:
 80089de:	b510      	push	{r4, lr}
 80089e0:	460c      	mov	r4, r1
 80089e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089e6:	f000 f8c1 	bl	8008b6c <_lseek_r>
 80089ea:	1c43      	adds	r3, r0, #1
 80089ec:	89a3      	ldrh	r3, [r4, #12]
 80089ee:	bf15      	itete	ne
 80089f0:	6560      	strne	r0, [r4, #84]	; 0x54
 80089f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80089f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80089fa:	81a3      	strheq	r3, [r4, #12]
 80089fc:	bf18      	it	ne
 80089fe:	81a3      	strhne	r3, [r4, #12]
 8008a00:	bd10      	pop	{r4, pc}

08008a02 <__sclose>:
 8008a02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a06:	f000 b8a1 	b.w	8008b4c <_close_r>

08008a0a <__swbuf_r>:
 8008a0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a0c:	460e      	mov	r6, r1
 8008a0e:	4614      	mov	r4, r2
 8008a10:	4605      	mov	r5, r0
 8008a12:	b118      	cbz	r0, 8008a1c <__swbuf_r+0x12>
 8008a14:	6a03      	ldr	r3, [r0, #32]
 8008a16:	b90b      	cbnz	r3, 8008a1c <__swbuf_r+0x12>
 8008a18:	f7ff ff10 	bl	800883c <__sinit>
 8008a1c:	69a3      	ldr	r3, [r4, #24]
 8008a1e:	60a3      	str	r3, [r4, #8]
 8008a20:	89a3      	ldrh	r3, [r4, #12]
 8008a22:	071a      	lsls	r2, r3, #28
 8008a24:	d525      	bpl.n	8008a72 <__swbuf_r+0x68>
 8008a26:	6923      	ldr	r3, [r4, #16]
 8008a28:	b31b      	cbz	r3, 8008a72 <__swbuf_r+0x68>
 8008a2a:	6823      	ldr	r3, [r4, #0]
 8008a2c:	6922      	ldr	r2, [r4, #16]
 8008a2e:	1a98      	subs	r0, r3, r2
 8008a30:	6963      	ldr	r3, [r4, #20]
 8008a32:	b2f6      	uxtb	r6, r6
 8008a34:	4283      	cmp	r3, r0
 8008a36:	4637      	mov	r7, r6
 8008a38:	dc04      	bgt.n	8008a44 <__swbuf_r+0x3a>
 8008a3a:	4621      	mov	r1, r4
 8008a3c:	4628      	mov	r0, r5
 8008a3e:	f001 fd3f 	bl	800a4c0 <_fflush_r>
 8008a42:	b9e0      	cbnz	r0, 8008a7e <__swbuf_r+0x74>
 8008a44:	68a3      	ldr	r3, [r4, #8]
 8008a46:	3b01      	subs	r3, #1
 8008a48:	60a3      	str	r3, [r4, #8]
 8008a4a:	6823      	ldr	r3, [r4, #0]
 8008a4c:	1c5a      	adds	r2, r3, #1
 8008a4e:	6022      	str	r2, [r4, #0]
 8008a50:	701e      	strb	r6, [r3, #0]
 8008a52:	6962      	ldr	r2, [r4, #20]
 8008a54:	1c43      	adds	r3, r0, #1
 8008a56:	429a      	cmp	r2, r3
 8008a58:	d004      	beq.n	8008a64 <__swbuf_r+0x5a>
 8008a5a:	89a3      	ldrh	r3, [r4, #12]
 8008a5c:	07db      	lsls	r3, r3, #31
 8008a5e:	d506      	bpl.n	8008a6e <__swbuf_r+0x64>
 8008a60:	2e0a      	cmp	r6, #10
 8008a62:	d104      	bne.n	8008a6e <__swbuf_r+0x64>
 8008a64:	4621      	mov	r1, r4
 8008a66:	4628      	mov	r0, r5
 8008a68:	f001 fd2a 	bl	800a4c0 <_fflush_r>
 8008a6c:	b938      	cbnz	r0, 8008a7e <__swbuf_r+0x74>
 8008a6e:	4638      	mov	r0, r7
 8008a70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a72:	4621      	mov	r1, r4
 8008a74:	4628      	mov	r0, r5
 8008a76:	f000 f805 	bl	8008a84 <__swsetup_r>
 8008a7a:	2800      	cmp	r0, #0
 8008a7c:	d0d5      	beq.n	8008a2a <__swbuf_r+0x20>
 8008a7e:	f04f 37ff 	mov.w	r7, #4294967295
 8008a82:	e7f4      	b.n	8008a6e <__swbuf_r+0x64>

08008a84 <__swsetup_r>:
 8008a84:	b538      	push	{r3, r4, r5, lr}
 8008a86:	4b2a      	ldr	r3, [pc, #168]	; (8008b30 <__swsetup_r+0xac>)
 8008a88:	4605      	mov	r5, r0
 8008a8a:	6818      	ldr	r0, [r3, #0]
 8008a8c:	460c      	mov	r4, r1
 8008a8e:	b118      	cbz	r0, 8008a98 <__swsetup_r+0x14>
 8008a90:	6a03      	ldr	r3, [r0, #32]
 8008a92:	b90b      	cbnz	r3, 8008a98 <__swsetup_r+0x14>
 8008a94:	f7ff fed2 	bl	800883c <__sinit>
 8008a98:	89a3      	ldrh	r3, [r4, #12]
 8008a9a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008a9e:	0718      	lsls	r0, r3, #28
 8008aa0:	d422      	bmi.n	8008ae8 <__swsetup_r+0x64>
 8008aa2:	06d9      	lsls	r1, r3, #27
 8008aa4:	d407      	bmi.n	8008ab6 <__swsetup_r+0x32>
 8008aa6:	2309      	movs	r3, #9
 8008aa8:	602b      	str	r3, [r5, #0]
 8008aaa:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008aae:	81a3      	strh	r3, [r4, #12]
 8008ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8008ab4:	e034      	b.n	8008b20 <__swsetup_r+0x9c>
 8008ab6:	0758      	lsls	r0, r3, #29
 8008ab8:	d512      	bpl.n	8008ae0 <__swsetup_r+0x5c>
 8008aba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008abc:	b141      	cbz	r1, 8008ad0 <__swsetup_r+0x4c>
 8008abe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008ac2:	4299      	cmp	r1, r3
 8008ac4:	d002      	beq.n	8008acc <__swsetup_r+0x48>
 8008ac6:	4628      	mov	r0, r5
 8008ac8:	f000 ff68 	bl	800999c <_free_r>
 8008acc:	2300      	movs	r3, #0
 8008ace:	6363      	str	r3, [r4, #52]	; 0x34
 8008ad0:	89a3      	ldrh	r3, [r4, #12]
 8008ad2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008ad6:	81a3      	strh	r3, [r4, #12]
 8008ad8:	2300      	movs	r3, #0
 8008ada:	6063      	str	r3, [r4, #4]
 8008adc:	6923      	ldr	r3, [r4, #16]
 8008ade:	6023      	str	r3, [r4, #0]
 8008ae0:	89a3      	ldrh	r3, [r4, #12]
 8008ae2:	f043 0308 	orr.w	r3, r3, #8
 8008ae6:	81a3      	strh	r3, [r4, #12]
 8008ae8:	6923      	ldr	r3, [r4, #16]
 8008aea:	b94b      	cbnz	r3, 8008b00 <__swsetup_r+0x7c>
 8008aec:	89a3      	ldrh	r3, [r4, #12]
 8008aee:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008af2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008af6:	d003      	beq.n	8008b00 <__swsetup_r+0x7c>
 8008af8:	4621      	mov	r1, r4
 8008afa:	4628      	mov	r0, r5
 8008afc:	f001 fd40 	bl	800a580 <__smakebuf_r>
 8008b00:	89a0      	ldrh	r0, [r4, #12]
 8008b02:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008b06:	f010 0301 	ands.w	r3, r0, #1
 8008b0a:	d00a      	beq.n	8008b22 <__swsetup_r+0x9e>
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	60a3      	str	r3, [r4, #8]
 8008b10:	6963      	ldr	r3, [r4, #20]
 8008b12:	425b      	negs	r3, r3
 8008b14:	61a3      	str	r3, [r4, #24]
 8008b16:	6923      	ldr	r3, [r4, #16]
 8008b18:	b943      	cbnz	r3, 8008b2c <__swsetup_r+0xa8>
 8008b1a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008b1e:	d1c4      	bne.n	8008aaa <__swsetup_r+0x26>
 8008b20:	bd38      	pop	{r3, r4, r5, pc}
 8008b22:	0781      	lsls	r1, r0, #30
 8008b24:	bf58      	it	pl
 8008b26:	6963      	ldrpl	r3, [r4, #20]
 8008b28:	60a3      	str	r3, [r4, #8]
 8008b2a:	e7f4      	b.n	8008b16 <__swsetup_r+0x92>
 8008b2c:	2000      	movs	r0, #0
 8008b2e:	e7f7      	b.n	8008b20 <__swsetup_r+0x9c>
 8008b30:	20000074 	.word	0x20000074

08008b34 <memset>:
 8008b34:	4402      	add	r2, r0
 8008b36:	4603      	mov	r3, r0
 8008b38:	4293      	cmp	r3, r2
 8008b3a:	d100      	bne.n	8008b3e <memset+0xa>
 8008b3c:	4770      	bx	lr
 8008b3e:	f803 1b01 	strb.w	r1, [r3], #1
 8008b42:	e7f9      	b.n	8008b38 <memset+0x4>

08008b44 <_localeconv_r>:
 8008b44:	4800      	ldr	r0, [pc, #0]	; (8008b48 <_localeconv_r+0x4>)
 8008b46:	4770      	bx	lr
 8008b48:	20000168 	.word	0x20000168

08008b4c <_close_r>:
 8008b4c:	b538      	push	{r3, r4, r5, lr}
 8008b4e:	4d06      	ldr	r5, [pc, #24]	; (8008b68 <_close_r+0x1c>)
 8008b50:	2300      	movs	r3, #0
 8008b52:	4604      	mov	r4, r0
 8008b54:	4608      	mov	r0, r1
 8008b56:	602b      	str	r3, [r5, #0]
 8008b58:	f7f9 fa3a 	bl	8001fd0 <_close>
 8008b5c:	1c43      	adds	r3, r0, #1
 8008b5e:	d102      	bne.n	8008b66 <_close_r+0x1a>
 8008b60:	682b      	ldr	r3, [r5, #0]
 8008b62:	b103      	cbz	r3, 8008b66 <_close_r+0x1a>
 8008b64:	6023      	str	r3, [r4, #0]
 8008b66:	bd38      	pop	{r3, r4, r5, pc}
 8008b68:	20050a54 	.word	0x20050a54

08008b6c <_lseek_r>:
 8008b6c:	b538      	push	{r3, r4, r5, lr}
 8008b6e:	4d07      	ldr	r5, [pc, #28]	; (8008b8c <_lseek_r+0x20>)
 8008b70:	4604      	mov	r4, r0
 8008b72:	4608      	mov	r0, r1
 8008b74:	4611      	mov	r1, r2
 8008b76:	2200      	movs	r2, #0
 8008b78:	602a      	str	r2, [r5, #0]
 8008b7a:	461a      	mov	r2, r3
 8008b7c:	f7f9 fa4f 	bl	800201e <_lseek>
 8008b80:	1c43      	adds	r3, r0, #1
 8008b82:	d102      	bne.n	8008b8a <_lseek_r+0x1e>
 8008b84:	682b      	ldr	r3, [r5, #0]
 8008b86:	b103      	cbz	r3, 8008b8a <_lseek_r+0x1e>
 8008b88:	6023      	str	r3, [r4, #0]
 8008b8a:	bd38      	pop	{r3, r4, r5, pc}
 8008b8c:	20050a54 	.word	0x20050a54

08008b90 <_read_r>:
 8008b90:	b538      	push	{r3, r4, r5, lr}
 8008b92:	4d07      	ldr	r5, [pc, #28]	; (8008bb0 <_read_r+0x20>)
 8008b94:	4604      	mov	r4, r0
 8008b96:	4608      	mov	r0, r1
 8008b98:	4611      	mov	r1, r2
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	602a      	str	r2, [r5, #0]
 8008b9e:	461a      	mov	r2, r3
 8008ba0:	f7f9 f9dd 	bl	8001f5e <_read>
 8008ba4:	1c43      	adds	r3, r0, #1
 8008ba6:	d102      	bne.n	8008bae <_read_r+0x1e>
 8008ba8:	682b      	ldr	r3, [r5, #0]
 8008baa:	b103      	cbz	r3, 8008bae <_read_r+0x1e>
 8008bac:	6023      	str	r3, [r4, #0]
 8008bae:	bd38      	pop	{r3, r4, r5, pc}
 8008bb0:	20050a54 	.word	0x20050a54

08008bb4 <_sbrk_r>:
 8008bb4:	b538      	push	{r3, r4, r5, lr}
 8008bb6:	4d06      	ldr	r5, [pc, #24]	; (8008bd0 <_sbrk_r+0x1c>)
 8008bb8:	2300      	movs	r3, #0
 8008bba:	4604      	mov	r4, r0
 8008bbc:	4608      	mov	r0, r1
 8008bbe:	602b      	str	r3, [r5, #0]
 8008bc0:	f7f9 fa3a 	bl	8002038 <_sbrk>
 8008bc4:	1c43      	adds	r3, r0, #1
 8008bc6:	d102      	bne.n	8008bce <_sbrk_r+0x1a>
 8008bc8:	682b      	ldr	r3, [r5, #0]
 8008bca:	b103      	cbz	r3, 8008bce <_sbrk_r+0x1a>
 8008bcc:	6023      	str	r3, [r4, #0]
 8008bce:	bd38      	pop	{r3, r4, r5, pc}
 8008bd0:	20050a54 	.word	0x20050a54

08008bd4 <_write_r>:
 8008bd4:	b538      	push	{r3, r4, r5, lr}
 8008bd6:	4d07      	ldr	r5, [pc, #28]	; (8008bf4 <_write_r+0x20>)
 8008bd8:	4604      	mov	r4, r0
 8008bda:	4608      	mov	r0, r1
 8008bdc:	4611      	mov	r1, r2
 8008bde:	2200      	movs	r2, #0
 8008be0:	602a      	str	r2, [r5, #0]
 8008be2:	461a      	mov	r2, r3
 8008be4:	f7f9 f9d8 	bl	8001f98 <_write>
 8008be8:	1c43      	adds	r3, r0, #1
 8008bea:	d102      	bne.n	8008bf2 <_write_r+0x1e>
 8008bec:	682b      	ldr	r3, [r5, #0]
 8008bee:	b103      	cbz	r3, 8008bf2 <_write_r+0x1e>
 8008bf0:	6023      	str	r3, [r4, #0]
 8008bf2:	bd38      	pop	{r3, r4, r5, pc}
 8008bf4:	20050a54 	.word	0x20050a54

08008bf8 <__errno>:
 8008bf8:	4b01      	ldr	r3, [pc, #4]	; (8008c00 <__errno+0x8>)
 8008bfa:	6818      	ldr	r0, [r3, #0]
 8008bfc:	4770      	bx	lr
 8008bfe:	bf00      	nop
 8008c00:	20000074 	.word	0x20000074

08008c04 <__libc_init_array>:
 8008c04:	b570      	push	{r4, r5, r6, lr}
 8008c06:	4d0d      	ldr	r5, [pc, #52]	; (8008c3c <__libc_init_array+0x38>)
 8008c08:	4c0d      	ldr	r4, [pc, #52]	; (8008c40 <__libc_init_array+0x3c>)
 8008c0a:	1b64      	subs	r4, r4, r5
 8008c0c:	10a4      	asrs	r4, r4, #2
 8008c0e:	2600      	movs	r6, #0
 8008c10:	42a6      	cmp	r6, r4
 8008c12:	d109      	bne.n	8008c28 <__libc_init_array+0x24>
 8008c14:	4d0b      	ldr	r5, [pc, #44]	; (8008c44 <__libc_init_array+0x40>)
 8008c16:	4c0c      	ldr	r4, [pc, #48]	; (8008c48 <__libc_init_array+0x44>)
 8008c18:	f001 fdfc 	bl	800a814 <_init>
 8008c1c:	1b64      	subs	r4, r4, r5
 8008c1e:	10a4      	asrs	r4, r4, #2
 8008c20:	2600      	movs	r6, #0
 8008c22:	42a6      	cmp	r6, r4
 8008c24:	d105      	bne.n	8008c32 <__libc_init_array+0x2e>
 8008c26:	bd70      	pop	{r4, r5, r6, pc}
 8008c28:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c2c:	4798      	blx	r3
 8008c2e:	3601      	adds	r6, #1
 8008c30:	e7ee      	b.n	8008c10 <__libc_init_array+0xc>
 8008c32:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c36:	4798      	blx	r3
 8008c38:	3601      	adds	r6, #1
 8008c3a:	e7f2      	b.n	8008c22 <__libc_init_array+0x1e>
 8008c3c:	0801def8 	.word	0x0801def8
 8008c40:	0801def8 	.word	0x0801def8
 8008c44:	0801def8 	.word	0x0801def8
 8008c48:	0801defc 	.word	0x0801defc

08008c4c <__retarget_lock_acquire_recursive>:
 8008c4c:	4770      	bx	lr

08008c4e <__retarget_lock_release_recursive>:
 8008c4e:	4770      	bx	lr

08008c50 <memcpy>:
 8008c50:	440a      	add	r2, r1
 8008c52:	4291      	cmp	r1, r2
 8008c54:	f100 33ff 	add.w	r3, r0, #4294967295
 8008c58:	d100      	bne.n	8008c5c <memcpy+0xc>
 8008c5a:	4770      	bx	lr
 8008c5c:	b510      	push	{r4, lr}
 8008c5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c62:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008c66:	4291      	cmp	r1, r2
 8008c68:	d1f9      	bne.n	8008c5e <memcpy+0xe>
 8008c6a:	bd10      	pop	{r4, pc}

08008c6c <__assert_func>:
 8008c6c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008c6e:	4614      	mov	r4, r2
 8008c70:	461a      	mov	r2, r3
 8008c72:	4b09      	ldr	r3, [pc, #36]	; (8008c98 <__assert_func+0x2c>)
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	4605      	mov	r5, r0
 8008c78:	68d8      	ldr	r0, [r3, #12]
 8008c7a:	b14c      	cbz	r4, 8008c90 <__assert_func+0x24>
 8008c7c:	4b07      	ldr	r3, [pc, #28]	; (8008c9c <__assert_func+0x30>)
 8008c7e:	9100      	str	r1, [sp, #0]
 8008c80:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008c84:	4906      	ldr	r1, [pc, #24]	; (8008ca0 <__assert_func+0x34>)
 8008c86:	462b      	mov	r3, r5
 8008c88:	f001 fc42 	bl	800a510 <fiprintf>
 8008c8c:	f001 fcd6 	bl	800a63c <abort>
 8008c90:	4b04      	ldr	r3, [pc, #16]	; (8008ca4 <__assert_func+0x38>)
 8008c92:	461c      	mov	r4, r3
 8008c94:	e7f3      	b.n	8008c7e <__assert_func+0x12>
 8008c96:	bf00      	nop
 8008c98:	20000074 	.word	0x20000074
 8008c9c:	0801dbb0 	.word	0x0801dbb0
 8008ca0:	0801dbbd 	.word	0x0801dbbd
 8008ca4:	0801dbeb 	.word	0x0801dbeb

08008ca8 <quorem>:
 8008ca8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cac:	6903      	ldr	r3, [r0, #16]
 8008cae:	690c      	ldr	r4, [r1, #16]
 8008cb0:	42a3      	cmp	r3, r4
 8008cb2:	4607      	mov	r7, r0
 8008cb4:	db7e      	blt.n	8008db4 <quorem+0x10c>
 8008cb6:	3c01      	subs	r4, #1
 8008cb8:	f101 0814 	add.w	r8, r1, #20
 8008cbc:	f100 0514 	add.w	r5, r0, #20
 8008cc0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008cc4:	9301      	str	r3, [sp, #4]
 8008cc6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008cca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008cce:	3301      	adds	r3, #1
 8008cd0:	429a      	cmp	r2, r3
 8008cd2:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008cd6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008cda:	fbb2 f6f3 	udiv	r6, r2, r3
 8008cde:	d331      	bcc.n	8008d44 <quorem+0x9c>
 8008ce0:	f04f 0e00 	mov.w	lr, #0
 8008ce4:	4640      	mov	r0, r8
 8008ce6:	46ac      	mov	ip, r5
 8008ce8:	46f2      	mov	sl, lr
 8008cea:	f850 2b04 	ldr.w	r2, [r0], #4
 8008cee:	b293      	uxth	r3, r2
 8008cf0:	fb06 e303 	mla	r3, r6, r3, lr
 8008cf4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008cf8:	0c1a      	lsrs	r2, r3, #16
 8008cfa:	b29b      	uxth	r3, r3
 8008cfc:	ebaa 0303 	sub.w	r3, sl, r3
 8008d00:	f8dc a000 	ldr.w	sl, [ip]
 8008d04:	fa13 f38a 	uxtah	r3, r3, sl
 8008d08:	fb06 220e 	mla	r2, r6, lr, r2
 8008d0c:	9300      	str	r3, [sp, #0]
 8008d0e:	9b00      	ldr	r3, [sp, #0]
 8008d10:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008d14:	b292      	uxth	r2, r2
 8008d16:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008d1a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008d1e:	f8bd 3000 	ldrh.w	r3, [sp]
 8008d22:	4581      	cmp	r9, r0
 8008d24:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008d28:	f84c 3b04 	str.w	r3, [ip], #4
 8008d2c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008d30:	d2db      	bcs.n	8008cea <quorem+0x42>
 8008d32:	f855 300b 	ldr.w	r3, [r5, fp]
 8008d36:	b92b      	cbnz	r3, 8008d44 <quorem+0x9c>
 8008d38:	9b01      	ldr	r3, [sp, #4]
 8008d3a:	3b04      	subs	r3, #4
 8008d3c:	429d      	cmp	r5, r3
 8008d3e:	461a      	mov	r2, r3
 8008d40:	d32c      	bcc.n	8008d9c <quorem+0xf4>
 8008d42:	613c      	str	r4, [r7, #16]
 8008d44:	4638      	mov	r0, r7
 8008d46:	f001 f8f1 	bl	8009f2c <__mcmp>
 8008d4a:	2800      	cmp	r0, #0
 8008d4c:	db22      	blt.n	8008d94 <quorem+0xec>
 8008d4e:	3601      	adds	r6, #1
 8008d50:	4629      	mov	r1, r5
 8008d52:	2000      	movs	r0, #0
 8008d54:	f858 2b04 	ldr.w	r2, [r8], #4
 8008d58:	f8d1 c000 	ldr.w	ip, [r1]
 8008d5c:	b293      	uxth	r3, r2
 8008d5e:	1ac3      	subs	r3, r0, r3
 8008d60:	0c12      	lsrs	r2, r2, #16
 8008d62:	fa13 f38c 	uxtah	r3, r3, ip
 8008d66:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8008d6a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008d6e:	b29b      	uxth	r3, r3
 8008d70:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008d74:	45c1      	cmp	r9, r8
 8008d76:	f841 3b04 	str.w	r3, [r1], #4
 8008d7a:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008d7e:	d2e9      	bcs.n	8008d54 <quorem+0xac>
 8008d80:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008d84:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008d88:	b922      	cbnz	r2, 8008d94 <quorem+0xec>
 8008d8a:	3b04      	subs	r3, #4
 8008d8c:	429d      	cmp	r5, r3
 8008d8e:	461a      	mov	r2, r3
 8008d90:	d30a      	bcc.n	8008da8 <quorem+0x100>
 8008d92:	613c      	str	r4, [r7, #16]
 8008d94:	4630      	mov	r0, r6
 8008d96:	b003      	add	sp, #12
 8008d98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d9c:	6812      	ldr	r2, [r2, #0]
 8008d9e:	3b04      	subs	r3, #4
 8008da0:	2a00      	cmp	r2, #0
 8008da2:	d1ce      	bne.n	8008d42 <quorem+0x9a>
 8008da4:	3c01      	subs	r4, #1
 8008da6:	e7c9      	b.n	8008d3c <quorem+0x94>
 8008da8:	6812      	ldr	r2, [r2, #0]
 8008daa:	3b04      	subs	r3, #4
 8008dac:	2a00      	cmp	r2, #0
 8008dae:	d1f0      	bne.n	8008d92 <quorem+0xea>
 8008db0:	3c01      	subs	r4, #1
 8008db2:	e7eb      	b.n	8008d8c <quorem+0xe4>
 8008db4:	2000      	movs	r0, #0
 8008db6:	e7ee      	b.n	8008d96 <quorem+0xee>

08008db8 <_dtoa_r>:
 8008db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dbc:	ed2d 8b04 	vpush	{d8-d9}
 8008dc0:	69c5      	ldr	r5, [r0, #28]
 8008dc2:	b093      	sub	sp, #76	; 0x4c
 8008dc4:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008dc8:	ec57 6b10 	vmov	r6, r7, d0
 8008dcc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008dd0:	9107      	str	r1, [sp, #28]
 8008dd2:	4604      	mov	r4, r0
 8008dd4:	920a      	str	r2, [sp, #40]	; 0x28
 8008dd6:	930d      	str	r3, [sp, #52]	; 0x34
 8008dd8:	b975      	cbnz	r5, 8008df8 <_dtoa_r+0x40>
 8008dda:	2010      	movs	r0, #16
 8008ddc:	f7fe ff9a 	bl	8007d14 <malloc>
 8008de0:	4602      	mov	r2, r0
 8008de2:	61e0      	str	r0, [r4, #28]
 8008de4:	b920      	cbnz	r0, 8008df0 <_dtoa_r+0x38>
 8008de6:	4bae      	ldr	r3, [pc, #696]	; (80090a0 <_dtoa_r+0x2e8>)
 8008de8:	21ef      	movs	r1, #239	; 0xef
 8008dea:	48ae      	ldr	r0, [pc, #696]	; (80090a4 <_dtoa_r+0x2ec>)
 8008dec:	f7ff ff3e 	bl	8008c6c <__assert_func>
 8008df0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008df4:	6005      	str	r5, [r0, #0]
 8008df6:	60c5      	str	r5, [r0, #12]
 8008df8:	69e3      	ldr	r3, [r4, #28]
 8008dfa:	6819      	ldr	r1, [r3, #0]
 8008dfc:	b151      	cbz	r1, 8008e14 <_dtoa_r+0x5c>
 8008dfe:	685a      	ldr	r2, [r3, #4]
 8008e00:	604a      	str	r2, [r1, #4]
 8008e02:	2301      	movs	r3, #1
 8008e04:	4093      	lsls	r3, r2
 8008e06:	608b      	str	r3, [r1, #8]
 8008e08:	4620      	mov	r0, r4
 8008e0a:	f000 fe53 	bl	8009ab4 <_Bfree>
 8008e0e:	69e3      	ldr	r3, [r4, #28]
 8008e10:	2200      	movs	r2, #0
 8008e12:	601a      	str	r2, [r3, #0]
 8008e14:	1e3b      	subs	r3, r7, #0
 8008e16:	bfbb      	ittet	lt
 8008e18:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008e1c:	9303      	strlt	r3, [sp, #12]
 8008e1e:	2300      	movge	r3, #0
 8008e20:	2201      	movlt	r2, #1
 8008e22:	bfac      	ite	ge
 8008e24:	f8c8 3000 	strge.w	r3, [r8]
 8008e28:	f8c8 2000 	strlt.w	r2, [r8]
 8008e2c:	4b9e      	ldr	r3, [pc, #632]	; (80090a8 <_dtoa_r+0x2f0>)
 8008e2e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008e32:	ea33 0308 	bics.w	r3, r3, r8
 8008e36:	d11b      	bne.n	8008e70 <_dtoa_r+0xb8>
 8008e38:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008e3a:	f242 730f 	movw	r3, #9999	; 0x270f
 8008e3e:	6013      	str	r3, [r2, #0]
 8008e40:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8008e44:	4333      	orrs	r3, r6
 8008e46:	f000 8593 	beq.w	8009970 <_dtoa_r+0xbb8>
 8008e4a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008e4c:	b963      	cbnz	r3, 8008e68 <_dtoa_r+0xb0>
 8008e4e:	4b97      	ldr	r3, [pc, #604]	; (80090ac <_dtoa_r+0x2f4>)
 8008e50:	e027      	b.n	8008ea2 <_dtoa_r+0xea>
 8008e52:	4b97      	ldr	r3, [pc, #604]	; (80090b0 <_dtoa_r+0x2f8>)
 8008e54:	9300      	str	r3, [sp, #0]
 8008e56:	3308      	adds	r3, #8
 8008e58:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008e5a:	6013      	str	r3, [r2, #0]
 8008e5c:	9800      	ldr	r0, [sp, #0]
 8008e5e:	b013      	add	sp, #76	; 0x4c
 8008e60:	ecbd 8b04 	vpop	{d8-d9}
 8008e64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e68:	4b90      	ldr	r3, [pc, #576]	; (80090ac <_dtoa_r+0x2f4>)
 8008e6a:	9300      	str	r3, [sp, #0]
 8008e6c:	3303      	adds	r3, #3
 8008e6e:	e7f3      	b.n	8008e58 <_dtoa_r+0xa0>
 8008e70:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008e74:	2200      	movs	r2, #0
 8008e76:	ec51 0b17 	vmov	r0, r1, d7
 8008e7a:	eeb0 8a47 	vmov.f32	s16, s14
 8008e7e:	eef0 8a67 	vmov.f32	s17, s15
 8008e82:	2300      	movs	r3, #0
 8008e84:	f7f7 fe38 	bl	8000af8 <__aeabi_dcmpeq>
 8008e88:	4681      	mov	r9, r0
 8008e8a:	b160      	cbz	r0, 8008ea6 <_dtoa_r+0xee>
 8008e8c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008e8e:	2301      	movs	r3, #1
 8008e90:	6013      	str	r3, [r2, #0]
 8008e92:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	f000 8568 	beq.w	800996a <_dtoa_r+0xbb2>
 8008e9a:	4b86      	ldr	r3, [pc, #536]	; (80090b4 <_dtoa_r+0x2fc>)
 8008e9c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008e9e:	6013      	str	r3, [r2, #0]
 8008ea0:	3b01      	subs	r3, #1
 8008ea2:	9300      	str	r3, [sp, #0]
 8008ea4:	e7da      	b.n	8008e5c <_dtoa_r+0xa4>
 8008ea6:	aa10      	add	r2, sp, #64	; 0x40
 8008ea8:	a911      	add	r1, sp, #68	; 0x44
 8008eaa:	4620      	mov	r0, r4
 8008eac:	eeb0 0a48 	vmov.f32	s0, s16
 8008eb0:	eef0 0a68 	vmov.f32	s1, s17
 8008eb4:	f001 f8e0 	bl	800a078 <__d2b>
 8008eb8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008ebc:	4682      	mov	sl, r0
 8008ebe:	2d00      	cmp	r5, #0
 8008ec0:	d07f      	beq.n	8008fc2 <_dtoa_r+0x20a>
 8008ec2:	ee18 3a90 	vmov	r3, s17
 8008ec6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008eca:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8008ece:	ec51 0b18 	vmov	r0, r1, d8
 8008ed2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008ed6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008eda:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8008ede:	4619      	mov	r1, r3
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	4b75      	ldr	r3, [pc, #468]	; (80090b8 <_dtoa_r+0x300>)
 8008ee4:	f7f7 f9e8 	bl	80002b8 <__aeabi_dsub>
 8008ee8:	a367      	add	r3, pc, #412	; (adr r3, 8009088 <_dtoa_r+0x2d0>)
 8008eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eee:	f7f7 fb9b 	bl	8000628 <__aeabi_dmul>
 8008ef2:	a367      	add	r3, pc, #412	; (adr r3, 8009090 <_dtoa_r+0x2d8>)
 8008ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ef8:	f7f7 f9e0 	bl	80002bc <__adddf3>
 8008efc:	4606      	mov	r6, r0
 8008efe:	4628      	mov	r0, r5
 8008f00:	460f      	mov	r7, r1
 8008f02:	f7f7 fb27 	bl	8000554 <__aeabi_i2d>
 8008f06:	a364      	add	r3, pc, #400	; (adr r3, 8009098 <_dtoa_r+0x2e0>)
 8008f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f0c:	f7f7 fb8c 	bl	8000628 <__aeabi_dmul>
 8008f10:	4602      	mov	r2, r0
 8008f12:	460b      	mov	r3, r1
 8008f14:	4630      	mov	r0, r6
 8008f16:	4639      	mov	r1, r7
 8008f18:	f7f7 f9d0 	bl	80002bc <__adddf3>
 8008f1c:	4606      	mov	r6, r0
 8008f1e:	460f      	mov	r7, r1
 8008f20:	f7f7 fe32 	bl	8000b88 <__aeabi_d2iz>
 8008f24:	2200      	movs	r2, #0
 8008f26:	4683      	mov	fp, r0
 8008f28:	2300      	movs	r3, #0
 8008f2a:	4630      	mov	r0, r6
 8008f2c:	4639      	mov	r1, r7
 8008f2e:	f7f7 fded 	bl	8000b0c <__aeabi_dcmplt>
 8008f32:	b148      	cbz	r0, 8008f48 <_dtoa_r+0x190>
 8008f34:	4658      	mov	r0, fp
 8008f36:	f7f7 fb0d 	bl	8000554 <__aeabi_i2d>
 8008f3a:	4632      	mov	r2, r6
 8008f3c:	463b      	mov	r3, r7
 8008f3e:	f7f7 fddb 	bl	8000af8 <__aeabi_dcmpeq>
 8008f42:	b908      	cbnz	r0, 8008f48 <_dtoa_r+0x190>
 8008f44:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008f48:	f1bb 0f16 	cmp.w	fp, #22
 8008f4c:	d857      	bhi.n	8008ffe <_dtoa_r+0x246>
 8008f4e:	4b5b      	ldr	r3, [pc, #364]	; (80090bc <_dtoa_r+0x304>)
 8008f50:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f58:	ec51 0b18 	vmov	r0, r1, d8
 8008f5c:	f7f7 fdd6 	bl	8000b0c <__aeabi_dcmplt>
 8008f60:	2800      	cmp	r0, #0
 8008f62:	d04e      	beq.n	8009002 <_dtoa_r+0x24a>
 8008f64:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008f68:	2300      	movs	r3, #0
 8008f6a:	930c      	str	r3, [sp, #48]	; 0x30
 8008f6c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008f6e:	1b5b      	subs	r3, r3, r5
 8008f70:	1e5a      	subs	r2, r3, #1
 8008f72:	bf45      	ittet	mi
 8008f74:	f1c3 0301 	rsbmi	r3, r3, #1
 8008f78:	9305      	strmi	r3, [sp, #20]
 8008f7a:	2300      	movpl	r3, #0
 8008f7c:	2300      	movmi	r3, #0
 8008f7e:	9206      	str	r2, [sp, #24]
 8008f80:	bf54      	ite	pl
 8008f82:	9305      	strpl	r3, [sp, #20]
 8008f84:	9306      	strmi	r3, [sp, #24]
 8008f86:	f1bb 0f00 	cmp.w	fp, #0
 8008f8a:	db3c      	blt.n	8009006 <_dtoa_r+0x24e>
 8008f8c:	9b06      	ldr	r3, [sp, #24]
 8008f8e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8008f92:	445b      	add	r3, fp
 8008f94:	9306      	str	r3, [sp, #24]
 8008f96:	2300      	movs	r3, #0
 8008f98:	9308      	str	r3, [sp, #32]
 8008f9a:	9b07      	ldr	r3, [sp, #28]
 8008f9c:	2b09      	cmp	r3, #9
 8008f9e:	d868      	bhi.n	8009072 <_dtoa_r+0x2ba>
 8008fa0:	2b05      	cmp	r3, #5
 8008fa2:	bfc4      	itt	gt
 8008fa4:	3b04      	subgt	r3, #4
 8008fa6:	9307      	strgt	r3, [sp, #28]
 8008fa8:	9b07      	ldr	r3, [sp, #28]
 8008faa:	f1a3 0302 	sub.w	r3, r3, #2
 8008fae:	bfcc      	ite	gt
 8008fb0:	2500      	movgt	r5, #0
 8008fb2:	2501      	movle	r5, #1
 8008fb4:	2b03      	cmp	r3, #3
 8008fb6:	f200 8085 	bhi.w	80090c4 <_dtoa_r+0x30c>
 8008fba:	e8df f003 	tbb	[pc, r3]
 8008fbe:	3b2e      	.short	0x3b2e
 8008fc0:	5839      	.short	0x5839
 8008fc2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008fc6:	441d      	add	r5, r3
 8008fc8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008fcc:	2b20      	cmp	r3, #32
 8008fce:	bfc1      	itttt	gt
 8008fd0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008fd4:	fa08 f803 	lslgt.w	r8, r8, r3
 8008fd8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8008fdc:	fa26 f303 	lsrgt.w	r3, r6, r3
 8008fe0:	bfd6      	itet	le
 8008fe2:	f1c3 0320 	rsble	r3, r3, #32
 8008fe6:	ea48 0003 	orrgt.w	r0, r8, r3
 8008fea:	fa06 f003 	lslle.w	r0, r6, r3
 8008fee:	f7f7 faa1 	bl	8000534 <__aeabi_ui2d>
 8008ff2:	2201      	movs	r2, #1
 8008ff4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8008ff8:	3d01      	subs	r5, #1
 8008ffa:	920e      	str	r2, [sp, #56]	; 0x38
 8008ffc:	e76f      	b.n	8008ede <_dtoa_r+0x126>
 8008ffe:	2301      	movs	r3, #1
 8009000:	e7b3      	b.n	8008f6a <_dtoa_r+0x1b2>
 8009002:	900c      	str	r0, [sp, #48]	; 0x30
 8009004:	e7b2      	b.n	8008f6c <_dtoa_r+0x1b4>
 8009006:	9b05      	ldr	r3, [sp, #20]
 8009008:	eba3 030b 	sub.w	r3, r3, fp
 800900c:	9305      	str	r3, [sp, #20]
 800900e:	f1cb 0300 	rsb	r3, fp, #0
 8009012:	9308      	str	r3, [sp, #32]
 8009014:	2300      	movs	r3, #0
 8009016:	930b      	str	r3, [sp, #44]	; 0x2c
 8009018:	e7bf      	b.n	8008f9a <_dtoa_r+0x1e2>
 800901a:	2300      	movs	r3, #0
 800901c:	9309      	str	r3, [sp, #36]	; 0x24
 800901e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009020:	2b00      	cmp	r3, #0
 8009022:	dc52      	bgt.n	80090ca <_dtoa_r+0x312>
 8009024:	2301      	movs	r3, #1
 8009026:	9301      	str	r3, [sp, #4]
 8009028:	9304      	str	r3, [sp, #16]
 800902a:	461a      	mov	r2, r3
 800902c:	920a      	str	r2, [sp, #40]	; 0x28
 800902e:	e00b      	b.n	8009048 <_dtoa_r+0x290>
 8009030:	2301      	movs	r3, #1
 8009032:	e7f3      	b.n	800901c <_dtoa_r+0x264>
 8009034:	2300      	movs	r3, #0
 8009036:	9309      	str	r3, [sp, #36]	; 0x24
 8009038:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800903a:	445b      	add	r3, fp
 800903c:	9301      	str	r3, [sp, #4]
 800903e:	3301      	adds	r3, #1
 8009040:	2b01      	cmp	r3, #1
 8009042:	9304      	str	r3, [sp, #16]
 8009044:	bfb8      	it	lt
 8009046:	2301      	movlt	r3, #1
 8009048:	69e0      	ldr	r0, [r4, #28]
 800904a:	2100      	movs	r1, #0
 800904c:	2204      	movs	r2, #4
 800904e:	f102 0614 	add.w	r6, r2, #20
 8009052:	429e      	cmp	r6, r3
 8009054:	d93d      	bls.n	80090d2 <_dtoa_r+0x31a>
 8009056:	6041      	str	r1, [r0, #4]
 8009058:	4620      	mov	r0, r4
 800905a:	f000 fceb 	bl	8009a34 <_Balloc>
 800905e:	9000      	str	r0, [sp, #0]
 8009060:	2800      	cmp	r0, #0
 8009062:	d139      	bne.n	80090d8 <_dtoa_r+0x320>
 8009064:	4b16      	ldr	r3, [pc, #88]	; (80090c0 <_dtoa_r+0x308>)
 8009066:	4602      	mov	r2, r0
 8009068:	f240 11af 	movw	r1, #431	; 0x1af
 800906c:	e6bd      	b.n	8008dea <_dtoa_r+0x32>
 800906e:	2301      	movs	r3, #1
 8009070:	e7e1      	b.n	8009036 <_dtoa_r+0x27e>
 8009072:	2501      	movs	r5, #1
 8009074:	2300      	movs	r3, #0
 8009076:	9307      	str	r3, [sp, #28]
 8009078:	9509      	str	r5, [sp, #36]	; 0x24
 800907a:	f04f 33ff 	mov.w	r3, #4294967295
 800907e:	9301      	str	r3, [sp, #4]
 8009080:	9304      	str	r3, [sp, #16]
 8009082:	2200      	movs	r2, #0
 8009084:	2312      	movs	r3, #18
 8009086:	e7d1      	b.n	800902c <_dtoa_r+0x274>
 8009088:	636f4361 	.word	0x636f4361
 800908c:	3fd287a7 	.word	0x3fd287a7
 8009090:	8b60c8b3 	.word	0x8b60c8b3
 8009094:	3fc68a28 	.word	0x3fc68a28
 8009098:	509f79fb 	.word	0x509f79fb
 800909c:	3fd34413 	.word	0x3fd34413
 80090a0:	0801dbf9 	.word	0x0801dbf9
 80090a4:	0801dc10 	.word	0x0801dc10
 80090a8:	7ff00000 	.word	0x7ff00000
 80090ac:	0801dbf5 	.word	0x0801dbf5
 80090b0:	0801dbec 	.word	0x0801dbec
 80090b4:	0801db8d 	.word	0x0801db8d
 80090b8:	3ff80000 	.word	0x3ff80000
 80090bc:	0801dd00 	.word	0x0801dd00
 80090c0:	0801dc68 	.word	0x0801dc68
 80090c4:	2301      	movs	r3, #1
 80090c6:	9309      	str	r3, [sp, #36]	; 0x24
 80090c8:	e7d7      	b.n	800907a <_dtoa_r+0x2c2>
 80090ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090cc:	9301      	str	r3, [sp, #4]
 80090ce:	9304      	str	r3, [sp, #16]
 80090d0:	e7ba      	b.n	8009048 <_dtoa_r+0x290>
 80090d2:	3101      	adds	r1, #1
 80090d4:	0052      	lsls	r2, r2, #1
 80090d6:	e7ba      	b.n	800904e <_dtoa_r+0x296>
 80090d8:	69e3      	ldr	r3, [r4, #28]
 80090da:	9a00      	ldr	r2, [sp, #0]
 80090dc:	601a      	str	r2, [r3, #0]
 80090de:	9b04      	ldr	r3, [sp, #16]
 80090e0:	2b0e      	cmp	r3, #14
 80090e2:	f200 80a8 	bhi.w	8009236 <_dtoa_r+0x47e>
 80090e6:	2d00      	cmp	r5, #0
 80090e8:	f000 80a5 	beq.w	8009236 <_dtoa_r+0x47e>
 80090ec:	f1bb 0f00 	cmp.w	fp, #0
 80090f0:	dd38      	ble.n	8009164 <_dtoa_r+0x3ac>
 80090f2:	4bc0      	ldr	r3, [pc, #768]	; (80093f4 <_dtoa_r+0x63c>)
 80090f4:	f00b 020f 	and.w	r2, fp, #15
 80090f8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80090fc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009100:	e9d3 6700 	ldrd	r6, r7, [r3]
 8009104:	ea4f 182b 	mov.w	r8, fp, asr #4
 8009108:	d019      	beq.n	800913e <_dtoa_r+0x386>
 800910a:	4bbb      	ldr	r3, [pc, #748]	; (80093f8 <_dtoa_r+0x640>)
 800910c:	ec51 0b18 	vmov	r0, r1, d8
 8009110:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009114:	f7f7 fbb2 	bl	800087c <__aeabi_ddiv>
 8009118:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800911c:	f008 080f 	and.w	r8, r8, #15
 8009120:	2503      	movs	r5, #3
 8009122:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80093f8 <_dtoa_r+0x640>
 8009126:	f1b8 0f00 	cmp.w	r8, #0
 800912a:	d10a      	bne.n	8009142 <_dtoa_r+0x38a>
 800912c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009130:	4632      	mov	r2, r6
 8009132:	463b      	mov	r3, r7
 8009134:	f7f7 fba2 	bl	800087c <__aeabi_ddiv>
 8009138:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800913c:	e02b      	b.n	8009196 <_dtoa_r+0x3de>
 800913e:	2502      	movs	r5, #2
 8009140:	e7ef      	b.n	8009122 <_dtoa_r+0x36a>
 8009142:	f018 0f01 	tst.w	r8, #1
 8009146:	d008      	beq.n	800915a <_dtoa_r+0x3a2>
 8009148:	4630      	mov	r0, r6
 800914a:	4639      	mov	r1, r7
 800914c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009150:	f7f7 fa6a 	bl	8000628 <__aeabi_dmul>
 8009154:	3501      	adds	r5, #1
 8009156:	4606      	mov	r6, r0
 8009158:	460f      	mov	r7, r1
 800915a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800915e:	f109 0908 	add.w	r9, r9, #8
 8009162:	e7e0      	b.n	8009126 <_dtoa_r+0x36e>
 8009164:	f000 809f 	beq.w	80092a6 <_dtoa_r+0x4ee>
 8009168:	f1cb 0600 	rsb	r6, fp, #0
 800916c:	4ba1      	ldr	r3, [pc, #644]	; (80093f4 <_dtoa_r+0x63c>)
 800916e:	4fa2      	ldr	r7, [pc, #648]	; (80093f8 <_dtoa_r+0x640>)
 8009170:	f006 020f 	and.w	r2, r6, #15
 8009174:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800917c:	ec51 0b18 	vmov	r0, r1, d8
 8009180:	f7f7 fa52 	bl	8000628 <__aeabi_dmul>
 8009184:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009188:	1136      	asrs	r6, r6, #4
 800918a:	2300      	movs	r3, #0
 800918c:	2502      	movs	r5, #2
 800918e:	2e00      	cmp	r6, #0
 8009190:	d17e      	bne.n	8009290 <_dtoa_r+0x4d8>
 8009192:	2b00      	cmp	r3, #0
 8009194:	d1d0      	bne.n	8009138 <_dtoa_r+0x380>
 8009196:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009198:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800919c:	2b00      	cmp	r3, #0
 800919e:	f000 8084 	beq.w	80092aa <_dtoa_r+0x4f2>
 80091a2:	4b96      	ldr	r3, [pc, #600]	; (80093fc <_dtoa_r+0x644>)
 80091a4:	2200      	movs	r2, #0
 80091a6:	4640      	mov	r0, r8
 80091a8:	4649      	mov	r1, r9
 80091aa:	f7f7 fcaf 	bl	8000b0c <__aeabi_dcmplt>
 80091ae:	2800      	cmp	r0, #0
 80091b0:	d07b      	beq.n	80092aa <_dtoa_r+0x4f2>
 80091b2:	9b04      	ldr	r3, [sp, #16]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d078      	beq.n	80092aa <_dtoa_r+0x4f2>
 80091b8:	9b01      	ldr	r3, [sp, #4]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	dd39      	ble.n	8009232 <_dtoa_r+0x47a>
 80091be:	4b90      	ldr	r3, [pc, #576]	; (8009400 <_dtoa_r+0x648>)
 80091c0:	2200      	movs	r2, #0
 80091c2:	4640      	mov	r0, r8
 80091c4:	4649      	mov	r1, r9
 80091c6:	f7f7 fa2f 	bl	8000628 <__aeabi_dmul>
 80091ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80091ce:	9e01      	ldr	r6, [sp, #4]
 80091d0:	f10b 37ff 	add.w	r7, fp, #4294967295
 80091d4:	3501      	adds	r5, #1
 80091d6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80091da:	4628      	mov	r0, r5
 80091dc:	f7f7 f9ba 	bl	8000554 <__aeabi_i2d>
 80091e0:	4642      	mov	r2, r8
 80091e2:	464b      	mov	r3, r9
 80091e4:	f7f7 fa20 	bl	8000628 <__aeabi_dmul>
 80091e8:	4b86      	ldr	r3, [pc, #536]	; (8009404 <_dtoa_r+0x64c>)
 80091ea:	2200      	movs	r2, #0
 80091ec:	f7f7 f866 	bl	80002bc <__adddf3>
 80091f0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80091f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80091f8:	9303      	str	r3, [sp, #12]
 80091fa:	2e00      	cmp	r6, #0
 80091fc:	d158      	bne.n	80092b0 <_dtoa_r+0x4f8>
 80091fe:	4b82      	ldr	r3, [pc, #520]	; (8009408 <_dtoa_r+0x650>)
 8009200:	2200      	movs	r2, #0
 8009202:	4640      	mov	r0, r8
 8009204:	4649      	mov	r1, r9
 8009206:	f7f7 f857 	bl	80002b8 <__aeabi_dsub>
 800920a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800920e:	4680      	mov	r8, r0
 8009210:	4689      	mov	r9, r1
 8009212:	f7f7 fc99 	bl	8000b48 <__aeabi_dcmpgt>
 8009216:	2800      	cmp	r0, #0
 8009218:	f040 8296 	bne.w	8009748 <_dtoa_r+0x990>
 800921c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009220:	4640      	mov	r0, r8
 8009222:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009226:	4649      	mov	r1, r9
 8009228:	f7f7 fc70 	bl	8000b0c <__aeabi_dcmplt>
 800922c:	2800      	cmp	r0, #0
 800922e:	f040 8289 	bne.w	8009744 <_dtoa_r+0x98c>
 8009232:	ed8d 8b02 	vstr	d8, [sp, #8]
 8009236:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009238:	2b00      	cmp	r3, #0
 800923a:	f2c0 814e 	blt.w	80094da <_dtoa_r+0x722>
 800923e:	f1bb 0f0e 	cmp.w	fp, #14
 8009242:	f300 814a 	bgt.w	80094da <_dtoa_r+0x722>
 8009246:	4b6b      	ldr	r3, [pc, #428]	; (80093f4 <_dtoa_r+0x63c>)
 8009248:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800924c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009250:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009252:	2b00      	cmp	r3, #0
 8009254:	f280 80dc 	bge.w	8009410 <_dtoa_r+0x658>
 8009258:	9b04      	ldr	r3, [sp, #16]
 800925a:	2b00      	cmp	r3, #0
 800925c:	f300 80d8 	bgt.w	8009410 <_dtoa_r+0x658>
 8009260:	f040 826f 	bne.w	8009742 <_dtoa_r+0x98a>
 8009264:	4b68      	ldr	r3, [pc, #416]	; (8009408 <_dtoa_r+0x650>)
 8009266:	2200      	movs	r2, #0
 8009268:	4640      	mov	r0, r8
 800926a:	4649      	mov	r1, r9
 800926c:	f7f7 f9dc 	bl	8000628 <__aeabi_dmul>
 8009270:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009274:	f7f7 fc5e 	bl	8000b34 <__aeabi_dcmpge>
 8009278:	9e04      	ldr	r6, [sp, #16]
 800927a:	4637      	mov	r7, r6
 800927c:	2800      	cmp	r0, #0
 800927e:	f040 8245 	bne.w	800970c <_dtoa_r+0x954>
 8009282:	9d00      	ldr	r5, [sp, #0]
 8009284:	2331      	movs	r3, #49	; 0x31
 8009286:	f805 3b01 	strb.w	r3, [r5], #1
 800928a:	f10b 0b01 	add.w	fp, fp, #1
 800928e:	e241      	b.n	8009714 <_dtoa_r+0x95c>
 8009290:	07f2      	lsls	r2, r6, #31
 8009292:	d505      	bpl.n	80092a0 <_dtoa_r+0x4e8>
 8009294:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009298:	f7f7 f9c6 	bl	8000628 <__aeabi_dmul>
 800929c:	3501      	adds	r5, #1
 800929e:	2301      	movs	r3, #1
 80092a0:	1076      	asrs	r6, r6, #1
 80092a2:	3708      	adds	r7, #8
 80092a4:	e773      	b.n	800918e <_dtoa_r+0x3d6>
 80092a6:	2502      	movs	r5, #2
 80092a8:	e775      	b.n	8009196 <_dtoa_r+0x3de>
 80092aa:	9e04      	ldr	r6, [sp, #16]
 80092ac:	465f      	mov	r7, fp
 80092ae:	e792      	b.n	80091d6 <_dtoa_r+0x41e>
 80092b0:	9900      	ldr	r1, [sp, #0]
 80092b2:	4b50      	ldr	r3, [pc, #320]	; (80093f4 <_dtoa_r+0x63c>)
 80092b4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80092b8:	4431      	add	r1, r6
 80092ba:	9102      	str	r1, [sp, #8]
 80092bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80092be:	eeb0 9a47 	vmov.f32	s18, s14
 80092c2:	eef0 9a67 	vmov.f32	s19, s15
 80092c6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80092ca:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80092ce:	2900      	cmp	r1, #0
 80092d0:	d044      	beq.n	800935c <_dtoa_r+0x5a4>
 80092d2:	494e      	ldr	r1, [pc, #312]	; (800940c <_dtoa_r+0x654>)
 80092d4:	2000      	movs	r0, #0
 80092d6:	f7f7 fad1 	bl	800087c <__aeabi_ddiv>
 80092da:	ec53 2b19 	vmov	r2, r3, d9
 80092de:	f7f6 ffeb 	bl	80002b8 <__aeabi_dsub>
 80092e2:	9d00      	ldr	r5, [sp, #0]
 80092e4:	ec41 0b19 	vmov	d9, r0, r1
 80092e8:	4649      	mov	r1, r9
 80092ea:	4640      	mov	r0, r8
 80092ec:	f7f7 fc4c 	bl	8000b88 <__aeabi_d2iz>
 80092f0:	4606      	mov	r6, r0
 80092f2:	f7f7 f92f 	bl	8000554 <__aeabi_i2d>
 80092f6:	4602      	mov	r2, r0
 80092f8:	460b      	mov	r3, r1
 80092fa:	4640      	mov	r0, r8
 80092fc:	4649      	mov	r1, r9
 80092fe:	f7f6 ffdb 	bl	80002b8 <__aeabi_dsub>
 8009302:	3630      	adds	r6, #48	; 0x30
 8009304:	f805 6b01 	strb.w	r6, [r5], #1
 8009308:	ec53 2b19 	vmov	r2, r3, d9
 800930c:	4680      	mov	r8, r0
 800930e:	4689      	mov	r9, r1
 8009310:	f7f7 fbfc 	bl	8000b0c <__aeabi_dcmplt>
 8009314:	2800      	cmp	r0, #0
 8009316:	d164      	bne.n	80093e2 <_dtoa_r+0x62a>
 8009318:	4642      	mov	r2, r8
 800931a:	464b      	mov	r3, r9
 800931c:	4937      	ldr	r1, [pc, #220]	; (80093fc <_dtoa_r+0x644>)
 800931e:	2000      	movs	r0, #0
 8009320:	f7f6 ffca 	bl	80002b8 <__aeabi_dsub>
 8009324:	ec53 2b19 	vmov	r2, r3, d9
 8009328:	f7f7 fbf0 	bl	8000b0c <__aeabi_dcmplt>
 800932c:	2800      	cmp	r0, #0
 800932e:	f040 80b6 	bne.w	800949e <_dtoa_r+0x6e6>
 8009332:	9b02      	ldr	r3, [sp, #8]
 8009334:	429d      	cmp	r5, r3
 8009336:	f43f af7c 	beq.w	8009232 <_dtoa_r+0x47a>
 800933a:	4b31      	ldr	r3, [pc, #196]	; (8009400 <_dtoa_r+0x648>)
 800933c:	ec51 0b19 	vmov	r0, r1, d9
 8009340:	2200      	movs	r2, #0
 8009342:	f7f7 f971 	bl	8000628 <__aeabi_dmul>
 8009346:	4b2e      	ldr	r3, [pc, #184]	; (8009400 <_dtoa_r+0x648>)
 8009348:	ec41 0b19 	vmov	d9, r0, r1
 800934c:	2200      	movs	r2, #0
 800934e:	4640      	mov	r0, r8
 8009350:	4649      	mov	r1, r9
 8009352:	f7f7 f969 	bl	8000628 <__aeabi_dmul>
 8009356:	4680      	mov	r8, r0
 8009358:	4689      	mov	r9, r1
 800935a:	e7c5      	b.n	80092e8 <_dtoa_r+0x530>
 800935c:	ec51 0b17 	vmov	r0, r1, d7
 8009360:	f7f7 f962 	bl	8000628 <__aeabi_dmul>
 8009364:	9b02      	ldr	r3, [sp, #8]
 8009366:	9d00      	ldr	r5, [sp, #0]
 8009368:	930f      	str	r3, [sp, #60]	; 0x3c
 800936a:	ec41 0b19 	vmov	d9, r0, r1
 800936e:	4649      	mov	r1, r9
 8009370:	4640      	mov	r0, r8
 8009372:	f7f7 fc09 	bl	8000b88 <__aeabi_d2iz>
 8009376:	4606      	mov	r6, r0
 8009378:	f7f7 f8ec 	bl	8000554 <__aeabi_i2d>
 800937c:	3630      	adds	r6, #48	; 0x30
 800937e:	4602      	mov	r2, r0
 8009380:	460b      	mov	r3, r1
 8009382:	4640      	mov	r0, r8
 8009384:	4649      	mov	r1, r9
 8009386:	f7f6 ff97 	bl	80002b8 <__aeabi_dsub>
 800938a:	f805 6b01 	strb.w	r6, [r5], #1
 800938e:	9b02      	ldr	r3, [sp, #8]
 8009390:	429d      	cmp	r5, r3
 8009392:	4680      	mov	r8, r0
 8009394:	4689      	mov	r9, r1
 8009396:	f04f 0200 	mov.w	r2, #0
 800939a:	d124      	bne.n	80093e6 <_dtoa_r+0x62e>
 800939c:	4b1b      	ldr	r3, [pc, #108]	; (800940c <_dtoa_r+0x654>)
 800939e:	ec51 0b19 	vmov	r0, r1, d9
 80093a2:	f7f6 ff8b 	bl	80002bc <__adddf3>
 80093a6:	4602      	mov	r2, r0
 80093a8:	460b      	mov	r3, r1
 80093aa:	4640      	mov	r0, r8
 80093ac:	4649      	mov	r1, r9
 80093ae:	f7f7 fbcb 	bl	8000b48 <__aeabi_dcmpgt>
 80093b2:	2800      	cmp	r0, #0
 80093b4:	d173      	bne.n	800949e <_dtoa_r+0x6e6>
 80093b6:	ec53 2b19 	vmov	r2, r3, d9
 80093ba:	4914      	ldr	r1, [pc, #80]	; (800940c <_dtoa_r+0x654>)
 80093bc:	2000      	movs	r0, #0
 80093be:	f7f6 ff7b 	bl	80002b8 <__aeabi_dsub>
 80093c2:	4602      	mov	r2, r0
 80093c4:	460b      	mov	r3, r1
 80093c6:	4640      	mov	r0, r8
 80093c8:	4649      	mov	r1, r9
 80093ca:	f7f7 fb9f 	bl	8000b0c <__aeabi_dcmplt>
 80093ce:	2800      	cmp	r0, #0
 80093d0:	f43f af2f 	beq.w	8009232 <_dtoa_r+0x47a>
 80093d4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80093d6:	1e6b      	subs	r3, r5, #1
 80093d8:	930f      	str	r3, [sp, #60]	; 0x3c
 80093da:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80093de:	2b30      	cmp	r3, #48	; 0x30
 80093e0:	d0f8      	beq.n	80093d4 <_dtoa_r+0x61c>
 80093e2:	46bb      	mov	fp, r7
 80093e4:	e04a      	b.n	800947c <_dtoa_r+0x6c4>
 80093e6:	4b06      	ldr	r3, [pc, #24]	; (8009400 <_dtoa_r+0x648>)
 80093e8:	f7f7 f91e 	bl	8000628 <__aeabi_dmul>
 80093ec:	4680      	mov	r8, r0
 80093ee:	4689      	mov	r9, r1
 80093f0:	e7bd      	b.n	800936e <_dtoa_r+0x5b6>
 80093f2:	bf00      	nop
 80093f4:	0801dd00 	.word	0x0801dd00
 80093f8:	0801dcd8 	.word	0x0801dcd8
 80093fc:	3ff00000 	.word	0x3ff00000
 8009400:	40240000 	.word	0x40240000
 8009404:	401c0000 	.word	0x401c0000
 8009408:	40140000 	.word	0x40140000
 800940c:	3fe00000 	.word	0x3fe00000
 8009410:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009414:	9d00      	ldr	r5, [sp, #0]
 8009416:	4642      	mov	r2, r8
 8009418:	464b      	mov	r3, r9
 800941a:	4630      	mov	r0, r6
 800941c:	4639      	mov	r1, r7
 800941e:	f7f7 fa2d 	bl	800087c <__aeabi_ddiv>
 8009422:	f7f7 fbb1 	bl	8000b88 <__aeabi_d2iz>
 8009426:	9001      	str	r0, [sp, #4]
 8009428:	f7f7 f894 	bl	8000554 <__aeabi_i2d>
 800942c:	4642      	mov	r2, r8
 800942e:	464b      	mov	r3, r9
 8009430:	f7f7 f8fa 	bl	8000628 <__aeabi_dmul>
 8009434:	4602      	mov	r2, r0
 8009436:	460b      	mov	r3, r1
 8009438:	4630      	mov	r0, r6
 800943a:	4639      	mov	r1, r7
 800943c:	f7f6 ff3c 	bl	80002b8 <__aeabi_dsub>
 8009440:	9e01      	ldr	r6, [sp, #4]
 8009442:	9f04      	ldr	r7, [sp, #16]
 8009444:	3630      	adds	r6, #48	; 0x30
 8009446:	f805 6b01 	strb.w	r6, [r5], #1
 800944a:	9e00      	ldr	r6, [sp, #0]
 800944c:	1bae      	subs	r6, r5, r6
 800944e:	42b7      	cmp	r7, r6
 8009450:	4602      	mov	r2, r0
 8009452:	460b      	mov	r3, r1
 8009454:	d134      	bne.n	80094c0 <_dtoa_r+0x708>
 8009456:	f7f6 ff31 	bl	80002bc <__adddf3>
 800945a:	4642      	mov	r2, r8
 800945c:	464b      	mov	r3, r9
 800945e:	4606      	mov	r6, r0
 8009460:	460f      	mov	r7, r1
 8009462:	f7f7 fb71 	bl	8000b48 <__aeabi_dcmpgt>
 8009466:	b9c8      	cbnz	r0, 800949c <_dtoa_r+0x6e4>
 8009468:	4642      	mov	r2, r8
 800946a:	464b      	mov	r3, r9
 800946c:	4630      	mov	r0, r6
 800946e:	4639      	mov	r1, r7
 8009470:	f7f7 fb42 	bl	8000af8 <__aeabi_dcmpeq>
 8009474:	b110      	cbz	r0, 800947c <_dtoa_r+0x6c4>
 8009476:	9b01      	ldr	r3, [sp, #4]
 8009478:	07db      	lsls	r3, r3, #31
 800947a:	d40f      	bmi.n	800949c <_dtoa_r+0x6e4>
 800947c:	4651      	mov	r1, sl
 800947e:	4620      	mov	r0, r4
 8009480:	f000 fb18 	bl	8009ab4 <_Bfree>
 8009484:	2300      	movs	r3, #0
 8009486:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009488:	702b      	strb	r3, [r5, #0]
 800948a:	f10b 0301 	add.w	r3, fp, #1
 800948e:	6013      	str	r3, [r2, #0]
 8009490:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009492:	2b00      	cmp	r3, #0
 8009494:	f43f ace2 	beq.w	8008e5c <_dtoa_r+0xa4>
 8009498:	601d      	str	r5, [r3, #0]
 800949a:	e4df      	b.n	8008e5c <_dtoa_r+0xa4>
 800949c:	465f      	mov	r7, fp
 800949e:	462b      	mov	r3, r5
 80094a0:	461d      	mov	r5, r3
 80094a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80094a6:	2a39      	cmp	r2, #57	; 0x39
 80094a8:	d106      	bne.n	80094b8 <_dtoa_r+0x700>
 80094aa:	9a00      	ldr	r2, [sp, #0]
 80094ac:	429a      	cmp	r2, r3
 80094ae:	d1f7      	bne.n	80094a0 <_dtoa_r+0x6e8>
 80094b0:	9900      	ldr	r1, [sp, #0]
 80094b2:	2230      	movs	r2, #48	; 0x30
 80094b4:	3701      	adds	r7, #1
 80094b6:	700a      	strb	r2, [r1, #0]
 80094b8:	781a      	ldrb	r2, [r3, #0]
 80094ba:	3201      	adds	r2, #1
 80094bc:	701a      	strb	r2, [r3, #0]
 80094be:	e790      	b.n	80093e2 <_dtoa_r+0x62a>
 80094c0:	4ba3      	ldr	r3, [pc, #652]	; (8009750 <_dtoa_r+0x998>)
 80094c2:	2200      	movs	r2, #0
 80094c4:	f7f7 f8b0 	bl	8000628 <__aeabi_dmul>
 80094c8:	2200      	movs	r2, #0
 80094ca:	2300      	movs	r3, #0
 80094cc:	4606      	mov	r6, r0
 80094ce:	460f      	mov	r7, r1
 80094d0:	f7f7 fb12 	bl	8000af8 <__aeabi_dcmpeq>
 80094d4:	2800      	cmp	r0, #0
 80094d6:	d09e      	beq.n	8009416 <_dtoa_r+0x65e>
 80094d8:	e7d0      	b.n	800947c <_dtoa_r+0x6c4>
 80094da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80094dc:	2a00      	cmp	r2, #0
 80094de:	f000 80ca 	beq.w	8009676 <_dtoa_r+0x8be>
 80094e2:	9a07      	ldr	r2, [sp, #28]
 80094e4:	2a01      	cmp	r2, #1
 80094e6:	f300 80ad 	bgt.w	8009644 <_dtoa_r+0x88c>
 80094ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80094ec:	2a00      	cmp	r2, #0
 80094ee:	f000 80a5 	beq.w	800963c <_dtoa_r+0x884>
 80094f2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80094f6:	9e08      	ldr	r6, [sp, #32]
 80094f8:	9d05      	ldr	r5, [sp, #20]
 80094fa:	9a05      	ldr	r2, [sp, #20]
 80094fc:	441a      	add	r2, r3
 80094fe:	9205      	str	r2, [sp, #20]
 8009500:	9a06      	ldr	r2, [sp, #24]
 8009502:	2101      	movs	r1, #1
 8009504:	441a      	add	r2, r3
 8009506:	4620      	mov	r0, r4
 8009508:	9206      	str	r2, [sp, #24]
 800950a:	f000 fb89 	bl	8009c20 <__i2b>
 800950e:	4607      	mov	r7, r0
 8009510:	b165      	cbz	r5, 800952c <_dtoa_r+0x774>
 8009512:	9b06      	ldr	r3, [sp, #24]
 8009514:	2b00      	cmp	r3, #0
 8009516:	dd09      	ble.n	800952c <_dtoa_r+0x774>
 8009518:	42ab      	cmp	r3, r5
 800951a:	9a05      	ldr	r2, [sp, #20]
 800951c:	bfa8      	it	ge
 800951e:	462b      	movge	r3, r5
 8009520:	1ad2      	subs	r2, r2, r3
 8009522:	9205      	str	r2, [sp, #20]
 8009524:	9a06      	ldr	r2, [sp, #24]
 8009526:	1aed      	subs	r5, r5, r3
 8009528:	1ad3      	subs	r3, r2, r3
 800952a:	9306      	str	r3, [sp, #24]
 800952c:	9b08      	ldr	r3, [sp, #32]
 800952e:	b1f3      	cbz	r3, 800956e <_dtoa_r+0x7b6>
 8009530:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009532:	2b00      	cmp	r3, #0
 8009534:	f000 80a3 	beq.w	800967e <_dtoa_r+0x8c6>
 8009538:	2e00      	cmp	r6, #0
 800953a:	dd10      	ble.n	800955e <_dtoa_r+0x7a6>
 800953c:	4639      	mov	r1, r7
 800953e:	4632      	mov	r2, r6
 8009540:	4620      	mov	r0, r4
 8009542:	f000 fc2d 	bl	8009da0 <__pow5mult>
 8009546:	4652      	mov	r2, sl
 8009548:	4601      	mov	r1, r0
 800954a:	4607      	mov	r7, r0
 800954c:	4620      	mov	r0, r4
 800954e:	f000 fb7d 	bl	8009c4c <__multiply>
 8009552:	4651      	mov	r1, sl
 8009554:	4680      	mov	r8, r0
 8009556:	4620      	mov	r0, r4
 8009558:	f000 faac 	bl	8009ab4 <_Bfree>
 800955c:	46c2      	mov	sl, r8
 800955e:	9b08      	ldr	r3, [sp, #32]
 8009560:	1b9a      	subs	r2, r3, r6
 8009562:	d004      	beq.n	800956e <_dtoa_r+0x7b6>
 8009564:	4651      	mov	r1, sl
 8009566:	4620      	mov	r0, r4
 8009568:	f000 fc1a 	bl	8009da0 <__pow5mult>
 800956c:	4682      	mov	sl, r0
 800956e:	2101      	movs	r1, #1
 8009570:	4620      	mov	r0, r4
 8009572:	f000 fb55 	bl	8009c20 <__i2b>
 8009576:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009578:	2b00      	cmp	r3, #0
 800957a:	4606      	mov	r6, r0
 800957c:	f340 8081 	ble.w	8009682 <_dtoa_r+0x8ca>
 8009580:	461a      	mov	r2, r3
 8009582:	4601      	mov	r1, r0
 8009584:	4620      	mov	r0, r4
 8009586:	f000 fc0b 	bl	8009da0 <__pow5mult>
 800958a:	9b07      	ldr	r3, [sp, #28]
 800958c:	2b01      	cmp	r3, #1
 800958e:	4606      	mov	r6, r0
 8009590:	dd7a      	ble.n	8009688 <_dtoa_r+0x8d0>
 8009592:	f04f 0800 	mov.w	r8, #0
 8009596:	6933      	ldr	r3, [r6, #16]
 8009598:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800959c:	6918      	ldr	r0, [r3, #16]
 800959e:	f000 faf1 	bl	8009b84 <__hi0bits>
 80095a2:	f1c0 0020 	rsb	r0, r0, #32
 80095a6:	9b06      	ldr	r3, [sp, #24]
 80095a8:	4418      	add	r0, r3
 80095aa:	f010 001f 	ands.w	r0, r0, #31
 80095ae:	f000 8094 	beq.w	80096da <_dtoa_r+0x922>
 80095b2:	f1c0 0320 	rsb	r3, r0, #32
 80095b6:	2b04      	cmp	r3, #4
 80095b8:	f340 8085 	ble.w	80096c6 <_dtoa_r+0x90e>
 80095bc:	9b05      	ldr	r3, [sp, #20]
 80095be:	f1c0 001c 	rsb	r0, r0, #28
 80095c2:	4403      	add	r3, r0
 80095c4:	9305      	str	r3, [sp, #20]
 80095c6:	9b06      	ldr	r3, [sp, #24]
 80095c8:	4403      	add	r3, r0
 80095ca:	4405      	add	r5, r0
 80095cc:	9306      	str	r3, [sp, #24]
 80095ce:	9b05      	ldr	r3, [sp, #20]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	dd05      	ble.n	80095e0 <_dtoa_r+0x828>
 80095d4:	4651      	mov	r1, sl
 80095d6:	461a      	mov	r2, r3
 80095d8:	4620      	mov	r0, r4
 80095da:	f000 fc3b 	bl	8009e54 <__lshift>
 80095de:	4682      	mov	sl, r0
 80095e0:	9b06      	ldr	r3, [sp, #24]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	dd05      	ble.n	80095f2 <_dtoa_r+0x83a>
 80095e6:	4631      	mov	r1, r6
 80095e8:	461a      	mov	r2, r3
 80095ea:	4620      	mov	r0, r4
 80095ec:	f000 fc32 	bl	8009e54 <__lshift>
 80095f0:	4606      	mov	r6, r0
 80095f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d072      	beq.n	80096de <_dtoa_r+0x926>
 80095f8:	4631      	mov	r1, r6
 80095fa:	4650      	mov	r0, sl
 80095fc:	f000 fc96 	bl	8009f2c <__mcmp>
 8009600:	2800      	cmp	r0, #0
 8009602:	da6c      	bge.n	80096de <_dtoa_r+0x926>
 8009604:	2300      	movs	r3, #0
 8009606:	4651      	mov	r1, sl
 8009608:	220a      	movs	r2, #10
 800960a:	4620      	mov	r0, r4
 800960c:	f000 fa74 	bl	8009af8 <__multadd>
 8009610:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009612:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009616:	4682      	mov	sl, r0
 8009618:	2b00      	cmp	r3, #0
 800961a:	f000 81b0 	beq.w	800997e <_dtoa_r+0xbc6>
 800961e:	2300      	movs	r3, #0
 8009620:	4639      	mov	r1, r7
 8009622:	220a      	movs	r2, #10
 8009624:	4620      	mov	r0, r4
 8009626:	f000 fa67 	bl	8009af8 <__multadd>
 800962a:	9b01      	ldr	r3, [sp, #4]
 800962c:	2b00      	cmp	r3, #0
 800962e:	4607      	mov	r7, r0
 8009630:	f300 8096 	bgt.w	8009760 <_dtoa_r+0x9a8>
 8009634:	9b07      	ldr	r3, [sp, #28]
 8009636:	2b02      	cmp	r3, #2
 8009638:	dc59      	bgt.n	80096ee <_dtoa_r+0x936>
 800963a:	e091      	b.n	8009760 <_dtoa_r+0x9a8>
 800963c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800963e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009642:	e758      	b.n	80094f6 <_dtoa_r+0x73e>
 8009644:	9b04      	ldr	r3, [sp, #16]
 8009646:	1e5e      	subs	r6, r3, #1
 8009648:	9b08      	ldr	r3, [sp, #32]
 800964a:	42b3      	cmp	r3, r6
 800964c:	bfbf      	itttt	lt
 800964e:	9b08      	ldrlt	r3, [sp, #32]
 8009650:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8009652:	9608      	strlt	r6, [sp, #32]
 8009654:	1af3      	sublt	r3, r6, r3
 8009656:	bfb4      	ite	lt
 8009658:	18d2      	addlt	r2, r2, r3
 800965a:	1b9e      	subge	r6, r3, r6
 800965c:	9b04      	ldr	r3, [sp, #16]
 800965e:	bfbc      	itt	lt
 8009660:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8009662:	2600      	movlt	r6, #0
 8009664:	2b00      	cmp	r3, #0
 8009666:	bfb7      	itett	lt
 8009668:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800966c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8009670:	1a9d      	sublt	r5, r3, r2
 8009672:	2300      	movlt	r3, #0
 8009674:	e741      	b.n	80094fa <_dtoa_r+0x742>
 8009676:	9e08      	ldr	r6, [sp, #32]
 8009678:	9d05      	ldr	r5, [sp, #20]
 800967a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800967c:	e748      	b.n	8009510 <_dtoa_r+0x758>
 800967e:	9a08      	ldr	r2, [sp, #32]
 8009680:	e770      	b.n	8009564 <_dtoa_r+0x7ac>
 8009682:	9b07      	ldr	r3, [sp, #28]
 8009684:	2b01      	cmp	r3, #1
 8009686:	dc19      	bgt.n	80096bc <_dtoa_r+0x904>
 8009688:	9b02      	ldr	r3, [sp, #8]
 800968a:	b9bb      	cbnz	r3, 80096bc <_dtoa_r+0x904>
 800968c:	9b03      	ldr	r3, [sp, #12]
 800968e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009692:	b99b      	cbnz	r3, 80096bc <_dtoa_r+0x904>
 8009694:	9b03      	ldr	r3, [sp, #12]
 8009696:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800969a:	0d1b      	lsrs	r3, r3, #20
 800969c:	051b      	lsls	r3, r3, #20
 800969e:	b183      	cbz	r3, 80096c2 <_dtoa_r+0x90a>
 80096a0:	9b05      	ldr	r3, [sp, #20]
 80096a2:	3301      	adds	r3, #1
 80096a4:	9305      	str	r3, [sp, #20]
 80096a6:	9b06      	ldr	r3, [sp, #24]
 80096a8:	3301      	adds	r3, #1
 80096aa:	9306      	str	r3, [sp, #24]
 80096ac:	f04f 0801 	mov.w	r8, #1
 80096b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	f47f af6f 	bne.w	8009596 <_dtoa_r+0x7de>
 80096b8:	2001      	movs	r0, #1
 80096ba:	e774      	b.n	80095a6 <_dtoa_r+0x7ee>
 80096bc:	f04f 0800 	mov.w	r8, #0
 80096c0:	e7f6      	b.n	80096b0 <_dtoa_r+0x8f8>
 80096c2:	4698      	mov	r8, r3
 80096c4:	e7f4      	b.n	80096b0 <_dtoa_r+0x8f8>
 80096c6:	d082      	beq.n	80095ce <_dtoa_r+0x816>
 80096c8:	9a05      	ldr	r2, [sp, #20]
 80096ca:	331c      	adds	r3, #28
 80096cc:	441a      	add	r2, r3
 80096ce:	9205      	str	r2, [sp, #20]
 80096d0:	9a06      	ldr	r2, [sp, #24]
 80096d2:	441a      	add	r2, r3
 80096d4:	441d      	add	r5, r3
 80096d6:	9206      	str	r2, [sp, #24]
 80096d8:	e779      	b.n	80095ce <_dtoa_r+0x816>
 80096da:	4603      	mov	r3, r0
 80096dc:	e7f4      	b.n	80096c8 <_dtoa_r+0x910>
 80096de:	9b04      	ldr	r3, [sp, #16]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	dc37      	bgt.n	8009754 <_dtoa_r+0x99c>
 80096e4:	9b07      	ldr	r3, [sp, #28]
 80096e6:	2b02      	cmp	r3, #2
 80096e8:	dd34      	ble.n	8009754 <_dtoa_r+0x99c>
 80096ea:	9b04      	ldr	r3, [sp, #16]
 80096ec:	9301      	str	r3, [sp, #4]
 80096ee:	9b01      	ldr	r3, [sp, #4]
 80096f0:	b963      	cbnz	r3, 800970c <_dtoa_r+0x954>
 80096f2:	4631      	mov	r1, r6
 80096f4:	2205      	movs	r2, #5
 80096f6:	4620      	mov	r0, r4
 80096f8:	f000 f9fe 	bl	8009af8 <__multadd>
 80096fc:	4601      	mov	r1, r0
 80096fe:	4606      	mov	r6, r0
 8009700:	4650      	mov	r0, sl
 8009702:	f000 fc13 	bl	8009f2c <__mcmp>
 8009706:	2800      	cmp	r0, #0
 8009708:	f73f adbb 	bgt.w	8009282 <_dtoa_r+0x4ca>
 800970c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800970e:	9d00      	ldr	r5, [sp, #0]
 8009710:	ea6f 0b03 	mvn.w	fp, r3
 8009714:	f04f 0800 	mov.w	r8, #0
 8009718:	4631      	mov	r1, r6
 800971a:	4620      	mov	r0, r4
 800971c:	f000 f9ca 	bl	8009ab4 <_Bfree>
 8009720:	2f00      	cmp	r7, #0
 8009722:	f43f aeab 	beq.w	800947c <_dtoa_r+0x6c4>
 8009726:	f1b8 0f00 	cmp.w	r8, #0
 800972a:	d005      	beq.n	8009738 <_dtoa_r+0x980>
 800972c:	45b8      	cmp	r8, r7
 800972e:	d003      	beq.n	8009738 <_dtoa_r+0x980>
 8009730:	4641      	mov	r1, r8
 8009732:	4620      	mov	r0, r4
 8009734:	f000 f9be 	bl	8009ab4 <_Bfree>
 8009738:	4639      	mov	r1, r7
 800973a:	4620      	mov	r0, r4
 800973c:	f000 f9ba 	bl	8009ab4 <_Bfree>
 8009740:	e69c      	b.n	800947c <_dtoa_r+0x6c4>
 8009742:	2600      	movs	r6, #0
 8009744:	4637      	mov	r7, r6
 8009746:	e7e1      	b.n	800970c <_dtoa_r+0x954>
 8009748:	46bb      	mov	fp, r7
 800974a:	4637      	mov	r7, r6
 800974c:	e599      	b.n	8009282 <_dtoa_r+0x4ca>
 800974e:	bf00      	nop
 8009750:	40240000 	.word	0x40240000
 8009754:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009756:	2b00      	cmp	r3, #0
 8009758:	f000 80c8 	beq.w	80098ec <_dtoa_r+0xb34>
 800975c:	9b04      	ldr	r3, [sp, #16]
 800975e:	9301      	str	r3, [sp, #4]
 8009760:	2d00      	cmp	r5, #0
 8009762:	dd05      	ble.n	8009770 <_dtoa_r+0x9b8>
 8009764:	4639      	mov	r1, r7
 8009766:	462a      	mov	r2, r5
 8009768:	4620      	mov	r0, r4
 800976a:	f000 fb73 	bl	8009e54 <__lshift>
 800976e:	4607      	mov	r7, r0
 8009770:	f1b8 0f00 	cmp.w	r8, #0
 8009774:	d05b      	beq.n	800982e <_dtoa_r+0xa76>
 8009776:	6879      	ldr	r1, [r7, #4]
 8009778:	4620      	mov	r0, r4
 800977a:	f000 f95b 	bl	8009a34 <_Balloc>
 800977e:	4605      	mov	r5, r0
 8009780:	b928      	cbnz	r0, 800978e <_dtoa_r+0x9d6>
 8009782:	4b83      	ldr	r3, [pc, #524]	; (8009990 <_dtoa_r+0xbd8>)
 8009784:	4602      	mov	r2, r0
 8009786:	f240 21ef 	movw	r1, #751	; 0x2ef
 800978a:	f7ff bb2e 	b.w	8008dea <_dtoa_r+0x32>
 800978e:	693a      	ldr	r2, [r7, #16]
 8009790:	3202      	adds	r2, #2
 8009792:	0092      	lsls	r2, r2, #2
 8009794:	f107 010c 	add.w	r1, r7, #12
 8009798:	300c      	adds	r0, #12
 800979a:	f7ff fa59 	bl	8008c50 <memcpy>
 800979e:	2201      	movs	r2, #1
 80097a0:	4629      	mov	r1, r5
 80097a2:	4620      	mov	r0, r4
 80097a4:	f000 fb56 	bl	8009e54 <__lshift>
 80097a8:	9b00      	ldr	r3, [sp, #0]
 80097aa:	3301      	adds	r3, #1
 80097ac:	9304      	str	r3, [sp, #16]
 80097ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 80097b2:	4413      	add	r3, r2
 80097b4:	9308      	str	r3, [sp, #32]
 80097b6:	9b02      	ldr	r3, [sp, #8]
 80097b8:	f003 0301 	and.w	r3, r3, #1
 80097bc:	46b8      	mov	r8, r7
 80097be:	9306      	str	r3, [sp, #24]
 80097c0:	4607      	mov	r7, r0
 80097c2:	9b04      	ldr	r3, [sp, #16]
 80097c4:	4631      	mov	r1, r6
 80097c6:	3b01      	subs	r3, #1
 80097c8:	4650      	mov	r0, sl
 80097ca:	9301      	str	r3, [sp, #4]
 80097cc:	f7ff fa6c 	bl	8008ca8 <quorem>
 80097d0:	4641      	mov	r1, r8
 80097d2:	9002      	str	r0, [sp, #8]
 80097d4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80097d8:	4650      	mov	r0, sl
 80097da:	f000 fba7 	bl	8009f2c <__mcmp>
 80097de:	463a      	mov	r2, r7
 80097e0:	9005      	str	r0, [sp, #20]
 80097e2:	4631      	mov	r1, r6
 80097e4:	4620      	mov	r0, r4
 80097e6:	f000 fbbd 	bl	8009f64 <__mdiff>
 80097ea:	68c2      	ldr	r2, [r0, #12]
 80097ec:	4605      	mov	r5, r0
 80097ee:	bb02      	cbnz	r2, 8009832 <_dtoa_r+0xa7a>
 80097f0:	4601      	mov	r1, r0
 80097f2:	4650      	mov	r0, sl
 80097f4:	f000 fb9a 	bl	8009f2c <__mcmp>
 80097f8:	4602      	mov	r2, r0
 80097fa:	4629      	mov	r1, r5
 80097fc:	4620      	mov	r0, r4
 80097fe:	9209      	str	r2, [sp, #36]	; 0x24
 8009800:	f000 f958 	bl	8009ab4 <_Bfree>
 8009804:	9b07      	ldr	r3, [sp, #28]
 8009806:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009808:	9d04      	ldr	r5, [sp, #16]
 800980a:	ea43 0102 	orr.w	r1, r3, r2
 800980e:	9b06      	ldr	r3, [sp, #24]
 8009810:	4319      	orrs	r1, r3
 8009812:	d110      	bne.n	8009836 <_dtoa_r+0xa7e>
 8009814:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009818:	d029      	beq.n	800986e <_dtoa_r+0xab6>
 800981a:	9b05      	ldr	r3, [sp, #20]
 800981c:	2b00      	cmp	r3, #0
 800981e:	dd02      	ble.n	8009826 <_dtoa_r+0xa6e>
 8009820:	9b02      	ldr	r3, [sp, #8]
 8009822:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8009826:	9b01      	ldr	r3, [sp, #4]
 8009828:	f883 9000 	strb.w	r9, [r3]
 800982c:	e774      	b.n	8009718 <_dtoa_r+0x960>
 800982e:	4638      	mov	r0, r7
 8009830:	e7ba      	b.n	80097a8 <_dtoa_r+0x9f0>
 8009832:	2201      	movs	r2, #1
 8009834:	e7e1      	b.n	80097fa <_dtoa_r+0xa42>
 8009836:	9b05      	ldr	r3, [sp, #20]
 8009838:	2b00      	cmp	r3, #0
 800983a:	db04      	blt.n	8009846 <_dtoa_r+0xa8e>
 800983c:	9907      	ldr	r1, [sp, #28]
 800983e:	430b      	orrs	r3, r1
 8009840:	9906      	ldr	r1, [sp, #24]
 8009842:	430b      	orrs	r3, r1
 8009844:	d120      	bne.n	8009888 <_dtoa_r+0xad0>
 8009846:	2a00      	cmp	r2, #0
 8009848:	dded      	ble.n	8009826 <_dtoa_r+0xa6e>
 800984a:	4651      	mov	r1, sl
 800984c:	2201      	movs	r2, #1
 800984e:	4620      	mov	r0, r4
 8009850:	f000 fb00 	bl	8009e54 <__lshift>
 8009854:	4631      	mov	r1, r6
 8009856:	4682      	mov	sl, r0
 8009858:	f000 fb68 	bl	8009f2c <__mcmp>
 800985c:	2800      	cmp	r0, #0
 800985e:	dc03      	bgt.n	8009868 <_dtoa_r+0xab0>
 8009860:	d1e1      	bne.n	8009826 <_dtoa_r+0xa6e>
 8009862:	f019 0f01 	tst.w	r9, #1
 8009866:	d0de      	beq.n	8009826 <_dtoa_r+0xa6e>
 8009868:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800986c:	d1d8      	bne.n	8009820 <_dtoa_r+0xa68>
 800986e:	9a01      	ldr	r2, [sp, #4]
 8009870:	2339      	movs	r3, #57	; 0x39
 8009872:	7013      	strb	r3, [r2, #0]
 8009874:	462b      	mov	r3, r5
 8009876:	461d      	mov	r5, r3
 8009878:	3b01      	subs	r3, #1
 800987a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800987e:	2a39      	cmp	r2, #57	; 0x39
 8009880:	d06c      	beq.n	800995c <_dtoa_r+0xba4>
 8009882:	3201      	adds	r2, #1
 8009884:	701a      	strb	r2, [r3, #0]
 8009886:	e747      	b.n	8009718 <_dtoa_r+0x960>
 8009888:	2a00      	cmp	r2, #0
 800988a:	dd07      	ble.n	800989c <_dtoa_r+0xae4>
 800988c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009890:	d0ed      	beq.n	800986e <_dtoa_r+0xab6>
 8009892:	9a01      	ldr	r2, [sp, #4]
 8009894:	f109 0301 	add.w	r3, r9, #1
 8009898:	7013      	strb	r3, [r2, #0]
 800989a:	e73d      	b.n	8009718 <_dtoa_r+0x960>
 800989c:	9b04      	ldr	r3, [sp, #16]
 800989e:	9a08      	ldr	r2, [sp, #32]
 80098a0:	f803 9c01 	strb.w	r9, [r3, #-1]
 80098a4:	4293      	cmp	r3, r2
 80098a6:	d043      	beq.n	8009930 <_dtoa_r+0xb78>
 80098a8:	4651      	mov	r1, sl
 80098aa:	2300      	movs	r3, #0
 80098ac:	220a      	movs	r2, #10
 80098ae:	4620      	mov	r0, r4
 80098b0:	f000 f922 	bl	8009af8 <__multadd>
 80098b4:	45b8      	cmp	r8, r7
 80098b6:	4682      	mov	sl, r0
 80098b8:	f04f 0300 	mov.w	r3, #0
 80098bc:	f04f 020a 	mov.w	r2, #10
 80098c0:	4641      	mov	r1, r8
 80098c2:	4620      	mov	r0, r4
 80098c4:	d107      	bne.n	80098d6 <_dtoa_r+0xb1e>
 80098c6:	f000 f917 	bl	8009af8 <__multadd>
 80098ca:	4680      	mov	r8, r0
 80098cc:	4607      	mov	r7, r0
 80098ce:	9b04      	ldr	r3, [sp, #16]
 80098d0:	3301      	adds	r3, #1
 80098d2:	9304      	str	r3, [sp, #16]
 80098d4:	e775      	b.n	80097c2 <_dtoa_r+0xa0a>
 80098d6:	f000 f90f 	bl	8009af8 <__multadd>
 80098da:	4639      	mov	r1, r7
 80098dc:	4680      	mov	r8, r0
 80098de:	2300      	movs	r3, #0
 80098e0:	220a      	movs	r2, #10
 80098e2:	4620      	mov	r0, r4
 80098e4:	f000 f908 	bl	8009af8 <__multadd>
 80098e8:	4607      	mov	r7, r0
 80098ea:	e7f0      	b.n	80098ce <_dtoa_r+0xb16>
 80098ec:	9b04      	ldr	r3, [sp, #16]
 80098ee:	9301      	str	r3, [sp, #4]
 80098f0:	9d00      	ldr	r5, [sp, #0]
 80098f2:	4631      	mov	r1, r6
 80098f4:	4650      	mov	r0, sl
 80098f6:	f7ff f9d7 	bl	8008ca8 <quorem>
 80098fa:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80098fe:	9b00      	ldr	r3, [sp, #0]
 8009900:	f805 9b01 	strb.w	r9, [r5], #1
 8009904:	1aea      	subs	r2, r5, r3
 8009906:	9b01      	ldr	r3, [sp, #4]
 8009908:	4293      	cmp	r3, r2
 800990a:	dd07      	ble.n	800991c <_dtoa_r+0xb64>
 800990c:	4651      	mov	r1, sl
 800990e:	2300      	movs	r3, #0
 8009910:	220a      	movs	r2, #10
 8009912:	4620      	mov	r0, r4
 8009914:	f000 f8f0 	bl	8009af8 <__multadd>
 8009918:	4682      	mov	sl, r0
 800991a:	e7ea      	b.n	80098f2 <_dtoa_r+0xb3a>
 800991c:	9b01      	ldr	r3, [sp, #4]
 800991e:	2b00      	cmp	r3, #0
 8009920:	bfc8      	it	gt
 8009922:	461d      	movgt	r5, r3
 8009924:	9b00      	ldr	r3, [sp, #0]
 8009926:	bfd8      	it	le
 8009928:	2501      	movle	r5, #1
 800992a:	441d      	add	r5, r3
 800992c:	f04f 0800 	mov.w	r8, #0
 8009930:	4651      	mov	r1, sl
 8009932:	2201      	movs	r2, #1
 8009934:	4620      	mov	r0, r4
 8009936:	f000 fa8d 	bl	8009e54 <__lshift>
 800993a:	4631      	mov	r1, r6
 800993c:	4682      	mov	sl, r0
 800993e:	f000 faf5 	bl	8009f2c <__mcmp>
 8009942:	2800      	cmp	r0, #0
 8009944:	dc96      	bgt.n	8009874 <_dtoa_r+0xabc>
 8009946:	d102      	bne.n	800994e <_dtoa_r+0xb96>
 8009948:	f019 0f01 	tst.w	r9, #1
 800994c:	d192      	bne.n	8009874 <_dtoa_r+0xabc>
 800994e:	462b      	mov	r3, r5
 8009950:	461d      	mov	r5, r3
 8009952:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009956:	2a30      	cmp	r2, #48	; 0x30
 8009958:	d0fa      	beq.n	8009950 <_dtoa_r+0xb98>
 800995a:	e6dd      	b.n	8009718 <_dtoa_r+0x960>
 800995c:	9a00      	ldr	r2, [sp, #0]
 800995e:	429a      	cmp	r2, r3
 8009960:	d189      	bne.n	8009876 <_dtoa_r+0xabe>
 8009962:	f10b 0b01 	add.w	fp, fp, #1
 8009966:	2331      	movs	r3, #49	; 0x31
 8009968:	e796      	b.n	8009898 <_dtoa_r+0xae0>
 800996a:	4b0a      	ldr	r3, [pc, #40]	; (8009994 <_dtoa_r+0xbdc>)
 800996c:	f7ff ba99 	b.w	8008ea2 <_dtoa_r+0xea>
 8009970:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009972:	2b00      	cmp	r3, #0
 8009974:	f47f aa6d 	bne.w	8008e52 <_dtoa_r+0x9a>
 8009978:	4b07      	ldr	r3, [pc, #28]	; (8009998 <_dtoa_r+0xbe0>)
 800997a:	f7ff ba92 	b.w	8008ea2 <_dtoa_r+0xea>
 800997e:	9b01      	ldr	r3, [sp, #4]
 8009980:	2b00      	cmp	r3, #0
 8009982:	dcb5      	bgt.n	80098f0 <_dtoa_r+0xb38>
 8009984:	9b07      	ldr	r3, [sp, #28]
 8009986:	2b02      	cmp	r3, #2
 8009988:	f73f aeb1 	bgt.w	80096ee <_dtoa_r+0x936>
 800998c:	e7b0      	b.n	80098f0 <_dtoa_r+0xb38>
 800998e:	bf00      	nop
 8009990:	0801dc68 	.word	0x0801dc68
 8009994:	0801db8c 	.word	0x0801db8c
 8009998:	0801dbec 	.word	0x0801dbec

0800999c <_free_r>:
 800999c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800999e:	2900      	cmp	r1, #0
 80099a0:	d044      	beq.n	8009a2c <_free_r+0x90>
 80099a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80099a6:	9001      	str	r0, [sp, #4]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	f1a1 0404 	sub.w	r4, r1, #4
 80099ae:	bfb8      	it	lt
 80099b0:	18e4      	addlt	r4, r4, r3
 80099b2:	f7fe fa57 	bl	8007e64 <__malloc_lock>
 80099b6:	4a1e      	ldr	r2, [pc, #120]	; (8009a30 <_free_r+0x94>)
 80099b8:	9801      	ldr	r0, [sp, #4]
 80099ba:	6813      	ldr	r3, [r2, #0]
 80099bc:	b933      	cbnz	r3, 80099cc <_free_r+0x30>
 80099be:	6063      	str	r3, [r4, #4]
 80099c0:	6014      	str	r4, [r2, #0]
 80099c2:	b003      	add	sp, #12
 80099c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80099c8:	f7fe ba52 	b.w	8007e70 <__malloc_unlock>
 80099cc:	42a3      	cmp	r3, r4
 80099ce:	d908      	bls.n	80099e2 <_free_r+0x46>
 80099d0:	6825      	ldr	r5, [r4, #0]
 80099d2:	1961      	adds	r1, r4, r5
 80099d4:	428b      	cmp	r3, r1
 80099d6:	bf01      	itttt	eq
 80099d8:	6819      	ldreq	r1, [r3, #0]
 80099da:	685b      	ldreq	r3, [r3, #4]
 80099dc:	1949      	addeq	r1, r1, r5
 80099de:	6021      	streq	r1, [r4, #0]
 80099e0:	e7ed      	b.n	80099be <_free_r+0x22>
 80099e2:	461a      	mov	r2, r3
 80099e4:	685b      	ldr	r3, [r3, #4]
 80099e6:	b10b      	cbz	r3, 80099ec <_free_r+0x50>
 80099e8:	42a3      	cmp	r3, r4
 80099ea:	d9fa      	bls.n	80099e2 <_free_r+0x46>
 80099ec:	6811      	ldr	r1, [r2, #0]
 80099ee:	1855      	adds	r5, r2, r1
 80099f0:	42a5      	cmp	r5, r4
 80099f2:	d10b      	bne.n	8009a0c <_free_r+0x70>
 80099f4:	6824      	ldr	r4, [r4, #0]
 80099f6:	4421      	add	r1, r4
 80099f8:	1854      	adds	r4, r2, r1
 80099fa:	42a3      	cmp	r3, r4
 80099fc:	6011      	str	r1, [r2, #0]
 80099fe:	d1e0      	bne.n	80099c2 <_free_r+0x26>
 8009a00:	681c      	ldr	r4, [r3, #0]
 8009a02:	685b      	ldr	r3, [r3, #4]
 8009a04:	6053      	str	r3, [r2, #4]
 8009a06:	440c      	add	r4, r1
 8009a08:	6014      	str	r4, [r2, #0]
 8009a0a:	e7da      	b.n	80099c2 <_free_r+0x26>
 8009a0c:	d902      	bls.n	8009a14 <_free_r+0x78>
 8009a0e:	230c      	movs	r3, #12
 8009a10:	6003      	str	r3, [r0, #0]
 8009a12:	e7d6      	b.n	80099c2 <_free_r+0x26>
 8009a14:	6825      	ldr	r5, [r4, #0]
 8009a16:	1961      	adds	r1, r4, r5
 8009a18:	428b      	cmp	r3, r1
 8009a1a:	bf04      	itt	eq
 8009a1c:	6819      	ldreq	r1, [r3, #0]
 8009a1e:	685b      	ldreq	r3, [r3, #4]
 8009a20:	6063      	str	r3, [r4, #4]
 8009a22:	bf04      	itt	eq
 8009a24:	1949      	addeq	r1, r1, r5
 8009a26:	6021      	streq	r1, [r4, #0]
 8009a28:	6054      	str	r4, [r2, #4]
 8009a2a:	e7ca      	b.n	80099c2 <_free_r+0x26>
 8009a2c:	b003      	add	sp, #12
 8009a2e:	bd30      	pop	{r4, r5, pc}
 8009a30:	20050910 	.word	0x20050910

08009a34 <_Balloc>:
 8009a34:	b570      	push	{r4, r5, r6, lr}
 8009a36:	69c6      	ldr	r6, [r0, #28]
 8009a38:	4604      	mov	r4, r0
 8009a3a:	460d      	mov	r5, r1
 8009a3c:	b976      	cbnz	r6, 8009a5c <_Balloc+0x28>
 8009a3e:	2010      	movs	r0, #16
 8009a40:	f7fe f968 	bl	8007d14 <malloc>
 8009a44:	4602      	mov	r2, r0
 8009a46:	61e0      	str	r0, [r4, #28]
 8009a48:	b920      	cbnz	r0, 8009a54 <_Balloc+0x20>
 8009a4a:	4b18      	ldr	r3, [pc, #96]	; (8009aac <_Balloc+0x78>)
 8009a4c:	4818      	ldr	r0, [pc, #96]	; (8009ab0 <_Balloc+0x7c>)
 8009a4e:	216b      	movs	r1, #107	; 0x6b
 8009a50:	f7ff f90c 	bl	8008c6c <__assert_func>
 8009a54:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009a58:	6006      	str	r6, [r0, #0]
 8009a5a:	60c6      	str	r6, [r0, #12]
 8009a5c:	69e6      	ldr	r6, [r4, #28]
 8009a5e:	68f3      	ldr	r3, [r6, #12]
 8009a60:	b183      	cbz	r3, 8009a84 <_Balloc+0x50>
 8009a62:	69e3      	ldr	r3, [r4, #28]
 8009a64:	68db      	ldr	r3, [r3, #12]
 8009a66:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009a6a:	b9b8      	cbnz	r0, 8009a9c <_Balloc+0x68>
 8009a6c:	2101      	movs	r1, #1
 8009a6e:	fa01 f605 	lsl.w	r6, r1, r5
 8009a72:	1d72      	adds	r2, r6, #5
 8009a74:	0092      	lsls	r2, r2, #2
 8009a76:	4620      	mov	r0, r4
 8009a78:	f000 fde7 	bl	800a64a <_calloc_r>
 8009a7c:	b160      	cbz	r0, 8009a98 <_Balloc+0x64>
 8009a7e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009a82:	e00e      	b.n	8009aa2 <_Balloc+0x6e>
 8009a84:	2221      	movs	r2, #33	; 0x21
 8009a86:	2104      	movs	r1, #4
 8009a88:	4620      	mov	r0, r4
 8009a8a:	f000 fdde 	bl	800a64a <_calloc_r>
 8009a8e:	69e3      	ldr	r3, [r4, #28]
 8009a90:	60f0      	str	r0, [r6, #12]
 8009a92:	68db      	ldr	r3, [r3, #12]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d1e4      	bne.n	8009a62 <_Balloc+0x2e>
 8009a98:	2000      	movs	r0, #0
 8009a9a:	bd70      	pop	{r4, r5, r6, pc}
 8009a9c:	6802      	ldr	r2, [r0, #0]
 8009a9e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009aa8:	e7f7      	b.n	8009a9a <_Balloc+0x66>
 8009aaa:	bf00      	nop
 8009aac:	0801dbf9 	.word	0x0801dbf9
 8009ab0:	0801dc79 	.word	0x0801dc79

08009ab4 <_Bfree>:
 8009ab4:	b570      	push	{r4, r5, r6, lr}
 8009ab6:	69c6      	ldr	r6, [r0, #28]
 8009ab8:	4605      	mov	r5, r0
 8009aba:	460c      	mov	r4, r1
 8009abc:	b976      	cbnz	r6, 8009adc <_Bfree+0x28>
 8009abe:	2010      	movs	r0, #16
 8009ac0:	f7fe f928 	bl	8007d14 <malloc>
 8009ac4:	4602      	mov	r2, r0
 8009ac6:	61e8      	str	r0, [r5, #28]
 8009ac8:	b920      	cbnz	r0, 8009ad4 <_Bfree+0x20>
 8009aca:	4b09      	ldr	r3, [pc, #36]	; (8009af0 <_Bfree+0x3c>)
 8009acc:	4809      	ldr	r0, [pc, #36]	; (8009af4 <_Bfree+0x40>)
 8009ace:	218f      	movs	r1, #143	; 0x8f
 8009ad0:	f7ff f8cc 	bl	8008c6c <__assert_func>
 8009ad4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009ad8:	6006      	str	r6, [r0, #0]
 8009ada:	60c6      	str	r6, [r0, #12]
 8009adc:	b13c      	cbz	r4, 8009aee <_Bfree+0x3a>
 8009ade:	69eb      	ldr	r3, [r5, #28]
 8009ae0:	6862      	ldr	r2, [r4, #4]
 8009ae2:	68db      	ldr	r3, [r3, #12]
 8009ae4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009ae8:	6021      	str	r1, [r4, #0]
 8009aea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009aee:	bd70      	pop	{r4, r5, r6, pc}
 8009af0:	0801dbf9 	.word	0x0801dbf9
 8009af4:	0801dc79 	.word	0x0801dc79

08009af8 <__multadd>:
 8009af8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009afc:	690d      	ldr	r5, [r1, #16]
 8009afe:	4607      	mov	r7, r0
 8009b00:	460c      	mov	r4, r1
 8009b02:	461e      	mov	r6, r3
 8009b04:	f101 0c14 	add.w	ip, r1, #20
 8009b08:	2000      	movs	r0, #0
 8009b0a:	f8dc 3000 	ldr.w	r3, [ip]
 8009b0e:	b299      	uxth	r1, r3
 8009b10:	fb02 6101 	mla	r1, r2, r1, r6
 8009b14:	0c1e      	lsrs	r6, r3, #16
 8009b16:	0c0b      	lsrs	r3, r1, #16
 8009b18:	fb02 3306 	mla	r3, r2, r6, r3
 8009b1c:	b289      	uxth	r1, r1
 8009b1e:	3001      	adds	r0, #1
 8009b20:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009b24:	4285      	cmp	r5, r0
 8009b26:	f84c 1b04 	str.w	r1, [ip], #4
 8009b2a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009b2e:	dcec      	bgt.n	8009b0a <__multadd+0x12>
 8009b30:	b30e      	cbz	r6, 8009b76 <__multadd+0x7e>
 8009b32:	68a3      	ldr	r3, [r4, #8]
 8009b34:	42ab      	cmp	r3, r5
 8009b36:	dc19      	bgt.n	8009b6c <__multadd+0x74>
 8009b38:	6861      	ldr	r1, [r4, #4]
 8009b3a:	4638      	mov	r0, r7
 8009b3c:	3101      	adds	r1, #1
 8009b3e:	f7ff ff79 	bl	8009a34 <_Balloc>
 8009b42:	4680      	mov	r8, r0
 8009b44:	b928      	cbnz	r0, 8009b52 <__multadd+0x5a>
 8009b46:	4602      	mov	r2, r0
 8009b48:	4b0c      	ldr	r3, [pc, #48]	; (8009b7c <__multadd+0x84>)
 8009b4a:	480d      	ldr	r0, [pc, #52]	; (8009b80 <__multadd+0x88>)
 8009b4c:	21ba      	movs	r1, #186	; 0xba
 8009b4e:	f7ff f88d 	bl	8008c6c <__assert_func>
 8009b52:	6922      	ldr	r2, [r4, #16]
 8009b54:	3202      	adds	r2, #2
 8009b56:	f104 010c 	add.w	r1, r4, #12
 8009b5a:	0092      	lsls	r2, r2, #2
 8009b5c:	300c      	adds	r0, #12
 8009b5e:	f7ff f877 	bl	8008c50 <memcpy>
 8009b62:	4621      	mov	r1, r4
 8009b64:	4638      	mov	r0, r7
 8009b66:	f7ff ffa5 	bl	8009ab4 <_Bfree>
 8009b6a:	4644      	mov	r4, r8
 8009b6c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009b70:	3501      	adds	r5, #1
 8009b72:	615e      	str	r6, [r3, #20]
 8009b74:	6125      	str	r5, [r4, #16]
 8009b76:	4620      	mov	r0, r4
 8009b78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b7c:	0801dc68 	.word	0x0801dc68
 8009b80:	0801dc79 	.word	0x0801dc79

08009b84 <__hi0bits>:
 8009b84:	0c03      	lsrs	r3, r0, #16
 8009b86:	041b      	lsls	r3, r3, #16
 8009b88:	b9d3      	cbnz	r3, 8009bc0 <__hi0bits+0x3c>
 8009b8a:	0400      	lsls	r0, r0, #16
 8009b8c:	2310      	movs	r3, #16
 8009b8e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009b92:	bf04      	itt	eq
 8009b94:	0200      	lsleq	r0, r0, #8
 8009b96:	3308      	addeq	r3, #8
 8009b98:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009b9c:	bf04      	itt	eq
 8009b9e:	0100      	lsleq	r0, r0, #4
 8009ba0:	3304      	addeq	r3, #4
 8009ba2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009ba6:	bf04      	itt	eq
 8009ba8:	0080      	lsleq	r0, r0, #2
 8009baa:	3302      	addeq	r3, #2
 8009bac:	2800      	cmp	r0, #0
 8009bae:	db05      	blt.n	8009bbc <__hi0bits+0x38>
 8009bb0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009bb4:	f103 0301 	add.w	r3, r3, #1
 8009bb8:	bf08      	it	eq
 8009bba:	2320      	moveq	r3, #32
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	4770      	bx	lr
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	e7e4      	b.n	8009b8e <__hi0bits+0xa>

08009bc4 <__lo0bits>:
 8009bc4:	6803      	ldr	r3, [r0, #0]
 8009bc6:	f013 0207 	ands.w	r2, r3, #7
 8009bca:	d00c      	beq.n	8009be6 <__lo0bits+0x22>
 8009bcc:	07d9      	lsls	r1, r3, #31
 8009bce:	d422      	bmi.n	8009c16 <__lo0bits+0x52>
 8009bd0:	079a      	lsls	r2, r3, #30
 8009bd2:	bf49      	itett	mi
 8009bd4:	085b      	lsrmi	r3, r3, #1
 8009bd6:	089b      	lsrpl	r3, r3, #2
 8009bd8:	6003      	strmi	r3, [r0, #0]
 8009bda:	2201      	movmi	r2, #1
 8009bdc:	bf5c      	itt	pl
 8009bde:	6003      	strpl	r3, [r0, #0]
 8009be0:	2202      	movpl	r2, #2
 8009be2:	4610      	mov	r0, r2
 8009be4:	4770      	bx	lr
 8009be6:	b299      	uxth	r1, r3
 8009be8:	b909      	cbnz	r1, 8009bee <__lo0bits+0x2a>
 8009bea:	0c1b      	lsrs	r3, r3, #16
 8009bec:	2210      	movs	r2, #16
 8009bee:	b2d9      	uxtb	r1, r3
 8009bf0:	b909      	cbnz	r1, 8009bf6 <__lo0bits+0x32>
 8009bf2:	3208      	adds	r2, #8
 8009bf4:	0a1b      	lsrs	r3, r3, #8
 8009bf6:	0719      	lsls	r1, r3, #28
 8009bf8:	bf04      	itt	eq
 8009bfa:	091b      	lsreq	r3, r3, #4
 8009bfc:	3204      	addeq	r2, #4
 8009bfe:	0799      	lsls	r1, r3, #30
 8009c00:	bf04      	itt	eq
 8009c02:	089b      	lsreq	r3, r3, #2
 8009c04:	3202      	addeq	r2, #2
 8009c06:	07d9      	lsls	r1, r3, #31
 8009c08:	d403      	bmi.n	8009c12 <__lo0bits+0x4e>
 8009c0a:	085b      	lsrs	r3, r3, #1
 8009c0c:	f102 0201 	add.w	r2, r2, #1
 8009c10:	d003      	beq.n	8009c1a <__lo0bits+0x56>
 8009c12:	6003      	str	r3, [r0, #0]
 8009c14:	e7e5      	b.n	8009be2 <__lo0bits+0x1e>
 8009c16:	2200      	movs	r2, #0
 8009c18:	e7e3      	b.n	8009be2 <__lo0bits+0x1e>
 8009c1a:	2220      	movs	r2, #32
 8009c1c:	e7e1      	b.n	8009be2 <__lo0bits+0x1e>
	...

08009c20 <__i2b>:
 8009c20:	b510      	push	{r4, lr}
 8009c22:	460c      	mov	r4, r1
 8009c24:	2101      	movs	r1, #1
 8009c26:	f7ff ff05 	bl	8009a34 <_Balloc>
 8009c2a:	4602      	mov	r2, r0
 8009c2c:	b928      	cbnz	r0, 8009c3a <__i2b+0x1a>
 8009c2e:	4b05      	ldr	r3, [pc, #20]	; (8009c44 <__i2b+0x24>)
 8009c30:	4805      	ldr	r0, [pc, #20]	; (8009c48 <__i2b+0x28>)
 8009c32:	f240 1145 	movw	r1, #325	; 0x145
 8009c36:	f7ff f819 	bl	8008c6c <__assert_func>
 8009c3a:	2301      	movs	r3, #1
 8009c3c:	6144      	str	r4, [r0, #20]
 8009c3e:	6103      	str	r3, [r0, #16]
 8009c40:	bd10      	pop	{r4, pc}
 8009c42:	bf00      	nop
 8009c44:	0801dc68 	.word	0x0801dc68
 8009c48:	0801dc79 	.word	0x0801dc79

08009c4c <__multiply>:
 8009c4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c50:	4691      	mov	r9, r2
 8009c52:	690a      	ldr	r2, [r1, #16]
 8009c54:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009c58:	429a      	cmp	r2, r3
 8009c5a:	bfb8      	it	lt
 8009c5c:	460b      	movlt	r3, r1
 8009c5e:	460c      	mov	r4, r1
 8009c60:	bfbc      	itt	lt
 8009c62:	464c      	movlt	r4, r9
 8009c64:	4699      	movlt	r9, r3
 8009c66:	6927      	ldr	r7, [r4, #16]
 8009c68:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009c6c:	68a3      	ldr	r3, [r4, #8]
 8009c6e:	6861      	ldr	r1, [r4, #4]
 8009c70:	eb07 060a 	add.w	r6, r7, sl
 8009c74:	42b3      	cmp	r3, r6
 8009c76:	b085      	sub	sp, #20
 8009c78:	bfb8      	it	lt
 8009c7a:	3101      	addlt	r1, #1
 8009c7c:	f7ff feda 	bl	8009a34 <_Balloc>
 8009c80:	b930      	cbnz	r0, 8009c90 <__multiply+0x44>
 8009c82:	4602      	mov	r2, r0
 8009c84:	4b44      	ldr	r3, [pc, #272]	; (8009d98 <__multiply+0x14c>)
 8009c86:	4845      	ldr	r0, [pc, #276]	; (8009d9c <__multiply+0x150>)
 8009c88:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8009c8c:	f7fe ffee 	bl	8008c6c <__assert_func>
 8009c90:	f100 0514 	add.w	r5, r0, #20
 8009c94:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009c98:	462b      	mov	r3, r5
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	4543      	cmp	r3, r8
 8009c9e:	d321      	bcc.n	8009ce4 <__multiply+0x98>
 8009ca0:	f104 0314 	add.w	r3, r4, #20
 8009ca4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009ca8:	f109 0314 	add.w	r3, r9, #20
 8009cac:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009cb0:	9202      	str	r2, [sp, #8]
 8009cb2:	1b3a      	subs	r2, r7, r4
 8009cb4:	3a15      	subs	r2, #21
 8009cb6:	f022 0203 	bic.w	r2, r2, #3
 8009cba:	3204      	adds	r2, #4
 8009cbc:	f104 0115 	add.w	r1, r4, #21
 8009cc0:	428f      	cmp	r7, r1
 8009cc2:	bf38      	it	cc
 8009cc4:	2204      	movcc	r2, #4
 8009cc6:	9201      	str	r2, [sp, #4]
 8009cc8:	9a02      	ldr	r2, [sp, #8]
 8009cca:	9303      	str	r3, [sp, #12]
 8009ccc:	429a      	cmp	r2, r3
 8009cce:	d80c      	bhi.n	8009cea <__multiply+0x9e>
 8009cd0:	2e00      	cmp	r6, #0
 8009cd2:	dd03      	ble.n	8009cdc <__multiply+0x90>
 8009cd4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d05b      	beq.n	8009d94 <__multiply+0x148>
 8009cdc:	6106      	str	r6, [r0, #16]
 8009cde:	b005      	add	sp, #20
 8009ce0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ce4:	f843 2b04 	str.w	r2, [r3], #4
 8009ce8:	e7d8      	b.n	8009c9c <__multiply+0x50>
 8009cea:	f8b3 a000 	ldrh.w	sl, [r3]
 8009cee:	f1ba 0f00 	cmp.w	sl, #0
 8009cf2:	d024      	beq.n	8009d3e <__multiply+0xf2>
 8009cf4:	f104 0e14 	add.w	lr, r4, #20
 8009cf8:	46a9      	mov	r9, r5
 8009cfa:	f04f 0c00 	mov.w	ip, #0
 8009cfe:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009d02:	f8d9 1000 	ldr.w	r1, [r9]
 8009d06:	fa1f fb82 	uxth.w	fp, r2
 8009d0a:	b289      	uxth	r1, r1
 8009d0c:	fb0a 110b 	mla	r1, sl, fp, r1
 8009d10:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009d14:	f8d9 2000 	ldr.w	r2, [r9]
 8009d18:	4461      	add	r1, ip
 8009d1a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009d1e:	fb0a c20b 	mla	r2, sl, fp, ip
 8009d22:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009d26:	b289      	uxth	r1, r1
 8009d28:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009d2c:	4577      	cmp	r7, lr
 8009d2e:	f849 1b04 	str.w	r1, [r9], #4
 8009d32:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009d36:	d8e2      	bhi.n	8009cfe <__multiply+0xb2>
 8009d38:	9a01      	ldr	r2, [sp, #4]
 8009d3a:	f845 c002 	str.w	ip, [r5, r2]
 8009d3e:	9a03      	ldr	r2, [sp, #12]
 8009d40:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009d44:	3304      	adds	r3, #4
 8009d46:	f1b9 0f00 	cmp.w	r9, #0
 8009d4a:	d021      	beq.n	8009d90 <__multiply+0x144>
 8009d4c:	6829      	ldr	r1, [r5, #0]
 8009d4e:	f104 0c14 	add.w	ip, r4, #20
 8009d52:	46ae      	mov	lr, r5
 8009d54:	f04f 0a00 	mov.w	sl, #0
 8009d58:	f8bc b000 	ldrh.w	fp, [ip]
 8009d5c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009d60:	fb09 220b 	mla	r2, r9, fp, r2
 8009d64:	4452      	add	r2, sl
 8009d66:	b289      	uxth	r1, r1
 8009d68:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009d6c:	f84e 1b04 	str.w	r1, [lr], #4
 8009d70:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009d74:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009d78:	f8be 1000 	ldrh.w	r1, [lr]
 8009d7c:	fb09 110a 	mla	r1, r9, sl, r1
 8009d80:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8009d84:	4567      	cmp	r7, ip
 8009d86:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009d8a:	d8e5      	bhi.n	8009d58 <__multiply+0x10c>
 8009d8c:	9a01      	ldr	r2, [sp, #4]
 8009d8e:	50a9      	str	r1, [r5, r2]
 8009d90:	3504      	adds	r5, #4
 8009d92:	e799      	b.n	8009cc8 <__multiply+0x7c>
 8009d94:	3e01      	subs	r6, #1
 8009d96:	e79b      	b.n	8009cd0 <__multiply+0x84>
 8009d98:	0801dc68 	.word	0x0801dc68
 8009d9c:	0801dc79 	.word	0x0801dc79

08009da0 <__pow5mult>:
 8009da0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009da4:	4615      	mov	r5, r2
 8009da6:	f012 0203 	ands.w	r2, r2, #3
 8009daa:	4606      	mov	r6, r0
 8009dac:	460f      	mov	r7, r1
 8009dae:	d007      	beq.n	8009dc0 <__pow5mult+0x20>
 8009db0:	4c25      	ldr	r4, [pc, #148]	; (8009e48 <__pow5mult+0xa8>)
 8009db2:	3a01      	subs	r2, #1
 8009db4:	2300      	movs	r3, #0
 8009db6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009dba:	f7ff fe9d 	bl	8009af8 <__multadd>
 8009dbe:	4607      	mov	r7, r0
 8009dc0:	10ad      	asrs	r5, r5, #2
 8009dc2:	d03d      	beq.n	8009e40 <__pow5mult+0xa0>
 8009dc4:	69f4      	ldr	r4, [r6, #28]
 8009dc6:	b97c      	cbnz	r4, 8009de8 <__pow5mult+0x48>
 8009dc8:	2010      	movs	r0, #16
 8009dca:	f7fd ffa3 	bl	8007d14 <malloc>
 8009dce:	4602      	mov	r2, r0
 8009dd0:	61f0      	str	r0, [r6, #28]
 8009dd2:	b928      	cbnz	r0, 8009de0 <__pow5mult+0x40>
 8009dd4:	4b1d      	ldr	r3, [pc, #116]	; (8009e4c <__pow5mult+0xac>)
 8009dd6:	481e      	ldr	r0, [pc, #120]	; (8009e50 <__pow5mult+0xb0>)
 8009dd8:	f240 11b3 	movw	r1, #435	; 0x1b3
 8009ddc:	f7fe ff46 	bl	8008c6c <__assert_func>
 8009de0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009de4:	6004      	str	r4, [r0, #0]
 8009de6:	60c4      	str	r4, [r0, #12]
 8009de8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8009dec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009df0:	b94c      	cbnz	r4, 8009e06 <__pow5mult+0x66>
 8009df2:	f240 2171 	movw	r1, #625	; 0x271
 8009df6:	4630      	mov	r0, r6
 8009df8:	f7ff ff12 	bl	8009c20 <__i2b>
 8009dfc:	2300      	movs	r3, #0
 8009dfe:	f8c8 0008 	str.w	r0, [r8, #8]
 8009e02:	4604      	mov	r4, r0
 8009e04:	6003      	str	r3, [r0, #0]
 8009e06:	f04f 0900 	mov.w	r9, #0
 8009e0a:	07eb      	lsls	r3, r5, #31
 8009e0c:	d50a      	bpl.n	8009e24 <__pow5mult+0x84>
 8009e0e:	4639      	mov	r1, r7
 8009e10:	4622      	mov	r2, r4
 8009e12:	4630      	mov	r0, r6
 8009e14:	f7ff ff1a 	bl	8009c4c <__multiply>
 8009e18:	4639      	mov	r1, r7
 8009e1a:	4680      	mov	r8, r0
 8009e1c:	4630      	mov	r0, r6
 8009e1e:	f7ff fe49 	bl	8009ab4 <_Bfree>
 8009e22:	4647      	mov	r7, r8
 8009e24:	106d      	asrs	r5, r5, #1
 8009e26:	d00b      	beq.n	8009e40 <__pow5mult+0xa0>
 8009e28:	6820      	ldr	r0, [r4, #0]
 8009e2a:	b938      	cbnz	r0, 8009e3c <__pow5mult+0x9c>
 8009e2c:	4622      	mov	r2, r4
 8009e2e:	4621      	mov	r1, r4
 8009e30:	4630      	mov	r0, r6
 8009e32:	f7ff ff0b 	bl	8009c4c <__multiply>
 8009e36:	6020      	str	r0, [r4, #0]
 8009e38:	f8c0 9000 	str.w	r9, [r0]
 8009e3c:	4604      	mov	r4, r0
 8009e3e:	e7e4      	b.n	8009e0a <__pow5mult+0x6a>
 8009e40:	4638      	mov	r0, r7
 8009e42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e46:	bf00      	nop
 8009e48:	0801ddc8 	.word	0x0801ddc8
 8009e4c:	0801dbf9 	.word	0x0801dbf9
 8009e50:	0801dc79 	.word	0x0801dc79

08009e54 <__lshift>:
 8009e54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e58:	460c      	mov	r4, r1
 8009e5a:	6849      	ldr	r1, [r1, #4]
 8009e5c:	6923      	ldr	r3, [r4, #16]
 8009e5e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009e62:	68a3      	ldr	r3, [r4, #8]
 8009e64:	4607      	mov	r7, r0
 8009e66:	4691      	mov	r9, r2
 8009e68:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009e6c:	f108 0601 	add.w	r6, r8, #1
 8009e70:	42b3      	cmp	r3, r6
 8009e72:	db0b      	blt.n	8009e8c <__lshift+0x38>
 8009e74:	4638      	mov	r0, r7
 8009e76:	f7ff fddd 	bl	8009a34 <_Balloc>
 8009e7a:	4605      	mov	r5, r0
 8009e7c:	b948      	cbnz	r0, 8009e92 <__lshift+0x3e>
 8009e7e:	4602      	mov	r2, r0
 8009e80:	4b28      	ldr	r3, [pc, #160]	; (8009f24 <__lshift+0xd0>)
 8009e82:	4829      	ldr	r0, [pc, #164]	; (8009f28 <__lshift+0xd4>)
 8009e84:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8009e88:	f7fe fef0 	bl	8008c6c <__assert_func>
 8009e8c:	3101      	adds	r1, #1
 8009e8e:	005b      	lsls	r3, r3, #1
 8009e90:	e7ee      	b.n	8009e70 <__lshift+0x1c>
 8009e92:	2300      	movs	r3, #0
 8009e94:	f100 0114 	add.w	r1, r0, #20
 8009e98:	f100 0210 	add.w	r2, r0, #16
 8009e9c:	4618      	mov	r0, r3
 8009e9e:	4553      	cmp	r3, sl
 8009ea0:	db33      	blt.n	8009f0a <__lshift+0xb6>
 8009ea2:	6920      	ldr	r0, [r4, #16]
 8009ea4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009ea8:	f104 0314 	add.w	r3, r4, #20
 8009eac:	f019 091f 	ands.w	r9, r9, #31
 8009eb0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009eb4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009eb8:	d02b      	beq.n	8009f12 <__lshift+0xbe>
 8009eba:	f1c9 0e20 	rsb	lr, r9, #32
 8009ebe:	468a      	mov	sl, r1
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	6818      	ldr	r0, [r3, #0]
 8009ec4:	fa00 f009 	lsl.w	r0, r0, r9
 8009ec8:	4310      	orrs	r0, r2
 8009eca:	f84a 0b04 	str.w	r0, [sl], #4
 8009ece:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ed2:	459c      	cmp	ip, r3
 8009ed4:	fa22 f20e 	lsr.w	r2, r2, lr
 8009ed8:	d8f3      	bhi.n	8009ec2 <__lshift+0x6e>
 8009eda:	ebac 0304 	sub.w	r3, ip, r4
 8009ede:	3b15      	subs	r3, #21
 8009ee0:	f023 0303 	bic.w	r3, r3, #3
 8009ee4:	3304      	adds	r3, #4
 8009ee6:	f104 0015 	add.w	r0, r4, #21
 8009eea:	4584      	cmp	ip, r0
 8009eec:	bf38      	it	cc
 8009eee:	2304      	movcc	r3, #4
 8009ef0:	50ca      	str	r2, [r1, r3]
 8009ef2:	b10a      	cbz	r2, 8009ef8 <__lshift+0xa4>
 8009ef4:	f108 0602 	add.w	r6, r8, #2
 8009ef8:	3e01      	subs	r6, #1
 8009efa:	4638      	mov	r0, r7
 8009efc:	612e      	str	r6, [r5, #16]
 8009efe:	4621      	mov	r1, r4
 8009f00:	f7ff fdd8 	bl	8009ab4 <_Bfree>
 8009f04:	4628      	mov	r0, r5
 8009f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f0a:	f842 0f04 	str.w	r0, [r2, #4]!
 8009f0e:	3301      	adds	r3, #1
 8009f10:	e7c5      	b.n	8009e9e <__lshift+0x4a>
 8009f12:	3904      	subs	r1, #4
 8009f14:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f18:	f841 2f04 	str.w	r2, [r1, #4]!
 8009f1c:	459c      	cmp	ip, r3
 8009f1e:	d8f9      	bhi.n	8009f14 <__lshift+0xc0>
 8009f20:	e7ea      	b.n	8009ef8 <__lshift+0xa4>
 8009f22:	bf00      	nop
 8009f24:	0801dc68 	.word	0x0801dc68
 8009f28:	0801dc79 	.word	0x0801dc79

08009f2c <__mcmp>:
 8009f2c:	b530      	push	{r4, r5, lr}
 8009f2e:	6902      	ldr	r2, [r0, #16]
 8009f30:	690c      	ldr	r4, [r1, #16]
 8009f32:	1b12      	subs	r2, r2, r4
 8009f34:	d10e      	bne.n	8009f54 <__mcmp+0x28>
 8009f36:	f100 0314 	add.w	r3, r0, #20
 8009f3a:	3114      	adds	r1, #20
 8009f3c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009f40:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009f44:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009f48:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009f4c:	42a5      	cmp	r5, r4
 8009f4e:	d003      	beq.n	8009f58 <__mcmp+0x2c>
 8009f50:	d305      	bcc.n	8009f5e <__mcmp+0x32>
 8009f52:	2201      	movs	r2, #1
 8009f54:	4610      	mov	r0, r2
 8009f56:	bd30      	pop	{r4, r5, pc}
 8009f58:	4283      	cmp	r3, r0
 8009f5a:	d3f3      	bcc.n	8009f44 <__mcmp+0x18>
 8009f5c:	e7fa      	b.n	8009f54 <__mcmp+0x28>
 8009f5e:	f04f 32ff 	mov.w	r2, #4294967295
 8009f62:	e7f7      	b.n	8009f54 <__mcmp+0x28>

08009f64 <__mdiff>:
 8009f64:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f68:	460c      	mov	r4, r1
 8009f6a:	4606      	mov	r6, r0
 8009f6c:	4611      	mov	r1, r2
 8009f6e:	4620      	mov	r0, r4
 8009f70:	4690      	mov	r8, r2
 8009f72:	f7ff ffdb 	bl	8009f2c <__mcmp>
 8009f76:	1e05      	subs	r5, r0, #0
 8009f78:	d110      	bne.n	8009f9c <__mdiff+0x38>
 8009f7a:	4629      	mov	r1, r5
 8009f7c:	4630      	mov	r0, r6
 8009f7e:	f7ff fd59 	bl	8009a34 <_Balloc>
 8009f82:	b930      	cbnz	r0, 8009f92 <__mdiff+0x2e>
 8009f84:	4b3a      	ldr	r3, [pc, #232]	; (800a070 <__mdiff+0x10c>)
 8009f86:	4602      	mov	r2, r0
 8009f88:	f240 2137 	movw	r1, #567	; 0x237
 8009f8c:	4839      	ldr	r0, [pc, #228]	; (800a074 <__mdiff+0x110>)
 8009f8e:	f7fe fe6d 	bl	8008c6c <__assert_func>
 8009f92:	2301      	movs	r3, #1
 8009f94:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009f98:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f9c:	bfa4      	itt	ge
 8009f9e:	4643      	movge	r3, r8
 8009fa0:	46a0      	movge	r8, r4
 8009fa2:	4630      	mov	r0, r6
 8009fa4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009fa8:	bfa6      	itte	ge
 8009faa:	461c      	movge	r4, r3
 8009fac:	2500      	movge	r5, #0
 8009fae:	2501      	movlt	r5, #1
 8009fb0:	f7ff fd40 	bl	8009a34 <_Balloc>
 8009fb4:	b920      	cbnz	r0, 8009fc0 <__mdiff+0x5c>
 8009fb6:	4b2e      	ldr	r3, [pc, #184]	; (800a070 <__mdiff+0x10c>)
 8009fb8:	4602      	mov	r2, r0
 8009fba:	f240 2145 	movw	r1, #581	; 0x245
 8009fbe:	e7e5      	b.n	8009f8c <__mdiff+0x28>
 8009fc0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009fc4:	6926      	ldr	r6, [r4, #16]
 8009fc6:	60c5      	str	r5, [r0, #12]
 8009fc8:	f104 0914 	add.w	r9, r4, #20
 8009fcc:	f108 0514 	add.w	r5, r8, #20
 8009fd0:	f100 0e14 	add.w	lr, r0, #20
 8009fd4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009fd8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009fdc:	f108 0210 	add.w	r2, r8, #16
 8009fe0:	46f2      	mov	sl, lr
 8009fe2:	2100      	movs	r1, #0
 8009fe4:	f859 3b04 	ldr.w	r3, [r9], #4
 8009fe8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009fec:	fa11 f88b 	uxtah	r8, r1, fp
 8009ff0:	b299      	uxth	r1, r3
 8009ff2:	0c1b      	lsrs	r3, r3, #16
 8009ff4:	eba8 0801 	sub.w	r8, r8, r1
 8009ff8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009ffc:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a000:	fa1f f888 	uxth.w	r8, r8
 800a004:	1419      	asrs	r1, r3, #16
 800a006:	454e      	cmp	r6, r9
 800a008:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a00c:	f84a 3b04 	str.w	r3, [sl], #4
 800a010:	d8e8      	bhi.n	8009fe4 <__mdiff+0x80>
 800a012:	1b33      	subs	r3, r6, r4
 800a014:	3b15      	subs	r3, #21
 800a016:	f023 0303 	bic.w	r3, r3, #3
 800a01a:	3304      	adds	r3, #4
 800a01c:	3415      	adds	r4, #21
 800a01e:	42a6      	cmp	r6, r4
 800a020:	bf38      	it	cc
 800a022:	2304      	movcc	r3, #4
 800a024:	441d      	add	r5, r3
 800a026:	4473      	add	r3, lr
 800a028:	469e      	mov	lr, r3
 800a02a:	462e      	mov	r6, r5
 800a02c:	4566      	cmp	r6, ip
 800a02e:	d30e      	bcc.n	800a04e <__mdiff+0xea>
 800a030:	f10c 0203 	add.w	r2, ip, #3
 800a034:	1b52      	subs	r2, r2, r5
 800a036:	f022 0203 	bic.w	r2, r2, #3
 800a03a:	3d03      	subs	r5, #3
 800a03c:	45ac      	cmp	ip, r5
 800a03e:	bf38      	it	cc
 800a040:	2200      	movcc	r2, #0
 800a042:	4413      	add	r3, r2
 800a044:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800a048:	b17a      	cbz	r2, 800a06a <__mdiff+0x106>
 800a04a:	6107      	str	r7, [r0, #16]
 800a04c:	e7a4      	b.n	8009f98 <__mdiff+0x34>
 800a04e:	f856 8b04 	ldr.w	r8, [r6], #4
 800a052:	fa11 f288 	uxtah	r2, r1, r8
 800a056:	1414      	asrs	r4, r2, #16
 800a058:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a05c:	b292      	uxth	r2, r2
 800a05e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a062:	f84e 2b04 	str.w	r2, [lr], #4
 800a066:	1421      	asrs	r1, r4, #16
 800a068:	e7e0      	b.n	800a02c <__mdiff+0xc8>
 800a06a:	3f01      	subs	r7, #1
 800a06c:	e7ea      	b.n	800a044 <__mdiff+0xe0>
 800a06e:	bf00      	nop
 800a070:	0801dc68 	.word	0x0801dc68
 800a074:	0801dc79 	.word	0x0801dc79

0800a078 <__d2b>:
 800a078:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a07c:	460f      	mov	r7, r1
 800a07e:	2101      	movs	r1, #1
 800a080:	ec59 8b10 	vmov	r8, r9, d0
 800a084:	4616      	mov	r6, r2
 800a086:	f7ff fcd5 	bl	8009a34 <_Balloc>
 800a08a:	4604      	mov	r4, r0
 800a08c:	b930      	cbnz	r0, 800a09c <__d2b+0x24>
 800a08e:	4602      	mov	r2, r0
 800a090:	4b24      	ldr	r3, [pc, #144]	; (800a124 <__d2b+0xac>)
 800a092:	4825      	ldr	r0, [pc, #148]	; (800a128 <__d2b+0xb0>)
 800a094:	f240 310f 	movw	r1, #783	; 0x30f
 800a098:	f7fe fde8 	bl	8008c6c <__assert_func>
 800a09c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a0a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a0a4:	bb2d      	cbnz	r5, 800a0f2 <__d2b+0x7a>
 800a0a6:	9301      	str	r3, [sp, #4]
 800a0a8:	f1b8 0300 	subs.w	r3, r8, #0
 800a0ac:	d026      	beq.n	800a0fc <__d2b+0x84>
 800a0ae:	4668      	mov	r0, sp
 800a0b0:	9300      	str	r3, [sp, #0]
 800a0b2:	f7ff fd87 	bl	8009bc4 <__lo0bits>
 800a0b6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a0ba:	b1e8      	cbz	r0, 800a0f8 <__d2b+0x80>
 800a0bc:	f1c0 0320 	rsb	r3, r0, #32
 800a0c0:	fa02 f303 	lsl.w	r3, r2, r3
 800a0c4:	430b      	orrs	r3, r1
 800a0c6:	40c2      	lsrs	r2, r0
 800a0c8:	6163      	str	r3, [r4, #20]
 800a0ca:	9201      	str	r2, [sp, #4]
 800a0cc:	9b01      	ldr	r3, [sp, #4]
 800a0ce:	61a3      	str	r3, [r4, #24]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	bf14      	ite	ne
 800a0d4:	2202      	movne	r2, #2
 800a0d6:	2201      	moveq	r2, #1
 800a0d8:	6122      	str	r2, [r4, #16]
 800a0da:	b1bd      	cbz	r5, 800a10c <__d2b+0x94>
 800a0dc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a0e0:	4405      	add	r5, r0
 800a0e2:	603d      	str	r5, [r7, #0]
 800a0e4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a0e8:	6030      	str	r0, [r6, #0]
 800a0ea:	4620      	mov	r0, r4
 800a0ec:	b003      	add	sp, #12
 800a0ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a0f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a0f6:	e7d6      	b.n	800a0a6 <__d2b+0x2e>
 800a0f8:	6161      	str	r1, [r4, #20]
 800a0fa:	e7e7      	b.n	800a0cc <__d2b+0x54>
 800a0fc:	a801      	add	r0, sp, #4
 800a0fe:	f7ff fd61 	bl	8009bc4 <__lo0bits>
 800a102:	9b01      	ldr	r3, [sp, #4]
 800a104:	6163      	str	r3, [r4, #20]
 800a106:	3020      	adds	r0, #32
 800a108:	2201      	movs	r2, #1
 800a10a:	e7e5      	b.n	800a0d8 <__d2b+0x60>
 800a10c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a110:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a114:	6038      	str	r0, [r7, #0]
 800a116:	6918      	ldr	r0, [r3, #16]
 800a118:	f7ff fd34 	bl	8009b84 <__hi0bits>
 800a11c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a120:	e7e2      	b.n	800a0e8 <__d2b+0x70>
 800a122:	bf00      	nop
 800a124:	0801dc68 	.word	0x0801dc68
 800a128:	0801dc79 	.word	0x0801dc79

0800a12c <__sfputc_r>:
 800a12c:	6893      	ldr	r3, [r2, #8]
 800a12e:	3b01      	subs	r3, #1
 800a130:	2b00      	cmp	r3, #0
 800a132:	b410      	push	{r4}
 800a134:	6093      	str	r3, [r2, #8]
 800a136:	da08      	bge.n	800a14a <__sfputc_r+0x1e>
 800a138:	6994      	ldr	r4, [r2, #24]
 800a13a:	42a3      	cmp	r3, r4
 800a13c:	db01      	blt.n	800a142 <__sfputc_r+0x16>
 800a13e:	290a      	cmp	r1, #10
 800a140:	d103      	bne.n	800a14a <__sfputc_r+0x1e>
 800a142:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a146:	f7fe bc60 	b.w	8008a0a <__swbuf_r>
 800a14a:	6813      	ldr	r3, [r2, #0]
 800a14c:	1c58      	adds	r0, r3, #1
 800a14e:	6010      	str	r0, [r2, #0]
 800a150:	7019      	strb	r1, [r3, #0]
 800a152:	4608      	mov	r0, r1
 800a154:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a158:	4770      	bx	lr

0800a15a <__sfputs_r>:
 800a15a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a15c:	4606      	mov	r6, r0
 800a15e:	460f      	mov	r7, r1
 800a160:	4614      	mov	r4, r2
 800a162:	18d5      	adds	r5, r2, r3
 800a164:	42ac      	cmp	r4, r5
 800a166:	d101      	bne.n	800a16c <__sfputs_r+0x12>
 800a168:	2000      	movs	r0, #0
 800a16a:	e007      	b.n	800a17c <__sfputs_r+0x22>
 800a16c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a170:	463a      	mov	r2, r7
 800a172:	4630      	mov	r0, r6
 800a174:	f7ff ffda 	bl	800a12c <__sfputc_r>
 800a178:	1c43      	adds	r3, r0, #1
 800a17a:	d1f3      	bne.n	800a164 <__sfputs_r+0xa>
 800a17c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a180 <_vfiprintf_r>:
 800a180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a184:	460d      	mov	r5, r1
 800a186:	b09d      	sub	sp, #116	; 0x74
 800a188:	4614      	mov	r4, r2
 800a18a:	4698      	mov	r8, r3
 800a18c:	4606      	mov	r6, r0
 800a18e:	b118      	cbz	r0, 800a198 <_vfiprintf_r+0x18>
 800a190:	6a03      	ldr	r3, [r0, #32]
 800a192:	b90b      	cbnz	r3, 800a198 <_vfiprintf_r+0x18>
 800a194:	f7fe fb52 	bl	800883c <__sinit>
 800a198:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a19a:	07d9      	lsls	r1, r3, #31
 800a19c:	d405      	bmi.n	800a1aa <_vfiprintf_r+0x2a>
 800a19e:	89ab      	ldrh	r3, [r5, #12]
 800a1a0:	059a      	lsls	r2, r3, #22
 800a1a2:	d402      	bmi.n	800a1aa <_vfiprintf_r+0x2a>
 800a1a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a1a6:	f7fe fd51 	bl	8008c4c <__retarget_lock_acquire_recursive>
 800a1aa:	89ab      	ldrh	r3, [r5, #12]
 800a1ac:	071b      	lsls	r3, r3, #28
 800a1ae:	d501      	bpl.n	800a1b4 <_vfiprintf_r+0x34>
 800a1b0:	692b      	ldr	r3, [r5, #16]
 800a1b2:	b99b      	cbnz	r3, 800a1dc <_vfiprintf_r+0x5c>
 800a1b4:	4629      	mov	r1, r5
 800a1b6:	4630      	mov	r0, r6
 800a1b8:	f7fe fc64 	bl	8008a84 <__swsetup_r>
 800a1bc:	b170      	cbz	r0, 800a1dc <_vfiprintf_r+0x5c>
 800a1be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a1c0:	07dc      	lsls	r4, r3, #31
 800a1c2:	d504      	bpl.n	800a1ce <_vfiprintf_r+0x4e>
 800a1c4:	f04f 30ff 	mov.w	r0, #4294967295
 800a1c8:	b01d      	add	sp, #116	; 0x74
 800a1ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1ce:	89ab      	ldrh	r3, [r5, #12]
 800a1d0:	0598      	lsls	r0, r3, #22
 800a1d2:	d4f7      	bmi.n	800a1c4 <_vfiprintf_r+0x44>
 800a1d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a1d6:	f7fe fd3a 	bl	8008c4e <__retarget_lock_release_recursive>
 800a1da:	e7f3      	b.n	800a1c4 <_vfiprintf_r+0x44>
 800a1dc:	2300      	movs	r3, #0
 800a1de:	9309      	str	r3, [sp, #36]	; 0x24
 800a1e0:	2320      	movs	r3, #32
 800a1e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a1e6:	f8cd 800c 	str.w	r8, [sp, #12]
 800a1ea:	2330      	movs	r3, #48	; 0x30
 800a1ec:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800a3a0 <_vfiprintf_r+0x220>
 800a1f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a1f4:	f04f 0901 	mov.w	r9, #1
 800a1f8:	4623      	mov	r3, r4
 800a1fa:	469a      	mov	sl, r3
 800a1fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a200:	b10a      	cbz	r2, 800a206 <_vfiprintf_r+0x86>
 800a202:	2a25      	cmp	r2, #37	; 0x25
 800a204:	d1f9      	bne.n	800a1fa <_vfiprintf_r+0x7a>
 800a206:	ebba 0b04 	subs.w	fp, sl, r4
 800a20a:	d00b      	beq.n	800a224 <_vfiprintf_r+0xa4>
 800a20c:	465b      	mov	r3, fp
 800a20e:	4622      	mov	r2, r4
 800a210:	4629      	mov	r1, r5
 800a212:	4630      	mov	r0, r6
 800a214:	f7ff ffa1 	bl	800a15a <__sfputs_r>
 800a218:	3001      	adds	r0, #1
 800a21a:	f000 80a9 	beq.w	800a370 <_vfiprintf_r+0x1f0>
 800a21e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a220:	445a      	add	r2, fp
 800a222:	9209      	str	r2, [sp, #36]	; 0x24
 800a224:	f89a 3000 	ldrb.w	r3, [sl]
 800a228:	2b00      	cmp	r3, #0
 800a22a:	f000 80a1 	beq.w	800a370 <_vfiprintf_r+0x1f0>
 800a22e:	2300      	movs	r3, #0
 800a230:	f04f 32ff 	mov.w	r2, #4294967295
 800a234:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a238:	f10a 0a01 	add.w	sl, sl, #1
 800a23c:	9304      	str	r3, [sp, #16]
 800a23e:	9307      	str	r3, [sp, #28]
 800a240:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a244:	931a      	str	r3, [sp, #104]	; 0x68
 800a246:	4654      	mov	r4, sl
 800a248:	2205      	movs	r2, #5
 800a24a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a24e:	4854      	ldr	r0, [pc, #336]	; (800a3a0 <_vfiprintf_r+0x220>)
 800a250:	f7f5 ffd6 	bl	8000200 <memchr>
 800a254:	9a04      	ldr	r2, [sp, #16]
 800a256:	b9d8      	cbnz	r0, 800a290 <_vfiprintf_r+0x110>
 800a258:	06d1      	lsls	r1, r2, #27
 800a25a:	bf44      	itt	mi
 800a25c:	2320      	movmi	r3, #32
 800a25e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a262:	0713      	lsls	r3, r2, #28
 800a264:	bf44      	itt	mi
 800a266:	232b      	movmi	r3, #43	; 0x2b
 800a268:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a26c:	f89a 3000 	ldrb.w	r3, [sl]
 800a270:	2b2a      	cmp	r3, #42	; 0x2a
 800a272:	d015      	beq.n	800a2a0 <_vfiprintf_r+0x120>
 800a274:	9a07      	ldr	r2, [sp, #28]
 800a276:	4654      	mov	r4, sl
 800a278:	2000      	movs	r0, #0
 800a27a:	f04f 0c0a 	mov.w	ip, #10
 800a27e:	4621      	mov	r1, r4
 800a280:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a284:	3b30      	subs	r3, #48	; 0x30
 800a286:	2b09      	cmp	r3, #9
 800a288:	d94d      	bls.n	800a326 <_vfiprintf_r+0x1a6>
 800a28a:	b1b0      	cbz	r0, 800a2ba <_vfiprintf_r+0x13a>
 800a28c:	9207      	str	r2, [sp, #28]
 800a28e:	e014      	b.n	800a2ba <_vfiprintf_r+0x13a>
 800a290:	eba0 0308 	sub.w	r3, r0, r8
 800a294:	fa09 f303 	lsl.w	r3, r9, r3
 800a298:	4313      	orrs	r3, r2
 800a29a:	9304      	str	r3, [sp, #16]
 800a29c:	46a2      	mov	sl, r4
 800a29e:	e7d2      	b.n	800a246 <_vfiprintf_r+0xc6>
 800a2a0:	9b03      	ldr	r3, [sp, #12]
 800a2a2:	1d19      	adds	r1, r3, #4
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	9103      	str	r1, [sp, #12]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	bfbb      	ittet	lt
 800a2ac:	425b      	neglt	r3, r3
 800a2ae:	f042 0202 	orrlt.w	r2, r2, #2
 800a2b2:	9307      	strge	r3, [sp, #28]
 800a2b4:	9307      	strlt	r3, [sp, #28]
 800a2b6:	bfb8      	it	lt
 800a2b8:	9204      	strlt	r2, [sp, #16]
 800a2ba:	7823      	ldrb	r3, [r4, #0]
 800a2bc:	2b2e      	cmp	r3, #46	; 0x2e
 800a2be:	d10c      	bne.n	800a2da <_vfiprintf_r+0x15a>
 800a2c0:	7863      	ldrb	r3, [r4, #1]
 800a2c2:	2b2a      	cmp	r3, #42	; 0x2a
 800a2c4:	d134      	bne.n	800a330 <_vfiprintf_r+0x1b0>
 800a2c6:	9b03      	ldr	r3, [sp, #12]
 800a2c8:	1d1a      	adds	r2, r3, #4
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	9203      	str	r2, [sp, #12]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	bfb8      	it	lt
 800a2d2:	f04f 33ff 	movlt.w	r3, #4294967295
 800a2d6:	3402      	adds	r4, #2
 800a2d8:	9305      	str	r3, [sp, #20]
 800a2da:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800a3b0 <_vfiprintf_r+0x230>
 800a2de:	7821      	ldrb	r1, [r4, #0]
 800a2e0:	2203      	movs	r2, #3
 800a2e2:	4650      	mov	r0, sl
 800a2e4:	f7f5 ff8c 	bl	8000200 <memchr>
 800a2e8:	b138      	cbz	r0, 800a2fa <_vfiprintf_r+0x17a>
 800a2ea:	9b04      	ldr	r3, [sp, #16]
 800a2ec:	eba0 000a 	sub.w	r0, r0, sl
 800a2f0:	2240      	movs	r2, #64	; 0x40
 800a2f2:	4082      	lsls	r2, r0
 800a2f4:	4313      	orrs	r3, r2
 800a2f6:	3401      	adds	r4, #1
 800a2f8:	9304      	str	r3, [sp, #16]
 800a2fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2fe:	4829      	ldr	r0, [pc, #164]	; (800a3a4 <_vfiprintf_r+0x224>)
 800a300:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a304:	2206      	movs	r2, #6
 800a306:	f7f5 ff7b 	bl	8000200 <memchr>
 800a30a:	2800      	cmp	r0, #0
 800a30c:	d03f      	beq.n	800a38e <_vfiprintf_r+0x20e>
 800a30e:	4b26      	ldr	r3, [pc, #152]	; (800a3a8 <_vfiprintf_r+0x228>)
 800a310:	bb1b      	cbnz	r3, 800a35a <_vfiprintf_r+0x1da>
 800a312:	9b03      	ldr	r3, [sp, #12]
 800a314:	3307      	adds	r3, #7
 800a316:	f023 0307 	bic.w	r3, r3, #7
 800a31a:	3308      	adds	r3, #8
 800a31c:	9303      	str	r3, [sp, #12]
 800a31e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a320:	443b      	add	r3, r7
 800a322:	9309      	str	r3, [sp, #36]	; 0x24
 800a324:	e768      	b.n	800a1f8 <_vfiprintf_r+0x78>
 800a326:	fb0c 3202 	mla	r2, ip, r2, r3
 800a32a:	460c      	mov	r4, r1
 800a32c:	2001      	movs	r0, #1
 800a32e:	e7a6      	b.n	800a27e <_vfiprintf_r+0xfe>
 800a330:	2300      	movs	r3, #0
 800a332:	3401      	adds	r4, #1
 800a334:	9305      	str	r3, [sp, #20]
 800a336:	4619      	mov	r1, r3
 800a338:	f04f 0c0a 	mov.w	ip, #10
 800a33c:	4620      	mov	r0, r4
 800a33e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a342:	3a30      	subs	r2, #48	; 0x30
 800a344:	2a09      	cmp	r2, #9
 800a346:	d903      	bls.n	800a350 <_vfiprintf_r+0x1d0>
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d0c6      	beq.n	800a2da <_vfiprintf_r+0x15a>
 800a34c:	9105      	str	r1, [sp, #20]
 800a34e:	e7c4      	b.n	800a2da <_vfiprintf_r+0x15a>
 800a350:	fb0c 2101 	mla	r1, ip, r1, r2
 800a354:	4604      	mov	r4, r0
 800a356:	2301      	movs	r3, #1
 800a358:	e7f0      	b.n	800a33c <_vfiprintf_r+0x1bc>
 800a35a:	ab03      	add	r3, sp, #12
 800a35c:	9300      	str	r3, [sp, #0]
 800a35e:	462a      	mov	r2, r5
 800a360:	4b12      	ldr	r3, [pc, #72]	; (800a3ac <_vfiprintf_r+0x22c>)
 800a362:	a904      	add	r1, sp, #16
 800a364:	4630      	mov	r0, r6
 800a366:	f7fd fe29 	bl	8007fbc <_printf_float>
 800a36a:	4607      	mov	r7, r0
 800a36c:	1c78      	adds	r0, r7, #1
 800a36e:	d1d6      	bne.n	800a31e <_vfiprintf_r+0x19e>
 800a370:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a372:	07d9      	lsls	r1, r3, #31
 800a374:	d405      	bmi.n	800a382 <_vfiprintf_r+0x202>
 800a376:	89ab      	ldrh	r3, [r5, #12]
 800a378:	059a      	lsls	r2, r3, #22
 800a37a:	d402      	bmi.n	800a382 <_vfiprintf_r+0x202>
 800a37c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a37e:	f7fe fc66 	bl	8008c4e <__retarget_lock_release_recursive>
 800a382:	89ab      	ldrh	r3, [r5, #12]
 800a384:	065b      	lsls	r3, r3, #25
 800a386:	f53f af1d 	bmi.w	800a1c4 <_vfiprintf_r+0x44>
 800a38a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a38c:	e71c      	b.n	800a1c8 <_vfiprintf_r+0x48>
 800a38e:	ab03      	add	r3, sp, #12
 800a390:	9300      	str	r3, [sp, #0]
 800a392:	462a      	mov	r2, r5
 800a394:	4b05      	ldr	r3, [pc, #20]	; (800a3ac <_vfiprintf_r+0x22c>)
 800a396:	a904      	add	r1, sp, #16
 800a398:	4630      	mov	r0, r6
 800a39a:	f7fe f8b3 	bl	8008504 <_printf_i>
 800a39e:	e7e4      	b.n	800a36a <_vfiprintf_r+0x1ea>
 800a3a0:	0801ddd4 	.word	0x0801ddd4
 800a3a4:	0801ddde 	.word	0x0801ddde
 800a3a8:	08007fbd 	.word	0x08007fbd
 800a3ac:	0800a15b 	.word	0x0800a15b
 800a3b0:	0801ddda 	.word	0x0801ddda

0800a3b4 <__sflush_r>:
 800a3b4:	898a      	ldrh	r2, [r1, #12]
 800a3b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3ba:	4605      	mov	r5, r0
 800a3bc:	0710      	lsls	r0, r2, #28
 800a3be:	460c      	mov	r4, r1
 800a3c0:	d458      	bmi.n	800a474 <__sflush_r+0xc0>
 800a3c2:	684b      	ldr	r3, [r1, #4]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	dc05      	bgt.n	800a3d4 <__sflush_r+0x20>
 800a3c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	dc02      	bgt.n	800a3d4 <__sflush_r+0x20>
 800a3ce:	2000      	movs	r0, #0
 800a3d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a3d6:	2e00      	cmp	r6, #0
 800a3d8:	d0f9      	beq.n	800a3ce <__sflush_r+0x1a>
 800a3da:	2300      	movs	r3, #0
 800a3dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a3e0:	682f      	ldr	r7, [r5, #0]
 800a3e2:	6a21      	ldr	r1, [r4, #32]
 800a3e4:	602b      	str	r3, [r5, #0]
 800a3e6:	d032      	beq.n	800a44e <__sflush_r+0x9a>
 800a3e8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a3ea:	89a3      	ldrh	r3, [r4, #12]
 800a3ec:	075a      	lsls	r2, r3, #29
 800a3ee:	d505      	bpl.n	800a3fc <__sflush_r+0x48>
 800a3f0:	6863      	ldr	r3, [r4, #4]
 800a3f2:	1ac0      	subs	r0, r0, r3
 800a3f4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a3f6:	b10b      	cbz	r3, 800a3fc <__sflush_r+0x48>
 800a3f8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a3fa:	1ac0      	subs	r0, r0, r3
 800a3fc:	2300      	movs	r3, #0
 800a3fe:	4602      	mov	r2, r0
 800a400:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a402:	6a21      	ldr	r1, [r4, #32]
 800a404:	4628      	mov	r0, r5
 800a406:	47b0      	blx	r6
 800a408:	1c43      	adds	r3, r0, #1
 800a40a:	89a3      	ldrh	r3, [r4, #12]
 800a40c:	d106      	bne.n	800a41c <__sflush_r+0x68>
 800a40e:	6829      	ldr	r1, [r5, #0]
 800a410:	291d      	cmp	r1, #29
 800a412:	d82b      	bhi.n	800a46c <__sflush_r+0xb8>
 800a414:	4a29      	ldr	r2, [pc, #164]	; (800a4bc <__sflush_r+0x108>)
 800a416:	410a      	asrs	r2, r1
 800a418:	07d6      	lsls	r6, r2, #31
 800a41a:	d427      	bmi.n	800a46c <__sflush_r+0xb8>
 800a41c:	2200      	movs	r2, #0
 800a41e:	6062      	str	r2, [r4, #4]
 800a420:	04d9      	lsls	r1, r3, #19
 800a422:	6922      	ldr	r2, [r4, #16]
 800a424:	6022      	str	r2, [r4, #0]
 800a426:	d504      	bpl.n	800a432 <__sflush_r+0x7e>
 800a428:	1c42      	adds	r2, r0, #1
 800a42a:	d101      	bne.n	800a430 <__sflush_r+0x7c>
 800a42c:	682b      	ldr	r3, [r5, #0]
 800a42e:	b903      	cbnz	r3, 800a432 <__sflush_r+0x7e>
 800a430:	6560      	str	r0, [r4, #84]	; 0x54
 800a432:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a434:	602f      	str	r7, [r5, #0]
 800a436:	2900      	cmp	r1, #0
 800a438:	d0c9      	beq.n	800a3ce <__sflush_r+0x1a>
 800a43a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a43e:	4299      	cmp	r1, r3
 800a440:	d002      	beq.n	800a448 <__sflush_r+0x94>
 800a442:	4628      	mov	r0, r5
 800a444:	f7ff faaa 	bl	800999c <_free_r>
 800a448:	2000      	movs	r0, #0
 800a44a:	6360      	str	r0, [r4, #52]	; 0x34
 800a44c:	e7c0      	b.n	800a3d0 <__sflush_r+0x1c>
 800a44e:	2301      	movs	r3, #1
 800a450:	4628      	mov	r0, r5
 800a452:	47b0      	blx	r6
 800a454:	1c41      	adds	r1, r0, #1
 800a456:	d1c8      	bne.n	800a3ea <__sflush_r+0x36>
 800a458:	682b      	ldr	r3, [r5, #0]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d0c5      	beq.n	800a3ea <__sflush_r+0x36>
 800a45e:	2b1d      	cmp	r3, #29
 800a460:	d001      	beq.n	800a466 <__sflush_r+0xb2>
 800a462:	2b16      	cmp	r3, #22
 800a464:	d101      	bne.n	800a46a <__sflush_r+0xb6>
 800a466:	602f      	str	r7, [r5, #0]
 800a468:	e7b1      	b.n	800a3ce <__sflush_r+0x1a>
 800a46a:	89a3      	ldrh	r3, [r4, #12]
 800a46c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a470:	81a3      	strh	r3, [r4, #12]
 800a472:	e7ad      	b.n	800a3d0 <__sflush_r+0x1c>
 800a474:	690f      	ldr	r7, [r1, #16]
 800a476:	2f00      	cmp	r7, #0
 800a478:	d0a9      	beq.n	800a3ce <__sflush_r+0x1a>
 800a47a:	0793      	lsls	r3, r2, #30
 800a47c:	680e      	ldr	r6, [r1, #0]
 800a47e:	bf08      	it	eq
 800a480:	694b      	ldreq	r3, [r1, #20]
 800a482:	600f      	str	r7, [r1, #0]
 800a484:	bf18      	it	ne
 800a486:	2300      	movne	r3, #0
 800a488:	eba6 0807 	sub.w	r8, r6, r7
 800a48c:	608b      	str	r3, [r1, #8]
 800a48e:	f1b8 0f00 	cmp.w	r8, #0
 800a492:	dd9c      	ble.n	800a3ce <__sflush_r+0x1a>
 800a494:	6a21      	ldr	r1, [r4, #32]
 800a496:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a498:	4643      	mov	r3, r8
 800a49a:	463a      	mov	r2, r7
 800a49c:	4628      	mov	r0, r5
 800a49e:	47b0      	blx	r6
 800a4a0:	2800      	cmp	r0, #0
 800a4a2:	dc06      	bgt.n	800a4b2 <__sflush_r+0xfe>
 800a4a4:	89a3      	ldrh	r3, [r4, #12]
 800a4a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a4aa:	81a3      	strh	r3, [r4, #12]
 800a4ac:	f04f 30ff 	mov.w	r0, #4294967295
 800a4b0:	e78e      	b.n	800a3d0 <__sflush_r+0x1c>
 800a4b2:	4407      	add	r7, r0
 800a4b4:	eba8 0800 	sub.w	r8, r8, r0
 800a4b8:	e7e9      	b.n	800a48e <__sflush_r+0xda>
 800a4ba:	bf00      	nop
 800a4bc:	dfbffffe 	.word	0xdfbffffe

0800a4c0 <_fflush_r>:
 800a4c0:	b538      	push	{r3, r4, r5, lr}
 800a4c2:	690b      	ldr	r3, [r1, #16]
 800a4c4:	4605      	mov	r5, r0
 800a4c6:	460c      	mov	r4, r1
 800a4c8:	b913      	cbnz	r3, 800a4d0 <_fflush_r+0x10>
 800a4ca:	2500      	movs	r5, #0
 800a4cc:	4628      	mov	r0, r5
 800a4ce:	bd38      	pop	{r3, r4, r5, pc}
 800a4d0:	b118      	cbz	r0, 800a4da <_fflush_r+0x1a>
 800a4d2:	6a03      	ldr	r3, [r0, #32]
 800a4d4:	b90b      	cbnz	r3, 800a4da <_fflush_r+0x1a>
 800a4d6:	f7fe f9b1 	bl	800883c <__sinit>
 800a4da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d0f3      	beq.n	800a4ca <_fflush_r+0xa>
 800a4e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a4e4:	07d0      	lsls	r0, r2, #31
 800a4e6:	d404      	bmi.n	800a4f2 <_fflush_r+0x32>
 800a4e8:	0599      	lsls	r1, r3, #22
 800a4ea:	d402      	bmi.n	800a4f2 <_fflush_r+0x32>
 800a4ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a4ee:	f7fe fbad 	bl	8008c4c <__retarget_lock_acquire_recursive>
 800a4f2:	4628      	mov	r0, r5
 800a4f4:	4621      	mov	r1, r4
 800a4f6:	f7ff ff5d 	bl	800a3b4 <__sflush_r>
 800a4fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a4fc:	07da      	lsls	r2, r3, #31
 800a4fe:	4605      	mov	r5, r0
 800a500:	d4e4      	bmi.n	800a4cc <_fflush_r+0xc>
 800a502:	89a3      	ldrh	r3, [r4, #12]
 800a504:	059b      	lsls	r3, r3, #22
 800a506:	d4e1      	bmi.n	800a4cc <_fflush_r+0xc>
 800a508:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a50a:	f7fe fba0 	bl	8008c4e <__retarget_lock_release_recursive>
 800a50e:	e7dd      	b.n	800a4cc <_fflush_r+0xc>

0800a510 <fiprintf>:
 800a510:	b40e      	push	{r1, r2, r3}
 800a512:	b503      	push	{r0, r1, lr}
 800a514:	4601      	mov	r1, r0
 800a516:	ab03      	add	r3, sp, #12
 800a518:	4805      	ldr	r0, [pc, #20]	; (800a530 <fiprintf+0x20>)
 800a51a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a51e:	6800      	ldr	r0, [r0, #0]
 800a520:	9301      	str	r3, [sp, #4]
 800a522:	f7ff fe2d 	bl	800a180 <_vfiprintf_r>
 800a526:	b002      	add	sp, #8
 800a528:	f85d eb04 	ldr.w	lr, [sp], #4
 800a52c:	b003      	add	sp, #12
 800a52e:	4770      	bx	lr
 800a530:	20000074 	.word	0x20000074

0800a534 <__swhatbuf_r>:
 800a534:	b570      	push	{r4, r5, r6, lr}
 800a536:	460c      	mov	r4, r1
 800a538:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a53c:	2900      	cmp	r1, #0
 800a53e:	b096      	sub	sp, #88	; 0x58
 800a540:	4615      	mov	r5, r2
 800a542:	461e      	mov	r6, r3
 800a544:	da0d      	bge.n	800a562 <__swhatbuf_r+0x2e>
 800a546:	89a3      	ldrh	r3, [r4, #12]
 800a548:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a54c:	f04f 0100 	mov.w	r1, #0
 800a550:	bf0c      	ite	eq
 800a552:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a556:	2340      	movne	r3, #64	; 0x40
 800a558:	2000      	movs	r0, #0
 800a55a:	6031      	str	r1, [r6, #0]
 800a55c:	602b      	str	r3, [r5, #0]
 800a55e:	b016      	add	sp, #88	; 0x58
 800a560:	bd70      	pop	{r4, r5, r6, pc}
 800a562:	466a      	mov	r2, sp
 800a564:	f000 f848 	bl	800a5f8 <_fstat_r>
 800a568:	2800      	cmp	r0, #0
 800a56a:	dbec      	blt.n	800a546 <__swhatbuf_r+0x12>
 800a56c:	9901      	ldr	r1, [sp, #4]
 800a56e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a572:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a576:	4259      	negs	r1, r3
 800a578:	4159      	adcs	r1, r3
 800a57a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a57e:	e7eb      	b.n	800a558 <__swhatbuf_r+0x24>

0800a580 <__smakebuf_r>:
 800a580:	898b      	ldrh	r3, [r1, #12]
 800a582:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a584:	079d      	lsls	r5, r3, #30
 800a586:	4606      	mov	r6, r0
 800a588:	460c      	mov	r4, r1
 800a58a:	d507      	bpl.n	800a59c <__smakebuf_r+0x1c>
 800a58c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a590:	6023      	str	r3, [r4, #0]
 800a592:	6123      	str	r3, [r4, #16]
 800a594:	2301      	movs	r3, #1
 800a596:	6163      	str	r3, [r4, #20]
 800a598:	b002      	add	sp, #8
 800a59a:	bd70      	pop	{r4, r5, r6, pc}
 800a59c:	ab01      	add	r3, sp, #4
 800a59e:	466a      	mov	r2, sp
 800a5a0:	f7ff ffc8 	bl	800a534 <__swhatbuf_r>
 800a5a4:	9900      	ldr	r1, [sp, #0]
 800a5a6:	4605      	mov	r5, r0
 800a5a8:	4630      	mov	r0, r6
 800a5aa:	f7fd fbdb 	bl	8007d64 <_malloc_r>
 800a5ae:	b948      	cbnz	r0, 800a5c4 <__smakebuf_r+0x44>
 800a5b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a5b4:	059a      	lsls	r2, r3, #22
 800a5b6:	d4ef      	bmi.n	800a598 <__smakebuf_r+0x18>
 800a5b8:	f023 0303 	bic.w	r3, r3, #3
 800a5bc:	f043 0302 	orr.w	r3, r3, #2
 800a5c0:	81a3      	strh	r3, [r4, #12]
 800a5c2:	e7e3      	b.n	800a58c <__smakebuf_r+0xc>
 800a5c4:	89a3      	ldrh	r3, [r4, #12]
 800a5c6:	6020      	str	r0, [r4, #0]
 800a5c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a5cc:	81a3      	strh	r3, [r4, #12]
 800a5ce:	9b00      	ldr	r3, [sp, #0]
 800a5d0:	6163      	str	r3, [r4, #20]
 800a5d2:	9b01      	ldr	r3, [sp, #4]
 800a5d4:	6120      	str	r0, [r4, #16]
 800a5d6:	b15b      	cbz	r3, 800a5f0 <__smakebuf_r+0x70>
 800a5d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a5dc:	4630      	mov	r0, r6
 800a5de:	f000 f81d 	bl	800a61c <_isatty_r>
 800a5e2:	b128      	cbz	r0, 800a5f0 <__smakebuf_r+0x70>
 800a5e4:	89a3      	ldrh	r3, [r4, #12]
 800a5e6:	f023 0303 	bic.w	r3, r3, #3
 800a5ea:	f043 0301 	orr.w	r3, r3, #1
 800a5ee:	81a3      	strh	r3, [r4, #12]
 800a5f0:	89a3      	ldrh	r3, [r4, #12]
 800a5f2:	431d      	orrs	r5, r3
 800a5f4:	81a5      	strh	r5, [r4, #12]
 800a5f6:	e7cf      	b.n	800a598 <__smakebuf_r+0x18>

0800a5f8 <_fstat_r>:
 800a5f8:	b538      	push	{r3, r4, r5, lr}
 800a5fa:	4d07      	ldr	r5, [pc, #28]	; (800a618 <_fstat_r+0x20>)
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	4604      	mov	r4, r0
 800a600:	4608      	mov	r0, r1
 800a602:	4611      	mov	r1, r2
 800a604:	602b      	str	r3, [r5, #0]
 800a606:	f7f7 fcef 	bl	8001fe8 <_fstat>
 800a60a:	1c43      	adds	r3, r0, #1
 800a60c:	d102      	bne.n	800a614 <_fstat_r+0x1c>
 800a60e:	682b      	ldr	r3, [r5, #0]
 800a610:	b103      	cbz	r3, 800a614 <_fstat_r+0x1c>
 800a612:	6023      	str	r3, [r4, #0]
 800a614:	bd38      	pop	{r3, r4, r5, pc}
 800a616:	bf00      	nop
 800a618:	20050a54 	.word	0x20050a54

0800a61c <_isatty_r>:
 800a61c:	b538      	push	{r3, r4, r5, lr}
 800a61e:	4d06      	ldr	r5, [pc, #24]	; (800a638 <_isatty_r+0x1c>)
 800a620:	2300      	movs	r3, #0
 800a622:	4604      	mov	r4, r0
 800a624:	4608      	mov	r0, r1
 800a626:	602b      	str	r3, [r5, #0]
 800a628:	f7f7 fcee 	bl	8002008 <_isatty>
 800a62c:	1c43      	adds	r3, r0, #1
 800a62e:	d102      	bne.n	800a636 <_isatty_r+0x1a>
 800a630:	682b      	ldr	r3, [r5, #0]
 800a632:	b103      	cbz	r3, 800a636 <_isatty_r+0x1a>
 800a634:	6023      	str	r3, [r4, #0]
 800a636:	bd38      	pop	{r3, r4, r5, pc}
 800a638:	20050a54 	.word	0x20050a54

0800a63c <abort>:
 800a63c:	b508      	push	{r3, lr}
 800a63e:	2006      	movs	r0, #6
 800a640:	f000 f860 	bl	800a704 <raise>
 800a644:	2001      	movs	r0, #1
 800a646:	f7f7 fc80 	bl	8001f4a <_exit>

0800a64a <_calloc_r>:
 800a64a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a64c:	fba1 2402 	umull	r2, r4, r1, r2
 800a650:	b94c      	cbnz	r4, 800a666 <_calloc_r+0x1c>
 800a652:	4611      	mov	r1, r2
 800a654:	9201      	str	r2, [sp, #4]
 800a656:	f7fd fb85 	bl	8007d64 <_malloc_r>
 800a65a:	9a01      	ldr	r2, [sp, #4]
 800a65c:	4605      	mov	r5, r0
 800a65e:	b930      	cbnz	r0, 800a66e <_calloc_r+0x24>
 800a660:	4628      	mov	r0, r5
 800a662:	b003      	add	sp, #12
 800a664:	bd30      	pop	{r4, r5, pc}
 800a666:	220c      	movs	r2, #12
 800a668:	6002      	str	r2, [r0, #0]
 800a66a:	2500      	movs	r5, #0
 800a66c:	e7f8      	b.n	800a660 <_calloc_r+0x16>
 800a66e:	4621      	mov	r1, r4
 800a670:	f7fe fa60 	bl	8008b34 <memset>
 800a674:	e7f4      	b.n	800a660 <_calloc_r+0x16>

0800a676 <__ascii_mbtowc>:
 800a676:	b082      	sub	sp, #8
 800a678:	b901      	cbnz	r1, 800a67c <__ascii_mbtowc+0x6>
 800a67a:	a901      	add	r1, sp, #4
 800a67c:	b142      	cbz	r2, 800a690 <__ascii_mbtowc+0x1a>
 800a67e:	b14b      	cbz	r3, 800a694 <__ascii_mbtowc+0x1e>
 800a680:	7813      	ldrb	r3, [r2, #0]
 800a682:	600b      	str	r3, [r1, #0]
 800a684:	7812      	ldrb	r2, [r2, #0]
 800a686:	1e10      	subs	r0, r2, #0
 800a688:	bf18      	it	ne
 800a68a:	2001      	movne	r0, #1
 800a68c:	b002      	add	sp, #8
 800a68e:	4770      	bx	lr
 800a690:	4610      	mov	r0, r2
 800a692:	e7fb      	b.n	800a68c <__ascii_mbtowc+0x16>
 800a694:	f06f 0001 	mvn.w	r0, #1
 800a698:	e7f8      	b.n	800a68c <__ascii_mbtowc+0x16>

0800a69a <__ascii_wctomb>:
 800a69a:	b149      	cbz	r1, 800a6b0 <__ascii_wctomb+0x16>
 800a69c:	2aff      	cmp	r2, #255	; 0xff
 800a69e:	bf85      	ittet	hi
 800a6a0:	238a      	movhi	r3, #138	; 0x8a
 800a6a2:	6003      	strhi	r3, [r0, #0]
 800a6a4:	700a      	strbls	r2, [r1, #0]
 800a6a6:	f04f 30ff 	movhi.w	r0, #4294967295
 800a6aa:	bf98      	it	ls
 800a6ac:	2001      	movls	r0, #1
 800a6ae:	4770      	bx	lr
 800a6b0:	4608      	mov	r0, r1
 800a6b2:	4770      	bx	lr

0800a6b4 <_raise_r>:
 800a6b4:	291f      	cmp	r1, #31
 800a6b6:	b538      	push	{r3, r4, r5, lr}
 800a6b8:	4604      	mov	r4, r0
 800a6ba:	460d      	mov	r5, r1
 800a6bc:	d904      	bls.n	800a6c8 <_raise_r+0x14>
 800a6be:	2316      	movs	r3, #22
 800a6c0:	6003      	str	r3, [r0, #0]
 800a6c2:	f04f 30ff 	mov.w	r0, #4294967295
 800a6c6:	bd38      	pop	{r3, r4, r5, pc}
 800a6c8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a6ca:	b112      	cbz	r2, 800a6d2 <_raise_r+0x1e>
 800a6cc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a6d0:	b94b      	cbnz	r3, 800a6e6 <_raise_r+0x32>
 800a6d2:	4620      	mov	r0, r4
 800a6d4:	f000 f830 	bl	800a738 <_getpid_r>
 800a6d8:	462a      	mov	r2, r5
 800a6da:	4601      	mov	r1, r0
 800a6dc:	4620      	mov	r0, r4
 800a6de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a6e2:	f000 b817 	b.w	800a714 <_kill_r>
 800a6e6:	2b01      	cmp	r3, #1
 800a6e8:	d00a      	beq.n	800a700 <_raise_r+0x4c>
 800a6ea:	1c59      	adds	r1, r3, #1
 800a6ec:	d103      	bne.n	800a6f6 <_raise_r+0x42>
 800a6ee:	2316      	movs	r3, #22
 800a6f0:	6003      	str	r3, [r0, #0]
 800a6f2:	2001      	movs	r0, #1
 800a6f4:	e7e7      	b.n	800a6c6 <_raise_r+0x12>
 800a6f6:	2400      	movs	r4, #0
 800a6f8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a6fc:	4628      	mov	r0, r5
 800a6fe:	4798      	blx	r3
 800a700:	2000      	movs	r0, #0
 800a702:	e7e0      	b.n	800a6c6 <_raise_r+0x12>

0800a704 <raise>:
 800a704:	4b02      	ldr	r3, [pc, #8]	; (800a710 <raise+0xc>)
 800a706:	4601      	mov	r1, r0
 800a708:	6818      	ldr	r0, [r3, #0]
 800a70a:	f7ff bfd3 	b.w	800a6b4 <_raise_r>
 800a70e:	bf00      	nop
 800a710:	20000074 	.word	0x20000074

0800a714 <_kill_r>:
 800a714:	b538      	push	{r3, r4, r5, lr}
 800a716:	4d07      	ldr	r5, [pc, #28]	; (800a734 <_kill_r+0x20>)
 800a718:	2300      	movs	r3, #0
 800a71a:	4604      	mov	r4, r0
 800a71c:	4608      	mov	r0, r1
 800a71e:	4611      	mov	r1, r2
 800a720:	602b      	str	r3, [r5, #0]
 800a722:	f7f7 fc02 	bl	8001f2a <_kill>
 800a726:	1c43      	adds	r3, r0, #1
 800a728:	d102      	bne.n	800a730 <_kill_r+0x1c>
 800a72a:	682b      	ldr	r3, [r5, #0]
 800a72c:	b103      	cbz	r3, 800a730 <_kill_r+0x1c>
 800a72e:	6023      	str	r3, [r4, #0]
 800a730:	bd38      	pop	{r3, r4, r5, pc}
 800a732:	bf00      	nop
 800a734:	20050a54 	.word	0x20050a54

0800a738 <_getpid_r>:
 800a738:	f7f7 bbef 	b.w	8001f1a <_getpid>

0800a73c <round>:
 800a73c:	ec53 2b10 	vmov	r2, r3, d0
 800a740:	b570      	push	{r4, r5, r6, lr}
 800a742:	f3c3 540a 	ubfx	r4, r3, #20, #11
 800a746:	f2a4 30ff 	subw	r0, r4, #1023	; 0x3ff
 800a74a:	2813      	cmp	r0, #19
 800a74c:	ee10 5a10 	vmov	r5, s0
 800a750:	4619      	mov	r1, r3
 800a752:	dc18      	bgt.n	800a786 <round+0x4a>
 800a754:	2800      	cmp	r0, #0
 800a756:	da09      	bge.n	800a76c <round+0x30>
 800a758:	3001      	adds	r0, #1
 800a75a:	f003 4100 	and.w	r1, r3, #2147483648	; 0x80000000
 800a75e:	d103      	bne.n	800a768 <round+0x2c>
 800a760:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800a764:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800a768:	2300      	movs	r3, #0
 800a76a:	e02a      	b.n	800a7c2 <round+0x86>
 800a76c:	4c16      	ldr	r4, [pc, #88]	; (800a7c8 <round+0x8c>)
 800a76e:	4104      	asrs	r4, r0
 800a770:	ea03 0604 	and.w	r6, r3, r4
 800a774:	4316      	orrs	r6, r2
 800a776:	d011      	beq.n	800a79c <round+0x60>
 800a778:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a77c:	4103      	asrs	r3, r0
 800a77e:	440b      	add	r3, r1
 800a780:	ea23 0104 	bic.w	r1, r3, r4
 800a784:	e7f0      	b.n	800a768 <round+0x2c>
 800a786:	2833      	cmp	r0, #51	; 0x33
 800a788:	dd0b      	ble.n	800a7a2 <round+0x66>
 800a78a:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800a78e:	d105      	bne.n	800a79c <round+0x60>
 800a790:	ee10 0a10 	vmov	r0, s0
 800a794:	f7f5 fd92 	bl	80002bc <__adddf3>
 800a798:	4602      	mov	r2, r0
 800a79a:	460b      	mov	r3, r1
 800a79c:	ec43 2b10 	vmov	d0, r2, r3
 800a7a0:	bd70      	pop	{r4, r5, r6, pc}
 800a7a2:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 800a7a6:	f04f 34ff 	mov.w	r4, #4294967295
 800a7aa:	40f4      	lsrs	r4, r6
 800a7ac:	4214      	tst	r4, r2
 800a7ae:	d0f5      	beq.n	800a79c <round+0x60>
 800a7b0:	f1c0 0033 	rsb	r0, r0, #51	; 0x33
 800a7b4:	2301      	movs	r3, #1
 800a7b6:	4083      	lsls	r3, r0
 800a7b8:	195b      	adds	r3, r3, r5
 800a7ba:	bf28      	it	cs
 800a7bc:	3101      	addcs	r1, #1
 800a7be:	ea23 0304 	bic.w	r3, r3, r4
 800a7c2:	461a      	mov	r2, r3
 800a7c4:	460b      	mov	r3, r1
 800a7c6:	e7e9      	b.n	800a79c <round+0x60>
 800a7c8:	000fffff 	.word	0x000fffff

0800a7cc <roundf>:
 800a7cc:	ee10 0a10 	vmov	r0, s0
 800a7d0:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800a7d4:	3a7f      	subs	r2, #127	; 0x7f
 800a7d6:	2a16      	cmp	r2, #22
 800a7d8:	dc15      	bgt.n	800a806 <roundf+0x3a>
 800a7da:	2a00      	cmp	r2, #0
 800a7dc:	da08      	bge.n	800a7f0 <roundf+0x24>
 800a7de:	3201      	adds	r2, #1
 800a7e0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800a7e4:	d101      	bne.n	800a7ea <roundf+0x1e>
 800a7e6:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 800a7ea:	ee00 3a10 	vmov	s0, r3
 800a7ee:	4770      	bx	lr
 800a7f0:	4907      	ldr	r1, [pc, #28]	; (800a810 <roundf+0x44>)
 800a7f2:	4111      	asrs	r1, r2
 800a7f4:	4208      	tst	r0, r1
 800a7f6:	d0fa      	beq.n	800a7ee <roundf+0x22>
 800a7f8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a7fc:	4113      	asrs	r3, r2
 800a7fe:	4403      	add	r3, r0
 800a800:	ea23 0301 	bic.w	r3, r3, r1
 800a804:	e7f1      	b.n	800a7ea <roundf+0x1e>
 800a806:	2a80      	cmp	r2, #128	; 0x80
 800a808:	d1f1      	bne.n	800a7ee <roundf+0x22>
 800a80a:	ee30 0a00 	vadd.f32	s0, s0, s0
 800a80e:	4770      	bx	lr
 800a810:	007fffff 	.word	0x007fffff

0800a814 <_init>:
 800a814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a816:	bf00      	nop
 800a818:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a81a:	bc08      	pop	{r3}
 800a81c:	469e      	mov	lr, r3
 800a81e:	4770      	bx	lr

0800a820 <_fini>:
 800a820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a822:	bf00      	nop
 800a824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a826:	bc08      	pop	{r3}
 800a828:	469e      	mov	lr, r3
 800a82a:	4770      	bx	lr
