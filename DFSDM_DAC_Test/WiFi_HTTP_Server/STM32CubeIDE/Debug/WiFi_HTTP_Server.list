
WiFi_HTTP_Server.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c220  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000080c  0800c3e0  0800c3e0  0001c3e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cbec  0800cbec  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  0800cbec  0800cbec  0001cbec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cbf4  0800cbf4  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cbf4  0800cbf4  0001cbf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cbf8  0800cbf8  0001cbf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  0800cbfc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000063d0  2000008c  0800cc88  0002008c  2**2
                  ALLOC
 10 ._user_heap   00010004  2000645c  0800cc88  0002645c  2**0
                  ALLOC
 11 ._user_stack  00007f00  10000000  10000000  00030000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
 14 .debug_line   00024c76  00000000  00000000  000200ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line_str 000000c1  00000000  00000000  00044d75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_info   000211b9  00000000  00000000  00044e36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00003dd7  00000000  00000000  00065fef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00001da0  00000000  00000000  00069dc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0012250b  00000000  00000000  0006bb68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_rnglists 00001732  00000000  00000000  0018e073  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  000058c1  00000000  00000000  0018f7a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00008d94  00000000  00000000  00195068  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	2000008c 	.word	0x2000008c
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800c3c8 	.word	0x0800c3c8

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000090 	.word	0x20000090
 80001fc:	0800c3c8 	.word	0x0800c3c8

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2f>:
 8000a9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000aa4:	bf24      	itt	cs
 8000aa6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aaa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aae:	d90d      	bls.n	8000acc <__aeabi_d2f+0x30>
 8000ab0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ab4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ab8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000abc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ac0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac4:	bf08      	it	eq
 8000ac6:	f020 0001 	biceq.w	r0, r0, #1
 8000aca:	4770      	bx	lr
 8000acc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ad0:	d121      	bne.n	8000b16 <__aeabi_d2f+0x7a>
 8000ad2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ad6:	bfbc      	itt	lt
 8000ad8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000adc:	4770      	bxlt	lr
 8000ade:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ae2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ae6:	f1c2 0218 	rsb	r2, r2, #24
 8000aea:	f1c2 0c20 	rsb	ip, r2, #32
 8000aee:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af2:	fa20 f002 	lsr.w	r0, r0, r2
 8000af6:	bf18      	it	ne
 8000af8:	f040 0001 	orrne.w	r0, r0, #1
 8000afc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b00:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b04:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b08:	ea40 000c 	orr.w	r0, r0, ip
 8000b0c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b10:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b14:	e7cc      	b.n	8000ab0 <__aeabi_d2f+0x14>
 8000b16:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1a:	d107      	bne.n	8000b2c <__aeabi_d2f+0x90>
 8000b1c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b20:	bf1e      	ittt	ne
 8000b22:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b26:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b2a:	4770      	bxne	lr
 8000b2c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b34:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop

08000b3c <__aeabi_uldivmod>:
 8000b3c:	b953      	cbnz	r3, 8000b54 <__aeabi_uldivmod+0x18>
 8000b3e:	b94a      	cbnz	r2, 8000b54 <__aeabi_uldivmod+0x18>
 8000b40:	2900      	cmp	r1, #0
 8000b42:	bf08      	it	eq
 8000b44:	2800      	cmpeq	r0, #0
 8000b46:	bf1c      	itt	ne
 8000b48:	f04f 31ff 	movne.w	r1, #4294967295
 8000b4c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b50:	f000 b970 	b.w	8000e34 <__aeabi_idiv0>
 8000b54:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b58:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b5c:	f000 f806 	bl	8000b6c <__udivmoddi4>
 8000b60:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b68:	b004      	add	sp, #16
 8000b6a:	4770      	bx	lr

08000b6c <__udivmoddi4>:
 8000b6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b70:	9e08      	ldr	r6, [sp, #32]
 8000b72:	460d      	mov	r5, r1
 8000b74:	4604      	mov	r4, r0
 8000b76:	460f      	mov	r7, r1
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d14a      	bne.n	8000c12 <__udivmoddi4+0xa6>
 8000b7c:	428a      	cmp	r2, r1
 8000b7e:	4694      	mov	ip, r2
 8000b80:	d965      	bls.n	8000c4e <__udivmoddi4+0xe2>
 8000b82:	fab2 f382 	clz	r3, r2
 8000b86:	b143      	cbz	r3, 8000b9a <__udivmoddi4+0x2e>
 8000b88:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b8c:	f1c3 0220 	rsb	r2, r3, #32
 8000b90:	409f      	lsls	r7, r3
 8000b92:	fa20 f202 	lsr.w	r2, r0, r2
 8000b96:	4317      	orrs	r7, r2
 8000b98:	409c      	lsls	r4, r3
 8000b9a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000b9e:	fa1f f58c 	uxth.w	r5, ip
 8000ba2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000ba6:	0c22      	lsrs	r2, r4, #16
 8000ba8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000bac:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000bb0:	fb01 f005 	mul.w	r0, r1, r5
 8000bb4:	4290      	cmp	r0, r2
 8000bb6:	d90a      	bls.n	8000bce <__udivmoddi4+0x62>
 8000bb8:	eb1c 0202 	adds.w	r2, ip, r2
 8000bbc:	f101 37ff 	add.w	r7, r1, #4294967295
 8000bc0:	f080 811c 	bcs.w	8000dfc <__udivmoddi4+0x290>
 8000bc4:	4290      	cmp	r0, r2
 8000bc6:	f240 8119 	bls.w	8000dfc <__udivmoddi4+0x290>
 8000bca:	3902      	subs	r1, #2
 8000bcc:	4462      	add	r2, ip
 8000bce:	1a12      	subs	r2, r2, r0
 8000bd0:	b2a4      	uxth	r4, r4
 8000bd2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000bd6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000bda:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bde:	fb00 f505 	mul.w	r5, r0, r5
 8000be2:	42a5      	cmp	r5, r4
 8000be4:	d90a      	bls.n	8000bfc <__udivmoddi4+0x90>
 8000be6:	eb1c 0404 	adds.w	r4, ip, r4
 8000bea:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bee:	f080 8107 	bcs.w	8000e00 <__udivmoddi4+0x294>
 8000bf2:	42a5      	cmp	r5, r4
 8000bf4:	f240 8104 	bls.w	8000e00 <__udivmoddi4+0x294>
 8000bf8:	4464      	add	r4, ip
 8000bfa:	3802      	subs	r0, #2
 8000bfc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c00:	1b64      	subs	r4, r4, r5
 8000c02:	2100      	movs	r1, #0
 8000c04:	b11e      	cbz	r6, 8000c0e <__udivmoddi4+0xa2>
 8000c06:	40dc      	lsrs	r4, r3
 8000c08:	2300      	movs	r3, #0
 8000c0a:	e9c6 4300 	strd	r4, r3, [r6]
 8000c0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c12:	428b      	cmp	r3, r1
 8000c14:	d908      	bls.n	8000c28 <__udivmoddi4+0xbc>
 8000c16:	2e00      	cmp	r6, #0
 8000c18:	f000 80ed 	beq.w	8000df6 <__udivmoddi4+0x28a>
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	e9c6 0500 	strd	r0, r5, [r6]
 8000c22:	4608      	mov	r0, r1
 8000c24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c28:	fab3 f183 	clz	r1, r3
 8000c2c:	2900      	cmp	r1, #0
 8000c2e:	d149      	bne.n	8000cc4 <__udivmoddi4+0x158>
 8000c30:	42ab      	cmp	r3, r5
 8000c32:	d302      	bcc.n	8000c3a <__udivmoddi4+0xce>
 8000c34:	4282      	cmp	r2, r0
 8000c36:	f200 80f8 	bhi.w	8000e2a <__udivmoddi4+0x2be>
 8000c3a:	1a84      	subs	r4, r0, r2
 8000c3c:	eb65 0203 	sbc.w	r2, r5, r3
 8000c40:	2001      	movs	r0, #1
 8000c42:	4617      	mov	r7, r2
 8000c44:	2e00      	cmp	r6, #0
 8000c46:	d0e2      	beq.n	8000c0e <__udivmoddi4+0xa2>
 8000c48:	e9c6 4700 	strd	r4, r7, [r6]
 8000c4c:	e7df      	b.n	8000c0e <__udivmoddi4+0xa2>
 8000c4e:	b902      	cbnz	r2, 8000c52 <__udivmoddi4+0xe6>
 8000c50:	deff      	udf	#255	; 0xff
 8000c52:	fab2 f382 	clz	r3, r2
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	f040 8090 	bne.w	8000d7c <__udivmoddi4+0x210>
 8000c5c:	1a8a      	subs	r2, r1, r2
 8000c5e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c62:	fa1f fe8c 	uxth.w	lr, ip
 8000c66:	2101      	movs	r1, #1
 8000c68:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c6c:	fb07 2015 	mls	r0, r7, r5, r2
 8000c70:	0c22      	lsrs	r2, r4, #16
 8000c72:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c76:	fb0e f005 	mul.w	r0, lr, r5
 8000c7a:	4290      	cmp	r0, r2
 8000c7c:	d908      	bls.n	8000c90 <__udivmoddi4+0x124>
 8000c7e:	eb1c 0202 	adds.w	r2, ip, r2
 8000c82:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c86:	d202      	bcs.n	8000c8e <__udivmoddi4+0x122>
 8000c88:	4290      	cmp	r0, r2
 8000c8a:	f200 80cb 	bhi.w	8000e24 <__udivmoddi4+0x2b8>
 8000c8e:	4645      	mov	r5, r8
 8000c90:	1a12      	subs	r2, r2, r0
 8000c92:	b2a4      	uxth	r4, r4
 8000c94:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c98:	fb07 2210 	mls	r2, r7, r0, r2
 8000c9c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ca0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ca4:	45a6      	cmp	lr, r4
 8000ca6:	d908      	bls.n	8000cba <__udivmoddi4+0x14e>
 8000ca8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cac:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cb0:	d202      	bcs.n	8000cb8 <__udivmoddi4+0x14c>
 8000cb2:	45a6      	cmp	lr, r4
 8000cb4:	f200 80bb 	bhi.w	8000e2e <__udivmoddi4+0x2c2>
 8000cb8:	4610      	mov	r0, r2
 8000cba:	eba4 040e 	sub.w	r4, r4, lr
 8000cbe:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000cc2:	e79f      	b.n	8000c04 <__udivmoddi4+0x98>
 8000cc4:	f1c1 0720 	rsb	r7, r1, #32
 8000cc8:	408b      	lsls	r3, r1
 8000cca:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cce:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cd2:	fa05 f401 	lsl.w	r4, r5, r1
 8000cd6:	fa20 f307 	lsr.w	r3, r0, r7
 8000cda:	40fd      	lsrs	r5, r7
 8000cdc:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ce0:	4323      	orrs	r3, r4
 8000ce2:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ce6:	fa1f fe8c 	uxth.w	lr, ip
 8000cea:	fb09 5518 	mls	r5, r9, r8, r5
 8000cee:	0c1c      	lsrs	r4, r3, #16
 8000cf0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000cf4:	fb08 f50e 	mul.w	r5, r8, lr
 8000cf8:	42a5      	cmp	r5, r4
 8000cfa:	fa02 f201 	lsl.w	r2, r2, r1
 8000cfe:	fa00 f001 	lsl.w	r0, r0, r1
 8000d02:	d90b      	bls.n	8000d1c <__udivmoddi4+0x1b0>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d0c:	f080 8088 	bcs.w	8000e20 <__udivmoddi4+0x2b4>
 8000d10:	42a5      	cmp	r5, r4
 8000d12:	f240 8085 	bls.w	8000e20 <__udivmoddi4+0x2b4>
 8000d16:	f1a8 0802 	sub.w	r8, r8, #2
 8000d1a:	4464      	add	r4, ip
 8000d1c:	1b64      	subs	r4, r4, r5
 8000d1e:	b29d      	uxth	r5, r3
 8000d20:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d24:	fb09 4413 	mls	r4, r9, r3, r4
 8000d28:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d2c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d30:	45a6      	cmp	lr, r4
 8000d32:	d908      	bls.n	8000d46 <__udivmoddi4+0x1da>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f103 35ff 	add.w	r5, r3, #4294967295
 8000d3c:	d26c      	bcs.n	8000e18 <__udivmoddi4+0x2ac>
 8000d3e:	45a6      	cmp	lr, r4
 8000d40:	d96a      	bls.n	8000e18 <__udivmoddi4+0x2ac>
 8000d42:	3b02      	subs	r3, #2
 8000d44:	4464      	add	r4, ip
 8000d46:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d4a:	fba3 9502 	umull	r9, r5, r3, r2
 8000d4e:	eba4 040e 	sub.w	r4, r4, lr
 8000d52:	42ac      	cmp	r4, r5
 8000d54:	46c8      	mov	r8, r9
 8000d56:	46ae      	mov	lr, r5
 8000d58:	d356      	bcc.n	8000e08 <__udivmoddi4+0x29c>
 8000d5a:	d053      	beq.n	8000e04 <__udivmoddi4+0x298>
 8000d5c:	b156      	cbz	r6, 8000d74 <__udivmoddi4+0x208>
 8000d5e:	ebb0 0208 	subs.w	r2, r0, r8
 8000d62:	eb64 040e 	sbc.w	r4, r4, lr
 8000d66:	fa04 f707 	lsl.w	r7, r4, r7
 8000d6a:	40ca      	lsrs	r2, r1
 8000d6c:	40cc      	lsrs	r4, r1
 8000d6e:	4317      	orrs	r7, r2
 8000d70:	e9c6 7400 	strd	r7, r4, [r6]
 8000d74:	4618      	mov	r0, r3
 8000d76:	2100      	movs	r1, #0
 8000d78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7c:	f1c3 0120 	rsb	r1, r3, #32
 8000d80:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d84:	fa20 f201 	lsr.w	r2, r0, r1
 8000d88:	fa25 f101 	lsr.w	r1, r5, r1
 8000d8c:	409d      	lsls	r5, r3
 8000d8e:	432a      	orrs	r2, r5
 8000d90:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d94:	fa1f fe8c 	uxth.w	lr, ip
 8000d98:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d9c:	fb07 1510 	mls	r5, r7, r0, r1
 8000da0:	0c11      	lsrs	r1, r2, #16
 8000da2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000da6:	fb00 f50e 	mul.w	r5, r0, lr
 8000daa:	428d      	cmp	r5, r1
 8000dac:	fa04 f403 	lsl.w	r4, r4, r3
 8000db0:	d908      	bls.n	8000dc4 <__udivmoddi4+0x258>
 8000db2:	eb1c 0101 	adds.w	r1, ip, r1
 8000db6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dba:	d22f      	bcs.n	8000e1c <__udivmoddi4+0x2b0>
 8000dbc:	428d      	cmp	r5, r1
 8000dbe:	d92d      	bls.n	8000e1c <__udivmoddi4+0x2b0>
 8000dc0:	3802      	subs	r0, #2
 8000dc2:	4461      	add	r1, ip
 8000dc4:	1b49      	subs	r1, r1, r5
 8000dc6:	b292      	uxth	r2, r2
 8000dc8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000dcc:	fb07 1115 	mls	r1, r7, r5, r1
 8000dd0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000dd4:	fb05 f10e 	mul.w	r1, r5, lr
 8000dd8:	4291      	cmp	r1, r2
 8000dda:	d908      	bls.n	8000dee <__udivmoddi4+0x282>
 8000ddc:	eb1c 0202 	adds.w	r2, ip, r2
 8000de0:	f105 38ff 	add.w	r8, r5, #4294967295
 8000de4:	d216      	bcs.n	8000e14 <__udivmoddi4+0x2a8>
 8000de6:	4291      	cmp	r1, r2
 8000de8:	d914      	bls.n	8000e14 <__udivmoddi4+0x2a8>
 8000dea:	3d02      	subs	r5, #2
 8000dec:	4462      	add	r2, ip
 8000dee:	1a52      	subs	r2, r2, r1
 8000df0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000df4:	e738      	b.n	8000c68 <__udivmoddi4+0xfc>
 8000df6:	4631      	mov	r1, r6
 8000df8:	4630      	mov	r0, r6
 8000dfa:	e708      	b.n	8000c0e <__udivmoddi4+0xa2>
 8000dfc:	4639      	mov	r1, r7
 8000dfe:	e6e6      	b.n	8000bce <__udivmoddi4+0x62>
 8000e00:	4610      	mov	r0, r2
 8000e02:	e6fb      	b.n	8000bfc <__udivmoddi4+0x90>
 8000e04:	4548      	cmp	r0, r9
 8000e06:	d2a9      	bcs.n	8000d5c <__udivmoddi4+0x1f0>
 8000e08:	ebb9 0802 	subs.w	r8, r9, r2
 8000e0c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e10:	3b01      	subs	r3, #1
 8000e12:	e7a3      	b.n	8000d5c <__udivmoddi4+0x1f0>
 8000e14:	4645      	mov	r5, r8
 8000e16:	e7ea      	b.n	8000dee <__udivmoddi4+0x282>
 8000e18:	462b      	mov	r3, r5
 8000e1a:	e794      	b.n	8000d46 <__udivmoddi4+0x1da>
 8000e1c:	4640      	mov	r0, r8
 8000e1e:	e7d1      	b.n	8000dc4 <__udivmoddi4+0x258>
 8000e20:	46d0      	mov	r8, sl
 8000e22:	e77b      	b.n	8000d1c <__udivmoddi4+0x1b0>
 8000e24:	3d02      	subs	r5, #2
 8000e26:	4462      	add	r2, ip
 8000e28:	e732      	b.n	8000c90 <__udivmoddi4+0x124>
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e70a      	b.n	8000c44 <__udivmoddi4+0xd8>
 8000e2e:	4464      	add	r4, ip
 8000e30:	3802      	subs	r0, #2
 8000e32:	e742      	b.n	8000cba <__udivmoddi4+0x14e>

08000e34 <__aeabi_idiv0>:
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop

08000e38 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000e38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e70 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e3c:	f000 ff34 	bl	8001ca8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000e40:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000e42:	e003      	b.n	8000e4c <LoopCopyDataInit>

08000e44 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000e44:	4b0b      	ldr	r3, [pc, #44]	; (8000e74 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000e46:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000e48:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000e4a:	3104      	adds	r1, #4

08000e4c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000e4c:	480a      	ldr	r0, [pc, #40]	; (8000e78 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000e4e:	4b0b      	ldr	r3, [pc, #44]	; (8000e7c <LoopForever+0xe>)
	adds	r2, r0, r1
 8000e50:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000e52:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000e54:	d3f6      	bcc.n	8000e44 <CopyDataInit>
	ldr	r2, =_sbss
 8000e56:	4a0a      	ldr	r2, [pc, #40]	; (8000e80 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000e58:	e002      	b.n	8000e60 <LoopFillZerobss>

08000e5a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000e5a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000e5c:	f842 3b04 	str.w	r3, [r2], #4

08000e60 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000e60:	4b08      	ldr	r3, [pc, #32]	; (8000e84 <LoopForever+0x16>)
	cmp	r2, r3
 8000e62:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000e64:	d3f9      	bcc.n	8000e5a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e66:	f00a fb81 	bl	800b56c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e6a:	f000 f80f 	bl	8000e8c <main>

08000e6e <LoopForever>:

LoopForever:
    b LoopForever
 8000e6e:	e7fe      	b.n	8000e6e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000e70:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000e74:	0800cbfc 	.word	0x0800cbfc
	ldr	r0, =_sdata
 8000e78:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000e7c:	2000008c 	.word	0x2000008c
	ldr	r2, =_sbss
 8000e80:	2000008c 	.word	0x2000008c
	ldr	r3, = _ebss
 8000e84:	2000645c 	.word	0x2000645c

08000e88 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e88:	e7fe      	b.n	8000e88 <ADC1_IRQHandler>
	...

08000e8c <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e90:	f002 ffa4 	bl	8003ddc <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8000e94:	f000 fa58 	bl	8001348 <SystemClock_Config>

  /* Configure LED2 */
  BSP_LED_Init(LED2);
 8000e98:	2000      	movs	r0, #0
 8000e9a:	f002 fd41 	bl	8003920 <BSP_LED_Init>

  /* USER push button is used to ask if reconfiguration is needed */
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000e9e:	2101      	movs	r1, #1
 8000ea0:	2000      	movs	r0, #0
 8000ea2:	f002 fd6d 	bl	8003980 <BSP_PB_Init>

  /* Initialize all configured peripherals */
  MX_DMA_Init();
 8000ea6:	f000 fb7d 	bl	80015a4 <MX_DMA_Init>
  MX_DAC1_Init();
 8000eaa:	f000 fa87 	bl	80013bc <MX_DAC1_Init>
  MX_TIM2_Init();
 8000eae:	f000 fb2b 	bl	8001508 <MX_TIM2_Init>
  MX_DFSDM1_Init();
 8000eb2:	f000 fac5 	bl	8001440 <MX_DFSDM1_Init>

  /* initiating things */
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	4821      	ldr	r0, [pc, #132]	; (8000f40 <main+0xb4>)
 8000eba:	f003 f95a 	bl	8004172 <HAL_DAC_Start>
  // start the timer (TIM2) and associated interrupt
  HAL_TIM_Base_Start_IT(&htim2); // the _IT at the end of fn. means interrupt
 8000ebe:	4821      	ldr	r0, [pc, #132]	; (8000f44 <main+0xb8>)
 8000ec0:	f008 fc62 	bl	8009788 <HAL_TIM_Base_Start_IT>

  /* WIFI Web Server demonstration */
#if defined (TERMINAL_USE)
  /* Initialize all configured peripherals */
  hDiscoUart.Instance = DISCOVERY_COM1;
 8000ec4:	4b20      	ldr	r3, [pc, #128]	; (8000f48 <main+0xbc>)
 8000ec6:	4a21      	ldr	r2, [pc, #132]	; (8000f4c <main+0xc0>)
 8000ec8:	601a      	str	r2, [r3, #0]
  hDiscoUart.Init.BaudRate = 115200;
 8000eca:	4b1f      	ldr	r3, [pc, #124]	; (8000f48 <main+0xbc>)
 8000ecc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ed0:	605a      	str	r2, [r3, #4]
  hDiscoUart.Init.WordLength = UART_WORDLENGTH_8B;
 8000ed2:	4b1d      	ldr	r3, [pc, #116]	; (8000f48 <main+0xbc>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	609a      	str	r2, [r3, #8]
  hDiscoUart.Init.StopBits = UART_STOPBITS_1;
 8000ed8:	4b1b      	ldr	r3, [pc, #108]	; (8000f48 <main+0xbc>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	60da      	str	r2, [r3, #12]
  hDiscoUart.Init.Parity = UART_PARITY_NONE;
 8000ede:	4b1a      	ldr	r3, [pc, #104]	; (8000f48 <main+0xbc>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	611a      	str	r2, [r3, #16]
  hDiscoUart.Init.Mode = UART_MODE_TX_RX;
 8000ee4:	4b18      	ldr	r3, [pc, #96]	; (8000f48 <main+0xbc>)
 8000ee6:	220c      	movs	r2, #12
 8000ee8:	615a      	str	r2, [r3, #20]
  hDiscoUart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eea:	4b17      	ldr	r3, [pc, #92]	; (8000f48 <main+0xbc>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	619a      	str	r2, [r3, #24]
  hDiscoUart.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ef0:	4b15      	ldr	r3, [pc, #84]	; (8000f48 <main+0xbc>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	61da      	str	r2, [r3, #28]
  hDiscoUart.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ef6:	4b14      	ldr	r3, [pc, #80]	; (8000f48 <main+0xbc>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	621a      	str	r2, [r3, #32]
  hDiscoUart.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000efc:	4b12      	ldr	r3, [pc, #72]	; (8000f48 <main+0xbc>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	629a      	str	r2, [r3, #40]	; 0x28


  BSP_COM_Init(COM1, &hDiscoUart);
 8000f02:	4911      	ldr	r1, [pc, #68]	; (8000f48 <main+0xbc>)
 8000f04:	2000      	movs	r0, #0
 8000f06:	f002 fd91 	bl	8003a2c <BSP_COM_Init>
  BSP_TSENSOR_Init();
 8000f0a:	f002 ff4b 	bl	8003da4 <BSP_TSENSOR_Init>

  /* testing mic */
  if (HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter0, recordingBuffer, VOICE_BUFLEN) != HAL_OK) {
 8000f0e:	f241 3388 	movw	r3, #5000	; 0x1388
 8000f12:	461a      	mov	r2, r3
 8000f14:	490e      	ldr	r1, [pc, #56]	; (8000f50 <main+0xc4>)
 8000f16:	480f      	ldr	r0, [pc, #60]	; (8000f54 <main+0xc8>)
 8000f18:	f003 fcaa 	bl	8004870 <HAL_DFSDM_FilterRegularStart_DMA>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d002      	beq.n	8000f28 <main+0x9c>
	  printf("Failed to get mic data\r\n");
 8000f22:	480d      	ldr	r0, [pc, #52]	; (8000f58 <main+0xcc>)
 8000f24:	f00a f908 	bl	800b138 <puts>
  }
  transformBufferToDAC(recordingBuffer, VOICE_BUFLEN);
 8000f28:	f241 3388 	movw	r3, #5000	; 0x1388
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	4808      	ldr	r0, [pc, #32]	; (8000f50 <main+0xc4>)
 8000f30:	f000 f986 	bl	8001240 <transformBufferToDAC>

  printf("****** RECEIVING BOARD Initiating ******\r\n");
 8000f34:	4809      	ldr	r0, [pc, #36]	; (8000f5c <main+0xd0>)
 8000f36:	f00a f8ff 	bl	800b138 <puts>

#endif /* TERMINAL_USE */

 // wifi_server();
  wifi_test();
 8000f3a:	f000 f811 	bl	8000f60 <wifi_test>

  while (1){
 8000f3e:	e7fe      	b.n	8000f3e <main+0xb2>
 8000f40:	200000a8 	.word	0x200000a8
 8000f44:	20000208 	.word	0x20000208
 8000f48:	20006250 	.word	0x20006250
 8000f4c:	40013800 	.word	0x40013800
 8000f50:	20000658 	.word	0x20000658
 8000f54:	2000011c 	.word	0x2000011c
 8000f58:	0800c3e0 	.word	0x0800c3e0
 8000f5c:	0800c3f8 	.word	0x0800c3f8

08000f60 <wifi_test>:

  }
}

static int wifi_test(void) {
 8000f60:	b590      	push	{r4, r7, lr}
 8000f62:	b089      	sub	sp, #36	; 0x24
 8000f64:	af02      	add	r7, sp, #8


	// start the wifi module
	wifi_start();
 8000f66:	f000 f92f 	bl	80011c8 <wifi_start>

	// connect to existing AP
	char* ssid = "Dinowifi";
 8000f6a:	4b3f      	ldr	r3, [pc, #252]	; (8001068 <wifi_test+0x108>)
 8000f6c:	617b      	str	r3, [r7, #20]
	char* password = "shuangdu1976!";
 8000f6e:	4b3f      	ldr	r3, [pc, #252]	; (800106c <wifi_test+0x10c>)
 8000f70:	613b      	str	r3, [r7, #16]
	uint8_t security = WIFI_ECN_WPA2_PSK;
 8000f72:	2303      	movs	r3, #3
 8000f74:	73fb      	strb	r3, [r7, #15]
	  if (WIFI_Connect(ssid, password, security) == WIFI_STATUS_OK)
 8000f76:	7bfb      	ldrb	r3, [r7, #15]
 8000f78:	461a      	mov	r2, r3
 8000f7a:	6939      	ldr	r1, [r7, #16]
 8000f7c:	6978      	ldr	r0, [r7, #20]
 8000f7e:	f002 fae1 	bl	8003544 <WIFI_Connect>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d128      	bne.n	8000fda <wifi_test+0x7a>
	  {
	    if(WIFI_GetIP_Address(IP_Addr, sizeof(IP_Addr)) == WIFI_STATUS_OK)
 8000f88:	2104      	movs	r1, #4
 8000f8a:	4839      	ldr	r0, [pc, #228]	; (8001070 <wifi_test+0x110>)
 8000f8c:	f002 fb1c 	bl	80035c8 <WIFI_GetIP_Address>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d11b      	bne.n	8000fce <wifi_test+0x6e>
	    {
	      LOG(("eS-WiFi module connected: got IP Address : %d.%d.%d.%d\r\n",
 8000f96:	4b36      	ldr	r3, [pc, #216]	; (8001070 <wifi_test+0x110>)
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	4b34      	ldr	r3, [pc, #208]	; (8001070 <wifi_test+0x110>)
 8000f9e:	785b      	ldrb	r3, [r3, #1]
 8000fa0:	461a      	mov	r2, r3
 8000fa2:	4b33      	ldr	r3, [pc, #204]	; (8001070 <wifi_test+0x110>)
 8000fa4:	789b      	ldrb	r3, [r3, #2]
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	4b31      	ldr	r3, [pc, #196]	; (8001070 <wifi_test+0x110>)
 8000faa:	78db      	ldrb	r3, [r3, #3]
 8000fac:	9300      	str	r3, [sp, #0]
 8000fae:	4603      	mov	r3, r0
 8000fb0:	4830      	ldr	r0, [pc, #192]	; (8001074 <wifi_test+0x114>)
 8000fb2:	f00a f853 	bl	800b05c <iprintf>
	     LOG(("ERROR : es-wifi module NOT connected\r\n"));
	     return -1;
	  }

	 // starting server
	  if (WIFI_STATUS_OK != WIFI_StartServer(SOCKET, WIFI_TCP_PROTOCOL, 1, "", PORT)) {
 8000fb6:	2350      	movs	r3, #80	; 0x50
 8000fb8:	9300      	str	r3, [sp, #0]
 8000fba:	4b2f      	ldr	r3, [pc, #188]	; (8001078 <wifi_test+0x118>)
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	2100      	movs	r1, #0
 8000fc0:	2000      	movs	r0, #0
 8000fc2:	f002 fb25 	bl	8003610 <WIFI_StartServer>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d012      	beq.n	8000ff2 <wifi_test+0x92>
 8000fcc:	e00b      	b.n	8000fe6 <wifi_test+0x86>
	      LOG(("ERROR : es-wifi module CANNOT get IP address\r\n"));
 8000fce:	482b      	ldr	r0, [pc, #172]	; (800107c <wifi_test+0x11c>)
 8000fd0:	f00a f8b2 	bl	800b138 <puts>
	      return -1;
 8000fd4:	f04f 33ff 	mov.w	r3, #4294967295
 8000fd8:	e041      	b.n	800105e <wifi_test+0xfe>
	     LOG(("ERROR : es-wifi module NOT connected\r\n"));
 8000fda:	4829      	ldr	r0, [pc, #164]	; (8001080 <wifi_test+0x120>)
 8000fdc:	f00a f8ac 	bl	800b138 <puts>
	     return -1;
 8000fe0:	f04f 33ff 	mov.w	r3, #4294967295
 8000fe4:	e03b      	b.n	800105e <wifi_test+0xfe>
		  LOG(("ERROR: Could not start server \r\n"));
 8000fe6:	4827      	ldr	r0, [pc, #156]	; (8001084 <wifi_test+0x124>)
 8000fe8:	f00a f8a6 	bl	800b138 <puts>
		  return -1;
 8000fec:	f04f 33ff 	mov.w	r3, #4294967295
 8000ff0:	e035      	b.n	800105e <wifi_test+0xfe>
	  uint8_t RemoteIP[4];
	  uint16_t RemotePort;

	  while(true) {
		  // wait for connection: wait for either a post req. or a get req. from client
		  printf("Waiting for client connection \r\n");
 8000ff2:	4825      	ldr	r0, [pc, #148]	; (8001088 <wifi_test+0x128>)
 8000ff4:	f00a f8a0 	bl	800b138 <puts>
		  while (WIFI_STATUS_OK != WIFI_WaitServerConnection(SOCKET, 1000, RemoteIP, sizeof(RemoteIP), &RemotePort))
 8000ff8:	e002      	b.n	8001000 <wifi_test+0xa0>
		  {
		        LOG(("."));
 8000ffa:	202e      	movs	r0, #46	; 0x2e
 8000ffc:	f00a f840 	bl	800b080 <putchar>
		  while (WIFI_STATUS_OK != WIFI_WaitServerConnection(SOCKET, 1000, RemoteIP, sizeof(RemoteIP), &RemotePort))
 8001000:	f107 0208 	add.w	r2, r7, #8
 8001004:	1dbb      	adds	r3, r7, #6
 8001006:	9300      	str	r3, [sp, #0]
 8001008:	2304      	movs	r3, #4
 800100a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800100e:	2000      	movs	r0, #0
 8001010:	f002 fb2e 	bl	8003670 <WIFI_WaitServerConnection>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d1ef      	bne.n	8000ffa <wifi_test+0x9a>
		  }
		  LOG(("\nClient connected %d.%d.%d.%d:%d\r\n",RemoteIP[0],RemoteIP[1],RemoteIP[2],RemoteIP[3],RemotePort));
 800101a:	7a3b      	ldrb	r3, [r7, #8]
 800101c:	4619      	mov	r1, r3
 800101e:	7a7b      	ldrb	r3, [r7, #9]
 8001020:	4618      	mov	r0, r3
 8001022:	7abb      	ldrb	r3, [r7, #10]
 8001024:	461c      	mov	r4, r3
 8001026:	7afb      	ldrb	r3, [r7, #11]
 8001028:	88fa      	ldrh	r2, [r7, #6]
 800102a:	9201      	str	r2, [sp, #4]
 800102c:	9300      	str	r3, [sp, #0]
 800102e:	4623      	mov	r3, r4
 8001030:	4602      	mov	r2, r0
 8001032:	4816      	ldr	r0, [pc, #88]	; (800108c <wifi_test+0x12c>)
 8001034:	f00a f812 	bl	800b05c <iprintf>

		  // process server
		  printf("Processing server \r\n");
 8001038:	4815      	ldr	r0, [pc, #84]	; (8001090 <wifi_test+0x130>)
 800103a:	f00a f87d 	bl	800b138 <puts>
		  ProcessServerTest();
 800103e:	f000 f82d 	bl	800109c <ProcessServerTest>

		  // close connection
		  printf("Closing current connection \r\n");
 8001042:	4814      	ldr	r0, [pc, #80]	; (8001094 <wifi_test+0x134>)
 8001044:	f00a f878 	bl	800b138 <puts>
		  if (WIFI_STATUS_OK != WIFI_CloseServerConnection(SOCKET)) {
 8001048:	2000      	movs	r0, #0
 800104a:	f002 fb59 	bl	8003700 <WIFI_CloseServerConnection>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d0ce      	beq.n	8000ff2 <wifi_test+0x92>
			  LOG(("Server could not be closed \r\n"));
 8001054:	4810      	ldr	r0, [pc, #64]	; (8001098 <wifi_test+0x138>)
 8001056:	f00a f86f 	bl	800b138 <puts>
			  return -1;
 800105a:	f04f 33ff 	mov.w	r3, #4294967295
		  }

	  }
}
 800105e:	4618      	mov	r0, r3
 8001060:	371c      	adds	r7, #28
 8001062:	46bd      	mov	sp, r7
 8001064:	bd90      	pop	{r4, r7, pc}
 8001066:	bf00      	nop
 8001068:	0800c424 	.word	0x0800c424
 800106c:	0800c430 	.word	0x0800c430
 8001070:	20000654 	.word	0x20000654
 8001074:	0800c440 	.word	0x0800c440
 8001078:	0800c4d4 	.word	0x0800c4d4
 800107c:	0800c47c 	.word	0x0800c47c
 8001080:	0800c4ac 	.word	0x0800c4ac
 8001084:	0800c4d8 	.word	0x0800c4d8
 8001088:	0800c4f8 	.word	0x0800c4f8
 800108c:	0800c518 	.word	0x0800c518
 8001090:	0800c53c 	.word	0x0800c53c
 8001094:	0800c550 	.word	0x0800c550
 8001098:	0800c570 	.word	0x0800c570

0800109c <ProcessServerTest>:


static WIFI_Status_t ProcessServerTest() {
 800109c:	b580      	push	{r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af02      	add	r7, sp, #8
	// get the resp
	WIFI_Status_t ret;
	uint16_t respLen;
	static uint8_t resp[1024]; //what happens if the resp is longer than 1024? do we just die?
	if (WIFI_STATUS_OK == WIFI_ReceiveData(SOCKET, resp, 1000, &respLen, WIFI_READ_TIMEOUT)) {
 80010a2:	1d3b      	adds	r3, r7, #4
 80010a4:	f242 7210 	movw	r2, #10000	; 0x2710
 80010a8:	9200      	str	r2, [sp, #0]
 80010aa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80010ae:	491c      	ldr	r1, [pc, #112]	; (8001120 <ProcessServerTest+0x84>)
 80010b0:	2000      	movs	r0, #0
 80010b2:	f002 fb5f 	bl	8003774 <WIFI_ReceiveData>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d12c      	bne.n	8001116 <ProcessServerTest+0x7a>
		if (respLen > 0) {
 80010bc:	88bb      	ldrh	r3, [r7, #4]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d027      	beq.n	8001112 <ProcessServerTest+0x76>
			if (strstr((char*)resp, "POST")) {
 80010c2:	4918      	ldr	r1, [pc, #96]	; (8001124 <ProcessServerTest+0x88>)
 80010c4:	4816      	ldr	r0, [pc, #88]	; (8001120 <ProcessServerTest+0x84>)
 80010c6:	f00a f9df 	bl	800b488 <strstr>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d007      	beq.n	80010e0 <ProcessServerTest+0x44>
				printf("Received POST req \r\n");
 80010d0:	4815      	ldr	r0, [pc, #84]	; (8001128 <ProcessServerTest+0x8c>)
 80010d2:	f00a f831 	bl	800b138 <puts>
				printf("Request: %s\r\n", resp);
 80010d6:	4912      	ldr	r1, [pc, #72]	; (8001120 <ProcessServerTest+0x84>)
 80010d8:	4814      	ldr	r0, [pc, #80]	; (800112c <ProcessServerTest+0x90>)
 80010da:	f009 ffbf 	bl	800b05c <iprintf>
 80010de:	e01a      	b.n	8001116 <ProcessServerTest+0x7a>
				// we need to respond to this request, we will do so by sending the webpage back
				//SendCustomPage();
			} else if (strstr((char*)resp, "GET")) {
 80010e0:	4913      	ldr	r1, [pc, #76]	; (8001130 <ProcessServerTest+0x94>)
 80010e2:	480f      	ldr	r0, [pc, #60]	; (8001120 <ProcessServerTest+0x84>)
 80010e4:	f00a f9d0 	bl	800b488 <strstr>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d007      	beq.n	80010fe <ProcessServerTest+0x62>
				printf("Received GET req \r\n");
 80010ee:	4811      	ldr	r0, [pc, #68]	; (8001134 <ProcessServerTest+0x98>)
 80010f0:	f00a f822 	bl	800b138 <puts>
				printf("Request: %s\r\n", resp);
 80010f4:	490a      	ldr	r1, [pc, #40]	; (8001120 <ProcessServerTest+0x84>)
 80010f6:	480d      	ldr	r0, [pc, #52]	; (800112c <ProcessServerTest+0x90>)
 80010f8:	f009 ffb0 	bl	800b05c <iprintf>
 80010fc:	e00b      	b.n	8001116 <ProcessServerTest+0x7a>
				// get request => we will just resend the custom page
				//SendCustomPage();
			} else {
				printf("Received other request \r\n");
 80010fe:	480e      	ldr	r0, [pc, #56]	; (8001138 <ProcessServerTest+0x9c>)
 8001100:	f00a f81a 	bl	800b138 <puts>
				printf("Request: %s\r\n", resp);
 8001104:	4906      	ldr	r1, [pc, #24]	; (8001120 <ProcessServerTest+0x84>)
 8001106:	4809      	ldr	r0, [pc, #36]	; (800112c <ProcessServerTest+0x90>)
 8001108:	f009 ffa8 	bl	800b05c <iprintf>
				send_receive_confirmation();
 800110c:	f000 f816 	bl	800113c <send_receive_confirmation>
 8001110:	e001      	b.n	8001116 <ProcessServerTest+0x7a>
			}
		} else {
			ret = WIFI_STATUS_ERROR;
 8001112:	2301      	movs	r3, #1
 8001114:	71fb      	strb	r3, [r7, #7]
		}
	}
	return WIFI_STATUS_OK;
 8001116:	2300      	movs	r3, #0
}
 8001118:	4618      	mov	r0, r3
 800111a:	3708      	adds	r7, #8
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	20005478 	.word	0x20005478
 8001124:	0800c590 	.word	0x0800c590
 8001128:	0800c598 	.word	0x0800c598
 800112c:	0800c5ac 	.word	0x0800c5ac
 8001130:	0800c5bc 	.word	0x0800c5bc
 8001134:	0800c5c0 	.word	0x0800c5c0
 8001138:	0800c5d4 	.word	0x0800c5d4

0800113c <send_receive_confirmation>:
	  LOG(("Web page sent out\r\n"));
	  memset(http, 0, strlen(http)); // erase the values stored in http
	  return WIFI_STATUS_OK;
}

static int send_receive_confirmation() {
 800113c:	b590      	push	{r4, r7, lr}
 800113e:	b087      	sub	sp, #28
 8001140:	af02      	add	r7, sp, #8
	  uint16_t SentDataLength;
	  WIFI_Status_t ret;
	  char* http_header = "HTTP/1.0 200 OK\r\nContent-Type: text/plain\r\nPragma: no-cache\r\n\r\n";
 8001142:	4b1d      	ldr	r3, [pc, #116]	; (80011b8 <send_receive_confirmation+0x7c>)
 8001144:	60bb      	str	r3, [r7, #8]
	  char* message = "Message received";
 8001146:	4b1d      	ldr	r3, [pc, #116]	; (80011bc <send_receive_confirmation+0x80>)
 8001148:	607b      	str	r3, [r7, #4]
	  strcpy((char *)http, http_header);
 800114a:	68b9      	ldr	r1, [r7, #8]
 800114c:	481c      	ldr	r0, [pc, #112]	; (80011c0 <send_receive_confirmation+0x84>)
 800114e:	f00a fa33 	bl	800b5b8 <strcpy>
	  strcat((char *)http, message);
 8001152:	6879      	ldr	r1, [r7, #4]
 8001154:	481a      	ldr	r0, [pc, #104]	; (80011c0 <send_receive_confirmation+0x84>)
 8001156:	f00a f907 	bl	800b368 <strcat>
	  ret = WIFI_SendData(0, (uint8_t *)http, strlen(http), &SentDataLength, WIFI_WRITE_TIMEOUT);
 800115a:	4819      	ldr	r0, [pc, #100]	; (80011c0 <send_receive_confirmation+0x84>)
 800115c:	f7ff f850 	bl	8000200 <strlen>
 8001160:	4603      	mov	r3, r0
 8001162:	b29a      	uxth	r2, r3
 8001164:	1cbb      	adds	r3, r7, #2
 8001166:	f242 7110 	movw	r1, #10000	; 0x2710
 800116a:	9100      	str	r1, [sp, #0]
 800116c:	4914      	ldr	r1, [pc, #80]	; (80011c0 <send_receive_confirmation+0x84>)
 800116e:	2000      	movs	r0, #0
 8001170:	f002 fade 	bl	8003730 <WIFI_SendData>
 8001174:	4603      	mov	r3, r0
 8001176:	73fb      	strb	r3, [r7, #15]
	  if (ret != WIFI_STATUS_OK && (SentDataLength != strlen(http))) {
 8001178:	7bfb      	ldrb	r3, [r7, #15]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d009      	beq.n	8001192 <send_receive_confirmation+0x56>
 800117e:	887b      	ldrh	r3, [r7, #2]
 8001180:	461c      	mov	r4, r3
 8001182:	480f      	ldr	r0, [pc, #60]	; (80011c0 <send_receive_confirmation+0x84>)
 8001184:	f7ff f83c 	bl	8000200 <strlen>
 8001188:	4603      	mov	r3, r0
 800118a:	429c      	cmp	r4, r3
 800118c:	d001      	beq.n	8001192 <send_receive_confirmation+0x56>
		  ret = WIFI_STATUS_ERROR;
 800118e:	2301      	movs	r3, #1
 8001190:	73fb      	strb	r3, [r7, #15]
	  }
	  printf("Request sent out to sending board\r\n: %s", http);
 8001192:	490b      	ldr	r1, [pc, #44]	; (80011c0 <send_receive_confirmation+0x84>)
 8001194:	480b      	ldr	r0, [pc, #44]	; (80011c4 <send_receive_confirmation+0x88>)
 8001196:	f009 ff61 	bl	800b05c <iprintf>
	  memset(http, 0, strlen(http)); // clear the http var after usage
 800119a:	4809      	ldr	r0, [pc, #36]	; (80011c0 <send_receive_confirmation+0x84>)
 800119c:	f7ff f830 	bl	8000200 <strlen>
 80011a0:	4603      	mov	r3, r0
 80011a2:	461a      	mov	r2, r3
 80011a4:	2100      	movs	r1, #0
 80011a6:	4806      	ldr	r0, [pc, #24]	; (80011c0 <send_receive_confirmation+0x84>)
 80011a8:	f00a f8d6 	bl	800b358 <memset>
	  return ret;
 80011ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3714      	adds	r7, #20
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd90      	pop	{r4, r7, pc}
 80011b6:	bf00      	nop
 80011b8:	0800c714 	.word	0x0800c714
 80011bc:	0800c754 	.word	0x0800c754
 80011c0:	20000254 	.word	0x20000254
 80011c4:	0800c768 	.word	0x0800c768

080011c8 <wifi_start>:
  * @retval None
  */


static int wifi_start(void)
{
 80011c8:	b5b0      	push	{r4, r5, r7, lr}
 80011ca:	b086      	sub	sp, #24
 80011cc:	af04      	add	r7, sp, #16
  uint8_t  MAC_Addr[6];

 /*Initialize and use WIFI module */
  if(WIFI_Init() ==  WIFI_STATUS_OK)
 80011ce:	f002 f98d 	bl	80034ec <WIFI_Init>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d124      	bne.n	8001222 <wifi_start+0x5a>
  {
    printf("eS-WiFi Initialized.\r\n");
 80011d8:	4815      	ldr	r0, [pc, #84]	; (8001230 <wifi_start+0x68>)
 80011da:	f009 ffad 	bl	800b138 <puts>
    if(WIFI_GetMAC_Address(MAC_Addr, sizeof(MAC_Addr)) == WIFI_STATUS_OK)
 80011de:	463b      	mov	r3, r7
 80011e0:	2106      	movs	r1, #6
 80011e2:	4618      	mov	r0, r3
 80011e4:	f002 f9d0 	bl	8003588 <WIFI_GetMAC_Address>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d113      	bne.n	8001216 <wifi_start+0x4e>
    {
      LOG(("eS-WiFi module MAC Address : %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 80011ee:	783b      	ldrb	r3, [r7, #0]
 80011f0:	4618      	mov	r0, r3
 80011f2:	787b      	ldrb	r3, [r7, #1]
 80011f4:	461c      	mov	r4, r3
 80011f6:	78bb      	ldrb	r3, [r7, #2]
 80011f8:	461d      	mov	r5, r3
 80011fa:	78fb      	ldrb	r3, [r7, #3]
 80011fc:	793a      	ldrb	r2, [r7, #4]
 80011fe:	7979      	ldrb	r1, [r7, #5]
 8001200:	9102      	str	r1, [sp, #8]
 8001202:	9201      	str	r2, [sp, #4]
 8001204:	9300      	str	r3, [sp, #0]
 8001206:	462b      	mov	r3, r5
 8001208:	4622      	mov	r2, r4
 800120a:	4601      	mov	r1, r0
 800120c:	4809      	ldr	r0, [pc, #36]	; (8001234 <wifi_start+0x6c>)
 800120e:	f009 ff25 	bl	800b05c <iprintf>
  }
  else
  {
    return -1;
  }
  return 0;
 8001212:	2300      	movs	r3, #0
 8001214:	e007      	b.n	8001226 <wifi_start+0x5e>
      LOG(("> ERROR : CANNOT get MAC address\r\n"));
 8001216:	4808      	ldr	r0, [pc, #32]	; (8001238 <wifi_start+0x70>)
 8001218:	f009 ff8e 	bl	800b138 <puts>
      return -1;
 800121c:	f04f 33ff 	mov.w	r3, #4294967295
 8001220:	e001      	b.n	8001226 <wifi_start+0x5e>
    return -1;
 8001222:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001226:	4618      	mov	r0, r3
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bdb0      	pop	{r4, r5, r7, pc}
 800122e:	bf00      	nop
 8001230:	0800c790 	.word	0x0800c790
 8001234:	0800c7a8 	.word	0x0800c7a8
 8001238:	0800c7e8 	.word	0x0800c7e8
 800123c:	00000000 	.word	0x00000000

08001240 <transformBufferToDAC>:


/**
 * Transforms a buffer's values into valid DAC 8bit right aligned values
 */
void transformBufferToDAC(int32_t *buffer, uint32_t recording_buffer_length) {
 8001240:	b580      	push	{r7, lr}
 8001242:	b086      	sub	sp, #24
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < recording_buffer_length; i++) {
 800124a:	2300      	movs	r3, #0
 800124c:	617b      	str	r3, [r7, #20]
 800124e:	e06b      	b.n	8001328 <transformBufferToDAC+0xe8>
		int32_t val = buffer[i]; // 24-bit value
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	009b      	lsls	r3, r3, #2
 8001254:	687a      	ldr	r2, [r7, #4]
 8001256:	4413      	add	r3, r2
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	613b      	str	r3, [r7, #16]
		val = val >> 8; // remove this for LOUDER but MORE SCUFFED NOISE
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	121b      	asrs	r3, r3, #8
 8001260:	613b      	str	r3, [r7, #16]
		// need to map buffer values to 8bit right alligned values (uint8_t)
		// from experimentation (screaming at the board): min values tend to be -3000 and max seems to be ~1000
		const int16_t MAX_VAL = 2000;
 8001262:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001266:	81fb      	strh	r3, [r7, #14]
		const int16_t MIN_VAL = -1500;
 8001268:	f64f 2324 	movw	r3, #64036	; 0xfa24
 800126c:	81bb      	strh	r3, [r7, #12]
		const float a = (255.0)/(MAX_VAL - MIN_VAL); // slope
 800126e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001272:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001276:	1ad3      	subs	r3, r2, r3
 8001278:	4618      	mov	r0, r3
 800127a:	f7ff f96b 	bl	8000554 <__aeabi_i2d>
 800127e:	4602      	mov	r2, r0
 8001280:	460b      	mov	r3, r1
 8001282:	a12f      	add	r1, pc, #188	; (adr r1, 8001340 <transformBufferToDAC+0x100>)
 8001284:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001288:	f7ff faf8 	bl	800087c <__aeabi_ddiv>
 800128c:	4602      	mov	r2, r0
 800128e:	460b      	mov	r3, r1
 8001290:	4610      	mov	r0, r2
 8001292:	4619      	mov	r1, r3
 8001294:	f7ff fc02 	bl	8000a9c <__aeabi_d2f>
 8001298:	4603      	mov	r3, r0
 800129a:	60bb      	str	r3, [r7, #8]

		// clip buffer values to within [-MIN_VAL, MAX_VAL]
		if (val <= MIN_VAL) {
 800129c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80012a0:	693a      	ldr	r2, [r7, #16]
 80012a2:	429a      	cmp	r2, r3
 80012a4:	dc02      	bgt.n	80012ac <transformBufferToDAC+0x6c>
			val = MIN_VAL;
 80012a6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80012aa:	613b      	str	r3, [r7, #16]
		}
		if (val >= MAX_VAL) {
 80012ac:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80012b0:	693a      	ldr	r2, [r7, #16]
 80012b2:	429a      	cmp	r2, r3
 80012b4:	db02      	blt.n	80012bc <transformBufferToDAC+0x7c>
			val = MAX_VAL;
 80012b6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80012ba:	613b      	str	r3, [r7, #16]
		}
		// scale values up by [-MIN_VAL] to make sure no negatives
		if (MIN_VAL < 0) {
 80012bc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	da04      	bge.n	80012ce <transformBufferToDAC+0x8e>
			val += (-MIN_VAL);
 80012c4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80012c8:	693a      	ldr	r2, [r7, #16]
 80012ca:	1ad3      	subs	r3, r2, r3
 80012cc:	613b      	str	r3, [r7, #16]
		}
		// now the range of val should be [0, MAX_VAL-MIN_VAL], apply linear function to get DAC val
		val = round(a*val);
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	ee07 3a90 	vmov	s15, r3
 80012d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012d8:	edd7 7a02 	vldr	s15, [r7, #8]
 80012dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012e0:	ee17 0a90 	vmov	r0, s15
 80012e4:	f7ff f948 	bl	8000578 <__aeabi_f2d>
 80012e8:	4602      	mov	r2, r0
 80012ea:	460b      	mov	r3, r1
 80012ec:	ec43 2b10 	vmov	d0, r2, r3
 80012f0:	f00b f822 	bl	800c338 <round>
 80012f4:	ec53 2b10 	vmov	r2, r3, d0
 80012f8:	4610      	mov	r0, r2
 80012fa:	4619      	mov	r1, r3
 80012fc:	f7ff fba6 	bl	8000a4c <__aeabi_d2iz>
 8001300:	4603      	mov	r3, r0
 8001302:	613b      	str	r3, [r7, #16]
		if (val >= 0 && val <= 255) {
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	2b00      	cmp	r3, #0
 8001308:	db09      	blt.n	800131e <transformBufferToDAC+0xde>
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	2bff      	cmp	r3, #255	; 0xff
 800130e:	dc06      	bgt.n	800131e <transformBufferToDAC+0xde>
			buffer[i] = val; // change the buffer
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	687a      	ldr	r2, [r7, #4]
 8001316:	4413      	add	r3, r2
 8001318:	693a      	ldr	r2, [r7, #16]
 800131a:	601a      	str	r2, [r3, #0]
 800131c:	e001      	b.n	8001322 <transformBufferToDAC+0xe2>
		} else {
			Error_Handler(); // should not happen
 800131e:	f000 f9ce 	bl	80016be <Error_Handler>
	for (int i = 0; i < recording_buffer_length; i++) {
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	3301      	adds	r3, #1
 8001326:	617b      	str	r3, [r7, #20]
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	683a      	ldr	r2, [r7, #0]
 800132c:	429a      	cmp	r2, r3
 800132e:	d88f      	bhi.n	8001250 <transformBufferToDAC+0x10>
		}
	}
}
 8001330:	bf00      	nop
 8001332:	bf00      	nop
 8001334:	3718      	adds	r7, #24
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	f3af 8000 	nop.w
 8001340:	00000000 	.word	0x00000000
 8001344:	406fe000 	.word	0x406fe000

08001348 <SystemClock_Config>:
  *            Flash Latency(WS)              = 4
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b096      	sub	sp, #88	; 0x58
 800134c:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  /* MSI is enabled after System reset, activate PLL with MSI as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800134e:	2310      	movs	r3, #16
 8001350:	603b      	str	r3, [r7, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001352:	2301      	movs	r3, #1
 8001354:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001356:	2360      	movs	r3, #96	; 0x60
 8001358:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800135a:	2300      	movs	r3, #0
 800135c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800135e:	2302      	movs	r3, #2
 8001360:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001362:	2301      	movs	r3, #1
 8001364:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001366:	2301      	movs	r3, #1
 8001368:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLN = 40;
 800136a:	2328      	movs	r3, #40	; 0x28
 800136c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLR = 2;
 800136e:	2302      	movs	r3, #2
 8001370:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = 7;
 8001372:	2307      	movs	r3, #7
 8001374:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001376:	2304      	movs	r3, #4
 8001378:	63fb      	str	r3, [r7, #60]	; 0x3c
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800137a:	463b      	mov	r3, r7
 800137c:	4618      	mov	r0, r3
 800137e:	f004 fec3 	bl	8006108 <HAL_RCC_OscConfig>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d000      	beq.n	800138a <SystemClock_Config+0x42>
  {
    /* Initialization Error */
    while(1);
 8001388:	e7fe      	b.n	8001388 <SystemClock_Config+0x40>
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 800138a:	230f      	movs	r3, #15
 800138c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800138e:	2303      	movs	r3, #3
 8001390:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001392:	2300      	movs	r3, #0
 8001394:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001396:	2300      	movs	r3, #0
 8001398:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800139a:	2300      	movs	r3, #0
 800139c:	657b      	str	r3, [r7, #84]	; 0x54
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800139e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80013a2:	2104      	movs	r1, #4
 80013a4:	4618      	mov	r0, r3
 80013a6:	f005 fac9 	bl	800693c <HAL_RCC_ClockConfig>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d000      	beq.n	80013b2 <SystemClock_Config+0x6a>
  {
    /* Initialization Error */
    while(1);
 80013b0:	e7fe      	b.n	80013b0 <SystemClock_Config+0x68>
  }
}
 80013b2:	bf00      	nop
 80013b4:	3758      	adds	r7, #88	; 0x58
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
	...

080013bc <MX_DAC1_Init>:

static void MX_DAC1_Init(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b08a      	sub	sp, #40	; 0x28
 80013c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80013c2:	463b      	mov	r3, r7
 80013c4:	2228      	movs	r2, #40	; 0x28
 80013c6:	2100      	movs	r1, #0
 80013c8:	4618      	mov	r0, r3
 80013ca:	f009 ffc5 	bl	800b358 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80013ce:	4b1a      	ldr	r3, [pc, #104]	; (8001438 <MX_DAC1_Init+0x7c>)
 80013d0:	4a1a      	ldr	r2, [pc, #104]	; (800143c <MX_DAC1_Init+0x80>)
 80013d2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80013d4:	4818      	ldr	r0, [pc, #96]	; (8001438 <MX_DAC1_Init+0x7c>)
 80013d6:	f002 feaa 	bl	800412e <HAL_DAC_Init>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80013e0:	f000 f96d 	bl	80016be <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80013e4:	2300      	movs	r3, #0
 80013e6:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 80013e8:	230a      	movs	r3, #10
 80013ea:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80013ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80013f0:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80013f2:	2300      	movs	r3, #0
 80013f4:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80013f6:	2300      	movs	r3, #0
 80013f8:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80013fa:	2300      	movs	r3, #0
 80013fc:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80013fe:	463b      	mov	r3, r7
 8001400:	2200      	movs	r2, #0
 8001402:	4619      	mov	r1, r3
 8001404:	480c      	ldr	r0, [pc, #48]	; (8001438 <MX_DAC1_Init+0x7c>)
 8001406:	f002 ff07 	bl	8004218 <HAL_DAC_ConfigChannel>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <MX_DAC1_Init+0x58>
  {
    Error_Handler();
 8001410:	f000 f955 	bl	80016be <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001414:	2300      	movs	r3, #0
 8001416:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001418:	463b      	mov	r3, r7
 800141a:	2210      	movs	r2, #16
 800141c:	4619      	mov	r1, r3
 800141e:	4806      	ldr	r0, [pc, #24]	; (8001438 <MX_DAC1_Init+0x7c>)
 8001420:	f002 fefa 	bl	8004218 <HAL_DAC_ConfigChannel>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <MX_DAC1_Init+0x72>
  {
    Error_Handler();
 800142a:	f000 f948 	bl	80016be <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800142e:	bf00      	nop
 8001430:	3728      	adds	r7, #40	; 0x28
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	200000a8 	.word	0x200000a8
 800143c:	40007400 	.word	0x40007400

08001440 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 8001444:	4b2b      	ldr	r3, [pc, #172]	; (80014f4 <MX_DFSDM1_Init+0xb4>)
 8001446:	4a2c      	ldr	r2, [pc, #176]	; (80014f8 <MX_DFSDM1_Init+0xb8>)
 8001448:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 800144a:	4b2a      	ldr	r3, [pc, #168]	; (80014f4 <MX_DFSDM1_Init+0xb4>)
 800144c:	2200      	movs	r2, #0
 800144e:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 8001450:	4b28      	ldr	r3, [pc, #160]	; (80014f4 <MX_DFSDM1_Init+0xb4>)
 8001452:	2201      	movs	r2, #1
 8001454:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 8001456:	4b27      	ldr	r3, [pc, #156]	; (80014f4 <MX_DFSDM1_Init+0xb4>)
 8001458:	2201      	movs	r2, #1
 800145a:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_FASTSINC_ORDER;
 800145c:	4b25      	ldr	r3, [pc, #148]	; (80014f4 <MX_DFSDM1_Init+0xb4>)
 800145e:	2200      	movs	r2, #0
 8001460:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 100;
 8001462:	4b24      	ldr	r3, [pc, #144]	; (80014f4 <MX_DFSDM1_Init+0xb4>)
 8001464:	2264      	movs	r2, #100	; 0x64
 8001466:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 8001468:	4b22      	ldr	r3, [pc, #136]	; (80014f4 <MX_DFSDM1_Init+0xb4>)
 800146a:	2201      	movs	r2, #1
 800146c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter0) != HAL_OK)
 800146e:	4821      	ldr	r0, [pc, #132]	; (80014f4 <MX_DFSDM1_Init+0xb4>)
 8001470:	f003 f8de 	bl	8004630 <HAL_DFSDM_FilterInit>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <MX_DFSDM1_Init+0x3e>
  {
    Error_Handler();
 800147a:	f000 f920 	bl	80016be <Error_Handler>
  }
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 800147e:	4b1f      	ldr	r3, [pc, #124]	; (80014fc <MX_DFSDM1_Init+0xbc>)
 8001480:	4a1f      	ldr	r2, [pc, #124]	; (8001500 <MX_DFSDM1_Init+0xc0>)
 8001482:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 8001484:	4b1d      	ldr	r3, [pc, #116]	; (80014fc <MX_DFSDM1_Init+0xbc>)
 8001486:	2201      	movs	r2, #1
 8001488:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 800148a:	4b1c      	ldr	r3, [pc, #112]	; (80014fc <MX_DFSDM1_Init+0xbc>)
 800148c:	2200      	movs	r2, #0
 800148e:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 50;
 8001490:	4b1a      	ldr	r3, [pc, #104]	; (80014fc <MX_DFSDM1_Init+0xbc>)
 8001492:	2232      	movs	r2, #50	; 0x32
 8001494:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8001496:	4b19      	ldr	r3, [pc, #100]	; (80014fc <MX_DFSDM1_Init+0xbc>)
 8001498:	2200      	movs	r2, #0
 800149a:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800149c:	4b17      	ldr	r3, [pc, #92]	; (80014fc <MX_DFSDM1_Init+0xbc>)
 800149e:	2200      	movs	r2, #0
 80014a0:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 80014a2:	4b16      	ldr	r3, [pc, #88]	; (80014fc <MX_DFSDM1_Init+0xbc>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80014a8:	4b14      	ldr	r3, [pc, #80]	; (80014fc <MX_DFSDM1_Init+0xbc>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80014ae:	4b13      	ldr	r3, [pc, #76]	; (80014fc <MX_DFSDM1_Init+0xbc>)
 80014b0:	2204      	movs	r2, #4
 80014b2:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80014b4:	4b11      	ldr	r3, [pc, #68]	; (80014fc <MX_DFSDM1_Init+0xbc>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 80014ba:	4b10      	ldr	r3, [pc, #64]	; (80014fc <MX_DFSDM1_Init+0xbc>)
 80014bc:	2201      	movs	r2, #1
 80014be:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 80014c0:	4b0e      	ldr	r3, [pc, #56]	; (80014fc <MX_DFSDM1_Init+0xbc>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 80014c6:	4b0d      	ldr	r3, [pc, #52]	; (80014fc <MX_DFSDM1_Init+0xbc>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 80014cc:	480b      	ldr	r0, [pc, #44]	; (80014fc <MX_DFSDM1_Init+0xbc>)
 80014ce:	f002 ffef 	bl	80044b0 <HAL_DFSDM_ChannelInit>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <MX_DFSDM1_Init+0x9c>
  {
    Error_Handler();
 80014d8:	f000 f8f1 	bl	80016be <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_2, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 80014dc:	2201      	movs	r2, #1
 80014de:	4909      	ldr	r1, [pc, #36]	; (8001504 <MX_DFSDM1_Init+0xc4>)
 80014e0:	4804      	ldr	r0, [pc, #16]	; (80014f4 <MX_DFSDM1_Init+0xb4>)
 80014e2:	f003 f97f 	bl	80047e4 <HAL_DFSDM_FilterConfigRegChannel>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <MX_DFSDM1_Init+0xb0>
  {
    Error_Handler();
 80014ec:	f000 f8e7 	bl	80016be <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80014f0:	bf00      	nop
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	2000011c 	.word	0x2000011c
 80014f8:	40016100 	.word	0x40016100
 80014fc:	20000170 	.word	0x20000170
 8001500:	40016040 	.word	0x40016040
 8001504:	00020004 	.word	0x00020004

08001508 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b088      	sub	sp, #32
 800150c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800150e:	f107 0310 	add.w	r3, r7, #16
 8001512:	2200      	movs	r2, #0
 8001514:	601a      	str	r2, [r3, #0]
 8001516:	605a      	str	r2, [r3, #4]
 8001518:	609a      	str	r2, [r3, #8]
 800151a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800151c:	1d3b      	adds	r3, r7, #4
 800151e:	2200      	movs	r2, #0
 8001520:	601a      	str	r2, [r3, #0]
 8001522:	605a      	str	r2, [r3, #4]
 8001524:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001526:	4b1e      	ldr	r3, [pc, #120]	; (80015a0 <MX_TIM2_Init+0x98>)
 8001528:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800152c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800152e:	4b1c      	ldr	r3, [pc, #112]	; (80015a0 <MX_TIM2_Init+0x98>)
 8001530:	2200      	movs	r2, #0
 8001532:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001534:	4b1a      	ldr	r3, [pc, #104]	; (80015a0 <MX_TIM2_Init+0x98>)
 8001536:	2200      	movs	r2, #0
 8001538:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5000;
 800153a:	4b19      	ldr	r3, [pc, #100]	; (80015a0 <MX_TIM2_Init+0x98>)
 800153c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001540:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001542:	4b17      	ldr	r3, [pc, #92]	; (80015a0 <MX_TIM2_Init+0x98>)
 8001544:	2200      	movs	r2, #0
 8001546:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001548:	4b15      	ldr	r3, [pc, #84]	; (80015a0 <MX_TIM2_Init+0x98>)
 800154a:	2200      	movs	r2, #0
 800154c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800154e:	4814      	ldr	r0, [pc, #80]	; (80015a0 <MX_TIM2_Init+0x98>)
 8001550:	f008 f8c3 	bl	80096da <HAL_TIM_Base_Init>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800155a:	f000 f8b0 	bl	80016be <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800155e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001562:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001564:	f107 0310 	add.w	r3, r7, #16
 8001568:	4619      	mov	r1, r3
 800156a:	480d      	ldr	r0, [pc, #52]	; (80015a0 <MX_TIM2_Init+0x98>)
 800156c:	f008 fa7e 	bl	8009a6c <HAL_TIM_ConfigClockSource>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001576:	f000 f8a2 	bl	80016be <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800157a:	2320      	movs	r3, #32
 800157c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800157e:	2300      	movs	r3, #0
 8001580:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001582:	1d3b      	adds	r3, r7, #4
 8001584:	4619      	mov	r1, r3
 8001586:	4806      	ldr	r0, [pc, #24]	; (80015a0 <MX_TIM2_Init+0x98>)
 8001588:	f008 fc96 	bl	8009eb8 <HAL_TIMEx_MasterConfigSynchronization>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001592:	f000 f894 	bl	80016be <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001596:	bf00      	nop
 8001598:	3720      	adds	r7, #32
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	20000208 	.word	0x20000208

080015a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80015aa:	4b16      	ldr	r3, [pc, #88]	; (8001604 <MX_DMA_Init+0x60>)
 80015ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015ae:	4a15      	ldr	r2, [pc, #84]	; (8001604 <MX_DMA_Init+0x60>)
 80015b0:	f043 0304 	orr.w	r3, r3, #4
 80015b4:	6493      	str	r3, [r2, #72]	; 0x48
 80015b6:	4b13      	ldr	r3, [pc, #76]	; (8001604 <MX_DMA_Init+0x60>)
 80015b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015ba:	f003 0304 	and.w	r3, r3, #4
 80015be:	607b      	str	r3, [r7, #4]
 80015c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80015c2:	4b10      	ldr	r3, [pc, #64]	; (8001604 <MX_DMA_Init+0x60>)
 80015c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015c6:	4a0f      	ldr	r2, [pc, #60]	; (8001604 <MX_DMA_Init+0x60>)
 80015c8:	f043 0301 	orr.w	r3, r3, #1
 80015cc:	6493      	str	r3, [r2, #72]	; 0x48
 80015ce:	4b0d      	ldr	r3, [pc, #52]	; (8001604 <MX_DMA_Init+0x60>)
 80015d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015d2:	f003 0301 	and.w	r3, r3, #1
 80015d6:	603b      	str	r3, [r7, #0]
 80015d8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80015da:	2200      	movs	r2, #0
 80015dc:	2100      	movs	r1, #0
 80015de:	200b      	movs	r0, #11
 80015e0:	f002 fd6f 	bl	80040c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80015e4:	200b      	movs	r0, #11
 80015e6:	f002 fd88 	bl	80040fa <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80015ea:	2200      	movs	r2, #0
 80015ec:	2100      	movs	r1, #0
 80015ee:	200c      	movs	r0, #12
 80015f0:	f002 fd67 	bl	80040c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80015f4:	200c      	movs	r0, #12
 80015f6:	f002 fd80 	bl	80040fa <HAL_NVIC_EnableIRQ>

}
 80015fa:	bf00      	nop
 80015fc:	3708      	adds	r7, #8
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	40021000 	.word	0x40021000

08001608 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&hDiscoUart, (uint8_t *)&ch, 1, 0xFFFF);
 8001610:	1d39      	adds	r1, r7, #4
 8001612:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001616:	2201      	movs	r2, #1
 8001618:	4803      	ldr	r0, [pc, #12]	; (8001628 <__io_putchar+0x20>)
 800161a:	f008 fd4d 	bl	800a0b8 <HAL_UART_Transmit>

  return ch;
 800161e:	687b      	ldr	r3, [r7, #4]
}
 8001620:	4618      	mov	r0, r3
 8001622:	3708      	adds	r7, #8
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	20006250 	.word	0x20006250

0800162c <__io_getchar>:
  * @brief  Retargets the C library scanf function to the USART.
  * @param  None
  * @retval None
  */
GETCHAR_PROTOTYPE
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
  /* Place your implementation of fgetc here */
  /* e.g. read a character on USART and loop until the end of read */
  uint8_t ch = 0;
 8001632:	2300      	movs	r3, #0
 8001634:	71fb      	strb	r3, [r7, #7]
  while (HAL_OK != HAL_UART_Receive(&hDiscoUart, (uint8_t *)&ch, 1, 40000))
 8001636:	bf00      	nop
 8001638:	1df9      	adds	r1, r7, #7
 800163a:	f649 4340 	movw	r3, #40000	; 0x9c40
 800163e:	2201      	movs	r2, #1
 8001640:	4805      	ldr	r0, [pc, #20]	; (8001658 <__io_getchar+0x2c>)
 8001642:	f008 fdc8 	bl	800a1d6 <HAL_UART_Receive>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d1f5      	bne.n	8001638 <__io_getchar+0xc>
  {
    ;
  }
  return ch;
 800164c:	79fb      	ldrb	r3, [r7, #7]
}
 800164e:	4618      	mov	r0, r3
 8001650:	3708      	adds	r7, #8
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	20006250 	.word	0x20006250

0800165c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	4603      	mov	r3, r0
 8001664:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 8001666:	88fb      	ldrh	r3, [r7, #6]
 8001668:	2b02      	cmp	r3, #2
 800166a:	d005      	beq.n	8001678 <HAL_GPIO_EXTI_Callback+0x1c>
 800166c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001670:	d105      	bne.n	800167e <HAL_GPIO_EXTI_Callback+0x22>
  {
    case (USER_BUTTON_PIN):
    {
      Button_ISR();
 8001672:	f000 f813 	bl	800169c <Button_ISR>
      break;
 8001676:	e003      	b.n	8001680 <HAL_GPIO_EXTI_Callback+0x24>
    }
    case (GPIO_PIN_1):
    {
      SPI_WIFI_ISR();
 8001678:	f001 ff28 	bl	80034cc <SPI_WIFI_ISR>
      break;
 800167c:	e000      	b.n	8001680 <HAL_GPIO_EXTI_Callback+0x24>
    }
    default:
    {
      break;
 800167e:	bf00      	nop
    }
  }
}
 8001680:	bf00      	nop
 8001682:	3708      	adds	r7, #8
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}

08001688 <SPI3_IRQHandler>:
  * @brief  SPI3 line detection callback.
  * @param  None
  * @retval None
  */
void SPI3_IRQHandler(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
  HAL_SPI_IRQHandler(&hspi);
 800168c:	4802      	ldr	r0, [pc, #8]	; (8001698 <SPI3_IRQHandler+0x10>)
 800168e:	f007 f9ad 	bl	80089ec <HAL_SPI_IRQHandler>
}
 8001692:	bf00      	nop
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	20005888 	.word	0x20005888

0800169c <Button_ISR>:

/**
  * @brief Update button ISR status
  */
static void Button_ISR(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0

}
 80016a0:	bf00      	nop
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr

080016aa <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *htim) {
 80016aa:	b480      	push	{r7}
 80016ac:	b083      	sub	sp, #12
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	6078      	str	r0, [r7, #4]
	int test;
}
 80016b2:	bf00      	nop
 80016b4:	370c      	adds	r7, #12
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr

080016be <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016be:	b480      	push	{r7}
 80016c0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016c2:	b672      	cpsid	i
}
 80016c4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016c6:	e7fe      	b.n	80016c6 <Error_Handler+0x8>

080016c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ce:	4b0f      	ldr	r3, [pc, #60]	; (800170c <HAL_MspInit+0x44>)
 80016d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016d2:	4a0e      	ldr	r2, [pc, #56]	; (800170c <HAL_MspInit+0x44>)
 80016d4:	f043 0301 	orr.w	r3, r3, #1
 80016d8:	6613      	str	r3, [r2, #96]	; 0x60
 80016da:	4b0c      	ldr	r3, [pc, #48]	; (800170c <HAL_MspInit+0x44>)
 80016dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016de:	f003 0301 	and.w	r3, r3, #1
 80016e2:	607b      	str	r3, [r7, #4]
 80016e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016e6:	4b09      	ldr	r3, [pc, #36]	; (800170c <HAL_MspInit+0x44>)
 80016e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016ea:	4a08      	ldr	r2, [pc, #32]	; (800170c <HAL_MspInit+0x44>)
 80016ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016f0:	6593      	str	r3, [r2, #88]	; 0x58
 80016f2:	4b06      	ldr	r3, [pc, #24]	; (800170c <HAL_MspInit+0x44>)
 80016f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016fa:	603b      	str	r3, [r7, #0]
 80016fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016fe:	bf00      	nop
 8001700:	370c      	adds	r7, #12
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	40021000 	.word	0x40021000

08001710 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b08a      	sub	sp, #40	; 0x28
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001718:	f107 0314 	add.w	r3, r7, #20
 800171c:	2200      	movs	r2, #0
 800171e:	601a      	str	r2, [r3, #0]
 8001720:	605a      	str	r2, [r3, #4]
 8001722:	609a      	str	r2, [r3, #8]
 8001724:	60da      	str	r2, [r3, #12]
 8001726:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a2a      	ldr	r2, [pc, #168]	; (80017d8 <HAL_DAC_MspInit+0xc8>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d14e      	bne.n	80017d0 <HAL_DAC_MspInit+0xc0>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001732:	4b2a      	ldr	r3, [pc, #168]	; (80017dc <HAL_DAC_MspInit+0xcc>)
 8001734:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001736:	4a29      	ldr	r2, [pc, #164]	; (80017dc <HAL_DAC_MspInit+0xcc>)
 8001738:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800173c:	6593      	str	r3, [r2, #88]	; 0x58
 800173e:	4b27      	ldr	r3, [pc, #156]	; (80017dc <HAL_DAC_MspInit+0xcc>)
 8001740:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001742:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001746:	613b      	str	r3, [r7, #16]
 8001748:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800174a:	4b24      	ldr	r3, [pc, #144]	; (80017dc <HAL_DAC_MspInit+0xcc>)
 800174c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800174e:	4a23      	ldr	r2, [pc, #140]	; (80017dc <HAL_DAC_MspInit+0xcc>)
 8001750:	f043 0301 	orr.w	r3, r3, #1
 8001754:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001756:	4b21      	ldr	r3, [pc, #132]	; (80017dc <HAL_DAC_MspInit+0xcc>)
 8001758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800175a:	f003 0301 	and.w	r3, r3, #1
 800175e:	60fb      	str	r3, [r7, #12]
 8001760:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001762:	2330      	movs	r3, #48	; 0x30
 8001764:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001766:	2303      	movs	r3, #3
 8001768:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176a:	2300      	movs	r3, #0
 800176c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800176e:	f107 0314 	add.w	r3, r7, #20
 8001772:	4619      	mov	r1, r3
 8001774:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001778:	f003 fcbc 	bl	80050f4 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel1;
 800177c:	4b18      	ldr	r3, [pc, #96]	; (80017e0 <HAL_DAC_MspInit+0xd0>)
 800177e:	4a19      	ldr	r2, [pc, #100]	; (80017e4 <HAL_DAC_MspInit+0xd4>)
 8001780:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CH1;
 8001782:	4b17      	ldr	r3, [pc, #92]	; (80017e0 <HAL_DAC_MspInit+0xd0>)
 8001784:	2206      	movs	r2, #6
 8001786:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001788:	4b15      	ldr	r3, [pc, #84]	; (80017e0 <HAL_DAC_MspInit+0xd0>)
 800178a:	2210      	movs	r2, #16
 800178c:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800178e:	4b14      	ldr	r3, [pc, #80]	; (80017e0 <HAL_DAC_MspInit+0xd0>)
 8001790:	2200      	movs	r2, #0
 8001792:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001794:	4b12      	ldr	r3, [pc, #72]	; (80017e0 <HAL_DAC_MspInit+0xd0>)
 8001796:	2280      	movs	r2, #128	; 0x80
 8001798:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800179a:	4b11      	ldr	r3, [pc, #68]	; (80017e0 <HAL_DAC_MspInit+0xd0>)
 800179c:	2200      	movs	r2, #0
 800179e:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80017a0:	4b0f      	ldr	r3, [pc, #60]	; (80017e0 <HAL_DAC_MspInit+0xd0>)
 80017a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80017a6:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 80017a8:	4b0d      	ldr	r3, [pc, #52]	; (80017e0 <HAL_DAC_MspInit+0xd0>)
 80017aa:	2220      	movs	r2, #32
 80017ac:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80017ae:	4b0c      	ldr	r3, [pc, #48]	; (80017e0 <HAL_DAC_MspInit+0xd0>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 80017b4:	480a      	ldr	r0, [pc, #40]	; (80017e0 <HAL_DAC_MspInit+0xd0>)
 80017b6:	f003 f9cb 	bl	8004b50 <HAL_DMA_Init>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <HAL_DAC_MspInit+0xb4>
    {
      Error_Handler();
 80017c0:	f7ff ff7d 	bl	80016be <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	4a06      	ldr	r2, [pc, #24]	; (80017e0 <HAL_DAC_MspInit+0xd0>)
 80017c8:	609a      	str	r2, [r3, #8]
 80017ca:	4a05      	ldr	r2, [pc, #20]	; (80017e0 <HAL_DAC_MspInit+0xd0>)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80017d0:	bf00      	nop
 80017d2:	3728      	adds	r7, #40	; 0x28
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	40007400 	.word	0x40007400
 80017dc:	40021000 	.word	0x40021000
 80017e0:	200000bc 	.word	0x200000bc
 80017e4:	40020008 	.word	0x40020008

080017e8 <HAL_DFSDM_FilterMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_filter: DFSDM_Filter handle pointer
* @retval None
*/
void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b0ae      	sub	sp, #184	; 0xb8
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80017f4:	2200      	movs	r2, #0
 80017f6:	601a      	str	r2, [r3, #0]
 80017f8:	605a      	str	r2, [r3, #4]
 80017fa:	609a      	str	r2, [r3, #8]
 80017fc:	60da      	str	r2, [r3, #12]
 80017fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001800:	f107 0310 	add.w	r3, r7, #16
 8001804:	2294      	movs	r2, #148	; 0x94
 8001806:	2100      	movs	r1, #0
 8001808:	4618      	mov	r0, r3
 800180a:	f009 fda5 	bl	800b358 <memset>
  if(DFSDM1_Init == 0)
 800180e:	4b45      	ldr	r3, [pc, #276]	; (8001924 <HAL_DFSDM_FilterMspInit+0x13c>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d14b      	bne.n	80018ae <HAL_DFSDM_FilterMspInit+0xc6>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8001816:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800181a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 800181c:	2300      	movs	r3, #0
 800181e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001822:	f107 0310 	add.w	r3, r7, #16
 8001826:	4618      	mov	r0, r3
 8001828:	f005 fb46 	bl	8006eb8 <HAL_RCCEx_PeriphCLKConfig>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d001      	beq.n	8001836 <HAL_DFSDM_FilterMspInit+0x4e>
    {
      Error_Handler();
 8001832:	f7ff ff44 	bl	80016be <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8001836:	4b3c      	ldr	r3, [pc, #240]	; (8001928 <HAL_DFSDM_FilterMspInit+0x140>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	3301      	adds	r3, #1
 800183c:	4a3a      	ldr	r2, [pc, #232]	; (8001928 <HAL_DFSDM_FilterMspInit+0x140>)
 800183e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8001840:	4b39      	ldr	r3, [pc, #228]	; (8001928 <HAL_DFSDM_FilterMspInit+0x140>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	2b01      	cmp	r3, #1
 8001846:	d10b      	bne.n	8001860 <HAL_DFSDM_FilterMspInit+0x78>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001848:	4b38      	ldr	r3, [pc, #224]	; (800192c <HAL_DFSDM_FilterMspInit+0x144>)
 800184a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800184c:	4a37      	ldr	r2, [pc, #220]	; (800192c <HAL_DFSDM_FilterMspInit+0x144>)
 800184e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001852:	6613      	str	r3, [r2, #96]	; 0x60
 8001854:	4b35      	ldr	r3, [pc, #212]	; (800192c <HAL_DFSDM_FilterMspInit+0x144>)
 8001856:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001858:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800185c:	60fb      	str	r3, [r7, #12]
 800185e:	68fb      	ldr	r3, [r7, #12]
    }

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001860:	4b32      	ldr	r3, [pc, #200]	; (800192c <HAL_DFSDM_FilterMspInit+0x144>)
 8001862:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001864:	4a31      	ldr	r2, [pc, #196]	; (800192c <HAL_DFSDM_FilterMspInit+0x144>)
 8001866:	f043 0310 	orr.w	r3, r3, #16
 800186a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800186c:	4b2f      	ldr	r3, [pc, #188]	; (800192c <HAL_DFSDM_FilterMspInit+0x144>)
 800186e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001870:	f003 0310 	and.w	r3, r3, #16
 8001874:	60bb      	str	r3, [r7, #8]
 8001876:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8001878:	f44f 7320 	mov.w	r3, #640	; 0x280
 800187c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001880:	2302      	movs	r3, #2
 8001882:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001886:	2300      	movs	r3, #0
 8001888:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800188c:	2300      	movs	r3, #0
 800188e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001892:	2306      	movs	r3, #6
 8001894:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001898:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800189c:	4619      	mov	r1, r3
 800189e:	4824      	ldr	r0, [pc, #144]	; (8001930 <HAL_DFSDM_FilterMspInit+0x148>)
 80018a0:	f003 fc28 	bl	80050f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80018a4:	4b1f      	ldr	r3, [pc, #124]	; (8001924 <HAL_DFSDM_FilterMspInit+0x13c>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	3301      	adds	r3, #1
 80018aa:	4a1e      	ldr	r2, [pc, #120]	; (8001924 <HAL_DFSDM_FilterMspInit+0x13c>)
 80018ac:	6013      	str	r3, [r2, #0]
  }

    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(hdfsdm_filter->Instance == DFSDM1_Filter0){
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a20      	ldr	r2, [pc, #128]	; (8001934 <HAL_DFSDM_FilterMspInit+0x14c>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d130      	bne.n	800191a <HAL_DFSDM_FilterMspInit+0x132>
    hdma_dfsdm1_flt0.Instance = DMA1_Channel2;
 80018b8:	4b1f      	ldr	r3, [pc, #124]	; (8001938 <HAL_DFSDM_FilterMspInit+0x150>)
 80018ba:	4a20      	ldr	r2, [pc, #128]	; (800193c <HAL_DFSDM_FilterMspInit+0x154>)
 80018bc:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt0.Init.Request = DMA_REQUEST_DFSDM1_FLT0;
 80018be:	4b1e      	ldr	r3, [pc, #120]	; (8001938 <HAL_DFSDM_FilterMspInit+0x150>)
 80018c0:	2256      	movs	r2, #86	; 0x56
 80018c2:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018c4:	4b1c      	ldr	r3, [pc, #112]	; (8001938 <HAL_DFSDM_FilterMspInit+0x150>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 80018ca:	4b1b      	ldr	r3, [pc, #108]	; (8001938 <HAL_DFSDM_FilterMspInit+0x150>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 80018d0:	4b19      	ldr	r3, [pc, #100]	; (8001938 <HAL_DFSDM_FilterMspInit+0x150>)
 80018d2:	2280      	movs	r2, #128	; 0x80
 80018d4:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80018d6:	4b18      	ldr	r3, [pc, #96]	; (8001938 <HAL_DFSDM_FilterMspInit+0x150>)
 80018d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018dc:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80018de:	4b16      	ldr	r3, [pc, #88]	; (8001938 <HAL_DFSDM_FilterMspInit+0x150>)
 80018e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80018e4:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_NORMAL;
 80018e6:	4b14      	ldr	r3, [pc, #80]	; (8001938 <HAL_DFSDM_FilterMspInit+0x150>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_LOW;
 80018ec:	4b12      	ldr	r3, [pc, #72]	; (8001938 <HAL_DFSDM_FilterMspInit+0x150>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 80018f2:	4811      	ldr	r0, [pc, #68]	; (8001938 <HAL_DFSDM_FilterMspInit+0x150>)
 80018f4:	f003 f92c 	bl	8004b50 <HAL_DMA_Init>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <HAL_DFSDM_FilterMspInit+0x11a>
    {
      Error_Handler();
 80018fe:	f7ff fede 	bl	80016be <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hdfsdm_filter,hdmaInj,hdma_dfsdm1_flt0);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4a0c      	ldr	r2, [pc, #48]	; (8001938 <HAL_DFSDM_FilterMspInit+0x150>)
 8001906:	62da      	str	r2, [r3, #44]	; 0x2c
 8001908:	4a0b      	ldr	r2, [pc, #44]	; (8001938 <HAL_DFSDM_FilterMspInit+0x150>)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(hdfsdm_filter,hdmaReg,hdma_dfsdm1_flt0);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	4a09      	ldr	r2, [pc, #36]	; (8001938 <HAL_DFSDM_FilterMspInit+0x150>)
 8001912:	629a      	str	r2, [r3, #40]	; 0x28
 8001914:	4a08      	ldr	r2, [pc, #32]	; (8001938 <HAL_DFSDM_FilterMspInit+0x150>)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6293      	str	r3, [r2, #40]	; 0x28
  }

}
 800191a:	bf00      	nop
 800191c:	37b8      	adds	r7, #184	; 0xb8
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	2000587c 	.word	0x2000587c
 8001928:	20005878 	.word	0x20005878
 800192c:	40021000 	.word	0x40021000
 8001930:	48001000 	.word	0x48001000
 8001934:	40016100 	.word	0x40016100
 8001938:	200001a8 	.word	0x200001a8
 800193c:	4002001c 	.word	0x4002001c

08001940 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b0ae      	sub	sp, #184	; 0xb8
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001948:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800194c:	2200      	movs	r2, #0
 800194e:	601a      	str	r2, [r3, #0]
 8001950:	605a      	str	r2, [r3, #4]
 8001952:	609a      	str	r2, [r3, #8]
 8001954:	60da      	str	r2, [r3, #12]
 8001956:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001958:	f107 0310 	add.w	r3, r7, #16
 800195c:	2294      	movs	r2, #148	; 0x94
 800195e:	2100      	movs	r1, #0
 8001960:	4618      	mov	r0, r3
 8001962:	f009 fcf9 	bl	800b358 <memset>
  if(DFSDM1_Init == 0)
 8001966:	4b2a      	ldr	r3, [pc, #168]	; (8001a10 <HAL_DFSDM_ChannelMspInit+0xd0>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d14b      	bne.n	8001a06 <HAL_DFSDM_ChannelMspInit+0xc6>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 800196e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001972:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001974:	2300      	movs	r3, #0
 8001976:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800197a:	f107 0310 	add.w	r3, r7, #16
 800197e:	4618      	mov	r0, r3
 8001980:	f005 fa9a 	bl	8006eb8 <HAL_RCCEx_PeriphCLKConfig>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 800198a:	f7ff fe98 	bl	80016be <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 800198e:	4b21      	ldr	r3, [pc, #132]	; (8001a14 <HAL_DFSDM_ChannelMspInit+0xd4>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	3301      	adds	r3, #1
 8001994:	4a1f      	ldr	r2, [pc, #124]	; (8001a14 <HAL_DFSDM_ChannelMspInit+0xd4>)
 8001996:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8001998:	4b1e      	ldr	r3, [pc, #120]	; (8001a14 <HAL_DFSDM_ChannelMspInit+0xd4>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	2b01      	cmp	r3, #1
 800199e:	d10b      	bne.n	80019b8 <HAL_DFSDM_ChannelMspInit+0x78>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 80019a0:	4b1d      	ldr	r3, [pc, #116]	; (8001a18 <HAL_DFSDM_ChannelMspInit+0xd8>)
 80019a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019a4:	4a1c      	ldr	r2, [pc, #112]	; (8001a18 <HAL_DFSDM_ChannelMspInit+0xd8>)
 80019a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019aa:	6613      	str	r3, [r2, #96]	; 0x60
 80019ac:	4b1a      	ldr	r3, [pc, #104]	; (8001a18 <HAL_DFSDM_ChannelMspInit+0xd8>)
 80019ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019b4:	60fb      	str	r3, [r7, #12]
 80019b6:	68fb      	ldr	r3, [r7, #12]
    }

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80019b8:	4b17      	ldr	r3, [pc, #92]	; (8001a18 <HAL_DFSDM_ChannelMspInit+0xd8>)
 80019ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019bc:	4a16      	ldr	r2, [pc, #88]	; (8001a18 <HAL_DFSDM_ChannelMspInit+0xd8>)
 80019be:	f043 0310 	orr.w	r3, r3, #16
 80019c2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019c4:	4b14      	ldr	r3, [pc, #80]	; (8001a18 <HAL_DFSDM_ChannelMspInit+0xd8>)
 80019c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019c8:	f003 0310 	and.w	r3, r3, #16
 80019cc:	60bb      	str	r3, [r7, #8]
 80019ce:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 80019d0:	f44f 7320 	mov.w	r3, #640	; 0x280
 80019d4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d8:	2302      	movs	r3, #2
 80019da:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019de:	2300      	movs	r3, #0
 80019e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e4:	2300      	movs	r3, #0
 80019e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80019ea:	2306      	movs	r3, #6
 80019ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019f0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80019f4:	4619      	mov	r1, r3
 80019f6:	4809      	ldr	r0, [pc, #36]	; (8001a1c <HAL_DFSDM_ChannelMspInit+0xdc>)
 80019f8:	f003 fb7c 	bl	80050f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80019fc:	4b04      	ldr	r3, [pc, #16]	; (8001a10 <HAL_DFSDM_ChannelMspInit+0xd0>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	3301      	adds	r3, #1
 8001a02:	4a03      	ldr	r2, [pc, #12]	; (8001a10 <HAL_DFSDM_ChannelMspInit+0xd0>)
 8001a04:	6013      	str	r3, [r2, #0]
  }

}
 8001a06:	bf00      	nop
 8001a08:	37b8      	adds	r7, #184	; 0xb8
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	2000587c 	.word	0x2000587c
 8001a14:	20005878 	.word	0x20005878
 8001a18:	40021000 	.word	0x40021000
 8001a1c:	48001000 	.word	0x48001000

08001a20 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b084      	sub	sp, #16
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a30:	d113      	bne.n	8001a5a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a32:	4b0c      	ldr	r3, [pc, #48]	; (8001a64 <HAL_TIM_Base_MspInit+0x44>)
 8001a34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a36:	4a0b      	ldr	r2, [pc, #44]	; (8001a64 <HAL_TIM_Base_MspInit+0x44>)
 8001a38:	f043 0301 	orr.w	r3, r3, #1
 8001a3c:	6593      	str	r3, [r2, #88]	; 0x58
 8001a3e:	4b09      	ldr	r3, [pc, #36]	; (8001a64 <HAL_TIM_Base_MspInit+0x44>)
 8001a40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a42:	f003 0301 	and.w	r3, r3, #1
 8001a46:	60fb      	str	r3, [r7, #12]
 8001a48:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	2100      	movs	r1, #0
 8001a4e:	201c      	movs	r0, #28
 8001a50:	f002 fb37 	bl	80040c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001a54:	201c      	movs	r0, #28
 8001a56:	f002 fb50 	bl	80040fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001a5a:	bf00      	nop
 8001a5c:	3710      	adds	r7, #16
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	40021000 	.word	0x40021000

08001a68 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
}
 8001a6c:	bf00      	nop
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr

08001a76 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8001a76:	b480      	push	{r7}
 8001a78:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8001a7a:	e7fe      	b.n	8001a7a <HardFault_Handler+0x4>

08001a7c <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8001a80:	e7fe      	b.n	8001a80 <MemManage_Handler+0x4>

08001a82 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8001a82:	b480      	push	{r7}
 8001a84:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8001a86:	e7fe      	b.n	8001a86 <BusFault_Handler+0x4>

08001a88 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8001a8c:	e7fe      	b.n	8001a8c <UsageFault_Handler+0x4>

08001a8e <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8001a8e:	b480      	push	{r7}
 8001a90:	af00      	add	r7, sp, #0
}
 8001a92:	bf00      	nop
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr

08001a9c <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
}
 8001aa0:	bf00      	nop
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr

08001aaa <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8001aaa:	b480      	push	{r7}
 8001aac:	af00      	add	r7, sp, #0
}
 8001aae:	bf00      	nop
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr

08001ab8 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8001abc:	f002 f9e2 	bl	8003e84 <HAL_IncTick>
}
 8001ac0:	bf00      	nop
 8001ac2:	bd80      	pop	{r7, pc}

08001ac4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8001ac8:	4802      	ldr	r0, [pc, #8]	; (8001ad4 <DMA1_Channel1_IRQHandler+0x10>)
 8001aca:	f003 f9c3 	bl	8004e54 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001ace:	bf00      	nop
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	200000bc 	.word	0x200000bc

08001ad8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 8001adc:	4802      	ldr	r0, [pc, #8]	; (8001ae8 <DMA1_Channel2_IRQHandler+0x10>)
 8001ade:	f003 f9b9 	bl	8004e54 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001ae2:	bf00      	nop
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	200001a8 	.word	0x200001a8

08001aec <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001af0:	4802      	ldr	r0, [pc, #8]	; (8001afc <TIM2_IRQHandler+0x10>)
 8001af2:	f007 feb9 	bl	8009868 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001af6:	bf00      	nop
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	20000208 	.word	0x20000208

08001b00 <EXTI1_IRQHandler>:
  * @brief  This function handles external lines 1interrupt request.
  * @param  None
  * @retval None
  */
void EXTI1_IRQHandler(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
 HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001b04:	2002      	movs	r0, #2
 8001b06:	f003 fcb7 	bl	8005478 <HAL_GPIO_EXTI_IRQHandler>
}
 8001b0a:	bf00      	nop
 8001b0c:	bd80      	pop	{r7, pc}

08001b0e <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 8001b0e:	b580      	push	{r7, lr}
 8001b10:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(USER_BUTTON_PIN);
 8001b12:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001b16:	f003 fcaf 	bl	8005478 <HAL_GPIO_EXTI_IRQHandler>
}
 8001b1a:	bf00      	nop
 8001b1c:	bd80      	pop	{r7, pc}

08001b1e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b1e:	b480      	push	{r7}
 8001b20:	af00      	add	r7, sp, #0
  return 1;
 8001b22:	2301      	movs	r3, #1
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr

08001b2e <_kill>:

int _kill(int pid, int sig)
{
 8001b2e:	b580      	push	{r7, lr}
 8001b30:	b082      	sub	sp, #8
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	6078      	str	r0, [r7, #4]
 8001b36:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b38:	f009 fd12 	bl	800b560 <__errno>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2216      	movs	r2, #22
 8001b40:	601a      	str	r2, [r3, #0]
  return -1;
 8001b42:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3708      	adds	r7, #8
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}

08001b4e <_exit>:

void _exit (int status)
{
 8001b4e:	b580      	push	{r7, lr}
 8001b50:	b082      	sub	sp, #8
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b56:	f04f 31ff 	mov.w	r1, #4294967295
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f7ff ffe7 	bl	8001b2e <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b60:	e7fe      	b.n	8001b60 <_exit+0x12>

08001b62 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b62:	b580      	push	{r7, lr}
 8001b64:	b086      	sub	sp, #24
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	60f8      	str	r0, [r7, #12]
 8001b6a:	60b9      	str	r1, [r7, #8]
 8001b6c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b6e:	2300      	movs	r3, #0
 8001b70:	617b      	str	r3, [r7, #20]
 8001b72:	e00a      	b.n	8001b8a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b74:	f7ff fd5a 	bl	800162c <__io_getchar>
 8001b78:	4601      	mov	r1, r0
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	1c5a      	adds	r2, r3, #1
 8001b7e:	60ba      	str	r2, [r7, #8]
 8001b80:	b2ca      	uxtb	r2, r1
 8001b82:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	3301      	adds	r3, #1
 8001b88:	617b      	str	r3, [r7, #20]
 8001b8a:	697a      	ldr	r2, [r7, #20]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	dbf0      	blt.n	8001b74 <_read+0x12>
  }

  return len;
 8001b92:	687b      	ldr	r3, [r7, #4]
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3718      	adds	r7, #24
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}

08001b9c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b086      	sub	sp, #24
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	60f8      	str	r0, [r7, #12]
 8001ba4:	60b9      	str	r1, [r7, #8]
 8001ba6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ba8:	2300      	movs	r3, #0
 8001baa:	617b      	str	r3, [r7, #20]
 8001bac:	e009      	b.n	8001bc2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001bae:	68bb      	ldr	r3, [r7, #8]
 8001bb0:	1c5a      	adds	r2, r3, #1
 8001bb2:	60ba      	str	r2, [r7, #8]
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f7ff fd26 	bl	8001608 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	3301      	adds	r3, #1
 8001bc0:	617b      	str	r3, [r7, #20]
 8001bc2:	697a      	ldr	r2, [r7, #20]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	dbf1      	blt.n	8001bae <_write+0x12>
  }
  return len;
 8001bca:	687b      	ldr	r3, [r7, #4]
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	3718      	adds	r7, #24
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}

08001bd4 <_close>:

int _close(int file)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001bdc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	370c      	adds	r7, #12
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr

08001bec <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bfc:	605a      	str	r2, [r3, #4]
  return 0;
 8001bfe:	2300      	movs	r3, #0
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	370c      	adds	r7, #12
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr

08001c0c <_isatty>:

int _isatty(int file)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c14:	2301      	movs	r3, #1
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	370c      	adds	r7, #12
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr

08001c22 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c22:	b480      	push	{r7}
 8001c24:	b085      	sub	sp, #20
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	60f8      	str	r0, [r7, #12]
 8001c2a:	60b9      	str	r1, [r7, #8]
 8001c2c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c2e:	2300      	movs	r3, #0
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	3714      	adds	r7, #20
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr

08001c3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b086      	sub	sp, #24
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c44:	4a14      	ldr	r2, [pc, #80]	; (8001c98 <_sbrk+0x5c>)
 8001c46:	4b15      	ldr	r3, [pc, #84]	; (8001c9c <_sbrk+0x60>)
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c50:	4b13      	ldr	r3, [pc, #76]	; (8001ca0 <_sbrk+0x64>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d102      	bne.n	8001c5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c58:	4b11      	ldr	r3, [pc, #68]	; (8001ca0 <_sbrk+0x64>)
 8001c5a:	4a12      	ldr	r2, [pc, #72]	; (8001ca4 <_sbrk+0x68>)
 8001c5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c5e:	4b10      	ldr	r3, [pc, #64]	; (8001ca0 <_sbrk+0x64>)
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4413      	add	r3, r2
 8001c66:	693a      	ldr	r2, [r7, #16]
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d207      	bcs.n	8001c7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c6c:	f009 fc78 	bl	800b560 <__errno>
 8001c70:	4603      	mov	r3, r0
 8001c72:	220c      	movs	r2, #12
 8001c74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c76:	f04f 33ff 	mov.w	r3, #4294967295
 8001c7a:	e009      	b.n	8001c90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c7c:	4b08      	ldr	r3, [pc, #32]	; (8001ca0 <_sbrk+0x64>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c82:	4b07      	ldr	r3, [pc, #28]	; (8001ca0 <_sbrk+0x64>)
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4413      	add	r3, r2
 8001c8a:	4a05      	ldr	r2, [pc, #20]	; (8001ca0 <_sbrk+0x64>)
 8001c8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3718      	adds	r7, #24
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	20018000 	.word	0x20018000
 8001c9c:	00007f00 	.word	0x00007f00
 8001ca0:	20005880 	.word	0x20005880
 8001ca4:	20006460 	.word	0x20006460

08001ca8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001cac:	4b17      	ldr	r3, [pc, #92]	; (8001d0c <SystemInit+0x64>)
 8001cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cb2:	4a16      	ldr	r2, [pc, #88]	; (8001d0c <SystemInit+0x64>)
 8001cb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cb8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001cbc:	4b14      	ldr	r3, [pc, #80]	; (8001d10 <SystemInit+0x68>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a13      	ldr	r2, [pc, #76]	; (8001d10 <SystemInit+0x68>)
 8001cc2:	f043 0301 	orr.w	r3, r3, #1
 8001cc6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001cc8:	4b11      	ldr	r3, [pc, #68]	; (8001d10 <SystemInit+0x68>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 8001cce:	4b10      	ldr	r3, [pc, #64]	; (8001d10 <SystemInit+0x68>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a0f      	ldr	r2, [pc, #60]	; (8001d10 <SystemInit+0x68>)
 8001cd4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001cd8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001cdc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000;
 8001cde:	4b0c      	ldr	r3, [pc, #48]	; (8001d10 <SystemInit+0x68>)
 8001ce0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ce4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001ce6:	4b0a      	ldr	r3, [pc, #40]	; (8001d10 <SystemInit+0x68>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a09      	ldr	r2, [pc, #36]	; (8001d10 <SystemInit+0x68>)
 8001cec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cf0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001cf2:	4b07      	ldr	r3, [pc, #28]	; (8001d10 <SystemInit+0x68>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001cf8:	4b04      	ldr	r3, [pc, #16]	; (8001d0c <SystemInit+0x64>)
 8001cfa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001cfe:	609a      	str	r2, [r3, #8]
#endif
}
 8001d00:	bf00      	nop
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	e000ed00 	.word	0xe000ed00
 8001d10:	40021000 	.word	0x40021000

08001d14 <Hex2Num>:
  * @brief  Convert char in Hex format to integer.
  * @param  a: character to convert
  * @retval integer value.
  */
static  uint8_t Hex2Num(char a)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	71fb      	strb	r3, [r7, #7]
    if (a >= '0' && a <= '9') {                             /* Char is num */
 8001d1e:	79fb      	ldrb	r3, [r7, #7]
 8001d20:	2b2f      	cmp	r3, #47	; 0x2f
 8001d22:	d906      	bls.n	8001d32 <Hex2Num+0x1e>
 8001d24:	79fb      	ldrb	r3, [r7, #7]
 8001d26:	2b39      	cmp	r3, #57	; 0x39
 8001d28:	d803      	bhi.n	8001d32 <Hex2Num+0x1e>
        return a - '0';
 8001d2a:	79fb      	ldrb	r3, [r7, #7]
 8001d2c:	3b30      	subs	r3, #48	; 0x30
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	e014      	b.n	8001d5c <Hex2Num+0x48>
    } else if (a >= 'a' && a <= 'f') {                      /* Char is lowercase character A - Z (hex) */
 8001d32:	79fb      	ldrb	r3, [r7, #7]
 8001d34:	2b60      	cmp	r3, #96	; 0x60
 8001d36:	d906      	bls.n	8001d46 <Hex2Num+0x32>
 8001d38:	79fb      	ldrb	r3, [r7, #7]
 8001d3a:	2b66      	cmp	r3, #102	; 0x66
 8001d3c:	d803      	bhi.n	8001d46 <Hex2Num+0x32>
        return (a - 'a') + 10;
 8001d3e:	79fb      	ldrb	r3, [r7, #7]
 8001d40:	3b57      	subs	r3, #87	; 0x57
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	e00a      	b.n	8001d5c <Hex2Num+0x48>
    } else if (a >= 'A' && a <= 'F') {                      /* Char is uppercase character A - Z (hex) */
 8001d46:	79fb      	ldrb	r3, [r7, #7]
 8001d48:	2b40      	cmp	r3, #64	; 0x40
 8001d4a:	d906      	bls.n	8001d5a <Hex2Num+0x46>
 8001d4c:	79fb      	ldrb	r3, [r7, #7]
 8001d4e:	2b46      	cmp	r3, #70	; 0x46
 8001d50:	d803      	bhi.n	8001d5a <Hex2Num+0x46>
        return (a - 'A') + 10;
 8001d52:	79fb      	ldrb	r3, [r7, #7]
 8001d54:	3b37      	subs	r3, #55	; 0x37
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	e000      	b.n	8001d5c <Hex2Num+0x48>
    }

    return 0;
 8001d5a:	2300      	movs	r3, #0
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	370c      	adds	r7, #12
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr

08001d68 <ParseHexNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval Hex value.
  */
static uint8_t ParseHexNumber(const char *ptr, uint8_t *cnt)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b084      	sub	sp, #16
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	6039      	str	r1, [r7, #0]
    uint8_t sum = 0;
 8001d72:	2300      	movs	r3, #0
 8001d74:	73fb      	strb	r3, [r7, #15]
    uint8_t done_count = 0;
 8001d76:	2300      	movs	r3, #0
 8001d78:	73bb      	strb	r3, [r7, #14]

    while (CHARISHEXNUM(*ptr) && (done_count < 2)) {       /* Parse number */
 8001d7a:	e012      	b.n	8001da2 <ParseHexNumber+0x3a>
        sum <<= 4;
 8001d7c:	7bfb      	ldrb	r3, [r7, #15]
 8001d7e:	011b      	lsls	r3, r3, #4
 8001d80:	73fb      	strb	r3, [r7, #15]
        sum += Hex2Num(*ptr);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	4618      	mov	r0, r3
 8001d88:	f7ff ffc4 	bl	8001d14 <Hex2Num>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	461a      	mov	r2, r3
 8001d90:	7bfb      	ldrb	r3, [r7, #15]
 8001d92:	4413      	add	r3, r2
 8001d94:	73fb      	strb	r3, [r7, #15]
        ptr++;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	3301      	adds	r3, #1
 8001d9a:	607b      	str	r3, [r7, #4]
        done_count++;
 8001d9c:	7bbb      	ldrb	r3, [r7, #14]
 8001d9e:	3301      	adds	r3, #1
 8001da0:	73bb      	strb	r3, [r7, #14]
    while (CHARISHEXNUM(*ptr) && (done_count < 2)) {       /* Parse number */
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	781b      	ldrb	r3, [r3, #0]
 8001da6:	2b2f      	cmp	r3, #47	; 0x2f
 8001da8:	d903      	bls.n	8001db2 <ParseHexNumber+0x4a>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	2b39      	cmp	r3, #57	; 0x39
 8001db0:	d90f      	bls.n	8001dd2 <ParseHexNumber+0x6a>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	2b60      	cmp	r3, #96	; 0x60
 8001db8:	d903      	bls.n	8001dc2 <ParseHexNumber+0x5a>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	2b66      	cmp	r3, #102	; 0x66
 8001dc0:	d907      	bls.n	8001dd2 <ParseHexNumber+0x6a>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	2b40      	cmp	r3, #64	; 0x40
 8001dc8:	d906      	bls.n	8001dd8 <ParseHexNumber+0x70>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	2b46      	cmp	r3, #70	; 0x46
 8001dd0:	d802      	bhi.n	8001dd8 <ParseHexNumber+0x70>
 8001dd2:	7bbb      	ldrb	r3, [r7, #14]
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d9d1      	bls.n	8001d7c <ParseHexNumber+0x14>
    }

    if (cnt != NULL) {                                      /* Save number of characters used for number */
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d002      	beq.n	8001de4 <ParseHexNumber+0x7c>
        *cnt = done_count;
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	7bba      	ldrb	r2, [r7, #14]
 8001de2:	701a      	strb	r2, [r3, #0]
    }
    return sum;                                             /* Return number */
 8001de4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3710      	adds	r7, #16
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}

08001dee <ParseNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval integer value.
  */
static int32_t ParseNumber(const char *ptr, uint8_t *cnt)
{
 8001dee:	b480      	push	{r7}
 8001df0:	b085      	sub	sp, #20
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	6078      	str	r0, [r7, #4]
 8001df6:	6039      	str	r1, [r7, #0]
    uint8_t minus = 0;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	73fb      	strb	r3, [r7, #15]
    uint8_t done_count = 0;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	73bb      	strb	r3, [r7, #14]
    int32_t sum = 0;
 8001e00:	2300      	movs	r3, #0
 8001e02:	60bb      	str	r3, [r7, #8]

    if (*ptr == '-') {                                      /* Check for minus character */
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	2b2d      	cmp	r3, #45	; 0x2d
 8001e0a:	d119      	bne.n	8001e40 <ParseNumber+0x52>
        minus = 1;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	73fb      	strb	r3, [r7, #15]
        ptr++;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	3301      	adds	r3, #1
 8001e14:	607b      	str	r3, [r7, #4]
        done_count++;
 8001e16:	7bbb      	ldrb	r3, [r7, #14]
 8001e18:	3301      	adds	r3, #1
 8001e1a:	73bb      	strb	r3, [r7, #14]
    }
    while (CHARISNUM(*ptr)) {                               /* Parse number */
 8001e1c:	e010      	b.n	8001e40 <ParseNumber+0x52>
        sum = 10 * sum + CHAR2NUM(*ptr);
 8001e1e:	68ba      	ldr	r2, [r7, #8]
 8001e20:	4613      	mov	r3, r2
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	4413      	add	r3, r2
 8001e26:	005b      	lsls	r3, r3, #1
 8001e28:	461a      	mov	r2, r3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	3b30      	subs	r3, #48	; 0x30
 8001e30:	4413      	add	r3, r2
 8001e32:	60bb      	str	r3, [r7, #8]
        ptr++;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	3301      	adds	r3, #1
 8001e38:	607b      	str	r3, [r7, #4]
        done_count++;
 8001e3a:	7bbb      	ldrb	r3, [r7, #14]
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	73bb      	strb	r3, [r7, #14]
    while (CHARISNUM(*ptr)) {                               /* Parse number */
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	2b2f      	cmp	r3, #47	; 0x2f
 8001e46:	d903      	bls.n	8001e50 <ParseNumber+0x62>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	2b39      	cmp	r3, #57	; 0x39
 8001e4e:	d9e6      	bls.n	8001e1e <ParseNumber+0x30>
    }
    if (cnt != NULL) {                                      /* Save number of characters used for number */
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d002      	beq.n	8001e5c <ParseNumber+0x6e>
        *cnt = done_count;
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	7bba      	ldrb	r2, [r7, #14]
 8001e5a:	701a      	strb	r2, [r3, #0]
    }
    if (minus) {                                            /* Minus detected */
 8001e5c:	7bfb      	ldrb	r3, [r7, #15]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d002      	beq.n	8001e68 <ParseNumber+0x7a>
        return 0 - sum;
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	425b      	negs	r3, r3
 8001e66:	e000      	b.n	8001e6a <ParseNumber+0x7c>
    }
    return sum;                                             /* Return number */
 8001e68:	68bb      	ldr	r3, [r7, #8]
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3714      	adds	r7, #20
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr

08001e76 <ParseMAC>:
  * @param  Mac: pointer to MAC-48 array
  * @param  MacSize: the size of the MAC array
  * @retval None.
  */
static void ParseMAC(const char *ptr, uint8_t Mac[], size_t MacSize)
{
 8001e76:	b590      	push	{r4, r7, lr}
 8001e78:	b087      	sub	sp, #28
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	60f8      	str	r0, [r7, #12]
 8001e7e:	60b9      	str	r1, [r7, #8]
 8001e80:	607a      	str	r2, [r7, #4]
  uint8_t hex_8bits_count = 0;
 8001e82:	2300      	movs	r3, #0
 8001e84:	75fb      	strb	r3, [r7, #23]

  if ((ptr != NULL) && (Mac != NULL))
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d027      	beq.n	8001edc <ParseMAC+0x66>
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d024      	beq.n	8001edc <ParseMAC+0x66>
  {
    while ((hex_8bits_count < MacSize) && (hex_8bits_count < 6) && (*ptr)) {
 8001e92:	e018      	b.n	8001ec6 <ParseMAC+0x50>
    uint8_t done_count = 1;
 8001e94:	2301      	movs	r3, #1
 8001e96:	75bb      	strb	r3, [r7, #22]
    if (*ptr != ':')
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	2b3a      	cmp	r3, #58	; 0x3a
 8001e9e:	d00d      	beq.n	8001ebc <ParseMAC+0x46>
    {
      Mac[hex_8bits_count++] = ParseHexNumber(ptr, &done_count);
 8001ea0:	7dfb      	ldrb	r3, [r7, #23]
 8001ea2:	1c5a      	adds	r2, r3, #1
 8001ea4:	75fa      	strb	r2, [r7, #23]
 8001ea6:	461a      	mov	r2, r3
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	189c      	adds	r4, r3, r2
 8001eac:	f107 0316 	add.w	r3, r7, #22
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	68f8      	ldr	r0, [r7, #12]
 8001eb4:	f7ff ff58 	bl	8001d68 <ParseHexNumber>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	7023      	strb	r3, [r4, #0]
    }
    ptr = ptr + done_count;
 8001ebc:	7dbb      	ldrb	r3, [r7, #22]
 8001ebe:	461a      	mov	r2, r3
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	4413      	add	r3, r2
 8001ec4:	60fb      	str	r3, [r7, #12]
    while ((hex_8bits_count < MacSize) && (hex_8bits_count < 6) && (*ptr)) {
 8001ec6:	7dfb      	ldrb	r3, [r7, #23]
 8001ec8:	687a      	ldr	r2, [r7, #4]
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	d906      	bls.n	8001edc <ParseMAC+0x66>
 8001ece:	7dfb      	ldrb	r3, [r7, #23]
 8001ed0:	2b05      	cmp	r3, #5
 8001ed2:	d803      	bhi.n	8001edc <ParseMAC+0x66>
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d1db      	bne.n	8001e94 <ParseMAC+0x1e>
   }
  }
}
 8001edc:	bf00      	nop
 8001ede:	371c      	adds	r7, #28
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd90      	pop	{r4, r7, pc}

08001ee4 <ParseIP>:
  * @param  IpAdrr: pointer to IPv4 array
  * @param  IpAdrrSize: the size of IP array
  * @retval None.
  */
static void ParseIP(const char *ptr, uint8_t IpAdrr[], size_t IpAdrrSize)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b086      	sub	sp, #24
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	60f8      	str	r0, [r7, #12]
 8001eec:	60b9      	str	r1, [r7, #8]
 8001eee:	607a      	str	r2, [r7, #4]
  uint8_t hex_8bits_count = 0;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	75fb      	strb	r3, [r7, #23]

  if ((ptr != NULL) && (IpAdrr != NULL) && (4 <= IpAdrrSize))
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d027      	beq.n	8001f4a <ParseIP+0x66>
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d024      	beq.n	8001f4a <ParseIP+0x66>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2b03      	cmp	r3, #3
 8001f04:	d921      	bls.n	8001f4a <ParseIP+0x66>
  {
    while ((hex_8bits_count < 4) && (*ptr != 0)) {
 8001f06:	e019      	b.n	8001f3c <ParseIP+0x58>
    uint8_t done_count = 1;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	75bb      	strb	r3, [r7, #22]
    if (*ptr != '.')
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	2b2e      	cmp	r3, #46	; 0x2e
 8001f12:	d00e      	beq.n	8001f32 <ParseIP+0x4e>
    {
      IpAdrr[hex_8bits_count++] = (uint8_t)ParseNumber(ptr, &done_count);
 8001f14:	f107 0316 	add.w	r3, r7, #22
 8001f18:	4619      	mov	r1, r3
 8001f1a:	68f8      	ldr	r0, [r7, #12]
 8001f1c:	f7ff ff67 	bl	8001dee <ParseNumber>
 8001f20:	4601      	mov	r1, r0
 8001f22:	7dfb      	ldrb	r3, [r7, #23]
 8001f24:	1c5a      	adds	r2, r3, #1
 8001f26:	75fa      	strb	r2, [r7, #23]
 8001f28:	461a      	mov	r2, r3
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	4413      	add	r3, r2
 8001f2e:	b2ca      	uxtb	r2, r1
 8001f30:	701a      	strb	r2, [r3, #0]
    }
    ptr = ptr + done_count;
 8001f32:	7dbb      	ldrb	r3, [r7, #22]
 8001f34:	461a      	mov	r2, r3
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	4413      	add	r3, r2
 8001f3a:	60fb      	str	r3, [r7, #12]
    while ((hex_8bits_count < 4) && (*ptr != 0)) {
 8001f3c:	7dfb      	ldrb	r3, [r7, #23]
 8001f3e:	2b03      	cmp	r3, #3
 8001f40:	d803      	bhi.n	8001f4a <ParseIP+0x66>
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	781b      	ldrb	r3, [r3, #0]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d1de      	bne.n	8001f08 <ParseIP+0x24>
   }
  }
}
 8001f4a:	bf00      	nop
 8001f4c:	3718      	adds	r7, #24
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
	...

08001f54 <AT_ParseInfo>:
  * @param  Obj: pointer to module handle
  * @param  pdata: A string from the WiFi device
  * @retval None.
  */
static void AT_ParseInfo(ES_WIFIObject_t *Obj, uint8_t *pdata)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b084      	sub	sp, #16
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	6039      	str	r1, [r7, #0]
  char *ptr;
  uint8_t num = 0;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	72fb      	strb	r3, [r7, #11]

  ptr = strtok((char *)pdata + 2, ",");
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	3302      	adds	r3, #2
 8001f66:	4940      	ldr	r1, [pc, #256]	; (8002068 <AT_ParseInfo+0x114>)
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f009 fa31 	bl	800b3d0 <strtok>
 8001f6e:	60f8      	str	r0, [r7, #12]

  while (ptr != NULL){
 8001f70:	e071      	b.n	8002056 <AT_ParseInfo+0x102>
    switch (num++) {
 8001f72:	7afb      	ldrb	r3, [r7, #11]
 8001f74:	1c5a      	adds	r2, r3, #1
 8001f76:	72fa      	strb	r2, [r7, #11]
 8001f78:	2b06      	cmp	r3, #6
 8001f7a:	d866      	bhi.n	800204a <AT_ParseInfo+0xf6>
 8001f7c:	a201      	add	r2, pc, #4	; (adr r2, 8001f84 <AT_ParseInfo+0x30>)
 8001f7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f82:	bf00      	nop
 8001f84:	08001fa1 	.word	0x08001fa1
 8001f88:	08001fb5 	.word	0x08001fb5
 8001f8c:	08001fcd 	.word	0x08001fcd
 8001f90:	08001fe5 	.word	0x08001fe5
 8001f94:	08001ffd 	.word	0x08001ffd
 8001f98:	08002015 	.word	0x08002015
 8001f9c:	08002029 	.word	0x08002029
    case 0:
      strncpy((char *)Obj->Product_ID, ptr, sizeof(Obj->Product_ID) - 1);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	221f      	movs	r2, #31
 8001fa4:	68f9      	ldr	r1, [r7, #12]
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f009 f9ff 	bl	800b3aa <strncpy>
      Obj->Product_ID[sizeof(Obj->Product_ID) - 1] = '\0';
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	77da      	strb	r2, [r3, #31]
      break;
 8001fb2:	e04b      	b.n	800204c <AT_ParseInfo+0xf8>

    case 1:
      strncpy((char *)Obj->FW_Rev, ptr, sizeof(Obj->FW_Rev) - 1);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	3320      	adds	r3, #32
 8001fb8:	2217      	movs	r2, #23
 8001fba:	68f9      	ldr	r1, [r7, #12]
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f009 f9f4 	bl	800b3aa <strncpy>
      Obj->FW_Rev[sizeof(Obj->FW_Rev) - 1] = '\0';
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
      break;
 8001fca:	e03f      	b.n	800204c <AT_ParseInfo+0xf8>

    case 2:
      strncpy((char *)Obj->API_Rev, ptr, sizeof(Obj->API_Rev) - 1);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	3338      	adds	r3, #56	; 0x38
 8001fd0:	220f      	movs	r2, #15
 8001fd2:	68f9      	ldr	r1, [r7, #12]
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f009 f9e8 	bl	800b3aa <strncpy>
      Obj->API_Rev[sizeof(Obj->API_Rev) - 1] = '\0';
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
      break;
 8001fe2:	e033      	b.n	800204c <AT_ParseInfo+0xf8>

    case 3:
      strncpy((char *)Obj->Stack_Rev, ptr, sizeof(Obj->Stack_Rev) - 1);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	3348      	adds	r3, #72	; 0x48
 8001fe8:	220f      	movs	r2, #15
 8001fea:	68f9      	ldr	r1, [r7, #12]
 8001fec:	4618      	mov	r0, r3
 8001fee:	f009 f9dc 	bl	800b3aa <strncpy>
      Obj->Stack_Rev[sizeof(Obj->Stack_Rev) - 1] = '\0';
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
      break;
 8001ffa:	e027      	b.n	800204c <AT_ParseInfo+0xf8>

    case 4:
      strncpy((char *)Obj->RTOS_Rev, ptr, sizeof(Obj->RTOS_Rev) - 1);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	3358      	adds	r3, #88	; 0x58
 8002000:	220f      	movs	r2, #15
 8002002:	68f9      	ldr	r1, [r7, #12]
 8002004:	4618      	mov	r0, r3
 8002006:	f009 f9d0 	bl	800b3aa <strncpy>
      Obj->RTOS_Rev[sizeof(Obj->RTOS_Rev) - 1] = '\0';
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2200      	movs	r2, #0
 800200e:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      break;
 8002012:	e01b      	b.n	800204c <AT_ParseInfo+0xf8>

    case 5:
      Obj->CPU_Clock = (uint32_t)ParseNumber(ptr, NULL);
 8002014:	2100      	movs	r1, #0
 8002016:	68f8      	ldr	r0, [r7, #12]
 8002018:	f7ff fee9 	bl	8001dee <ParseNumber>
 800201c:	4603      	mov	r3, r0
 800201e:	461a      	mov	r2, r3
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      break;
 8002026:	e011      	b.n	800204c <AT_ParseInfo+0xf8>

    case 6:
      ptr = strtok(ptr, "\r");
 8002028:	4910      	ldr	r1, [pc, #64]	; (800206c <AT_ParseInfo+0x118>)
 800202a:	68f8      	ldr	r0, [r7, #12]
 800202c:	f009 f9d0 	bl	800b3d0 <strtok>
 8002030:	60f8      	str	r0, [r7, #12]
      strncpy((char *)Obj->Product_Name, ptr, sizeof(Obj->Product_Name) - 1);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	3368      	adds	r3, #104	; 0x68
 8002036:	221f      	movs	r2, #31
 8002038:	68f9      	ldr	r1, [r7, #12]
 800203a:	4618      	mov	r0, r3
 800203c:	f009 f9b5 	bl	800b3aa <strncpy>
      Obj->Product_Name[sizeof(Obj->Product_Name) - 1] = '\0';
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2200      	movs	r2, #0
 8002044:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
      break;
 8002048:	e000      	b.n	800204c <AT_ParseInfo+0xf8>

    default: break;
 800204a:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 800204c:	4906      	ldr	r1, [pc, #24]	; (8002068 <AT_ParseInfo+0x114>)
 800204e:	2000      	movs	r0, #0
 8002050:	f009 f9be 	bl	800b3d0 <strtok>
 8002054:	60f8      	str	r0, [r7, #12]
  while (ptr != NULL){
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d18a      	bne.n	8001f72 <AT_ParseInfo+0x1e>
  }
}
 800205c:	bf00      	nop
 800205e:	bf00      	nop
 8002060:	3710      	adds	r7, #16
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	0800c83c 	.word	0x0800c83c
 800206c:	0800c840 	.word	0x0800c840

08002070 <AT_ParseConnSettings>:
  * @param  pdata: A string from the WiFi device
  * @param  NetSettings: settings
  * @retval None.
  */
static void AT_ParseConnSettings(char *pdata, ES_WIFI_Network_t *NetSettings)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b084      	sub	sp, #16
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
 8002078:	6039      	str	r1, [r7, #0]
  uint8_t num = 0;
 800207a:	2300      	movs	r3, #0
 800207c:	73fb      	strb	r3, [r7, #15]
  char *ptr;

  ptr = strtok(pdata + 2, ",");
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	3302      	adds	r3, #2
 8002082:	4959      	ldr	r1, [pc, #356]	; (80021e8 <AT_ParseConnSettings+0x178>)
 8002084:	4618      	mov	r0, r3
 8002086:	f009 f9a3 	bl	800b3d0 <strtok>
 800208a:	60b8      	str	r0, [r7, #8]

  while (ptr != NULL) {
 800208c:	e0a2      	b.n	80021d4 <AT_ParseConnSettings+0x164>
    switch (num++) {
 800208e:	7bfb      	ldrb	r3, [r7, #15]
 8002090:	1c5a      	adds	r2, r3, #1
 8002092:	73fa      	strb	r2, [r7, #15]
 8002094:	2b0b      	cmp	r3, #11
 8002096:	f200 808c 	bhi.w	80021b2 <AT_ParseConnSettings+0x142>
 800209a:	a201      	add	r2, pc, #4	; (adr r2, 80020a0 <AT_ParseConnSettings+0x30>)
 800209c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020a0:	080020d1 	.word	0x080020d1
 80020a4:	080020e7 	.word	0x080020e7
 80020a8:	080020ff 	.word	0x080020ff
 80020ac:	08002113 	.word	0x08002113
 80020b0:	08002127 	.word	0x08002127
 80020b4:	0800213b 	.word	0x0800213b
 80020b8:	0800214b 	.word	0x0800214b
 80020bc:	0800215b 	.word	0x0800215b
 80020c0:	0800216b 	.word	0x0800216b
 80020c4:	0800217b 	.word	0x0800217b
 80020c8:	0800218b 	.word	0x0800218b
 80020cc:	0800219f 	.word	0x0800219f
    case 0:
      strncpy((char *)NetSettings->SSID,  ptr, sizeof(NetSettings->SSID) - 1);
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	2220      	movs	r2, #32
 80020d4:	68b9      	ldr	r1, [r7, #8]
 80020d6:	4618      	mov	r0, r3
 80020d8:	f009 f967 	bl	800b3aa <strncpy>
      NetSettings->SSID[sizeof(NetSettings->SSID) - 1] = '\0';
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	2200      	movs	r2, #0
 80020e0:	f883 2020 	strb.w	r2, [r3, #32]
      break;
 80020e4:	e066      	b.n	80021b4 <AT_ParseConnSettings+0x144>

    case 1:
      strncpy((char *)NetSettings->pswd, ptr, sizeof(NetSettings->pswd) - 1);
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	3321      	adds	r3, #33	; 0x21
 80020ea:	2220      	movs	r2, #32
 80020ec:	68b9      	ldr	r1, [r7, #8]
 80020ee:	4618      	mov	r0, r3
 80020f0:	f009 f95b 	bl	800b3aa <strncpy>
      NetSettings->pswd[sizeof(NetSettings->pswd) - 1] = '\0';
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	2200      	movs	r2, #0
 80020f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      break;
 80020fc:	e05a      	b.n	80021b4 <AT_ParseConnSettings+0x144>

    case 2:
      NetSettings->Security = (ES_WIFI_SecurityType_t)ParseNumber(ptr, NULL);
 80020fe:	2100      	movs	r1, #0
 8002100:	68b8      	ldr	r0, [r7, #8]
 8002102:	f7ff fe74 	bl	8001dee <ParseNumber>
 8002106:	4603      	mov	r3, r0
 8002108:	b2da      	uxtb	r2, r3
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        break;
 8002110:	e050      	b.n	80021b4 <AT_ParseConnSettings+0x144>

    case 3:
      NetSettings->DHCP_IsEnabled = (uint8_t)ParseNumber(ptr, NULL);
 8002112:	2100      	movs	r1, #0
 8002114:	68b8      	ldr	r0, [r7, #8]
 8002116:	f7ff fe6a 	bl	8001dee <ParseNumber>
 800211a:	4603      	mov	r3, r0
 800211c:	b2da      	uxtb	r2, r3
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      break;
 8002124:	e046      	b.n	80021b4 <AT_ParseConnSettings+0x144>

    case 4:
      NetSettings->IP_Ver = (ES_WIFI_IPVer_t)ParseNumber(ptr, NULL);
 8002126:	2100      	movs	r1, #0
 8002128:	68b8      	ldr	r0, [r7, #8]
 800212a:	f7ff fe60 	bl	8001dee <ParseNumber>
 800212e:	4603      	mov	r3, r0
 8002130:	b2da      	uxtb	r2, r3
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
      break;
 8002138:	e03c      	b.n	80021b4 <AT_ParseConnSettings+0x144>

    case 5:
      ParseIP(ptr, NetSettings->IP_Addr, sizeof(NetSettings->IP_Addr));
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	3348      	adds	r3, #72	; 0x48
 800213e:	2204      	movs	r2, #4
 8002140:	4619      	mov	r1, r3
 8002142:	68b8      	ldr	r0, [r7, #8]
 8002144:	f7ff fece 	bl	8001ee4 <ParseIP>
      break;
 8002148:	e034      	b.n	80021b4 <AT_ParseConnSettings+0x144>

    case 6:
      ParseIP(ptr, NetSettings->IP_Mask, sizeof(NetSettings->IP_Mask));
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	334c      	adds	r3, #76	; 0x4c
 800214e:	2204      	movs	r2, #4
 8002150:	4619      	mov	r1, r3
 8002152:	68b8      	ldr	r0, [r7, #8]
 8002154:	f7ff fec6 	bl	8001ee4 <ParseIP>
      break;
 8002158:	e02c      	b.n	80021b4 <AT_ParseConnSettings+0x144>

    case 7:
      ParseIP(ptr, NetSettings->Gateway_Addr, sizeof(NetSettings->Gateway_Addr));
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	3350      	adds	r3, #80	; 0x50
 800215e:	2204      	movs	r2, #4
 8002160:	4619      	mov	r1, r3
 8002162:	68b8      	ldr	r0, [r7, #8]
 8002164:	f7ff febe 	bl	8001ee4 <ParseIP>
      break;
 8002168:	e024      	b.n	80021b4 <AT_ParseConnSettings+0x144>

    case 8:
      ParseIP(ptr, NetSettings->DNS1, sizeof(NetSettings->DNS1));
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	3354      	adds	r3, #84	; 0x54
 800216e:	2204      	movs	r2, #4
 8002170:	4619      	mov	r1, r3
 8002172:	68b8      	ldr	r0, [r7, #8]
 8002174:	f7ff feb6 	bl	8001ee4 <ParseIP>
      break;
 8002178:	e01c      	b.n	80021b4 <AT_ParseConnSettings+0x144>

    case 9:
      ParseIP(ptr, NetSettings->DNS2, sizeof(NetSettings->DNS2));
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	3358      	adds	r3, #88	; 0x58
 800217e:	2204      	movs	r2, #4
 8002180:	4619      	mov	r1, r3
 8002182:	68b8      	ldr	r0, [r7, #8]
 8002184:	f7ff feae 	bl	8001ee4 <ParseIP>
      break;
 8002188:	e014      	b.n	80021b4 <AT_ParseConnSettings+0x144>

    case 10:
      NetSettings->JoinRetries = (uint8_t)ParseNumber(ptr, NULL);
 800218a:	2100      	movs	r1, #0
 800218c:	68b8      	ldr	r0, [r7, #8]
 800218e:	f7ff fe2e 	bl	8001dee <ParseNumber>
 8002192:	4603      	mov	r3, r0
 8002194:	b2da      	uxtb	r2, r3
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      break;
 800219c:	e00a      	b.n	80021b4 <AT_ParseConnSettings+0x144>

    case 11:
      NetSettings->AutoConnect = (uint8_t)ParseNumber(ptr, NULL);
 800219e:	2100      	movs	r1, #0
 80021a0:	68b8      	ldr	r0, [r7, #8]
 80021a2:	f7ff fe24 	bl	8001dee <ParseNumber>
 80021a6:	4603      	mov	r3, r0
 80021a8:	b2da      	uxtb	r2, r3
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
      break;
 80021b0:	e000      	b.n	80021b4 <AT_ParseConnSettings+0x144>

    default:
      break;
 80021b2:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 80021b4:	490c      	ldr	r1, [pc, #48]	; (80021e8 <AT_ParseConnSettings+0x178>)
 80021b6:	2000      	movs	r0, #0
 80021b8:	f009 f90a 	bl	800b3d0 <strtok>
 80021bc:	60b8      	str	r0, [r7, #8]
    if ((ptr != NULL) && (ptr[-1] == ','))
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d007      	beq.n	80021d4 <AT_ParseConnSettings+0x164>
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	3b01      	subs	r3, #1
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	2b2c      	cmp	r3, #44	; 0x2c
 80021cc:	d102      	bne.n	80021d4 <AT_ParseConnSettings+0x164>
    { /* Ignore empty fields */
      num++;
 80021ce:	7bfb      	ldrb	r3, [r7, #15]
 80021d0:	3301      	adds	r3, #1
 80021d2:	73fb      	strb	r3, [r7, #15]
  while (ptr != NULL) {
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	f47f af59 	bne.w	800208e <AT_ParseConnSettings+0x1e>
    }
  }
}
 80021dc:	bf00      	nop
 80021de:	bf00      	nop
 80021e0:	3710      	adds	r7, #16
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	0800c83c 	.word	0x0800c83c

080021ec <AT_ExecuteCommand>:
  * @param  cmd: pointer to the command string
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_ExecuteCommand(ES_WIFIObject_t *Obj, const uint8_t *cmd, uint8_t *pdata)
{
 80021ec:	b590      	push	{r4, r7, lr}
 80021ee:	b087      	sub	sp, #28
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	60f8      	str	r0, [r7, #12]
 80021f4:	60b9      	str	r1, [r7, #8]
 80021f6:	607a      	str	r2, [r7, #4]
  int ret = 0;
 80021f8:	2300      	movs	r3, #0
 80021fa:	613b      	str	r3, [r7, #16]
  int16_t recv_len = 0;
 80021fc:	2300      	movs	r3, #0
 80021fe:	82fb      	strh	r3, [r7, #22]

  DEBUGCMD("%s\n",cmd);

  if ((Obj->fops.IO_Send != NULL) && (Obj->fops.IO_Receive != NULL)) {
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8002206:	2b00      	cmp	r3, #0
 8002208:	d056      	beq.n	80022b8 <AT_ExecuteCommand+0xcc>
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8002210:	2b00      	cmp	r3, #0
 8002212:	d051      	beq.n	80022b8 <AT_ExecuteCommand+0xcc>

  ret = Obj->fops.IO_Send(cmd, strlen((const char *)cmd), Obj->Timeout);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
 800221a:	68b8      	ldr	r0, [r7, #8]
 800221c:	f7fd fff0 	bl	8000200 <strlen>
 8002220:	4603      	mov	r3, r0
 8002222:	b299      	uxth	r1, r3
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 800222a:	461a      	mov	r2, r3
 800222c:	68b8      	ldr	r0, [r7, #8]
 800222e:	47a0      	blx	r4
 8002230:	4603      	mov	r3, r0
 8002232:	613b      	str	r3, [r7, #16]

  if( ret > 0)
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	2b00      	cmp	r3, #0
 8002238:	dd3e      	ble.n	80022b8 <AT_ExecuteCommand+0xcc>
  {
    recv_len = Obj->fops.IO_Receive(pdata, ES_WIFI_DATA_SIZE, Obj->Timeout);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8002240:	68fa      	ldr	r2, [r7, #12]
 8002242:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8002246:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	4798      	blx	r3
 800224e:	4603      	mov	r3, r0
 8002250:	82fb      	strh	r3, [r7, #22]
    if ((recv_len > 0) && (recv_len <= ES_WIFI_DATA_SIZE))
 8002252:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002256:	2b00      	cmp	r3, #0
 8002258:	dd27      	ble.n	80022aa <AT_ExecuteCommand+0xbe>
 800225a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800225e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002262:	dc22      	bgt.n	80022aa <AT_ExecuteCommand+0xbe>
    {
      if (recv_len == ES_WIFI_DATA_SIZE)
 8002264:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002268:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800226c:	d105      	bne.n	800227a <AT_ExecuteCommand+0x8e>
      {
        /* ES_WIFI_DATA_SIZE maybe too small !! */
        recv_len--;
 800226e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002272:	b29b      	uxth	r3, r3
 8002274:	3b01      	subs	r3, #1
 8002276:	b29b      	uxth	r3, r3
 8002278:	82fb      	strh	r3, [r7, #22]
      }
      *(pdata + recv_len) = 0;
 800227a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800227e:	687a      	ldr	r2, [r7, #4]
 8002280:	4413      	add	r3, r2
 8002282:	2200      	movs	r2, #0
 8002284:	701a      	strb	r2, [r3, #0]
      DEBUGCMD("%s\n",cmd);

      if (strstr((char *)pdata, AT_OK_STRING))
 8002286:	490f      	ldr	r1, [pc, #60]	; (80022c4 <AT_ExecuteCommand+0xd8>)
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	f009 f8fd 	bl	800b488 <strstr>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d001      	beq.n	8002298 <AT_ExecuteCommand+0xac>
      {
        return ES_WIFI_STATUS_OK;
 8002294:	2300      	movs	r3, #0
 8002296:	e010      	b.n	80022ba <AT_ExecuteCommand+0xce>
      }
      else if (strstr((char *)pdata, AT_ERROR_STRING))
 8002298:	490b      	ldr	r1, [pc, #44]	; (80022c8 <AT_ExecuteCommand+0xdc>)
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f009 f8f4 	bl	800b488 <strstr>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d001      	beq.n	80022aa <AT_ExecuteCommand+0xbe>
      {
        return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 80022a6:	2305      	movs	r3, #5
 80022a8:	e007      	b.n	80022ba <AT_ExecuteCommand+0xce>
      }
    }
    if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER)
 80022aa:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80022ae:	f113 0f04 	cmn.w	r3, #4
 80022b2:	d101      	bne.n	80022b8 <AT_ExecuteCommand+0xcc>
    {
      return ES_WIFI_STATUS_MODULE_CRASH;
 80022b4:	2306      	movs	r3, #6
 80022b6:	e000      	b.n	80022ba <AT_ExecuteCommand+0xce>
    }
   }
  }
  return ES_WIFI_STATUS_IO_ERROR;
 80022b8:	2304      	movs	r3, #4
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	371c      	adds	r7, #28
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd90      	pop	{r4, r7, pc}
 80022c2:	bf00      	nop
 80022c4:	0800c854 	.word	0x0800c854
 80022c8:	0800c860 	.word	0x0800c860

080022cc <AT_RequestSendData>:
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_RequestSendData(ES_WIFIObject_t *Obj, uint8_t* cmd,
                                           const uint8_t *pcmd_data, uint16_t len, uint8_t *pdata)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b086      	sub	sp, #24
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	60f8      	str	r0, [r7, #12]
 80022d4:	60b9      	str	r1, [r7, #8]
 80022d6:	607a      	str	r2, [r7, #4]
 80022d8:	807b      	strh	r3, [r7, #2]
  int16_t send_len = 0;
 80022da:	2300      	movs	r3, #0
 80022dc:	82fb      	strh	r3, [r7, #22]
  int16_t recv_len = 0;
 80022de:	2300      	movs	r3, #0
 80022e0:	82bb      	strh	r3, [r7, #20]
  uint16_t cmd_len = 0;
 80022e2:	2300      	movs	r3, #0
 80022e4:	827b      	strh	r3, [r7, #18]
  uint16_t n;

  cmd_len = strlen((char*)cmd);
 80022e6:	68b8      	ldr	r0, [r7, #8]
 80022e8:	f7fd ff8a 	bl	8000200 <strlen>
 80022ec:	4603      	mov	r3, r0
 80022ee:	827b      	strh	r3, [r7, #18]

  /* Can send only even number of byte on first send. */
  if (cmd_len & 1) return ES_WIFI_STATUS_ERROR;
 80022f0:	8a7b      	ldrh	r3, [r7, #18]
 80022f2:	f003 0301 	and.w	r3, r3, #1
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d001      	beq.n	80022fe <AT_RequestSendData+0x32>
 80022fa:	2302      	movs	r3, #2
 80022fc:	e05d      	b.n	80023ba <AT_RequestSendData+0xee>

  if ((Obj->fops.IO_Send != NULL) && (Obj->fops.IO_Receive != NULL)) {
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8002304:	2b00      	cmp	r3, #0
 8002306:	d057      	beq.n	80023b8 <AT_RequestSendData+0xec>
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 800230e:	2b00      	cmp	r3, #0
 8002310:	d052      	beq.n	80023b8 <AT_RequestSendData+0xec>

  n = Obj->fops.IO_Send(cmd, cmd_len, Obj->Timeout);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8002318:	68fa      	ldr	r2, [r7, #12]
 800231a:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 800231e:	8a79      	ldrh	r1, [r7, #18]
 8002320:	68b8      	ldr	r0, [r7, #8]
 8002322:	4798      	blx	r3
 8002324:	4603      	mov	r3, r0
 8002326:	823b      	strh	r3, [r7, #16]
  if (n == cmd_len)
 8002328:	8a3a      	ldrh	r2, [r7, #16]
 800232a:	8a7b      	ldrh	r3, [r7, #18]
 800232c:	429a      	cmp	r2, r3
 800232e:	d143      	bne.n	80023b8 <AT_RequestSendData+0xec>
  {
    send_len = Obj->fops.IO_Send(pcmd_data, len, Obj->Timeout);
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8002336:	68fa      	ldr	r2, [r7, #12]
 8002338:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 800233c:	8879      	ldrh	r1, [r7, #2]
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	4798      	blx	r3
 8002342:	4603      	mov	r3, r0
 8002344:	82fb      	strh	r3, [r7, #22]
    if (send_len == len)
 8002346:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800234a:	887b      	ldrh	r3, [r7, #2]
 800234c:	429a      	cmp	r2, r3
 800234e:	d131      	bne.n	80023b4 <AT_RequestSendData+0xe8>
    {
      recv_len = Obj->fops.IO_Receive(pdata, 0, Obj->Timeout);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8002356:	68fa      	ldr	r2, [r7, #12]
 8002358:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 800235c:	2100      	movs	r1, #0
 800235e:	6a38      	ldr	r0, [r7, #32]
 8002360:	4798      	blx	r3
 8002362:	4603      	mov	r3, r0
 8002364:	82bb      	strh	r3, [r7, #20]
      if (recv_len > 0)
 8002366:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800236a:	2b00      	cmp	r3, #0
 800236c:	dd19      	ble.n	80023a2 <AT_RequestSendData+0xd6>
      {
        *(pdata + recv_len) = 0;
 800236e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002372:	6a3a      	ldr	r2, [r7, #32]
 8002374:	4413      	add	r3, r2
 8002376:	2200      	movs	r2, #0
 8002378:	701a      	strb	r2, [r3, #0]
        if(strstr((char *)pdata, AT_OK_STRING))
 800237a:	4912      	ldr	r1, [pc, #72]	; (80023c4 <AT_RequestSendData+0xf8>)
 800237c:	6a38      	ldr	r0, [r7, #32]
 800237e:	f009 f883 	bl	800b488 <strstr>
 8002382:	4603      	mov	r3, r0
 8002384:	2b00      	cmp	r3, #0
 8002386:	d001      	beq.n	800238c <AT_RequestSendData+0xc0>
        {
          return ES_WIFI_STATUS_OK;
 8002388:	2300      	movs	r3, #0
 800238a:	e016      	b.n	80023ba <AT_RequestSendData+0xee>
        }
        else if(strstr((char *)pdata, AT_ERROR_STRING))
 800238c:	490e      	ldr	r1, [pc, #56]	; (80023c8 <AT_RequestSendData+0xfc>)
 800238e:	6a38      	ldr	r0, [r7, #32]
 8002390:	f009 f87a 	bl	800b488 <strstr>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d001      	beq.n	800239e <AT_RequestSendData+0xd2>
        {
          return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 800239a:	2305      	movs	r3, #5
 800239c:	e00d      	b.n	80023ba <AT_RequestSendData+0xee>
        }
        else
        {
          return ES_WIFI_STATUS_ERROR;
 800239e:	2302      	movs	r3, #2
 80023a0:	e00b      	b.n	80023ba <AT_RequestSendData+0xee>
        }
      }

      if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER)
 80023a2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80023a6:	f113 0f04 	cmn.w	r3, #4
 80023aa:	d101      	bne.n	80023b0 <AT_RequestSendData+0xe4>
      {
        return ES_WIFI_STATUS_MODULE_CRASH;
 80023ac:	2306      	movs	r3, #6
 80023ae:	e004      	b.n	80023ba <AT_RequestSendData+0xee>
      }
      return ES_WIFI_STATUS_ERROR;
 80023b0:	2302      	movs	r3, #2
 80023b2:	e002      	b.n	80023ba <AT_RequestSendData+0xee>
    }
    else
    {
      return ES_WIFI_STATUS_ERROR;
 80023b4:	2302      	movs	r3, #2
 80023b6:	e000      	b.n	80023ba <AT_RequestSendData+0xee>
    }
  }
 }
  return ES_WIFI_STATUS_IO_ERROR;
 80023b8:	2304      	movs	r3, #4
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3718      	adds	r7, #24
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	0800c854 	.word	0x0800c854
 80023c8:	0800c860 	.word	0x0800c860

080023cc <AT_RequestReceiveData>:
  * @param  ReadData : pointer to received data length.
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_RequestReceiveData(ES_WIFIObject_t *Obj, uint8_t *cmd,
                                              char *pdata, uint16_t Reqlen, uint16_t *ReadData)
{
 80023cc:	b590      	push	{r4, r7, lr}
 80023ce:	b087      	sub	sp, #28
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	60f8      	str	r0, [r7, #12]
 80023d4:	60b9      	str	r1, [r7, #8]
 80023d6:	607a      	str	r2, [r7, #4]
 80023d8:	807b      	strh	r3, [r7, #2]
  int len;
  uint8_t *p=Obj->CmdData;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80023e0:	613b      	str	r3, [r7, #16]

  if ((Obj->fops.IO_Send != NULL) && (Obj->fops.IO_Receive != NULL)) {
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	f000 8087 	beq.w	80024fc <AT_RequestReceiveData+0x130>
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	f000 8081 	beq.w	80024fc <AT_RequestReceiveData+0x130>

  if (Obj->fops.IO_Send(cmd, (uint16_t)strlen((char *)cmd), Obj->Timeout) > 0)
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
 8002400:	68b8      	ldr	r0, [r7, #8]
 8002402:	f7fd fefd 	bl	8000200 <strlen>
 8002406:	4603      	mov	r3, r0
 8002408:	b299      	uxth	r1, r3
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8002410:	461a      	mov	r2, r3
 8002412:	68b8      	ldr	r0, [r7, #8]
 8002414:	47a0      	blx	r4
 8002416:	4603      	mov	r3, r0
 8002418:	2b00      	cmp	r3, #0
 800241a:	dd6f      	ble.n	80024fc <AT_RequestReceiveData+0x130>
  {
    len = Obj->fops.IO_Receive(p, 0, Obj->Timeout);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8002422:	68fa      	ldr	r2, [r7, #12]
 8002424:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8002428:	2100      	movs	r1, #0
 800242a:	6938      	ldr	r0, [r7, #16]
 800242c:	4798      	blx	r3
 800242e:	4603      	mov	r3, r0
 8002430:	617b      	str	r3, [r7, #20]

    /* Check if start at "\r\n". */
    if ((p[0] != '\r') || (p[1] != '\n'))
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	781b      	ldrb	r3, [r3, #0]
 8002436:	2b0d      	cmp	r3, #13
 8002438:	d104      	bne.n	8002444 <AT_RequestReceiveData+0x78>
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	3301      	adds	r3, #1
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	2b0a      	cmp	r3, #10
 8002442:	d001      	beq.n	8002448 <AT_RequestReceiveData+0x7c>
    {
      return ES_WIFI_STATUS_IO_ERROR;
 8002444:	2304      	movs	r3, #4
 8002446:	e05a      	b.n	80024fe <AT_RequestReceiveData+0x132>
    }
    len -= 2;
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	3b02      	subs	r3, #2
 800244c:	617b      	str	r3, [r7, #20]
    p += 2;
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	3302      	adds	r3, #2
 8002452:	613b      	str	r3, [r7, #16]
    if (len >= AT_OK_STRING_LEN)
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	2b07      	cmp	r3, #7
 8002458:	d94a      	bls.n	80024f0 <AT_RequestReceiveData+0x124>
    {
     while(len && (p[len - 1] == 0x15)) len--;
 800245a:	e002      	b.n	8002462 <AT_RequestReceiveData+0x96>
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	3b01      	subs	r3, #1
 8002460:	617b      	str	r3, [r7, #20]
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d006      	beq.n	8002476 <AT_RequestReceiveData+0xaa>
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	3b01      	subs	r3, #1
 800246c:	693a      	ldr	r2, [r7, #16]
 800246e:	4413      	add	r3, r2
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	2b15      	cmp	r3, #21
 8002474:	d0f2      	beq.n	800245c <AT_RequestReceiveData+0x90>
     p[len] = '\0';
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	693a      	ldr	r2, [r7, #16]
 800247a:	4413      	add	r3, r2
 800247c:	2200      	movs	r2, #0
 800247e:	701a      	strb	r2, [r3, #0]

     if (strstr((char *) p + len - AT_OK_STRING_LEN, AT_OK_STRING))
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	3b08      	subs	r3, #8
 8002484:	693a      	ldr	r2, [r7, #16]
 8002486:	4413      	add	r3, r2
 8002488:	491f      	ldr	r1, [pc, #124]	; (8002508 <AT_RequestReceiveData+0x13c>)
 800248a:	4618      	mov	r0, r3
 800248c:	f008 fffc 	bl	800b488 <strstr>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d016      	beq.n	80024c4 <AT_RequestReceiveData+0xf8>
     {
       *ReadData = len - AT_OK_STRING_LEN;
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	b29b      	uxth	r3, r3
 800249a:	3b08      	subs	r3, #8
 800249c:	b29a      	uxth	r2, r3
 800249e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024a0:	801a      	strh	r2, [r3, #0]
       if (*ReadData > Reqlen)
 80024a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024a4:	881b      	ldrh	r3, [r3, #0]
 80024a6:	887a      	ldrh	r2, [r7, #2]
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d202      	bcs.n	80024b2 <AT_RequestReceiveData+0xe6>
       {
         *ReadData = Reqlen;
 80024ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024ae:	887a      	ldrh	r2, [r7, #2]
 80024b0:	801a      	strh	r2, [r3, #0]
       }

       memcpy(pdata, p, *ReadData);
 80024b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024b4:	881b      	ldrh	r3, [r3, #0]
 80024b6:	461a      	mov	r2, r3
 80024b8:	6939      	ldr	r1, [r7, #16]
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f009 f884 	bl	800b5c8 <memcpy>
       return ES_WIFI_STATUS_OK;
 80024c0:	2300      	movs	r3, #0
 80024c2:	e01c      	b.n	80024fe <AT_RequestReceiveData+0x132>
     }
     else if (memcmp((char *)p + len - AT_DELIMETER_LEN, AT_DELIMETER_STRING, AT_DELIMETER_LEN) == 0)
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	3b04      	subs	r3, #4
 80024c8:	693a      	ldr	r2, [r7, #16]
 80024ca:	4413      	add	r3, r2
 80024cc:	2204      	movs	r2, #4
 80024ce:	490f      	ldr	r1, [pc, #60]	; (800250c <AT_RequestReceiveData+0x140>)
 80024d0:	4618      	mov	r0, r3
 80024d2:	f008 ff31 	bl	800b338 <memcmp>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d104      	bne.n	80024e6 <AT_RequestReceiveData+0x11a>
     {
       *ReadData = 0;
 80024dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024de:	2200      	movs	r2, #0
 80024e0:	801a      	strh	r2, [r3, #0]
       return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 80024e2:	2305      	movs	r3, #5
 80024e4:	e00b      	b.n	80024fe <AT_RequestReceiveData+0x132>
     }

     *ReadData = 0;
 80024e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024e8:	2200      	movs	r2, #0
 80024ea:	801a      	strh	r2, [r3, #0]
     return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 80024ec:	2305      	movs	r3, #5
 80024ee:	e006      	b.n	80024fe <AT_RequestReceiveData+0x132>
   }
   if (len == ES_WIFI_ERROR_STUFFING_FOREVER )
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	f113 0f04 	cmn.w	r3, #4
 80024f6:	d101      	bne.n	80024fc <AT_RequestReceiveData+0x130>
   {
     return ES_WIFI_STATUS_MODULE_CRASH;
 80024f8:	2306      	movs	r3, #6
 80024fa:	e000      	b.n	80024fe <AT_RequestReceiveData+0x132>
   }
  }
 }

  return ES_WIFI_STATUS_IO_ERROR;
 80024fc:	2304      	movs	r3, #4
}
 80024fe:	4618      	mov	r0, r3
 8002500:	371c      	adds	r7, #28
 8002502:	46bd      	mov	sp, r7
 8002504:	bd90      	pop	{r4, r7, pc}
 8002506:	bf00      	nop
 8002508:	0800c854 	.word	0x0800c854
 800250c:	0800c868 	.word	0x0800c868

08002510 <ES_WIFI_Init>:
  * @brief  Initialize the WIFI module.
  * @param  Obj: pointer to the module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Init(ES_WIFIObject_t *Obj)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b084      	sub	sp, #16
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8002518:	2302      	movs	r3, #2
 800251a:	73fb      	strb	r3, [r7, #15]

  Obj->Timeout = ES_WIFI_TIMEOUT;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	f247 5230 	movw	r2, #30000	; 0x7530
 8002522:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8

  if (Obj->fops.IO_Init != NULL) {
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800252c:	2b00      	cmp	r3, #0
 800252e:	d01b      	beq.n	8002568 <ES_WIFI_Init+0x58>

  if (Obj->fops.IO_Init(ES_WIFI_INIT) == 0)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8002536:	2000      	movs	r0, #0
 8002538:	4798      	blx	r3
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d113      	bne.n	8002568 <ES_WIFI_Init+0x58>
  {
    ret = AT_ExecuteCommand(Obj,(const uint8_t*)"I?\r\n", Obj->CmdData);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002546:	461a      	mov	r2, r3
 8002548:	490a      	ldr	r1, [pc, #40]	; (8002574 <ES_WIFI_Init+0x64>)
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	f7ff fe4e 	bl	80021ec <AT_ExecuteCommand>
 8002550:	4603      	mov	r3, r0
 8002552:	73fb      	strb	r3, [r7, #15]

    if(ret == ES_WIFI_STATUS_OK)
 8002554:	7bfb      	ldrb	r3, [r7, #15]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d106      	bne.n	8002568 <ES_WIFI_Init+0x58>
    {
      AT_ParseInfo(Obj, Obj->CmdData);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002560:	4619      	mov	r1, r3
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f7ff fcf6 	bl	8001f54 <AT_ParseInfo>
    }
   }
  }
  return ret;
 8002568:	7bfb      	ldrb	r3, [r7, #15]
}
 800256a:	4618      	mov	r0, r3
 800256c:	3710      	adds	r7, #16
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	0800c870 	.word	0x0800c870

08002578 <ES_WIFI_RegisterBusIO>:
ES_WIFI_Status_t  ES_WIFI_RegisterBusIO(ES_WIFIObject_t *Obj, IO_Init_Func IO_Init,
                                                              IO_DeInit_Func  IO_DeInit,
                                                              IO_Delay_Func   IO_Delay,
                                                              IO_Send_Func    IO_Send,
                                                              IO_Receive_Func IO_Receive)
{
 8002578:	b480      	push	{r7}
 800257a:	b085      	sub	sp, #20
 800257c:	af00      	add	r7, sp, #0
 800257e:	60f8      	str	r0, [r7, #12]
 8002580:	60b9      	str	r1, [r7, #8]
 8002582:	607a      	str	r2, [r7, #4]
 8002584:	603b      	str	r3, [r7, #0]
  if (!Obj || !IO_Init || !IO_DeInit || !IO_Send || !IO_Receive)
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d00b      	beq.n	80025a4 <ES_WIFI_RegisterBusIO+0x2c>
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d008      	beq.n	80025a4 <ES_WIFI_RegisterBusIO+0x2c>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d005      	beq.n	80025a4 <ES_WIFI_RegisterBusIO+0x2c>
 8002598:	69bb      	ldr	r3, [r7, #24]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d002      	beq.n	80025a4 <ES_WIFI_RegisterBusIO+0x2c>
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d101      	bne.n	80025a8 <ES_WIFI_RegisterBusIO+0x30>
  {
    return ES_WIFI_STATUS_ERROR;
 80025a4:	2302      	movs	r3, #2
 80025a6:	e014      	b.n	80025d2 <ES_WIFI_RegisterBusIO+0x5a>
  }

  Obj->fops.IO_Init = IO_Init;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	68ba      	ldr	r2, [r7, #8]
 80025ac:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
  Obj->fops.IO_DeInit = IO_DeInit;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	687a      	ldr	r2, [r7, #4]
 80025b4:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
  Obj->fops.IO_Send = IO_Send;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	69ba      	ldr	r2, [r7, #24]
 80025bc:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
  Obj->fops.IO_Receive = IO_Receive;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	69fa      	ldr	r2, [r7, #28]
 80025c4:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
  Obj->fops.IO_Delay = IO_Delay;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	683a      	ldr	r2, [r7, #0]
 80025cc:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  return ES_WIFI_STATUS_OK;
 80025d0:	2300      	movs	r3, #0
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3714      	adds	r7, #20
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr
	...

080025e0 <ES_WIFI_Connect>:
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Connect(ES_WIFIObject_t *Obj, const char *SSID,
                                 const char *Password,
                                 ES_WIFI_SecurityType_t SecType)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b086      	sub	sp, #24
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	60f8      	str	r0, [r7, #12]
 80025e8:	60b9      	str	r1, [r7, #8]
 80025ea:	607a      	str	r2, [r7, #4]
 80025ec:	70fb      	strb	r3, [r7, #3]
  ES_WIFI_Status_t ret;

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData, "C1=%s\r", SSID);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80025f4:	68ba      	ldr	r2, [r7, #8]
 80025f6:	4932      	ldr	r1, [pc, #200]	; (80026c0 <ES_WIFI_Connect+0xe0>)
 80025f8:	4618      	mov	r0, r3
 80025fa:	f008 fda5 	bl	800b148 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800260a:	461a      	mov	r2, r3
 800260c:	68f8      	ldr	r0, [r7, #12]
 800260e:	f7ff fded 	bl	80021ec <AT_ExecuteCommand>
 8002612:	4603      	mov	r3, r0
 8002614:	75fb      	strb	r3, [r7, #23]
  if(ret == ES_WIFI_STATUS_OK)
 8002616:	7dfb      	ldrb	r3, [r7, #23]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d14b      	bne.n	80026b4 <ES_WIFI_Connect+0xd4>
  {
    sprintf((char *)Obj->CmdData, "C2=%s\r", Password);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	4927      	ldr	r1, [pc, #156]	; (80026c4 <ES_WIFI_Connect+0xe4>)
 8002626:	4618      	mov	r0, r3
 8002628:	f008 fd8e 	bl	800b148 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002638:	461a      	mov	r2, r3
 800263a:	68f8      	ldr	r0, [r7, #12]
 800263c:	f7ff fdd6 	bl	80021ec <AT_ExecuteCommand>
 8002640:	4603      	mov	r3, r0
 8002642:	75fb      	strb	r3, [r7, #23]

    if(ret == ES_WIFI_STATUS_OK)
 8002644:	7dfb      	ldrb	r3, [r7, #23]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d134      	bne.n	80026b4 <ES_WIFI_Connect+0xd4>
    {
      Obj->Security = SecType;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	78fa      	ldrb	r2, [r7, #3]
 800264e:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
      sprintf((char *)Obj->CmdData, "C3=%d\r", (uint8_t)SecType);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002658:	78fa      	ldrb	r2, [r7, #3]
 800265a:	491b      	ldr	r1, [pc, #108]	; (80026c8 <ES_WIFI_Connect+0xe8>)
 800265c:	4618      	mov	r0, r3
 800265e:	f008 fd73 	bl	800b148 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800266e:	461a      	mov	r2, r3
 8002670:	68f8      	ldr	r0, [r7, #12]
 8002672:	f7ff fdbb 	bl	80021ec <AT_ExecuteCommand>
 8002676:	4603      	mov	r3, r0
 8002678:	75fb      	strb	r3, [r7, #23]

      if(ret == ES_WIFI_STATUS_OK)
 800267a:	7dfb      	ldrb	r3, [r7, #23]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d119      	bne.n	80026b4 <ES_WIFI_Connect+0xd4>
      {
        sprintf((char *)Obj->CmdData, "C0\r");
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002686:	4911      	ldr	r1, [pc, #68]	; (80026cc <ES_WIFI_Connect+0xec>)
 8002688:	4618      	mov	r0, r3
 800268a:	f008 fd5d 	bl	800b148 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800269a:	461a      	mov	r2, r3
 800269c:	68f8      	ldr	r0, [r7, #12]
 800269e:	f7ff fda5 	bl	80021ec <AT_ExecuteCommand>
 80026a2:	4603      	mov	r3, r0
 80026a4:	75fb      	strb	r3, [r7, #23]
        if(ret == ES_WIFI_STATUS_OK)
 80026a6:	7dfb      	ldrb	r3, [r7, #23]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d103      	bne.n	80026b4 <ES_WIFI_Connect+0xd4>
        {
           Obj->NetSettings.IsConnected = 1;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2201      	movs	r2, #1
 80026b0:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
        }
      }
    }
  }
  UNLOCK_WIFI();
  return ret;
 80026b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3718      	adds	r7, #24
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	0800c888 	.word	0x0800c888
 80026c4:	0800c890 	.word	0x0800c890
 80026c8:	0800c898 	.word	0x0800c898
 80026cc:	0800c8a0 	.word	0x0800c8a0

080026d0 <ES_WIFI_IsConnected>:
  * @brief  Check whether the module is connected to an access point.
  * @param  Obj: pointer to the module handle
  * @retval Operation Status.
  */
uint8_t ES_WIFI_IsConnected(ES_WIFIObject_t *Obj)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b084      	sub	sp, #16
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret;

  LOCK_WIFI();

  sprintf((char *)Obj->CmdData, "CS\r");
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80026de:	4913      	ldr	r1, [pc, #76]	; (800272c <ES_WIFI_IsConnected+0x5c>)
 80026e0:	4618      	mov	r0, r3
 80026e2:	f008 fd31 	bl	800b148 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80026f2:	461a      	mov	r2, r3
 80026f4:	6878      	ldr	r0, [r7, #4]
 80026f6:	f7ff fd79 	bl	80021ec <AT_ExecuteCommand>
 80026fa:	4603      	mov	r3, r0
 80026fc:	73fb      	strb	r3, [r7, #15]
  if (ret == ES_WIFI_STATUS_OK)
 80026fe:	7bfb      	ldrb	r3, [r7, #15]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d10b      	bne.n	800271c <ES_WIFI_IsConnected+0x4c>
  {
    Obj->NetSettings.IsConnected = (Obj->CmdData[2] == '1') ? 1 : 0;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	f893 312a 	ldrb.w	r3, [r3, #298]	; 0x12a
 800270a:	2b31      	cmp	r3, #49	; 0x31
 800270c:	bf0c      	ite	eq
 800270e:	2301      	moveq	r3, #1
 8002710:	2300      	movne	r3, #0
 8002712:	b2db      	uxtb	r3, r3
 8002714:	461a      	mov	r2, r3
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
  }

  UNLOCK_WIFI();

  return Obj->NetSettings.IsConnected;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	f893 30d2 	ldrb.w	r3, [r3, #210]	; 0xd2
}
 8002722:	4618      	mov	r0, r3
 8002724:	3710      	adds	r7, #16
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	0800c8a4 	.word	0x0800c8a4

08002730 <ES_WIFI_GetNetworkSettings>:
  * @brief  Update given object module with the network settings.
  * @param  Obj: pointer to the module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetNetworkSettings(ES_WIFIObject_t *Obj)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b084      	sub	sp, #16
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret;

  LOCK_WIFI();

  sprintf((char *)Obj->CmdData, "C?\r");
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800273e:	4910      	ldr	r1, [pc, #64]	; (8002780 <ES_WIFI_GetNetworkSettings+0x50>)
 8002740:	4618      	mov	r0, r3
 8002742:	f008 fd01 	bl	800b148 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002752:	461a      	mov	r2, r3
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	f7ff fd49 	bl	80021ec <AT_ExecuteCommand>
 800275a:	4603      	mov	r3, r0
 800275c:	73fb      	strb	r3, [r7, #15]

  if(ret == ES_WIFI_STATUS_OK)
 800275e:	7bfb      	ldrb	r3, [r7, #15]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d108      	bne.n	8002776 <ES_WIFI_GetNetworkSettings+0x46>
  {
     AT_ParseConnSettings((char *)Obj->CmdData, &Obj->NetSettings);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	f503 7294 	add.w	r2, r3, #296	; 0x128
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	338d      	adds	r3, #141	; 0x8d
 800276e:	4619      	mov	r1, r3
 8002770:	4610      	mov	r0, r2
 8002772:	f7ff fc7d 	bl	8002070 <AT_ParseConnSettings>
  }

  UNLOCK_WIFI();

  return ret;
 8002776:	7bfb      	ldrb	r3, [r7, #15]
}
 8002778:	4618      	mov	r0, r3
 800277a:	3710      	adds	r7, #16
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}
 8002780:	0800c8ac 	.word	0x0800c8ac

08002784 <ES_WIFI_GetMACAddress>:
  * @param  mac: pointer to the MAC address array.
  * @param  MacLength: length of the MAC address array.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetMACAddress(ES_WIFIObject_t *Obj, uint8_t *mac, uint8_t MacLength)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b086      	sub	sp, #24
 8002788:	af00      	add	r7, sp, #0
 800278a:	60f8      	str	r0, [r7, #12]
 800278c:	60b9      	str	r1, [r7, #8]
 800278e:	4613      	mov	r3, r2
 8002790:	71fb      	strb	r3, [r7, #7]
  ES_WIFI_Status_t ret;
  char *ptr;

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData, "Z5\r");
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002798:	4913      	ldr	r1, [pc, #76]	; (80027e8 <ES_WIFI_GetMACAddress+0x64>)
 800279a:	4618      	mov	r0, r3
 800279c:	f008 fcd4 	bl	800b148 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80027ac:	461a      	mov	r2, r3
 80027ae:	68f8      	ldr	r0, [r7, #12]
 80027b0:	f7ff fd1c 	bl	80021ec <AT_ExecuteCommand>
 80027b4:	4603      	mov	r3, r0
 80027b6:	75fb      	strb	r3, [r7, #23]
  if(ret == ES_WIFI_STATUS_OK)
 80027b8:	7dfb      	ldrb	r3, [r7, #23]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d10e      	bne.n	80027dc <ES_WIFI_GetMACAddress+0x58>
  {
    ptr = strtok((char *)(Obj->CmdData + 2), "\r\n");
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80027c4:	3302      	adds	r3, #2
 80027c6:	4909      	ldr	r1, [pc, #36]	; (80027ec <ES_WIFI_GetMACAddress+0x68>)
 80027c8:	4618      	mov	r0, r3
 80027ca:	f008 fe01 	bl	800b3d0 <strtok>
 80027ce:	6138      	str	r0, [r7, #16]
    ParseMAC(ptr, mac, MacLength);
 80027d0:	79fb      	ldrb	r3, [r7, #7]
 80027d2:	461a      	mov	r2, r3
 80027d4:	68b9      	ldr	r1, [r7, #8]
 80027d6:	6938      	ldr	r0, [r7, #16]
 80027d8:	f7ff fb4d 	bl	8001e76 <ParseMAC>
  }

  UNLOCK_WIFI();

  return ret;
 80027dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3718      	adds	r7, #24
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	0800c8fc 	.word	0x0800c8fc
 80027ec:	0800c900 	.word	0x0800c900

080027f0 <ES_WIFI_StartServerSingleConn>:
  * @param  Obj: pointer to module handle
  * @param  conn: pointer to the connection structure
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StartServerSingleConn(ES_WIFIObject_t *Obj, ES_WIFI_Conn_t *conn)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b084      	sub	sp, #16
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_OK;
 80027fa:	2300      	movs	r3, #0
 80027fc:	73fb      	strb	r3, [r7, #15]

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f503 7094 	add.w	r0, r3, #296	; 0x128
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	789b      	ldrb	r3, [r3, #2]
 8002808:	461a      	mov	r2, r3
 800280a:	4949      	ldr	r1, [pc, #292]	; (8002930 <ES_WIFI_StartServerSingleConn+0x140>)
 800280c:	f008 fc9c 	bl	800b148 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800281c:	461a      	mov	r2, r3
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f7ff fce4 	bl	80021ec <AT_ExecuteCommand>
 8002824:	4603      	mov	r3, r0
 8002826:	73fb      	strb	r3, [r7, #15]
  if (ret != ES_WIFI_STATUS_OK)
 8002828:	7bfb      	ldrb	r3, [r7, #15]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d001      	beq.n	8002832 <ES_WIFI_StartServerSingleConn+0x42>
  {
    UNLOCK_WIFI();
    return ret;
 800282e:	7bfb      	ldrb	r3, [r7, #15]
 8002830:	e079      	b.n	8002926 <ES_WIFI_StartServerSingleConn+0x136>
  }

  if ((conn->Type != ES_WIFI_UDP_CONNECTION) && (conn->Type != ES_WIFI_UDP_LITE_CONNECTION))
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	2b01      	cmp	r3, #1
 8002838:	d016      	beq.n	8002868 <ES_WIFI_StartServerSingleConn+0x78>
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	781b      	ldrb	r3, [r3, #0]
 800283e:	2b02      	cmp	r3, #2
 8002840:	d012      	beq.n	8002868 <ES_WIFI_StartServerSingleConn+0x78>
  {
    sprintf((char*)Obj->CmdData,"PK=1,3000\r");
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002848:	493a      	ldr	r1, [pc, #232]	; (8002934 <ES_WIFI_StartServerSingleConn+0x144>)
 800284a:	4618      	mov	r0, r3
 800284c:	f008 fc7c 	bl	800b148 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800285c:	461a      	mov	r2, r3
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	f7ff fcc4 	bl	80021ec <AT_ExecuteCommand>
 8002864:	4603      	mov	r3, r0
 8002866:	73fb      	strb	r3, [r7, #15]
  }

  if (ret == ES_WIFI_STATUS_OK)
 8002868:	7bfb      	ldrb	r3, [r7, #15]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d15a      	bne.n	8002924 <ES_WIFI_StartServerSingleConn+0x134>
  {
    sprintf((char*)Obj->CmdData,"P1=%d\r", conn->Type);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	f503 7094 	add.w	r0, r3, #296	; 0x128
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	461a      	mov	r2, r3
 800287a:	492f      	ldr	r1, [pc, #188]	; (8002938 <ES_WIFI_StartServerSingleConn+0x148>)
 800287c:	f008 fc64 	bl	800b148 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800288c:	461a      	mov	r2, r3
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f7ff fcac 	bl	80021ec <AT_ExecuteCommand>
 8002894:	4603      	mov	r3, r0
 8002896:	73fb      	strb	r3, [r7, #15]
    if (ret == ES_WIFI_STATUS_OK)
 8002898:	7bfb      	ldrb	r3, [r7, #15]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d142      	bne.n	8002924 <ES_WIFI_StartServerSingleConn+0x134>
    {
      sprintf((char*)Obj->CmdData,"P8=%d\r", conn->Backlog);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	f503 7094 	add.w	r0, r3, #296	; 0x128
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	7c1b      	ldrb	r3, [r3, #16]
 80028a8:	461a      	mov	r2, r3
 80028aa:	4924      	ldr	r1, [pc, #144]	; (800293c <ES_WIFI_StartServerSingleConn+0x14c>)
 80028ac:	f008 fc4c 	bl	800b148 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80028bc:	461a      	mov	r2, r3
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f7ff fc94 	bl	80021ec <AT_ExecuteCommand>
 80028c4:	4603      	mov	r3, r0
 80028c6:	73fb      	strb	r3, [r7, #15]
      if (ret == ES_WIFI_STATUS_OK)
 80028c8:	7bfb      	ldrb	r3, [r7, #15]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d12a      	bne.n	8002924 <ES_WIFI_StartServerSingleConn+0x134>
      {
        sprintf((char*)Obj->CmdData,"P2=%d\r", conn->LocalPort);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	f503 7094 	add.w	r0, r3, #296	; 0x128
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	88db      	ldrh	r3, [r3, #6]
 80028d8:	461a      	mov	r2, r3
 80028da:	4919      	ldr	r1, [pc, #100]	; (8002940 <ES_WIFI_StartServerSingleConn+0x150>)
 80028dc:	f008 fc34 	bl	800b148 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80028ec:	461a      	mov	r2, r3
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f7ff fc7c 	bl	80021ec <AT_ExecuteCommand>
 80028f4:	4603      	mov	r3, r0
 80028f6:	73fb      	strb	r3, [r7, #15]
        if (ret == ES_WIFI_STATUS_OK)
 80028f8:	7bfb      	ldrb	r3, [r7, #15]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d112      	bne.n	8002924 <ES_WIFI_StartServerSingleConn+0x134>
        {
          /* multi accept mode */
          sprintf((char*)Obj->CmdData,"P5=11\r");
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002904:	490f      	ldr	r1, [pc, #60]	; (8002944 <ES_WIFI_StartServerSingleConn+0x154>)
 8002906:	4618      	mov	r0, r3
 8002908:	f008 fc1e 	bl	800b148 <siprintf>
          ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002918:	461a      	mov	r2, r3
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f7ff fc66 	bl	80021ec <AT_ExecuteCommand>
 8002920:	4603      	mov	r3, r0
 8002922:	73fb      	strb	r3, [r7, #15]
    }
  }

  UNLOCK_WIFI();

  return ret;
 8002924:	7bfb      	ldrb	r3, [r7, #15]
}
 8002926:	4618      	mov	r0, r3
 8002928:	3710      	adds	r7, #16
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	0800c964 	.word	0x0800c964
 8002934:	0800c9ac 	.word	0x0800c9ac
 8002938:	0800c96c 	.word	0x0800c96c
 800293c:	0800c9b8 	.word	0x0800c9b8
 8002940:	0800c974 	.word	0x0800c974
 8002944:	0800c9c0 	.word	0x0800c9c0

08002948 <ES_WIFI_WaitServerConnection>:
  * @param  Obj: pointer to the module handle
  * @param  conn: pointer to the connection structure
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_WaitServerConnection(ES_WIFIObject_t *Obj, uint32_t timeout, ES_WIFI_Conn_t *conn)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b08a      	sub	sp, #40	; 0x28
 800294c:	af00      	add	r7, sp, #0
 800294e:	60f8      	str	r0, [r7, #12]
 8002950:	60b9      	str	r1, [r7, #8]
 8002952:	607a      	str	r2, [r7, #4]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_OK;
 8002954:	2300      	movs	r3, #0
 8002956:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t      t;
  uint32_t      tlast;
  uint32_t      tstart;
  char          *ptr;

  tstart = HAL_GetTick();
 800295a:	f001 faa7 	bl	8003eac <HAL_GetTick>
 800295e:	6278      	str	r0, [r7, #36]	; 0x24
  tlast = tstart + timeout;
 8002960:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	4413      	add	r3, r2
 8002966:	61fb      	str	r3, [r7, #28]
  if (tlast < tstart)
 8002968:	69fa      	ldr	r2, [r7, #28]
 800296a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296c:	429a      	cmp	r2, r3
 800296e:	d201      	bcs.n	8002974 <ES_WIFI_WaitServerConnection+0x2c>
  {
    tstart=0;
 8002970:	2300      	movs	r3, #0
 8002972:	627b      	str	r3, [r7, #36]	; 0x24

  do
  {
#if (ES_WIFI_USE_UART == 0)
    /* mandatory to flush MR async messages */
    memset(Obj->CmdData,0,sizeof(Obj->CmdData));
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800297a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800297e:	2100      	movs	r1, #0
 8002980:	4618      	mov	r0, r3
 8002982:	f008 fce9 	bl	800b358 <memset>
    sprintf((char*)Obj->CmdData,"MR\r");
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800298c:	495f      	ldr	r1, [pc, #380]	; (8002b0c <ES_WIFI_WaitServerConnection+0x1c4>)
 800298e:	4618      	mov	r0, r3
 8002990:	f008 fbda 	bl	800b148 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80029a0:	461a      	mov	r2, r3
 80029a2:	68f8      	ldr	r0, [r7, #12]
 80029a4:	f7ff fc22 	bl	80021ec <AT_ExecuteCommand>
 80029a8:	4603      	mov	r3, r0
 80029aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (ret == ES_WIFI_STATUS_OK)
 80029ae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d129      	bne.n	8002a0a <ES_WIFI_WaitServerConnection+0xc2>
    {
      if ((strstr((char *)Obj->CmdData, "[SOMA]")) && (strstr((char *)Obj->CmdData, "[EOMA]")))
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80029bc:	4954      	ldr	r1, [pc, #336]	; (8002b10 <ES_WIFI_WaitServerConnection+0x1c8>)
 80029be:	4618      	mov	r0, r3
 80029c0:	f008 fd62 	bl	800b488 <strstr>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d021      	beq.n	8002a0e <ES_WIFI_WaitServerConnection+0xc6>
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80029d0:	4950      	ldr	r1, [pc, #320]	; (8002b14 <ES_WIFI_WaitServerConnection+0x1cc>)
 80029d2:	4618      	mov	r0, r3
 80029d4:	f008 fd58 	bl	800b488 <strstr>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d017      	beq.n	8002a0e <ES_WIFI_WaitServerConnection+0xc6>
      {
        if(strstr((char *)Obj->CmdData, "Accepted"))
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80029e4:	494c      	ldr	r1, [pc, #304]	; (8002b18 <ES_WIFI_WaitServerConnection+0x1d0>)
 80029e6:	4618      	mov	r0, r3
 80029e8:	f008 fd4e 	bl	800b488 <strstr>
 80029ec:	4603      	mov	r3, r0
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d10d      	bne.n	8002a0e <ES_WIFI_WaitServerConnection+0xc6>
        {
         //printf("SOMA Accepted\n");
        }
        else if(!strstr((char *)Obj->CmdData,"[SOMA][EOMA]"))
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80029f8:	4948      	ldr	r1, [pc, #288]	; (8002b1c <ES_WIFI_WaitServerConnection+0x1d4>)
 80029fa:	4618      	mov	r0, r3
 80029fc:	f008 fd44 	bl	800b488 <strstr>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d103      	bne.n	8002a0e <ES_WIFI_WaitServerConnection+0xc6>
        {
          DEBUG("Bad MR stntax msg %s\n", Obj->CmdData);

          UNLOCK_WIFI();

          return ES_WIFI_STATUS_ERROR;
 8002a06:	2302      	movs	r3, #2
 8002a08:	e07c      	b.n	8002b04 <ES_WIFI_WaitServerConnection+0x1bc>
    {
      DEBUG("MR command failed %s\n", Obj->CmdData);

      UNLOCK_WIFI();

      return ES_WIFI_STATUS_ERROR;
 8002a0a:	2302      	movs	r3, #2
 8002a0c:	e07a      	b.n	8002b04 <ES_WIFI_WaitServerConnection+0x1bc>
    }
#endif /* (ES_WIFI_USE_UART == 0) */

    memset(Obj->CmdData, 0, sizeof(Obj->CmdData));
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002a14:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002a18:	2100      	movs	r1, #0
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f008 fc9c 	bl	800b358 <memset>
    sprintf((char*)Obj->CmdData, "P?\r");
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002a26:	493e      	ldr	r1, [pc, #248]	; (8002b20 <ES_WIFI_WaitServerConnection+0x1d8>)
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f008 fb8d 	bl	800b148 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	68f8      	ldr	r0, [r7, #12]
 8002a3e:	f7ff fbd5 	bl	80021ec <AT_ExecuteCommand>
 8002a42:	4603      	mov	r3, r0
 8002a44:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (ret == ES_WIFI_STATUS_OK)
 8002a48:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d140      	bne.n	8002ad2 <ES_WIFI_WaitServerConnection+0x18a>
    {
      if (strncmp((char *)Obj->CmdData, "\r\n0,0.0.0.0,",12)!=0)
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002a56:	220c      	movs	r2, #12
 8002a58:	4932      	ldr	r1, [pc, #200]	; (8002b24 <ES_WIFI_WaitServerConnection+0x1dc>)
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f008 fc93 	bl	800b386 <strncmp>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d037      	beq.n	8002ad6 <ES_WIFI_WaitServerConnection+0x18e>
      {
        ptr = strtok((char *)Obj->CmdData + 2, ",");
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002a6c:	3302      	adds	r3, #2
 8002a6e:	492e      	ldr	r1, [pc, #184]	; (8002b28 <ES_WIFI_WaitServerConnection+0x1e0>)
 8002a70:	4618      	mov	r0, r3
 8002a72:	f008 fcad 	bl	800b3d0 <strtok>
 8002a76:	6178      	str	r0, [r7, #20]
        ptr = strtok(0, ","); /* port */
 8002a78:	492b      	ldr	r1, [pc, #172]	; (8002b28 <ES_WIFI_WaitServerConnection+0x1e0>)
 8002a7a:	2000      	movs	r0, #0
 8002a7c:	f008 fca8 	bl	800b3d0 <strtok>
 8002a80:	6178      	str	r0, [r7, #20]
        ParseIP((char *)ptr, conn->RemoteIP, sizeof(conn->RemoteIP));
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	3308      	adds	r3, #8
 8002a86:	2204      	movs	r2, #4
 8002a88:	4619      	mov	r1, r3
 8002a8a:	6978      	ldr	r0, [r7, #20]
 8002a8c:	f7ff fa2a 	bl	8001ee4 <ParseIP>
        ptr = strtok(0, ","); /* port */
 8002a90:	4925      	ldr	r1, [pc, #148]	; (8002b28 <ES_WIFI_WaitServerConnection+0x1e0>)
 8002a92:	2000      	movs	r0, #0
 8002a94:	f008 fc9c 	bl	800b3d0 <strtok>
 8002a98:	6178      	str	r0, [r7, #20]
        conn->LocalPort=ParseNumber(ptr,0);
 8002a9a:	2100      	movs	r1, #0
 8002a9c:	6978      	ldr	r0, [r7, #20]
 8002a9e:	f7ff f9a6 	bl	8001dee <ParseNumber>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	b29a      	uxth	r2, r3
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	80da      	strh	r2, [r3, #6]
        ptr = strtok(0, ","); /* ip */
 8002aaa:	491f      	ldr	r1, [pc, #124]	; (8002b28 <ES_WIFI_WaitServerConnection+0x1e0>)
 8002aac:	2000      	movs	r0, #0
 8002aae:	f008 fc8f 	bl	800b3d0 <strtok>
 8002ab2:	6178      	str	r0, [r7, #20]
        ptr = strtok(0, ","); /* remote port */
 8002ab4:	491c      	ldr	r1, [pc, #112]	; (8002b28 <ES_WIFI_WaitServerConnection+0x1e0>)
 8002ab6:	2000      	movs	r0, #0
 8002ab8:	f008 fc8a 	bl	800b3d0 <strtok>
 8002abc:	6178      	str	r0, [r7, #20]
        conn->RemotePort=ParseNumber(ptr,0);
 8002abe:	2100      	movs	r1, #0
 8002ac0:	6978      	ldr	r0, [r7, #20]
 8002ac2:	f7ff f994 	bl	8001dee <ParseNumber>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	b29a      	uxth	r2, r3
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	809a      	strh	r2, [r3, #4]

        UNLOCK_WIFI();

        return ES_WIFI_STATUS_OK;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	e018      	b.n	8002b04 <ES_WIFI_WaitServerConnection+0x1bc>
    {
      DEBUG("P? command failed %s\n", Obj->CmdData);

      UNLOCK_WIFI();

      return ES_WIFI_STATUS_ERROR;
 8002ad2:	2302      	movs	r3, #2
 8002ad4:	e016      	b.n	8002b04 <ES_WIFI_WaitServerConnection+0x1bc>
    }

    UNLOCK_WIFI();

    Obj->fops.IO_Delay(100);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8002adc:	2064      	movs	r0, #100	; 0x64
 8002ade:	4798      	blx	r3

    LOCK_WIFI();
    t = HAL_GetTick();
 8002ae0:	f001 f9e4 	bl	8003eac <HAL_GetTick>
 8002ae4:	61b8      	str	r0, [r7, #24]
  }
  while ((timeout==0) || ((t < tlast) || (t < tstart)));
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	f43f af43 	beq.w	8002974 <ES_WIFI_WaitServerConnection+0x2c>
 8002aee:	69ba      	ldr	r2, [r7, #24]
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	429a      	cmp	r2, r3
 8002af4:	f4ff af3e 	bcc.w	8002974 <ES_WIFI_WaitServerConnection+0x2c>
 8002af8:	69ba      	ldr	r2, [r7, #24]
 8002afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afc:	429a      	cmp	r2, r3
 8002afe:	f4ff af39 	bcc.w	8002974 <ES_WIFI_WaitServerConnection+0x2c>
  return ES_WIFI_STATUS_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3728      	adds	r7, #40	; 0x28
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	0800c880 	.word	0x0800c880
 8002b10:	0800c9c8 	.word	0x0800c9c8
 8002b14:	0800c9d0 	.word	0x0800c9d0
 8002b18:	0800c9d8 	.word	0x0800c9d8
 8002b1c:	0800c9e4 	.word	0x0800c9e4
 8002b20:	0800c9f4 	.word	0x0800c9f4
 8002b24:	0800c9f8 	.word	0x0800c9f8
 8002b28:	0800c83c 	.word	0x0800c83c

08002b2c <ES_WIFI_CloseServerConnection>:
  * @param  Obj: pointer to the module handle
  * @param  socket:  server socket
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_CloseServerConnection(ES_WIFIObject_t *Obj, uint8_t socket)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b084      	sub	sp, #16
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
 8002b34:	460b      	mov	r3, r1
 8002b36:	70fb      	strb	r3, [r7, #3]
  ES_WIFI_Status_t ret;

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData, "P0=%d\r", socket);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002b3e:	78fa      	ldrb	r2, [r7, #3]
 8002b40:	4916      	ldr	r1, [pc, #88]	; (8002b9c <ES_WIFI_CloseServerConnection+0x70>)
 8002b42:	4618      	mov	r0, r3
 8002b44:	f008 fb00 	bl	800b148 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002b54:	461a      	mov	r2, r3
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f7ff fb48 	bl	80021ec <AT_ExecuteCommand>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	73fb      	strb	r3, [r7, #15]
  if (ret != ES_WIFI_STATUS_OK)
 8002b60:	7bfb      	ldrb	r3, [r7, #15]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d001      	beq.n	8002b6a <ES_WIFI_CloseServerConnection+0x3e>
  {
    DEBUG(" Can not select socket %s\n", Obj->CmdData);
    UNLOCK_WIFI();
    return ret;
 8002b66:	7bfb      	ldrb	r3, [r7, #15]
 8002b68:	e013      	b.n	8002b92 <ES_WIFI_CloseServerConnection+0x66>
  }

  sprintf((char*)Obj->CmdData, "P5=10\r");
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002b70:	490b      	ldr	r1, [pc, #44]	; (8002ba0 <ES_WIFI_CloseServerConnection+0x74>)
 8002b72:	4618      	mov	r0, r3
 8002b74:	f008 fae8 	bl	800b148 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002b84:	461a      	mov	r2, r3
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f7ff fb30 	bl	80021ec <AT_ExecuteCommand>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	73fb      	strb	r3, [r7, #15]
  {
    DEBUG(" Open next failed %s\n", Obj->CmdData);
  }

  UNLOCK_WIFI();
  return ret;
 8002b90:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3710      	adds	r7, #16
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	0800c964 	.word	0x0800c964
 8002ba0:	0800ca08 	.word	0x0800ca08

08002ba4 <ES_WIFI_SendData>:
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_SendData(ES_WIFIObject_t *Obj, uint8_t Socket,
                                  const uint8_t *pdata, uint16_t Reqlen,
                                  uint16_t *SentLen, uint32_t Timeout)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b088      	sub	sp, #32
 8002ba8:	af02      	add	r7, sp, #8
 8002baa:	60f8      	str	r0, [r7, #12]
 8002bac:	607a      	str	r2, [r7, #4]
 8002bae:	461a      	mov	r2, r3
 8002bb0:	460b      	mov	r3, r1
 8002bb2:	72fb      	strb	r3, [r7, #11]
 8002bb4:	4613      	mov	r3, r2
 8002bb6:	813b      	strh	r3, [r7, #8]
  uint32_t wkgTimeOut;

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8002bb8:	2302      	movs	r3, #2
 8002bba:	74fb      	strb	r3, [r7, #19]

  if (Timeout == 0)
 8002bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d102      	bne.n	8002bc8 <ES_WIFI_SendData+0x24>
  {
    wkgTimeOut = NET_DEFAULT_NOBLOCKING_WRITE_TIMEOUT;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	617b      	str	r3, [r7, #20]
 8002bc6:	e001      	b.n	8002bcc <ES_WIFI_SendData+0x28>
  }
  else
  {
    wkgTimeOut = Timeout;
 8002bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bca:	617b      	str	r3, [r7, #20]
  }

  LOCK_WIFI();

  if (Reqlen >= ES_WIFI_PAYLOAD_SIZE)
 8002bcc:	893b      	ldrh	r3, [r7, #8]
 8002bce:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8002bd2:	d302      	bcc.n	8002bda <ES_WIFI_SendData+0x36>
  {
    Reqlen = ES_WIFI_PAYLOAD_SIZE;
 8002bd4:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8002bd8:	813b      	strh	r3, [r7, #8]
  }

  *SentLen = Reqlen;
 8002bda:	6a3b      	ldr	r3, [r7, #32]
 8002bdc:	893a      	ldrh	r2, [r7, #8]
 8002bde:	801a      	strh	r2, [r3, #0]
  sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002be6:	7afa      	ldrb	r2, [r7, #11]
 8002be8:	492d      	ldr	r1, [pc, #180]	; (8002ca0 <ES_WIFI_SendData+0xfc>)
 8002bea:	4618      	mov	r0, r3
 8002bec:	f008 faac 	bl	800b148 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	68f8      	ldr	r0, [r7, #12]
 8002c00:	f7ff faf4 	bl	80021ec <AT_ExecuteCommand>
 8002c04:	4603      	mov	r3, r0
 8002c06:	74fb      	strb	r3, [r7, #19]
  if (ret == ES_WIFI_STATUS_OK)
 8002c08:	7cfb      	ldrb	r3, [r7, #19]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d13c      	bne.n	8002c88 <ES_WIFI_SendData+0xe4>
  {
    sprintf((char*)Obj->CmdData,"S2=%lu\r",wkgTimeOut);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002c14:	697a      	ldr	r2, [r7, #20]
 8002c16:	4923      	ldr	r1, [pc, #140]	; (8002ca4 <ES_WIFI_SendData+0x100>)
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f008 fa95 	bl	800b148 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	68f8      	ldr	r0, [r7, #12]
 8002c2e:	f7ff fadd 	bl	80021ec <AT_ExecuteCommand>
 8002c32:	4603      	mov	r3, r0
 8002c34:	74fb      	strb	r3, [r7, #19]

    if (ret == ES_WIFI_STATUS_OK)
 8002c36:	7cfb      	ldrb	r3, [r7, #19]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d125      	bne.n	8002c88 <ES_WIFI_SendData+0xe4>
    {
      sprintf((char *)Obj->CmdData, "S3=%04d\r", Reqlen);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002c42:	893a      	ldrh	r2, [r7, #8]
 8002c44:	4918      	ldr	r1, [pc, #96]	; (8002ca8 <ES_WIFI_SendData+0x104>)
 8002c46:	4618      	mov	r0, r3
 8002c48:	f008 fa7e 	bl	800b148 <siprintf>
      ret = AT_RequestSendData(Obj, Obj->CmdData, pdata, Reqlen, Obj->CmdData);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002c58:	893a      	ldrh	r2, [r7, #8]
 8002c5a:	9300      	str	r3, [sp, #0]
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	68f8      	ldr	r0, [r7, #12]
 8002c62:	f7ff fb33 	bl	80022cc <AT_RequestSendData>
 8002c66:	4603      	mov	r3, r0
 8002c68:	74fb      	strb	r3, [r7, #19]

      if (ret == ES_WIFI_STATUS_OK)
 8002c6a:	7cfb      	ldrb	r3, [r7, #19]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d10b      	bne.n	8002c88 <ES_WIFI_SendData+0xe4>
      {
        if (strstr((char *)Obj->CmdData, "-1\r\n"))
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002c76:	490d      	ldr	r1, [pc, #52]	; (8002cac <ES_WIFI_SendData+0x108>)
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f008 fc05 	bl	800b488 <strstr>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d001      	beq.n	8002c88 <ES_WIFI_SendData+0xe4>
        {
          DEBUG("Send Data detect error %s\n", (char *)Obj->CmdData);
          ret = ES_WIFI_STATUS_ERROR;
 8002c84:	2302      	movs	r3, #2
 8002c86:	74fb      	strb	r3, [r7, #19]
  else
  {
   DEBUG("P0 command failed\n");
  }

  if (ret == ES_WIFI_STATUS_ERROR)
 8002c88:	7cfb      	ldrb	r3, [r7, #19]
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	d102      	bne.n	8002c94 <ES_WIFI_SendData+0xf0>
  {
    *SentLen = 0;
 8002c8e:	6a3b      	ldr	r3, [r7, #32]
 8002c90:	2200      	movs	r2, #0
 8002c92:	801a      	strh	r2, [r3, #0]
  }

  UNLOCK_WIFI();

  return ret;
 8002c94:	7cfb      	ldrb	r3, [r7, #19]
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3718      	adds	r7, #24
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	0800c964 	.word	0x0800c964
 8002ca4:	0800ca40 	.word	0x0800ca40
 8002ca8:	0800ca48 	.word	0x0800ca48
 8002cac:	0800ca54 	.word	0x0800ca54

08002cb0 <ES_WIFI_ReceiveData>:
  * @param  len : pointer to the length of the data to be received
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_ReceiveData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen,
                                     uint16_t *Receivedlen, uint32_t Timeout)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b088      	sub	sp, #32
 8002cb4:	af02      	add	r7, sp, #8
 8002cb6:	60f8      	str	r0, [r7, #12]
 8002cb8:	607a      	str	r2, [r7, #4]
 8002cba:	461a      	mov	r2, r3
 8002cbc:	460b      	mov	r3, r1
 8002cbe:	72fb      	strb	r3, [r7, #11]
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	813b      	strh	r3, [r7, #8]
  uint32_t wkgTimeOut;

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8002cc4:	2302      	movs	r3, #2
 8002cc6:	74fb      	strb	r3, [r7, #19]

  if (Timeout == 0)
 8002cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d102      	bne.n	8002cd4 <ES_WIFI_ReceiveData+0x24>
  {
    wkgTimeOut = NET_DEFAULT_NOBLOCKING_READ_TIMEOUT;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	617b      	str	r3, [r7, #20]
 8002cd2:	e001      	b.n	8002cd8 <ES_WIFI_ReceiveData+0x28>
  }
  else
  {
    wkgTimeOut = Timeout;
 8002cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd6:	617b      	str	r3, [r7, #20]
  }

  LOCK_WIFI();

  if (Reqlen <= ES_WIFI_PAYLOAD_SIZE)
 8002cd8:	893b      	ldrh	r3, [r7, #8]
 8002cda:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8002cde:	d862      	bhi.n	8002da6 <ES_WIFI_ReceiveData+0xf6>
  {
    sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002ce6:	7afa      	ldrb	r2, [r7, #11]
 8002ce8:	4931      	ldr	r1, [pc, #196]	; (8002db0 <ES_WIFI_ReceiveData+0x100>)
 8002cea:	4618      	mov	r0, r3
 8002cec:	f008 fa2c 	bl	800b148 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002cfc:	461a      	mov	r2, r3
 8002cfe:	68f8      	ldr	r0, [r7, #12]
 8002d00:	f7ff fa74 	bl	80021ec <AT_ExecuteCommand>
 8002d04:	4603      	mov	r3, r0
 8002d06:	74fb      	strb	r3, [r7, #19]

    if (ret == ES_WIFI_STATUS_OK)
 8002d08:	7cfb      	ldrb	r3, [r7, #19]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d146      	bne.n	8002d9c <ES_WIFI_ReceiveData+0xec>
    {
      sprintf((char*)Obj->CmdData,"R1=%d\r", Reqlen);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002d14:	893a      	ldrh	r2, [r7, #8]
 8002d16:	4927      	ldr	r1, [pc, #156]	; (8002db4 <ES_WIFI_ReceiveData+0x104>)
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f008 fa15 	bl	800b148 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002d2a:	461a      	mov	r2, r3
 8002d2c:	68f8      	ldr	r0, [r7, #12]
 8002d2e:	f7ff fa5d 	bl	80021ec <AT_ExecuteCommand>
 8002d32:	4603      	mov	r3, r0
 8002d34:	74fb      	strb	r3, [r7, #19]
      if (ret == ES_WIFI_STATUS_OK)
 8002d36:	7cfb      	ldrb	r3, [r7, #19]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d12b      	bne.n	8002d94 <ES_WIFI_ReceiveData+0xe4>
      {
        sprintf((char*)Obj->CmdData,"R2=%lu\r", wkgTimeOut);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002d42:	697a      	ldr	r2, [r7, #20]
 8002d44:	491c      	ldr	r1, [pc, #112]	; (8002db8 <ES_WIFI_ReceiveData+0x108>)
 8002d46:	4618      	mov	r0, r3
 8002d48:	f008 f9fe 	bl	800b148 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002d58:	461a      	mov	r2, r3
 8002d5a:	68f8      	ldr	r0, [r7, #12]
 8002d5c:	f7ff fa46 	bl	80021ec <AT_ExecuteCommand>
 8002d60:	4603      	mov	r3, r0
 8002d62:	74fb      	strb	r3, [r7, #19]
        if (ret == ES_WIFI_STATUS_OK)
 8002d64:	7cfb      	ldrb	r3, [r7, #19]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d11d      	bne.n	8002da6 <ES_WIFI_ReceiveData+0xf6>
        {
          sprintf((char*)Obj->CmdData,"R0\r");
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002d70:	4912      	ldr	r1, [pc, #72]	; (8002dbc <ES_WIFI_ReceiveData+0x10c>)
 8002d72:	4618      	mov	r0, r3
 8002d74:	f008 f9e8 	bl	800b148 <siprintf>
          ret = AT_RequestReceiveData(Obj, Obj->CmdData, (char *)pdata, Reqlen, Receivedlen);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8002d7e:	893a      	ldrh	r2, [r7, #8]
 8002d80:	6a3b      	ldr	r3, [r7, #32]
 8002d82:	9300      	str	r3, [sp, #0]
 8002d84:	4613      	mov	r3, r2
 8002d86:	687a      	ldr	r2, [r7, #4]
 8002d88:	68f8      	ldr	r0, [r7, #12]
 8002d8a:	f7ff fb1f 	bl	80023cc <AT_RequestReceiveData>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	74fb      	strb	r3, [r7, #19]
 8002d92:	e008      	b.n	8002da6 <ES_WIFI_ReceiveData+0xf6>
        }
      }
      else
      {
        DEBUG("Setting requested len failed\n");
        *Receivedlen = 0;
 8002d94:	6a3b      	ldr	r3, [r7, #32]
 8002d96:	2200      	movs	r2, #0
 8002d98:	801a      	strh	r2, [r3, #0]
 8002d9a:	e004      	b.n	8002da6 <ES_WIFI_ReceiveData+0xf6>
      }
    }
    else
    {
      DEBUG("Setting socket for read failed\n");
      issue15++;
 8002d9c:	4b08      	ldr	r3, [pc, #32]	; (8002dc0 <ES_WIFI_ReceiveData+0x110>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	3301      	adds	r3, #1
 8002da2:	4a07      	ldr	r2, [pc, #28]	; (8002dc0 <ES_WIFI_ReceiveData+0x110>)
 8002da4:	6013      	str	r3, [r2, #0]
    }
  }

  UNLOCK_WIFI();

  return ret;
 8002da6:	7cfb      	ldrb	r3, [r7, #19]
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3718      	adds	r7, #24
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}
 8002db0:	0800c964 	.word	0x0800c964
 8002db4:	0800ca5c 	.word	0x0800ca5c
 8002db8:	0800ca64 	.word	0x0800ca64
 8002dbc:	0800ca6c 	.word	0x0800ca6c
 8002dc0:	20005884 	.word	0x20005884

08002dc4 <SPI_WIFI_MspInit>:
  * @brief  Initialize SPI MSP
  * @param  hspi: SPI handle
  * @retval None
  */
void SPI_WIFI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b08c      	sub	sp, #48	; 0x30
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_Init;

  __HAL_RCC_SPI3_CLK_ENABLE();
 8002dcc:	4b57      	ldr	r3, [pc, #348]	; (8002f2c <SPI_WIFI_MspInit+0x168>)
 8002dce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dd0:	4a56      	ldr	r2, [pc, #344]	; (8002f2c <SPI_WIFI_MspInit+0x168>)
 8002dd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002dd6:	6593      	str	r3, [r2, #88]	; 0x58
 8002dd8:	4b54      	ldr	r3, [pc, #336]	; (8002f2c <SPI_WIFI_MspInit+0x168>)
 8002dda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ddc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002de0:	61bb      	str	r3, [r7, #24]
 8002de2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002de4:	4b51      	ldr	r3, [pc, #324]	; (8002f2c <SPI_WIFI_MspInit+0x168>)
 8002de6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002de8:	4a50      	ldr	r2, [pc, #320]	; (8002f2c <SPI_WIFI_MspInit+0x168>)
 8002dea:	f043 0302 	orr.w	r3, r3, #2
 8002dee:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002df0:	4b4e      	ldr	r3, [pc, #312]	; (8002f2c <SPI_WIFI_MspInit+0x168>)
 8002df2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002df4:	f003 0302 	and.w	r3, r3, #2
 8002df8:	617b      	str	r3, [r7, #20]
 8002dfa:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002dfc:	4b4b      	ldr	r3, [pc, #300]	; (8002f2c <SPI_WIFI_MspInit+0x168>)
 8002dfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e00:	4a4a      	ldr	r2, [pc, #296]	; (8002f2c <SPI_WIFI_MspInit+0x168>)
 8002e02:	f043 0304 	orr.w	r3, r3, #4
 8002e06:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e08:	4b48      	ldr	r3, [pc, #288]	; (8002f2c <SPI_WIFI_MspInit+0x168>)
 8002e0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e0c:	f003 0304 	and.w	r3, r3, #4
 8002e10:	613b      	str	r3, [r7, #16]
 8002e12:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002e14:	4b45      	ldr	r3, [pc, #276]	; (8002f2c <SPI_WIFI_MspInit+0x168>)
 8002e16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e18:	4a44      	ldr	r2, [pc, #272]	; (8002f2c <SPI_WIFI_MspInit+0x168>)
 8002e1a:	f043 0310 	orr.w	r3, r3, #16
 8002e1e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e20:	4b42      	ldr	r3, [pc, #264]	; (8002f2c <SPI_WIFI_MspInit+0x168>)
 8002e22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e24:	f003 0310 	and.w	r3, r3, #16
 8002e28:	60fb      	str	r3, [r7, #12]
 8002e2a:	68fb      	ldr	r3, [r7, #12]

  /* configure Wake up pin */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13, GPIO_PIN_RESET );
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002e32:	483f      	ldr	r0, [pc, #252]	; (8002f30 <SPI_WIFI_MspInit+0x16c>)
 8002e34:	f002 fb08 	bl	8005448 <HAL_GPIO_WritePin>
  GPIO_Init.Pin       = GPIO_PIN_13;
 8002e38:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e3c:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8002e42:	2300      	movs	r3, #0
 8002e44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8002e46:	2300      	movs	r3, #0
 8002e48:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_Init );
 8002e4a:	f107 031c 	add.w	r3, r7, #28
 8002e4e:	4619      	mov	r1, r3
 8002e50:	4837      	ldr	r0, [pc, #220]	; (8002f30 <SPI_WIFI_MspInit+0x16c>)
 8002e52:	f002 f94f 	bl	80050f4 <HAL_GPIO_Init>

  /* configure Data ready pin */
  GPIO_Init.Pin       = GPIO_PIN_1;
 8002e56:	2302      	movs	r3, #2
 8002e58:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_IT_RISING;
 8002e5a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002e5e:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8002e60:	2300      	movs	r3, #0
 8002e62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8002e64:	2300      	movs	r3, #0
 8002e66:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 8002e68:	f107 031c 	add.w	r3, r7, #28
 8002e6c:	4619      	mov	r1, r3
 8002e6e:	4831      	ldr	r0, [pc, #196]	; (8002f34 <SPI_WIFI_MspInit+0x170>)
 8002e70:	f002 f940 	bl	80050f4 <HAL_GPIO_Init>

  /* configure Reset pin */
  GPIO_Init.Pin       = GPIO_PIN_8;
 8002e74:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e78:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8002e82:	2300      	movs	r3, #0
 8002e84:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = 0;
 8002e86:	2300      	movs	r3, #0
 8002e88:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 8002e8a:	f107 031c 	add.w	r3, r7, #28
 8002e8e:	4619      	mov	r1, r3
 8002e90:	4828      	ldr	r0, [pc, #160]	; (8002f34 <SPI_WIFI_MspInit+0x170>)
 8002e92:	f002 f92f 	bl	80050f4 <HAL_GPIO_Init>

  /* configure SPI NSS pin pin */
  HAL_GPIO_WritePin( GPIOE , GPIO_PIN_0, GPIO_PIN_SET );
 8002e96:	2201      	movs	r2, #1
 8002e98:	2101      	movs	r1, #1
 8002e9a:	4826      	ldr	r0, [pc, #152]	; (8002f34 <SPI_WIFI_MspInit+0x170>)
 8002e9c:	f002 fad4 	bl	8005448 <HAL_GPIO_WritePin>
  GPIO_Init.Pin       =  GPIO_PIN_0;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8002eac:	2301      	movs	r3, #1
 8002eae:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init( GPIOE, &GPIO_Init );
 8002eb0:	f107 031c 	add.w	r3, r7, #28
 8002eb4:	4619      	mov	r1, r3
 8002eb6:	481f      	ldr	r0, [pc, #124]	; (8002f34 <SPI_WIFI_MspInit+0x170>)
 8002eb8:	f002 f91c 	bl	80050f4 <HAL_GPIO_Init>

  /* configure SPI CLK pin */
  GPIO_Init.Pin       =  GPIO_PIN_10;
 8002ebc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ec0:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8002ec2:	2302      	movs	r3, #2
 8002ec4:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8002ece:	2306      	movs	r3, #6
 8002ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_Init );
 8002ed2:	f107 031c 	add.w	r3, r7, #28
 8002ed6:	4619      	mov	r1, r3
 8002ed8:	4817      	ldr	r0, [pc, #92]	; (8002f38 <SPI_WIFI_MspInit+0x174>)
 8002eda:	f002 f90b 	bl	80050f4 <HAL_GPIO_Init>

  /* configure SPI MOSI pin */
  GPIO_Init.Pin       = GPIO_PIN_12;
 8002ede:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ee2:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8002ee4:	2302      	movs	r3, #2
 8002ee6:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8002eec:	2301      	movs	r3, #1
 8002eee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8002ef0:	2306      	movs	r3, #6
 8002ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 8002ef4:	f107 031c 	add.w	r3, r7, #28
 8002ef8:	4619      	mov	r1, r3
 8002efa:	480f      	ldr	r0, [pc, #60]	; (8002f38 <SPI_WIFI_MspInit+0x174>)
 8002efc:	f002 f8fa 	bl	80050f4 <HAL_GPIO_Init>

  /* configure SPI MISO pin */
  GPIO_Init.Pin       = GPIO_PIN_11;
 8002f00:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002f04:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8002f06:	2302      	movs	r3, #2
 8002f08:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_PULLUP;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8002f12:	2306      	movs	r3, #6
 8002f14:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init( GPIOC,&GPIO_Init );
 8002f16:	f107 031c 	add.w	r3, r7, #28
 8002f1a:	4619      	mov	r1, r3
 8002f1c:	4806      	ldr	r0, [pc, #24]	; (8002f38 <SPI_WIFI_MspInit+0x174>)
 8002f1e:	f002 f8e9 	bl	80050f4 <HAL_GPIO_Init>
}
 8002f22:	bf00      	nop
 8002f24:	3730      	adds	r7, #48	; 0x30
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	40021000 	.word	0x40021000
 8002f30:	48000400 	.word	0x48000400
 8002f34:	48001000 	.word	0x48001000
 8002f38:	48000800 	.word	0x48000800

08002f3c <SPI_WIFI_Init>:
  * @brief  Initialize the SPI3
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_Init(uint16_t mode)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b084      	sub	sp, #16
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	4603      	mov	r3, r0
 8002f44:	80fb      	strh	r3, [r7, #6]
  int8_t  rc=0;
 8002f46:	2300      	movs	r3, #0
 8002f48:	73fb      	strb	r3, [r7, #15]

  if (mode == ES_WIFI_INIT)
 8002f4a:	88fb      	ldrh	r3, [r7, #6]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d145      	bne.n	8002fdc <SPI_WIFI_Init+0xa0>
  {
    hspi.Instance               = SPI3;
 8002f50:	4b27      	ldr	r3, [pc, #156]	; (8002ff0 <SPI_WIFI_Init+0xb4>)
 8002f52:	4a28      	ldr	r2, [pc, #160]	; (8002ff4 <SPI_WIFI_Init+0xb8>)
 8002f54:	601a      	str	r2, [r3, #0]
    SPI_WIFI_MspInit(&hspi);
 8002f56:	4826      	ldr	r0, [pc, #152]	; (8002ff0 <SPI_WIFI_Init+0xb4>)
 8002f58:	f7ff ff34 	bl	8002dc4 <SPI_WIFI_MspInit>

    hspi.Init.Mode              = SPI_MODE_MASTER;
 8002f5c:	4b24      	ldr	r3, [pc, #144]	; (8002ff0 <SPI_WIFI_Init+0xb4>)
 8002f5e:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002f62:	605a      	str	r2, [r3, #4]
    hspi.Init.Direction         = SPI_DIRECTION_2LINES;
 8002f64:	4b22      	ldr	r3, [pc, #136]	; (8002ff0 <SPI_WIFI_Init+0xb4>)
 8002f66:	2200      	movs	r2, #0
 8002f68:	609a      	str	r2, [r3, #8]
    hspi.Init.DataSize          = SPI_DATASIZE_16BIT;
 8002f6a:	4b21      	ldr	r3, [pc, #132]	; (8002ff0 <SPI_WIFI_Init+0xb4>)
 8002f6c:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8002f70:	60da      	str	r2, [r3, #12]
    hspi.Init.CLKPolarity       = SPI_POLARITY_LOW;
 8002f72:	4b1f      	ldr	r3, [pc, #124]	; (8002ff0 <SPI_WIFI_Init+0xb4>)
 8002f74:	2200      	movs	r2, #0
 8002f76:	611a      	str	r2, [r3, #16]
    hspi.Init.CLKPhase          = SPI_PHASE_1EDGE;
 8002f78:	4b1d      	ldr	r3, [pc, #116]	; (8002ff0 <SPI_WIFI_Init+0xb4>)
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	615a      	str	r2, [r3, #20]
    hspi.Init.NSS               = SPI_NSS_SOFT;
 8002f7e:	4b1c      	ldr	r3, [pc, #112]	; (8002ff0 <SPI_WIFI_Init+0xb4>)
 8002f80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f84:	619a      	str	r2, [r3, #24]
    hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8; /* 80/8= 10MHz (Inventek WIFI module supports up to 20MHz)*/
 8002f86:	4b1a      	ldr	r3, [pc, #104]	; (8002ff0 <SPI_WIFI_Init+0xb4>)
 8002f88:	2210      	movs	r2, #16
 8002f8a:	61da      	str	r2, [r3, #28]
    hspi.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 8002f8c:	4b18      	ldr	r3, [pc, #96]	; (8002ff0 <SPI_WIFI_Init+0xb4>)
 8002f8e:	2200      	movs	r2, #0
 8002f90:	621a      	str	r2, [r3, #32]
    hspi.Init.TIMode            = SPI_TIMODE_DISABLE;
 8002f92:	4b17      	ldr	r3, [pc, #92]	; (8002ff0 <SPI_WIFI_Init+0xb4>)
 8002f94:	2200      	movs	r2, #0
 8002f96:	625a      	str	r2, [r3, #36]	; 0x24
    hspi.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
 8002f98:	4b15      	ldr	r3, [pc, #84]	; (8002ff0 <SPI_WIFI_Init+0xb4>)
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	629a      	str	r2, [r3, #40]	; 0x28
    hspi.Init.CRCPolynomial     = 0;
 8002f9e:	4b14      	ldr	r3, [pc, #80]	; (8002ff0 <SPI_WIFI_Init+0xb4>)
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	62da      	str	r2, [r3, #44]	; 0x2c

    if(HAL_SPI_Init( &hspi ) != HAL_OK)
 8002fa4:	4812      	ldr	r0, [pc, #72]	; (8002ff0 <SPI_WIFI_Init+0xb4>)
 8002fa6:	f004 fc9f 	bl	80078e8 <HAL_SPI_Init>
 8002faa:	4603      	mov	r3, r0
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d002      	beq.n	8002fb6 <SPI_WIFI_Init+0x7a>
    {
      return -1;
 8002fb0:	f04f 33ff 	mov.w	r3, #4294967295
 8002fb4:	e018      	b.n	8002fe8 <SPI_WIFI_Init+0xac>
    }

     /* Enable Interrupt for Data Ready pin , GPIO_PIN1 */
     HAL_NVIC_SetPriority((IRQn_Type)EXTI1_IRQn, SPI_INTERFACE_PRIO, 0x00);
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	2100      	movs	r1, #0
 8002fba:	2007      	movs	r0, #7
 8002fbc:	f001 f881 	bl	80040c2 <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)EXTI1_IRQn);
 8002fc0:	2007      	movs	r0, #7
 8002fc2:	f001 f89a 	bl	80040fa <HAL_NVIC_EnableIRQ>

     /* Enable Interrupt for SPI tx and rx */
     HAL_NVIC_SetPriority((IRQn_Type)SPI3_IRQn, SPI_INTERFACE_PRIO, 0);
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	2100      	movs	r1, #0
 8002fca:	2033      	movs	r0, #51	; 0x33
 8002fcc:	f001 f879 	bl	80040c2 <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)SPI3_IRQn);
 8002fd0:	2033      	movs	r0, #51	; 0x33
 8002fd2:	f001 f892 	bl	80040fa <HAL_NVIC_EnableIRQ>
    SEM_WAIT(cmddata_rdy_rising_sem, 1);
    SEM_WAIT(spi_rx_sem, 1);
    SEM_WAIT(spi_tx_sem, 1);
#endif /* WIFI_USE_CMSIS_OS */
    /* first call used for calibration */
    SPI_WIFI_DelayUs(10);
 8002fd6:	200a      	movs	r0, #10
 8002fd8:	f000 f9fe 	bl	80033d8 <SPI_WIFI_DelayUs>
  }

  rc = SPI_WIFI_ResetModule();
 8002fdc:	f000 f80c 	bl	8002ff8 <SPI_WIFI_ResetModule>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	73fb      	strb	r3, [r7, #15]

  return rc;
 8002fe4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	3710      	adds	r7, #16
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}
 8002ff0:	20005888 	.word	0x20005888
 8002ff4:	40003c00 	.word	0x40003c00

08002ff8 <SPI_WIFI_ResetModule>:


int8_t SPI_WIFI_ResetModule(void)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b084      	sub	sp, #16
 8002ffc:	af00      	add	r7, sp, #0
  uint32_t tickstart = HAL_GetTick();
 8002ffe:	f000 ff55 	bl	8003eac <HAL_GetTick>
 8003002:	60b8      	str	r0, [r7, #8]
  uint8_t Prompt[6];
  uint8_t count = 0;
 8003004:	2300      	movs	r3, #0
 8003006:	73fb      	strb	r3, [r7, #15]
  HAL_StatusTypeDef  Status;

  WIFI_RESET_MODULE();
 8003008:	2200      	movs	r2, #0
 800300a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800300e:	4830      	ldr	r0, [pc, #192]	; (80030d0 <SPI_WIFI_ResetModule+0xd8>)
 8003010:	f002 fa1a 	bl	8005448 <HAL_GPIO_WritePin>
 8003014:	200a      	movs	r0, #10
 8003016:	f000 ff55 	bl	8003ec4 <HAL_Delay>
 800301a:	2201      	movs	r2, #1
 800301c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003020:	482b      	ldr	r0, [pc, #172]	; (80030d0 <SPI_WIFI_ResetModule+0xd8>)
 8003022:	f002 fa11 	bl	8005448 <HAL_GPIO_WritePin>
 8003026:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800302a:	f000 ff4b 	bl	8003ec4 <HAL_Delay>
  WIFI_ENABLE_NSS();
 800302e:	2200      	movs	r2, #0
 8003030:	2101      	movs	r1, #1
 8003032:	4827      	ldr	r0, [pc, #156]	; (80030d0 <SPI_WIFI_ResetModule+0xd8>)
 8003034:	f002 fa08 	bl	8005448 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8003038:	200f      	movs	r0, #15
 800303a:	f000 f9cd 	bl	80033d8 <SPI_WIFI_DelayUs>

  while (WIFI_IS_CMDDATA_READY())
 800303e:	e020      	b.n	8003082 <SPI_WIFI_ResetModule+0x8a>
  {
    Status = HAL_SPI_Receive(&hspi , &Prompt[count], 1, 0xFFFF);
 8003040:	7bfb      	ldrb	r3, [r7, #15]
 8003042:	463a      	mov	r2, r7
 8003044:	18d1      	adds	r1, r2, r3
 8003046:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800304a:	2201      	movs	r2, #1
 800304c:	4821      	ldr	r0, [pc, #132]	; (80030d4 <SPI_WIFI_ResetModule+0xdc>)
 800304e:	f004 fd53 	bl	8007af8 <HAL_SPI_Receive>
 8003052:	4603      	mov	r3, r0
 8003054:	71fb      	strb	r3, [r7, #7]
    count += 2;
 8003056:	7bfb      	ldrb	r3, [r7, #15]
 8003058:	3302      	adds	r3, #2
 800305a:	73fb      	strb	r3, [r7, #15]
    if (((HAL_GetTick() - tickstart) > 0xFFFF) || (Status != HAL_OK))
 800305c:	f000 ff26 	bl	8003eac <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800306a:	d202      	bcs.n	8003072 <SPI_WIFI_ResetModule+0x7a>
 800306c:	79fb      	ldrb	r3, [r7, #7]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d007      	beq.n	8003082 <SPI_WIFI_ResetModule+0x8a>
    {
      WIFI_DISABLE_NSS();
 8003072:	2201      	movs	r2, #1
 8003074:	2101      	movs	r1, #1
 8003076:	4816      	ldr	r0, [pc, #88]	; (80030d0 <SPI_WIFI_ResetModule+0xd8>)
 8003078:	f002 f9e6 	bl	8005448 <HAL_GPIO_WritePin>
      return -1;
 800307c:	f04f 33ff 	mov.w	r3, #4294967295
 8003080:	e021      	b.n	80030c6 <SPI_WIFI_ResetModule+0xce>
  while (WIFI_IS_CMDDATA_READY())
 8003082:	2102      	movs	r1, #2
 8003084:	4812      	ldr	r0, [pc, #72]	; (80030d0 <SPI_WIFI_ResetModule+0xd8>)
 8003086:	f002 f9c7 	bl	8005418 <HAL_GPIO_ReadPin>
 800308a:	4603      	mov	r3, r0
 800308c:	2b01      	cmp	r3, #1
 800308e:	d0d7      	beq.n	8003040 <SPI_WIFI_ResetModule+0x48>
    }
  }

  WIFI_DISABLE_NSS();
 8003090:	2201      	movs	r2, #1
 8003092:	2101      	movs	r1, #1
 8003094:	480e      	ldr	r0, [pc, #56]	; (80030d0 <SPI_WIFI_ResetModule+0xd8>)
 8003096:	f002 f9d7 	bl	8005448 <HAL_GPIO_WritePin>

  if ((Prompt[0] != 0x15) || (Prompt[1] != 0x15) || (Prompt[2] != '\r') ||
 800309a:	783b      	ldrb	r3, [r7, #0]
 800309c:	2b15      	cmp	r3, #21
 800309e:	d10e      	bne.n	80030be <SPI_WIFI_ResetModule+0xc6>
 80030a0:	787b      	ldrb	r3, [r7, #1]
 80030a2:	2b15      	cmp	r3, #21
 80030a4:	d10b      	bne.n	80030be <SPI_WIFI_ResetModule+0xc6>
 80030a6:	78bb      	ldrb	r3, [r7, #2]
 80030a8:	2b0d      	cmp	r3, #13
 80030aa:	d108      	bne.n	80030be <SPI_WIFI_ResetModule+0xc6>
      (Prompt[3] != '\n') || (Prompt[4] != '>') || (Prompt[5] != ' '))
 80030ac:	78fb      	ldrb	r3, [r7, #3]
  if ((Prompt[0] != 0x15) || (Prompt[1] != 0x15) || (Prompt[2] != '\r') ||
 80030ae:	2b0a      	cmp	r3, #10
 80030b0:	d105      	bne.n	80030be <SPI_WIFI_ResetModule+0xc6>
      (Prompt[3] != '\n') || (Prompt[4] != '>') || (Prompt[5] != ' '))
 80030b2:	793b      	ldrb	r3, [r7, #4]
 80030b4:	2b3e      	cmp	r3, #62	; 0x3e
 80030b6:	d102      	bne.n	80030be <SPI_WIFI_ResetModule+0xc6>
 80030b8:	797b      	ldrb	r3, [r7, #5]
 80030ba:	2b20      	cmp	r3, #32
 80030bc:	d002      	beq.n	80030c4 <SPI_WIFI_ResetModule+0xcc>
  {
    return -1;
 80030be:	f04f 33ff 	mov.w	r3, #4294967295
 80030c2:	e000      	b.n	80030c6 <SPI_WIFI_ResetModule+0xce>
  }
  return 0;
 80030c4:	2300      	movs	r3, #0
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3710      	adds	r7, #16
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	48001000 	.word	0x48001000
 80030d4:	20005888 	.word	0x20005888

080030d8 <SPI_WIFI_DeInit>:
  * @brief  DeInitialize the SPI
  * @param  None
  * @retval 0
  */
int8_t SPI_WIFI_DeInit(void)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	af00      	add	r7, sp, #0
  HAL_SPI_DeInit( &hspi );
 80030dc:	4802      	ldr	r0, [pc, #8]	; (80030e8 <SPI_WIFI_DeInit+0x10>)
 80030de:	f004 fccf 	bl	8007a80 <HAL_SPI_DeInit>
  osMutexDelete(es_wifi_mutex);
  osSemaphoreDelete(spi_tx_sem);
  osSemaphoreDelete(spi_rx_sem);
  osSemaphoreDelete(cmddata_rdy_rising_sem);
#endif /* WIFI_USE_CMSIS_OS */
  return 0;
 80030e2:	2300      	movs	r3, #0
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	bd80      	pop	{r7, pc}
 80030e8:	20005888 	.word	0x20005888

080030ec <wait_cmddata_rdy_high>:
  * @param  len : Data length
  * @param  timeout : send timeout in mS
  * @retval Length of received data (payload)
  */
static int wait_cmddata_rdy_high(int timeout)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b084      	sub	sp, #16
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  int tickstart = HAL_GetTick();
 80030f4:	f000 feda 	bl	8003eac <HAL_GetTick>
 80030f8:	4603      	mov	r3, r0
 80030fa:	60fb      	str	r3, [r7, #12]
  while (WIFI_IS_CMDDATA_READY() == 0)
 80030fc:	e00a      	b.n	8003114 <wait_cmddata_rdy_high+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 80030fe:	f000 fed5 	bl	8003eac <HAL_GetTick>
 8003102:	4602      	mov	r2, r0
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	1ad2      	subs	r2, r2, r3
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	429a      	cmp	r2, r3
 800310c:	d902      	bls.n	8003114 <wait_cmddata_rdy_high+0x28>
    {
      return -1;
 800310e:	f04f 33ff 	mov.w	r3, #4294967295
 8003112:	e007      	b.n	8003124 <wait_cmddata_rdy_high+0x38>
  while (WIFI_IS_CMDDATA_READY() == 0)
 8003114:	2102      	movs	r1, #2
 8003116:	4805      	ldr	r0, [pc, #20]	; (800312c <wait_cmddata_rdy_high+0x40>)
 8003118:	f002 f97e 	bl	8005418 <HAL_GPIO_ReadPin>
 800311c:	4603      	mov	r3, r0
 800311e:	2b01      	cmp	r3, #1
 8003120:	d1ed      	bne.n	80030fe <wait_cmddata_rdy_high+0x12>
    }
  }
  return 0;
 8003122:	2300      	movs	r3, #0
}
 8003124:	4618      	mov	r0, r3
 8003126:	3710      	adds	r7, #16
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}
 800312c:	48001000 	.word	0x48001000

08003130 <wait_cmddata_rdy_rising_event>:


static int wait_cmddata_rdy_rising_event(int timeout)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b084      	sub	sp, #16
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(cmddata_rdy_rising_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 8003138:	f000 feb8 	bl	8003eac <HAL_GetTick>
 800313c:	4603      	mov	r3, r0
 800313e:	60fb      	str	r3, [r7, #12]
  while (cmddata_rdy_rising_event == 1)
 8003140:	e00a      	b.n	8003158 <wait_cmddata_rdy_rising_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8003142:	f000 feb3 	bl	8003eac <HAL_GetTick>
 8003146:	4602      	mov	r2, r0
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	1ad2      	subs	r2, r2, r3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	429a      	cmp	r2, r3
 8003150:	d902      	bls.n	8003158 <wait_cmddata_rdy_rising_event+0x28>
    {
      return -1;
 8003152:	f04f 33ff 	mov.w	r3, #4294967295
 8003156:	e004      	b.n	8003162 <wait_cmddata_rdy_rising_event+0x32>
  while (cmddata_rdy_rising_event == 1)
 8003158:	4b04      	ldr	r3, [pc, #16]	; (800316c <wait_cmddata_rdy_rising_event+0x3c>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	2b01      	cmp	r3, #1
 800315e:	d0f0      	beq.n	8003142 <wait_cmddata_rdy_rising_event+0x12>
    }
  }
  return 0;
 8003160:	2300      	movs	r3, #0
#endif /* SEM_WAIT */
}
 8003162:	4618      	mov	r0, r3
 8003164:	3710      	adds	r7, #16
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	200058f4 	.word	0x200058f4

08003170 <wait_spi_rx_event>:


static int wait_spi_rx_event(int timeout)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b084      	sub	sp, #16
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_rx_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 8003178:	f000 fe98 	bl	8003eac <HAL_GetTick>
 800317c:	4603      	mov	r3, r0
 800317e:	60fb      	str	r3, [r7, #12]
  while (spi_rx_event == 1)
 8003180:	e00a      	b.n	8003198 <wait_spi_rx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8003182:	f000 fe93 	bl	8003eac <HAL_GetTick>
 8003186:	4602      	mov	r2, r0
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	1ad2      	subs	r2, r2, r3
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	429a      	cmp	r2, r3
 8003190:	d902      	bls.n	8003198 <wait_spi_rx_event+0x28>
    {
      return -1;
 8003192:	f04f 33ff 	mov.w	r3, #4294967295
 8003196:	e004      	b.n	80031a2 <wait_spi_rx_event+0x32>
  while (spi_rx_event == 1)
 8003198:	4b04      	ldr	r3, [pc, #16]	; (80031ac <wait_spi_rx_event+0x3c>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	2b01      	cmp	r3, #1
 800319e:	d0f0      	beq.n	8003182 <wait_spi_rx_event+0x12>
    }
  }
  return 0;
 80031a0:	2300      	movs	r3, #0
#endif /* SEM_WAIT */
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3710      	adds	r7, #16
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop
 80031ac:	200058ec 	.word	0x200058ec

080031b0 <wait_spi_tx_event>:


static int wait_spi_tx_event(int timeout)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b084      	sub	sp, #16
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_tx_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 80031b8:	f000 fe78 	bl	8003eac <HAL_GetTick>
 80031bc:	4603      	mov	r3, r0
 80031be:	60fb      	str	r3, [r7, #12]
  while (spi_tx_event == 1)
 80031c0:	e00a      	b.n	80031d8 <wait_spi_tx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 80031c2:	f000 fe73 	bl	8003eac <HAL_GetTick>
 80031c6:	4602      	mov	r2, r0
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	1ad2      	subs	r2, r2, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d902      	bls.n	80031d8 <wait_spi_tx_event+0x28>
    {
      return -1;
 80031d2:	f04f 33ff 	mov.w	r3, #4294967295
 80031d6:	e004      	b.n	80031e2 <wait_spi_tx_event+0x32>
  while (spi_tx_event == 1)
 80031d8:	4b04      	ldr	r3, [pc, #16]	; (80031ec <wait_spi_tx_event+0x3c>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d0f0      	beq.n	80031c2 <wait_spi_tx_event+0x12>
    }
  }
  return 0;
 80031e0:	2300      	movs	r3, #0
#endif /* SEM_WAIT */
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3710      	adds	r7, #16
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	bf00      	nop
 80031ec:	200058f0 	.word	0x200058f0

080031f0 <SPI_WIFI_ReceiveData>:


int16_t SPI_WIFI_ReceiveData(uint8_t *pData, uint16_t len, uint32_t timeout)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b086      	sub	sp, #24
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	60f8      	str	r0, [r7, #12]
 80031f8:	460b      	mov	r3, r1
 80031fa:	607a      	str	r2, [r7, #4]
 80031fc:	817b      	strh	r3, [r7, #10]
  int16_t length = 0;
 80031fe:	2300      	movs	r3, #0
 8003200:	82fb      	strh	r3, [r7, #22]
  uint8_t tmp[2];

  WIFI_DISABLE_NSS();
 8003202:	2201      	movs	r2, #1
 8003204:	2101      	movs	r1, #1
 8003206:	4834      	ldr	r0, [pc, #208]	; (80032d8 <SPI_WIFI_ReceiveData+0xe8>)
 8003208:	f002 f91e 	bl	8005448 <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  SPI_WIFI_DelayUs(3);
 800320c:	2003      	movs	r0, #3
 800320e:	f000 f8e3 	bl	80033d8 <SPI_WIFI_DelayUs>

  if (wait_cmddata_rdy_rising_event(timeout) < 0)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	4618      	mov	r0, r3
 8003216:	f7ff ff8b 	bl	8003130 <wait_cmddata_rdy_rising_event>
 800321a:	4603      	mov	r3, r0
 800321c:	2b00      	cmp	r3, #0
 800321e:	da02      	bge.n	8003226 <SPI_WIFI_ReceiveData+0x36>
  {
      return ES_WIFI_ERROR_WAITING_DRDY_FALLING;
 8003220:	f06f 0302 	mvn.w	r3, #2
 8003224:	e054      	b.n	80032d0 <SPI_WIFI_ReceiveData+0xe0>
  }

  LOCK_SPI();
  WIFI_ENABLE_NSS();
 8003226:	2200      	movs	r2, #0
 8003228:	2101      	movs	r1, #1
 800322a:	482b      	ldr	r0, [pc, #172]	; (80032d8 <SPI_WIFI_ReceiveData+0xe8>)
 800322c:	f002 f90c 	bl	8005448 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8003230:	200f      	movs	r0, #15
 8003232:	f000 f8d1 	bl	80033d8 <SPI_WIFI_DelayUs>
  while (WIFI_IS_CMDDATA_READY())
 8003236:	e03d      	b.n	80032b4 <SPI_WIFI_ReceiveData+0xc4>
  {
    if ((length < len) || (!len))
 8003238:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800323c:	897b      	ldrh	r3, [r7, #10]
 800323e:	429a      	cmp	r2, r3
 8003240:	db02      	blt.n	8003248 <SPI_WIFI_ReceiveData+0x58>
 8003242:	897b      	ldrh	r3, [r7, #10]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d13c      	bne.n	80032c2 <SPI_WIFI_ReceiveData+0xd2>
    {
      spi_rx_event = 1;
 8003248:	4b24      	ldr	r3, [pc, #144]	; (80032dc <SPI_WIFI_ReceiveData+0xec>)
 800324a:	2201      	movs	r2, #1
 800324c:	601a      	str	r2, [r3, #0]
      if (HAL_SPI_Receive_IT(&hspi, tmp, 1) != HAL_OK) {
 800324e:	f107 0314 	add.w	r3, r7, #20
 8003252:	2201      	movs	r2, #1
 8003254:	4619      	mov	r1, r3
 8003256:	4822      	ldr	r0, [pc, #136]	; (80032e0 <SPI_WIFI_ReceiveData+0xf0>)
 8003258:	f005 fa1c 	bl	8008694 <HAL_SPI_Receive_IT>
 800325c:	4603      	mov	r3, r0
 800325e:	2b00      	cmp	r3, #0
 8003260:	d007      	beq.n	8003272 <SPI_WIFI_ReceiveData+0x82>
        WIFI_DISABLE_NSS();
 8003262:	2201      	movs	r2, #1
 8003264:	2101      	movs	r1, #1
 8003266:	481c      	ldr	r0, [pc, #112]	; (80032d8 <SPI_WIFI_ReceiveData+0xe8>)
 8003268:	f002 f8ee 	bl	8005448 <HAL_GPIO_WritePin>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_SPI_FAILED;
 800326c:	f04f 33ff 	mov.w	r3, #4294967295
 8003270:	e02e      	b.n	80032d0 <SPI_WIFI_ReceiveData+0xe0>
      }

      wait_spi_rx_event(timeout);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4618      	mov	r0, r3
 8003276:	f7ff ff7b 	bl	8003170 <wait_spi_rx_event>

      pData[0] = tmp[0];
 800327a:	7d3a      	ldrb	r2, [r7, #20]
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	701a      	strb	r2, [r3, #0]
      pData[1] = tmp[1];
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	3301      	adds	r3, #1
 8003284:	7d7a      	ldrb	r2, [r7, #21]
 8003286:	701a      	strb	r2, [r3, #0]
      length += 2;
 8003288:	8afb      	ldrh	r3, [r7, #22]
 800328a:	3302      	adds	r3, #2
 800328c:	b29b      	uxth	r3, r3
 800328e:	82fb      	strh	r3, [r7, #22]
      pData  += 2;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	3302      	adds	r3, #2
 8003294:	60fb      	str	r3, [r7, #12]

      if (length >= ES_WIFI_DATA_SIZE) {
 8003296:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800329a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800329e:	db09      	blt.n	80032b4 <SPI_WIFI_ReceiveData+0xc4>
        WIFI_DISABLE_NSS();
 80032a0:	2201      	movs	r2, #1
 80032a2:	2101      	movs	r1, #1
 80032a4:	480c      	ldr	r0, [pc, #48]	; (80032d8 <SPI_WIFI_ReceiveData+0xe8>)
 80032a6:	f002 f8cf 	bl	8005448 <HAL_GPIO_WritePin>
        SPI_WIFI_ResetModule();
 80032aa:	f7ff fea5 	bl	8002ff8 <SPI_WIFI_ResetModule>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_STUFFING_FOREVER;
 80032ae:	f06f 0303 	mvn.w	r3, #3
 80032b2:	e00d      	b.n	80032d0 <SPI_WIFI_ReceiveData+0xe0>
  while (WIFI_IS_CMDDATA_READY())
 80032b4:	2102      	movs	r1, #2
 80032b6:	4808      	ldr	r0, [pc, #32]	; (80032d8 <SPI_WIFI_ReceiveData+0xe8>)
 80032b8:	f002 f8ae 	bl	8005418 <HAL_GPIO_ReadPin>
 80032bc:	4603      	mov	r3, r0
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d0ba      	beq.n	8003238 <SPI_WIFI_ReceiveData+0x48>
    else
    {
      break;
    }
  }
  WIFI_DISABLE_NSS();
 80032c2:	2201      	movs	r2, #1
 80032c4:	2101      	movs	r1, #1
 80032c6:	4804      	ldr	r0, [pc, #16]	; (80032d8 <SPI_WIFI_ReceiveData+0xe8>)
 80032c8:	f002 f8be 	bl	8005448 <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  return length;
 80032cc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	3718      	adds	r7, #24
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}
 80032d8:	48001000 	.word	0x48001000
 80032dc:	200058ec 	.word	0x200058ec
 80032e0:	20005888 	.word	0x20005888

080032e4 <SPI_WIFI_SendData>:
  * @param  len : Data length
  * @param  timeout : send timeout in mS
  * @retval Length of sent data
  */
int16_t SPI_WIFI_SendData(const uint8_t *pdata, uint16_t len, uint32_t timeout)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b086      	sub	sp, #24
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	60f8      	str	r0, [r7, #12]
 80032ec:	460b      	mov	r3, r1
 80032ee:	607a      	str	r2, [r7, #4]
 80032f0:	817b      	strh	r3, [r7, #10]
  uint8_t Padding[2];

  if (wait_cmddata_rdy_high(timeout) < 0)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4618      	mov	r0, r3
 80032f6:	f7ff fef9 	bl	80030ec <wait_cmddata_rdy_high>
 80032fa:	4603      	mov	r3, r0
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	da02      	bge.n	8003306 <SPI_WIFI_SendData+0x22>
  {
    return ES_WIFI_ERROR_SPI_FAILED;
 8003300:	f04f 33ff 	mov.w	r3, #4294967295
 8003304:	e04f      	b.n	80033a6 <SPI_WIFI_SendData+0xc2>
  }

  /* arm to detect rising event */
  cmddata_rdy_rising_event = 1;
 8003306:	4b2a      	ldr	r3, [pc, #168]	; (80033b0 <SPI_WIFI_SendData+0xcc>)
 8003308:	2201      	movs	r2, #1
 800330a:	601a      	str	r2, [r3, #0]
  LOCK_SPI();
  WIFI_ENABLE_NSS();
 800330c:	2200      	movs	r2, #0
 800330e:	2101      	movs	r1, #1
 8003310:	4828      	ldr	r0, [pc, #160]	; (80033b4 <SPI_WIFI_SendData+0xd0>)
 8003312:	f002 f899 	bl	8005448 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8003316:	200f      	movs	r0, #15
 8003318:	f000 f85e 	bl	80033d8 <SPI_WIFI_DelayUs>
  if (len > 1)
 800331c:	897b      	ldrh	r3, [r7, #10]
 800331e:	2b01      	cmp	r3, #1
 8003320:	d919      	bls.n	8003356 <SPI_WIFI_SendData+0x72>
  {
    spi_tx_event = 1;
 8003322:	4b25      	ldr	r3, [pc, #148]	; (80033b8 <SPI_WIFI_SendData+0xd4>)
 8003324:	2201      	movs	r2, #1
 8003326:	601a      	str	r2, [r3, #0]
    if (HAL_SPI_Transmit_IT(&hspi, (uint8_t *)pdata , len / 2) != HAL_OK)
 8003328:	897b      	ldrh	r3, [r7, #10]
 800332a:	085b      	lsrs	r3, r3, #1
 800332c:	b29b      	uxth	r3, r3
 800332e:	461a      	mov	r2, r3
 8003330:	68f9      	ldr	r1, [r7, #12]
 8003332:	4822      	ldr	r0, [pc, #136]	; (80033bc <SPI_WIFI_SendData+0xd8>)
 8003334:	f005 f90e 	bl	8008554 <HAL_SPI_Transmit_IT>
 8003338:	4603      	mov	r3, r0
 800333a:	2b00      	cmp	r3, #0
 800333c:	d007      	beq.n	800334e <SPI_WIFI_SendData+0x6a>
    {
      WIFI_DISABLE_NSS();
 800333e:	2201      	movs	r2, #1
 8003340:	2101      	movs	r1, #1
 8003342:	481c      	ldr	r0, [pc, #112]	; (80033b4 <SPI_WIFI_SendData+0xd0>)
 8003344:	f002 f880 	bl	8005448 <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 8003348:	f04f 33ff 	mov.w	r3, #4294967295
 800334c:	e02b      	b.n	80033a6 <SPI_WIFI_SendData+0xc2>
    }
    wait_spi_tx_event(timeout);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4618      	mov	r0, r3
 8003352:	f7ff ff2d 	bl	80031b0 <wait_spi_tx_event>
  }

  if (len & 1)
 8003356:	897b      	ldrh	r3, [r7, #10]
 8003358:	f003 0301 	and.w	r3, r3, #1
 800335c:	2b00      	cmp	r3, #0
 800335e:	d020      	beq.n	80033a2 <SPI_WIFI_SendData+0xbe>
  {
    Padding[0] = pdata[len - 1];
 8003360:	897b      	ldrh	r3, [r7, #10]
 8003362:	3b01      	subs	r3, #1
 8003364:	68fa      	ldr	r2, [r7, #12]
 8003366:	4413      	add	r3, r2
 8003368:	781b      	ldrb	r3, [r3, #0]
 800336a:	753b      	strb	r3, [r7, #20]
    Padding[1] = '\n';
 800336c:	230a      	movs	r3, #10
 800336e:	757b      	strb	r3, [r7, #21]

    spi_tx_event=1;
 8003370:	4b11      	ldr	r3, [pc, #68]	; (80033b8 <SPI_WIFI_SendData+0xd4>)
 8003372:	2201      	movs	r2, #1
 8003374:	601a      	str	r2, [r3, #0]
    if (HAL_SPI_Transmit_IT(&hspi, Padding, 1) != HAL_OK)
 8003376:	f107 0314 	add.w	r3, r7, #20
 800337a:	2201      	movs	r2, #1
 800337c:	4619      	mov	r1, r3
 800337e:	480f      	ldr	r0, [pc, #60]	; (80033bc <SPI_WIFI_SendData+0xd8>)
 8003380:	f005 f8e8 	bl	8008554 <HAL_SPI_Transmit_IT>
 8003384:	4603      	mov	r3, r0
 8003386:	2b00      	cmp	r3, #0
 8003388:	d007      	beq.n	800339a <SPI_WIFI_SendData+0xb6>
    {
      WIFI_DISABLE_NSS();
 800338a:	2201      	movs	r2, #1
 800338c:	2101      	movs	r1, #1
 800338e:	4809      	ldr	r0, [pc, #36]	; (80033b4 <SPI_WIFI_SendData+0xd0>)
 8003390:	f002 f85a 	bl	8005448 <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 8003394:	f04f 33ff 	mov.w	r3, #4294967295
 8003398:	e005      	b.n	80033a6 <SPI_WIFI_SendData+0xc2>
    }
    wait_spi_tx_event(timeout);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	4618      	mov	r0, r3
 800339e:	f7ff ff07 	bl	80031b0 <wait_spi_tx_event>
  }
  return len;
 80033a2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3718      	adds	r7, #24
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	bf00      	nop
 80033b0:	200058f4 	.word	0x200058f4
 80033b4:	48001000 	.word	0x48001000
 80033b8:	200058f0 	.word	0x200058f0
 80033bc:	20005888 	.word	0x20005888

080033c0 <SPI_WIFI_Delay>:
  * @brief  Delay
  * @param  Delay in ms
  * @retval None
  */
void SPI_WIFI_Delay(uint32_t Delay)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b082      	sub	sp, #8
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	f000 fd7b 	bl	8003ec4 <HAL_Delay>
}
 80033ce:	bf00      	nop
 80033d0:	3708      	adds	r7, #8
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}
	...

080033d8 <SPI_WIFI_DelayUs>:
   * @brief  Delay
  * @param  Delay in us
  * @retval None
  */
void SPI_WIFI_DelayUs(uint32_t n)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b086      	sub	sp, #24
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  volatile        uint32_t ct = 0;
 80033e0:	2300      	movs	r3, #0
 80033e2:	60bb      	str	r3, [r7, #8]
  uint32_t        loop_per_us = 0;
 80033e4:	2300      	movs	r3, #0
 80033e6:	617b      	str	r3, [r7, #20]
  static uint32_t cycle_per_loop = 0;

  /* calibration happen on first call for a duration of 1 ms * nbcycle per loop */
  /* 10 cycle for STM32L4 */
  if (cycle_per_loop == 0)
 80033e8:	4b20      	ldr	r3, [pc, #128]	; (800346c <SPI_WIFI_DelayUs+0x94>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d122      	bne.n	8003436 <SPI_WIFI_DelayUs+0x5e>
  {
     uint32_t cycle_per_ms = (SystemCoreClock / 1000UL);
 80033f0:	4b1f      	ldr	r3, [pc, #124]	; (8003470 <SPI_WIFI_DelayUs+0x98>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a1f      	ldr	r2, [pc, #124]	; (8003474 <SPI_WIFI_DelayUs+0x9c>)
 80033f6:	fba2 2303 	umull	r2, r3, r2, r3
 80033fa:	099b      	lsrs	r3, r3, #6
 80033fc:	613b      	str	r3, [r7, #16]
     uint32_t t = 0;
 80033fe:	2300      	movs	r3, #0
 8003400:	60fb      	str	r3, [r7, #12]
     ct = cycle_per_ms;
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	60bb      	str	r3, [r7, #8]
     t = HAL_GetTick();
 8003406:	f000 fd51 	bl	8003eac <HAL_GetTick>
 800340a:	60f8      	str	r0, [r7, #12]
     while(ct) ct--;
 800340c:	e002      	b.n	8003414 <SPI_WIFI_DelayUs+0x3c>
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	3b01      	subs	r3, #1
 8003412:	60bb      	str	r3, [r7, #8]
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d1f9      	bne.n	800340e <SPI_WIFI_DelayUs+0x36>
     cycle_per_loop = HAL_GetTick() - t;
 800341a:	f000 fd47 	bl	8003eac <HAL_GetTick>
 800341e:	4602      	mov	r2, r0
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	1ad3      	subs	r3, r2, r3
 8003424:	4a11      	ldr	r2, [pc, #68]	; (800346c <SPI_WIFI_DelayUs+0x94>)
 8003426:	6013      	str	r3, [r2, #0]
     if (cycle_per_loop == 0) cycle_per_loop = 1;
 8003428:	4b10      	ldr	r3, [pc, #64]	; (800346c <SPI_WIFI_DelayUs+0x94>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d102      	bne.n	8003436 <SPI_WIFI_DelayUs+0x5e>
 8003430:	4b0e      	ldr	r3, [pc, #56]	; (800346c <SPI_WIFI_DelayUs+0x94>)
 8003432:	2201      	movs	r2, #1
 8003434:	601a      	str	r2, [r3, #0]
  }

  loop_per_us = SystemCoreClock/1000000UL/cycle_per_loop;
 8003436:	4b0e      	ldr	r3, [pc, #56]	; (8003470 <SPI_WIFI_DelayUs+0x98>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a0f      	ldr	r2, [pc, #60]	; (8003478 <SPI_WIFI_DelayUs+0xa0>)
 800343c:	fba2 2303 	umull	r2, r3, r2, r3
 8003440:	0c9a      	lsrs	r2, r3, #18
 8003442:	4b0a      	ldr	r3, [pc, #40]	; (800346c <SPI_WIFI_DelayUs+0x94>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	fbb2 f3f3 	udiv	r3, r2, r3
 800344a:	617b      	str	r3, [r7, #20]
  ct = n * loop_per_us;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	697a      	ldr	r2, [r7, #20]
 8003450:	fb02 f303 	mul.w	r3, r2, r3
 8003454:	60bb      	str	r3, [r7, #8]
  while(ct) ct--;
 8003456:	e002      	b.n	800345e <SPI_WIFI_DelayUs+0x86>
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	3b01      	subs	r3, #1
 800345c:	60bb      	str	r3, [r7, #8]
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d1f9      	bne.n	8003458 <SPI_WIFI_DelayUs+0x80>
  return;
 8003464:	bf00      	nop
}
 8003466:	3718      	adds	r7, #24
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}
 800346c:	200058f8 	.word	0x200058f8
 8003470:	20000000 	.word	0x20000000
 8003474:	10624dd3 	.word	0x10624dd3
 8003478:	431bde83 	.word	0x431bde83

0800347c <HAL_SPI_RxCpltCallback>:
  *               the configuration information for the SPI module.
  * @retval None
  */

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800347c:	b480      	push	{r7}
 800347e:	b083      	sub	sp, #12
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  if (spi_rx_event)
 8003484:	4b06      	ldr	r3, [pc, #24]	; (80034a0 <HAL_SPI_RxCpltCallback+0x24>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d002      	beq.n	8003492 <HAL_SPI_RxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_rx_sem);
    spi_rx_event = 0;
 800348c:	4b04      	ldr	r3, [pc, #16]	; (80034a0 <HAL_SPI_RxCpltCallback+0x24>)
 800348e:	2200      	movs	r2, #0
 8003490:	601a      	str	r2, [r3, #0]
  }
}
 8003492:	bf00      	nop
 8003494:	370c      	adds	r7, #12
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr
 800349e:	bf00      	nop
 80034a0:	200058ec 	.word	0x200058ec

080034a4 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the SPI module.
  * @retval None
  */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b083      	sub	sp, #12
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  if (spi_tx_event)
 80034ac:	4b06      	ldr	r3, [pc, #24]	; (80034c8 <HAL_SPI_TxCpltCallback+0x24>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d002      	beq.n	80034ba <HAL_SPI_TxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_tx_sem);
    spi_tx_event = 0;
 80034b4:	4b04      	ldr	r3, [pc, #16]	; (80034c8 <HAL_SPI_TxCpltCallback+0x24>)
 80034b6:	2200      	movs	r2, #0
 80034b8:	601a      	str	r2, [r3, #0]
  }
}
 80034ba:	bf00      	nop
 80034bc:	370c      	adds	r7, #12
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr
 80034c6:	bf00      	nop
 80034c8:	200058f0 	.word	0x200058f0

080034cc <SPI_WIFI_ISR>:
  * @brief  Interrupt handler for CMDDATARDY input signal
  * @param  None
  * @retval None
  */
void    SPI_WIFI_ISR(void)
{
 80034cc:	b480      	push	{r7}
 80034ce:	af00      	add	r7, sp, #0
   if (cmddata_rdy_rising_event == 1)
 80034d0:	4b05      	ldr	r3, [pc, #20]	; (80034e8 <SPI_WIFI_ISR+0x1c>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d102      	bne.n	80034de <SPI_WIFI_ISR+0x12>
   {
     SEM_SIGNAL(cmddata_rdy_rising_sem);
     cmddata_rdy_rising_event = 0;
 80034d8:	4b03      	ldr	r3, [pc, #12]	; (80034e8 <SPI_WIFI_ISR+0x1c>)
 80034da:	2200      	movs	r2, #0
 80034dc:	601a      	str	r2, [r3, #0]
   }
}
 80034de:	bf00      	nop
 80034e0:	46bd      	mov	sp, r7
 80034e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e6:	4770      	bx	lr
 80034e8:	200058f4 	.word	0x200058f4

080034ec <WIFI_Init>:
  * @brief  Initialize the WIFI core
  * @param  None
  * @retval Operation status
  */
WIFI_Status_t WIFI_Init(void)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b084      	sub	sp, #16
 80034f0:	af02      	add	r7, sp, #8
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	71fb      	strb	r3, [r7, #7]

  if(ES_WIFI_RegisterBusIO(&EsWifiObj,
 80034f6:	4b0d      	ldr	r3, [pc, #52]	; (800352c <WIFI_Init+0x40>)
 80034f8:	9301      	str	r3, [sp, #4]
 80034fa:	4b0d      	ldr	r3, [pc, #52]	; (8003530 <WIFI_Init+0x44>)
 80034fc:	9300      	str	r3, [sp, #0]
 80034fe:	4b0d      	ldr	r3, [pc, #52]	; (8003534 <WIFI_Init+0x48>)
 8003500:	4a0d      	ldr	r2, [pc, #52]	; (8003538 <WIFI_Init+0x4c>)
 8003502:	490e      	ldr	r1, [pc, #56]	; (800353c <WIFI_Init+0x50>)
 8003504:	480e      	ldr	r0, [pc, #56]	; (8003540 <WIFI_Init+0x54>)
 8003506:	f7ff f837 	bl	8002578 <ES_WIFI_RegisterBusIO>
 800350a:	4603      	mov	r3, r0
 800350c:	2b00      	cmp	r3, #0
 800350e:	d107      	bne.n	8003520 <WIFI_Init+0x34>
                           SPI_WIFI_DeInit,
                           SPI_WIFI_Delay,
                           SPI_WIFI_SendData,
                           SPI_WIFI_ReceiveData) == ES_WIFI_STATUS_OK)
  {
    if(ES_WIFI_Init(&EsWifiObj) == ES_WIFI_STATUS_OK)
 8003510:	480b      	ldr	r0, [pc, #44]	; (8003540 <WIFI_Init+0x54>)
 8003512:	f7fe fffd 	bl	8002510 <ES_WIFI_Init>
 8003516:	4603      	mov	r3, r0
 8003518:	2b00      	cmp	r3, #0
 800351a:	d101      	bne.n	8003520 <WIFI_Init+0x34>
    {
      ret = WIFI_STATUS_OK;
 800351c:	2300      	movs	r3, #0
 800351e:	71fb      	strb	r3, [r7, #7]
    }
  }
  return ret;
 8003520:	79fb      	ldrb	r3, [r7, #7]
}
 8003522:	4618      	mov	r0, r3
 8003524:	3708      	adds	r7, #8
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop
 800352c:	080031f1 	.word	0x080031f1
 8003530:	080032e5 	.word	0x080032e5
 8003534:	080033c1 	.word	0x080033c1
 8003538:	080030d9 	.word	0x080030d9
 800353c:	08002f3d 	.word	0x08002f3d
 8003540:	200058fc 	.word	0x200058fc

08003544 <WIFI_Connect>:
  * @param  Password : Password string
  * @param  ecn : Encryption type
  * @retval Operation status
  */
WIFI_Status_t WIFI_Connect(const char* SSID, const char* Password, WIFI_Ecn_t ecn)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b086      	sub	sp, #24
 8003548:	af00      	add	r7, sp, #0
 800354a:	60f8      	str	r0, [r7, #12]
 800354c:	60b9      	str	r1, [r7, #8]
 800354e:	4613      	mov	r3, r2
 8003550:	71fb      	strb	r3, [r7, #7]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	75fb      	strb	r3, [r7, #23]

  if(ES_WIFI_Connect(&EsWifiObj, SSID, Password, (ES_WIFI_SecurityType_t) ecn) == ES_WIFI_STATUS_OK)
 8003556:	79fb      	ldrb	r3, [r7, #7]
 8003558:	68ba      	ldr	r2, [r7, #8]
 800355a:	68f9      	ldr	r1, [r7, #12]
 800355c:	4809      	ldr	r0, [pc, #36]	; (8003584 <WIFI_Connect+0x40>)
 800355e:	f7ff f83f 	bl	80025e0 <ES_WIFI_Connect>
 8003562:	4603      	mov	r3, r0
 8003564:	2b00      	cmp	r3, #0
 8003566:	d107      	bne.n	8003578 <WIFI_Connect+0x34>
  {
    if(ES_WIFI_GetNetworkSettings(&EsWifiObj) == ES_WIFI_STATUS_OK)
 8003568:	4806      	ldr	r0, [pc, #24]	; (8003584 <WIFI_Connect+0x40>)
 800356a:	f7ff f8e1 	bl	8002730 <ES_WIFI_GetNetworkSettings>
 800356e:	4603      	mov	r3, r0
 8003570:	2b00      	cmp	r3, #0
 8003572:	d101      	bne.n	8003578 <WIFI_Connect+0x34>
    {
       ret = WIFI_STATUS_OK;
 8003574:	2300      	movs	r3, #0
 8003576:	75fb      	strb	r3, [r7, #23]
    }
  }
  return ret;
 8003578:	7dfb      	ldrb	r3, [r7, #23]
}
 800357a:	4618      	mov	r0, r3
 800357c:	3718      	adds	r7, #24
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	200058fc 	.word	0x200058fc

08003588 <WIFI_GetMAC_Address>:
/**
  * @brief  This function retrieves the WiFi interface's MAC address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetMAC_Address(uint8_t *mac, uint8_t MacLength)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b084      	sub	sp, #16
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
 8003590:	460b      	mov	r3, r1
 8003592:	70fb      	strb	r3, [r7, #3]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	73fb      	strb	r3, [r7, #15]

  if ((mac != NULL) && (0 < MacLength))
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d00d      	beq.n	80035ba <WIFI_GetMAC_Address+0x32>
 800359e:	78fb      	ldrb	r3, [r7, #3]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d00a      	beq.n	80035ba <WIFI_GetMAC_Address+0x32>
  {
    if(ES_WIFI_GetMACAddress(&EsWifiObj, mac, MacLength) == ES_WIFI_STATUS_OK)
 80035a4:	78fb      	ldrb	r3, [r7, #3]
 80035a6:	461a      	mov	r2, r3
 80035a8:	6879      	ldr	r1, [r7, #4]
 80035aa:	4806      	ldr	r0, [pc, #24]	; (80035c4 <WIFI_GetMAC_Address+0x3c>)
 80035ac:	f7ff f8ea 	bl	8002784 <ES_WIFI_GetMACAddress>
 80035b0:	4603      	mov	r3, r0
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d101      	bne.n	80035ba <WIFI_GetMAC_Address+0x32>
    {
      ret = WIFI_STATUS_OK;
 80035b6:	2300      	movs	r3, #0
 80035b8:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 80035ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80035bc:	4618      	mov	r0, r3
 80035be:	3710      	adds	r7, #16
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	200058fc 	.word	0x200058fc

080035c8 <WIFI_GetIP_Address>:
/**
  * @brief  This function retrieves the WiFi interface's IP address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetIP_Address(uint8_t *ipaddr, uint8_t IpAddrLength)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b084      	sub	sp, #16
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
 80035d0:	460b      	mov	r3, r1
 80035d2:	70fb      	strb	r3, [r7, #3]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	73fb      	strb	r3, [r7, #15]

  if ((ipaddr != NULL) && (4 <= IpAddrLength))
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d010      	beq.n	8003600 <WIFI_GetIP_Address+0x38>
 80035de:	78fb      	ldrb	r3, [r7, #3]
 80035e0:	2b03      	cmp	r3, #3
 80035e2:	d90d      	bls.n	8003600 <WIFI_GetIP_Address+0x38>
  {
    if (ES_WIFI_IsConnected(&EsWifiObj) == 1)
 80035e4:	4809      	ldr	r0, [pc, #36]	; (800360c <WIFI_GetIP_Address+0x44>)
 80035e6:	f7ff f873 	bl	80026d0 <ES_WIFI_IsConnected>
 80035ea:	4603      	mov	r3, r0
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d107      	bne.n	8003600 <WIFI_GetIP_Address+0x38>
 80035f0:	4b06      	ldr	r3, [pc, #24]	; (800360c <WIFI_GetIP_Address+0x44>)
 80035f2:	f8d3 30d5 	ldr.w	r3, [r3, #213]	; 0xd5
 80035f6:	461a      	mov	r2, r3
    {
      memcpy(ipaddr, EsWifiObj.NetSettings.IP_Addr, 4);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	601a      	str	r2, [r3, #0]
      ret = WIFI_STATUS_OK;
 80035fc:	2300      	movs	r3, #0
 80035fe:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 8003600:	7bfb      	ldrb	r3, [r7, #15]
}
 8003602:	4618      	mov	r0, r3
 8003604:	3710      	adds	r7, #16
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}
 800360a:	bf00      	nop
 800360c:	200058fc 	.word	0x200058fc

08003610 <WIFI_StartServer>:
  * @param  port : Remote port
  * @retval Operation status
  */
WIFI_Status_t WIFI_StartServer(uint32_t socket, WIFI_Protocol_t protocol, uint16_t backlog ,const char *name,
                               uint16_t port)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b08a      	sub	sp, #40	; 0x28
 8003614:	af00      	add	r7, sp, #0
 8003616:	60f8      	str	r0, [r7, #12]
 8003618:	607b      	str	r3, [r7, #4]
 800361a:	460b      	mov	r3, r1
 800361c:	72fb      	strb	r3, [r7, #11]
 800361e:	4613      	mov	r3, r2
 8003620:	813b      	strh	r3, [r7, #8]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  ES_WIFI_Conn_t conn;

  conn.Number = (uint8_t)socket;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	b2db      	uxtb	r3, r3
 800362c:	74bb      	strb	r3, [r7, #18]
  conn.LocalPort = port;
 800362e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8003630:	82fb      	strh	r3, [r7, #22]
  conn.Type = (protocol == WIFI_TCP_PROTOCOL)? ES_WIFI_TCP_CONNECTION : ES_WIFI_UDP_CONNECTION;
 8003632:	7afb      	ldrb	r3, [r7, #11]
 8003634:	2b00      	cmp	r3, #0
 8003636:	bf14      	ite	ne
 8003638:	2301      	movne	r3, #1
 800363a:	2300      	moveq	r3, #0
 800363c:	b2db      	uxtb	r3, r3
 800363e:	743b      	strb	r3, [r7, #16]
  conn.Backlog = backlog;
 8003640:	893b      	ldrh	r3, [r7, #8]
 8003642:	b2db      	uxtb	r3, r3
 8003644:	f887 3020 	strb.w	r3, [r7, #32]

  if(ES_WIFI_StartServerSingleConn(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 8003648:	f107 0310 	add.w	r3, r7, #16
 800364c:	4619      	mov	r1, r3
 800364e:	4807      	ldr	r0, [pc, #28]	; (800366c <WIFI_StartServer+0x5c>)
 8003650:	f7ff f8ce 	bl	80027f0 <ES_WIFI_StartServerSingleConn>
 8003654:	4603      	mov	r3, r0
 8003656:	2b00      	cmp	r3, #0
 8003658:	d102      	bne.n	8003660 <WIFI_StartServer+0x50>
  {
    ret = WIFI_STATUS_OK;
 800365a:	2300      	movs	r3, #0
 800365c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 8003660:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003664:	4618      	mov	r0, r3
 8003666:	3728      	adds	r7, #40	; 0x28
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}
 800366c:	200058fc 	.word	0x200058fc

08003670 <WIFI_WaitServerConnection>:
  * @param  socket : socket
  * @retval Operation status
  */
WIFI_Status_t WIFI_WaitServerConnection(uint32_t socket,uint32_t Timeout,
                                        uint8_t *RemoteIp, uint8_t RemoteIpAddrLength, uint16_t *RemotePort)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b08a      	sub	sp, #40	; 0x28
 8003674:	af00      	add	r7, sp, #0
 8003676:	60f8      	str	r0, [r7, #12]
 8003678:	60b9      	str	r1, [r7, #8]
 800367a:	607a      	str	r2, [r7, #4]
 800367c:	70fb      	strb	r3, [r7, #3]
  ES_WIFI_Conn_t conn;
  ES_WIFI_Status_t ret;

  conn.Number = (uint8_t)socket;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	b2db      	uxtb	r3, r3
 8003682:	74bb      	strb	r3, [r7, #18]

  ret = ES_WIFI_WaitServerConnection(&EsWifiObj,Timeout,&conn);
 8003684:	f107 0310 	add.w	r3, r7, #16
 8003688:	461a      	mov	r2, r3
 800368a:	68b9      	ldr	r1, [r7, #8]
 800368c:	481b      	ldr	r0, [pc, #108]	; (80036fc <WIFI_WaitServerConnection+0x8c>)
 800368e:	f7ff f95b 	bl	8002948 <ES_WIFI_WaitServerConnection>
 8003692:	4603      	mov	r3, r0
 8003694:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (ES_WIFI_STATUS_OK == ret)
 8003698:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800369c:	2b00      	cmp	r3, #0
 800369e:	d110      	bne.n	80036c2 <WIFI_WaitServerConnection+0x52>
  {
    if (RemotePort)
 80036a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d002      	beq.n	80036ac <WIFI_WaitServerConnection+0x3c>
    {
      *RemotePort = conn.RemotePort;
 80036a6:	8aba      	ldrh	r2, [r7, #20]
 80036a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036aa:	801a      	strh	r2, [r3, #0]
    }
    if ((RemoteIp != NULL) && (4 <= RemoteIpAddrLength))
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d005      	beq.n	80036be <WIFI_WaitServerConnection+0x4e>
 80036b2:	78fb      	ldrb	r3, [r7, #3]
 80036b4:	2b03      	cmp	r3, #3
 80036b6:	d902      	bls.n	80036be <WIFI_WaitServerConnection+0x4e>
 80036b8:	69ba      	ldr	r2, [r7, #24]
    {
      memcpy(RemoteIp, conn.RemoteIP, 4);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	601a      	str	r2, [r3, #0]
    }
    return  WIFI_STATUS_OK;
 80036be:	2300      	movs	r3, #0
 80036c0:	e017      	b.n	80036f2 <WIFI_WaitServerConnection+0x82>
  }

  if (ES_WIFI_STATUS_TIMEOUT == ret)
 80036c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80036c6:	2b03      	cmp	r3, #3
 80036c8:	d112      	bne.n	80036f0 <WIFI_WaitServerConnection+0x80>
  {
    if (RemotePort)
 80036ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d002      	beq.n	80036d6 <WIFI_WaitServerConnection+0x66>
    {
      *RemotePort = 0;
 80036d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036d2:	2200      	movs	r2, #0
 80036d4:	801a      	strh	r2, [r3, #0]
    }
    if ((RemoteIp != NULL) && (4 <= RemoteIpAddrLength))
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d007      	beq.n	80036ec <WIFI_WaitServerConnection+0x7c>
 80036dc:	78fb      	ldrb	r3, [r7, #3]
 80036de:	2b03      	cmp	r3, #3
 80036e0:	d904      	bls.n	80036ec <WIFI_WaitServerConnection+0x7c>
    {
      memset(RemoteIp, 0, 4);
 80036e2:	2204      	movs	r2, #4
 80036e4:	2100      	movs	r1, #0
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f007 fe36 	bl	800b358 <memset>
    }
    return  WIFI_STATUS_TIMEOUT;
 80036ec:	2305      	movs	r3, #5
 80036ee:	e000      	b.n	80036f2 <WIFI_WaitServerConnection+0x82>
  }

  return WIFI_STATUS_ERROR;
 80036f0:	2301      	movs	r3, #1
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3728      	adds	r7, #40	; 0x28
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}
 80036fa:	bf00      	nop
 80036fc:	200058fc 	.word	0x200058fc

08003700 <WIFI_CloseServerConnection>:
  * @brief  Close current connection from a client  to the server
  * @param  socket : socket
  * @retval Operation status
  */
WIFI_Status_t WIFI_CloseServerConnection(uint32_t socket)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b084      	sub	sp, #16
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	73fb      	strb	r3, [r7, #15]

  if (ES_WIFI_STATUS_OK == ES_WIFI_CloseServerConnection(&EsWifiObj, (uint8_t)socket))
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	b2db      	uxtb	r3, r3
 8003710:	4619      	mov	r1, r3
 8003712:	4806      	ldr	r0, [pc, #24]	; (800372c <WIFI_CloseServerConnection+0x2c>)
 8003714:	f7ff fa0a 	bl	8002b2c <ES_WIFI_CloseServerConnection>
 8003718:	4603      	mov	r3, r0
 800371a:	2b00      	cmp	r3, #0
 800371c:	d101      	bne.n	8003722 <WIFI_CloseServerConnection+0x22>
  {
    ret = WIFI_STATUS_OK;
 800371e:	2300      	movs	r3, #0
 8003720:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 8003722:	7bfb      	ldrb	r3, [r7, #15]
}
 8003724:	4618      	mov	r0, r3
 8003726:	3710      	adds	r7, #16
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}
 800372c:	200058fc 	.word	0x200058fc

08003730 <WIFI_SendData>:
  * @param  Timeout : Socket write timeout (ms)
  * @retval Operation status
  */
WIFI_Status_t WIFI_SendData(uint32_t socket, const uint8_t *pdata, uint16_t Reqlen, uint16_t *SentDatalen,
                            uint32_t Timeout)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b088      	sub	sp, #32
 8003734:	af02      	add	r7, sp, #8
 8003736:	60f8      	str	r0, [r7, #12]
 8003738:	60b9      	str	r1, [r7, #8]
 800373a:	603b      	str	r3, [r7, #0]
 800373c:	4613      	mov	r3, r2
 800373e:	80fb      	strh	r3, [r7, #6]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	75fb      	strb	r3, [r7, #23]

    if (ES_WIFI_SendData(&EsWifiObj, (uint8_t)socket, pdata, Reqlen, SentDatalen, Timeout) == ES_WIFI_STATUS_OK)
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	b2d9      	uxtb	r1, r3
 8003748:	88fa      	ldrh	r2, [r7, #6]
 800374a:	6a3b      	ldr	r3, [r7, #32]
 800374c:	9301      	str	r3, [sp, #4]
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	9300      	str	r3, [sp, #0]
 8003752:	4613      	mov	r3, r2
 8003754:	68ba      	ldr	r2, [r7, #8]
 8003756:	4806      	ldr	r0, [pc, #24]	; (8003770 <WIFI_SendData+0x40>)
 8003758:	f7ff fa24 	bl	8002ba4 <ES_WIFI_SendData>
 800375c:	4603      	mov	r3, r0
 800375e:	2b00      	cmp	r3, #0
 8003760:	d101      	bne.n	8003766 <WIFI_SendData+0x36>
    {
      ret = WIFI_STATUS_OK;
 8003762:	2300      	movs	r3, #0
 8003764:	75fb      	strb	r3, [r7, #23]
    }

  return ret;
 8003766:	7dfb      	ldrb	r3, [r7, #23]
}
 8003768:	4618      	mov	r0, r3
 800376a:	3718      	adds	r7, #24
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}
 8003770:	200058fc 	.word	0x200058fc

08003774 <WIFI_ReceiveData>:
  * @param  Timeout : Socket read timeout (ms)
  * @retval Operation status
  */
WIFI_Status_t WIFI_ReceiveData(uint32_t socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *RcvDatalen,
                               uint32_t Timeout)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b088      	sub	sp, #32
 8003778:	af02      	add	r7, sp, #8
 800377a:	60f8      	str	r0, [r7, #12]
 800377c:	60b9      	str	r1, [r7, #8]
 800377e:	603b      	str	r3, [r7, #0]
 8003780:	4613      	mov	r3, r2
 8003782:	80fb      	strh	r3, [r7, #6]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	75fb      	strb	r3, [r7, #23]

  if(ES_WIFI_ReceiveData(&EsWifiObj, socket, pdata, Reqlen, RcvDatalen, Timeout) == ES_WIFI_STATUS_OK)
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	b2d9      	uxtb	r1, r3
 800378c:	88fa      	ldrh	r2, [r7, #6]
 800378e:	6a3b      	ldr	r3, [r7, #32]
 8003790:	9301      	str	r3, [sp, #4]
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	9300      	str	r3, [sp, #0]
 8003796:	4613      	mov	r3, r2
 8003798:	68ba      	ldr	r2, [r7, #8]
 800379a:	4806      	ldr	r0, [pc, #24]	; (80037b4 <WIFI_ReceiveData+0x40>)
 800379c:	f7ff fa88 	bl	8002cb0 <ES_WIFI_ReceiveData>
 80037a0:	4603      	mov	r3, r0
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d101      	bne.n	80037aa <WIFI_ReceiveData+0x36>
  {
    ret = WIFI_STATUS_OK;
 80037a6:	2300      	movs	r3, #0
 80037a8:	75fb      	strb	r3, [r7, #23]
  }
  return ret;
 80037aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	3718      	adds	r7, #24
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}
 80037b4:	200058fc 	.word	0x200058fc

080037b8 <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b084      	sub	sp, #16
 80037bc:	af00      	add	r7, sp, #0
 80037be:	4603      	mov	r3, r0
 80037c0:	6039      	str	r1, [r7, #0]
 80037c2:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 80037c4:	88fb      	ldrh	r3, [r7, #6]
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	2120      	movs	r1, #32
 80037ca:	4618      	mov	r0, r3
 80037cc:	f000 faae 	bl	8003d2c <SENSOR_IO_Read>
 80037d0:	4603      	mov	r3, r0
 80037d2:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 80037d4:	7bfb      	ldrb	r3, [r7, #15]
 80037d6:	f023 0304 	bic.w	r3, r3, #4
 80037da:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 80037dc:	7bfb      	ldrb	r3, [r7, #15]
 80037de:	f043 0304 	orr.w	r3, r3, #4
 80037e2:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 80037e4:	7bfb      	ldrb	r3, [r7, #15]
 80037e6:	f023 0303 	bic.w	r3, r3, #3
 80037ea:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 80037ec:	7bfb      	ldrb	r3, [r7, #15]
 80037ee:	f043 0301 	orr.w	r3, r3, #1
 80037f2:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 80037f4:	7bfb      	ldrb	r3, [r7, #15]
 80037f6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80037fa:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 80037fc:	88fb      	ldrh	r3, [r7, #6]
 80037fe:	b2db      	uxtb	r3, r3
 8003800:	7bfa      	ldrb	r2, [r7, #15]
 8003802:	2120      	movs	r1, #32
 8003804:	4618      	mov	r0, r3
 8003806:	f000 fa77 	bl	8003cf8 <SENSOR_IO_Write>
}
 800380a:	bf00      	nop
 800380c:	3710      	adds	r7, #16
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}

08003812 <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 8003812:	b580      	push	{r7, lr}
 8003814:	b088      	sub	sp, #32
 8003816:	af00      	add	r7, sp, #0
 8003818:	4603      	mov	r3, r0
 800381a:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 800381c:	88fb      	ldrh	r3, [r7, #6]
 800381e:	b2d8      	uxtb	r0, r3
 8003820:	f107 0208 	add.w	r2, r7, #8
 8003824:	2302      	movs	r3, #2
 8003826:	21b2      	movs	r1, #178	; 0xb2
 8003828:	f000 fa9e 	bl	8003d68 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 800382c:	88fb      	ldrh	r3, [r7, #6]
 800382e:	b2db      	uxtb	r3, r3
 8003830:	2135      	movs	r1, #53	; 0x35
 8003832:	4618      	mov	r0, r3
 8003834:	f000 fa7a 	bl	8003d2c <SENSOR_IO_Read>
 8003838:	4603      	mov	r3, r0
 800383a:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 800383c:	7ffb      	ldrb	r3, [r7, #31]
 800383e:	021b      	lsls	r3, r3, #8
 8003840:	b21b      	sxth	r3, r3
 8003842:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003846:	b21a      	sxth	r2, r3
 8003848:	7a3b      	ldrb	r3, [r7, #8]
 800384a:	b21b      	sxth	r3, r3
 800384c:	4313      	orrs	r3, r2
 800384e:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 8003850:	7ffb      	ldrb	r3, [r7, #31]
 8003852:	019b      	lsls	r3, r3, #6
 8003854:	b21b      	sxth	r3, r3
 8003856:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800385a:	b21a      	sxth	r2, r3
 800385c:	7a7b      	ldrb	r3, [r7, #9]
 800385e:	b21b      	sxth	r3, r3
 8003860:	4313      	orrs	r3, r2
 8003862:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 8003864:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8003868:	10db      	asrs	r3, r3, #3
 800386a:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 800386c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003870:	10db      	asrs	r3, r3, #3
 8003872:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 8003874:	88fb      	ldrh	r3, [r7, #6]
 8003876:	b2d8      	uxtb	r0, r3
 8003878:	f107 0208 	add.w	r2, r7, #8
 800387c:	2304      	movs	r3, #4
 800387e:	21bc      	movs	r1, #188	; 0xbc
 8003880:	f000 fa72 	bl	8003d68 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8003884:	7a7b      	ldrb	r3, [r7, #9]
 8003886:	021b      	lsls	r3, r3, #8
 8003888:	b21a      	sxth	r2, r3
 800388a:	7a3b      	ldrb	r3, [r7, #8]
 800388c:	b21b      	sxth	r3, r3
 800388e:	4313      	orrs	r3, r2
 8003890:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 8003892:	7afb      	ldrb	r3, [r7, #11]
 8003894:	021b      	lsls	r3, r3, #8
 8003896:	b21a      	sxth	r2, r3
 8003898:	7abb      	ldrb	r3, [r7, #10]
 800389a:	b21b      	sxth	r3, r3
 800389c:	4313      	orrs	r3, r2
 800389e:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 80038a0:	88fb      	ldrh	r3, [r7, #6]
 80038a2:	b2d8      	uxtb	r0, r3
 80038a4:	f107 0208 	add.w	r2, r7, #8
 80038a8:	2302      	movs	r3, #2
 80038aa:	21aa      	movs	r1, #170	; 0xaa
 80038ac:	f000 fa5c 	bl	8003d68 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80038b0:	7a7b      	ldrb	r3, [r7, #9]
 80038b2:	021b      	lsls	r3, r3, #8
 80038b4:	b21a      	sxth	r2, r3
 80038b6:	7a3b      	ldrb	r3, [r7, #8]
 80038b8:	b21b      	sxth	r3, r3
 80038ba:	4313      	orrs	r3, r2
 80038bc:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 80038be:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80038c2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80038c6:	1ad3      	subs	r3, r2, r3
 80038c8:	ee07 3a90 	vmov	s15, r3
 80038cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80038d0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80038d4:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	ee07 3a90 	vmov	s15, r3
 80038de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80038e2:	ee67 6a27 	vmul.f32	s13, s14, s15
 80038e6:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80038ea:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80038ee:	1ad3      	subs	r3, r2, r3
 80038f0:	ee07 3a90 	vmov	s15, r3
 80038f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80038f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038fc:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8003900:	ee07 3a90 	vmov	s15, r3
 8003904:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003908:	ee77 7a27 	vadd.f32	s15, s14, s15
 800390c:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	ee07 3a90 	vmov	s15, r3
}
 8003916:	eeb0 0a67 	vmov.f32	s0, s15
 800391a:	3720      	adds	r7, #32
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}

08003920 <BSP_LED_Init>:
  * @param  Led  LED to be initialized. 
  *              This parameter can be one of the following values:
  *                @arg  LED2
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b088      	sub	sp, #32
 8003924:	af00      	add	r7, sp, #0
 8003926:	4603      	mov	r3, r0
 8003928:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;
  
  LEDx_GPIO_CLK_ENABLE(Led);
 800392a:	79fb      	ldrb	r3, [r7, #7]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d10b      	bne.n	8003948 <BSP_LED_Init+0x28>
 8003930:	4b11      	ldr	r3, [pc, #68]	; (8003978 <BSP_LED_Init+0x58>)
 8003932:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003934:	4a10      	ldr	r2, [pc, #64]	; (8003978 <BSP_LED_Init+0x58>)
 8003936:	f043 0302 	orr.w	r3, r3, #2
 800393a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800393c:	4b0e      	ldr	r3, [pc, #56]	; (8003978 <BSP_LED_Init+0x58>)
 800393e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003940:	f003 0302 	and.w	r3, r3, #2
 8003944:	60bb      	str	r3, [r7, #8]
 8003946:	68bb      	ldr	r3, [r7, #8]
  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = GPIO_PIN[Led];
 8003948:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800394c:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 800394e:	2301      	movs	r3, #1
 8003950:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8003952:	2300      	movs	r3, #0
 8003954:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8003956:	2302      	movs	r3, #2
 8003958:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpio_init_structure);
 800395a:	79fb      	ldrb	r3, [r7, #7]
 800395c:	4a07      	ldr	r2, [pc, #28]	; (800397c <BSP_LED_Init+0x5c>)
 800395e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003962:	f107 020c 	add.w	r2, r7, #12
 8003966:	4611      	mov	r1, r2
 8003968:	4618      	mov	r0, r3
 800396a:	f001 fbc3 	bl	80050f4 <HAL_GPIO_Init>
}
 800396e:	bf00      	nop
 8003970:	3720      	adds	r7, #32
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
 8003976:	bf00      	nop
 8003978:	40021000 	.word	0x40021000
 800397c:	20000014 	.word	0x20000014

08003980 <BSP_PB_Init>:
  *                      @arg  BUTTON_MODE_GPIO  Button will be used as simple IO
  *                      @arg  BUTTON_MODE_EXTI  Button will be connected to EXTI line 
  *                                              with interrupt generation capability  
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b088      	sub	sp, #32
 8003984:	af00      	add	r7, sp, #0
 8003986:	4603      	mov	r3, r0
 8003988:	460a      	mov	r2, r1
 800398a:	71fb      	strb	r3, [r7, #7]
 800398c:	4613      	mov	r3, r2
 800398e:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the BUTTON clock */
  USER_BUTTON_GPIO_CLK_ENABLE();
 8003990:	4b24      	ldr	r3, [pc, #144]	; (8003a24 <BSP_PB_Init+0xa4>)
 8003992:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003994:	4a23      	ldr	r2, [pc, #140]	; (8003a24 <BSP_PB_Init+0xa4>)
 8003996:	f043 0304 	orr.w	r3, r3, #4
 800399a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800399c:	4b21      	ldr	r3, [pc, #132]	; (8003a24 <BSP_PB_Init+0xa4>)
 800399e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039a0:	f003 0304 	and.w	r3, r3, #4
 80039a4:	60bb      	str	r3, [r7, #8]
 80039a6:	68bb      	ldr	r3, [r7, #8]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 80039a8:	79bb      	ldrb	r3, [r7, #6]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d112      	bne.n	80039d4 <BSP_PB_Init+0x54>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 80039ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80039b2:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80039b4:	2300      	movs	r3, #0
 80039b6:	613b      	str	r3, [r7, #16]
    gpio_init_structure.Pull = GPIO_PULLUP;
 80039b8:	2301      	movs	r3, #1
 80039ba:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80039bc:	2302      	movs	r3, #2
 80039be:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80039c0:	79fb      	ldrb	r3, [r7, #7]
 80039c2:	4a19      	ldr	r2, [pc, #100]	; (8003a28 <BSP_PB_Init+0xa8>)
 80039c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039c8:	f107 020c 	add.w	r2, r7, #12
 80039cc:	4611      	mov	r1, r2
 80039ce:	4618      	mov	r0, r3
 80039d0:	f001 fb90 	bl	80050f4 <HAL_GPIO_Init>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 80039d4:	79bb      	ldrb	r3, [r7, #6]
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d11f      	bne.n	8003a1a <BSP_PB_Init+0x9a>
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 80039da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80039de:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Pull = GPIO_PULLUP;
 80039e0:	2301      	movs	r3, #1
 80039e2:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039e4:	2303      	movs	r3, #3
 80039e6:	61bb      	str	r3, [r7, #24]
    
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 80039e8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80039ec:	613b      	str	r3, [r7, #16]
    
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80039ee:	79fb      	ldrb	r3, [r7, #7]
 80039f0:	4a0d      	ldr	r2, [pc, #52]	; (8003a28 <BSP_PB_Init+0xa8>)
 80039f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039f6:	f107 020c 	add.w	r2, r7, #12
 80039fa:	4611      	mov	r1, r2
 80039fc:	4618      	mov	r0, r3
 80039fe:	f001 fb79 	bl	80050f4 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8003a02:	2328      	movs	r3, #40	; 0x28
 8003a04:	b25b      	sxtb	r3, r3
 8003a06:	2200      	movs	r2, #0
 8003a08:	210f      	movs	r1, #15
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f000 fb59 	bl	80040c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8003a10:	2328      	movs	r3, #40	; 0x28
 8003a12:	b25b      	sxtb	r3, r3
 8003a14:	4618      	mov	r0, r3
 8003a16:	f000 fb70 	bl	80040fa <HAL_NVIC_EnableIRQ>
  }
}
 8003a1a:	bf00      	nop
 8003a1c:	3720      	adds	r7, #32
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	bf00      	nop
 8003a24:	40021000 	.word	0x40021000
 8003a28:	20000018 	.word	0x20000018

08003a2c <BSP_COM_Init>:
  *                @arg  COM1 
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains the
  *                configuration information for the specified USART peripheral.
  */
void BSP_COM_Init(COM_TypeDef COM, UART_HandleTypeDef *huart)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b08a      	sub	sp, #40	; 0x28
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	4603      	mov	r3, r0
 8003a34:	6039      	str	r1, [r7, #0]
 8003a36:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable GPIO clock */
  DISCOVERY_COMx_TX_GPIO_CLK_ENABLE(COM);
 8003a38:	79fb      	ldrb	r3, [r7, #7]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d10b      	bne.n	8003a56 <BSP_COM_Init+0x2a>
 8003a3e:	4b2d      	ldr	r3, [pc, #180]	; (8003af4 <BSP_COM_Init+0xc8>)
 8003a40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a42:	4a2c      	ldr	r2, [pc, #176]	; (8003af4 <BSP_COM_Init+0xc8>)
 8003a44:	f043 0302 	orr.w	r3, r3, #2
 8003a48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003a4a:	4b2a      	ldr	r3, [pc, #168]	; (8003af4 <BSP_COM_Init+0xc8>)
 8003a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a4e:	f003 0302 	and.w	r3, r3, #2
 8003a52:	613b      	str	r3, [r7, #16]
 8003a54:	693b      	ldr	r3, [r7, #16]
  DISCOVERY_COMx_RX_GPIO_CLK_ENABLE(COM);
 8003a56:	79fb      	ldrb	r3, [r7, #7]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d10b      	bne.n	8003a74 <BSP_COM_Init+0x48>
 8003a5c:	4b25      	ldr	r3, [pc, #148]	; (8003af4 <BSP_COM_Init+0xc8>)
 8003a5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a60:	4a24      	ldr	r2, [pc, #144]	; (8003af4 <BSP_COM_Init+0xc8>)
 8003a62:	f043 0302 	orr.w	r3, r3, #2
 8003a66:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003a68:	4b22      	ldr	r3, [pc, #136]	; (8003af4 <BSP_COM_Init+0xc8>)
 8003a6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a6c:	f003 0302 	and.w	r3, r3, #2
 8003a70:	60fb      	str	r3, [r7, #12]
 8003a72:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  DISCOVERY_COMx_CLK_ENABLE(COM);
 8003a74:	79fb      	ldrb	r3, [r7, #7]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d10b      	bne.n	8003a92 <BSP_COM_Init+0x66>
 8003a7a:	4b1e      	ldr	r3, [pc, #120]	; (8003af4 <BSP_COM_Init+0xc8>)
 8003a7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a7e:	4a1d      	ldr	r2, [pc, #116]	; (8003af4 <BSP_COM_Init+0xc8>)
 8003a80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a84:	6613      	str	r3, [r2, #96]	; 0x60
 8003a86:	4b1b      	ldr	r3, [pc, #108]	; (8003af4 <BSP_COM_Init+0xc8>)
 8003a88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a8e:	60bb      	str	r3, [r7, #8]
 8003a90:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM_TX_PIN[COM];
 8003a92:	2340      	movs	r3, #64	; 0x40
 8003a94:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8003a96:	2302      	movs	r3, #2
 8003a98:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8003a9a:	2302      	movs	r3, #2
 8003a9c:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM_TX_AF[COM];
 8003aa2:	2307      	movs	r3, #7
 8003aa4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(COM_TX_PORT[COM], &gpio_init_structure);
 8003aa6:	79fb      	ldrb	r3, [r7, #7]
 8003aa8:	4a13      	ldr	r2, [pc, #76]	; (8003af8 <BSP_COM_Init+0xcc>)
 8003aaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003aae:	f107 0214 	add.w	r2, r7, #20
 8003ab2:	4611      	mov	r1, r2
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f001 fb1d 	bl	80050f4 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM_RX_PIN[COM];
 8003aba:	2380      	movs	r3, #128	; 0x80
 8003abc:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8003abe:	2302      	movs	r3, #2
 8003ac0:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM_RX_AF[COM];
 8003ac2:	2307      	movs	r3, #7
 8003ac4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(COM_RX_PORT[COM], &gpio_init_structure);
 8003ac6:	79fb      	ldrb	r3, [r7, #7]
 8003ac8:	4a0c      	ldr	r2, [pc, #48]	; (8003afc <BSP_COM_Init+0xd0>)
 8003aca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ace:	f107 0214 	add.w	r2, r7, #20
 8003ad2:	4611      	mov	r1, r2
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f001 fb0d 	bl	80050f4 <HAL_GPIO_Init>

  /* USART configuration */
  huart->Instance = COM_USART[COM];
 8003ada:	79fb      	ldrb	r3, [r7, #7]
 8003adc:	4a08      	ldr	r2, [pc, #32]	; (8003b00 <BSP_COM_Init+0xd4>)
 8003ade:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	601a      	str	r2, [r3, #0]
  HAL_UART_Init(huart);
 8003ae6:	6838      	ldr	r0, [r7, #0]
 8003ae8:	f006 fa8c 	bl	800a004 <HAL_UART_Init>
}
 8003aec:	bf00      	nop
 8003aee:	3728      	adds	r7, #40	; 0x28
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}
 8003af4:	40021000 	.word	0x40021000
 8003af8:	20000020 	.word	0x20000020
 8003afc:	20000024 	.word	0x20000024
 8003b00:	2000001c 	.word	0x2000001c

08003b04 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b08a      	sub	sp, #40	; 0x28
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8003b0c:	4b27      	ldr	r3, [pc, #156]	; (8003bac <I2Cx_MspInit+0xa8>)
 8003b0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b10:	4a26      	ldr	r2, [pc, #152]	; (8003bac <I2Cx_MspInit+0xa8>)
 8003b12:	f043 0302 	orr.w	r3, r3, #2
 8003b16:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003b18:	4b24      	ldr	r3, [pc, #144]	; (8003bac <I2Cx_MspInit+0xa8>)
 8003b1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b1c:	f003 0302 	and.w	r3, r3, #2
 8003b20:	613b      	str	r3, [r7, #16]
 8003b22:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8003b24:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003b28:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8003b2a:	2312      	movs	r3, #18
 8003b2c:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b32:	2303      	movs	r3, #3
 8003b34:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8003b36:	2304      	movs	r3, #4
 8003b38:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003b3a:	f107 0314 	add.w	r3, r7, #20
 8003b3e:	4619      	mov	r1, r3
 8003b40:	481b      	ldr	r0, [pc, #108]	; (8003bb0 <I2Cx_MspInit+0xac>)
 8003b42:	f001 fad7 	bl	80050f4 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003b46:	f107 0314 	add.w	r3, r7, #20
 8003b4a:	4619      	mov	r1, r3
 8003b4c:	4818      	ldr	r0, [pc, #96]	; (8003bb0 <I2Cx_MspInit+0xac>)
 8003b4e:	f001 fad1 	bl	80050f4 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8003b52:	4b16      	ldr	r3, [pc, #88]	; (8003bac <I2Cx_MspInit+0xa8>)
 8003b54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b56:	4a15      	ldr	r2, [pc, #84]	; (8003bac <I2Cx_MspInit+0xa8>)
 8003b58:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003b5c:	6593      	str	r3, [r2, #88]	; 0x58
 8003b5e:	4b13      	ldr	r3, [pc, #76]	; (8003bac <I2Cx_MspInit+0xa8>)
 8003b60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b66:	60fb      	str	r3, [r7, #12]
 8003b68:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8003b6a:	4b10      	ldr	r3, [pc, #64]	; (8003bac <I2Cx_MspInit+0xa8>)
 8003b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b6e:	4a0f      	ldr	r2, [pc, #60]	; (8003bac <I2Cx_MspInit+0xa8>)
 8003b70:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003b74:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8003b76:	4b0d      	ldr	r3, [pc, #52]	; (8003bac <I2Cx_MspInit+0xa8>)
 8003b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b7a:	4a0c      	ldr	r2, [pc, #48]	; (8003bac <I2Cx_MspInit+0xa8>)
 8003b7c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003b80:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8003b82:	2200      	movs	r2, #0
 8003b84:	210f      	movs	r1, #15
 8003b86:	2021      	movs	r0, #33	; 0x21
 8003b88:	f000 fa9b 	bl	80040c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8003b8c:	2021      	movs	r0, #33	; 0x21
 8003b8e:	f000 fab4 	bl	80040fa <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8003b92:	2200      	movs	r2, #0
 8003b94:	210f      	movs	r1, #15
 8003b96:	2022      	movs	r0, #34	; 0x22
 8003b98:	f000 fa93 	bl	80040c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8003b9c:	2022      	movs	r0, #34	; 0x22
 8003b9e:	f000 faac 	bl	80040fa <HAL_NVIC_EnableIRQ>
}
 8003ba2:	bf00      	nop
 8003ba4:	3728      	adds	r7, #40	; 0x28
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}
 8003baa:	bf00      	nop
 8003bac:	40021000 	.word	0x40021000
 8003bb0:	48000400 	.word	0x48000400

08003bb4 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b082      	sub	sp, #8
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	4a12      	ldr	r2, [pc, #72]	; (8003c08 <I2Cx_Init+0x54>)
 8003bc0:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	4a11      	ldr	r2, [pc, #68]	; (8003c0c <I2Cx_Init+0x58>)
 8003bc6:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2200      	movs	r2, #0
 8003be4:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2200      	movs	r2, #0
 8003bea:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f7ff ff89 	bl	8003b04 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f001 fc58 	bl	80054a8 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8003bf8:	2100      	movs	r1, #0
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f002 fa18 	bl	8006030 <HAL_I2CEx_ConfigAnalogFilter>
}
 8003c00:	bf00      	nop
 8003c02:	3708      	adds	r7, #8
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}
 8003c08:	40005800 	.word	0x40005800
 8003c0c:	00702681 	.word	0x00702681

08003c10 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b08a      	sub	sp, #40	; 0x28
 8003c14:	af04      	add	r7, sp, #16
 8003c16:	60f8      	str	r0, [r7, #12]
 8003c18:	4608      	mov	r0, r1
 8003c1a:	4611      	mov	r1, r2
 8003c1c:	461a      	mov	r2, r3
 8003c1e:	4603      	mov	r3, r0
 8003c20:	72fb      	strb	r3, [r7, #11]
 8003c22:	460b      	mov	r3, r1
 8003c24:	813b      	strh	r3, [r7, #8]
 8003c26:	4613      	mov	r3, r2
 8003c28:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8003c2e:	7afb      	ldrb	r3, [r7, #11]
 8003c30:	b299      	uxth	r1, r3
 8003c32:	88f8      	ldrh	r0, [r7, #6]
 8003c34:	893a      	ldrh	r2, [r7, #8]
 8003c36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c3a:	9302      	str	r3, [sp, #8]
 8003c3c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003c3e:	9301      	str	r3, [sp, #4]
 8003c40:	6a3b      	ldr	r3, [r7, #32]
 8003c42:	9300      	str	r3, [sp, #0]
 8003c44:	4603      	mov	r3, r0
 8003c46:	68f8      	ldr	r0, [r7, #12]
 8003c48:	f001 fe20 	bl	800588c <HAL_I2C_Mem_Read>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8003c50:	7dfb      	ldrb	r3, [r7, #23]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d004      	beq.n	8003c60 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8003c56:	7afb      	ldrb	r3, [r7, #11]
 8003c58:	4619      	mov	r1, r3
 8003c5a:	68f8      	ldr	r0, [r7, #12]
 8003c5c:	f000 f832 	bl	8003cc4 <I2Cx_Error>
  }
  return status;
 8003c60:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	3718      	adds	r7, #24
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}

08003c6a <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8003c6a:	b580      	push	{r7, lr}
 8003c6c:	b08a      	sub	sp, #40	; 0x28
 8003c6e:	af04      	add	r7, sp, #16
 8003c70:	60f8      	str	r0, [r7, #12]
 8003c72:	4608      	mov	r0, r1
 8003c74:	4611      	mov	r1, r2
 8003c76:	461a      	mov	r2, r3
 8003c78:	4603      	mov	r3, r0
 8003c7a:	72fb      	strb	r3, [r7, #11]
 8003c7c:	460b      	mov	r3, r1
 8003c7e:	813b      	strh	r3, [r7, #8]
 8003c80:	4613      	mov	r3, r2
 8003c82:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003c84:	2300      	movs	r3, #0
 8003c86:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8003c88:	7afb      	ldrb	r3, [r7, #11]
 8003c8a:	b299      	uxth	r1, r3
 8003c8c:	88f8      	ldrh	r0, [r7, #6]
 8003c8e:	893a      	ldrh	r2, [r7, #8]
 8003c90:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c94:	9302      	str	r3, [sp, #8]
 8003c96:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003c98:	9301      	str	r3, [sp, #4]
 8003c9a:	6a3b      	ldr	r3, [r7, #32]
 8003c9c:	9300      	str	r3, [sp, #0]
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	68f8      	ldr	r0, [r7, #12]
 8003ca2:	f001 fcdf 	bl	8005664 <HAL_I2C_Mem_Write>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8003caa:	7dfb      	ldrb	r3, [r7, #23]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d004      	beq.n	8003cba <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8003cb0:	7afb      	ldrb	r3, [r7, #11]
 8003cb2:	4619      	mov	r1, r3
 8003cb4:	68f8      	ldr	r0, [r7, #12]
 8003cb6:	f000 f805 	bl	8003cc4 <I2Cx_Error>
  }
  return status;
 8003cba:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	3718      	adds	r7, #24
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}

08003cc4 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b082      	sub	sp, #8
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
 8003ccc:	460b      	mov	r3, r1
 8003cce:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	f001 fc84 	bl	80055de <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	f7ff ff6c 	bl	8003bb4 <I2Cx_Init>
}
 8003cdc:	bf00      	nop
 8003cde:	3708      	adds	r7, #8
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}

08003ce4 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8003ce8:	4802      	ldr	r0, [pc, #8]	; (8003cf4 <SENSOR_IO_Init+0x10>)
 8003cea:	f7ff ff63 	bl	8003bb4 <I2Cx_Init>
}
 8003cee:	bf00      	nop
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	bf00      	nop
 8003cf4:	200061fc 	.word	0x200061fc

08003cf8 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b084      	sub	sp, #16
 8003cfc:	af02      	add	r7, sp, #8
 8003cfe:	4603      	mov	r3, r0
 8003d00:	71fb      	strb	r3, [r7, #7]
 8003d02:	460b      	mov	r3, r1
 8003d04:	71bb      	strb	r3, [r7, #6]
 8003d06:	4613      	mov	r3, r2
 8003d08:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8003d0a:	79bb      	ldrb	r3, [r7, #6]
 8003d0c:	b29a      	uxth	r2, r3
 8003d0e:	79f9      	ldrb	r1, [r7, #7]
 8003d10:	2301      	movs	r3, #1
 8003d12:	9301      	str	r3, [sp, #4]
 8003d14:	1d7b      	adds	r3, r7, #5
 8003d16:	9300      	str	r3, [sp, #0]
 8003d18:	2301      	movs	r3, #1
 8003d1a:	4803      	ldr	r0, [pc, #12]	; (8003d28 <SENSOR_IO_Write+0x30>)
 8003d1c:	f7ff ffa5 	bl	8003c6a <I2Cx_WriteMultiple>
}
 8003d20:	bf00      	nop
 8003d22:	3708      	adds	r7, #8
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}
 8003d28:	200061fc 	.word	0x200061fc

08003d2c <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b086      	sub	sp, #24
 8003d30:	af02      	add	r7, sp, #8
 8003d32:	4603      	mov	r3, r0
 8003d34:	460a      	mov	r2, r1
 8003d36:	71fb      	strb	r3, [r7, #7]
 8003d38:	4613      	mov	r3, r2
 8003d3a:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8003d40:	79bb      	ldrb	r3, [r7, #6]
 8003d42:	b29a      	uxth	r2, r3
 8003d44:	79f9      	ldrb	r1, [r7, #7]
 8003d46:	2301      	movs	r3, #1
 8003d48:	9301      	str	r3, [sp, #4]
 8003d4a:	f107 030f 	add.w	r3, r7, #15
 8003d4e:	9300      	str	r3, [sp, #0]
 8003d50:	2301      	movs	r3, #1
 8003d52:	4804      	ldr	r0, [pc, #16]	; (8003d64 <SENSOR_IO_Read+0x38>)
 8003d54:	f7ff ff5c 	bl	8003c10 <I2Cx_ReadMultiple>

  return read_value;
 8003d58:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3710      	adds	r7, #16
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}
 8003d62:	bf00      	nop
 8003d64:	200061fc 	.word	0x200061fc

08003d68 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b084      	sub	sp, #16
 8003d6c:	af02      	add	r7, sp, #8
 8003d6e:	603a      	str	r2, [r7, #0]
 8003d70:	461a      	mov	r2, r3
 8003d72:	4603      	mov	r3, r0
 8003d74:	71fb      	strb	r3, [r7, #7]
 8003d76:	460b      	mov	r3, r1
 8003d78:	71bb      	strb	r3, [r7, #6]
 8003d7a:	4613      	mov	r3, r2
 8003d7c:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8003d7e:	79bb      	ldrb	r3, [r7, #6]
 8003d80:	b29a      	uxth	r2, r3
 8003d82:	79f9      	ldrb	r1, [r7, #7]
 8003d84:	88bb      	ldrh	r3, [r7, #4]
 8003d86:	9301      	str	r3, [sp, #4]
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	9300      	str	r3, [sp, #0]
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	4804      	ldr	r0, [pc, #16]	; (8003da0 <SENSOR_IO_ReadMultiple+0x38>)
 8003d90:	f7ff ff3e 	bl	8003c10 <I2Cx_ReadMultiple>
 8003d94:	4603      	mov	r3, r0
 8003d96:	b29b      	uxth	r3, r3
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	3708      	adds	r7, #8
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}
 8003da0:	200061fc 	.word	0x200061fc

08003da4 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b082      	sub	sp, #8
 8003da8:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 8003dae:	4b09      	ldr	r3, [pc, #36]	; (8003dd4 <BSP_TSENSOR_Init+0x30>)
 8003db0:	4a09      	ldr	r2, [pc, #36]	; (8003dd8 <BSP_TSENSOR_Init+0x34>)
 8003db2:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 8003db4:	f7ff ff96 	bl	8003ce4 <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 8003db8:	4b06      	ldr	r3, [pc, #24]	; (8003dd4 <BSP_TSENSOR_Init+0x30>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	2100      	movs	r1, #0
 8003dc0:	20be      	movs	r0, #190	; 0xbe
 8003dc2:	4798      	blx	r3

  ret = TSENSOR_OK;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 8003dc8:	79fb      	ldrb	r3, [r7, #7]
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	3708      	adds	r7, #8
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}
 8003dd2:	bf00      	nop
 8003dd4:	200062e4 	.word	0x200062e4
 8003dd8:	20000004 	.word	0x20000004

08003ddc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b082      	sub	sp, #8
 8003de0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003de2:	2300      	movs	r3, #0
 8003de4:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003de6:	2003      	movs	r0, #3
 8003de8:	f000 f960 	bl	80040ac <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003dec:	200f      	movs	r0, #15
 8003dee:	f000 f80d 	bl	8003e0c <HAL_InitTick>
 8003df2:	4603      	mov	r3, r0
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d002      	beq.n	8003dfe <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	71fb      	strb	r3, [r7, #7]
 8003dfc:	e001      	b.n	8003e02 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003dfe:	f7fd fc63 	bl	80016c8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003e02:	79fb      	ldrb	r3, [r7, #7]
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	3708      	adds	r7, #8
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}

08003e0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b084      	sub	sp, #16
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003e14:	2300      	movs	r3, #0
 8003e16:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003e18:	4b17      	ldr	r3, [pc, #92]	; (8003e78 <HAL_InitTick+0x6c>)
 8003e1a:	781b      	ldrb	r3, [r3, #0]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d023      	beq.n	8003e68 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003e20:	4b16      	ldr	r3, [pc, #88]	; (8003e7c <HAL_InitTick+0x70>)
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	4b14      	ldr	r3, [pc, #80]	; (8003e78 <HAL_InitTick+0x6c>)
 8003e26:	781b      	ldrb	r3, [r3, #0]
 8003e28:	4619      	mov	r1, r3
 8003e2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003e32:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e36:	4618      	mov	r0, r3
 8003e38:	f000 f96d 	bl	8004116 <HAL_SYSTICK_Config>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d10f      	bne.n	8003e62 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2b0f      	cmp	r3, #15
 8003e46:	d809      	bhi.n	8003e5c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003e48:	2200      	movs	r2, #0
 8003e4a:	6879      	ldr	r1, [r7, #4]
 8003e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8003e50:	f000 f937 	bl	80040c2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003e54:	4a0a      	ldr	r2, [pc, #40]	; (8003e80 <HAL_InitTick+0x74>)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6013      	str	r3, [r2, #0]
 8003e5a:	e007      	b.n	8003e6c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	73fb      	strb	r3, [r7, #15]
 8003e60:	e004      	b.n	8003e6c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	73fb      	strb	r3, [r7, #15]
 8003e66:	e001      	b.n	8003e6c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003e6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3710      	adds	r7, #16
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}
 8003e76:	bf00      	nop
 8003e78:	2000002c 	.word	0x2000002c
 8003e7c:	20000000 	.word	0x20000000
 8003e80:	20000028 	.word	0x20000028

08003e84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003e84:	b480      	push	{r7}
 8003e86:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003e88:	4b06      	ldr	r3, [pc, #24]	; (8003ea4 <HAL_IncTick+0x20>)
 8003e8a:	781b      	ldrb	r3, [r3, #0]
 8003e8c:	461a      	mov	r2, r3
 8003e8e:	4b06      	ldr	r3, [pc, #24]	; (8003ea8 <HAL_IncTick+0x24>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4413      	add	r3, r2
 8003e94:	4a04      	ldr	r2, [pc, #16]	; (8003ea8 <HAL_IncTick+0x24>)
 8003e96:	6013      	str	r3, [r2, #0]
}
 8003e98:	bf00      	nop
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea0:	4770      	bx	lr
 8003ea2:	bf00      	nop
 8003ea4:	2000002c 	.word	0x2000002c
 8003ea8:	200062e8 	.word	0x200062e8

08003eac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003eac:	b480      	push	{r7}
 8003eae:	af00      	add	r7, sp, #0
  return uwTick;
 8003eb0:	4b03      	ldr	r3, [pc, #12]	; (8003ec0 <HAL_GetTick+0x14>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebc:	4770      	bx	lr
 8003ebe:	bf00      	nop
 8003ec0:	200062e8 	.word	0x200062e8

08003ec4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b084      	sub	sp, #16
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003ecc:	f7ff ffee 	bl	8003eac <HAL_GetTick>
 8003ed0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003edc:	d005      	beq.n	8003eea <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003ede:	4b0a      	ldr	r3, [pc, #40]	; (8003f08 <HAL_Delay+0x44>)
 8003ee0:	781b      	ldrb	r3, [r3, #0]
 8003ee2:	461a      	mov	r2, r3
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	4413      	add	r3, r2
 8003ee8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003eea:	bf00      	nop
 8003eec:	f7ff ffde 	bl	8003eac <HAL_GetTick>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	1ad3      	subs	r3, r2, r3
 8003ef6:	68fa      	ldr	r2, [r7, #12]
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d8f7      	bhi.n	8003eec <HAL_Delay+0x28>
  {
  }
}
 8003efc:	bf00      	nop
 8003efe:	bf00      	nop
 8003f00:	3710      	adds	r7, #16
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}
 8003f06:	bf00      	nop
 8003f08:	2000002c 	.word	0x2000002c

08003f0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b085      	sub	sp, #20
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	f003 0307 	and.w	r3, r3, #7
 8003f1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f1c:	4b0c      	ldr	r3, [pc, #48]	; (8003f50 <__NVIC_SetPriorityGrouping+0x44>)
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f22:	68ba      	ldr	r2, [r7, #8]
 8003f24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003f28:	4013      	ands	r3, r2
 8003f2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003f34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003f38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003f3e:	4a04      	ldr	r2, [pc, #16]	; (8003f50 <__NVIC_SetPriorityGrouping+0x44>)
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	60d3      	str	r3, [r2, #12]
}
 8003f44:	bf00      	nop
 8003f46:	3714      	adds	r7, #20
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4e:	4770      	bx	lr
 8003f50:	e000ed00 	.word	0xe000ed00

08003f54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003f54:	b480      	push	{r7}
 8003f56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003f58:	4b04      	ldr	r3, [pc, #16]	; (8003f6c <__NVIC_GetPriorityGrouping+0x18>)
 8003f5a:	68db      	ldr	r3, [r3, #12]
 8003f5c:	0a1b      	lsrs	r3, r3, #8
 8003f5e:	f003 0307 	and.w	r3, r3, #7
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	46bd      	mov	sp, r7
 8003f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6a:	4770      	bx	lr
 8003f6c:	e000ed00 	.word	0xe000ed00

08003f70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b083      	sub	sp, #12
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	4603      	mov	r3, r0
 8003f78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	db0b      	blt.n	8003f9a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f82:	79fb      	ldrb	r3, [r7, #7]
 8003f84:	f003 021f 	and.w	r2, r3, #31
 8003f88:	4907      	ldr	r1, [pc, #28]	; (8003fa8 <__NVIC_EnableIRQ+0x38>)
 8003f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f8e:	095b      	lsrs	r3, r3, #5
 8003f90:	2001      	movs	r0, #1
 8003f92:	fa00 f202 	lsl.w	r2, r0, r2
 8003f96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003f9a:	bf00      	nop
 8003f9c:	370c      	adds	r7, #12
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa4:	4770      	bx	lr
 8003fa6:	bf00      	nop
 8003fa8:	e000e100 	.word	0xe000e100

08003fac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b083      	sub	sp, #12
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	6039      	str	r1, [r7, #0]
 8003fb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003fb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	db0a      	blt.n	8003fd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	b2da      	uxtb	r2, r3
 8003fc4:	490c      	ldr	r1, [pc, #48]	; (8003ff8 <__NVIC_SetPriority+0x4c>)
 8003fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fca:	0112      	lsls	r2, r2, #4
 8003fcc:	b2d2      	uxtb	r2, r2
 8003fce:	440b      	add	r3, r1
 8003fd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003fd4:	e00a      	b.n	8003fec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	b2da      	uxtb	r2, r3
 8003fda:	4908      	ldr	r1, [pc, #32]	; (8003ffc <__NVIC_SetPriority+0x50>)
 8003fdc:	79fb      	ldrb	r3, [r7, #7]
 8003fde:	f003 030f 	and.w	r3, r3, #15
 8003fe2:	3b04      	subs	r3, #4
 8003fe4:	0112      	lsls	r2, r2, #4
 8003fe6:	b2d2      	uxtb	r2, r2
 8003fe8:	440b      	add	r3, r1
 8003fea:	761a      	strb	r2, [r3, #24]
}
 8003fec:	bf00      	nop
 8003fee:	370c      	adds	r7, #12
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff6:	4770      	bx	lr
 8003ff8:	e000e100 	.word	0xe000e100
 8003ffc:	e000ed00 	.word	0xe000ed00

08004000 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004000:	b480      	push	{r7}
 8004002:	b089      	sub	sp, #36	; 0x24
 8004004:	af00      	add	r7, sp, #0
 8004006:	60f8      	str	r0, [r7, #12]
 8004008:	60b9      	str	r1, [r7, #8]
 800400a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	f003 0307 	and.w	r3, r3, #7
 8004012:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004014:	69fb      	ldr	r3, [r7, #28]
 8004016:	f1c3 0307 	rsb	r3, r3, #7
 800401a:	2b04      	cmp	r3, #4
 800401c:	bf28      	it	cs
 800401e:	2304      	movcs	r3, #4
 8004020:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004022:	69fb      	ldr	r3, [r7, #28]
 8004024:	3304      	adds	r3, #4
 8004026:	2b06      	cmp	r3, #6
 8004028:	d902      	bls.n	8004030 <NVIC_EncodePriority+0x30>
 800402a:	69fb      	ldr	r3, [r7, #28]
 800402c:	3b03      	subs	r3, #3
 800402e:	e000      	b.n	8004032 <NVIC_EncodePriority+0x32>
 8004030:	2300      	movs	r3, #0
 8004032:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004034:	f04f 32ff 	mov.w	r2, #4294967295
 8004038:	69bb      	ldr	r3, [r7, #24]
 800403a:	fa02 f303 	lsl.w	r3, r2, r3
 800403e:	43da      	mvns	r2, r3
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	401a      	ands	r2, r3
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004048:	f04f 31ff 	mov.w	r1, #4294967295
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	fa01 f303 	lsl.w	r3, r1, r3
 8004052:	43d9      	mvns	r1, r3
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004058:	4313      	orrs	r3, r2
         );
}
 800405a:	4618      	mov	r0, r3
 800405c:	3724      	adds	r7, #36	; 0x24
 800405e:	46bd      	mov	sp, r7
 8004060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004064:	4770      	bx	lr
	...

08004068 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b082      	sub	sp, #8
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	3b01      	subs	r3, #1
 8004074:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004078:	d301      	bcc.n	800407e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800407a:	2301      	movs	r3, #1
 800407c:	e00f      	b.n	800409e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800407e:	4a0a      	ldr	r2, [pc, #40]	; (80040a8 <SysTick_Config+0x40>)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	3b01      	subs	r3, #1
 8004084:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004086:	210f      	movs	r1, #15
 8004088:	f04f 30ff 	mov.w	r0, #4294967295
 800408c:	f7ff ff8e 	bl	8003fac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004090:	4b05      	ldr	r3, [pc, #20]	; (80040a8 <SysTick_Config+0x40>)
 8004092:	2200      	movs	r2, #0
 8004094:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004096:	4b04      	ldr	r3, [pc, #16]	; (80040a8 <SysTick_Config+0x40>)
 8004098:	2207      	movs	r2, #7
 800409a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800409c:	2300      	movs	r3, #0
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3708      	adds	r7, #8
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}
 80040a6:	bf00      	nop
 80040a8:	e000e010 	.word	0xe000e010

080040ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b082      	sub	sp, #8
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80040b4:	6878      	ldr	r0, [r7, #4]
 80040b6:	f7ff ff29 	bl	8003f0c <__NVIC_SetPriorityGrouping>
}
 80040ba:	bf00      	nop
 80040bc:	3708      	adds	r7, #8
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}

080040c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80040c2:	b580      	push	{r7, lr}
 80040c4:	b086      	sub	sp, #24
 80040c6:	af00      	add	r7, sp, #0
 80040c8:	4603      	mov	r3, r0
 80040ca:	60b9      	str	r1, [r7, #8]
 80040cc:	607a      	str	r2, [r7, #4]
 80040ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80040d0:	2300      	movs	r3, #0
 80040d2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80040d4:	f7ff ff3e 	bl	8003f54 <__NVIC_GetPriorityGrouping>
 80040d8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80040da:	687a      	ldr	r2, [r7, #4]
 80040dc:	68b9      	ldr	r1, [r7, #8]
 80040de:	6978      	ldr	r0, [r7, #20]
 80040e0:	f7ff ff8e 	bl	8004000 <NVIC_EncodePriority>
 80040e4:	4602      	mov	r2, r0
 80040e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040ea:	4611      	mov	r1, r2
 80040ec:	4618      	mov	r0, r3
 80040ee:	f7ff ff5d 	bl	8003fac <__NVIC_SetPriority>
}
 80040f2:	bf00      	nop
 80040f4:	3718      	adds	r7, #24
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}

080040fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80040fa:	b580      	push	{r7, lr}
 80040fc:	b082      	sub	sp, #8
 80040fe:	af00      	add	r7, sp, #0
 8004100:	4603      	mov	r3, r0
 8004102:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004104:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004108:	4618      	mov	r0, r3
 800410a:	f7ff ff31 	bl	8003f70 <__NVIC_EnableIRQ>
}
 800410e:	bf00      	nop
 8004110:	3708      	adds	r7, #8
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}

08004116 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004116:	b580      	push	{r7, lr}
 8004118:	b082      	sub	sp, #8
 800411a:	af00      	add	r7, sp, #0
 800411c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f7ff ffa2 	bl	8004068 <SysTick_Config>
 8004124:	4603      	mov	r3, r0
}
 8004126:	4618      	mov	r0, r3
 8004128:	3708      	adds	r7, #8
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}

0800412e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800412e:	b580      	push	{r7, lr}
 8004130:	b082      	sub	sp, #8
 8004132:	af00      	add	r7, sp, #0
 8004134:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d101      	bne.n	8004140 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 800413c:	2301      	movs	r3, #1
 800413e:	e014      	b.n	800416a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	791b      	ldrb	r3, [r3, #4]
 8004144:	b2db      	uxtb	r3, r3
 8004146:	2b00      	cmp	r3, #0
 8004148:	d105      	bne.n	8004156 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2200      	movs	r2, #0
 800414e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004150:	6878      	ldr	r0, [r7, #4]
 8004152:	f7fd fadd 	bl	8001710 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2202      	movs	r2, #2
 800415a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2200      	movs	r2, #0
 8004160:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2201      	movs	r2, #1
 8004166:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004168:	2300      	movs	r3, #0
}
 800416a:	4618      	mov	r0, r3
 800416c:	3708      	adds	r7, #8
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}

08004172 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8004172:	b480      	push	{r7}
 8004174:	b083      	sub	sp, #12
 8004176:	af00      	add	r7, sp, #0
 8004178:	6078      	str	r0, [r7, #4]
 800417a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	795b      	ldrb	r3, [r3, #5]
 8004180:	2b01      	cmp	r3, #1
 8004182:	d101      	bne.n	8004188 <HAL_DAC_Start+0x16>
 8004184:	2302      	movs	r3, #2
 8004186:	e040      	b.n	800420a <HAL_DAC_Start+0x98>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2201      	movs	r2, #1
 800418c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2202      	movs	r2, #2
 8004192:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	6819      	ldr	r1, [r3, #0]
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	f003 0310 	and.w	r3, r3, #16
 80041a0:	2201      	movs	r2, #1
 80041a2:	409a      	lsls	r2, r3
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	430a      	orrs	r2, r1
 80041aa:	601a      	str	r2, [r3, #0]

#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (Channel == DAC_CHANNEL_1)
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d10f      	bne.n	80041d2 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80041bc:	2b02      	cmp	r3, #2
 80041be:	d11d      	bne.n	80041fc <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	685a      	ldr	r2, [r3, #4]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f042 0201 	orr.w	r2, r2, #1
 80041ce:	605a      	str	r2, [r3, #4]
 80041d0:	e014      	b.n	80041fc <HAL_DAC_Start+0x8a>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	f003 0310 	and.w	r3, r3, #16
 80041e2:	2102      	movs	r1, #2
 80041e4:	fa01 f303 	lsl.w	r3, r1, r3
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d107      	bne.n	80041fc <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	685a      	ldr	r2, [r3, #4]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f042 0202 	orr.w	r2, r2, #2
 80041fa:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2201      	movs	r2, #1
 8004200:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2200      	movs	r2, #0
 8004206:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004208:	2300      	movs	r3, #0
}
 800420a:	4618      	mov	r0, r3
 800420c:	370c      	adds	r7, #12
 800420e:	46bd      	mov	sp, r7
 8004210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004214:	4770      	bx	lr
	...

08004218 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b088      	sub	sp, #32
 800421c:	af00      	add	r7, sp, #0
 800421e:	60f8      	str	r0, [r7, #12]
 8004220:	60b9      	str	r1, [r7, #8]
 8004222:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8004224:	2300      	movs	r3, #0
 8004226:	61bb      	str	r3, [r7, #24]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	795b      	ldrb	r3, [r3, #5]
 800422c:	2b01      	cmp	r3, #1
 800422e:	d101      	bne.n	8004234 <HAL_DAC_ConfigChannel+0x1c>
 8004230:	2302      	movs	r3, #2
 8004232:	e137      	b.n	80044a4 <HAL_DAC_ConfigChannel+0x28c>
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2201      	movs	r2, #1
 8004238:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2202      	movs	r2, #2
 800423e:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	2b04      	cmp	r3, #4
 8004246:	f040 8081 	bne.w	800434c <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800424a:	f7ff fe2f 	bl	8003eac <HAL_GetTick>
 800424e:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d140      	bne.n	80042d8 <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004256:	e018      	b.n	800428a <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004258:	f7ff fe28 	bl	8003eac <HAL_GetTick>
 800425c:	4602      	mov	r2, r0
 800425e:	69bb      	ldr	r3, [r7, #24]
 8004260:	1ad3      	subs	r3, r2, r3
 8004262:	2b01      	cmp	r3, #1
 8004264:	d911      	bls.n	800428a <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800426c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004270:	2b00      	cmp	r3, #0
 8004272:	d00a      	beq.n	800428a <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	691b      	ldr	r3, [r3, #16]
 8004278:	f043 0208 	orr.w	r2, r3, #8
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2203      	movs	r2, #3
 8004284:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004286:	2303      	movs	r3, #3
 8004288:	e10c      	b.n	80044a4 <HAL_DAC_ConfigChannel+0x28c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004290:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004294:	2b00      	cmp	r3, #0
 8004296:	d1df      	bne.n	8004258 <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 8004298:	2001      	movs	r0, #1
 800429a:	f7ff fe13 	bl	8003ec4 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	68ba      	ldr	r2, [r7, #8]
 80042a4:	69d2      	ldr	r2, [r2, #28]
 80042a6:	641a      	str	r2, [r3, #64]	; 0x40
 80042a8:	e023      	b.n	80042f2 <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80042aa:	f7ff fdff 	bl	8003eac <HAL_GetTick>
 80042ae:	4602      	mov	r2, r0
 80042b0:	69bb      	ldr	r3, [r7, #24]
 80042b2:	1ad3      	subs	r3, r2, r3
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d90f      	bls.n	80042d8 <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042be:	2b00      	cmp	r3, #0
 80042c0:	da0a      	bge.n	80042d8 <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	691b      	ldr	r3, [r3, #16]
 80042c6:	f043 0208 	orr.w	r2, r3, #8
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2203      	movs	r2, #3
 80042d2:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80042d4:	2303      	movs	r3, #3
 80042d6:	e0e5      	b.n	80044a4 <HAL_DAC_ConfigChannel+0x28c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042de:	2b00      	cmp	r3, #0
 80042e0:	dbe3      	blt.n	80042aa <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 80042e2:	2001      	movs	r0, #1
 80042e4:	f7ff fdee 	bl	8003ec4 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	68ba      	ldr	r2, [r7, #8]
 80042ee:	69d2      	ldr	r2, [r2, #28]
 80042f0:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	f003 0310 	and.w	r3, r3, #16
 80042fe:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8004302:	fa01 f303 	lsl.w	r3, r1, r3
 8004306:	43db      	mvns	r3, r3
 8004308:	ea02 0103 	and.w	r1, r2, r3
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	6a1a      	ldr	r2, [r3, #32]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	f003 0310 	and.w	r3, r3, #16
 8004316:	409a      	lsls	r2, r3
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	430a      	orrs	r2, r1
 800431e:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	f003 0310 	and.w	r3, r3, #16
 800432c:	21ff      	movs	r1, #255	; 0xff
 800432e:	fa01 f303 	lsl.w	r3, r1, r3
 8004332:	43db      	mvns	r3, r3
 8004334:	ea02 0103 	and.w	r1, r2, r3
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	f003 0310 	and.w	r3, r3, #16
 8004342:	409a      	lsls	r2, r3
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	430a      	orrs	r2, r1
 800434a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	695b      	ldr	r3, [r3, #20]
 8004350:	2b01      	cmp	r3, #1
 8004352:	d11d      	bne.n	8004390 <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800435a:	61fb      	str	r3, [r7, #28]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	f003 0310 	and.w	r3, r3, #16
 8004362:	221f      	movs	r2, #31
 8004364:	fa02 f303 	lsl.w	r3, r2, r3
 8004368:	43db      	mvns	r3, r3
 800436a:	69fa      	ldr	r2, [r7, #28]
 800436c:	4013      	ands	r3, r2
 800436e:	61fb      	str	r3, [r7, #28]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	699b      	ldr	r3, [r3, #24]
 8004374:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	f003 0310 	and.w	r3, r3, #16
 800437c:	697a      	ldr	r2, [r7, #20]
 800437e:	fa02 f303 	lsl.w	r3, r2, r3
 8004382:	69fa      	ldr	r2, [r7, #28]
 8004384:	4313      	orrs	r3, r2
 8004386:	61fb      	str	r3, [r7, #28]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	69fa      	ldr	r2, [r7, #28]
 800438e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004396:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	f003 0310 	and.w	r3, r3, #16
 800439e:	2207      	movs	r2, #7
 80043a0:	fa02 f303 	lsl.w	r3, r2, r3
 80043a4:	43db      	mvns	r3, r3
 80043a6:	69fa      	ldr	r2, [r7, #28]
 80043a8:	4013      	ands	r3, r2
 80043aa:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	685a      	ldr	r2, [r3, #4]
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	431a      	orrs	r2, r3
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	691b      	ldr	r3, [r3, #16]
 80043ba:	4313      	orrs	r3, r2
 80043bc:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	f003 0310 	and.w	r3, r3, #16
 80043c4:	697a      	ldr	r2, [r7, #20]
 80043c6:	fa02 f303 	lsl.w	r3, r2, r3
 80043ca:	69fa      	ldr	r2, [r7, #28]
 80043cc:	4313      	orrs	r3, r2
 80043ce:	61fb      	str	r3, [r7, #28]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	69fa      	ldr	r2, [r7, #28]
 80043d6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	6819      	ldr	r1, [r3, #0]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	f003 0310 	and.w	r3, r3, #16
 80043e4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80043e8:	fa02 f303 	lsl.w	r3, r2, r3
 80043ec:	43da      	mvns	r2, r3
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	400a      	ands	r2, r1
 80043f4:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	61fb      	str	r3, [r7, #28]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	f003 0310 	and.w	r3, r3, #16
 8004404:	f640 72fe 	movw	r2, #4094	; 0xffe
 8004408:	fa02 f303 	lsl.w	r3, r2, r3
 800440c:	43db      	mvns	r3, r3
 800440e:	69fa      	ldr	r2, [r7, #28]
 8004410:	4013      	ands	r3, r2
 8004412:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	f003 0310 	and.w	r3, r3, #16
 8004420:	697a      	ldr	r2, [r7, #20]
 8004422:	fa02 f303 	lsl.w	r3, r2, r3
 8004426:	69fa      	ldr	r2, [r7, #28]
 8004428:	4313      	orrs	r3, r2
 800442a:	61fb      	str	r3, [r7, #28]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004434:	d104      	bne.n	8004440 <HAL_DAC_ConfigChannel+0x228>
  {
    tmpreg1 |= DAC_CR_HFSEL;
 8004436:	69fb      	ldr	r3, [r7, #28]
 8004438:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800443c:	61fb      	str	r3, [r7, #28]
 800443e:	e018      	b.n	8004472 <HAL_DAC_ConfigChannel+0x25a>
  }
  else
  {
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d104      	bne.n	8004452 <HAL_DAC_ConfigChannel+0x23a>
    {
      tmpreg1 &= ~(DAC_CR_HFSEL);
 8004448:	69fb      	ldr	r3, [r7, #28]
 800444a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800444e:	61fb      	str	r3, [r7, #28]
 8004450:	e00f      	b.n	8004472 <HAL_DAC_ConfigChannel+0x25a>
    }
    else /* Automatic selection */
    {
      hclkfreq = HAL_RCC_GetHCLKFreq();
 8004452:	f002 fc39 	bl	8006cc8 <HAL_RCC_GetHCLKFreq>
 8004456:	6138      	str	r0, [r7, #16]
      if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	4a14      	ldr	r2, [pc, #80]	; (80044ac <HAL_DAC_ConfigChannel+0x294>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d904      	bls.n	800446a <HAL_DAC_ConfigChannel+0x252>
      {
        /* High frequency enable when HCLK frequency higher than 80   */
         tmpreg1 |= DAC_CR_HFSEL;
 8004460:	69fb      	ldr	r3, [r7, #28]
 8004462:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004466:	61fb      	str	r3, [r7, #28]
 8004468:	e003      	b.n	8004472 <HAL_DAC_ConfigChannel+0x25a>
      }
      else
      {
        /* High frequency disable when HCLK frequency higher than 80  */
        tmpreg1 &= ~(DAC_CR_HFSEL);
 800446a:	69fb      	ldr	r3, [r7, #28]
 800446c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004470:	61fb      	str	r3, [r7, #28]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	69fa      	ldr	r2, [r7, #28]
 8004478:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	6819      	ldr	r1, [r3, #0]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	f003 0310 	and.w	r3, r3, #16
 8004486:	22c0      	movs	r2, #192	; 0xc0
 8004488:	fa02 f303 	lsl.w	r3, r2, r3
 800448c:	43da      	mvns	r2, r3
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	400a      	ands	r2, r1
 8004494:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2201      	movs	r2, #1
 800449a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2200      	movs	r2, #0
 80044a0:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80044a2:	2300      	movs	r3, #0
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	3720      	adds	r7, #32
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}
 80044ac:	04c4b400 	.word	0x04c4b400

080044b0 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b082      	sub	sp, #8
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d101      	bne.n	80044c2 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	e0ac      	b.n	800461c <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4618      	mov	r0, r3
 80044c8:	f000 faa0 	bl	8004a0c <DFSDM_GetChannelFromInstance>
 80044cc:	4603      	mov	r3, r0
 80044ce:	4a55      	ldr	r2, [pc, #340]	; (8004624 <HAL_DFSDM_ChannelInit+0x174>)
 80044d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d001      	beq.n	80044dc <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 80044d8:	2301      	movs	r3, #1
 80044da:	e09f      	b.n	800461c <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	f7fd fa2f 	bl	8001940 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 80044e2:	4b51      	ldr	r3, [pc, #324]	; (8004628 <HAL_DFSDM_ChannelInit+0x178>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	3301      	adds	r3, #1
 80044e8:	4a4f      	ldr	r2, [pc, #316]	; (8004628 <HAL_DFSDM_ChannelInit+0x178>)
 80044ea:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 80044ec:	4b4e      	ldr	r3, [pc, #312]	; (8004628 <HAL_DFSDM_ChannelInit+0x178>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d125      	bne.n	8004540 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80044f4:	4b4d      	ldr	r3, [pc, #308]	; (800462c <HAL_DFSDM_ChannelInit+0x17c>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a4c      	ldr	r2, [pc, #304]	; (800462c <HAL_DFSDM_ChannelInit+0x17c>)
 80044fa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80044fe:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8004500:	4b4a      	ldr	r3, [pc, #296]	; (800462c <HAL_DFSDM_ChannelInit+0x17c>)
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	4948      	ldr	r1, [pc, #288]	; (800462c <HAL_DFSDM_ChannelInit+0x17c>)
 800450a:	4313      	orrs	r3, r2
 800450c:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 800450e:	4b47      	ldr	r3, [pc, #284]	; (800462c <HAL_DFSDM_ChannelInit+0x17c>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a46      	ldr	r2, [pc, #280]	; (800462c <HAL_DFSDM_ChannelInit+0x17c>)
 8004514:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8004518:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	791b      	ldrb	r3, [r3, #4]
 800451e:	2b01      	cmp	r3, #1
 8004520:	d108      	bne.n	8004534 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8004522:	4b42      	ldr	r3, [pc, #264]	; (800462c <HAL_DFSDM_ChannelInit+0x17c>)
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	68db      	ldr	r3, [r3, #12]
 800452a:	3b01      	subs	r3, #1
 800452c:	041b      	lsls	r3, r3, #16
 800452e:	493f      	ldr	r1, [pc, #252]	; (800462c <HAL_DFSDM_ChannelInit+0x17c>)
 8004530:	4313      	orrs	r3, r2
 8004532:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8004534:	4b3d      	ldr	r3, [pc, #244]	; (800462c <HAL_DFSDM_ChannelInit+0x17c>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a3c      	ldr	r2, [pc, #240]	; (800462c <HAL_DFSDM_ChannelInit+0x17c>)
 800453a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800453e:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 800454e:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	6819      	ldr	r1, [r3, #0]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800455e:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8004564:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	430a      	orrs	r2, r1
 800456c:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f022 020f 	bic.w	r2, r2, #15
 800457c:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	6819      	ldr	r1, [r3, #0]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800458c:	431a      	orrs	r2, r3
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	430a      	orrs	r2, r1
 8004594:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	689a      	ldr	r2, [r3, #8]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 80045a4:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	6899      	ldr	r1, [r3, #8]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045b4:	3b01      	subs	r3, #1
 80045b6:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80045b8:	431a      	orrs	r2, r3
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	430a      	orrs	r2, r1
 80045c0:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	685a      	ldr	r2, [r3, #4]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f002 0207 	and.w	r2, r2, #7
 80045d0:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	6859      	ldr	r1, [r3, #4]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045dc:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045e2:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80045e4:	431a      	orrs	r2, r3
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	430a      	orrs	r2, r1
 80045ec:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80045fc:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2201      	movs	r2, #1
 8004602:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4618      	mov	r0, r3
 800460c:	f000 f9fe 	bl	8004a0c <DFSDM_GetChannelFromInstance>
 8004610:	4602      	mov	r2, r0
 8004612:	4904      	ldr	r1, [pc, #16]	; (8004624 <HAL_DFSDM_ChannelInit+0x174>)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 800461a:	2300      	movs	r3, #0
}
 800461c:	4618      	mov	r0, r3
 800461e:	3708      	adds	r7, #8
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}
 8004624:	200062f0 	.word	0x200062f0
 8004628:	200062ec 	.word	0x200062ec
 800462c:	40016000 	.word	0x40016000

08004630 <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b082      	sub	sp, #8
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_filter == NULL)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d101      	bne.n	8004642 <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	e0ca      	b.n	80047d8 <HAL_DFSDM_FilterInit+0x1a8>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a66      	ldr	r2, [pc, #408]	; (80047e0 <HAL_DFSDM_FilterInit+0x1b0>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d109      	bne.n	8004660 <HAL_DFSDM_FilterInit+0x30>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	685b      	ldr	r3, [r3, #4]
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8004650:	2b01      	cmp	r3, #1
 8004652:	d003      	beq.n	800465c <HAL_DFSDM_FilterInit+0x2c>
       (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	68db      	ldr	r3, [r3, #12]
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8004658:	2b01      	cmp	r3, #1
 800465a:	d101      	bne.n	8004660 <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	e0bb      	b.n	80047d8 <HAL_DFSDM_FilterInit+0x1a8>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2200      	movs	r2, #0
 8004664:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2201      	movs	r2, #1
 800466a:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2201      	movs	r2, #1
 8004670:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2200      	movs	r2, #0
 8004676:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 8004678:	6878      	ldr	r0, [r7, #4]
 800467a:	f7fd f8b5 	bl	80017e8 <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	681a      	ldr	r2, [r3, #0]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 800468c:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	7a1b      	ldrb	r3, [r3, #8]
 8004692:	2b01      	cmp	r3, #1
 8004694:	d108      	bne.n	80046a8 <HAL_DFSDM_FilterInit+0x78>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80046a4:	601a      	str	r2, [r3, #0]
 80046a6:	e007      	b.n	80046b8 <HAL_DFSDM_FilterInit+0x88>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80046b6:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	7a5b      	ldrb	r3, [r3, #9]
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d108      	bne.n	80046d2 <HAL_DFSDM_FilterInit+0xa2>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80046ce:	601a      	str	r2, [r3, #0]
 80046d0:	e007      	b.n	80046e2 <HAL_DFSDM_FilterInit+0xb2>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80046e0:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	687a      	ldr	r2, [r7, #4]
 80046ea:	6812      	ldr	r2, [r2, #0]
 80046ec:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80046f0:	f023 0308 	bic.w	r3, r3, #8
 80046f4:	6013      	str	r3, [r2, #0]
  if (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	68db      	ldr	r3, [r3, #12]
 80046fa:	2b02      	cmp	r3, #2
 80046fc:	d108      	bne.n	8004710 <HAL_DFSDM_FilterInit+0xe0>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	6819      	ldr	r1, [r3, #0]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	695a      	ldr	r2, [r3, #20]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	430a      	orrs	r2, r1
 800470e:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	7c1b      	ldrb	r3, [r3, #16]
 8004714:	2b01      	cmp	r3, #1
 8004716:	d108      	bne.n	800472a <HAL_DFSDM_FilterInit+0xfa>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	681a      	ldr	r2, [r3, #0]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f042 0210 	orr.w	r2, r2, #16
 8004726:	601a      	str	r2, [r3, #0]
 8004728:	e007      	b.n	800473a <HAL_DFSDM_FilterInit+0x10a>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f022 0210 	bic.w	r2, r2, #16
 8004738:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	7c5b      	ldrb	r3, [r3, #17]
 800473e:	2b01      	cmp	r3, #1
 8004740:	d108      	bne.n	8004754 <HAL_DFSDM_FilterInit+0x124>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	681a      	ldr	r2, [r3, #0]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f042 0220 	orr.w	r2, r2, #32
 8004750:	601a      	str	r2, [r3, #0]
 8004752:	e007      	b.n	8004764 <HAL_DFSDM_FilterInit+0x134>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f022 0220 	bic.w	r2, r2, #32
 8004762:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	695b      	ldr	r3, [r3, #20]
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	6812      	ldr	r2, [r2, #0]
 800476e:	f023 4363 	bic.w	r3, r3, #3808428032	; 0xe3000000
 8004772:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 8004776:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	6959      	ldr	r1, [r3, #20]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	69da      	ldr	r2, [r3, #28]
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6a1b      	ldr	r3, [r3, #32]
 8004786:	3b01      	subs	r3, #1
 8004788:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 800478a:	431a      	orrs	r2, r3
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004790:	3b01      	subs	r3, #1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8004792:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	430a      	orrs	r2, r1
 800479a:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	685a      	ldr	r2, [r3, #4]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	68da      	ldr	r2, [r3, #12]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	699a      	ldr	r2, [r3, #24]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	7c1a      	ldrb	r2, [r3, #16]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	681a      	ldr	r2, [r3, #0]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f042 0201 	orr.w	r2, r2, #1
 80047cc:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2201      	movs	r2, #1
 80047d2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 80047d6:	2300      	movs	r3, #0
}
 80047d8:	4618      	mov	r0, r3
 80047da:	3708      	adds	r7, #8
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}
 80047e0:	40016100 	.word	0x40016100

080047e4 <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b087      	sub	sp, #28
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	60f8      	str	r0, [r7, #12]
 80047ec:	60b9      	str	r1, [r7, #8]
 80047ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047f0:	2300      	movs	r3, #0
 80047f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d02e      	beq.n	800485c <HAL_DFSDM_FilterConfigRegChannel+0x78>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8004804:	2bff      	cmp	r3, #255	; 0xff
 8004806:	d029      	beq.n	800485c <HAL_DFSDM_FilterConfigRegChannel+0x78>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	68fa      	ldr	r2, [r7, #12]
 8004810:	6812      	ldr	r2, [r2, #0]
 8004812:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8004816:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800481a:	6013      	str	r3, [r2, #0]
    if (ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2b01      	cmp	r3, #1
 8004820:	d10d      	bne.n	800483e <HAL_DFSDM_FilterConfigRegChannel+0x5a>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)(((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	021b      	lsls	r3, r3, #8
 800482c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004830:	431a      	orrs	r2, r3
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800483a:	601a      	str	r2, [r3, #0]
 800483c:	e00a      	b.n	8004854 <HAL_DFSDM_FilterConfigRegChannel+0x70>
                                                    DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	6819      	ldr	r1, [r3, #0]
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	021b      	lsls	r3, r3, #8
 8004848:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	430a      	orrs	r2, r1
 8004852:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	687a      	ldr	r2, [r7, #4]
 8004858:	631a      	str	r2, [r3, #48]	; 0x30
 800485a:	e001      	b.n	8004860 <HAL_DFSDM_FilterConfigRegChannel+0x7c>
  }
  else
  {
    status = HAL_ERROR;
 800485c:	2301      	movs	r3, #1
 800485e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 8004860:	7dfb      	ldrb	r3, [r7, #23]
}
 8004862:	4618      	mov	r0, r3
 8004864:	371c      	adds	r7, #28
 8004866:	46bd      	mov	sp, r7
 8004868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486c:	4770      	bx	lr
	...

08004870 <HAL_DFSDM_FilterRegularStart_DMA>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStart_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   int32_t                    *pData,
                                                   uint32_t                    Length)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b086      	sub	sp, #24
 8004874:	af00      	add	r7, sp, #0
 8004876:	60f8      	str	r0, [r7, #12]
 8004878:	60b9      	str	r1, [r7, #8]
 800487a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800487c:	2300      	movs	r3, #0
 800487e:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check destination address and length */
  if ((pData == NULL) || (Length == 0U))
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d002      	beq.n	800488c <HAL_DFSDM_FilterRegularStart_DMA+0x1c>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d102      	bne.n	8004892 <HAL_DFSDM_FilterRegularStart_DMA+0x22>
  {
    status = HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	75fb      	strb	r3, [r7, #23]
 8004890:	e064      	b.n	800495c <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check that DMA is enabled for regular conversion */
  else if ((hdfsdm_filter->Instance->FLTCR1 & DFSDM_FLTCR1_RDMAEN) != DFSDM_FLTCR1_RDMAEN)
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800489c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80048a0:	d002      	beq.n	80048a8 <HAL_DFSDM_FilterRegularStart_DMA+0x38>
  {
    status = HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	75fb      	strb	r3, [r7, #23]
 80048a6:	e059      	b.n	800495c <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check parameters compatibility */
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d10e      	bne.n	80048ce <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d10a      	bne.n	80048ce <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048bc:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d105      	bne.n	80048ce <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d002      	beq.n	80048ce <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (Length != 1U))
  {
    status = HAL_ERROR;
 80048c8:	2301      	movs	r3, #1
 80048ca:	75fb      	strb	r3, [r7, #23]
 80048cc:	e046      	b.n	800495c <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d10b      	bne.n	80048ee <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d107      	bne.n	80048ee <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR))
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048e2:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80048e4:	2b20      	cmp	r3, #32
 80048e6:	d102      	bne.n	80048ee <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
  {
    status = HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	75fb      	strb	r3, [r7, #23]
 80048ec:	e036      	b.n	800495c <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check DFSDM filter state */
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d004      	beq.n	8004902 <HAL_DFSDM_FilterRegularStart_DMA+0x92>
           (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ))
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 80048fe:	2b03      	cmp	r3, #3
 8004900:	d12a      	bne.n	8004958 <HAL_DFSDM_FilterRegularStart_DMA+0xe8>
  {
    /* Set callbacks on DMA handler */
    hdfsdm_filter->hdmaReg->XferCpltCallback = DFSDM_DMARegularConvCplt;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004906:	4a18      	ldr	r2, [pc, #96]	; (8004968 <HAL_DFSDM_FilterRegularStart_DMA+0xf8>)
 8004908:	62da      	str	r2, [r3, #44]	; 0x2c
    hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800490e:	4a17      	ldr	r2, [pc, #92]	; (800496c <HAL_DFSDM_FilterRegularStart_DMA+0xfc>)
 8004910:	635a      	str	r2, [r3, #52]	; 0x34
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004916:	69db      	ldr	r3, [r3, #28]
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 8004918:	2b20      	cmp	r3, #32
 800491a:	d101      	bne.n	8004920 <HAL_DFSDM_FilterRegularStart_DMA+0xb0>
 800491c:	4a14      	ldr	r2, [pc, #80]	; (8004970 <HAL_DFSDM_FilterRegularStart_DMA+0x100>)
 800491e:	e000      	b.n	8004922 <HAL_DFSDM_FilterRegularStart_DMA+0xb2>
 8004920:	2200      	movs	r2, #0
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004926:	631a      	str	r2, [r3, #48]	; 0x30

    /* Start DMA in interrupt mode */
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	331c      	adds	r3, #28
 8004932:	4619      	mov	r1, r3
 8004934:	68ba      	ldr	r2, [r7, #8]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	f000 f9b2 	bl	8004ca0 <HAL_DMA_Start_IT>
 800493c:	4603      	mov	r3, r0
 800493e:	2b00      	cmp	r3, #0
 8004940:	d006      	beq.n	8004950 <HAL_DFSDM_FilterRegularStart_DMA+0xe0>
                         (uint32_t) pData, Length) != HAL_OK)
    {
      /* Set DFSDM filter in error state */
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	22ff      	movs	r2, #255	; 0xff
 8004946:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      status = HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	75fb      	strb	r3, [r7, #23]
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 800494e:	e005      	b.n	800495c <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
    else
    {
      /* Start regular conversion */
      DFSDM_RegConvStart(hdfsdm_filter);
 8004950:	68f8      	ldr	r0, [r7, #12]
 8004952:	f000 f8a7 	bl	8004aa4 <DFSDM_RegConvStart>
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8004956:	e001      	b.n	800495c <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004958:	2301      	movs	r3, #1
 800495a:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 800495c:	7dfb      	ldrb	r3, [r7, #23]
}
 800495e:	4618      	mov	r0, r3
 8004960:	3718      	adds	r7, #24
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}
 8004966:	bf00      	nop
 8004968:	080049cd 	.word	0x080049cd
 800496c:	080049e9 	.word	0x080049e9
 8004970:	080049b1 	.word	0x080049b1

08004974 <HAL_DFSDM_FilterRegConvCpltCallback>:
  *         using HAL_DFSDM_FilterGetRegularValue.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterRegConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8004974:	b480      	push	{r7}
 8004976:	b083      	sub	sp, #12
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterRegConvCpltCallback could be implemented in the user file.
   */
}
 800497c:	bf00      	nop
 800497e:	370c      	adds	r7, #12
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr

08004988 <HAL_DFSDM_FilterRegConvHalfCpltCallback>:
  * @brief  Half regular conversion complete callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterRegConvHalfCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8004988:	b480      	push	{r7}
 800498a:	b083      	sub	sp, #12
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterRegConvHalfCpltCallback could be implemented in the user file.
   */
}
 8004990:	bf00      	nop
 8004992:	370c      	adds	r7, #12
 8004994:	46bd      	mov	sp, r7
 8004996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499a:	4770      	bx	lr

0800499c <HAL_DFSDM_FilterErrorCallback>:
  * @brief  Error callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterErrorCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 800499c:	b480      	push	{r7}
 800499e:	b083      	sub	sp, #12
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterErrorCallback could be implemented in the user file.
   */
}
 80049a4:	bf00      	nop
 80049a6:	370c      	adds	r7, #12
 80049a8:	46bd      	mov	sp, r7
 80049aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ae:	4770      	bx	lr

080049b0 <DFSDM_DMARegularHalfConvCplt>:
  * @brief  DMA half transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b084      	sub	sp, #16
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049bc:	60fb      	str	r3, [r7, #12]

  /* Call regular half conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvHalfCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvHalfCpltCallback(hdfsdm_filter);
 80049be:	68f8      	ldr	r0, [r7, #12]
 80049c0:	f7ff ffe2 	bl	8004988 <HAL_DFSDM_FilterRegConvHalfCpltCallback>
#endif
}
 80049c4:	bf00      	nop
 80049c6:	3710      	adds	r7, #16
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}

080049cc <DFSDM_DMARegularConvCplt>:
  * @brief  DMA transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularConvCplt(DMA_HandleTypeDef *hdma)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b084      	sub	sp, #16
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049d8:	60fb      	str	r3, [r7, #12]

  /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 80049da:	68f8      	ldr	r0, [r7, #12]
 80049dc:	f7ff ffca 	bl	8004974 <HAL_DFSDM_FilterRegConvCpltCallback>
#endif
}
 80049e0:	bf00      	nop
 80049e2:	3710      	adds	r7, #16
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}

080049e8 <DFSDM_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMAError(DMA_HandleTypeDef *hdma)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b084      	sub	sp, #16
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049f4:	60fb      	str	r3, [r7, #12]

  /* Update error code */
  hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_DMA;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2203      	movs	r2, #3
 80049fa:	651a      	str	r2, [r3, #80]	; 0x50

  /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 80049fc:	68f8      	ldr	r0, [r7, #12]
 80049fe:	f7ff ffcd 	bl	800499c <HAL_DFSDM_FilterErrorCallback>
#endif
}
 8004a02:	bf00      	nop
 8004a04:	3710      	adds	r7, #16
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}
	...

08004a0c <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b085      	sub	sp, #20
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	4a1c      	ldr	r2, [pc, #112]	; (8004a88 <DFSDM_GetChannelFromInstance+0x7c>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d102      	bne.n	8004a22 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	60fb      	str	r3, [r7, #12]
 8004a20:	e02b      	b.n	8004a7a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	4a19      	ldr	r2, [pc, #100]	; (8004a8c <DFSDM_GetChannelFromInstance+0x80>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d102      	bne.n	8004a30 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	60fb      	str	r3, [r7, #12]
 8004a2e:	e024      	b.n	8004a7a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	4a17      	ldr	r2, [pc, #92]	; (8004a90 <DFSDM_GetChannelFromInstance+0x84>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d102      	bne.n	8004a3e <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8004a38:	2302      	movs	r3, #2
 8004a3a:	60fb      	str	r3, [r7, #12]
 8004a3c:	e01d      	b.n	8004a7a <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	4a14      	ldr	r2, [pc, #80]	; (8004a94 <DFSDM_GetChannelFromInstance+0x88>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d102      	bne.n	8004a4c <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8004a46:	2304      	movs	r3, #4
 8004a48:	60fb      	str	r3, [r7, #12]
 8004a4a:	e016      	b.n	8004a7a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	4a12      	ldr	r2, [pc, #72]	; (8004a98 <DFSDM_GetChannelFromInstance+0x8c>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d102      	bne.n	8004a5a <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8004a54:	2305      	movs	r3, #5
 8004a56:	60fb      	str	r3, [r7, #12]
 8004a58:	e00f      	b.n	8004a7a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	4a0f      	ldr	r2, [pc, #60]	; (8004a9c <DFSDM_GetChannelFromInstance+0x90>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d102      	bne.n	8004a68 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8004a62:	2306      	movs	r3, #6
 8004a64:	60fb      	str	r3, [r7, #12]
 8004a66:	e008      	b.n	8004a7a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	4a0d      	ldr	r2, [pc, #52]	; (8004aa0 <DFSDM_GetChannelFromInstance+0x94>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d102      	bne.n	8004a76 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8004a70:	2307      	movs	r3, #7
 8004a72:	60fb      	str	r3, [r7, #12]
 8004a74:	e001      	b.n	8004a7a <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8004a76:	2303      	movs	r3, #3
 8004a78:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3714      	adds	r7, #20
 8004a80:	46bd      	mov	sp, r7
 8004a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a86:	4770      	bx	lr
 8004a88:	40016000 	.word	0x40016000
 8004a8c:	40016020 	.word	0x40016020
 8004a90:	40016040 	.word	0x40016040
 8004a94:	40016080 	.word	0x40016080
 8004a98:	400160a0 	.word	0x400160a0
 8004a9c:	400160c0 	.word	0x400160c0
 8004aa0:	400160e0 	.word	0x400160e0

08004aa4 <DFSDM_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b083      	sub	sp, #12
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  /* Check regular trigger */
  if (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d108      	bne.n	8004ac6 <DFSDM_RegConvStart+0x22>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004ac2:	601a      	str	r2, [r3, #0]
 8004ac4:	e033      	b.n	8004b2e <DFSDM_RegConvStart+0x8a>
  }
  else /* synchronous trigger */
  {
    /* Disable DFSDM filter */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f022 0201 	bic.w	r2, r2, #1
 8004ad4:	601a      	str	r2, [r3, #0]

    /* Set RSYNC bit in DFSDM_FLTCR1 register */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	681a      	ldr	r2, [r3, #0]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8004ae4:	601a      	str	r2, [r3, #0]

    /* Enable DFSDM  filter */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	681a      	ldr	r2, [r3, #0]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f042 0201 	orr.w	r2, r2, #1
 8004af4:	601a      	str	r2, [r3, #0]

    /* If injected conversion was in progress, restart it */
    if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8004afc:	2b03      	cmp	r3, #3
 8004afe:	d116      	bne.n	8004b2e <DFSDM_RegConvStart+0x8a>
    {
      if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d107      	bne.n	8004b18 <DFSDM_RegConvStart+0x74>
      {
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f042 0202 	orr.w	r2, r2, #2
 8004b16:	601a      	str	r2, [r3, #0]
      }
      /* Update remaining injected conversions */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
 8004b1e:	2b01      	cmp	r3, #1
 8004b20:	d102      	bne.n	8004b28 <DFSDM_RegConvStart+0x84>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b26:	e000      	b.n	8004b2a <DFSDM_RegConvStart+0x86>
 8004b28:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	6493      	str	r3, [r2, #72]	; 0x48
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                         HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d101      	bne.n	8004b3c <DFSDM_RegConvStart+0x98>
 8004b38:	2202      	movs	r2, #2
 8004b3a:	e000      	b.n	8004b3e <DFSDM_RegConvStart+0x9a>
 8004b3c:	2204      	movs	r2, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 8004b44:	bf00      	nop
 8004b46:	370c      	adds	r7, #12
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4e:	4770      	bx	lr

08004b50 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b084      	sub	sp, #16
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d101      	bne.n	8004b62 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e08d      	b.n	8004c7e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	461a      	mov	r2, r3
 8004b68:	4b47      	ldr	r3, [pc, #284]	; (8004c88 <HAL_DMA_Init+0x138>)
 8004b6a:	429a      	cmp	r2, r3
 8004b6c:	d80f      	bhi.n	8004b8e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	461a      	mov	r2, r3
 8004b74:	4b45      	ldr	r3, [pc, #276]	; (8004c8c <HAL_DMA_Init+0x13c>)
 8004b76:	4413      	add	r3, r2
 8004b78:	4a45      	ldr	r2, [pc, #276]	; (8004c90 <HAL_DMA_Init+0x140>)
 8004b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b7e:	091b      	lsrs	r3, r3, #4
 8004b80:	009a      	lsls	r2, r3, #2
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	4a42      	ldr	r2, [pc, #264]	; (8004c94 <HAL_DMA_Init+0x144>)
 8004b8a:	641a      	str	r2, [r3, #64]	; 0x40
 8004b8c:	e00e      	b.n	8004bac <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	461a      	mov	r2, r3
 8004b94:	4b40      	ldr	r3, [pc, #256]	; (8004c98 <HAL_DMA_Init+0x148>)
 8004b96:	4413      	add	r3, r2
 8004b98:	4a3d      	ldr	r2, [pc, #244]	; (8004c90 <HAL_DMA_Init+0x140>)
 8004b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b9e:	091b      	lsrs	r3, r3, #4
 8004ba0:	009a      	lsls	r2, r3, #2
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	4a3c      	ldr	r2, [pc, #240]	; (8004c9c <HAL_DMA_Init+0x14c>)
 8004baa:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2202      	movs	r2, #2
 8004bb0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004bc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bc6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004bd0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	691b      	ldr	r3, [r3, #16]
 8004bd6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004bdc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	699b      	ldr	r3, [r3, #24]
 8004be2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004be8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6a1b      	ldr	r3, [r3, #32]
 8004bee:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004bf0:	68fa      	ldr	r2, [r7, #12]
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	68fa      	ldr	r2, [r7, #12]
 8004bfc:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f000 fa16 	bl	8005030 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c0c:	d102      	bne.n	8004c14 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2200      	movs	r2, #0
 8004c12:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	685a      	ldr	r2, [r3, #4]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c1c:	b2d2      	uxtb	r2, r2
 8004c1e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c24:	687a      	ldr	r2, [r7, #4]
 8004c26:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004c28:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d010      	beq.n	8004c54 <HAL_DMA_Init+0x104>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	2b04      	cmp	r3, #4
 8004c38:	d80c      	bhi.n	8004c54 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f000 fa36 	bl	80050ac <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c44:	2200      	movs	r2, #0
 8004c46:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c4c:	687a      	ldr	r2, [r7, #4]
 8004c4e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004c50:	605a      	str	r2, [r3, #4]
 8004c52:	e008      	b.n	8004c66 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2200      	movs	r2, #0
 8004c58:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2200      	movs	r2, #0
 8004c64:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2201      	movs	r2, #1
 8004c70:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2200      	movs	r2, #0
 8004c78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004c7c:	2300      	movs	r3, #0
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3710      	adds	r7, #16
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}
 8004c86:	bf00      	nop
 8004c88:	40020407 	.word	0x40020407
 8004c8c:	bffdfff8 	.word	0xbffdfff8
 8004c90:	cccccccd 	.word	0xcccccccd
 8004c94:	40020000 	.word	0x40020000
 8004c98:	bffdfbf8 	.word	0xbffdfbf8
 8004c9c:	40020400 	.word	0x40020400

08004ca0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b086      	sub	sp, #24
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	60f8      	str	r0, [r7, #12]
 8004ca8:	60b9      	str	r1, [r7, #8]
 8004caa:	607a      	str	r2, [r7, #4]
 8004cac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	d101      	bne.n	8004cc0 <HAL_DMA_Start_IT+0x20>
 8004cbc:	2302      	movs	r3, #2
 8004cbe:	e066      	b.n	8004d8e <HAL_DMA_Start_IT+0xee>
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004cce:	b2db      	uxtb	r3, r3
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d155      	bne.n	8004d80 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2202      	movs	r2, #2
 8004cd8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	681a      	ldr	r2, [r3, #0]
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f022 0201 	bic.w	r2, r2, #1
 8004cf0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	687a      	ldr	r2, [r7, #4]
 8004cf6:	68b9      	ldr	r1, [r7, #8]
 8004cf8:	68f8      	ldr	r0, [r7, #12]
 8004cfa:	f000 f95a 	bl	8004fb2 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d008      	beq.n	8004d18 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f042 020e 	orr.w	r2, r2, #14
 8004d14:	601a      	str	r2, [r3, #0]
 8004d16:	e00f      	b.n	8004d38 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	681a      	ldr	r2, [r3, #0]
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f022 0204 	bic.w	r2, r2, #4
 8004d26:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f042 020a 	orr.w	r2, r2, #10
 8004d36:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d007      	beq.n	8004d56 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d54:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d007      	beq.n	8004d6e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d62:	681a      	ldr	r2, [r3, #0]
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d6c:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	681a      	ldr	r2, [r3, #0]
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f042 0201 	orr.w	r2, r2, #1
 8004d7c:	601a      	str	r2, [r3, #0]
 8004d7e:	e005      	b.n	8004d8c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2200      	movs	r2, #0
 8004d84:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004d88:	2302      	movs	r3, #2
 8004d8a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004d8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3718      	adds	r7, #24
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}

08004d96 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004d96:	b580      	push	{r7, lr}
 8004d98:	b084      	sub	sp, #16
 8004d9a:	af00      	add	r7, sp, #0
 8004d9c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004da8:	b2db      	uxtb	r3, r3
 8004daa:	2b02      	cmp	r3, #2
 8004dac:	d005      	beq.n	8004dba <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2204      	movs	r2, #4
 8004db2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004db4:	2301      	movs	r3, #1
 8004db6:	73fb      	strb	r3, [r7, #15]
 8004db8:	e047      	b.n	8004e4a <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f022 020e 	bic.w	r2, r2, #14
 8004dc8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	681a      	ldr	r2, [r3, #0]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f022 0201 	bic.w	r2, r2, #1
 8004dd8:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dde:	681a      	ldr	r2, [r3, #0]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004de4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004de8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dee:	f003 021c 	and.w	r2, r3, #28
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df6:	2101      	movs	r1, #1
 8004df8:	fa01 f202 	lsl.w	r2, r1, r2
 8004dfc:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e02:	687a      	ldr	r2, [r7, #4]
 8004e04:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004e06:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d00c      	beq.n	8004e2a <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e1a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e1e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e24:	687a      	ldr	r2, [r7, #4]
 8004e26:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004e28:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2201      	movs	r2, #1
 8004e2e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2200      	movs	r2, #0
 8004e36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d003      	beq.n	8004e4a <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	4798      	blx	r3
    }
  }
  return status;
 8004e4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	3710      	adds	r7, #16
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bd80      	pop	{r7, pc}

08004e54 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b084      	sub	sp, #16
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e70:	f003 031c 	and.w	r3, r3, #28
 8004e74:	2204      	movs	r2, #4
 8004e76:	409a      	lsls	r2, r3
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	4013      	ands	r3, r2
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d026      	beq.n	8004ece <HAL_DMA_IRQHandler+0x7a>
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	f003 0304 	and.w	r3, r3, #4
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d021      	beq.n	8004ece <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f003 0320 	and.w	r3, r3, #32
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d107      	bne.n	8004ea8 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f022 0204 	bic.w	r2, r2, #4
 8004ea6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eac:	f003 021c 	and.w	r2, r3, #28
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb4:	2104      	movs	r1, #4
 8004eb6:	fa01 f202 	lsl.w	r2, r1, r2
 8004eba:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d071      	beq.n	8004fa8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ec8:	6878      	ldr	r0, [r7, #4]
 8004eca:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004ecc:	e06c      	b.n	8004fa8 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ed2:	f003 031c 	and.w	r3, r3, #28
 8004ed6:	2202      	movs	r2, #2
 8004ed8:	409a      	lsls	r2, r3
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	4013      	ands	r3, r2
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d02e      	beq.n	8004f40 <HAL_DMA_IRQHandler+0xec>
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	f003 0302 	and.w	r3, r3, #2
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d029      	beq.n	8004f40 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f003 0320 	and.w	r3, r3, #32
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d10b      	bne.n	8004f12 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f022 020a 	bic.w	r2, r2, #10
 8004f08:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f16:	f003 021c 	and.w	r2, r3, #28
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f1e:	2102      	movs	r1, #2
 8004f20:	fa01 f202 	lsl.w	r2, r1, r2
 8004f24:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d038      	beq.n	8004fa8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004f3e:	e033      	b.n	8004fa8 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f44:	f003 031c 	and.w	r3, r3, #28
 8004f48:	2208      	movs	r2, #8
 8004f4a:	409a      	lsls	r2, r3
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	4013      	ands	r3, r2
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d02a      	beq.n	8004faa <HAL_DMA_IRQHandler+0x156>
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	f003 0308 	and.w	r3, r3, #8
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d025      	beq.n	8004faa <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	681a      	ldr	r2, [r3, #0]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f022 020e 	bic.w	r2, r2, #14
 8004f6c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f72:	f003 021c 	and.w	r2, r3, #28
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f7a:	2101      	movs	r1, #1
 8004f7c:	fa01 f202 	lsl.w	r2, r1, r2
 8004f80:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2201      	movs	r2, #1
 8004f86:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2200      	movs	r2, #0
 8004f94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d004      	beq.n	8004faa <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fa4:	6878      	ldr	r0, [r7, #4]
 8004fa6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004fa8:	bf00      	nop
 8004faa:	bf00      	nop
}
 8004fac:	3710      	adds	r7, #16
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}

08004fb2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004fb2:	b480      	push	{r7}
 8004fb4:	b085      	sub	sp, #20
 8004fb6:	af00      	add	r7, sp, #0
 8004fb8:	60f8      	str	r0, [r7, #12]
 8004fba:	60b9      	str	r1, [r7, #8]
 8004fbc:	607a      	str	r2, [r7, #4]
 8004fbe:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fc4:	68fa      	ldr	r2, [r7, #12]
 8004fc6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004fc8:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d004      	beq.n	8004fdc <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fd6:	68fa      	ldr	r2, [r7, #12]
 8004fd8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004fda:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fe0:	f003 021c 	and.w	r2, r3, #28
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe8:	2101      	movs	r1, #1
 8004fea:	fa01 f202 	lsl.w	r2, r1, r2
 8004fee:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	683a      	ldr	r2, [r7, #0]
 8004ff6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	689b      	ldr	r3, [r3, #8]
 8004ffc:	2b10      	cmp	r3, #16
 8004ffe:	d108      	bne.n	8005012 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	687a      	ldr	r2, [r7, #4]
 8005006:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	68ba      	ldr	r2, [r7, #8]
 800500e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005010:	e007      	b.n	8005022 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	68ba      	ldr	r2, [r7, #8]
 8005018:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	687a      	ldr	r2, [r7, #4]
 8005020:	60da      	str	r2, [r3, #12]
}
 8005022:	bf00      	nop
 8005024:	3714      	adds	r7, #20
 8005026:	46bd      	mov	sp, r7
 8005028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502c:	4770      	bx	lr
	...

08005030 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005030:	b480      	push	{r7}
 8005032:	b085      	sub	sp, #20
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	461a      	mov	r2, r3
 800503e:	4b17      	ldr	r3, [pc, #92]	; (800509c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8005040:	429a      	cmp	r2, r3
 8005042:	d80a      	bhi.n	800505a <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005048:	089b      	lsrs	r3, r3, #2
 800504a:	009b      	lsls	r3, r3, #2
 800504c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005050:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8005054:	687a      	ldr	r2, [r7, #4]
 8005056:	6493      	str	r3, [r2, #72]	; 0x48
 8005058:	e007      	b.n	800506a <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800505e:	089b      	lsrs	r3, r3, #2
 8005060:	009a      	lsls	r2, r3, #2
 8005062:	4b0f      	ldr	r3, [pc, #60]	; (80050a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005064:	4413      	add	r3, r2
 8005066:	687a      	ldr	r2, [r7, #4]
 8005068:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	b2db      	uxtb	r3, r3
 8005070:	3b08      	subs	r3, #8
 8005072:	4a0c      	ldr	r2, [pc, #48]	; (80050a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005074:	fba2 2303 	umull	r2, r3, r2, r3
 8005078:	091b      	lsrs	r3, r3, #4
 800507a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	4a0a      	ldr	r2, [pc, #40]	; (80050a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8005080:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	f003 031f 	and.w	r3, r3, #31
 8005088:	2201      	movs	r2, #1
 800508a:	409a      	lsls	r2, r3
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005090:	bf00      	nop
 8005092:	3714      	adds	r7, #20
 8005094:	46bd      	mov	sp, r7
 8005096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509a:	4770      	bx	lr
 800509c:	40020407 	.word	0x40020407
 80050a0:	4002081c 	.word	0x4002081c
 80050a4:	cccccccd 	.word	0xcccccccd
 80050a8:	40020880 	.word	0x40020880

080050ac <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b085      	sub	sp, #20
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	b2db      	uxtb	r3, r3
 80050ba:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80050bc:	68fa      	ldr	r2, [r7, #12]
 80050be:	4b0b      	ldr	r3, [pc, #44]	; (80050ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80050c0:	4413      	add	r3, r2
 80050c2:	009b      	lsls	r3, r3, #2
 80050c4:	461a      	mov	r2, r3
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	4a08      	ldr	r2, [pc, #32]	; (80050f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80050ce:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	3b01      	subs	r3, #1
 80050d4:	f003 0303 	and.w	r3, r3, #3
 80050d8:	2201      	movs	r2, #1
 80050da:	409a      	lsls	r2, r3
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80050e0:	bf00      	nop
 80050e2:	3714      	adds	r7, #20
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr
 80050ec:	1000823f 	.word	0x1000823f
 80050f0:	40020940 	.word	0x40020940

080050f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b087      	sub	sp, #28
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
 80050fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80050fe:	2300      	movs	r3, #0
 8005100:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005102:	e166      	b.n	80053d2 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	681a      	ldr	r2, [r3, #0]
 8005108:	2101      	movs	r1, #1
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	fa01 f303 	lsl.w	r3, r1, r3
 8005110:	4013      	ands	r3, r2
 8005112:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	2b00      	cmp	r3, #0
 8005118:	f000 8158 	beq.w	80053cc <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	f003 0303 	and.w	r3, r3, #3
 8005124:	2b01      	cmp	r3, #1
 8005126:	d005      	beq.n	8005134 <HAL_GPIO_Init+0x40>
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	f003 0303 	and.w	r3, r3, #3
 8005130:	2b02      	cmp	r3, #2
 8005132:	d130      	bne.n	8005196 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	689b      	ldr	r3, [r3, #8]
 8005138:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	005b      	lsls	r3, r3, #1
 800513e:	2203      	movs	r2, #3
 8005140:	fa02 f303 	lsl.w	r3, r2, r3
 8005144:	43db      	mvns	r3, r3
 8005146:	693a      	ldr	r2, [r7, #16]
 8005148:	4013      	ands	r3, r2
 800514a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	68da      	ldr	r2, [r3, #12]
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	005b      	lsls	r3, r3, #1
 8005154:	fa02 f303 	lsl.w	r3, r2, r3
 8005158:	693a      	ldr	r2, [r7, #16]
 800515a:	4313      	orrs	r3, r2
 800515c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	693a      	ldr	r2, [r7, #16]
 8005162:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800516a:	2201      	movs	r2, #1
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	fa02 f303 	lsl.w	r3, r2, r3
 8005172:	43db      	mvns	r3, r3
 8005174:	693a      	ldr	r2, [r7, #16]
 8005176:	4013      	ands	r3, r2
 8005178:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	091b      	lsrs	r3, r3, #4
 8005180:	f003 0201 	and.w	r2, r3, #1
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	fa02 f303 	lsl.w	r3, r2, r3
 800518a:	693a      	ldr	r2, [r7, #16]
 800518c:	4313      	orrs	r3, r2
 800518e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	693a      	ldr	r2, [r7, #16]
 8005194:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	f003 0303 	and.w	r3, r3, #3
 800519e:	2b03      	cmp	r3, #3
 80051a0:	d017      	beq.n	80051d2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	68db      	ldr	r3, [r3, #12]
 80051a6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	005b      	lsls	r3, r3, #1
 80051ac:	2203      	movs	r2, #3
 80051ae:	fa02 f303 	lsl.w	r3, r2, r3
 80051b2:	43db      	mvns	r3, r3
 80051b4:	693a      	ldr	r2, [r7, #16]
 80051b6:	4013      	ands	r3, r2
 80051b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	689a      	ldr	r2, [r3, #8]
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	005b      	lsls	r3, r3, #1
 80051c2:	fa02 f303 	lsl.w	r3, r2, r3
 80051c6:	693a      	ldr	r2, [r7, #16]
 80051c8:	4313      	orrs	r3, r2
 80051ca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	693a      	ldr	r2, [r7, #16]
 80051d0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	f003 0303 	and.w	r3, r3, #3
 80051da:	2b02      	cmp	r3, #2
 80051dc:	d123      	bne.n	8005226 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	08da      	lsrs	r2, r3, #3
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	3208      	adds	r2, #8
 80051e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	f003 0307 	and.w	r3, r3, #7
 80051f2:	009b      	lsls	r3, r3, #2
 80051f4:	220f      	movs	r2, #15
 80051f6:	fa02 f303 	lsl.w	r3, r2, r3
 80051fa:	43db      	mvns	r3, r3
 80051fc:	693a      	ldr	r2, [r7, #16]
 80051fe:	4013      	ands	r3, r2
 8005200:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	691a      	ldr	r2, [r3, #16]
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	f003 0307 	and.w	r3, r3, #7
 800520c:	009b      	lsls	r3, r3, #2
 800520e:	fa02 f303 	lsl.w	r3, r2, r3
 8005212:	693a      	ldr	r2, [r7, #16]
 8005214:	4313      	orrs	r3, r2
 8005216:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	08da      	lsrs	r2, r3, #3
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	3208      	adds	r2, #8
 8005220:	6939      	ldr	r1, [r7, #16]
 8005222:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	005b      	lsls	r3, r3, #1
 8005230:	2203      	movs	r2, #3
 8005232:	fa02 f303 	lsl.w	r3, r2, r3
 8005236:	43db      	mvns	r3, r3
 8005238:	693a      	ldr	r2, [r7, #16]
 800523a:	4013      	ands	r3, r2
 800523c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	f003 0203 	and.w	r2, r3, #3
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	005b      	lsls	r3, r3, #1
 800524a:	fa02 f303 	lsl.w	r3, r2, r3
 800524e:	693a      	ldr	r2, [r7, #16]
 8005250:	4313      	orrs	r3, r2
 8005252:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	693a      	ldr	r2, [r7, #16]
 8005258:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005262:	2b00      	cmp	r3, #0
 8005264:	f000 80b2 	beq.w	80053cc <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005268:	4b61      	ldr	r3, [pc, #388]	; (80053f0 <HAL_GPIO_Init+0x2fc>)
 800526a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800526c:	4a60      	ldr	r2, [pc, #384]	; (80053f0 <HAL_GPIO_Init+0x2fc>)
 800526e:	f043 0301 	orr.w	r3, r3, #1
 8005272:	6613      	str	r3, [r2, #96]	; 0x60
 8005274:	4b5e      	ldr	r3, [pc, #376]	; (80053f0 <HAL_GPIO_Init+0x2fc>)
 8005276:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005278:	f003 0301 	and.w	r3, r3, #1
 800527c:	60bb      	str	r3, [r7, #8]
 800527e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005280:	4a5c      	ldr	r2, [pc, #368]	; (80053f4 <HAL_GPIO_Init+0x300>)
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	089b      	lsrs	r3, r3, #2
 8005286:	3302      	adds	r3, #2
 8005288:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800528c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	f003 0303 	and.w	r3, r3, #3
 8005294:	009b      	lsls	r3, r3, #2
 8005296:	220f      	movs	r2, #15
 8005298:	fa02 f303 	lsl.w	r3, r2, r3
 800529c:	43db      	mvns	r3, r3
 800529e:	693a      	ldr	r2, [r7, #16]
 80052a0:	4013      	ands	r3, r2
 80052a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80052aa:	d02b      	beq.n	8005304 <HAL_GPIO_Init+0x210>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	4a52      	ldr	r2, [pc, #328]	; (80053f8 <HAL_GPIO_Init+0x304>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d025      	beq.n	8005300 <HAL_GPIO_Init+0x20c>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	4a51      	ldr	r2, [pc, #324]	; (80053fc <HAL_GPIO_Init+0x308>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d01f      	beq.n	80052fc <HAL_GPIO_Init+0x208>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	4a50      	ldr	r2, [pc, #320]	; (8005400 <HAL_GPIO_Init+0x30c>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d019      	beq.n	80052f8 <HAL_GPIO_Init+0x204>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	4a4f      	ldr	r2, [pc, #316]	; (8005404 <HAL_GPIO_Init+0x310>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d013      	beq.n	80052f4 <HAL_GPIO_Init+0x200>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	4a4e      	ldr	r2, [pc, #312]	; (8005408 <HAL_GPIO_Init+0x314>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d00d      	beq.n	80052f0 <HAL_GPIO_Init+0x1fc>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	4a4d      	ldr	r2, [pc, #308]	; (800540c <HAL_GPIO_Init+0x318>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d007      	beq.n	80052ec <HAL_GPIO_Init+0x1f8>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	4a4c      	ldr	r2, [pc, #304]	; (8005410 <HAL_GPIO_Init+0x31c>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d101      	bne.n	80052e8 <HAL_GPIO_Init+0x1f4>
 80052e4:	2307      	movs	r3, #7
 80052e6:	e00e      	b.n	8005306 <HAL_GPIO_Init+0x212>
 80052e8:	2308      	movs	r3, #8
 80052ea:	e00c      	b.n	8005306 <HAL_GPIO_Init+0x212>
 80052ec:	2306      	movs	r3, #6
 80052ee:	e00a      	b.n	8005306 <HAL_GPIO_Init+0x212>
 80052f0:	2305      	movs	r3, #5
 80052f2:	e008      	b.n	8005306 <HAL_GPIO_Init+0x212>
 80052f4:	2304      	movs	r3, #4
 80052f6:	e006      	b.n	8005306 <HAL_GPIO_Init+0x212>
 80052f8:	2303      	movs	r3, #3
 80052fa:	e004      	b.n	8005306 <HAL_GPIO_Init+0x212>
 80052fc:	2302      	movs	r3, #2
 80052fe:	e002      	b.n	8005306 <HAL_GPIO_Init+0x212>
 8005300:	2301      	movs	r3, #1
 8005302:	e000      	b.n	8005306 <HAL_GPIO_Init+0x212>
 8005304:	2300      	movs	r3, #0
 8005306:	697a      	ldr	r2, [r7, #20]
 8005308:	f002 0203 	and.w	r2, r2, #3
 800530c:	0092      	lsls	r2, r2, #2
 800530e:	4093      	lsls	r3, r2
 8005310:	693a      	ldr	r2, [r7, #16]
 8005312:	4313      	orrs	r3, r2
 8005314:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005316:	4937      	ldr	r1, [pc, #220]	; (80053f4 <HAL_GPIO_Init+0x300>)
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	089b      	lsrs	r3, r3, #2
 800531c:	3302      	adds	r3, #2
 800531e:	693a      	ldr	r2, [r7, #16]
 8005320:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005324:	4b3b      	ldr	r3, [pc, #236]	; (8005414 <HAL_GPIO_Init+0x320>)
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	43db      	mvns	r3, r3
 800532e:	693a      	ldr	r2, [r7, #16]
 8005330:	4013      	ands	r3, r2
 8005332:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800533c:	2b00      	cmp	r3, #0
 800533e:	d003      	beq.n	8005348 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8005340:	693a      	ldr	r2, [r7, #16]
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	4313      	orrs	r3, r2
 8005346:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005348:	4a32      	ldr	r2, [pc, #200]	; (8005414 <HAL_GPIO_Init+0x320>)
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800534e:	4b31      	ldr	r3, [pc, #196]	; (8005414 <HAL_GPIO_Init+0x320>)
 8005350:	68db      	ldr	r3, [r3, #12]
 8005352:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	43db      	mvns	r3, r3
 8005358:	693a      	ldr	r2, [r7, #16]
 800535a:	4013      	ands	r3, r2
 800535c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005366:	2b00      	cmp	r3, #0
 8005368:	d003      	beq.n	8005372 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800536a:	693a      	ldr	r2, [r7, #16]
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	4313      	orrs	r3, r2
 8005370:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005372:	4a28      	ldr	r2, [pc, #160]	; (8005414 <HAL_GPIO_Init+0x320>)
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005378:	4b26      	ldr	r3, [pc, #152]	; (8005414 <HAL_GPIO_Init+0x320>)
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	43db      	mvns	r3, r3
 8005382:	693a      	ldr	r2, [r7, #16]
 8005384:	4013      	ands	r3, r2
 8005386:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005390:	2b00      	cmp	r3, #0
 8005392:	d003      	beq.n	800539c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8005394:	693a      	ldr	r2, [r7, #16]
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	4313      	orrs	r3, r2
 800539a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800539c:	4a1d      	ldr	r2, [pc, #116]	; (8005414 <HAL_GPIO_Init+0x320>)
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80053a2:	4b1c      	ldr	r3, [pc, #112]	; (8005414 <HAL_GPIO_Init+0x320>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	43db      	mvns	r3, r3
 80053ac:	693a      	ldr	r2, [r7, #16]
 80053ae:	4013      	ands	r3, r2
 80053b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d003      	beq.n	80053c6 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80053be:	693a      	ldr	r2, [r7, #16]
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	4313      	orrs	r3, r2
 80053c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80053c6:	4a13      	ldr	r2, [pc, #76]	; (8005414 <HAL_GPIO_Init+0x320>)
 80053c8:	693b      	ldr	r3, [r7, #16]
 80053ca:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	3301      	adds	r3, #1
 80053d0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	681a      	ldr	r2, [r3, #0]
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	fa22 f303 	lsr.w	r3, r2, r3
 80053dc:	2b00      	cmp	r3, #0
 80053de:	f47f ae91 	bne.w	8005104 <HAL_GPIO_Init+0x10>
  }
}
 80053e2:	bf00      	nop
 80053e4:	bf00      	nop
 80053e6:	371c      	adds	r7, #28
 80053e8:	46bd      	mov	sp, r7
 80053ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ee:	4770      	bx	lr
 80053f0:	40021000 	.word	0x40021000
 80053f4:	40010000 	.word	0x40010000
 80053f8:	48000400 	.word	0x48000400
 80053fc:	48000800 	.word	0x48000800
 8005400:	48000c00 	.word	0x48000c00
 8005404:	48001000 	.word	0x48001000
 8005408:	48001400 	.word	0x48001400
 800540c:	48001800 	.word	0x48001800
 8005410:	48001c00 	.word	0x48001c00
 8005414:	40010400 	.word	0x40010400

08005418 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005418:	b480      	push	{r7}
 800541a:	b085      	sub	sp, #20
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
 8005420:	460b      	mov	r3, r1
 8005422:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	691a      	ldr	r2, [r3, #16]
 8005428:	887b      	ldrh	r3, [r7, #2]
 800542a:	4013      	ands	r3, r2
 800542c:	2b00      	cmp	r3, #0
 800542e:	d002      	beq.n	8005436 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005430:	2301      	movs	r3, #1
 8005432:	73fb      	strb	r3, [r7, #15]
 8005434:	e001      	b.n	800543a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005436:	2300      	movs	r3, #0
 8005438:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800543a:	7bfb      	ldrb	r3, [r7, #15]
}
 800543c:	4618      	mov	r0, r3
 800543e:	3714      	adds	r7, #20
 8005440:	46bd      	mov	sp, r7
 8005442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005446:	4770      	bx	lr

08005448 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005448:	b480      	push	{r7}
 800544a:	b083      	sub	sp, #12
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
 8005450:	460b      	mov	r3, r1
 8005452:	807b      	strh	r3, [r7, #2]
 8005454:	4613      	mov	r3, r2
 8005456:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005458:	787b      	ldrb	r3, [r7, #1]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d003      	beq.n	8005466 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800545e:	887a      	ldrh	r2, [r7, #2]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005464:	e002      	b.n	800546c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005466:	887a      	ldrh	r2, [r7, #2]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800546c:	bf00      	nop
 800546e:	370c      	adds	r7, #12
 8005470:	46bd      	mov	sp, r7
 8005472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005476:	4770      	bx	lr

08005478 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b082      	sub	sp, #8
 800547c:	af00      	add	r7, sp, #0
 800547e:	4603      	mov	r3, r0
 8005480:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005482:	4b08      	ldr	r3, [pc, #32]	; (80054a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005484:	695a      	ldr	r2, [r3, #20]
 8005486:	88fb      	ldrh	r3, [r7, #6]
 8005488:	4013      	ands	r3, r2
 800548a:	2b00      	cmp	r3, #0
 800548c:	d006      	beq.n	800549c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800548e:	4a05      	ldr	r2, [pc, #20]	; (80054a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005490:	88fb      	ldrh	r3, [r7, #6]
 8005492:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005494:	88fb      	ldrh	r3, [r7, #6]
 8005496:	4618      	mov	r0, r3
 8005498:	f7fc f8e0 	bl	800165c <HAL_GPIO_EXTI_Callback>
  }
}
 800549c:	bf00      	nop
 800549e:	3708      	adds	r7, #8
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bd80      	pop	{r7, pc}
 80054a4:	40010400 	.word	0x40010400

080054a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b082      	sub	sp, #8
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d101      	bne.n	80054ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80054b6:	2301      	movs	r3, #1
 80054b8:	e08d      	b.n	80055d6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80054c0:	b2db      	uxtb	r3, r3
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d106      	bne.n	80054d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2200      	movs	r2, #0
 80054ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f000 f8b4 	bl	800563c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2224      	movs	r2, #36	; 0x24
 80054d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	681a      	ldr	r2, [r3, #0]
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f022 0201 	bic.w	r2, r2, #1
 80054ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	685a      	ldr	r2, [r3, #4]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80054f8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	689a      	ldr	r2, [r3, #8]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005508:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	68db      	ldr	r3, [r3, #12]
 800550e:	2b01      	cmp	r3, #1
 8005510:	d107      	bne.n	8005522 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	689a      	ldr	r2, [r3, #8]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800551e:	609a      	str	r2, [r3, #8]
 8005520:	e006      	b.n	8005530 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	689a      	ldr	r2, [r3, #8]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800552e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	68db      	ldr	r3, [r3, #12]
 8005534:	2b02      	cmp	r3, #2
 8005536:	d108      	bne.n	800554a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	685a      	ldr	r2, [r3, #4]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005546:	605a      	str	r2, [r3, #4]
 8005548:	e007      	b.n	800555a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	685a      	ldr	r2, [r3, #4]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005558:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	687a      	ldr	r2, [r7, #4]
 8005562:	6812      	ldr	r2, [r2, #0]
 8005564:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005568:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800556c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	68da      	ldr	r2, [r3, #12]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800557c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	691a      	ldr	r2, [r3, #16]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	695b      	ldr	r3, [r3, #20]
 8005586:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	699b      	ldr	r3, [r3, #24]
 800558e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	430a      	orrs	r2, r1
 8005596:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	69d9      	ldr	r1, [r3, #28]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6a1a      	ldr	r2, [r3, #32]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	430a      	orrs	r2, r1
 80055a6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	681a      	ldr	r2, [r3, #0]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f042 0201 	orr.w	r2, r2, #1
 80055b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2200      	movs	r2, #0
 80055bc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2220      	movs	r2, #32
 80055c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2200      	movs	r2, #0
 80055ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2200      	movs	r2, #0
 80055d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80055d4:	2300      	movs	r3, #0
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	3708      	adds	r7, #8
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}

080055de <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80055de:	b580      	push	{r7, lr}
 80055e0:	b082      	sub	sp, #8
 80055e2:	af00      	add	r7, sp, #0
 80055e4:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d101      	bne.n	80055f0 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80055ec:	2301      	movs	r3, #1
 80055ee:	e021      	b.n	8005634 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2224      	movs	r2, #36	; 0x24
 80055f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	681a      	ldr	r2, [r3, #0]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f022 0201 	bic.w	r2, r2, #1
 8005606:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8005608:	6878      	ldr	r0, [r7, #4]
 800560a:	f000 f821 	bl	8005650 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2200      	movs	r2, #0
 8005612:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2200      	movs	r2, #0
 8005618:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2200      	movs	r2, #0
 8005620:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2200      	movs	r2, #0
 8005626:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2200      	movs	r2, #0
 800562e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005632:	2300      	movs	r3, #0
}
 8005634:	4618      	mov	r0, r3
 8005636:	3708      	adds	r7, #8
 8005638:	46bd      	mov	sp, r7
 800563a:	bd80      	pop	{r7, pc}

0800563c <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800563c:	b480      	push	{r7}
 800563e:	b083      	sub	sp, #12
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8005644:	bf00      	nop
 8005646:	370c      	adds	r7, #12
 8005648:	46bd      	mov	sp, r7
 800564a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564e:	4770      	bx	lr

08005650 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8005650:	b480      	push	{r7}
 8005652:	b083      	sub	sp, #12
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8005658:	bf00      	nop
 800565a:	370c      	adds	r7, #12
 800565c:	46bd      	mov	sp, r7
 800565e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005662:	4770      	bx	lr

08005664 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b088      	sub	sp, #32
 8005668:	af02      	add	r7, sp, #8
 800566a:	60f8      	str	r0, [r7, #12]
 800566c:	4608      	mov	r0, r1
 800566e:	4611      	mov	r1, r2
 8005670:	461a      	mov	r2, r3
 8005672:	4603      	mov	r3, r0
 8005674:	817b      	strh	r3, [r7, #10]
 8005676:	460b      	mov	r3, r1
 8005678:	813b      	strh	r3, [r7, #8]
 800567a:	4613      	mov	r3, r2
 800567c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005684:	b2db      	uxtb	r3, r3
 8005686:	2b20      	cmp	r3, #32
 8005688:	f040 80f9 	bne.w	800587e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800568c:	6a3b      	ldr	r3, [r7, #32]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d002      	beq.n	8005698 <HAL_I2C_Mem_Write+0x34>
 8005692:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005694:	2b00      	cmp	r3, #0
 8005696:	d105      	bne.n	80056a4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800569e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80056a0:	2301      	movs	r3, #1
 80056a2:	e0ed      	b.n	8005880 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80056aa:	2b01      	cmp	r3, #1
 80056ac:	d101      	bne.n	80056b2 <HAL_I2C_Mem_Write+0x4e>
 80056ae:	2302      	movs	r3, #2
 80056b0:	e0e6      	b.n	8005880 <HAL_I2C_Mem_Write+0x21c>
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2201      	movs	r2, #1
 80056b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80056ba:	f7fe fbf7 	bl	8003eac <HAL_GetTick>
 80056be:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	9300      	str	r3, [sp, #0]
 80056c4:	2319      	movs	r3, #25
 80056c6:	2201      	movs	r2, #1
 80056c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80056cc:	68f8      	ldr	r0, [r7, #12]
 80056ce:	f000 fac3 	bl	8005c58 <I2C_WaitOnFlagUntilTimeout>
 80056d2:	4603      	mov	r3, r0
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d001      	beq.n	80056dc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80056d8:	2301      	movs	r3, #1
 80056da:	e0d1      	b.n	8005880 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	2221      	movs	r2, #33	; 0x21
 80056e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2240      	movs	r2, #64	; 0x40
 80056e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2200      	movs	r2, #0
 80056f0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	6a3a      	ldr	r2, [r7, #32]
 80056f6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80056fc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2200      	movs	r2, #0
 8005702:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005704:	88f8      	ldrh	r0, [r7, #6]
 8005706:	893a      	ldrh	r2, [r7, #8]
 8005708:	8979      	ldrh	r1, [r7, #10]
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	9301      	str	r3, [sp, #4]
 800570e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005710:	9300      	str	r3, [sp, #0]
 8005712:	4603      	mov	r3, r0
 8005714:	68f8      	ldr	r0, [r7, #12]
 8005716:	f000 f9d3 	bl	8005ac0 <I2C_RequestMemoryWrite>
 800571a:	4603      	mov	r3, r0
 800571c:	2b00      	cmp	r3, #0
 800571e:	d005      	beq.n	800572c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	2200      	movs	r2, #0
 8005724:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005728:	2301      	movs	r3, #1
 800572a:	e0a9      	b.n	8005880 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005730:	b29b      	uxth	r3, r3
 8005732:	2bff      	cmp	r3, #255	; 0xff
 8005734:	d90e      	bls.n	8005754 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	22ff      	movs	r2, #255	; 0xff
 800573a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005740:	b2da      	uxtb	r2, r3
 8005742:	8979      	ldrh	r1, [r7, #10]
 8005744:	2300      	movs	r3, #0
 8005746:	9300      	str	r3, [sp, #0]
 8005748:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800574c:	68f8      	ldr	r0, [r7, #12]
 800574e:	f000 fc3d 	bl	8005fcc <I2C_TransferConfig>
 8005752:	e00f      	b.n	8005774 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005758:	b29a      	uxth	r2, r3
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005762:	b2da      	uxtb	r2, r3
 8005764:	8979      	ldrh	r1, [r7, #10]
 8005766:	2300      	movs	r3, #0
 8005768:	9300      	str	r3, [sp, #0]
 800576a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800576e:	68f8      	ldr	r0, [r7, #12]
 8005770:	f000 fc2c 	bl	8005fcc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005774:	697a      	ldr	r2, [r7, #20]
 8005776:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005778:	68f8      	ldr	r0, [r7, #12]
 800577a:	f000 fabc 	bl	8005cf6 <I2C_WaitOnTXISFlagUntilTimeout>
 800577e:	4603      	mov	r3, r0
 8005780:	2b00      	cmp	r3, #0
 8005782:	d001      	beq.n	8005788 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005784:	2301      	movs	r3, #1
 8005786:	e07b      	b.n	8005880 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800578c:	781a      	ldrb	r2, [r3, #0]
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005798:	1c5a      	adds	r2, r3, #1
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057a2:	b29b      	uxth	r3, r3
 80057a4:	3b01      	subs	r3, #1
 80057a6:	b29a      	uxth	r2, r3
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057b0:	3b01      	subs	r3, #1
 80057b2:	b29a      	uxth	r2, r3
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057bc:	b29b      	uxth	r3, r3
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d034      	beq.n	800582c <HAL_I2C_Mem_Write+0x1c8>
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d130      	bne.n	800582c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	9300      	str	r3, [sp, #0]
 80057ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057d0:	2200      	movs	r2, #0
 80057d2:	2180      	movs	r1, #128	; 0x80
 80057d4:	68f8      	ldr	r0, [r7, #12]
 80057d6:	f000 fa3f 	bl	8005c58 <I2C_WaitOnFlagUntilTimeout>
 80057da:	4603      	mov	r3, r0
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d001      	beq.n	80057e4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80057e0:	2301      	movs	r3, #1
 80057e2:	e04d      	b.n	8005880 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057e8:	b29b      	uxth	r3, r3
 80057ea:	2bff      	cmp	r3, #255	; 0xff
 80057ec:	d90e      	bls.n	800580c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	22ff      	movs	r2, #255	; 0xff
 80057f2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057f8:	b2da      	uxtb	r2, r3
 80057fa:	8979      	ldrh	r1, [r7, #10]
 80057fc:	2300      	movs	r3, #0
 80057fe:	9300      	str	r3, [sp, #0]
 8005800:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005804:	68f8      	ldr	r0, [r7, #12]
 8005806:	f000 fbe1 	bl	8005fcc <I2C_TransferConfig>
 800580a:	e00f      	b.n	800582c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005810:	b29a      	uxth	r2, r3
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800581a:	b2da      	uxtb	r2, r3
 800581c:	8979      	ldrh	r1, [r7, #10]
 800581e:	2300      	movs	r3, #0
 8005820:	9300      	str	r3, [sp, #0]
 8005822:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005826:	68f8      	ldr	r0, [r7, #12]
 8005828:	f000 fbd0 	bl	8005fcc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005830:	b29b      	uxth	r3, r3
 8005832:	2b00      	cmp	r3, #0
 8005834:	d19e      	bne.n	8005774 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005836:	697a      	ldr	r2, [r7, #20]
 8005838:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800583a:	68f8      	ldr	r0, [r7, #12]
 800583c:	f000 faa2 	bl	8005d84 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005840:	4603      	mov	r3, r0
 8005842:	2b00      	cmp	r3, #0
 8005844:	d001      	beq.n	800584a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005846:	2301      	movs	r3, #1
 8005848:	e01a      	b.n	8005880 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	2220      	movs	r2, #32
 8005850:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	6859      	ldr	r1, [r3, #4]
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681a      	ldr	r2, [r3, #0]
 800585c:	4b0a      	ldr	r3, [pc, #40]	; (8005888 <HAL_I2C_Mem_Write+0x224>)
 800585e:	400b      	ands	r3, r1
 8005860:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2220      	movs	r2, #32
 8005866:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	2200      	movs	r2, #0
 800586e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	2200      	movs	r2, #0
 8005876:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800587a:	2300      	movs	r3, #0
 800587c:	e000      	b.n	8005880 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800587e:	2302      	movs	r3, #2
  }
}
 8005880:	4618      	mov	r0, r3
 8005882:	3718      	adds	r7, #24
 8005884:	46bd      	mov	sp, r7
 8005886:	bd80      	pop	{r7, pc}
 8005888:	fe00e800 	.word	0xfe00e800

0800588c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b088      	sub	sp, #32
 8005890:	af02      	add	r7, sp, #8
 8005892:	60f8      	str	r0, [r7, #12]
 8005894:	4608      	mov	r0, r1
 8005896:	4611      	mov	r1, r2
 8005898:	461a      	mov	r2, r3
 800589a:	4603      	mov	r3, r0
 800589c:	817b      	strh	r3, [r7, #10]
 800589e:	460b      	mov	r3, r1
 80058a0:	813b      	strh	r3, [r7, #8]
 80058a2:	4613      	mov	r3, r2
 80058a4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058ac:	b2db      	uxtb	r3, r3
 80058ae:	2b20      	cmp	r3, #32
 80058b0:	f040 80fd 	bne.w	8005aae <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80058b4:	6a3b      	ldr	r3, [r7, #32]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d002      	beq.n	80058c0 <HAL_I2C_Mem_Read+0x34>
 80058ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d105      	bne.n	80058cc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058c6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80058c8:	2301      	movs	r3, #1
 80058ca:	e0f1      	b.n	8005ab0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80058d2:	2b01      	cmp	r3, #1
 80058d4:	d101      	bne.n	80058da <HAL_I2C_Mem_Read+0x4e>
 80058d6:	2302      	movs	r3, #2
 80058d8:	e0ea      	b.n	8005ab0 <HAL_I2C_Mem_Read+0x224>
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	2201      	movs	r2, #1
 80058de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80058e2:	f7fe fae3 	bl	8003eac <HAL_GetTick>
 80058e6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	9300      	str	r3, [sp, #0]
 80058ec:	2319      	movs	r3, #25
 80058ee:	2201      	movs	r2, #1
 80058f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80058f4:	68f8      	ldr	r0, [r7, #12]
 80058f6:	f000 f9af 	bl	8005c58 <I2C_WaitOnFlagUntilTimeout>
 80058fa:	4603      	mov	r3, r0
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d001      	beq.n	8005904 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005900:	2301      	movs	r3, #1
 8005902:	e0d5      	b.n	8005ab0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2222      	movs	r2, #34	; 0x22
 8005908:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	2240      	movs	r2, #64	; 0x40
 8005910:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2200      	movs	r2, #0
 8005918:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	6a3a      	ldr	r2, [r7, #32]
 800591e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005924:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	2200      	movs	r2, #0
 800592a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800592c:	88f8      	ldrh	r0, [r7, #6]
 800592e:	893a      	ldrh	r2, [r7, #8]
 8005930:	8979      	ldrh	r1, [r7, #10]
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	9301      	str	r3, [sp, #4]
 8005936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005938:	9300      	str	r3, [sp, #0]
 800593a:	4603      	mov	r3, r0
 800593c:	68f8      	ldr	r0, [r7, #12]
 800593e:	f000 f913 	bl	8005b68 <I2C_RequestMemoryRead>
 8005942:	4603      	mov	r3, r0
 8005944:	2b00      	cmp	r3, #0
 8005946:	d005      	beq.n	8005954 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2200      	movs	r2, #0
 800594c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005950:	2301      	movs	r3, #1
 8005952:	e0ad      	b.n	8005ab0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005958:	b29b      	uxth	r3, r3
 800595a:	2bff      	cmp	r3, #255	; 0xff
 800595c:	d90e      	bls.n	800597c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	22ff      	movs	r2, #255	; 0xff
 8005962:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005968:	b2da      	uxtb	r2, r3
 800596a:	8979      	ldrh	r1, [r7, #10]
 800596c:	4b52      	ldr	r3, [pc, #328]	; (8005ab8 <HAL_I2C_Mem_Read+0x22c>)
 800596e:	9300      	str	r3, [sp, #0]
 8005970:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005974:	68f8      	ldr	r0, [r7, #12]
 8005976:	f000 fb29 	bl	8005fcc <I2C_TransferConfig>
 800597a:	e00f      	b.n	800599c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005980:	b29a      	uxth	r2, r3
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800598a:	b2da      	uxtb	r2, r3
 800598c:	8979      	ldrh	r1, [r7, #10]
 800598e:	4b4a      	ldr	r3, [pc, #296]	; (8005ab8 <HAL_I2C_Mem_Read+0x22c>)
 8005990:	9300      	str	r3, [sp, #0]
 8005992:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005996:	68f8      	ldr	r0, [r7, #12]
 8005998:	f000 fb18 	bl	8005fcc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	9300      	str	r3, [sp, #0]
 80059a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059a2:	2200      	movs	r2, #0
 80059a4:	2104      	movs	r1, #4
 80059a6:	68f8      	ldr	r0, [r7, #12]
 80059a8:	f000 f956 	bl	8005c58 <I2C_WaitOnFlagUntilTimeout>
 80059ac:	4603      	mov	r3, r0
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d001      	beq.n	80059b6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80059b2:	2301      	movs	r3, #1
 80059b4:	e07c      	b.n	8005ab0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c0:	b2d2      	uxtb	r2, r2
 80059c2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c8:	1c5a      	adds	r2, r3, #1
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059d2:	3b01      	subs	r3, #1
 80059d4:	b29a      	uxth	r2, r3
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059de:	b29b      	uxth	r3, r3
 80059e0:	3b01      	subs	r3, #1
 80059e2:	b29a      	uxth	r2, r3
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059ec:	b29b      	uxth	r3, r3
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d034      	beq.n	8005a5c <HAL_I2C_Mem_Read+0x1d0>
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d130      	bne.n	8005a5c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	9300      	str	r3, [sp, #0]
 80059fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a00:	2200      	movs	r2, #0
 8005a02:	2180      	movs	r1, #128	; 0x80
 8005a04:	68f8      	ldr	r0, [r7, #12]
 8005a06:	f000 f927 	bl	8005c58 <I2C_WaitOnFlagUntilTimeout>
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d001      	beq.n	8005a14 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005a10:	2301      	movs	r3, #1
 8005a12:	e04d      	b.n	8005ab0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a18:	b29b      	uxth	r3, r3
 8005a1a:	2bff      	cmp	r3, #255	; 0xff
 8005a1c:	d90e      	bls.n	8005a3c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	22ff      	movs	r2, #255	; 0xff
 8005a22:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a28:	b2da      	uxtb	r2, r3
 8005a2a:	8979      	ldrh	r1, [r7, #10]
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	9300      	str	r3, [sp, #0]
 8005a30:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005a34:	68f8      	ldr	r0, [r7, #12]
 8005a36:	f000 fac9 	bl	8005fcc <I2C_TransferConfig>
 8005a3a:	e00f      	b.n	8005a5c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a40:	b29a      	uxth	r2, r3
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a4a:	b2da      	uxtb	r2, r3
 8005a4c:	8979      	ldrh	r1, [r7, #10]
 8005a4e:	2300      	movs	r3, #0
 8005a50:	9300      	str	r3, [sp, #0]
 8005a52:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005a56:	68f8      	ldr	r0, [r7, #12]
 8005a58:	f000 fab8 	bl	8005fcc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a60:	b29b      	uxth	r3, r3
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d19a      	bne.n	800599c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a66:	697a      	ldr	r2, [r7, #20]
 8005a68:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005a6a:	68f8      	ldr	r0, [r7, #12]
 8005a6c:	f000 f98a 	bl	8005d84 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005a70:	4603      	mov	r3, r0
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d001      	beq.n	8005a7a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005a76:	2301      	movs	r3, #1
 8005a78:	e01a      	b.n	8005ab0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	2220      	movs	r2, #32
 8005a80:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	6859      	ldr	r1, [r3, #4]
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681a      	ldr	r2, [r3, #0]
 8005a8c:	4b0b      	ldr	r3, [pc, #44]	; (8005abc <HAL_I2C_Mem_Read+0x230>)
 8005a8e:	400b      	ands	r3, r1
 8005a90:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2220      	movs	r2, #32
 8005a96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005aaa:	2300      	movs	r3, #0
 8005aac:	e000      	b.n	8005ab0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005aae:	2302      	movs	r3, #2
  }
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	3718      	adds	r7, #24
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}
 8005ab8:	80002400 	.word	0x80002400
 8005abc:	fe00e800 	.word	0xfe00e800

08005ac0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b086      	sub	sp, #24
 8005ac4:	af02      	add	r7, sp, #8
 8005ac6:	60f8      	str	r0, [r7, #12]
 8005ac8:	4608      	mov	r0, r1
 8005aca:	4611      	mov	r1, r2
 8005acc:	461a      	mov	r2, r3
 8005ace:	4603      	mov	r3, r0
 8005ad0:	817b      	strh	r3, [r7, #10]
 8005ad2:	460b      	mov	r3, r1
 8005ad4:	813b      	strh	r3, [r7, #8]
 8005ad6:	4613      	mov	r3, r2
 8005ad8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005ada:	88fb      	ldrh	r3, [r7, #6]
 8005adc:	b2da      	uxtb	r2, r3
 8005ade:	8979      	ldrh	r1, [r7, #10]
 8005ae0:	4b20      	ldr	r3, [pc, #128]	; (8005b64 <I2C_RequestMemoryWrite+0xa4>)
 8005ae2:	9300      	str	r3, [sp, #0]
 8005ae4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005ae8:	68f8      	ldr	r0, [r7, #12]
 8005aea:	f000 fa6f 	bl	8005fcc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005aee:	69fa      	ldr	r2, [r7, #28]
 8005af0:	69b9      	ldr	r1, [r7, #24]
 8005af2:	68f8      	ldr	r0, [r7, #12]
 8005af4:	f000 f8ff 	bl	8005cf6 <I2C_WaitOnTXISFlagUntilTimeout>
 8005af8:	4603      	mov	r3, r0
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d001      	beq.n	8005b02 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005afe:	2301      	movs	r3, #1
 8005b00:	e02c      	b.n	8005b5c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005b02:	88fb      	ldrh	r3, [r7, #6]
 8005b04:	2b01      	cmp	r3, #1
 8005b06:	d105      	bne.n	8005b14 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005b08:	893b      	ldrh	r3, [r7, #8]
 8005b0a:	b2da      	uxtb	r2, r3
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	629a      	str	r2, [r3, #40]	; 0x28
 8005b12:	e015      	b.n	8005b40 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005b14:	893b      	ldrh	r3, [r7, #8]
 8005b16:	0a1b      	lsrs	r3, r3, #8
 8005b18:	b29b      	uxth	r3, r3
 8005b1a:	b2da      	uxtb	r2, r3
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b22:	69fa      	ldr	r2, [r7, #28]
 8005b24:	69b9      	ldr	r1, [r7, #24]
 8005b26:	68f8      	ldr	r0, [r7, #12]
 8005b28:	f000 f8e5 	bl	8005cf6 <I2C_WaitOnTXISFlagUntilTimeout>
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d001      	beq.n	8005b36 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005b32:	2301      	movs	r3, #1
 8005b34:	e012      	b.n	8005b5c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005b36:	893b      	ldrh	r3, [r7, #8]
 8005b38:	b2da      	uxtb	r2, r3
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005b40:	69fb      	ldr	r3, [r7, #28]
 8005b42:	9300      	str	r3, [sp, #0]
 8005b44:	69bb      	ldr	r3, [r7, #24]
 8005b46:	2200      	movs	r2, #0
 8005b48:	2180      	movs	r1, #128	; 0x80
 8005b4a:	68f8      	ldr	r0, [r7, #12]
 8005b4c:	f000 f884 	bl	8005c58 <I2C_WaitOnFlagUntilTimeout>
 8005b50:	4603      	mov	r3, r0
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d001      	beq.n	8005b5a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005b56:	2301      	movs	r3, #1
 8005b58:	e000      	b.n	8005b5c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005b5a:	2300      	movs	r3, #0
}
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	3710      	adds	r7, #16
 8005b60:	46bd      	mov	sp, r7
 8005b62:	bd80      	pop	{r7, pc}
 8005b64:	80002000 	.word	0x80002000

08005b68 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b086      	sub	sp, #24
 8005b6c:	af02      	add	r7, sp, #8
 8005b6e:	60f8      	str	r0, [r7, #12]
 8005b70:	4608      	mov	r0, r1
 8005b72:	4611      	mov	r1, r2
 8005b74:	461a      	mov	r2, r3
 8005b76:	4603      	mov	r3, r0
 8005b78:	817b      	strh	r3, [r7, #10]
 8005b7a:	460b      	mov	r3, r1
 8005b7c:	813b      	strh	r3, [r7, #8]
 8005b7e:	4613      	mov	r3, r2
 8005b80:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005b82:	88fb      	ldrh	r3, [r7, #6]
 8005b84:	b2da      	uxtb	r2, r3
 8005b86:	8979      	ldrh	r1, [r7, #10]
 8005b88:	4b20      	ldr	r3, [pc, #128]	; (8005c0c <I2C_RequestMemoryRead+0xa4>)
 8005b8a:	9300      	str	r3, [sp, #0]
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	68f8      	ldr	r0, [r7, #12]
 8005b90:	f000 fa1c 	bl	8005fcc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b94:	69fa      	ldr	r2, [r7, #28]
 8005b96:	69b9      	ldr	r1, [r7, #24]
 8005b98:	68f8      	ldr	r0, [r7, #12]
 8005b9a:	f000 f8ac 	bl	8005cf6 <I2C_WaitOnTXISFlagUntilTimeout>
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d001      	beq.n	8005ba8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	e02c      	b.n	8005c02 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005ba8:	88fb      	ldrh	r3, [r7, #6]
 8005baa:	2b01      	cmp	r3, #1
 8005bac:	d105      	bne.n	8005bba <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005bae:	893b      	ldrh	r3, [r7, #8]
 8005bb0:	b2da      	uxtb	r2, r3
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	629a      	str	r2, [r3, #40]	; 0x28
 8005bb8:	e015      	b.n	8005be6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005bba:	893b      	ldrh	r3, [r7, #8]
 8005bbc:	0a1b      	lsrs	r3, r3, #8
 8005bbe:	b29b      	uxth	r3, r3
 8005bc0:	b2da      	uxtb	r2, r3
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005bc8:	69fa      	ldr	r2, [r7, #28]
 8005bca:	69b9      	ldr	r1, [r7, #24]
 8005bcc:	68f8      	ldr	r0, [r7, #12]
 8005bce:	f000 f892 	bl	8005cf6 <I2C_WaitOnTXISFlagUntilTimeout>
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d001      	beq.n	8005bdc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005bd8:	2301      	movs	r3, #1
 8005bda:	e012      	b.n	8005c02 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005bdc:	893b      	ldrh	r3, [r7, #8]
 8005bde:	b2da      	uxtb	r2, r3
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005be6:	69fb      	ldr	r3, [r7, #28]
 8005be8:	9300      	str	r3, [sp, #0]
 8005bea:	69bb      	ldr	r3, [r7, #24]
 8005bec:	2200      	movs	r2, #0
 8005bee:	2140      	movs	r1, #64	; 0x40
 8005bf0:	68f8      	ldr	r0, [r7, #12]
 8005bf2:	f000 f831 	bl	8005c58 <I2C_WaitOnFlagUntilTimeout>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d001      	beq.n	8005c00 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	e000      	b.n	8005c02 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005c00:	2300      	movs	r3, #0
}
 8005c02:	4618      	mov	r0, r3
 8005c04:	3710      	adds	r7, #16
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd80      	pop	{r7, pc}
 8005c0a:	bf00      	nop
 8005c0c:	80002000 	.word	0x80002000

08005c10 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b083      	sub	sp, #12
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	699b      	ldr	r3, [r3, #24]
 8005c1e:	f003 0302 	and.w	r3, r3, #2
 8005c22:	2b02      	cmp	r3, #2
 8005c24:	d103      	bne.n	8005c2e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	699b      	ldr	r3, [r3, #24]
 8005c34:	f003 0301 	and.w	r3, r3, #1
 8005c38:	2b01      	cmp	r3, #1
 8005c3a:	d007      	beq.n	8005c4c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	699a      	ldr	r2, [r3, #24]
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f042 0201 	orr.w	r2, r2, #1
 8005c4a:	619a      	str	r2, [r3, #24]
  }
}
 8005c4c:	bf00      	nop
 8005c4e:	370c      	adds	r7, #12
 8005c50:	46bd      	mov	sp, r7
 8005c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c56:	4770      	bx	lr

08005c58 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b084      	sub	sp, #16
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	60f8      	str	r0, [r7, #12]
 8005c60:	60b9      	str	r1, [r7, #8]
 8005c62:	603b      	str	r3, [r7, #0]
 8005c64:	4613      	mov	r3, r2
 8005c66:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005c68:	e031      	b.n	8005cce <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c70:	d02d      	beq.n	8005cce <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c72:	f7fe f91b 	bl	8003eac <HAL_GetTick>
 8005c76:	4602      	mov	r2, r0
 8005c78:	69bb      	ldr	r3, [r7, #24]
 8005c7a:	1ad3      	subs	r3, r2, r3
 8005c7c:	683a      	ldr	r2, [r7, #0]
 8005c7e:	429a      	cmp	r2, r3
 8005c80:	d302      	bcc.n	8005c88 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d122      	bne.n	8005cce <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	699a      	ldr	r2, [r3, #24]
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	4013      	ands	r3, r2
 8005c92:	68ba      	ldr	r2, [r7, #8]
 8005c94:	429a      	cmp	r2, r3
 8005c96:	bf0c      	ite	eq
 8005c98:	2301      	moveq	r3, #1
 8005c9a:	2300      	movne	r3, #0
 8005c9c:	b2db      	uxtb	r3, r3
 8005c9e:	461a      	mov	r2, r3
 8005ca0:	79fb      	ldrb	r3, [r7, #7]
 8005ca2:	429a      	cmp	r2, r3
 8005ca4:	d113      	bne.n	8005cce <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005caa:	f043 0220 	orr.w	r2, r3, #32
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	2220      	movs	r2, #32
 8005cb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8005cca:	2301      	movs	r3, #1
 8005ccc:	e00f      	b.n	8005cee <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	699a      	ldr	r2, [r3, #24]
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	4013      	ands	r3, r2
 8005cd8:	68ba      	ldr	r2, [r7, #8]
 8005cda:	429a      	cmp	r2, r3
 8005cdc:	bf0c      	ite	eq
 8005cde:	2301      	moveq	r3, #1
 8005ce0:	2300      	movne	r3, #0
 8005ce2:	b2db      	uxtb	r3, r3
 8005ce4:	461a      	mov	r2, r3
 8005ce6:	79fb      	ldrb	r3, [r7, #7]
 8005ce8:	429a      	cmp	r2, r3
 8005cea:	d0be      	beq.n	8005c6a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005cec:	2300      	movs	r3, #0
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	3710      	adds	r7, #16
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bd80      	pop	{r7, pc}

08005cf6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005cf6:	b580      	push	{r7, lr}
 8005cf8:	b084      	sub	sp, #16
 8005cfa:	af00      	add	r7, sp, #0
 8005cfc:	60f8      	str	r0, [r7, #12]
 8005cfe:	60b9      	str	r1, [r7, #8]
 8005d00:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005d02:	e033      	b.n	8005d6c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d04:	687a      	ldr	r2, [r7, #4]
 8005d06:	68b9      	ldr	r1, [r7, #8]
 8005d08:	68f8      	ldr	r0, [r7, #12]
 8005d0a:	f000 f87f 	bl	8005e0c <I2C_IsErrorOccurred>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d001      	beq.n	8005d18 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005d14:	2301      	movs	r3, #1
 8005d16:	e031      	b.n	8005d7c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d1e:	d025      	beq.n	8005d6c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d20:	f7fe f8c4 	bl	8003eac <HAL_GetTick>
 8005d24:	4602      	mov	r2, r0
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	1ad3      	subs	r3, r2, r3
 8005d2a:	68ba      	ldr	r2, [r7, #8]
 8005d2c:	429a      	cmp	r2, r3
 8005d2e:	d302      	bcc.n	8005d36 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d11a      	bne.n	8005d6c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	699b      	ldr	r3, [r3, #24]
 8005d3c:	f003 0302 	and.w	r3, r3, #2
 8005d40:	2b02      	cmp	r3, #2
 8005d42:	d013      	beq.n	8005d6c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d48:	f043 0220 	orr.w	r2, r3, #32
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	2220      	movs	r2, #32
 8005d54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	2200      	movs	r2, #0
 8005d64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005d68:	2301      	movs	r3, #1
 8005d6a:	e007      	b.n	8005d7c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	699b      	ldr	r3, [r3, #24]
 8005d72:	f003 0302 	and.w	r3, r3, #2
 8005d76:	2b02      	cmp	r3, #2
 8005d78:	d1c4      	bne.n	8005d04 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005d7a:	2300      	movs	r3, #0
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	3710      	adds	r7, #16
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}

08005d84 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b084      	sub	sp, #16
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	60f8      	str	r0, [r7, #12]
 8005d8c:	60b9      	str	r1, [r7, #8]
 8005d8e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005d90:	e02f      	b.n	8005df2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d92:	687a      	ldr	r2, [r7, #4]
 8005d94:	68b9      	ldr	r1, [r7, #8]
 8005d96:	68f8      	ldr	r0, [r7, #12]
 8005d98:	f000 f838 	bl	8005e0c <I2C_IsErrorOccurred>
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d001      	beq.n	8005da6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005da2:	2301      	movs	r3, #1
 8005da4:	e02d      	b.n	8005e02 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005da6:	f7fe f881 	bl	8003eac <HAL_GetTick>
 8005daa:	4602      	mov	r2, r0
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	1ad3      	subs	r3, r2, r3
 8005db0:	68ba      	ldr	r2, [r7, #8]
 8005db2:	429a      	cmp	r2, r3
 8005db4:	d302      	bcc.n	8005dbc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d11a      	bne.n	8005df2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	699b      	ldr	r3, [r3, #24]
 8005dc2:	f003 0320 	and.w	r3, r3, #32
 8005dc6:	2b20      	cmp	r3, #32
 8005dc8:	d013      	beq.n	8005df2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dce:	f043 0220 	orr.w	r2, r3, #32
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	2220      	movs	r2, #32
 8005dda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	2200      	movs	r2, #0
 8005de2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	2200      	movs	r2, #0
 8005dea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005dee:	2301      	movs	r3, #1
 8005df0:	e007      	b.n	8005e02 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	699b      	ldr	r3, [r3, #24]
 8005df8:	f003 0320 	and.w	r3, r3, #32
 8005dfc:	2b20      	cmp	r3, #32
 8005dfe:	d1c8      	bne.n	8005d92 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005e00:	2300      	movs	r3, #0
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	3710      	adds	r7, #16
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}
	...

08005e0c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b08a      	sub	sp, #40	; 0x28
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	60f8      	str	r0, [r7, #12]
 8005e14:	60b9      	str	r1, [r7, #8]
 8005e16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e18:	2300      	movs	r3, #0
 8005e1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	699b      	ldr	r3, [r3, #24]
 8005e24:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005e26:	2300      	movs	r3, #0
 8005e28:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005e2e:	69bb      	ldr	r3, [r7, #24]
 8005e30:	f003 0310 	and.w	r3, r3, #16
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d068      	beq.n	8005f0a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	2210      	movs	r2, #16
 8005e3e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005e40:	e049      	b.n	8005ed6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e48:	d045      	beq.n	8005ed6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005e4a:	f7fe f82f 	bl	8003eac <HAL_GetTick>
 8005e4e:	4602      	mov	r2, r0
 8005e50:	69fb      	ldr	r3, [r7, #28]
 8005e52:	1ad3      	subs	r3, r2, r3
 8005e54:	68ba      	ldr	r2, [r7, #8]
 8005e56:	429a      	cmp	r2, r3
 8005e58:	d302      	bcc.n	8005e60 <I2C_IsErrorOccurred+0x54>
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d13a      	bne.n	8005ed6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	685b      	ldr	r3, [r3, #4]
 8005e66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e6a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005e72:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	699b      	ldr	r3, [r3, #24]
 8005e7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005e7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e82:	d121      	bne.n	8005ec8 <I2C_IsErrorOccurred+0xbc>
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e8a:	d01d      	beq.n	8005ec8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005e8c:	7cfb      	ldrb	r3, [r7, #19]
 8005e8e:	2b20      	cmp	r3, #32
 8005e90:	d01a      	beq.n	8005ec8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	685a      	ldr	r2, [r3, #4]
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005ea0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005ea2:	f7fe f803 	bl	8003eac <HAL_GetTick>
 8005ea6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005ea8:	e00e      	b.n	8005ec8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005eaa:	f7fd ffff 	bl	8003eac <HAL_GetTick>
 8005eae:	4602      	mov	r2, r0
 8005eb0:	69fb      	ldr	r3, [r7, #28]
 8005eb2:	1ad3      	subs	r3, r2, r3
 8005eb4:	2b19      	cmp	r3, #25
 8005eb6:	d907      	bls.n	8005ec8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005eb8:	6a3b      	ldr	r3, [r7, #32]
 8005eba:	f043 0320 	orr.w	r3, r3, #32
 8005ebe:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8005ec6:	e006      	b.n	8005ed6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	699b      	ldr	r3, [r3, #24]
 8005ece:	f003 0320 	and.w	r3, r3, #32
 8005ed2:	2b20      	cmp	r3, #32
 8005ed4:	d1e9      	bne.n	8005eaa <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	699b      	ldr	r3, [r3, #24]
 8005edc:	f003 0320 	and.w	r3, r3, #32
 8005ee0:	2b20      	cmp	r3, #32
 8005ee2:	d003      	beq.n	8005eec <I2C_IsErrorOccurred+0xe0>
 8005ee4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d0aa      	beq.n	8005e42 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005eec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d103      	bne.n	8005efc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	2220      	movs	r2, #32
 8005efa:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005efc:	6a3b      	ldr	r3, [r7, #32]
 8005efe:	f043 0304 	orr.w	r3, r3, #4
 8005f02:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005f04:	2301      	movs	r3, #1
 8005f06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	699b      	ldr	r3, [r3, #24]
 8005f10:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005f12:	69bb      	ldr	r3, [r7, #24]
 8005f14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d00b      	beq.n	8005f34 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005f1c:	6a3b      	ldr	r3, [r7, #32]
 8005f1e:	f043 0301 	orr.w	r3, r3, #1
 8005f22:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005f2c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005f2e:	2301      	movs	r3, #1
 8005f30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005f34:	69bb      	ldr	r3, [r7, #24]
 8005f36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d00b      	beq.n	8005f56 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005f3e:	6a3b      	ldr	r3, [r7, #32]
 8005f40:	f043 0308 	orr.w	r3, r3, #8
 8005f44:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005f4e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005f50:	2301      	movs	r3, #1
 8005f52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005f56:	69bb      	ldr	r3, [r7, #24]
 8005f58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d00b      	beq.n	8005f78 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005f60:	6a3b      	ldr	r3, [r7, #32]
 8005f62:	f043 0302 	orr.w	r3, r3, #2
 8005f66:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f70:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005f72:	2301      	movs	r3, #1
 8005f74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8005f78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d01c      	beq.n	8005fba <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005f80:	68f8      	ldr	r0, [r7, #12]
 8005f82:	f7ff fe45 	bl	8005c10 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	6859      	ldr	r1, [r3, #4]
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681a      	ldr	r2, [r3, #0]
 8005f90:	4b0d      	ldr	r3, [pc, #52]	; (8005fc8 <I2C_IsErrorOccurred+0x1bc>)
 8005f92:	400b      	ands	r3, r1
 8005f94:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f9a:	6a3b      	ldr	r3, [r7, #32]
 8005f9c:	431a      	orrs	r2, r3
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2220      	movs	r2, #32
 8005fa6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2200      	movs	r2, #0
 8005fae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8005fba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	3728      	adds	r7, #40	; 0x28
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd80      	pop	{r7, pc}
 8005fc6:	bf00      	nop
 8005fc8:	fe00e800 	.word	0xfe00e800

08005fcc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005fcc:	b480      	push	{r7}
 8005fce:	b087      	sub	sp, #28
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	60f8      	str	r0, [r7, #12]
 8005fd4:	607b      	str	r3, [r7, #4]
 8005fd6:	460b      	mov	r3, r1
 8005fd8:	817b      	strh	r3, [r7, #10]
 8005fda:	4613      	mov	r3, r2
 8005fdc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005fde:	897b      	ldrh	r3, [r7, #10]
 8005fe0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005fe4:	7a7b      	ldrb	r3, [r7, #9]
 8005fe6:	041b      	lsls	r3, r3, #16
 8005fe8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005fec:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005ff2:	6a3b      	ldr	r3, [r7, #32]
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005ffa:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	685a      	ldr	r2, [r3, #4]
 8006002:	6a3b      	ldr	r3, [r7, #32]
 8006004:	0d5b      	lsrs	r3, r3, #21
 8006006:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800600a:	4b08      	ldr	r3, [pc, #32]	; (800602c <I2C_TransferConfig+0x60>)
 800600c:	430b      	orrs	r3, r1
 800600e:	43db      	mvns	r3, r3
 8006010:	ea02 0103 	and.w	r1, r2, r3
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	697a      	ldr	r2, [r7, #20]
 800601a:	430a      	orrs	r2, r1
 800601c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800601e:	bf00      	nop
 8006020:	371c      	adds	r7, #28
 8006022:	46bd      	mov	sp, r7
 8006024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006028:	4770      	bx	lr
 800602a:	bf00      	nop
 800602c:	03ff63ff 	.word	0x03ff63ff

08006030 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006030:	b480      	push	{r7}
 8006032:	b083      	sub	sp, #12
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
 8006038:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006040:	b2db      	uxtb	r3, r3
 8006042:	2b20      	cmp	r3, #32
 8006044:	d138      	bne.n	80060b8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800604c:	2b01      	cmp	r3, #1
 800604e:	d101      	bne.n	8006054 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006050:	2302      	movs	r3, #2
 8006052:	e032      	b.n	80060ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2201      	movs	r2, #1
 8006058:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2224      	movs	r2, #36	; 0x24
 8006060:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	681a      	ldr	r2, [r3, #0]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f022 0201 	bic.w	r2, r2, #1
 8006072:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	681a      	ldr	r2, [r3, #0]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006082:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	6819      	ldr	r1, [r3, #0]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	683a      	ldr	r2, [r7, #0]
 8006090:	430a      	orrs	r2, r1
 8006092:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	681a      	ldr	r2, [r3, #0]
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f042 0201 	orr.w	r2, r2, #1
 80060a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2220      	movs	r2, #32
 80060a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2200      	movs	r2, #0
 80060b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80060b4:	2300      	movs	r3, #0
 80060b6:	e000      	b.n	80060ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80060b8:	2302      	movs	r3, #2
  }
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	370c      	adds	r7, #12
 80060be:	46bd      	mov	sp, r7
 80060c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c4:	4770      	bx	lr
	...

080060c8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80060c8:	b480      	push	{r7}
 80060ca:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80060cc:	4b0d      	ldr	r3, [pc, #52]	; (8006104 <HAL_PWREx_GetVoltageRange+0x3c>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80060d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060d8:	d102      	bne.n	80060e0 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80060da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80060de:	e00b      	b.n	80060f8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80060e0:	4b08      	ldr	r3, [pc, #32]	; (8006104 <HAL_PWREx_GetVoltageRange+0x3c>)
 80060e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80060e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060ee:	d102      	bne.n	80060f6 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80060f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80060f4:	e000      	b.n	80060f8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80060f6:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80060f8:	4618      	mov	r0, r3
 80060fa:	46bd      	mov	sp, r7
 80060fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006100:	4770      	bx	lr
 8006102:	bf00      	nop
 8006104:	40007000 	.word	0x40007000

08006108 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b088      	sub	sp, #32
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d102      	bne.n	800611c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006116:	2301      	movs	r3, #1
 8006118:	f000 bc08 	b.w	800692c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800611c:	4b96      	ldr	r3, [pc, #600]	; (8006378 <HAL_RCC_OscConfig+0x270>)
 800611e:	689b      	ldr	r3, [r3, #8]
 8006120:	f003 030c 	and.w	r3, r3, #12
 8006124:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006126:	4b94      	ldr	r3, [pc, #592]	; (8006378 <HAL_RCC_OscConfig+0x270>)
 8006128:	68db      	ldr	r3, [r3, #12]
 800612a:	f003 0303 	and.w	r3, r3, #3
 800612e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f003 0310 	and.w	r3, r3, #16
 8006138:	2b00      	cmp	r3, #0
 800613a:	f000 80e4 	beq.w	8006306 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800613e:	69bb      	ldr	r3, [r7, #24]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d007      	beq.n	8006154 <HAL_RCC_OscConfig+0x4c>
 8006144:	69bb      	ldr	r3, [r7, #24]
 8006146:	2b0c      	cmp	r3, #12
 8006148:	f040 808b 	bne.w	8006262 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	2b01      	cmp	r3, #1
 8006150:	f040 8087 	bne.w	8006262 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006154:	4b88      	ldr	r3, [pc, #544]	; (8006378 <HAL_RCC_OscConfig+0x270>)
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f003 0302 	and.w	r3, r3, #2
 800615c:	2b00      	cmp	r3, #0
 800615e:	d005      	beq.n	800616c <HAL_RCC_OscConfig+0x64>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	699b      	ldr	r3, [r3, #24]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d101      	bne.n	800616c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8006168:	2301      	movs	r3, #1
 800616a:	e3df      	b.n	800692c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6a1a      	ldr	r2, [r3, #32]
 8006170:	4b81      	ldr	r3, [pc, #516]	; (8006378 <HAL_RCC_OscConfig+0x270>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f003 0308 	and.w	r3, r3, #8
 8006178:	2b00      	cmp	r3, #0
 800617a:	d004      	beq.n	8006186 <HAL_RCC_OscConfig+0x7e>
 800617c:	4b7e      	ldr	r3, [pc, #504]	; (8006378 <HAL_RCC_OscConfig+0x270>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006184:	e005      	b.n	8006192 <HAL_RCC_OscConfig+0x8a>
 8006186:	4b7c      	ldr	r3, [pc, #496]	; (8006378 <HAL_RCC_OscConfig+0x270>)
 8006188:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800618c:	091b      	lsrs	r3, r3, #4
 800618e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006192:	4293      	cmp	r3, r2
 8006194:	d223      	bcs.n	80061de <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6a1b      	ldr	r3, [r3, #32]
 800619a:	4618      	mov	r0, r3
 800619c:	f000 fdcc 	bl	8006d38 <RCC_SetFlashLatencyFromMSIRange>
 80061a0:	4603      	mov	r3, r0
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d001      	beq.n	80061aa <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80061a6:	2301      	movs	r3, #1
 80061a8:	e3c0      	b.n	800692c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80061aa:	4b73      	ldr	r3, [pc, #460]	; (8006378 <HAL_RCC_OscConfig+0x270>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4a72      	ldr	r2, [pc, #456]	; (8006378 <HAL_RCC_OscConfig+0x270>)
 80061b0:	f043 0308 	orr.w	r3, r3, #8
 80061b4:	6013      	str	r3, [r2, #0]
 80061b6:	4b70      	ldr	r3, [pc, #448]	; (8006378 <HAL_RCC_OscConfig+0x270>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6a1b      	ldr	r3, [r3, #32]
 80061c2:	496d      	ldr	r1, [pc, #436]	; (8006378 <HAL_RCC_OscConfig+0x270>)
 80061c4:	4313      	orrs	r3, r2
 80061c6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80061c8:	4b6b      	ldr	r3, [pc, #428]	; (8006378 <HAL_RCC_OscConfig+0x270>)
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	69db      	ldr	r3, [r3, #28]
 80061d4:	021b      	lsls	r3, r3, #8
 80061d6:	4968      	ldr	r1, [pc, #416]	; (8006378 <HAL_RCC_OscConfig+0x270>)
 80061d8:	4313      	orrs	r3, r2
 80061da:	604b      	str	r3, [r1, #4]
 80061dc:	e025      	b.n	800622a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80061de:	4b66      	ldr	r3, [pc, #408]	; (8006378 <HAL_RCC_OscConfig+0x270>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	4a65      	ldr	r2, [pc, #404]	; (8006378 <HAL_RCC_OscConfig+0x270>)
 80061e4:	f043 0308 	orr.w	r3, r3, #8
 80061e8:	6013      	str	r3, [r2, #0]
 80061ea:	4b63      	ldr	r3, [pc, #396]	; (8006378 <HAL_RCC_OscConfig+0x270>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6a1b      	ldr	r3, [r3, #32]
 80061f6:	4960      	ldr	r1, [pc, #384]	; (8006378 <HAL_RCC_OscConfig+0x270>)
 80061f8:	4313      	orrs	r3, r2
 80061fa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80061fc:	4b5e      	ldr	r3, [pc, #376]	; (8006378 <HAL_RCC_OscConfig+0x270>)
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	69db      	ldr	r3, [r3, #28]
 8006208:	021b      	lsls	r3, r3, #8
 800620a:	495b      	ldr	r1, [pc, #364]	; (8006378 <HAL_RCC_OscConfig+0x270>)
 800620c:	4313      	orrs	r3, r2
 800620e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006210:	69bb      	ldr	r3, [r7, #24]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d109      	bne.n	800622a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6a1b      	ldr	r3, [r3, #32]
 800621a:	4618      	mov	r0, r3
 800621c:	f000 fd8c 	bl	8006d38 <RCC_SetFlashLatencyFromMSIRange>
 8006220:	4603      	mov	r3, r0
 8006222:	2b00      	cmp	r3, #0
 8006224:	d001      	beq.n	800622a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8006226:	2301      	movs	r3, #1
 8006228:	e380      	b.n	800692c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800622a:	f000 fcc1 	bl	8006bb0 <HAL_RCC_GetSysClockFreq>
 800622e:	4602      	mov	r2, r0
 8006230:	4b51      	ldr	r3, [pc, #324]	; (8006378 <HAL_RCC_OscConfig+0x270>)
 8006232:	689b      	ldr	r3, [r3, #8]
 8006234:	091b      	lsrs	r3, r3, #4
 8006236:	f003 030f 	and.w	r3, r3, #15
 800623a:	4950      	ldr	r1, [pc, #320]	; (800637c <HAL_RCC_OscConfig+0x274>)
 800623c:	5ccb      	ldrb	r3, [r1, r3]
 800623e:	f003 031f 	and.w	r3, r3, #31
 8006242:	fa22 f303 	lsr.w	r3, r2, r3
 8006246:	4a4e      	ldr	r2, [pc, #312]	; (8006380 <HAL_RCC_OscConfig+0x278>)
 8006248:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800624a:	4b4e      	ldr	r3, [pc, #312]	; (8006384 <HAL_RCC_OscConfig+0x27c>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4618      	mov	r0, r3
 8006250:	f7fd fddc 	bl	8003e0c <HAL_InitTick>
 8006254:	4603      	mov	r3, r0
 8006256:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8006258:	7bfb      	ldrb	r3, [r7, #15]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d052      	beq.n	8006304 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800625e:	7bfb      	ldrb	r3, [r7, #15]
 8006260:	e364      	b.n	800692c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	699b      	ldr	r3, [r3, #24]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d032      	beq.n	80062d0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800626a:	4b43      	ldr	r3, [pc, #268]	; (8006378 <HAL_RCC_OscConfig+0x270>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a42      	ldr	r2, [pc, #264]	; (8006378 <HAL_RCC_OscConfig+0x270>)
 8006270:	f043 0301 	orr.w	r3, r3, #1
 8006274:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006276:	f7fd fe19 	bl	8003eac <HAL_GetTick>
 800627a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800627c:	e008      	b.n	8006290 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800627e:	f7fd fe15 	bl	8003eac <HAL_GetTick>
 8006282:	4602      	mov	r2, r0
 8006284:	693b      	ldr	r3, [r7, #16]
 8006286:	1ad3      	subs	r3, r2, r3
 8006288:	2b02      	cmp	r3, #2
 800628a:	d901      	bls.n	8006290 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800628c:	2303      	movs	r3, #3
 800628e:	e34d      	b.n	800692c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006290:	4b39      	ldr	r3, [pc, #228]	; (8006378 <HAL_RCC_OscConfig+0x270>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f003 0302 	and.w	r3, r3, #2
 8006298:	2b00      	cmp	r3, #0
 800629a:	d0f0      	beq.n	800627e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800629c:	4b36      	ldr	r3, [pc, #216]	; (8006378 <HAL_RCC_OscConfig+0x270>)
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a35      	ldr	r2, [pc, #212]	; (8006378 <HAL_RCC_OscConfig+0x270>)
 80062a2:	f043 0308 	orr.w	r3, r3, #8
 80062a6:	6013      	str	r3, [r2, #0]
 80062a8:	4b33      	ldr	r3, [pc, #204]	; (8006378 <HAL_RCC_OscConfig+0x270>)
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6a1b      	ldr	r3, [r3, #32]
 80062b4:	4930      	ldr	r1, [pc, #192]	; (8006378 <HAL_RCC_OscConfig+0x270>)
 80062b6:	4313      	orrs	r3, r2
 80062b8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80062ba:	4b2f      	ldr	r3, [pc, #188]	; (8006378 <HAL_RCC_OscConfig+0x270>)
 80062bc:	685b      	ldr	r3, [r3, #4]
 80062be:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	69db      	ldr	r3, [r3, #28]
 80062c6:	021b      	lsls	r3, r3, #8
 80062c8:	492b      	ldr	r1, [pc, #172]	; (8006378 <HAL_RCC_OscConfig+0x270>)
 80062ca:	4313      	orrs	r3, r2
 80062cc:	604b      	str	r3, [r1, #4]
 80062ce:	e01a      	b.n	8006306 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80062d0:	4b29      	ldr	r3, [pc, #164]	; (8006378 <HAL_RCC_OscConfig+0x270>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a28      	ldr	r2, [pc, #160]	; (8006378 <HAL_RCC_OscConfig+0x270>)
 80062d6:	f023 0301 	bic.w	r3, r3, #1
 80062da:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80062dc:	f7fd fde6 	bl	8003eac <HAL_GetTick>
 80062e0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80062e2:	e008      	b.n	80062f6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80062e4:	f7fd fde2 	bl	8003eac <HAL_GetTick>
 80062e8:	4602      	mov	r2, r0
 80062ea:	693b      	ldr	r3, [r7, #16]
 80062ec:	1ad3      	subs	r3, r2, r3
 80062ee:	2b02      	cmp	r3, #2
 80062f0:	d901      	bls.n	80062f6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80062f2:	2303      	movs	r3, #3
 80062f4:	e31a      	b.n	800692c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80062f6:	4b20      	ldr	r3, [pc, #128]	; (8006378 <HAL_RCC_OscConfig+0x270>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f003 0302 	and.w	r3, r3, #2
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d1f0      	bne.n	80062e4 <HAL_RCC_OscConfig+0x1dc>
 8006302:	e000      	b.n	8006306 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006304:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f003 0301 	and.w	r3, r3, #1
 800630e:	2b00      	cmp	r3, #0
 8006310:	d073      	beq.n	80063fa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8006312:	69bb      	ldr	r3, [r7, #24]
 8006314:	2b08      	cmp	r3, #8
 8006316:	d005      	beq.n	8006324 <HAL_RCC_OscConfig+0x21c>
 8006318:	69bb      	ldr	r3, [r7, #24]
 800631a:	2b0c      	cmp	r3, #12
 800631c:	d10e      	bne.n	800633c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	2b03      	cmp	r3, #3
 8006322:	d10b      	bne.n	800633c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006324:	4b14      	ldr	r3, [pc, #80]	; (8006378 <HAL_RCC_OscConfig+0x270>)
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800632c:	2b00      	cmp	r3, #0
 800632e:	d063      	beq.n	80063f8 <HAL_RCC_OscConfig+0x2f0>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d15f      	bne.n	80063f8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8006338:	2301      	movs	r3, #1
 800633a:	e2f7      	b.n	800692c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	685b      	ldr	r3, [r3, #4]
 8006340:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006344:	d106      	bne.n	8006354 <HAL_RCC_OscConfig+0x24c>
 8006346:	4b0c      	ldr	r3, [pc, #48]	; (8006378 <HAL_RCC_OscConfig+0x270>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a0b      	ldr	r2, [pc, #44]	; (8006378 <HAL_RCC_OscConfig+0x270>)
 800634c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006350:	6013      	str	r3, [r2, #0]
 8006352:	e025      	b.n	80063a0 <HAL_RCC_OscConfig+0x298>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800635c:	d114      	bne.n	8006388 <HAL_RCC_OscConfig+0x280>
 800635e:	4b06      	ldr	r3, [pc, #24]	; (8006378 <HAL_RCC_OscConfig+0x270>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4a05      	ldr	r2, [pc, #20]	; (8006378 <HAL_RCC_OscConfig+0x270>)
 8006364:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006368:	6013      	str	r3, [r2, #0]
 800636a:	4b03      	ldr	r3, [pc, #12]	; (8006378 <HAL_RCC_OscConfig+0x270>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4a02      	ldr	r2, [pc, #8]	; (8006378 <HAL_RCC_OscConfig+0x270>)
 8006370:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006374:	6013      	str	r3, [r2, #0]
 8006376:	e013      	b.n	80063a0 <HAL_RCC_OscConfig+0x298>
 8006378:	40021000 	.word	0x40021000
 800637c:	0800caac 	.word	0x0800caac
 8006380:	20000000 	.word	0x20000000
 8006384:	20000028 	.word	0x20000028
 8006388:	4ba0      	ldr	r3, [pc, #640]	; (800660c <HAL_RCC_OscConfig+0x504>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a9f      	ldr	r2, [pc, #636]	; (800660c <HAL_RCC_OscConfig+0x504>)
 800638e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006392:	6013      	str	r3, [r2, #0]
 8006394:	4b9d      	ldr	r3, [pc, #628]	; (800660c <HAL_RCC_OscConfig+0x504>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4a9c      	ldr	r2, [pc, #624]	; (800660c <HAL_RCC_OscConfig+0x504>)
 800639a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800639e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	685b      	ldr	r3, [r3, #4]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d013      	beq.n	80063d0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063a8:	f7fd fd80 	bl	8003eac <HAL_GetTick>
 80063ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80063ae:	e008      	b.n	80063c2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80063b0:	f7fd fd7c 	bl	8003eac <HAL_GetTick>
 80063b4:	4602      	mov	r2, r0
 80063b6:	693b      	ldr	r3, [r7, #16]
 80063b8:	1ad3      	subs	r3, r2, r3
 80063ba:	2b64      	cmp	r3, #100	; 0x64
 80063bc:	d901      	bls.n	80063c2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80063be:	2303      	movs	r3, #3
 80063c0:	e2b4      	b.n	800692c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80063c2:	4b92      	ldr	r3, [pc, #584]	; (800660c <HAL_RCC_OscConfig+0x504>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d0f0      	beq.n	80063b0 <HAL_RCC_OscConfig+0x2a8>
 80063ce:	e014      	b.n	80063fa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063d0:	f7fd fd6c 	bl	8003eac <HAL_GetTick>
 80063d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80063d6:	e008      	b.n	80063ea <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80063d8:	f7fd fd68 	bl	8003eac <HAL_GetTick>
 80063dc:	4602      	mov	r2, r0
 80063de:	693b      	ldr	r3, [r7, #16]
 80063e0:	1ad3      	subs	r3, r2, r3
 80063e2:	2b64      	cmp	r3, #100	; 0x64
 80063e4:	d901      	bls.n	80063ea <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80063e6:	2303      	movs	r3, #3
 80063e8:	e2a0      	b.n	800692c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80063ea:	4b88      	ldr	r3, [pc, #544]	; (800660c <HAL_RCC_OscConfig+0x504>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d1f0      	bne.n	80063d8 <HAL_RCC_OscConfig+0x2d0>
 80063f6:	e000      	b.n	80063fa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f003 0302 	and.w	r3, r3, #2
 8006402:	2b00      	cmp	r3, #0
 8006404:	d060      	beq.n	80064c8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8006406:	69bb      	ldr	r3, [r7, #24]
 8006408:	2b04      	cmp	r3, #4
 800640a:	d005      	beq.n	8006418 <HAL_RCC_OscConfig+0x310>
 800640c:	69bb      	ldr	r3, [r7, #24]
 800640e:	2b0c      	cmp	r3, #12
 8006410:	d119      	bne.n	8006446 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006412:	697b      	ldr	r3, [r7, #20]
 8006414:	2b02      	cmp	r3, #2
 8006416:	d116      	bne.n	8006446 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006418:	4b7c      	ldr	r3, [pc, #496]	; (800660c <HAL_RCC_OscConfig+0x504>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006420:	2b00      	cmp	r3, #0
 8006422:	d005      	beq.n	8006430 <HAL_RCC_OscConfig+0x328>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	68db      	ldr	r3, [r3, #12]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d101      	bne.n	8006430 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800642c:	2301      	movs	r3, #1
 800642e:	e27d      	b.n	800692c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006430:	4b76      	ldr	r3, [pc, #472]	; (800660c <HAL_RCC_OscConfig+0x504>)
 8006432:	685b      	ldr	r3, [r3, #4]
 8006434:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	691b      	ldr	r3, [r3, #16]
 800643c:	061b      	lsls	r3, r3, #24
 800643e:	4973      	ldr	r1, [pc, #460]	; (800660c <HAL_RCC_OscConfig+0x504>)
 8006440:	4313      	orrs	r3, r2
 8006442:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006444:	e040      	b.n	80064c8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	68db      	ldr	r3, [r3, #12]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d023      	beq.n	8006496 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800644e:	4b6f      	ldr	r3, [pc, #444]	; (800660c <HAL_RCC_OscConfig+0x504>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	4a6e      	ldr	r2, [pc, #440]	; (800660c <HAL_RCC_OscConfig+0x504>)
 8006454:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006458:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800645a:	f7fd fd27 	bl	8003eac <HAL_GetTick>
 800645e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006460:	e008      	b.n	8006474 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006462:	f7fd fd23 	bl	8003eac <HAL_GetTick>
 8006466:	4602      	mov	r2, r0
 8006468:	693b      	ldr	r3, [r7, #16]
 800646a:	1ad3      	subs	r3, r2, r3
 800646c:	2b02      	cmp	r3, #2
 800646e:	d901      	bls.n	8006474 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8006470:	2303      	movs	r3, #3
 8006472:	e25b      	b.n	800692c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006474:	4b65      	ldr	r3, [pc, #404]	; (800660c <HAL_RCC_OscConfig+0x504>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800647c:	2b00      	cmp	r3, #0
 800647e:	d0f0      	beq.n	8006462 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006480:	4b62      	ldr	r3, [pc, #392]	; (800660c <HAL_RCC_OscConfig+0x504>)
 8006482:	685b      	ldr	r3, [r3, #4]
 8006484:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	691b      	ldr	r3, [r3, #16]
 800648c:	061b      	lsls	r3, r3, #24
 800648e:	495f      	ldr	r1, [pc, #380]	; (800660c <HAL_RCC_OscConfig+0x504>)
 8006490:	4313      	orrs	r3, r2
 8006492:	604b      	str	r3, [r1, #4]
 8006494:	e018      	b.n	80064c8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006496:	4b5d      	ldr	r3, [pc, #372]	; (800660c <HAL_RCC_OscConfig+0x504>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a5c      	ldr	r2, [pc, #368]	; (800660c <HAL_RCC_OscConfig+0x504>)
 800649c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80064a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064a2:	f7fd fd03 	bl	8003eac <HAL_GetTick>
 80064a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80064a8:	e008      	b.n	80064bc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80064aa:	f7fd fcff 	bl	8003eac <HAL_GetTick>
 80064ae:	4602      	mov	r2, r0
 80064b0:	693b      	ldr	r3, [r7, #16]
 80064b2:	1ad3      	subs	r3, r2, r3
 80064b4:	2b02      	cmp	r3, #2
 80064b6:	d901      	bls.n	80064bc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80064b8:	2303      	movs	r3, #3
 80064ba:	e237      	b.n	800692c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80064bc:	4b53      	ldr	r3, [pc, #332]	; (800660c <HAL_RCC_OscConfig+0x504>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d1f0      	bne.n	80064aa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f003 0308 	and.w	r3, r3, #8
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d03c      	beq.n	800654e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	695b      	ldr	r3, [r3, #20]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d01c      	beq.n	8006516 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80064dc:	4b4b      	ldr	r3, [pc, #300]	; (800660c <HAL_RCC_OscConfig+0x504>)
 80064de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80064e2:	4a4a      	ldr	r2, [pc, #296]	; (800660c <HAL_RCC_OscConfig+0x504>)
 80064e4:	f043 0301 	orr.w	r3, r3, #1
 80064e8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064ec:	f7fd fcde 	bl	8003eac <HAL_GetTick>
 80064f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80064f2:	e008      	b.n	8006506 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80064f4:	f7fd fcda 	bl	8003eac <HAL_GetTick>
 80064f8:	4602      	mov	r2, r0
 80064fa:	693b      	ldr	r3, [r7, #16]
 80064fc:	1ad3      	subs	r3, r2, r3
 80064fe:	2b02      	cmp	r3, #2
 8006500:	d901      	bls.n	8006506 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8006502:	2303      	movs	r3, #3
 8006504:	e212      	b.n	800692c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006506:	4b41      	ldr	r3, [pc, #260]	; (800660c <HAL_RCC_OscConfig+0x504>)
 8006508:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800650c:	f003 0302 	and.w	r3, r3, #2
 8006510:	2b00      	cmp	r3, #0
 8006512:	d0ef      	beq.n	80064f4 <HAL_RCC_OscConfig+0x3ec>
 8006514:	e01b      	b.n	800654e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006516:	4b3d      	ldr	r3, [pc, #244]	; (800660c <HAL_RCC_OscConfig+0x504>)
 8006518:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800651c:	4a3b      	ldr	r2, [pc, #236]	; (800660c <HAL_RCC_OscConfig+0x504>)
 800651e:	f023 0301 	bic.w	r3, r3, #1
 8006522:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006526:	f7fd fcc1 	bl	8003eac <HAL_GetTick>
 800652a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800652c:	e008      	b.n	8006540 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800652e:	f7fd fcbd 	bl	8003eac <HAL_GetTick>
 8006532:	4602      	mov	r2, r0
 8006534:	693b      	ldr	r3, [r7, #16]
 8006536:	1ad3      	subs	r3, r2, r3
 8006538:	2b02      	cmp	r3, #2
 800653a:	d901      	bls.n	8006540 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800653c:	2303      	movs	r3, #3
 800653e:	e1f5      	b.n	800692c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006540:	4b32      	ldr	r3, [pc, #200]	; (800660c <HAL_RCC_OscConfig+0x504>)
 8006542:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006546:	f003 0302 	and.w	r3, r3, #2
 800654a:	2b00      	cmp	r3, #0
 800654c:	d1ef      	bne.n	800652e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f003 0304 	and.w	r3, r3, #4
 8006556:	2b00      	cmp	r3, #0
 8006558:	f000 80a6 	beq.w	80066a8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800655c:	2300      	movs	r3, #0
 800655e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006560:	4b2a      	ldr	r3, [pc, #168]	; (800660c <HAL_RCC_OscConfig+0x504>)
 8006562:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006564:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006568:	2b00      	cmp	r3, #0
 800656a:	d10d      	bne.n	8006588 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800656c:	4b27      	ldr	r3, [pc, #156]	; (800660c <HAL_RCC_OscConfig+0x504>)
 800656e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006570:	4a26      	ldr	r2, [pc, #152]	; (800660c <HAL_RCC_OscConfig+0x504>)
 8006572:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006576:	6593      	str	r3, [r2, #88]	; 0x58
 8006578:	4b24      	ldr	r3, [pc, #144]	; (800660c <HAL_RCC_OscConfig+0x504>)
 800657a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800657c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006580:	60bb      	str	r3, [r7, #8]
 8006582:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006584:	2301      	movs	r3, #1
 8006586:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006588:	4b21      	ldr	r3, [pc, #132]	; (8006610 <HAL_RCC_OscConfig+0x508>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006590:	2b00      	cmp	r3, #0
 8006592:	d118      	bne.n	80065c6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006594:	4b1e      	ldr	r3, [pc, #120]	; (8006610 <HAL_RCC_OscConfig+0x508>)
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4a1d      	ldr	r2, [pc, #116]	; (8006610 <HAL_RCC_OscConfig+0x508>)
 800659a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800659e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80065a0:	f7fd fc84 	bl	8003eac <HAL_GetTick>
 80065a4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80065a6:	e008      	b.n	80065ba <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80065a8:	f7fd fc80 	bl	8003eac <HAL_GetTick>
 80065ac:	4602      	mov	r2, r0
 80065ae:	693b      	ldr	r3, [r7, #16]
 80065b0:	1ad3      	subs	r3, r2, r3
 80065b2:	2b02      	cmp	r3, #2
 80065b4:	d901      	bls.n	80065ba <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80065b6:	2303      	movs	r3, #3
 80065b8:	e1b8      	b.n	800692c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80065ba:	4b15      	ldr	r3, [pc, #84]	; (8006610 <HAL_RCC_OscConfig+0x508>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d0f0      	beq.n	80065a8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	689b      	ldr	r3, [r3, #8]
 80065ca:	2b01      	cmp	r3, #1
 80065cc:	d108      	bne.n	80065e0 <HAL_RCC_OscConfig+0x4d8>
 80065ce:	4b0f      	ldr	r3, [pc, #60]	; (800660c <HAL_RCC_OscConfig+0x504>)
 80065d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065d4:	4a0d      	ldr	r2, [pc, #52]	; (800660c <HAL_RCC_OscConfig+0x504>)
 80065d6:	f043 0301 	orr.w	r3, r3, #1
 80065da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80065de:	e029      	b.n	8006634 <HAL_RCC_OscConfig+0x52c>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	689b      	ldr	r3, [r3, #8]
 80065e4:	2b05      	cmp	r3, #5
 80065e6:	d115      	bne.n	8006614 <HAL_RCC_OscConfig+0x50c>
 80065e8:	4b08      	ldr	r3, [pc, #32]	; (800660c <HAL_RCC_OscConfig+0x504>)
 80065ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065ee:	4a07      	ldr	r2, [pc, #28]	; (800660c <HAL_RCC_OscConfig+0x504>)
 80065f0:	f043 0304 	orr.w	r3, r3, #4
 80065f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80065f8:	4b04      	ldr	r3, [pc, #16]	; (800660c <HAL_RCC_OscConfig+0x504>)
 80065fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065fe:	4a03      	ldr	r2, [pc, #12]	; (800660c <HAL_RCC_OscConfig+0x504>)
 8006600:	f043 0301 	orr.w	r3, r3, #1
 8006604:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006608:	e014      	b.n	8006634 <HAL_RCC_OscConfig+0x52c>
 800660a:	bf00      	nop
 800660c:	40021000 	.word	0x40021000
 8006610:	40007000 	.word	0x40007000
 8006614:	4b9d      	ldr	r3, [pc, #628]	; (800688c <HAL_RCC_OscConfig+0x784>)
 8006616:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800661a:	4a9c      	ldr	r2, [pc, #624]	; (800688c <HAL_RCC_OscConfig+0x784>)
 800661c:	f023 0301 	bic.w	r3, r3, #1
 8006620:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006624:	4b99      	ldr	r3, [pc, #612]	; (800688c <HAL_RCC_OscConfig+0x784>)
 8006626:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800662a:	4a98      	ldr	r2, [pc, #608]	; (800688c <HAL_RCC_OscConfig+0x784>)
 800662c:	f023 0304 	bic.w	r3, r3, #4
 8006630:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	689b      	ldr	r3, [r3, #8]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d016      	beq.n	800666a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800663c:	f7fd fc36 	bl	8003eac <HAL_GetTick>
 8006640:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006642:	e00a      	b.n	800665a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006644:	f7fd fc32 	bl	8003eac <HAL_GetTick>
 8006648:	4602      	mov	r2, r0
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	1ad3      	subs	r3, r2, r3
 800664e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006652:	4293      	cmp	r3, r2
 8006654:	d901      	bls.n	800665a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8006656:	2303      	movs	r3, #3
 8006658:	e168      	b.n	800692c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800665a:	4b8c      	ldr	r3, [pc, #560]	; (800688c <HAL_RCC_OscConfig+0x784>)
 800665c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006660:	f003 0302 	and.w	r3, r3, #2
 8006664:	2b00      	cmp	r3, #0
 8006666:	d0ed      	beq.n	8006644 <HAL_RCC_OscConfig+0x53c>
 8006668:	e015      	b.n	8006696 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800666a:	f7fd fc1f 	bl	8003eac <HAL_GetTick>
 800666e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006670:	e00a      	b.n	8006688 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006672:	f7fd fc1b 	bl	8003eac <HAL_GetTick>
 8006676:	4602      	mov	r2, r0
 8006678:	693b      	ldr	r3, [r7, #16]
 800667a:	1ad3      	subs	r3, r2, r3
 800667c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006680:	4293      	cmp	r3, r2
 8006682:	d901      	bls.n	8006688 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8006684:	2303      	movs	r3, #3
 8006686:	e151      	b.n	800692c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006688:	4b80      	ldr	r3, [pc, #512]	; (800688c <HAL_RCC_OscConfig+0x784>)
 800668a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800668e:	f003 0302 	and.w	r3, r3, #2
 8006692:	2b00      	cmp	r3, #0
 8006694:	d1ed      	bne.n	8006672 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006696:	7ffb      	ldrb	r3, [r7, #31]
 8006698:	2b01      	cmp	r3, #1
 800669a:	d105      	bne.n	80066a8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800669c:	4b7b      	ldr	r3, [pc, #492]	; (800688c <HAL_RCC_OscConfig+0x784>)
 800669e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066a0:	4a7a      	ldr	r2, [pc, #488]	; (800688c <HAL_RCC_OscConfig+0x784>)
 80066a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80066a6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f003 0320 	and.w	r3, r3, #32
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d03c      	beq.n	800672e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d01c      	beq.n	80066f6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80066bc:	4b73      	ldr	r3, [pc, #460]	; (800688c <HAL_RCC_OscConfig+0x784>)
 80066be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80066c2:	4a72      	ldr	r2, [pc, #456]	; (800688c <HAL_RCC_OscConfig+0x784>)
 80066c4:	f043 0301 	orr.w	r3, r3, #1
 80066c8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066cc:	f7fd fbee 	bl	8003eac <HAL_GetTick>
 80066d0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80066d2:	e008      	b.n	80066e6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80066d4:	f7fd fbea 	bl	8003eac <HAL_GetTick>
 80066d8:	4602      	mov	r2, r0
 80066da:	693b      	ldr	r3, [r7, #16]
 80066dc:	1ad3      	subs	r3, r2, r3
 80066de:	2b02      	cmp	r3, #2
 80066e0:	d901      	bls.n	80066e6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80066e2:	2303      	movs	r3, #3
 80066e4:	e122      	b.n	800692c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80066e6:	4b69      	ldr	r3, [pc, #420]	; (800688c <HAL_RCC_OscConfig+0x784>)
 80066e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80066ec:	f003 0302 	and.w	r3, r3, #2
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d0ef      	beq.n	80066d4 <HAL_RCC_OscConfig+0x5cc>
 80066f4:	e01b      	b.n	800672e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80066f6:	4b65      	ldr	r3, [pc, #404]	; (800688c <HAL_RCC_OscConfig+0x784>)
 80066f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80066fc:	4a63      	ldr	r2, [pc, #396]	; (800688c <HAL_RCC_OscConfig+0x784>)
 80066fe:	f023 0301 	bic.w	r3, r3, #1
 8006702:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006706:	f7fd fbd1 	bl	8003eac <HAL_GetTick>
 800670a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800670c:	e008      	b.n	8006720 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800670e:	f7fd fbcd 	bl	8003eac <HAL_GetTick>
 8006712:	4602      	mov	r2, r0
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	1ad3      	subs	r3, r2, r3
 8006718:	2b02      	cmp	r3, #2
 800671a:	d901      	bls.n	8006720 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800671c:	2303      	movs	r3, #3
 800671e:	e105      	b.n	800692c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006720:	4b5a      	ldr	r3, [pc, #360]	; (800688c <HAL_RCC_OscConfig+0x784>)
 8006722:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006726:	f003 0302 	and.w	r3, r3, #2
 800672a:	2b00      	cmp	r3, #0
 800672c:	d1ef      	bne.n	800670e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006732:	2b00      	cmp	r3, #0
 8006734:	f000 80f9 	beq.w	800692a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800673c:	2b02      	cmp	r3, #2
 800673e:	f040 80cf 	bne.w	80068e0 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006742:	4b52      	ldr	r3, [pc, #328]	; (800688c <HAL_RCC_OscConfig+0x784>)
 8006744:	68db      	ldr	r3, [r3, #12]
 8006746:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006748:	697b      	ldr	r3, [r7, #20]
 800674a:	f003 0203 	and.w	r2, r3, #3
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006752:	429a      	cmp	r2, r3
 8006754:	d12c      	bne.n	80067b0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006760:	3b01      	subs	r3, #1
 8006762:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006764:	429a      	cmp	r2, r3
 8006766:	d123      	bne.n	80067b0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006768:	697b      	ldr	r3, [r7, #20]
 800676a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006772:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006774:	429a      	cmp	r2, r3
 8006776:	d11b      	bne.n	80067b0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006778:	697b      	ldr	r3, [r7, #20]
 800677a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006782:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006784:	429a      	cmp	r2, r3
 8006786:	d113      	bne.n	80067b0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006788:	697b      	ldr	r3, [r7, #20]
 800678a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006792:	085b      	lsrs	r3, r3, #1
 8006794:	3b01      	subs	r3, #1
 8006796:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006798:	429a      	cmp	r2, r3
 800679a:	d109      	bne.n	80067b0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800679c:	697b      	ldr	r3, [r7, #20]
 800679e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067a6:	085b      	lsrs	r3, r3, #1
 80067a8:	3b01      	subs	r3, #1
 80067aa:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80067ac:	429a      	cmp	r2, r3
 80067ae:	d071      	beq.n	8006894 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80067b0:	69bb      	ldr	r3, [r7, #24]
 80067b2:	2b0c      	cmp	r3, #12
 80067b4:	d068      	beq.n	8006888 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80067b6:	4b35      	ldr	r3, [pc, #212]	; (800688c <HAL_RCC_OscConfig+0x784>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d105      	bne.n	80067ce <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80067c2:	4b32      	ldr	r3, [pc, #200]	; (800688c <HAL_RCC_OscConfig+0x784>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d001      	beq.n	80067d2 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80067ce:	2301      	movs	r3, #1
 80067d0:	e0ac      	b.n	800692c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80067d2:	4b2e      	ldr	r3, [pc, #184]	; (800688c <HAL_RCC_OscConfig+0x784>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4a2d      	ldr	r2, [pc, #180]	; (800688c <HAL_RCC_OscConfig+0x784>)
 80067d8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80067dc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80067de:	f7fd fb65 	bl	8003eac <HAL_GetTick>
 80067e2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80067e4:	e008      	b.n	80067f8 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067e6:	f7fd fb61 	bl	8003eac <HAL_GetTick>
 80067ea:	4602      	mov	r2, r0
 80067ec:	693b      	ldr	r3, [r7, #16]
 80067ee:	1ad3      	subs	r3, r2, r3
 80067f0:	2b02      	cmp	r3, #2
 80067f2:	d901      	bls.n	80067f8 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80067f4:	2303      	movs	r3, #3
 80067f6:	e099      	b.n	800692c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80067f8:	4b24      	ldr	r3, [pc, #144]	; (800688c <HAL_RCC_OscConfig+0x784>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006800:	2b00      	cmp	r3, #0
 8006802:	d1f0      	bne.n	80067e6 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006804:	4b21      	ldr	r3, [pc, #132]	; (800688c <HAL_RCC_OscConfig+0x784>)
 8006806:	68da      	ldr	r2, [r3, #12]
 8006808:	4b21      	ldr	r3, [pc, #132]	; (8006890 <HAL_RCC_OscConfig+0x788>)
 800680a:	4013      	ands	r3, r2
 800680c:	687a      	ldr	r2, [r7, #4]
 800680e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8006810:	687a      	ldr	r2, [r7, #4]
 8006812:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006814:	3a01      	subs	r2, #1
 8006816:	0112      	lsls	r2, r2, #4
 8006818:	4311      	orrs	r1, r2
 800681a:	687a      	ldr	r2, [r7, #4]
 800681c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800681e:	0212      	lsls	r2, r2, #8
 8006820:	4311      	orrs	r1, r2
 8006822:	687a      	ldr	r2, [r7, #4]
 8006824:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006826:	0852      	lsrs	r2, r2, #1
 8006828:	3a01      	subs	r2, #1
 800682a:	0552      	lsls	r2, r2, #21
 800682c:	4311      	orrs	r1, r2
 800682e:	687a      	ldr	r2, [r7, #4]
 8006830:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006832:	0852      	lsrs	r2, r2, #1
 8006834:	3a01      	subs	r2, #1
 8006836:	0652      	lsls	r2, r2, #25
 8006838:	4311      	orrs	r1, r2
 800683a:	687a      	ldr	r2, [r7, #4]
 800683c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800683e:	06d2      	lsls	r2, r2, #27
 8006840:	430a      	orrs	r2, r1
 8006842:	4912      	ldr	r1, [pc, #72]	; (800688c <HAL_RCC_OscConfig+0x784>)
 8006844:	4313      	orrs	r3, r2
 8006846:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006848:	4b10      	ldr	r3, [pc, #64]	; (800688c <HAL_RCC_OscConfig+0x784>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4a0f      	ldr	r2, [pc, #60]	; (800688c <HAL_RCC_OscConfig+0x784>)
 800684e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006852:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006854:	4b0d      	ldr	r3, [pc, #52]	; (800688c <HAL_RCC_OscConfig+0x784>)
 8006856:	68db      	ldr	r3, [r3, #12]
 8006858:	4a0c      	ldr	r2, [pc, #48]	; (800688c <HAL_RCC_OscConfig+0x784>)
 800685a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800685e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006860:	f7fd fb24 	bl	8003eac <HAL_GetTick>
 8006864:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006866:	e008      	b.n	800687a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006868:	f7fd fb20 	bl	8003eac <HAL_GetTick>
 800686c:	4602      	mov	r2, r0
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	1ad3      	subs	r3, r2, r3
 8006872:	2b02      	cmp	r3, #2
 8006874:	d901      	bls.n	800687a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8006876:	2303      	movs	r3, #3
 8006878:	e058      	b.n	800692c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800687a:	4b04      	ldr	r3, [pc, #16]	; (800688c <HAL_RCC_OscConfig+0x784>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006882:	2b00      	cmp	r3, #0
 8006884:	d0f0      	beq.n	8006868 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006886:	e050      	b.n	800692a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006888:	2301      	movs	r3, #1
 800688a:	e04f      	b.n	800692c <HAL_RCC_OscConfig+0x824>
 800688c:	40021000 	.word	0x40021000
 8006890:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006894:	4b27      	ldr	r3, [pc, #156]	; (8006934 <HAL_RCC_OscConfig+0x82c>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800689c:	2b00      	cmp	r3, #0
 800689e:	d144      	bne.n	800692a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80068a0:	4b24      	ldr	r3, [pc, #144]	; (8006934 <HAL_RCC_OscConfig+0x82c>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	4a23      	ldr	r2, [pc, #140]	; (8006934 <HAL_RCC_OscConfig+0x82c>)
 80068a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80068aa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80068ac:	4b21      	ldr	r3, [pc, #132]	; (8006934 <HAL_RCC_OscConfig+0x82c>)
 80068ae:	68db      	ldr	r3, [r3, #12]
 80068b0:	4a20      	ldr	r2, [pc, #128]	; (8006934 <HAL_RCC_OscConfig+0x82c>)
 80068b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80068b6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80068b8:	f7fd faf8 	bl	8003eac <HAL_GetTick>
 80068bc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80068be:	e008      	b.n	80068d2 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80068c0:	f7fd faf4 	bl	8003eac <HAL_GetTick>
 80068c4:	4602      	mov	r2, r0
 80068c6:	693b      	ldr	r3, [r7, #16]
 80068c8:	1ad3      	subs	r3, r2, r3
 80068ca:	2b02      	cmp	r3, #2
 80068cc:	d901      	bls.n	80068d2 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80068ce:	2303      	movs	r3, #3
 80068d0:	e02c      	b.n	800692c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80068d2:	4b18      	ldr	r3, [pc, #96]	; (8006934 <HAL_RCC_OscConfig+0x82c>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d0f0      	beq.n	80068c0 <HAL_RCC_OscConfig+0x7b8>
 80068de:	e024      	b.n	800692a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80068e0:	69bb      	ldr	r3, [r7, #24]
 80068e2:	2b0c      	cmp	r3, #12
 80068e4:	d01f      	beq.n	8006926 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80068e6:	4b13      	ldr	r3, [pc, #76]	; (8006934 <HAL_RCC_OscConfig+0x82c>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4a12      	ldr	r2, [pc, #72]	; (8006934 <HAL_RCC_OscConfig+0x82c>)
 80068ec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80068f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068f2:	f7fd fadb 	bl	8003eac <HAL_GetTick>
 80068f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80068f8:	e008      	b.n	800690c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80068fa:	f7fd fad7 	bl	8003eac <HAL_GetTick>
 80068fe:	4602      	mov	r2, r0
 8006900:	693b      	ldr	r3, [r7, #16]
 8006902:	1ad3      	subs	r3, r2, r3
 8006904:	2b02      	cmp	r3, #2
 8006906:	d901      	bls.n	800690c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8006908:	2303      	movs	r3, #3
 800690a:	e00f      	b.n	800692c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800690c:	4b09      	ldr	r3, [pc, #36]	; (8006934 <HAL_RCC_OscConfig+0x82c>)
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006914:	2b00      	cmp	r3, #0
 8006916:	d1f0      	bne.n	80068fa <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8006918:	4b06      	ldr	r3, [pc, #24]	; (8006934 <HAL_RCC_OscConfig+0x82c>)
 800691a:	68da      	ldr	r2, [r3, #12]
 800691c:	4905      	ldr	r1, [pc, #20]	; (8006934 <HAL_RCC_OscConfig+0x82c>)
 800691e:	4b06      	ldr	r3, [pc, #24]	; (8006938 <HAL_RCC_OscConfig+0x830>)
 8006920:	4013      	ands	r3, r2
 8006922:	60cb      	str	r3, [r1, #12]
 8006924:	e001      	b.n	800692a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006926:	2301      	movs	r3, #1
 8006928:	e000      	b.n	800692c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800692a:	2300      	movs	r3, #0
}
 800692c:	4618      	mov	r0, r3
 800692e:	3720      	adds	r7, #32
 8006930:	46bd      	mov	sp, r7
 8006932:	bd80      	pop	{r7, pc}
 8006934:	40021000 	.word	0x40021000
 8006938:	feeefffc 	.word	0xfeeefffc

0800693c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b086      	sub	sp, #24
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
 8006944:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006946:	2300      	movs	r3, #0
 8006948:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d101      	bne.n	8006954 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006950:	2301      	movs	r3, #1
 8006952:	e11d      	b.n	8006b90 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006954:	4b90      	ldr	r3, [pc, #576]	; (8006b98 <HAL_RCC_ClockConfig+0x25c>)
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f003 030f 	and.w	r3, r3, #15
 800695c:	683a      	ldr	r2, [r7, #0]
 800695e:	429a      	cmp	r2, r3
 8006960:	d910      	bls.n	8006984 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006962:	4b8d      	ldr	r3, [pc, #564]	; (8006b98 <HAL_RCC_ClockConfig+0x25c>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f023 020f 	bic.w	r2, r3, #15
 800696a:	498b      	ldr	r1, [pc, #556]	; (8006b98 <HAL_RCC_ClockConfig+0x25c>)
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	4313      	orrs	r3, r2
 8006970:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006972:	4b89      	ldr	r3, [pc, #548]	; (8006b98 <HAL_RCC_ClockConfig+0x25c>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f003 030f 	and.w	r3, r3, #15
 800697a:	683a      	ldr	r2, [r7, #0]
 800697c:	429a      	cmp	r2, r3
 800697e:	d001      	beq.n	8006984 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006980:	2301      	movs	r3, #1
 8006982:	e105      	b.n	8006b90 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f003 0302 	and.w	r3, r3, #2
 800698c:	2b00      	cmp	r3, #0
 800698e:	d010      	beq.n	80069b2 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	689a      	ldr	r2, [r3, #8]
 8006994:	4b81      	ldr	r3, [pc, #516]	; (8006b9c <HAL_RCC_ClockConfig+0x260>)
 8006996:	689b      	ldr	r3, [r3, #8]
 8006998:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800699c:	429a      	cmp	r2, r3
 800699e:	d908      	bls.n	80069b2 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80069a0:	4b7e      	ldr	r3, [pc, #504]	; (8006b9c <HAL_RCC_ClockConfig+0x260>)
 80069a2:	689b      	ldr	r3, [r3, #8]
 80069a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	689b      	ldr	r3, [r3, #8]
 80069ac:	497b      	ldr	r1, [pc, #492]	; (8006b9c <HAL_RCC_ClockConfig+0x260>)
 80069ae:	4313      	orrs	r3, r2
 80069b0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f003 0301 	and.w	r3, r3, #1
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d079      	beq.n	8006ab2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	685b      	ldr	r3, [r3, #4]
 80069c2:	2b03      	cmp	r3, #3
 80069c4:	d11e      	bne.n	8006a04 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80069c6:	4b75      	ldr	r3, [pc, #468]	; (8006b9c <HAL_RCC_ClockConfig+0x260>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d101      	bne.n	80069d6 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80069d2:	2301      	movs	r3, #1
 80069d4:	e0dc      	b.n	8006b90 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80069d6:	f000 fa09 	bl	8006dec <RCC_GetSysClockFreqFromPLLSource>
 80069da:	4603      	mov	r3, r0
 80069dc:	4a70      	ldr	r2, [pc, #448]	; (8006ba0 <HAL_RCC_ClockConfig+0x264>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d946      	bls.n	8006a70 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80069e2:	4b6e      	ldr	r3, [pc, #440]	; (8006b9c <HAL_RCC_ClockConfig+0x260>)
 80069e4:	689b      	ldr	r3, [r3, #8]
 80069e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d140      	bne.n	8006a70 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80069ee:	4b6b      	ldr	r3, [pc, #428]	; (8006b9c <HAL_RCC_ClockConfig+0x260>)
 80069f0:	689b      	ldr	r3, [r3, #8]
 80069f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80069f6:	4a69      	ldr	r2, [pc, #420]	; (8006b9c <HAL_RCC_ClockConfig+0x260>)
 80069f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069fc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80069fe:	2380      	movs	r3, #128	; 0x80
 8006a00:	617b      	str	r3, [r7, #20]
 8006a02:	e035      	b.n	8006a70 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	685b      	ldr	r3, [r3, #4]
 8006a08:	2b02      	cmp	r3, #2
 8006a0a:	d107      	bne.n	8006a1c <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006a0c:	4b63      	ldr	r3, [pc, #396]	; (8006b9c <HAL_RCC_ClockConfig+0x260>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d115      	bne.n	8006a44 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8006a18:	2301      	movs	r3, #1
 8006a1a:	e0b9      	b.n	8006b90 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	685b      	ldr	r3, [r3, #4]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d107      	bne.n	8006a34 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006a24:	4b5d      	ldr	r3, [pc, #372]	; (8006b9c <HAL_RCC_ClockConfig+0x260>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f003 0302 	and.w	r3, r3, #2
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d109      	bne.n	8006a44 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8006a30:	2301      	movs	r3, #1
 8006a32:	e0ad      	b.n	8006b90 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006a34:	4b59      	ldr	r3, [pc, #356]	; (8006b9c <HAL_RCC_ClockConfig+0x260>)
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d101      	bne.n	8006a44 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8006a40:	2301      	movs	r3, #1
 8006a42:	e0a5      	b.n	8006b90 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8006a44:	f000 f8b4 	bl	8006bb0 <HAL_RCC_GetSysClockFreq>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	4a55      	ldr	r2, [pc, #340]	; (8006ba0 <HAL_RCC_ClockConfig+0x264>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d90f      	bls.n	8006a70 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8006a50:	4b52      	ldr	r3, [pc, #328]	; (8006b9c <HAL_RCC_ClockConfig+0x260>)
 8006a52:	689b      	ldr	r3, [r3, #8]
 8006a54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d109      	bne.n	8006a70 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006a5c:	4b4f      	ldr	r3, [pc, #316]	; (8006b9c <HAL_RCC_ClockConfig+0x260>)
 8006a5e:	689b      	ldr	r3, [r3, #8]
 8006a60:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006a64:	4a4d      	ldr	r2, [pc, #308]	; (8006b9c <HAL_RCC_ClockConfig+0x260>)
 8006a66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a6a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006a6c:	2380      	movs	r3, #128	; 0x80
 8006a6e:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006a70:	4b4a      	ldr	r3, [pc, #296]	; (8006b9c <HAL_RCC_ClockConfig+0x260>)
 8006a72:	689b      	ldr	r3, [r3, #8]
 8006a74:	f023 0203 	bic.w	r2, r3, #3
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	685b      	ldr	r3, [r3, #4]
 8006a7c:	4947      	ldr	r1, [pc, #284]	; (8006b9c <HAL_RCC_ClockConfig+0x260>)
 8006a7e:	4313      	orrs	r3, r2
 8006a80:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a82:	f7fd fa13 	bl	8003eac <HAL_GetTick>
 8006a86:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a88:	e00a      	b.n	8006aa0 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a8a:	f7fd fa0f 	bl	8003eac <HAL_GetTick>
 8006a8e:	4602      	mov	r2, r0
 8006a90:	693b      	ldr	r3, [r7, #16]
 8006a92:	1ad3      	subs	r3, r2, r3
 8006a94:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d901      	bls.n	8006aa0 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8006a9c:	2303      	movs	r3, #3
 8006a9e:	e077      	b.n	8006b90 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006aa0:	4b3e      	ldr	r3, [pc, #248]	; (8006b9c <HAL_RCC_ClockConfig+0x260>)
 8006aa2:	689b      	ldr	r3, [r3, #8]
 8006aa4:	f003 020c 	and.w	r2, r3, #12
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	685b      	ldr	r3, [r3, #4]
 8006aac:	009b      	lsls	r3, r3, #2
 8006aae:	429a      	cmp	r2, r3
 8006ab0:	d1eb      	bne.n	8006a8a <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	2b80      	cmp	r3, #128	; 0x80
 8006ab6:	d105      	bne.n	8006ac4 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006ab8:	4b38      	ldr	r3, [pc, #224]	; (8006b9c <HAL_RCC_ClockConfig+0x260>)
 8006aba:	689b      	ldr	r3, [r3, #8]
 8006abc:	4a37      	ldr	r2, [pc, #220]	; (8006b9c <HAL_RCC_ClockConfig+0x260>)
 8006abe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006ac2:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f003 0302 	and.w	r3, r3, #2
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d010      	beq.n	8006af2 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	689a      	ldr	r2, [r3, #8]
 8006ad4:	4b31      	ldr	r3, [pc, #196]	; (8006b9c <HAL_RCC_ClockConfig+0x260>)
 8006ad6:	689b      	ldr	r3, [r3, #8]
 8006ad8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006adc:	429a      	cmp	r2, r3
 8006ade:	d208      	bcs.n	8006af2 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006ae0:	4b2e      	ldr	r3, [pc, #184]	; (8006b9c <HAL_RCC_ClockConfig+0x260>)
 8006ae2:	689b      	ldr	r3, [r3, #8]
 8006ae4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	689b      	ldr	r3, [r3, #8]
 8006aec:	492b      	ldr	r1, [pc, #172]	; (8006b9c <HAL_RCC_ClockConfig+0x260>)
 8006aee:	4313      	orrs	r3, r2
 8006af0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006af2:	4b29      	ldr	r3, [pc, #164]	; (8006b98 <HAL_RCC_ClockConfig+0x25c>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f003 030f 	and.w	r3, r3, #15
 8006afa:	683a      	ldr	r2, [r7, #0]
 8006afc:	429a      	cmp	r2, r3
 8006afe:	d210      	bcs.n	8006b22 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b00:	4b25      	ldr	r3, [pc, #148]	; (8006b98 <HAL_RCC_ClockConfig+0x25c>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f023 020f 	bic.w	r2, r3, #15
 8006b08:	4923      	ldr	r1, [pc, #140]	; (8006b98 <HAL_RCC_ClockConfig+0x25c>)
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	4313      	orrs	r3, r2
 8006b0e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b10:	4b21      	ldr	r3, [pc, #132]	; (8006b98 <HAL_RCC_ClockConfig+0x25c>)
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f003 030f 	and.w	r3, r3, #15
 8006b18:	683a      	ldr	r2, [r7, #0]
 8006b1a:	429a      	cmp	r2, r3
 8006b1c:	d001      	beq.n	8006b22 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8006b1e:	2301      	movs	r3, #1
 8006b20:	e036      	b.n	8006b90 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f003 0304 	and.w	r3, r3, #4
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d008      	beq.n	8006b40 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006b2e:	4b1b      	ldr	r3, [pc, #108]	; (8006b9c <HAL_RCC_ClockConfig+0x260>)
 8006b30:	689b      	ldr	r3, [r3, #8]
 8006b32:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	68db      	ldr	r3, [r3, #12]
 8006b3a:	4918      	ldr	r1, [pc, #96]	; (8006b9c <HAL_RCC_ClockConfig+0x260>)
 8006b3c:	4313      	orrs	r3, r2
 8006b3e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f003 0308 	and.w	r3, r3, #8
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d009      	beq.n	8006b60 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006b4c:	4b13      	ldr	r3, [pc, #76]	; (8006b9c <HAL_RCC_ClockConfig+0x260>)
 8006b4e:	689b      	ldr	r3, [r3, #8]
 8006b50:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	691b      	ldr	r3, [r3, #16]
 8006b58:	00db      	lsls	r3, r3, #3
 8006b5a:	4910      	ldr	r1, [pc, #64]	; (8006b9c <HAL_RCC_ClockConfig+0x260>)
 8006b5c:	4313      	orrs	r3, r2
 8006b5e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006b60:	f000 f826 	bl	8006bb0 <HAL_RCC_GetSysClockFreq>
 8006b64:	4602      	mov	r2, r0
 8006b66:	4b0d      	ldr	r3, [pc, #52]	; (8006b9c <HAL_RCC_ClockConfig+0x260>)
 8006b68:	689b      	ldr	r3, [r3, #8]
 8006b6a:	091b      	lsrs	r3, r3, #4
 8006b6c:	f003 030f 	and.w	r3, r3, #15
 8006b70:	490c      	ldr	r1, [pc, #48]	; (8006ba4 <HAL_RCC_ClockConfig+0x268>)
 8006b72:	5ccb      	ldrb	r3, [r1, r3]
 8006b74:	f003 031f 	and.w	r3, r3, #31
 8006b78:	fa22 f303 	lsr.w	r3, r2, r3
 8006b7c:	4a0a      	ldr	r2, [pc, #40]	; (8006ba8 <HAL_RCC_ClockConfig+0x26c>)
 8006b7e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006b80:	4b0a      	ldr	r3, [pc, #40]	; (8006bac <HAL_RCC_ClockConfig+0x270>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4618      	mov	r0, r3
 8006b86:	f7fd f941 	bl	8003e0c <HAL_InitTick>
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	73fb      	strb	r3, [r7, #15]

  return status;
 8006b8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b90:	4618      	mov	r0, r3
 8006b92:	3718      	adds	r7, #24
 8006b94:	46bd      	mov	sp, r7
 8006b96:	bd80      	pop	{r7, pc}
 8006b98:	40022000 	.word	0x40022000
 8006b9c:	40021000 	.word	0x40021000
 8006ba0:	04c4b400 	.word	0x04c4b400
 8006ba4:	0800caac 	.word	0x0800caac
 8006ba8:	20000000 	.word	0x20000000
 8006bac:	20000028 	.word	0x20000028

08006bb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	b089      	sub	sp, #36	; 0x24
 8006bb4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	61fb      	str	r3, [r7, #28]
 8006bba:	2300      	movs	r3, #0
 8006bbc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006bbe:	4b3e      	ldr	r3, [pc, #248]	; (8006cb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8006bc0:	689b      	ldr	r3, [r3, #8]
 8006bc2:	f003 030c 	and.w	r3, r3, #12
 8006bc6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006bc8:	4b3b      	ldr	r3, [pc, #236]	; (8006cb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8006bca:	68db      	ldr	r3, [r3, #12]
 8006bcc:	f003 0303 	and.w	r3, r3, #3
 8006bd0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006bd2:	693b      	ldr	r3, [r7, #16]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d005      	beq.n	8006be4 <HAL_RCC_GetSysClockFreq+0x34>
 8006bd8:	693b      	ldr	r3, [r7, #16]
 8006bda:	2b0c      	cmp	r3, #12
 8006bdc:	d121      	bne.n	8006c22 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	2b01      	cmp	r3, #1
 8006be2:	d11e      	bne.n	8006c22 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006be4:	4b34      	ldr	r3, [pc, #208]	; (8006cb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f003 0308 	and.w	r3, r3, #8
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d107      	bne.n	8006c00 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006bf0:	4b31      	ldr	r3, [pc, #196]	; (8006cb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8006bf2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006bf6:	0a1b      	lsrs	r3, r3, #8
 8006bf8:	f003 030f 	and.w	r3, r3, #15
 8006bfc:	61fb      	str	r3, [r7, #28]
 8006bfe:	e005      	b.n	8006c0c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006c00:	4b2d      	ldr	r3, [pc, #180]	; (8006cb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	091b      	lsrs	r3, r3, #4
 8006c06:	f003 030f 	and.w	r3, r3, #15
 8006c0a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006c0c:	4a2b      	ldr	r2, [pc, #172]	; (8006cbc <HAL_RCC_GetSysClockFreq+0x10c>)
 8006c0e:	69fb      	ldr	r3, [r7, #28]
 8006c10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c14:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006c16:	693b      	ldr	r3, [r7, #16]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d10d      	bne.n	8006c38 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006c1c:	69fb      	ldr	r3, [r7, #28]
 8006c1e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006c20:	e00a      	b.n	8006c38 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006c22:	693b      	ldr	r3, [r7, #16]
 8006c24:	2b04      	cmp	r3, #4
 8006c26:	d102      	bne.n	8006c2e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006c28:	4b25      	ldr	r3, [pc, #148]	; (8006cc0 <HAL_RCC_GetSysClockFreq+0x110>)
 8006c2a:	61bb      	str	r3, [r7, #24]
 8006c2c:	e004      	b.n	8006c38 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006c2e:	693b      	ldr	r3, [r7, #16]
 8006c30:	2b08      	cmp	r3, #8
 8006c32:	d101      	bne.n	8006c38 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006c34:	4b23      	ldr	r3, [pc, #140]	; (8006cc4 <HAL_RCC_GetSysClockFreq+0x114>)
 8006c36:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006c38:	693b      	ldr	r3, [r7, #16]
 8006c3a:	2b0c      	cmp	r3, #12
 8006c3c:	d134      	bne.n	8006ca8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006c3e:	4b1e      	ldr	r3, [pc, #120]	; (8006cb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8006c40:	68db      	ldr	r3, [r3, #12]
 8006c42:	f003 0303 	and.w	r3, r3, #3
 8006c46:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	2b02      	cmp	r3, #2
 8006c4c:	d003      	beq.n	8006c56 <HAL_RCC_GetSysClockFreq+0xa6>
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	2b03      	cmp	r3, #3
 8006c52:	d003      	beq.n	8006c5c <HAL_RCC_GetSysClockFreq+0xac>
 8006c54:	e005      	b.n	8006c62 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006c56:	4b1a      	ldr	r3, [pc, #104]	; (8006cc0 <HAL_RCC_GetSysClockFreq+0x110>)
 8006c58:	617b      	str	r3, [r7, #20]
      break;
 8006c5a:	e005      	b.n	8006c68 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006c5c:	4b19      	ldr	r3, [pc, #100]	; (8006cc4 <HAL_RCC_GetSysClockFreq+0x114>)
 8006c5e:	617b      	str	r3, [r7, #20]
      break;
 8006c60:	e002      	b.n	8006c68 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006c62:	69fb      	ldr	r3, [r7, #28]
 8006c64:	617b      	str	r3, [r7, #20]
      break;
 8006c66:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006c68:	4b13      	ldr	r3, [pc, #76]	; (8006cb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8006c6a:	68db      	ldr	r3, [r3, #12]
 8006c6c:	091b      	lsrs	r3, r3, #4
 8006c6e:	f003 030f 	and.w	r3, r3, #15
 8006c72:	3301      	adds	r3, #1
 8006c74:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006c76:	4b10      	ldr	r3, [pc, #64]	; (8006cb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8006c78:	68db      	ldr	r3, [r3, #12]
 8006c7a:	0a1b      	lsrs	r3, r3, #8
 8006c7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c80:	697a      	ldr	r2, [r7, #20]
 8006c82:	fb03 f202 	mul.w	r2, r3, r2
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c8c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006c8e:	4b0a      	ldr	r3, [pc, #40]	; (8006cb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8006c90:	68db      	ldr	r3, [r3, #12]
 8006c92:	0e5b      	lsrs	r3, r3, #25
 8006c94:	f003 0303 	and.w	r3, r3, #3
 8006c98:	3301      	adds	r3, #1
 8006c9a:	005b      	lsls	r3, r3, #1
 8006c9c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006c9e:	697a      	ldr	r2, [r7, #20]
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ca6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006ca8:	69bb      	ldr	r3, [r7, #24]
}
 8006caa:	4618      	mov	r0, r3
 8006cac:	3724      	adds	r7, #36	; 0x24
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb4:	4770      	bx	lr
 8006cb6:	bf00      	nop
 8006cb8:	40021000 	.word	0x40021000
 8006cbc:	0800cac4 	.word	0x0800cac4
 8006cc0:	00f42400 	.word	0x00f42400
 8006cc4:	007a1200 	.word	0x007a1200

08006cc8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006cc8:	b480      	push	{r7}
 8006cca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006ccc:	4b03      	ldr	r3, [pc, #12]	; (8006cdc <HAL_RCC_GetHCLKFreq+0x14>)
 8006cce:	681b      	ldr	r3, [r3, #0]
}
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd8:	4770      	bx	lr
 8006cda:	bf00      	nop
 8006cdc:	20000000 	.word	0x20000000

08006ce0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006ce4:	f7ff fff0 	bl	8006cc8 <HAL_RCC_GetHCLKFreq>
 8006ce8:	4602      	mov	r2, r0
 8006cea:	4b06      	ldr	r3, [pc, #24]	; (8006d04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006cec:	689b      	ldr	r3, [r3, #8]
 8006cee:	0a1b      	lsrs	r3, r3, #8
 8006cf0:	f003 0307 	and.w	r3, r3, #7
 8006cf4:	4904      	ldr	r1, [pc, #16]	; (8006d08 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006cf6:	5ccb      	ldrb	r3, [r1, r3]
 8006cf8:	f003 031f 	and.w	r3, r3, #31
 8006cfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006d00:	4618      	mov	r0, r3
 8006d02:	bd80      	pop	{r7, pc}
 8006d04:	40021000 	.word	0x40021000
 8006d08:	0800cabc 	.word	0x0800cabc

08006d0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006d10:	f7ff ffda 	bl	8006cc8 <HAL_RCC_GetHCLKFreq>
 8006d14:	4602      	mov	r2, r0
 8006d16:	4b06      	ldr	r3, [pc, #24]	; (8006d30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006d18:	689b      	ldr	r3, [r3, #8]
 8006d1a:	0adb      	lsrs	r3, r3, #11
 8006d1c:	f003 0307 	and.w	r3, r3, #7
 8006d20:	4904      	ldr	r1, [pc, #16]	; (8006d34 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006d22:	5ccb      	ldrb	r3, [r1, r3]
 8006d24:	f003 031f 	and.w	r3, r3, #31
 8006d28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	bd80      	pop	{r7, pc}
 8006d30:	40021000 	.word	0x40021000
 8006d34:	0800cabc 	.word	0x0800cabc

08006d38 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b086      	sub	sp, #24
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006d40:	2300      	movs	r3, #0
 8006d42:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006d44:	4b27      	ldr	r3, [pc, #156]	; (8006de4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006d46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d003      	beq.n	8006d58 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006d50:	f7ff f9ba 	bl	80060c8 <HAL_PWREx_GetVoltageRange>
 8006d54:	6178      	str	r0, [r7, #20]
 8006d56:	e014      	b.n	8006d82 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006d58:	4b22      	ldr	r3, [pc, #136]	; (8006de4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006d5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d5c:	4a21      	ldr	r2, [pc, #132]	; (8006de4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006d5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d62:	6593      	str	r3, [r2, #88]	; 0x58
 8006d64:	4b1f      	ldr	r3, [pc, #124]	; (8006de4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006d66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d6c:	60fb      	str	r3, [r7, #12]
 8006d6e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006d70:	f7ff f9aa 	bl	80060c8 <HAL_PWREx_GetVoltageRange>
 8006d74:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006d76:	4b1b      	ldr	r3, [pc, #108]	; (8006de4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006d78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d7a:	4a1a      	ldr	r2, [pc, #104]	; (8006de4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006d7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d80:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d88:	d10b      	bne.n	8006da2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2b80      	cmp	r3, #128	; 0x80
 8006d8e:	d913      	bls.n	8006db8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2ba0      	cmp	r3, #160	; 0xa0
 8006d94:	d902      	bls.n	8006d9c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006d96:	2302      	movs	r3, #2
 8006d98:	613b      	str	r3, [r7, #16]
 8006d9a:	e00d      	b.n	8006db8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	613b      	str	r3, [r7, #16]
 8006da0:	e00a      	b.n	8006db8 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2b7f      	cmp	r3, #127	; 0x7f
 8006da6:	d902      	bls.n	8006dae <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8006da8:	2302      	movs	r3, #2
 8006daa:	613b      	str	r3, [r7, #16]
 8006dac:	e004      	b.n	8006db8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2b70      	cmp	r3, #112	; 0x70
 8006db2:	d101      	bne.n	8006db8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006db4:	2301      	movs	r3, #1
 8006db6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006db8:	4b0b      	ldr	r3, [pc, #44]	; (8006de8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f023 020f 	bic.w	r2, r3, #15
 8006dc0:	4909      	ldr	r1, [pc, #36]	; (8006de8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8006dc2:	693b      	ldr	r3, [r7, #16]
 8006dc4:	4313      	orrs	r3, r2
 8006dc6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006dc8:	4b07      	ldr	r3, [pc, #28]	; (8006de8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f003 030f 	and.w	r3, r3, #15
 8006dd0:	693a      	ldr	r2, [r7, #16]
 8006dd2:	429a      	cmp	r2, r3
 8006dd4:	d001      	beq.n	8006dda <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8006dd6:	2301      	movs	r3, #1
 8006dd8:	e000      	b.n	8006ddc <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8006dda:	2300      	movs	r3, #0
}
 8006ddc:	4618      	mov	r0, r3
 8006dde:	3718      	adds	r7, #24
 8006de0:	46bd      	mov	sp, r7
 8006de2:	bd80      	pop	{r7, pc}
 8006de4:	40021000 	.word	0x40021000
 8006de8:	40022000 	.word	0x40022000

08006dec <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006dec:	b480      	push	{r7}
 8006dee:	b087      	sub	sp, #28
 8006df0:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006df2:	4b2d      	ldr	r3, [pc, #180]	; (8006ea8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006df4:	68db      	ldr	r3, [r3, #12]
 8006df6:	f003 0303 	and.w	r3, r3, #3
 8006dfa:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	2b03      	cmp	r3, #3
 8006e00:	d00b      	beq.n	8006e1a <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	2b03      	cmp	r3, #3
 8006e06:	d825      	bhi.n	8006e54 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	2b01      	cmp	r3, #1
 8006e0c:	d008      	beq.n	8006e20 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	2b02      	cmp	r3, #2
 8006e12:	d11f      	bne.n	8006e54 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8006e14:	4b25      	ldr	r3, [pc, #148]	; (8006eac <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8006e16:	613b      	str	r3, [r7, #16]
    break;
 8006e18:	e01f      	b.n	8006e5a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8006e1a:	4b25      	ldr	r3, [pc, #148]	; (8006eb0 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8006e1c:	613b      	str	r3, [r7, #16]
    break;
 8006e1e:	e01c      	b.n	8006e5a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006e20:	4b21      	ldr	r3, [pc, #132]	; (8006ea8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f003 0308 	and.w	r3, r3, #8
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d107      	bne.n	8006e3c <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006e2c:	4b1e      	ldr	r3, [pc, #120]	; (8006ea8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006e2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006e32:	0a1b      	lsrs	r3, r3, #8
 8006e34:	f003 030f 	and.w	r3, r3, #15
 8006e38:	617b      	str	r3, [r7, #20]
 8006e3a:	e005      	b.n	8006e48 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006e3c:	4b1a      	ldr	r3, [pc, #104]	; (8006ea8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	091b      	lsrs	r3, r3, #4
 8006e42:	f003 030f 	and.w	r3, r3, #15
 8006e46:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8006e48:	4a1a      	ldr	r2, [pc, #104]	; (8006eb4 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8006e4a:	697b      	ldr	r3, [r7, #20]
 8006e4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e50:	613b      	str	r3, [r7, #16]
    break;
 8006e52:	e002      	b.n	8006e5a <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8006e54:	2300      	movs	r3, #0
 8006e56:	613b      	str	r3, [r7, #16]
    break;
 8006e58:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006e5a:	4b13      	ldr	r3, [pc, #76]	; (8006ea8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006e5c:	68db      	ldr	r3, [r3, #12]
 8006e5e:	091b      	lsrs	r3, r3, #4
 8006e60:	f003 030f 	and.w	r3, r3, #15
 8006e64:	3301      	adds	r3, #1
 8006e66:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006e68:	4b0f      	ldr	r3, [pc, #60]	; (8006ea8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006e6a:	68db      	ldr	r3, [r3, #12]
 8006e6c:	0a1b      	lsrs	r3, r3, #8
 8006e6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e72:	693a      	ldr	r2, [r7, #16]
 8006e74:	fb03 f202 	mul.w	r2, r3, r2
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e7e:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006e80:	4b09      	ldr	r3, [pc, #36]	; (8006ea8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006e82:	68db      	ldr	r3, [r3, #12]
 8006e84:	0e5b      	lsrs	r3, r3, #25
 8006e86:	f003 0303 	and.w	r3, r3, #3
 8006e8a:	3301      	adds	r3, #1
 8006e8c:	005b      	lsls	r3, r3, #1
 8006e8e:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8006e90:	693a      	ldr	r2, [r7, #16]
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e98:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8006e9a:	683b      	ldr	r3, [r7, #0]
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	371c      	adds	r7, #28
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea6:	4770      	bx	lr
 8006ea8:	40021000 	.word	0x40021000
 8006eac:	00f42400 	.word	0x00f42400
 8006eb0:	007a1200 	.word	0x007a1200
 8006eb4:	0800cac4 	.word	0x0800cac4

08006eb8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b086      	sub	sp, #24
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d040      	beq.n	8006f56 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ed8:	2b80      	cmp	r3, #128	; 0x80
 8006eda:	d02a      	beq.n	8006f32 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006edc:	2b80      	cmp	r3, #128	; 0x80
 8006ede:	d825      	bhi.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8006ee0:	2b60      	cmp	r3, #96	; 0x60
 8006ee2:	d026      	beq.n	8006f32 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006ee4:	2b60      	cmp	r3, #96	; 0x60
 8006ee6:	d821      	bhi.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8006ee8:	2b40      	cmp	r3, #64	; 0x40
 8006eea:	d006      	beq.n	8006efa <HAL_RCCEx_PeriphCLKConfig+0x42>
 8006eec:	2b40      	cmp	r3, #64	; 0x40
 8006eee:	d81d      	bhi.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d009      	beq.n	8006f08 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8006ef4:	2b20      	cmp	r3, #32
 8006ef6:	d010      	beq.n	8006f1a <HAL_RCCEx_PeriphCLKConfig+0x62>
 8006ef8:	e018      	b.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006efa:	4b89      	ldr	r3, [pc, #548]	; (8007120 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006efc:	68db      	ldr	r3, [r3, #12]
 8006efe:	4a88      	ldr	r2, [pc, #544]	; (8007120 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006f00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f04:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006f06:	e015      	b.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	3304      	adds	r3, #4
 8006f0c:	2100      	movs	r1, #0
 8006f0e:	4618      	mov	r0, r3
 8006f10:	f000 fb02 	bl	8007518 <RCCEx_PLLSAI1_Config>
 8006f14:	4603      	mov	r3, r0
 8006f16:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006f18:	e00c      	b.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	3320      	adds	r3, #32
 8006f1e:	2100      	movs	r1, #0
 8006f20:	4618      	mov	r0, r3
 8006f22:	f000 fbed 	bl	8007700 <RCCEx_PLLSAI2_Config>
 8006f26:	4603      	mov	r3, r0
 8006f28:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006f2a:	e003      	b.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	74fb      	strb	r3, [r7, #19]
      break;
 8006f30:	e000      	b.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8006f32:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f34:	7cfb      	ldrb	r3, [r7, #19]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d10b      	bne.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006f3a:	4b79      	ldr	r3, [pc, #484]	; (8007120 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006f3c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006f40:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f48:	4975      	ldr	r1, [pc, #468]	; (8007120 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006f4a:	4313      	orrs	r3, r2
 8006f4c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8006f50:	e001      	b.n	8006f56 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f52:	7cfb      	ldrb	r3, [r7, #19]
 8006f54:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d047      	beq.n	8006ff2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f6a:	d030      	beq.n	8006fce <HAL_RCCEx_PeriphCLKConfig+0x116>
 8006f6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f70:	d82a      	bhi.n	8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8006f72:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f76:	d02a      	beq.n	8006fce <HAL_RCCEx_PeriphCLKConfig+0x116>
 8006f78:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f7c:	d824      	bhi.n	8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8006f7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f82:	d008      	beq.n	8006f96 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8006f84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f88:	d81e      	bhi.n	8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d00a      	beq.n	8006fa4 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8006f8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f92:	d010      	beq.n	8006fb6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8006f94:	e018      	b.n	8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006f96:	4b62      	ldr	r3, [pc, #392]	; (8007120 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006f98:	68db      	ldr	r3, [r3, #12]
 8006f9a:	4a61      	ldr	r2, [pc, #388]	; (8007120 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006f9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006fa0:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006fa2:	e015      	b.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	3304      	adds	r3, #4
 8006fa8:	2100      	movs	r1, #0
 8006faa:	4618      	mov	r0, r3
 8006fac:	f000 fab4 	bl	8007518 <RCCEx_PLLSAI1_Config>
 8006fb0:	4603      	mov	r3, r0
 8006fb2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006fb4:	e00c      	b.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	3320      	adds	r3, #32
 8006fba:	2100      	movs	r1, #0
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	f000 fb9f 	bl	8007700 <RCCEx_PLLSAI2_Config>
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006fc6:	e003      	b.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006fc8:	2301      	movs	r3, #1
 8006fca:	74fb      	strb	r3, [r7, #19]
      break;
 8006fcc:	e000      	b.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8006fce:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006fd0:	7cfb      	ldrb	r3, [r7, #19]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d10b      	bne.n	8006fee <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006fd6:	4b52      	ldr	r3, [pc, #328]	; (8007120 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006fd8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006fdc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fe4:	494e      	ldr	r1, [pc, #312]	; (8007120 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006fe6:	4313      	orrs	r3, r2
 8006fe8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8006fec:	e001      	b.n	8006ff2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fee:	7cfb      	ldrb	r3, [r7, #19]
 8006ff0:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	f000 809f 	beq.w	800713e <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007000:	2300      	movs	r3, #0
 8007002:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007004:	4b46      	ldr	r3, [pc, #280]	; (8007120 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007006:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007008:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800700c:	2b00      	cmp	r3, #0
 800700e:	d101      	bne.n	8007014 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8007010:	2301      	movs	r3, #1
 8007012:	e000      	b.n	8007016 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8007014:	2300      	movs	r3, #0
 8007016:	2b00      	cmp	r3, #0
 8007018:	d00d      	beq.n	8007036 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800701a:	4b41      	ldr	r3, [pc, #260]	; (8007120 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800701c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800701e:	4a40      	ldr	r2, [pc, #256]	; (8007120 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007020:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007024:	6593      	str	r3, [r2, #88]	; 0x58
 8007026:	4b3e      	ldr	r3, [pc, #248]	; (8007120 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007028:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800702a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800702e:	60bb      	str	r3, [r7, #8]
 8007030:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007032:	2301      	movs	r3, #1
 8007034:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007036:	4b3b      	ldr	r3, [pc, #236]	; (8007124 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4a3a      	ldr	r2, [pc, #232]	; (8007124 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800703c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007040:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007042:	f7fc ff33 	bl	8003eac <HAL_GetTick>
 8007046:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007048:	e009      	b.n	800705e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800704a:	f7fc ff2f 	bl	8003eac <HAL_GetTick>
 800704e:	4602      	mov	r2, r0
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	1ad3      	subs	r3, r2, r3
 8007054:	2b02      	cmp	r3, #2
 8007056:	d902      	bls.n	800705e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8007058:	2303      	movs	r3, #3
 800705a:	74fb      	strb	r3, [r7, #19]
        break;
 800705c:	e005      	b.n	800706a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800705e:	4b31      	ldr	r3, [pc, #196]	; (8007124 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007066:	2b00      	cmp	r3, #0
 8007068:	d0ef      	beq.n	800704a <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800706a:	7cfb      	ldrb	r3, [r7, #19]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d15b      	bne.n	8007128 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007070:	4b2b      	ldr	r3, [pc, #172]	; (8007120 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007072:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007076:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800707a:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800707c:	697b      	ldr	r3, [r7, #20]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d01f      	beq.n	80070c2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007088:	697a      	ldr	r2, [r7, #20]
 800708a:	429a      	cmp	r2, r3
 800708c:	d019      	beq.n	80070c2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800708e:	4b24      	ldr	r3, [pc, #144]	; (8007120 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007090:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007094:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007098:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800709a:	4b21      	ldr	r3, [pc, #132]	; (8007120 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800709c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070a0:	4a1f      	ldr	r2, [pc, #124]	; (8007120 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80070a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80070a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80070aa:	4b1d      	ldr	r3, [pc, #116]	; (8007120 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80070ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070b0:	4a1b      	ldr	r2, [pc, #108]	; (8007120 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80070b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80070b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80070ba:	4a19      	ldr	r2, [pc, #100]	; (8007120 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80070bc:	697b      	ldr	r3, [r7, #20]
 80070be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80070c2:	697b      	ldr	r3, [r7, #20]
 80070c4:	f003 0301 	and.w	r3, r3, #1
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d016      	beq.n	80070fa <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070cc:	f7fc feee 	bl	8003eac <HAL_GetTick>
 80070d0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80070d2:	e00b      	b.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80070d4:	f7fc feea 	bl	8003eac <HAL_GetTick>
 80070d8:	4602      	mov	r2, r0
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	1ad3      	subs	r3, r2, r3
 80070de:	f241 3288 	movw	r2, #5000	; 0x1388
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d902      	bls.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80070e6:	2303      	movs	r3, #3
 80070e8:	74fb      	strb	r3, [r7, #19]
            break;
 80070ea:	e006      	b.n	80070fa <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80070ec:	4b0c      	ldr	r3, [pc, #48]	; (8007120 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80070ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070f2:	f003 0302 	and.w	r3, r3, #2
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d0ec      	beq.n	80070d4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80070fa:	7cfb      	ldrb	r3, [r7, #19]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d10c      	bne.n	800711a <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007100:	4b07      	ldr	r3, [pc, #28]	; (8007120 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007102:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007106:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007110:	4903      	ldr	r1, [pc, #12]	; (8007120 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007112:	4313      	orrs	r3, r2
 8007114:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007118:	e008      	b.n	800712c <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800711a:	7cfb      	ldrb	r3, [r7, #19]
 800711c:	74bb      	strb	r3, [r7, #18]
 800711e:	e005      	b.n	800712c <HAL_RCCEx_PeriphCLKConfig+0x274>
 8007120:	40021000 	.word	0x40021000
 8007124:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007128:	7cfb      	ldrb	r3, [r7, #19]
 800712a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800712c:	7c7b      	ldrb	r3, [r7, #17]
 800712e:	2b01      	cmp	r3, #1
 8007130:	d105      	bne.n	800713e <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007132:	4ba0      	ldr	r3, [pc, #640]	; (80073b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007134:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007136:	4a9f      	ldr	r2, [pc, #636]	; (80073b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007138:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800713c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f003 0301 	and.w	r3, r3, #1
 8007146:	2b00      	cmp	r3, #0
 8007148:	d00a      	beq.n	8007160 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800714a:	4b9a      	ldr	r3, [pc, #616]	; (80073b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800714c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007150:	f023 0203 	bic.w	r2, r3, #3
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007158:	4996      	ldr	r1, [pc, #600]	; (80073b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800715a:	4313      	orrs	r3, r2
 800715c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f003 0302 	and.w	r3, r3, #2
 8007168:	2b00      	cmp	r3, #0
 800716a:	d00a      	beq.n	8007182 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800716c:	4b91      	ldr	r3, [pc, #580]	; (80073b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800716e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007172:	f023 020c 	bic.w	r2, r3, #12
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800717a:	498e      	ldr	r1, [pc, #568]	; (80073b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800717c:	4313      	orrs	r3, r2
 800717e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f003 0304 	and.w	r3, r3, #4
 800718a:	2b00      	cmp	r3, #0
 800718c:	d00a      	beq.n	80071a4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800718e:	4b89      	ldr	r3, [pc, #548]	; (80073b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007190:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007194:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800719c:	4985      	ldr	r1, [pc, #532]	; (80073b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800719e:	4313      	orrs	r3, r2
 80071a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f003 0308 	and.w	r3, r3, #8
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d00a      	beq.n	80071c6 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80071b0:	4b80      	ldr	r3, [pc, #512]	; (80073b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80071b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071b6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071be:	497d      	ldr	r1, [pc, #500]	; (80073b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80071c0:	4313      	orrs	r3, r2
 80071c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f003 0310 	and.w	r3, r3, #16
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d00a      	beq.n	80071e8 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80071d2:	4b78      	ldr	r3, [pc, #480]	; (80073b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80071d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071e0:	4974      	ldr	r1, [pc, #464]	; (80073b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80071e2:	4313      	orrs	r3, r2
 80071e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f003 0320 	and.w	r3, r3, #32
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d00a      	beq.n	800720a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80071f4:	4b6f      	ldr	r3, [pc, #444]	; (80073b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80071f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071fa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007202:	496c      	ldr	r1, [pc, #432]	; (80073b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007204:	4313      	orrs	r3, r2
 8007206:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007212:	2b00      	cmp	r3, #0
 8007214:	d00a      	beq.n	800722c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007216:	4b67      	ldr	r3, [pc, #412]	; (80073b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007218:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800721c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007224:	4963      	ldr	r1, [pc, #396]	; (80073b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007226:	4313      	orrs	r3, r2
 8007228:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007234:	2b00      	cmp	r3, #0
 8007236:	d00a      	beq.n	800724e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007238:	4b5e      	ldr	r3, [pc, #376]	; (80073b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800723a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800723e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007246:	495b      	ldr	r1, [pc, #364]	; (80073b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007248:	4313      	orrs	r3, r2
 800724a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007256:	2b00      	cmp	r3, #0
 8007258:	d00a      	beq.n	8007270 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800725a:	4b56      	ldr	r3, [pc, #344]	; (80073b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800725c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007260:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007268:	4952      	ldr	r1, [pc, #328]	; (80073b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800726a:	4313      	orrs	r3, r2
 800726c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007278:	2b00      	cmp	r3, #0
 800727a:	d00a      	beq.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800727c:	4b4d      	ldr	r3, [pc, #308]	; (80073b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800727e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007282:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800728a:	494a      	ldr	r1, [pc, #296]	; (80073b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800728c:	4313      	orrs	r3, r2
 800728e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800729a:	2b00      	cmp	r3, #0
 800729c:	d00a      	beq.n	80072b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800729e:	4b45      	ldr	r3, [pc, #276]	; (80073b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80072a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072a4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072ac:	4941      	ldr	r1, [pc, #260]	; (80073b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80072ae:	4313      	orrs	r3, r2
 80072b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d00a      	beq.n	80072d6 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80072c0:	4b3c      	ldr	r3, [pc, #240]	; (80073b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80072c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80072c6:	f023 0203 	bic.w	r2, r3, #3
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072ce:	4939      	ldr	r1, [pc, #228]	; (80073b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80072d0:	4313      	orrs	r3, r2
 80072d2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d028      	beq.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80072e2:	4b34      	ldr	r3, [pc, #208]	; (80073b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80072e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072e8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80072f0:	4930      	ldr	r1, [pc, #192]	; (80073b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80072f2:	4313      	orrs	r3, r2
 80072f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80072fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007300:	d106      	bne.n	8007310 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007302:	4b2c      	ldr	r3, [pc, #176]	; (80073b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007304:	68db      	ldr	r3, [r3, #12]
 8007306:	4a2b      	ldr	r2, [pc, #172]	; (80073b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007308:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800730c:	60d3      	str	r3, [r2, #12]
 800730e:	e011      	b.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007314:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007318:	d10c      	bne.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	3304      	adds	r3, #4
 800731e:	2101      	movs	r1, #1
 8007320:	4618      	mov	r0, r3
 8007322:	f000 f8f9 	bl	8007518 <RCCEx_PLLSAI1_Config>
 8007326:	4603      	mov	r3, r0
 8007328:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800732a:	7cfb      	ldrb	r3, [r7, #19]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d001      	beq.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8007330:	7cfb      	ldrb	r3, [r7, #19]
 8007332:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800733c:	2b00      	cmp	r3, #0
 800733e:	d04d      	beq.n	80073dc <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007344:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007348:	d108      	bne.n	800735c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800734a:	4b1a      	ldr	r3, [pc, #104]	; (80073b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800734c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007350:	4a18      	ldr	r2, [pc, #96]	; (80073b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007352:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007356:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800735a:	e012      	b.n	8007382 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800735c:	4b15      	ldr	r3, [pc, #84]	; (80073b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800735e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007362:	4a14      	ldr	r2, [pc, #80]	; (80073b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007364:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007368:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800736c:	4b11      	ldr	r3, [pc, #68]	; (80073b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800736e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007372:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800737a:	490e      	ldr	r1, [pc, #56]	; (80073b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800737c:	4313      	orrs	r3, r2
 800737e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007386:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800738a:	d106      	bne.n	800739a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800738c:	4b09      	ldr	r3, [pc, #36]	; (80073b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800738e:	68db      	ldr	r3, [r3, #12]
 8007390:	4a08      	ldr	r2, [pc, #32]	; (80073b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007392:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007396:	60d3      	str	r3, [r2, #12]
 8007398:	e020      	b.n	80073dc <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800739e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80073a2:	d109      	bne.n	80073b8 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80073a4:	4b03      	ldr	r3, [pc, #12]	; (80073b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80073a6:	68db      	ldr	r3, [r3, #12]
 80073a8:	4a02      	ldr	r2, [pc, #8]	; (80073b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80073aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80073ae:	60d3      	str	r3, [r2, #12]
 80073b0:	e014      	b.n	80073dc <HAL_RCCEx_PeriphCLKConfig+0x524>
 80073b2:	bf00      	nop
 80073b4:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80073bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80073c0:	d10c      	bne.n	80073dc <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	3304      	adds	r3, #4
 80073c6:	2101      	movs	r1, #1
 80073c8:	4618      	mov	r0, r3
 80073ca:	f000 f8a5 	bl	8007518 <RCCEx_PLLSAI1_Config>
 80073ce:	4603      	mov	r3, r0
 80073d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80073d2:	7cfb      	ldrb	r3, [r7, #19]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d001      	beq.n	80073dc <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80073d8:	7cfb      	ldrb	r3, [r7, #19]
 80073da:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d028      	beq.n	800743a <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80073e8:	4b4a      	ldr	r3, [pc, #296]	; (8007514 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80073ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073ee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80073f6:	4947      	ldr	r1, [pc, #284]	; (8007514 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80073f8:	4313      	orrs	r3, r2
 80073fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007402:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007406:	d106      	bne.n	8007416 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007408:	4b42      	ldr	r3, [pc, #264]	; (8007514 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800740a:	68db      	ldr	r3, [r3, #12]
 800740c:	4a41      	ldr	r2, [pc, #260]	; (8007514 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800740e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007412:	60d3      	str	r3, [r2, #12]
 8007414:	e011      	b.n	800743a <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800741a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800741e:	d10c      	bne.n	800743a <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	3304      	adds	r3, #4
 8007424:	2101      	movs	r1, #1
 8007426:	4618      	mov	r0, r3
 8007428:	f000 f876 	bl	8007518 <RCCEx_PLLSAI1_Config>
 800742c:	4603      	mov	r3, r0
 800742e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007430:	7cfb      	ldrb	r3, [r7, #19]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d001      	beq.n	800743a <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8007436:	7cfb      	ldrb	r3, [r7, #19]
 8007438:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007442:	2b00      	cmp	r3, #0
 8007444:	d01e      	beq.n	8007484 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007446:	4b33      	ldr	r3, [pc, #204]	; (8007514 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007448:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800744c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007456:	492f      	ldr	r1, [pc, #188]	; (8007514 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007458:	4313      	orrs	r3, r2
 800745a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007464:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007468:	d10c      	bne.n	8007484 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	3304      	adds	r3, #4
 800746e:	2102      	movs	r1, #2
 8007470:	4618      	mov	r0, r3
 8007472:	f000 f851 	bl	8007518 <RCCEx_PLLSAI1_Config>
 8007476:	4603      	mov	r3, r0
 8007478:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800747a:	7cfb      	ldrb	r3, [r7, #19]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d001      	beq.n	8007484 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8007480:	7cfb      	ldrb	r3, [r7, #19]
 8007482:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800748c:	2b00      	cmp	r3, #0
 800748e:	d00b      	beq.n	80074a8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007490:	4b20      	ldr	r3, [pc, #128]	; (8007514 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007492:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007496:	f023 0204 	bic.w	r2, r3, #4
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80074a0:	491c      	ldr	r1, [pc, #112]	; (8007514 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80074a2:	4313      	orrs	r3, r2
 80074a4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d00b      	beq.n	80074cc <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80074b4:	4b17      	ldr	r3, [pc, #92]	; (8007514 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80074b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80074ba:	f023 0218 	bic.w	r2, r3, #24
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074c4:	4913      	ldr	r1, [pc, #76]	; (8007514 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80074c6:	4313      	orrs	r3, r2
 80074c8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d017      	beq.n	8007508 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80074d8:	4b0e      	ldr	r3, [pc, #56]	; (8007514 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80074da:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80074de:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80074e8:	490a      	ldr	r1, [pc, #40]	; (8007514 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80074ea:	4313      	orrs	r3, r2
 80074ec:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80074f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80074fa:	d105      	bne.n	8007508 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80074fc:	4b05      	ldr	r3, [pc, #20]	; (8007514 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80074fe:	68db      	ldr	r3, [r3, #12]
 8007500:	4a04      	ldr	r2, [pc, #16]	; (8007514 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007502:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007506:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8007508:	7cbb      	ldrb	r3, [r7, #18]
}
 800750a:	4618      	mov	r0, r3
 800750c:	3718      	adds	r7, #24
 800750e:	46bd      	mov	sp, r7
 8007510:	bd80      	pop	{r7, pc}
 8007512:	bf00      	nop
 8007514:	40021000 	.word	0x40021000

08007518 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b084      	sub	sp, #16
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
 8007520:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007522:	2300      	movs	r3, #0
 8007524:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007526:	4b72      	ldr	r3, [pc, #456]	; (80076f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007528:	68db      	ldr	r3, [r3, #12]
 800752a:	f003 0303 	and.w	r3, r3, #3
 800752e:	2b00      	cmp	r3, #0
 8007530:	d00e      	beq.n	8007550 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8007532:	4b6f      	ldr	r3, [pc, #444]	; (80076f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007534:	68db      	ldr	r3, [r3, #12]
 8007536:	f003 0203 	and.w	r2, r3, #3
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	429a      	cmp	r2, r3
 8007540:	d103      	bne.n	800754a <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
       ||
 8007546:	2b00      	cmp	r3, #0
 8007548:	d142      	bne.n	80075d0 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800754a:	2301      	movs	r3, #1
 800754c:	73fb      	strb	r3, [r7, #15]
 800754e:	e03f      	b.n	80075d0 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	2b03      	cmp	r3, #3
 8007556:	d018      	beq.n	800758a <RCCEx_PLLSAI1_Config+0x72>
 8007558:	2b03      	cmp	r3, #3
 800755a:	d825      	bhi.n	80075a8 <RCCEx_PLLSAI1_Config+0x90>
 800755c:	2b01      	cmp	r3, #1
 800755e:	d002      	beq.n	8007566 <RCCEx_PLLSAI1_Config+0x4e>
 8007560:	2b02      	cmp	r3, #2
 8007562:	d009      	beq.n	8007578 <RCCEx_PLLSAI1_Config+0x60>
 8007564:	e020      	b.n	80075a8 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007566:	4b62      	ldr	r3, [pc, #392]	; (80076f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f003 0302 	and.w	r3, r3, #2
 800756e:	2b00      	cmp	r3, #0
 8007570:	d11d      	bne.n	80075ae <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8007572:	2301      	movs	r3, #1
 8007574:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007576:	e01a      	b.n	80075ae <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007578:	4b5d      	ldr	r3, [pc, #372]	; (80076f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007580:	2b00      	cmp	r3, #0
 8007582:	d116      	bne.n	80075b2 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8007584:	2301      	movs	r3, #1
 8007586:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007588:	e013      	b.n	80075b2 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800758a:	4b59      	ldr	r3, [pc, #356]	; (80076f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007592:	2b00      	cmp	r3, #0
 8007594:	d10f      	bne.n	80075b6 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007596:	4b56      	ldr	r3, [pc, #344]	; (80076f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d109      	bne.n	80075b6 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80075a2:	2301      	movs	r3, #1
 80075a4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80075a6:	e006      	b.n	80075b6 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80075a8:	2301      	movs	r3, #1
 80075aa:	73fb      	strb	r3, [r7, #15]
      break;
 80075ac:	e004      	b.n	80075b8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80075ae:	bf00      	nop
 80075b0:	e002      	b.n	80075b8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80075b2:	bf00      	nop
 80075b4:	e000      	b.n	80075b8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80075b6:	bf00      	nop
    }

    if(status == HAL_OK)
 80075b8:	7bfb      	ldrb	r3, [r7, #15]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d108      	bne.n	80075d0 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80075be:	4b4c      	ldr	r3, [pc, #304]	; (80076f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80075c0:	68db      	ldr	r3, [r3, #12]
 80075c2:	f023 0203 	bic.w	r2, r3, #3
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	4949      	ldr	r1, [pc, #292]	; (80076f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80075cc:	4313      	orrs	r3, r2
 80075ce:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80075d0:	7bfb      	ldrb	r3, [r7, #15]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	f040 8086 	bne.w	80076e4 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80075d8:	4b45      	ldr	r3, [pc, #276]	; (80076f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	4a44      	ldr	r2, [pc, #272]	; (80076f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80075de:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80075e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80075e4:	f7fc fc62 	bl	8003eac <HAL_GetTick>
 80075e8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80075ea:	e009      	b.n	8007600 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80075ec:	f7fc fc5e 	bl	8003eac <HAL_GetTick>
 80075f0:	4602      	mov	r2, r0
 80075f2:	68bb      	ldr	r3, [r7, #8]
 80075f4:	1ad3      	subs	r3, r2, r3
 80075f6:	2b02      	cmp	r3, #2
 80075f8:	d902      	bls.n	8007600 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80075fa:	2303      	movs	r3, #3
 80075fc:	73fb      	strb	r3, [r7, #15]
        break;
 80075fe:	e005      	b.n	800760c <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007600:	4b3b      	ldr	r3, [pc, #236]	; (80076f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007608:	2b00      	cmp	r3, #0
 800760a:	d1ef      	bne.n	80075ec <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800760c:	7bfb      	ldrb	r3, [r7, #15]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d168      	bne.n	80076e4 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d113      	bne.n	8007640 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007618:	4b35      	ldr	r3, [pc, #212]	; (80076f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800761a:	691a      	ldr	r2, [r3, #16]
 800761c:	4b35      	ldr	r3, [pc, #212]	; (80076f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800761e:	4013      	ands	r3, r2
 8007620:	687a      	ldr	r2, [r7, #4]
 8007622:	6892      	ldr	r2, [r2, #8]
 8007624:	0211      	lsls	r1, r2, #8
 8007626:	687a      	ldr	r2, [r7, #4]
 8007628:	68d2      	ldr	r2, [r2, #12]
 800762a:	06d2      	lsls	r2, r2, #27
 800762c:	4311      	orrs	r1, r2
 800762e:	687a      	ldr	r2, [r7, #4]
 8007630:	6852      	ldr	r2, [r2, #4]
 8007632:	3a01      	subs	r2, #1
 8007634:	0112      	lsls	r2, r2, #4
 8007636:	430a      	orrs	r2, r1
 8007638:	492d      	ldr	r1, [pc, #180]	; (80076f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800763a:	4313      	orrs	r3, r2
 800763c:	610b      	str	r3, [r1, #16]
 800763e:	e02d      	b.n	800769c <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	2b01      	cmp	r3, #1
 8007644:	d115      	bne.n	8007672 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007646:	4b2a      	ldr	r3, [pc, #168]	; (80076f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007648:	691a      	ldr	r2, [r3, #16]
 800764a:	4b2b      	ldr	r3, [pc, #172]	; (80076f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800764c:	4013      	ands	r3, r2
 800764e:	687a      	ldr	r2, [r7, #4]
 8007650:	6892      	ldr	r2, [r2, #8]
 8007652:	0211      	lsls	r1, r2, #8
 8007654:	687a      	ldr	r2, [r7, #4]
 8007656:	6912      	ldr	r2, [r2, #16]
 8007658:	0852      	lsrs	r2, r2, #1
 800765a:	3a01      	subs	r2, #1
 800765c:	0552      	lsls	r2, r2, #21
 800765e:	4311      	orrs	r1, r2
 8007660:	687a      	ldr	r2, [r7, #4]
 8007662:	6852      	ldr	r2, [r2, #4]
 8007664:	3a01      	subs	r2, #1
 8007666:	0112      	lsls	r2, r2, #4
 8007668:	430a      	orrs	r2, r1
 800766a:	4921      	ldr	r1, [pc, #132]	; (80076f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800766c:	4313      	orrs	r3, r2
 800766e:	610b      	str	r3, [r1, #16]
 8007670:	e014      	b.n	800769c <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007672:	4b1f      	ldr	r3, [pc, #124]	; (80076f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007674:	691a      	ldr	r2, [r3, #16]
 8007676:	4b21      	ldr	r3, [pc, #132]	; (80076fc <RCCEx_PLLSAI1_Config+0x1e4>)
 8007678:	4013      	ands	r3, r2
 800767a:	687a      	ldr	r2, [r7, #4]
 800767c:	6892      	ldr	r2, [r2, #8]
 800767e:	0211      	lsls	r1, r2, #8
 8007680:	687a      	ldr	r2, [r7, #4]
 8007682:	6952      	ldr	r2, [r2, #20]
 8007684:	0852      	lsrs	r2, r2, #1
 8007686:	3a01      	subs	r2, #1
 8007688:	0652      	lsls	r2, r2, #25
 800768a:	4311      	orrs	r1, r2
 800768c:	687a      	ldr	r2, [r7, #4]
 800768e:	6852      	ldr	r2, [r2, #4]
 8007690:	3a01      	subs	r2, #1
 8007692:	0112      	lsls	r2, r2, #4
 8007694:	430a      	orrs	r2, r1
 8007696:	4916      	ldr	r1, [pc, #88]	; (80076f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007698:	4313      	orrs	r3, r2
 800769a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800769c:	4b14      	ldr	r3, [pc, #80]	; (80076f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	4a13      	ldr	r2, [pc, #76]	; (80076f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80076a2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80076a6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80076a8:	f7fc fc00 	bl	8003eac <HAL_GetTick>
 80076ac:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80076ae:	e009      	b.n	80076c4 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80076b0:	f7fc fbfc 	bl	8003eac <HAL_GetTick>
 80076b4:	4602      	mov	r2, r0
 80076b6:	68bb      	ldr	r3, [r7, #8]
 80076b8:	1ad3      	subs	r3, r2, r3
 80076ba:	2b02      	cmp	r3, #2
 80076bc:	d902      	bls.n	80076c4 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80076be:	2303      	movs	r3, #3
 80076c0:	73fb      	strb	r3, [r7, #15]
          break;
 80076c2:	e005      	b.n	80076d0 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80076c4:	4b0a      	ldr	r3, [pc, #40]	; (80076f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d0ef      	beq.n	80076b0 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80076d0:	7bfb      	ldrb	r3, [r7, #15]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d106      	bne.n	80076e4 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80076d6:	4b06      	ldr	r3, [pc, #24]	; (80076f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80076d8:	691a      	ldr	r2, [r3, #16]
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	699b      	ldr	r3, [r3, #24]
 80076de:	4904      	ldr	r1, [pc, #16]	; (80076f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80076e0:	4313      	orrs	r3, r2
 80076e2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80076e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80076e6:	4618      	mov	r0, r3
 80076e8:	3710      	adds	r7, #16
 80076ea:	46bd      	mov	sp, r7
 80076ec:	bd80      	pop	{r7, pc}
 80076ee:	bf00      	nop
 80076f0:	40021000 	.word	0x40021000
 80076f4:	07ff800f 	.word	0x07ff800f
 80076f8:	ff9f800f 	.word	0xff9f800f
 80076fc:	f9ff800f 	.word	0xf9ff800f

08007700 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b084      	sub	sp, #16
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
 8007708:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800770a:	2300      	movs	r3, #0
 800770c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800770e:	4b72      	ldr	r3, [pc, #456]	; (80078d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007710:	68db      	ldr	r3, [r3, #12]
 8007712:	f003 0303 	and.w	r3, r3, #3
 8007716:	2b00      	cmp	r3, #0
 8007718:	d00e      	beq.n	8007738 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800771a:	4b6f      	ldr	r3, [pc, #444]	; (80078d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800771c:	68db      	ldr	r3, [r3, #12]
 800771e:	f003 0203 	and.w	r2, r3, #3
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	429a      	cmp	r2, r3
 8007728:	d103      	bne.n	8007732 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
       ||
 800772e:	2b00      	cmp	r3, #0
 8007730:	d142      	bne.n	80077b8 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8007732:	2301      	movs	r3, #1
 8007734:	73fb      	strb	r3, [r7, #15]
 8007736:	e03f      	b.n	80077b8 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	2b03      	cmp	r3, #3
 800773e:	d018      	beq.n	8007772 <RCCEx_PLLSAI2_Config+0x72>
 8007740:	2b03      	cmp	r3, #3
 8007742:	d825      	bhi.n	8007790 <RCCEx_PLLSAI2_Config+0x90>
 8007744:	2b01      	cmp	r3, #1
 8007746:	d002      	beq.n	800774e <RCCEx_PLLSAI2_Config+0x4e>
 8007748:	2b02      	cmp	r3, #2
 800774a:	d009      	beq.n	8007760 <RCCEx_PLLSAI2_Config+0x60>
 800774c:	e020      	b.n	8007790 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800774e:	4b62      	ldr	r3, [pc, #392]	; (80078d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f003 0302 	and.w	r3, r3, #2
 8007756:	2b00      	cmp	r3, #0
 8007758:	d11d      	bne.n	8007796 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800775a:	2301      	movs	r3, #1
 800775c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800775e:	e01a      	b.n	8007796 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007760:	4b5d      	ldr	r3, [pc, #372]	; (80078d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007768:	2b00      	cmp	r3, #0
 800776a:	d116      	bne.n	800779a <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 800776c:	2301      	movs	r3, #1
 800776e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007770:	e013      	b.n	800779a <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007772:	4b59      	ldr	r3, [pc, #356]	; (80078d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800777a:	2b00      	cmp	r3, #0
 800777c:	d10f      	bne.n	800779e <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800777e:	4b56      	ldr	r3, [pc, #344]	; (80078d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007786:	2b00      	cmp	r3, #0
 8007788:	d109      	bne.n	800779e <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800778a:	2301      	movs	r3, #1
 800778c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800778e:	e006      	b.n	800779e <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8007790:	2301      	movs	r3, #1
 8007792:	73fb      	strb	r3, [r7, #15]
      break;
 8007794:	e004      	b.n	80077a0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8007796:	bf00      	nop
 8007798:	e002      	b.n	80077a0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800779a:	bf00      	nop
 800779c:	e000      	b.n	80077a0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800779e:	bf00      	nop
    }

    if(status == HAL_OK)
 80077a0:	7bfb      	ldrb	r3, [r7, #15]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d108      	bne.n	80077b8 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80077a6:	4b4c      	ldr	r3, [pc, #304]	; (80078d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80077a8:	68db      	ldr	r3, [r3, #12]
 80077aa:	f023 0203 	bic.w	r2, r3, #3
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	4949      	ldr	r1, [pc, #292]	; (80078d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80077b4:	4313      	orrs	r3, r2
 80077b6:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80077b8:	7bfb      	ldrb	r3, [r7, #15]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	f040 8086 	bne.w	80078cc <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80077c0:	4b45      	ldr	r3, [pc, #276]	; (80078d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	4a44      	ldr	r2, [pc, #272]	; (80078d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80077c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80077ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80077cc:	f7fc fb6e 	bl	8003eac <HAL_GetTick>
 80077d0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80077d2:	e009      	b.n	80077e8 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80077d4:	f7fc fb6a 	bl	8003eac <HAL_GetTick>
 80077d8:	4602      	mov	r2, r0
 80077da:	68bb      	ldr	r3, [r7, #8]
 80077dc:	1ad3      	subs	r3, r2, r3
 80077de:	2b02      	cmp	r3, #2
 80077e0:	d902      	bls.n	80077e8 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80077e2:	2303      	movs	r3, #3
 80077e4:	73fb      	strb	r3, [r7, #15]
        break;
 80077e6:	e005      	b.n	80077f4 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80077e8:	4b3b      	ldr	r3, [pc, #236]	; (80078d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d1ef      	bne.n	80077d4 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80077f4:	7bfb      	ldrb	r3, [r7, #15]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d168      	bne.n	80078cc <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d113      	bne.n	8007828 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007800:	4b35      	ldr	r3, [pc, #212]	; (80078d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007802:	695a      	ldr	r2, [r3, #20]
 8007804:	4b35      	ldr	r3, [pc, #212]	; (80078dc <RCCEx_PLLSAI2_Config+0x1dc>)
 8007806:	4013      	ands	r3, r2
 8007808:	687a      	ldr	r2, [r7, #4]
 800780a:	6892      	ldr	r2, [r2, #8]
 800780c:	0211      	lsls	r1, r2, #8
 800780e:	687a      	ldr	r2, [r7, #4]
 8007810:	68d2      	ldr	r2, [r2, #12]
 8007812:	06d2      	lsls	r2, r2, #27
 8007814:	4311      	orrs	r1, r2
 8007816:	687a      	ldr	r2, [r7, #4]
 8007818:	6852      	ldr	r2, [r2, #4]
 800781a:	3a01      	subs	r2, #1
 800781c:	0112      	lsls	r2, r2, #4
 800781e:	430a      	orrs	r2, r1
 8007820:	492d      	ldr	r1, [pc, #180]	; (80078d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007822:	4313      	orrs	r3, r2
 8007824:	614b      	str	r3, [r1, #20]
 8007826:	e02d      	b.n	8007884 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	2b01      	cmp	r3, #1
 800782c:	d115      	bne.n	800785a <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800782e:	4b2a      	ldr	r3, [pc, #168]	; (80078d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007830:	695a      	ldr	r2, [r3, #20]
 8007832:	4b2b      	ldr	r3, [pc, #172]	; (80078e0 <RCCEx_PLLSAI2_Config+0x1e0>)
 8007834:	4013      	ands	r3, r2
 8007836:	687a      	ldr	r2, [r7, #4]
 8007838:	6892      	ldr	r2, [r2, #8]
 800783a:	0211      	lsls	r1, r2, #8
 800783c:	687a      	ldr	r2, [r7, #4]
 800783e:	6912      	ldr	r2, [r2, #16]
 8007840:	0852      	lsrs	r2, r2, #1
 8007842:	3a01      	subs	r2, #1
 8007844:	0552      	lsls	r2, r2, #21
 8007846:	4311      	orrs	r1, r2
 8007848:	687a      	ldr	r2, [r7, #4]
 800784a:	6852      	ldr	r2, [r2, #4]
 800784c:	3a01      	subs	r2, #1
 800784e:	0112      	lsls	r2, r2, #4
 8007850:	430a      	orrs	r2, r1
 8007852:	4921      	ldr	r1, [pc, #132]	; (80078d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007854:	4313      	orrs	r3, r2
 8007856:	614b      	str	r3, [r1, #20]
 8007858:	e014      	b.n	8007884 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800785a:	4b1f      	ldr	r3, [pc, #124]	; (80078d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800785c:	695a      	ldr	r2, [r3, #20]
 800785e:	4b21      	ldr	r3, [pc, #132]	; (80078e4 <RCCEx_PLLSAI2_Config+0x1e4>)
 8007860:	4013      	ands	r3, r2
 8007862:	687a      	ldr	r2, [r7, #4]
 8007864:	6892      	ldr	r2, [r2, #8]
 8007866:	0211      	lsls	r1, r2, #8
 8007868:	687a      	ldr	r2, [r7, #4]
 800786a:	6952      	ldr	r2, [r2, #20]
 800786c:	0852      	lsrs	r2, r2, #1
 800786e:	3a01      	subs	r2, #1
 8007870:	0652      	lsls	r2, r2, #25
 8007872:	4311      	orrs	r1, r2
 8007874:	687a      	ldr	r2, [r7, #4]
 8007876:	6852      	ldr	r2, [r2, #4]
 8007878:	3a01      	subs	r2, #1
 800787a:	0112      	lsls	r2, r2, #4
 800787c:	430a      	orrs	r2, r1
 800787e:	4916      	ldr	r1, [pc, #88]	; (80078d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007880:	4313      	orrs	r3, r2
 8007882:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8007884:	4b14      	ldr	r3, [pc, #80]	; (80078d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	4a13      	ldr	r2, [pc, #76]	; (80078d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800788a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800788e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007890:	f7fc fb0c 	bl	8003eac <HAL_GetTick>
 8007894:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007896:	e009      	b.n	80078ac <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007898:	f7fc fb08 	bl	8003eac <HAL_GetTick>
 800789c:	4602      	mov	r2, r0
 800789e:	68bb      	ldr	r3, [r7, #8]
 80078a0:	1ad3      	subs	r3, r2, r3
 80078a2:	2b02      	cmp	r3, #2
 80078a4:	d902      	bls.n	80078ac <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80078a6:	2303      	movs	r3, #3
 80078a8:	73fb      	strb	r3, [r7, #15]
          break;
 80078aa:	e005      	b.n	80078b8 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80078ac:	4b0a      	ldr	r3, [pc, #40]	; (80078d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d0ef      	beq.n	8007898 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80078b8:	7bfb      	ldrb	r3, [r7, #15]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d106      	bne.n	80078cc <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80078be:	4b06      	ldr	r3, [pc, #24]	; (80078d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80078c0:	695a      	ldr	r2, [r3, #20]
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	699b      	ldr	r3, [r3, #24]
 80078c6:	4904      	ldr	r1, [pc, #16]	; (80078d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80078c8:	4313      	orrs	r3, r2
 80078ca:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80078cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80078ce:	4618      	mov	r0, r3
 80078d0:	3710      	adds	r7, #16
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bd80      	pop	{r7, pc}
 80078d6:	bf00      	nop
 80078d8:	40021000 	.word	0x40021000
 80078dc:	07ff800f 	.word	0x07ff800f
 80078e0:	ff9f800f 	.word	0xff9f800f
 80078e4:	f9ff800f 	.word	0xf9ff800f

080078e8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b084      	sub	sp, #16
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d101      	bne.n	80078fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80078f6:	2301      	movs	r3, #1
 80078f8:	e0be      	b.n	8007a78 <HAL_SPI_Init+0x190>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d108      	bne.n	8007914 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	685b      	ldr	r3, [r3, #4]
 8007906:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800790a:	d009      	beq.n	8007920 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2200      	movs	r2, #0
 8007910:	61da      	str	r2, [r3, #28]
 8007912:	e005      	b.n	8007920 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2200      	movs	r2, #0
 8007918:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2200      	movs	r2, #0
 800791e:	615a      	str	r2, [r3, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007926:	b2db      	uxtb	r3, r3
 8007928:	2b00      	cmp	r3, #0
 800792a:	d106      	bne.n	800793a <HAL_SPI_Init+0x52>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2200      	movs	r2, #0
 8007930:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007934:	6878      	ldr	r0, [r7, #4]
 8007936:	f000 f8cb 	bl	8007ad0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2202      	movs	r2, #2
 800793e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	681a      	ldr	r2, [r3, #0]
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007950:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	68db      	ldr	r3, [r3, #12]
 8007956:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800795a:	d902      	bls.n	8007962 <HAL_SPI_Init+0x7a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800795c:	2300      	movs	r3, #0
 800795e:	60fb      	str	r3, [r7, #12]
 8007960:	e002      	b.n	8007968 <HAL_SPI_Init+0x80>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007962:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007966:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	68db      	ldr	r3, [r3, #12]
 800796c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007970:	d007      	beq.n	8007982 <HAL_SPI_Init+0x9a>
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	68db      	ldr	r3, [r3, #12]
 8007976:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800797a:	d002      	beq.n	8007982 <HAL_SPI_Init+0x9a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2200      	movs	r2, #0
 8007980:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	685b      	ldr	r3, [r3, #4]
 8007986:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	689b      	ldr	r3, [r3, #8]
 800798e:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007992:	431a      	orrs	r2, r3
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	691b      	ldr	r3, [r3, #16]
 8007998:	f003 0302 	and.w	r3, r3, #2
 800799c:	431a      	orrs	r2, r3
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	695b      	ldr	r3, [r3, #20]
 80079a2:	f003 0301 	and.w	r3, r3, #1
 80079a6:	431a      	orrs	r2, r3
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	699b      	ldr	r3, [r3, #24]
 80079ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80079b0:	431a      	orrs	r2, r3
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	69db      	ldr	r3, [r3, #28]
 80079b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80079ba:	431a      	orrs	r2, r3
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	6a1b      	ldr	r3, [r3, #32]
 80079c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079c4:	ea42 0103 	orr.w	r1, r2, r3
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079cc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	430a      	orrs	r2, r1
 80079d6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));
#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCL Configuration -------------------*/
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80079e0:	d11b      	bne.n	8007a1a <HAL_SPI_Init+0x132>
  {
    /* Align the CRC Length on the data size */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d10b      	bne.n	8007a02 <HAL_SPI_Init+0x11a>
    {
      /* CRC Length aligned on the data size : value set by default */
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	68db      	ldr	r3, [r3, #12]
 80079ee:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80079f2:	d903      	bls.n	80079fc <HAL_SPI_Init+0x114>
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2202      	movs	r2, #2
 80079f8:	631a      	str	r2, [r3, #48]	; 0x30
 80079fa:	e002      	b.n	8007a02 <HAL_SPI_Init+0x11a>
      }
      else
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2201      	movs	r2, #1
 8007a00:	631a      	str	r2, [r3, #48]	; 0x30
      }
    }

    /* Configure : CRC Length */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a06:	2b02      	cmp	r3, #2
 8007a08:	d107      	bne.n	8007a1a <HAL_SPI_Init+0x132>
    {
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	681a      	ldr	r2, [r3, #0]
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007a18:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	699b      	ldr	r3, [r3, #24]
 8007a1e:	0c1b      	lsrs	r3, r3, #16
 8007a20:	f003 0204 	and.w	r2, r3, #4
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a28:	f003 0310 	and.w	r3, r3, #16
 8007a2c:	431a      	orrs	r2, r3
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a32:	f003 0308 	and.w	r3, r3, #8
 8007a36:	431a      	orrs	r2, r3
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	68db      	ldr	r3, [r3, #12]
 8007a3c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007a40:	ea42 0103 	orr.w	r1, r2, r3
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	430a      	orrs	r2, r1
 8007a50:	605a      	str	r2, [r3, #4]
                                  (frxth & SPI_CR2_FRXTH)));

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a5a:	d105      	bne.n	8007a68 <HAL_SPI_Init+0x180>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	b292      	uxth	r2, r2
 8007a66:	611a      	str	r2, [r3, #16]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2201      	movs	r2, #1
 8007a72:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007a76:	2300      	movs	r3, #0
}
 8007a78:	4618      	mov	r0, r3
 8007a7a:	3710      	adds	r7, #16
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	bd80      	pop	{r7, pc}

08007a80 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b082      	sub	sp, #8
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d101      	bne.n	8007a92 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8007a8e:	2301      	movs	r3, #1
 8007a90:	e01a      	b.n	8007ac8 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2202      	movs	r2, #2
 8007a96:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	681a      	ldr	r2, [r3, #0]
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007aa8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	f000 f81a 	bl	8007ae4 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2200      	movs	r2, #0
 8007aba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  return HAL_OK;
 8007ac6:	2300      	movs	r3, #0
}
 8007ac8:	4618      	mov	r0, r3
 8007aca:	3708      	adds	r7, #8
 8007acc:	46bd      	mov	sp, r7
 8007ace:	bd80      	pop	{r7, pc}

08007ad0 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8007ad0:	b480      	push	{r7}
 8007ad2:	b083      	sub	sp, #12
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8007ad8:	bf00      	nop
 8007ada:	370c      	adds	r7, #12
 8007adc:	46bd      	mov	sp, r7
 8007ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae2:	4770      	bx	lr

08007ae4 <HAL_SPI_MspDeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	b083      	sub	sp, #12
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspDeInit should be implemented in the user file
   */
}
 8007aec:	bf00      	nop
 8007aee:	370c      	adds	r7, #12
 8007af0:	46bd      	mov	sp, r7
 8007af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af6:	4770      	bx	lr

08007af8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b08c      	sub	sp, #48	; 0x30
 8007afc:	af02      	add	r7, sp, #8
 8007afe:	60f8      	str	r0, [r7, #12]
 8007b00:	60b9      	str	r1, [r7, #8]
 8007b02:	603b      	str	r3, [r7, #0]
 8007b04:	4613      	mov	r3, r2
 8007b06:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 8007b08:	2300      	movs	r3, #0
 8007b0a:	61bb      	str	r3, [r7, #24]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	75fb      	strb	r3, [r7, #23]
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007b10:	2300      	movs	r3, #0
 8007b12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (hspi->State != HAL_SPI_STATE_READY)
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007b1c:	b2db      	uxtb	r3, r3
 8007b1e:	2b01      	cmp	r3, #1
 8007b20:	d003      	beq.n	8007b2a <HAL_SPI_Receive+0x32>
  {
    errorcode = HAL_BUSY;
 8007b22:	2302      	movs	r3, #2
 8007b24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    goto error;
 8007b28:	e1cc      	b.n	8007ec4 <HAL_SPI_Receive+0x3cc>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	685b      	ldr	r3, [r3, #4]
 8007b2e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007b32:	d112      	bne.n	8007b5a <HAL_SPI_Receive+0x62>
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	689b      	ldr	r3, [r3, #8]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d10e      	bne.n	8007b5a <HAL_SPI_Receive+0x62>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	2204      	movs	r2, #4
 8007b40:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007b44:	88fa      	ldrh	r2, [r7, #6]
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	9300      	str	r3, [sp, #0]
 8007b4a:	4613      	mov	r3, r2
 8007b4c:	68ba      	ldr	r2, [r7, #8]
 8007b4e:	68b9      	ldr	r1, [r7, #8]
 8007b50:	68f8      	ldr	r0, [r7, #12]
 8007b52:	f000 f9c1 	bl	8007ed8 <HAL_SPI_TransmitReceive>
 8007b56:	4603      	mov	r3, r0
 8007b58:	e1ba      	b.n	8007ed0 <HAL_SPI_Receive+0x3d8>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007b60:	2b01      	cmp	r3, #1
 8007b62:	d101      	bne.n	8007b68 <HAL_SPI_Receive+0x70>
 8007b64:	2302      	movs	r3, #2
 8007b66:	e1b3      	b.n	8007ed0 <HAL_SPI_Receive+0x3d8>
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	2201      	movs	r2, #1
 8007b6c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007b70:	f7fc f99c 	bl	8003eac <HAL_GetTick>
 8007b74:	6238      	str	r0, [r7, #32]

  if ((pData == NULL) || (Size == 0U))
 8007b76:	68bb      	ldr	r3, [r7, #8]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d002      	beq.n	8007b82 <HAL_SPI_Receive+0x8a>
 8007b7c:	88fb      	ldrh	r3, [r7, #6]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d103      	bne.n	8007b8a <HAL_SPI_Receive+0x92>
  {
    errorcode = HAL_ERROR;
 8007b82:	2301      	movs	r3, #1
 8007b84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    goto error;
 8007b88:	e19c      	b.n	8007ec4 <HAL_SPI_Receive+0x3cc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	2204      	movs	r2, #4
 8007b8e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	2200      	movs	r2, #0
 8007b96:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	68ba      	ldr	r2, [r7, #8]
 8007b9c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	88fa      	ldrh	r2, [r7, #6]
 8007ba2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	88fa      	ldrh	r2, [r7, #6]
 8007baa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	2200      	movs	r2, #0
 8007bca:	651a      	str	r2, [r3, #80]	; 0x50

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bd0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007bd4:	d118      	bne.n	8007c08 <HAL_SPI_Receive+0x110>
  {
    SPI_RESET_CRC(hspi);
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	681a      	ldr	r2, [r3, #0]
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007be4:	601a      	str	r2, [r3, #0]
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	681a      	ldr	r2, [r3, #0]
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007bf4:	601a      	str	r2, [r3, #0]
    /* this is done to handle the CRCNEXT before the latest data */
    hspi->RxXferCount--;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007bfc:	b29b      	uxth	r3, r3
 8007bfe:	3b01      	subs	r3, #1
 8007c00:	b29a      	uxth	r2, r3
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	68db      	ldr	r3, [r3, #12]
 8007c0c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007c10:	d908      	bls.n	8007c24 <HAL_SPI_Receive+0x12c>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	685a      	ldr	r2, [r3, #4]
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007c20:	605a      	str	r2, [r3, #4]
 8007c22:	e007      	b.n	8007c34 <HAL_SPI_Receive+0x13c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	685a      	ldr	r2, [r3, #4]
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007c32:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	689b      	ldr	r3, [r3, #8]
 8007c38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c3c:	d10f      	bne.n	8007c5e <HAL_SPI_Receive+0x166>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	681a      	ldr	r2, [r3, #0]
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007c4c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	681a      	ldr	r2, [r3, #0]
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007c5c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c68:	2b40      	cmp	r3, #64	; 0x40
 8007c6a:	d007      	beq.n	8007c7c <HAL_SPI_Receive+0x184>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	681a      	ldr	r2, [r3, #0]
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007c7a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	68db      	ldr	r3, [r3, #12]
 8007c80:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007c84:	d871      	bhi.n	8007d6a <HAL_SPI_Receive+0x272>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007c86:	e035      	b.n	8007cf4 <HAL_SPI_Receive+0x1fc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	689b      	ldr	r3, [r3, #8]
 8007c8e:	f003 0301 	and.w	r3, r3, #1
 8007c92:	2b01      	cmp	r3, #1
 8007c94:	d117      	bne.n	8007cc6 <HAL_SPI_Receive+0x1ce>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	f103 020c 	add.w	r2, r3, #12
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ca2:	7812      	ldrb	r2, [r2, #0]
 8007ca4:	b2d2      	uxtb	r2, r2
 8007ca6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cac:	1c5a      	adds	r2, r3, #1
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007cb8:	b29b      	uxth	r3, r3
 8007cba:	3b01      	subs	r3, #1
 8007cbc:	b29a      	uxth	r2, r3
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8007cc4:	e016      	b.n	8007cf4 <HAL_SPI_Receive+0x1fc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007cc6:	f7fc f8f1 	bl	8003eac <HAL_GetTick>
 8007cca:	4602      	mov	r2, r0
 8007ccc:	6a3b      	ldr	r3, [r7, #32]
 8007cce:	1ad3      	subs	r3, r2, r3
 8007cd0:	683a      	ldr	r2, [r7, #0]
 8007cd2:	429a      	cmp	r2, r3
 8007cd4:	d803      	bhi.n	8007cde <HAL_SPI_Receive+0x1e6>
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cdc:	d102      	bne.n	8007ce4 <HAL_SPI_Receive+0x1ec>
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d107      	bne.n	8007cf4 <HAL_SPI_Receive+0x1fc>
        {
          errorcode = HAL_TIMEOUT;
 8007ce4:	2303      	movs	r3, #3
 8007ce6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          hspi->State = HAL_SPI_STATE_READY;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	2201      	movs	r2, #1
 8007cee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8007cf2:	e0e7      	b.n	8007ec4 <HAL_SPI_Receive+0x3cc>
    while (hspi->RxXferCount > 0U)
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007cfa:	b29b      	uxth	r3, r3
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d1c3      	bne.n	8007c88 <HAL_SPI_Receive+0x190>
 8007d00:	e039      	b.n	8007d76 <HAL_SPI_Receive+0x27e>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	689b      	ldr	r3, [r3, #8]
 8007d08:	f003 0301 	and.w	r3, r3, #1
 8007d0c:	2b01      	cmp	r3, #1
 8007d0e:	d115      	bne.n	8007d3c <HAL_SPI_Receive+0x244>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	68da      	ldr	r2, [r3, #12]
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d1a:	b292      	uxth	r2, r2
 8007d1c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d22:	1c9a      	adds	r2, r3, #2
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007d2e:	b29b      	uxth	r3, r3
 8007d30:	3b01      	subs	r3, #1
 8007d32:	b29a      	uxth	r2, r3
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8007d3a:	e016      	b.n	8007d6a <HAL_SPI_Receive+0x272>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007d3c:	f7fc f8b6 	bl	8003eac <HAL_GetTick>
 8007d40:	4602      	mov	r2, r0
 8007d42:	6a3b      	ldr	r3, [r7, #32]
 8007d44:	1ad3      	subs	r3, r2, r3
 8007d46:	683a      	ldr	r2, [r7, #0]
 8007d48:	429a      	cmp	r2, r3
 8007d4a:	d803      	bhi.n	8007d54 <HAL_SPI_Receive+0x25c>
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d52:	d102      	bne.n	8007d5a <HAL_SPI_Receive+0x262>
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d107      	bne.n	8007d6a <HAL_SPI_Receive+0x272>
        {
          errorcode = HAL_TIMEOUT;
 8007d5a:	2303      	movs	r3, #3
 8007d5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          hspi->State = HAL_SPI_STATE_READY;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	2201      	movs	r2, #1
 8007d64:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8007d68:	e0ac      	b.n	8007ec4 <HAL_SPI_Receive+0x3cc>
    while (hspi->RxXferCount > 0U)
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007d70:	b29b      	uxth	r3, r3
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d1c5      	bne.n	8007d02 <HAL_SPI_Receive+0x20a>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Handle the CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d7e:	d178      	bne.n	8007e72 <HAL_SPI_Receive+0x37a>
  {
    /* freeze the CRC before the latest data */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	681a      	ldr	r2, [r3, #0]
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007d8e:	601a      	str	r2, [r3, #0]

    /* Read the latest data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8007d90:	6a3b      	ldr	r3, [r7, #32]
 8007d92:	9300      	str	r3, [sp, #0]
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	2201      	movs	r2, #1
 8007d98:	2101      	movs	r1, #1
 8007d9a:	68f8      	ldr	r0, [r7, #12]
 8007d9c:	f001 fa00 	bl	80091a0 <SPI_WaitFlagStateUntilTimeout>
 8007da0:	4603      	mov	r3, r0
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d003      	beq.n	8007dae <HAL_SPI_Receive+0x2b6>
    {
      /* the latest data has not been received */
      errorcode = HAL_TIMEOUT;
 8007da6:	2303      	movs	r3, #3
 8007da8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      goto error;
 8007dac:	e08a      	b.n	8007ec4 <HAL_SPI_Receive+0x3cc>
    }

    /* Receive last data in 16 Bit mode */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	68db      	ldr	r3, [r3, #12]
 8007db2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007db6:	d907      	bls.n	8007dc8 <HAL_SPI_Receive+0x2d0>
    {
      *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	68da      	ldr	r2, [r3, #12]
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dc2:	b292      	uxth	r2, r2
 8007dc4:	801a      	strh	r2, [r3, #0]
 8007dc6:	e008      	b.n	8007dda <HAL_SPI_Receive+0x2e2>
    }
    /* Receive last data in 8 Bit mode */
    else
    {
      (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f103 020c 	add.w	r2, r3, #12
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dd4:	7812      	ldrb	r2, [r2, #0]
 8007dd6:	b2d2      	uxtb	r2, r2
 8007dd8:	701a      	strb	r2, [r3, #0]
    }

    /* Wait the CRC data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8007dda:	6a3b      	ldr	r3, [r7, #32]
 8007ddc:	9300      	str	r3, [sp, #0]
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	2201      	movs	r2, #1
 8007de2:	2101      	movs	r1, #1
 8007de4:	68f8      	ldr	r0, [r7, #12]
 8007de6:	f001 f9db 	bl	80091a0 <SPI_WaitFlagStateUntilTimeout>
 8007dea:	4603      	mov	r3, r0
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d009      	beq.n	8007e04 <HAL_SPI_Receive+0x30c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007df4:	f043 0202 	orr.w	r2, r3, #2
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	661a      	str	r2, [r3, #96]	; 0x60
      errorcode = HAL_TIMEOUT;
 8007dfc:	2303      	movs	r3, #3
 8007dfe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      goto error;
 8007e02:	e05f      	b.n	8007ec4 <HAL_SPI_Receive+0x3cc>
    }

    /* Read CRC to Flush DR and RXNE flag */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	68db      	ldr	r3, [r3, #12]
 8007e08:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007e0c:	d105      	bne.n	8007e1a <HAL_SPI_Receive+0x322>
    {
      /* Read 16bit CRC */
      tmpreg = READ_REG(hspi->Instance->DR);
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	68db      	ldr	r3, [r3, #12]
 8007e14:	61bb      	str	r3, [r7, #24]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8007e16:	69bb      	ldr	r3, [r7, #24]
 8007e18:	e02b      	b.n	8007e72 <HAL_SPI_Receive+0x37a>
    }
    else
    {
      /* Initialize the 8bit temporary pointer */
      ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	330c      	adds	r3, #12
 8007e20:	61fb      	str	r3, [r7, #28]
      /* Read 8bit CRC */
      tmpreg8 = *ptmpreg8;
 8007e22:	69fb      	ldr	r3, [r7, #28]
 8007e24:	781b      	ldrb	r3, [r3, #0]
 8007e26:	b2db      	uxtb	r3, r3
 8007e28:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007e2a:	7dfb      	ldrb	r3, [r7, #23]

      if ((hspi->Init.DataSize == SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	68db      	ldr	r3, [r3, #12]
 8007e30:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007e34:	d11d      	bne.n	8007e72 <HAL_SPI_Receive+0x37a>
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e3a:	2b02      	cmp	r3, #2
 8007e3c:	d119      	bne.n	8007e72 <HAL_SPI_Receive+0x37a>
      {
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8007e3e:	6a3b      	ldr	r3, [r7, #32]
 8007e40:	9300      	str	r3, [sp, #0]
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	2201      	movs	r2, #1
 8007e46:	2101      	movs	r1, #1
 8007e48:	68f8      	ldr	r0, [r7, #12]
 8007e4a:	f001 f9a9 	bl	80091a0 <SPI_WaitFlagStateUntilTimeout>
 8007e4e:	4603      	mov	r3, r0
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d009      	beq.n	8007e68 <HAL_SPI_Receive+0x370>
        {
          /* Error on the CRC reception */
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e58:	f043 0202 	orr.w	r2, r3, #2
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	661a      	str	r2, [r3, #96]	; 0x60
          errorcode = HAL_TIMEOUT;
 8007e60:	2303      	movs	r3, #3
 8007e62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8007e66:	e02d      	b.n	8007ec4 <HAL_SPI_Receive+0x3cc>
        }
        /* Read 8bit CRC again in case of 16bit CRC in 8bit Data mode */
        tmpreg8 = *ptmpreg8;
 8007e68:	69fb      	ldr	r3, [r7, #28]
 8007e6a:	781b      	ldrb	r3, [r3, #0]
 8007e6c:	b2db      	uxtb	r3, r3
 8007e6e:	75fb      	strb	r3, [r7, #23]
        /* To avoid GCC warning */
        UNUSED(tmpreg8);
 8007e70:	7dfb      	ldrb	r3, [r7, #23]
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007e72:	6a3a      	ldr	r2, [r7, #32]
 8007e74:	6839      	ldr	r1, [r7, #0]
 8007e76:	68f8      	ldr	r0, [r7, #12]
 8007e78:	f001 fab0 	bl	80093dc <SPI_EndRxTransaction>
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d002      	beq.n	8007e88 <HAL_SPI_Receive+0x390>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	2220      	movs	r2, #32
 8007e86:	661a      	str	r2, [r3, #96]	; 0x60
  }

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	689b      	ldr	r3, [r3, #8]
 8007e8e:	f003 0310 	and.w	r3, r3, #16
 8007e92:	2b10      	cmp	r3, #16
 8007e94:	d10a      	bne.n	8007eac <HAL_SPI_Receive+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e9a:	f043 0202 	orr.w	r2, r3, #2
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	661a      	str	r2, [r3, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8007eaa:	609a      	str	r2, [r3, #8]
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d003      	beq.n	8007ebc <HAL_SPI_Receive+0x3c4>
  {
    errorcode = HAL_ERROR;
 8007eb4:	2301      	movs	r3, #1
 8007eb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007eba:	e003      	b.n	8007ec4 <HAL_SPI_Receive+0x3cc>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	2201      	movs	r2, #1
 8007ec0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007ecc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	3728      	adds	r7, #40	; 0x28
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	bd80      	pop	{r7, pc}

08007ed8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b092      	sub	sp, #72	; 0x48
 8007edc:	af02      	add	r7, sp, #8
 8007ede:	60f8      	str	r0, [r7, #12]
 8007ee0:	60b9      	str	r1, [r7, #8]
 8007ee2:	607a      	str	r2, [r7, #4]
 8007ee4:	807b      	strh	r3, [r7, #2]
  uint16_t             initial_RxXferCount;
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	61bb      	str	r3, [r7, #24]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007eea:	2300      	movs	r3, #0
 8007eec:	75fb      	strb	r3, [r7, #23]
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007eee:	2301      	movs	r3, #1
 8007ef0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007efe:	2b01      	cmp	r3, #1
 8007f00:	d101      	bne.n	8007f06 <HAL_SPI_TransmitReceive+0x2e>
 8007f02:	2302      	movs	r3, #2
 8007f04:	e322      	b.n	800854c <HAL_SPI_TransmitReceive+0x674>
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	2201      	movs	r2, #1
 8007f0a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007f0e:	f7fb ffcd 	bl	8003eac <HAL_GetTick>
 8007f12:	6378      	str	r0, [r7, #52]	; 0x34

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007f1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  tmp_mode            = hspi->Init.Mode;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	685b      	ldr	r3, [r3, #4]
 8007f22:	62fb      	str	r3, [r7, #44]	; 0x2c
  initial_TxXferCount = Size;
 8007f24:	887b      	ldrh	r3, [r7, #2]
 8007f26:	857b      	strh	r3, [r7, #42]	; 0x2a
  initial_RxXferCount = Size;
 8007f28:	887b      	ldrh	r3, [r7, #2]
 8007f2a:	853b      	strh	r3, [r7, #40]	; 0x28
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	627b      	str	r3, [r7, #36]	; 0x24
  spi_cr2             = READ_REG(hspi->Instance->CR2);
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	685b      	ldr	r3, [r3, #4]
 8007f3a:	623b      	str	r3, [r7, #32]
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007f3c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007f40:	2b01      	cmp	r3, #1
 8007f42:	d00f      	beq.n	8007f64 <HAL_SPI_TransmitReceive+0x8c>
 8007f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007f4a:	d107      	bne.n	8007f5c <HAL_SPI_TransmitReceive+0x84>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	689b      	ldr	r3, [r3, #8]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d103      	bne.n	8007f5c <HAL_SPI_TransmitReceive+0x84>
 8007f54:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007f58:	2b04      	cmp	r3, #4
 8007f5a:	d003      	beq.n	8007f64 <HAL_SPI_TransmitReceive+0x8c>
  {
    errorcode = HAL_BUSY;
 8007f5c:	2302      	movs	r3, #2
 8007f5e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    goto error;
 8007f62:	e2ed      	b.n	8008540 <HAL_SPI_TransmitReceive+0x668>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007f64:	68bb      	ldr	r3, [r7, #8]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d005      	beq.n	8007f76 <HAL_SPI_TransmitReceive+0x9e>
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d002      	beq.n	8007f76 <HAL_SPI_TransmitReceive+0x9e>
 8007f70:	887b      	ldrh	r3, [r7, #2]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d103      	bne.n	8007f7e <HAL_SPI_TransmitReceive+0xa6>
  {
    errorcode = HAL_ERROR;
 8007f76:	2301      	movs	r3, #1
 8007f78:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    goto error;
 8007f7c:	e2e0      	b.n	8008540 <HAL_SPI_TransmitReceive+0x668>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007f84:	b2db      	uxtb	r3, r3
 8007f86:	2b04      	cmp	r3, #4
 8007f88:	d003      	beq.n	8007f92 <HAL_SPI_TransmitReceive+0xba>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	2205      	movs	r2, #5
 8007f8e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	2200      	movs	r2, #0
 8007f96:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	687a      	ldr	r2, [r7, #4]
 8007f9c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	887a      	ldrh	r2, [r7, #2]
 8007fa2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	887a      	ldrh	r2, [r7, #2]
 8007faa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	68ba      	ldr	r2, [r7, #8]
 8007fb2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	887a      	ldrh	r2, [r7, #2]
 8007fb8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	887a      	ldrh	r2, [r7, #2]
 8007fbe:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	2200      	movs	r2, #0
 8007fca:	651a      	str	r2, [r3, #80]	; 0x50

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fd0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007fd4:	d10f      	bne.n	8007ff6 <HAL_SPI_TransmitReceive+0x11e>
  {
    SPI_RESET_CRC(hspi);
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	681a      	ldr	r2, [r3, #0]
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007fe4:	601a      	str	r2, [r3, #0]
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	681a      	ldr	r2, [r3, #0]
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007ff4:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	68db      	ldr	r3, [r3, #12]
 8007ffa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007ffe:	d802      	bhi.n	8008006 <HAL_SPI_TransmitReceive+0x12e>
 8008000:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008002:	2b01      	cmp	r3, #1
 8008004:	d908      	bls.n	8008018 <HAL_SPI_TransmitReceive+0x140>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	685a      	ldr	r2, [r3, #4]
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008014:	605a      	str	r2, [r3, #4]
 8008016:	e007      	b.n	8008028 <HAL_SPI_TransmitReceive+0x150>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	685a      	ldr	r2, [r3, #4]
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008026:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008032:	2b40      	cmp	r3, #64	; 0x40
 8008034:	d007      	beq.n	8008046 <HAL_SPI_TransmitReceive+0x16e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	681a      	ldr	r2, [r3, #0]
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008044:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	68db      	ldr	r3, [r3, #12]
 800804a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800804e:	f240 80ce 	bls.w	80081ee <HAL_SPI_TransmitReceive+0x316>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	685b      	ldr	r3, [r3, #4]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d003      	beq.n	8008062 <HAL_SPI_TransmitReceive+0x18a>
 800805a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800805c:	2b01      	cmp	r3, #1
 800805e:	f040 80b8 	bne.w	80081d2 <HAL_SPI_TransmitReceive+0x2fa>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008066:	881a      	ldrh	r2, [r3, #0]
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008072:	1c9a      	adds	r2, r3, #2
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800807c:	b29b      	uxth	r3, r3
 800807e:	3b01      	subs	r3, #1
 8008080:	b29a      	uxth	r2, r3
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	87da      	strh	r2, [r3, #62]	; 0x3e

#if (USE_SPI_CRC != 0U)
      /* Enable CRC Transmission */
      if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800808a:	b29b      	uxth	r3, r3
 800808c:	2b00      	cmp	r3, #0
 800808e:	f040 80a0 	bne.w	80081d2 <HAL_SPI_TransmitReceive+0x2fa>
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008096:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800809a:	f040 809a 	bne.w	80081d2 <HAL_SPI_TransmitReceive+0x2fa>
      {
        /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
        if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 800809e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080a0:	f003 0304 	and.w	r3, r3, #4
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d10c      	bne.n	80080c2 <HAL_SPI_TransmitReceive+0x1ea>
 80080a8:	6a3b      	ldr	r3, [r7, #32]
 80080aa:	f003 0308 	and.w	r3, r3, #8
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d007      	beq.n	80080c2 <HAL_SPI_TransmitReceive+0x1ea>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	681a      	ldr	r2, [r3, #0]
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80080c0:	601a      	str	r2, [r3, #0]
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	681a      	ldr	r2, [r3, #0]
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80080d0:	601a      	str	r2, [r3, #0]
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80080d2:	e07e      	b.n	80081d2 <HAL_SPI_TransmitReceive+0x2fa>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	689b      	ldr	r3, [r3, #8]
 80080da:	f003 0302 	and.w	r3, r3, #2
 80080de:	2b02      	cmp	r3, #2
 80080e0:	d13f      	bne.n	8008162 <HAL_SPI_TransmitReceive+0x28a>
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80080e6:	b29b      	uxth	r3, r3
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d03a      	beq.n	8008162 <HAL_SPI_TransmitReceive+0x28a>
 80080ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080ee:	2b01      	cmp	r3, #1
 80080f0:	d137      	bne.n	8008162 <HAL_SPI_TransmitReceive+0x28a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080f6:	881a      	ldrh	r2, [r3, #0]
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008102:	1c9a      	adds	r2, r3, #2
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800810c:	b29b      	uxth	r3, r3
 800810e:	3b01      	subs	r3, #1
 8008110:	b29a      	uxth	r2, r3
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008116:	2300      	movs	r3, #0
 8008118:	63fb      	str	r3, [r7, #60]	; 0x3c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800811e:	b29b      	uxth	r3, r3
 8008120:	2b00      	cmp	r3, #0
 8008122:	d11e      	bne.n	8008162 <HAL_SPI_TransmitReceive+0x28a>
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008128:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800812c:	d119      	bne.n	8008162 <HAL_SPI_TransmitReceive+0x28a>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 800812e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008130:	f003 0304 	and.w	r3, r3, #4
 8008134:	2b00      	cmp	r3, #0
 8008136:	d10c      	bne.n	8008152 <HAL_SPI_TransmitReceive+0x27a>
 8008138:	6a3b      	ldr	r3, [r7, #32]
 800813a:	f003 0308 	and.w	r3, r3, #8
 800813e:	2b00      	cmp	r3, #0
 8008140:	d007      	beq.n	8008152 <HAL_SPI_TransmitReceive+0x27a>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	681a      	ldr	r2, [r3, #0]
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008150:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	681a      	ldr	r2, [r3, #0]
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008160:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	689b      	ldr	r3, [r3, #8]
 8008168:	f003 0301 	and.w	r3, r3, #1
 800816c:	2b01      	cmp	r3, #1
 800816e:	d11c      	bne.n	80081aa <HAL_SPI_TransmitReceive+0x2d2>
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008176:	b29b      	uxth	r3, r3
 8008178:	2b00      	cmp	r3, #0
 800817a:	d016      	beq.n	80081aa <HAL_SPI_TransmitReceive+0x2d2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	68da      	ldr	r2, [r3, #12]
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008186:	b292      	uxth	r2, r2
 8008188:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800818e:	1c9a      	adds	r2, r3, #2
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800819a:	b29b      	uxth	r3, r3
 800819c:	3b01      	subs	r3, #1
 800819e:	b29a      	uxth	r2, r3
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80081a6:	2301      	movs	r3, #1
 80081a8:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80081aa:	f7fb fe7f 	bl	8003eac <HAL_GetTick>
 80081ae:	4602      	mov	r2, r0
 80081b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081b2:	1ad3      	subs	r3, r2, r3
 80081b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80081b6:	429a      	cmp	r2, r3
 80081b8:	d80b      	bhi.n	80081d2 <HAL_SPI_TransmitReceive+0x2fa>
 80081ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80081bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081c0:	d007      	beq.n	80081d2 <HAL_SPI_TransmitReceive+0x2fa>
      {
        errorcode = HAL_TIMEOUT;
 80081c2:	2303      	movs	r3, #3
 80081c4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        hspi->State = HAL_SPI_STATE_READY;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	2201      	movs	r2, #1
 80081cc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 80081d0:	e1b6      	b.n	8008540 <HAL_SPI_TransmitReceive+0x668>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80081d6:	b29b      	uxth	r3, r3
 80081d8:	2b00      	cmp	r3, #0
 80081da:	f47f af7b 	bne.w	80080d4 <HAL_SPI_TransmitReceive+0x1fc>
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80081e4:	b29b      	uxth	r3, r3
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	f47f af74 	bne.w	80080d4 <HAL_SPI_TransmitReceive+0x1fc>
 80081ec:	e12d      	b.n	800844a <HAL_SPI_TransmitReceive+0x572>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	685b      	ldr	r3, [r3, #4]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d003      	beq.n	80081fe <HAL_SPI_TransmitReceive+0x326>
 80081f6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80081f8:	2b01      	cmp	r3, #1
 80081fa:	f040 8119 	bne.w	8008430 <HAL_SPI_TransmitReceive+0x558>
    {
      if (hspi->TxXferCount > 1U)
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008202:	b29b      	uxth	r3, r3
 8008204:	2b01      	cmp	r3, #1
 8008206:	d912      	bls.n	800822e <HAL_SPI_TransmitReceive+0x356>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800820c:	881a      	ldrh	r2, [r3, #0]
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008218:	1c9a      	adds	r2, r3, #2
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008222:	b29b      	uxth	r3, r3
 8008224:	3b02      	subs	r3, #2
 8008226:	b29a      	uxth	r2, r3
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800822c:	e100      	b.n	8008430 <HAL_SPI_TransmitReceive+0x558>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	330c      	adds	r3, #12
 8008238:	7812      	ldrb	r2, [r2, #0]
 800823a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008240:	1c5a      	adds	r2, r3, #1
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800824a:	b29b      	uxth	r3, r3
 800824c:	3b01      	subs	r3, #1
 800824e:	b29a      	uxth	r2, r3
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	87da      	strh	r2, [r3, #62]	; 0x3e

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008258:	b29b      	uxth	r3, r3
 800825a:	2b00      	cmp	r3, #0
 800825c:	f040 80e8 	bne.w	8008430 <HAL_SPI_TransmitReceive+0x558>
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008264:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008268:	f040 80e2 	bne.w	8008430 <HAL_SPI_TransmitReceive+0x558>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 800826c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800826e:	f003 0304 	and.w	r3, r3, #4
 8008272:	2b00      	cmp	r3, #0
 8008274:	d10c      	bne.n	8008290 <HAL_SPI_TransmitReceive+0x3b8>
 8008276:	6a3b      	ldr	r3, [r7, #32]
 8008278:	f003 0308 	and.w	r3, r3, #8
 800827c:	2b00      	cmp	r3, #0
 800827e:	d007      	beq.n	8008290 <HAL_SPI_TransmitReceive+0x3b8>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	681a      	ldr	r2, [r3, #0]
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800828e:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	681a      	ldr	r2, [r3, #0]
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800829e:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80082a0:	e0c6      	b.n	8008430 <HAL_SPI_TransmitReceive+0x558>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	689b      	ldr	r3, [r3, #8]
 80082a8:	f003 0302 	and.w	r3, r3, #2
 80082ac:	2b02      	cmp	r3, #2
 80082ae:	d158      	bne.n	8008362 <HAL_SPI_TransmitReceive+0x48a>
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80082b4:	b29b      	uxth	r3, r3
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d053      	beq.n	8008362 <HAL_SPI_TransmitReceive+0x48a>
 80082ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082bc:	2b01      	cmp	r3, #1
 80082be:	d150      	bne.n	8008362 <HAL_SPI_TransmitReceive+0x48a>
      {
        if (hspi->TxXferCount > 1U)
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80082c4:	b29b      	uxth	r3, r3
 80082c6:	2b01      	cmp	r3, #1
 80082c8:	d912      	bls.n	80082f0 <HAL_SPI_TransmitReceive+0x418>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082ce:	881a      	ldrh	r2, [r3, #0]
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082da:	1c9a      	adds	r2, r3, #2
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80082e4:	b29b      	uxth	r3, r3
 80082e6:	3b02      	subs	r3, #2
 80082e8:	b29a      	uxth	r2, r3
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	87da      	strh	r2, [r3, #62]	; 0x3e
 80082ee:	e012      	b.n	8008316 <HAL_SPI_TransmitReceive+0x43e>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	330c      	adds	r3, #12
 80082fa:	7812      	ldrb	r2, [r2, #0]
 80082fc:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008302:	1c5a      	adds	r2, r3, #1
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800830c:	b29b      	uxth	r3, r3
 800830e:	3b01      	subs	r3, #1
 8008310:	b29a      	uxth	r2, r3
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008316:	2300      	movs	r3, #0
 8008318:	63fb      	str	r3, [r7, #60]	; 0x3c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800831e:	b29b      	uxth	r3, r3
 8008320:	2b00      	cmp	r3, #0
 8008322:	d11e      	bne.n	8008362 <HAL_SPI_TransmitReceive+0x48a>
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008328:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800832c:	d119      	bne.n	8008362 <HAL_SPI_TransmitReceive+0x48a>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 800832e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008330:	f003 0304 	and.w	r3, r3, #4
 8008334:	2b00      	cmp	r3, #0
 8008336:	d10c      	bne.n	8008352 <HAL_SPI_TransmitReceive+0x47a>
 8008338:	6a3b      	ldr	r3, [r7, #32]
 800833a:	f003 0308 	and.w	r3, r3, #8
 800833e:	2b00      	cmp	r3, #0
 8008340:	d007      	beq.n	8008352 <HAL_SPI_TransmitReceive+0x47a>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	681a      	ldr	r2, [r3, #0]
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008350:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	681a      	ldr	r2, [r3, #0]
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008360:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	689b      	ldr	r3, [r3, #8]
 8008368:	f003 0301 	and.w	r3, r3, #1
 800836c:	2b01      	cmp	r3, #1
 800836e:	d148      	bne.n	8008402 <HAL_SPI_TransmitReceive+0x52a>
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008376:	b29b      	uxth	r3, r3
 8008378:	2b00      	cmp	r3, #0
 800837a:	d042      	beq.n	8008402 <HAL_SPI_TransmitReceive+0x52a>
      {
        if (hspi->RxXferCount > 1U)
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008382:	b29b      	uxth	r3, r3
 8008384:	2b01      	cmp	r3, #1
 8008386:	d923      	bls.n	80083d0 <HAL_SPI_TransmitReceive+0x4f8>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	68da      	ldr	r2, [r3, #12]
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008392:	b292      	uxth	r2, r2
 8008394:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800839a:	1c9a      	adds	r2, r3, #2
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80083a6:	b29b      	uxth	r3, r3
 80083a8:	3b02      	subs	r3, #2
 80083aa:	b29a      	uxth	r2, r3
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80083b8:	b29b      	uxth	r3, r3
 80083ba:	2b01      	cmp	r3, #1
 80083bc:	d81f      	bhi.n	80083fe <HAL_SPI_TransmitReceive+0x526>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	685a      	ldr	r2, [r3, #4]
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80083cc:	605a      	str	r2, [r3, #4]
 80083ce:	e016      	b.n	80083fe <HAL_SPI_TransmitReceive+0x526>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	f103 020c 	add.w	r2, r3, #12
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083dc:	7812      	ldrb	r2, [r2, #0]
 80083de:	b2d2      	uxtb	r2, r2
 80083e0:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083e6:	1c5a      	adds	r2, r3, #1
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80083f2:	b29b      	uxth	r3, r3
 80083f4:	3b01      	subs	r3, #1
 80083f6:	b29a      	uxth	r2, r3
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80083fe:	2301      	movs	r3, #1
 8008400:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008402:	f7fb fd53 	bl	8003eac <HAL_GetTick>
 8008406:	4602      	mov	r2, r0
 8008408:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800840a:	1ad3      	subs	r3, r2, r3
 800840c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800840e:	429a      	cmp	r2, r3
 8008410:	d803      	bhi.n	800841a <HAL_SPI_TransmitReceive+0x542>
 8008412:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008414:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008418:	d102      	bne.n	8008420 <HAL_SPI_TransmitReceive+0x548>
 800841a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800841c:	2b00      	cmp	r3, #0
 800841e:	d107      	bne.n	8008430 <HAL_SPI_TransmitReceive+0x558>
      {
        errorcode = HAL_TIMEOUT;
 8008420:	2303      	movs	r3, #3
 8008422:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        hspi->State = HAL_SPI_STATE_READY;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	2201      	movs	r2, #1
 800842a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 800842e:	e087      	b.n	8008540 <HAL_SPI_TransmitReceive+0x668>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008434:	b29b      	uxth	r3, r3
 8008436:	2b00      	cmp	r3, #0
 8008438:	f47f af33 	bne.w	80082a2 <HAL_SPI_TransmitReceive+0x3ca>
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008442:	b29b      	uxth	r3, r3
 8008444:	2b00      	cmp	r3, #0
 8008446:	f47f af2c 	bne.w	80082a2 <HAL_SPI_TransmitReceive+0x3ca>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Read CRC from DR to close CRC calculation process */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800844e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008452:	d146      	bne.n	80084e2 <HAL_SPI_TransmitReceive+0x60a>
  {
    /* Wait until TXE flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8008454:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008456:	9300      	str	r3, [sp, #0]
 8008458:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800845a:	2201      	movs	r2, #1
 800845c:	2101      	movs	r1, #1
 800845e:	68f8      	ldr	r0, [r7, #12]
 8008460:	f000 fe9e 	bl	80091a0 <SPI_WaitFlagStateUntilTimeout>
 8008464:	4603      	mov	r3, r0
 8008466:	2b00      	cmp	r3, #0
 8008468:	d009      	beq.n	800847e <HAL_SPI_TransmitReceive+0x5a6>
    {
      /* Error on the CRC reception */
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800846e:	f043 0202 	orr.w	r2, r3, #2
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	661a      	str	r2, [r3, #96]	; 0x60
      errorcode = HAL_TIMEOUT;
 8008476:	2303      	movs	r3, #3
 8008478:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
      goto error;
 800847c:	e060      	b.n	8008540 <HAL_SPI_TransmitReceive+0x668>
    }
    /* Read CRC */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	68db      	ldr	r3, [r3, #12]
 8008482:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8008486:	d105      	bne.n	8008494 <HAL_SPI_TransmitReceive+0x5bc>
    {
      /* Read 16bit CRC */
      tmpreg = READ_REG(hspi->Instance->DR);
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	68db      	ldr	r3, [r3, #12]
 800848e:	61bb      	str	r3, [r7, #24]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8008490:	69bb      	ldr	r3, [r7, #24]
 8008492:	e026      	b.n	80084e2 <HAL_SPI_TransmitReceive+0x60a>
    }
    else
    {
      /* Initialize the 8bit temporary pointer */
      ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	330c      	adds	r3, #12
 800849a:	61fb      	str	r3, [r7, #28]
      /* Read 8bit CRC */
      tmpreg8 = *ptmpreg8;
 800849c:	69fb      	ldr	r3, [r7, #28]
 800849e:	781b      	ldrb	r3, [r3, #0]
 80084a0:	b2db      	uxtb	r3, r3
 80084a2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80084a4:	7dfb      	ldrb	r3, [r7, #23]

      if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084aa:	2b02      	cmp	r3, #2
 80084ac:	d119      	bne.n	80084e2 <HAL_SPI_TransmitReceive+0x60a>
      {
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80084ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084b0:	9300      	str	r3, [sp, #0]
 80084b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80084b4:	2201      	movs	r2, #1
 80084b6:	2101      	movs	r1, #1
 80084b8:	68f8      	ldr	r0, [r7, #12]
 80084ba:	f000 fe71 	bl	80091a0 <SPI_WaitFlagStateUntilTimeout>
 80084be:	4603      	mov	r3, r0
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d009      	beq.n	80084d8 <HAL_SPI_TransmitReceive+0x600>
        {
          /* Error on the CRC reception */
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80084c8:	f043 0202 	orr.w	r2, r3, #2
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	661a      	str	r2, [r3, #96]	; 0x60
          errorcode = HAL_TIMEOUT;
 80084d0:	2303      	movs	r3, #3
 80084d2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
          goto error;
 80084d6:	e033      	b.n	8008540 <HAL_SPI_TransmitReceive+0x668>
        }
        /* Read 8bit CRC again in case of 16bit CRC in 8bit Data mode */
        tmpreg8 = *ptmpreg8;
 80084d8:	69fb      	ldr	r3, [r7, #28]
 80084da:	781b      	ldrb	r3, [r3, #0]
 80084dc:	b2db      	uxtb	r3, r3
 80084de:	75fb      	strb	r3, [r7, #23]
        /* To avoid GCC warning */
        UNUSED(tmpreg8);
 80084e0:	7dfb      	ldrb	r3, [r7, #23]
      }
    }
  }

  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	689b      	ldr	r3, [r3, #8]
 80084e8:	f003 0310 	and.w	r3, r3, #16
 80084ec:	2b10      	cmp	r3, #16
 80084ee:	d10d      	bne.n	800850c <HAL_SPI_TransmitReceive+0x634>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80084f4:	f043 0202 	orr.w	r2, r3, #2
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	661a      	str	r2, [r3, #96]	; 0x60
    /* Clear CRC Flag */
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8008504:	609a      	str	r2, [r3, #8]

    errorcode = HAL_ERROR;
 8008506:	2301      	movs	r3, #1
 8008508:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800850c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800850e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8008510:	68f8      	ldr	r0, [r7, #12]
 8008512:	f000 ffbb 	bl	800948c <SPI_EndRxTxTransaction>
 8008516:	4603      	mov	r3, r0
 8008518:	2b00      	cmp	r3, #0
 800851a:	d005      	beq.n	8008528 <HAL_SPI_TransmitReceive+0x650>
  {
    errorcode = HAL_ERROR;
 800851c:	2301      	movs	r3, #1
 800851e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	2220      	movs	r2, #32
 8008526:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800852c:	2b00      	cmp	r3, #0
 800852e:	d003      	beq.n	8008538 <HAL_SPI_TransmitReceive+0x660>
  {
    errorcode = HAL_ERROR;
 8008530:	2301      	movs	r3, #1
 8008532:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008536:	e003      	b.n	8008540 <HAL_SPI_TransmitReceive+0x668>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	2201      	movs	r2, #1
 800853c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	2200      	movs	r2, #0
 8008544:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008548:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
}
 800854c:	4618      	mov	r0, r3
 800854e:	3740      	adds	r7, #64	; 0x40
 8008550:	46bd      	mov	sp, r7
 8008552:	bd80      	pop	{r7, pc}

08008554 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8008554:	b480      	push	{r7}
 8008556:	b087      	sub	sp, #28
 8008558:	af00      	add	r7, sp, #0
 800855a:	60f8      	str	r0, [r7, #12]
 800855c:	60b9      	str	r1, [r7, #8]
 800855e:	4613      	mov	r3, r2
 8008560:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008562:	2300      	movs	r3, #0
 8008564:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));


  if ((pData == NULL) || (Size == 0U))
 8008566:	68bb      	ldr	r3, [r7, #8]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d002      	beq.n	8008572 <HAL_SPI_Transmit_IT+0x1e>
 800856c:	88fb      	ldrh	r3, [r7, #6]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d102      	bne.n	8008578 <HAL_SPI_Transmit_IT+0x24>
  {
    errorcode = HAL_ERROR;
 8008572:	2301      	movs	r3, #1
 8008574:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008576:	e082      	b.n	800867e <HAL_SPI_Transmit_IT+0x12a>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800857e:	b2db      	uxtb	r3, r3
 8008580:	2b01      	cmp	r3, #1
 8008582:	d002      	beq.n	800858a <HAL_SPI_Transmit_IT+0x36>
  {
    errorcode = HAL_BUSY;
 8008584:	2302      	movs	r3, #2
 8008586:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008588:	e079      	b.n	800867e <HAL_SPI_Transmit_IT+0x12a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008590:	2b01      	cmp	r3, #1
 8008592:	d101      	bne.n	8008598 <HAL_SPI_Transmit_IT+0x44>
 8008594:	2302      	movs	r3, #2
 8008596:	e073      	b.n	8008680 <HAL_SPI_Transmit_IT+0x12c>
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	2201      	movs	r2, #1
 800859c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	2203      	movs	r2, #3
 80085a4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	2200      	movs	r2, #0
 80085ac:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	68ba      	ldr	r2, [r7, #8]
 80085b2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	88fa      	ldrh	r2, [r7, #6]
 80085b8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	88fa      	ldrh	r2, [r7, #6]
 80085be:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	2200      	movs	r2, #0
 80085c4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	2200      	movs	r2, #0
 80085ca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	2200      	movs	r2, #0
 80085d2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxISR       = NULL;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	2200      	movs	r2, #0
 80085da:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	68db      	ldr	r3, [r3, #12]
 80085e0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80085e4:	d903      	bls.n	80085ee <HAL_SPI_Transmit_IT+0x9a>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	4a28      	ldr	r2, [pc, #160]	; (800868c <HAL_SPI_Transmit_IT+0x138>)
 80085ea:	651a      	str	r2, [r3, #80]	; 0x50
 80085ec:	e002      	b.n	80085f4 <HAL_SPI_Transmit_IT+0xa0>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	4a27      	ldr	r2, [pc, #156]	; (8008690 <HAL_SPI_Transmit_IT+0x13c>)
 80085f2:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	689b      	ldr	r3, [r3, #8]
 80085f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80085fc:	d10f      	bne.n	800861e <HAL_SPI_Transmit_IT+0xca>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	681a      	ldr	r2, [r3, #0]
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800860c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	681a      	ldr	r2, [r3, #0]
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800861c:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008622:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008626:	d10f      	bne.n	8008648 <HAL_SPI_Transmit_IT+0xf4>
  {
    SPI_RESET_CRC(hspi);
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	681a      	ldr	r2, [r3, #0]
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008636:	601a      	str	r2, [r3, #0]
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	681a      	ldr	r2, [r3, #0]
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008646:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008652:	2b40      	cmp	r3, #64	; 0x40
 8008654:	d007      	beq.n	8008666 <HAL_SPI_Transmit_IT+0x112>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	681a      	ldr	r2, [r3, #0]
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008664:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	2200      	movs	r2, #0
 800866a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	685a      	ldr	r2, [r3, #4]
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 800867c:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 800867e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008680:	4618      	mov	r0, r3
 8008682:	371c      	adds	r7, #28
 8008684:	46bd      	mov	sp, r7
 8008686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868a:	4770      	bx	lr
 800868c:	08009141 	.word	0x08009141
 8008690:	080090e1 	.word	0x080090e1

08008694 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8008694:	b580      	push	{r7, lr}
 8008696:	b086      	sub	sp, #24
 8008698:	af00      	add	r7, sp, #0
 800869a:	60f8      	str	r0, [r7, #12]
 800869c:	60b9      	str	r1, [r7, #8]
 800869e:	4613      	mov	r3, r2
 80086a0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80086a2:	2300      	movs	r3, #0
 80086a4:	75fb      	strb	r3, [r7, #23]


  if (hspi->State != HAL_SPI_STATE_READY)
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80086ac:	b2db      	uxtb	r3, r3
 80086ae:	2b01      	cmp	r3, #1
 80086b0:	d002      	beq.n	80086b8 <HAL_SPI_Receive_IT+0x24>
  {
    errorcode = HAL_BUSY;
 80086b2:	2302      	movs	r3, #2
 80086b4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80086b6:	e0ba      	b.n	800882e <HAL_SPI_Receive_IT+0x19a>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	689b      	ldr	r3, [r3, #8]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d110      	bne.n	80086e2 <HAL_SPI_Receive_IT+0x4e>
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	685b      	ldr	r3, [r3, #4]
 80086c4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80086c8:	d10b      	bne.n	80086e2 <HAL_SPI_Receive_IT+0x4e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	2204      	movs	r2, #4
 80086ce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 80086d2:	88fb      	ldrh	r3, [r7, #6]
 80086d4:	68ba      	ldr	r2, [r7, #8]
 80086d6:	68b9      	ldr	r1, [r7, #8]
 80086d8:	68f8      	ldr	r0, [r7, #12]
 80086da:	f000 f8b1 	bl	8008840 <HAL_SPI_TransmitReceive_IT>
 80086de:	4603      	mov	r3, r0
 80086e0:	e0a6      	b.n	8008830 <HAL_SPI_Receive_IT+0x19c>
  }


  if ((pData == NULL) || (Size == 0U))
 80086e2:	68bb      	ldr	r3, [r7, #8]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d002      	beq.n	80086ee <HAL_SPI_Receive_IT+0x5a>
 80086e8:	88fb      	ldrh	r3, [r7, #6]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d102      	bne.n	80086f4 <HAL_SPI_Receive_IT+0x60>
  {
    errorcode = HAL_ERROR;
 80086ee:	2301      	movs	r3, #1
 80086f0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80086f2:	e09c      	b.n	800882e <HAL_SPI_Receive_IT+0x19a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80086fa:	2b01      	cmp	r3, #1
 80086fc:	d101      	bne.n	8008702 <HAL_SPI_Receive_IT+0x6e>
 80086fe:	2302      	movs	r3, #2
 8008700:	e096      	b.n	8008830 <HAL_SPI_Receive_IT+0x19c>
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	2201      	movs	r2, #1
 8008706:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	2204      	movs	r2, #4
 800870e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	2200      	movs	r2, #0
 8008716:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	68ba      	ldr	r2, [r7, #8]
 800871c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	88fa      	ldrh	r2, [r7, #6]
 8008722:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	88fa      	ldrh	r2, [r7, #6]
 800872a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	2200      	movs	r2, #0
 8008732:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	2200      	movs	r2, #0
 8008738:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	2200      	movs	r2, #0
 800873e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	2200      	movs	r2, #0
 8008744:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	68db      	ldr	r3, [r3, #12]
 800874a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800874e:	d90b      	bls.n	8008768 <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	685a      	ldr	r2, [r3, #4]
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800875e:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	4a35      	ldr	r2, [pc, #212]	; (8008838 <HAL_SPI_Receive_IT+0x1a4>)
 8008764:	64da      	str	r2, [r3, #76]	; 0x4c
 8008766:	e00a      	b.n	800877e <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	685a      	ldr	r2, [r3, #4]
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008776:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	4a30      	ldr	r2, [pc, #192]	; (800883c <HAL_SPI_Receive_IT+0x1a8>)
 800877c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	689b      	ldr	r3, [r3, #8]
 8008782:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008786:	d10f      	bne.n	80087a8 <HAL_SPI_Receive_IT+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	681a      	ldr	r2, [r3, #0]
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008796:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	681a      	ldr	r2, [r3, #0]
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80087a6:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80087b0:	d11f      	bne.n	80087f2 <HAL_SPI_Receive_IT+0x15e>
  {
    hspi->CRCSize = 1U;
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	2201      	movs	r2, #1
 80087b6:	649a      	str	r2, [r3, #72]	; 0x48
    if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	68db      	ldr	r3, [r3, #12]
 80087bc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80087c0:	d806      	bhi.n	80087d0 <HAL_SPI_Receive_IT+0x13c>
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087c6:	2b02      	cmp	r3, #2
 80087c8:	d102      	bne.n	80087d0 <HAL_SPI_Receive_IT+0x13c>
    {
      hspi->CRCSize = 2U;
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	2202      	movs	r2, #2
 80087ce:	649a      	str	r2, [r3, #72]	; 0x48
    }
    SPI_RESET_CRC(hspi);
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	681a      	ldr	r2, [r3, #0]
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80087de:	601a      	str	r2, [r3, #0]
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	681a      	ldr	r2, [r3, #0]
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80087ee:	601a      	str	r2, [r3, #0]
 80087f0:	e002      	b.n	80087f8 <HAL_SPI_Receive_IT+0x164>
  }
  else
  {
    hspi->CRCSize = 0U;
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	2200      	movs	r2, #0
 80087f6:	649a      	str	r2, [r3, #72]	; 0x48
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008802:	2b40      	cmp	r3, #64	; 0x40
 8008804:	d007      	beq.n	8008816 <HAL_SPI_Receive_IT+0x182>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	681a      	ldr	r2, [r3, #0]
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008814:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	2200      	movs	r2, #0
 800881a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Enable RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	685a      	ldr	r2, [r3, #4]
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800882c:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 800882e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008830:	4618      	mov	r0, r3
 8008832:	3718      	adds	r7, #24
 8008834:	46bd      	mov	sp, r7
 8008836:	bd80      	pop	{r7, pc}
 8008838:	08009059 	.word	0x08009059
 800883c:	08008f99 	.word	0x08008f99

08008840 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8008840:	b480      	push	{r7}
 8008842:	b087      	sub	sp, #28
 8008844:	af00      	add	r7, sp, #0
 8008846:	60f8      	str	r0, [r7, #12]
 8008848:	60b9      	str	r1, [r7, #8]
 800884a:	607a      	str	r2, [r7, #4]
 800884c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800884e:	2300      	movs	r3, #0
 8008850:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008858:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	685b      	ldr	r3, [r3, #4]
 800885e:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008860:	7dbb      	ldrb	r3, [r7, #22]
 8008862:	2b01      	cmp	r3, #1
 8008864:	d00d      	beq.n	8008882 <HAL_SPI_TransmitReceive_IT+0x42>
 8008866:	693b      	ldr	r3, [r7, #16]
 8008868:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800886c:	d106      	bne.n	800887c <HAL_SPI_TransmitReceive_IT+0x3c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	689b      	ldr	r3, [r3, #8]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d102      	bne.n	800887c <HAL_SPI_TransmitReceive_IT+0x3c>
 8008876:	7dbb      	ldrb	r3, [r7, #22]
 8008878:	2b04      	cmp	r3, #4
 800887a:	d002      	beq.n	8008882 <HAL_SPI_TransmitReceive_IT+0x42>
  {
    errorcode = HAL_BUSY;
 800887c:	2302      	movs	r3, #2
 800887e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008880:	e0a5      	b.n	80089ce <HAL_SPI_TransmitReceive_IT+0x18e>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008882:	68bb      	ldr	r3, [r7, #8]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d005      	beq.n	8008894 <HAL_SPI_TransmitReceive_IT+0x54>
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d002      	beq.n	8008894 <HAL_SPI_TransmitReceive_IT+0x54>
 800888e:	887b      	ldrh	r3, [r7, #2]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d102      	bne.n	800889a <HAL_SPI_TransmitReceive_IT+0x5a>
  {
    errorcode = HAL_ERROR;
 8008894:	2301      	movs	r3, #1
 8008896:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008898:	e099      	b.n	80089ce <HAL_SPI_TransmitReceive_IT+0x18e>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80088a0:	2b01      	cmp	r3, #1
 80088a2:	d101      	bne.n	80088a8 <HAL_SPI_TransmitReceive_IT+0x68>
 80088a4:	2302      	movs	r3, #2
 80088a6:	e093      	b.n	80089d0 <HAL_SPI_TransmitReceive_IT+0x190>
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	2201      	movs	r2, #1
 80088ac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80088b6:	b2db      	uxtb	r3, r3
 80088b8:	2b04      	cmp	r3, #4
 80088ba:	d003      	beq.n	80088c4 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	2205      	movs	r2, #5
 80088c0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	2200      	movs	r2, #0
 80088c8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	68ba      	ldr	r2, [r7, #8]
 80088ce:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	887a      	ldrh	r2, [r7, #2]
 80088d4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	887a      	ldrh	r2, [r7, #2]
 80088da:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	687a      	ldr	r2, [r7, #4]
 80088e0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	887a      	ldrh	r2, [r7, #2]
 80088e6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	887a      	ldrh	r2, [r7, #2]
 80088ee:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	68db      	ldr	r3, [r3, #12]
 80088f6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80088fa:	d906      	bls.n	800890a <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	4a37      	ldr	r2, [pc, #220]	; (80089dc <HAL_SPI_TransmitReceive_IT+0x19c>)
 8008900:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	4a36      	ldr	r2, [pc, #216]	; (80089e0 <HAL_SPI_TransmitReceive_IT+0x1a0>)
 8008906:	651a      	str	r2, [r3, #80]	; 0x50
 8008908:	e005      	b.n	8008916 <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	4a35      	ldr	r2, [pc, #212]	; (80089e4 <HAL_SPI_TransmitReceive_IT+0x1a4>)
 800890e:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	4a35      	ldr	r2, [pc, #212]	; (80089e8 <HAL_SPI_TransmitReceive_IT+0x1a8>)
 8008914:	651a      	str	r2, [r3, #80]	; 0x50
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800891a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800891e:	d11f      	bne.n	8008960 <HAL_SPI_TransmitReceive_IT+0x120>
  {
    hspi->CRCSize = 1U;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	2201      	movs	r2, #1
 8008924:	649a      	str	r2, [r3, #72]	; 0x48
    if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	68db      	ldr	r3, [r3, #12]
 800892a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800892e:	d806      	bhi.n	800893e <HAL_SPI_TransmitReceive_IT+0xfe>
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008934:	2b02      	cmp	r3, #2
 8008936:	d102      	bne.n	800893e <HAL_SPI_TransmitReceive_IT+0xfe>
    {
      hspi->CRCSize = 2U;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	2202      	movs	r2, #2
 800893c:	649a      	str	r2, [r3, #72]	; 0x48
    }
    SPI_RESET_CRC(hspi);
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	681a      	ldr	r2, [r3, #0]
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800894c:	601a      	str	r2, [r3, #0]
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	681a      	ldr	r2, [r3, #0]
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800895c:	601a      	str	r2, [r3, #0]
 800895e:	e002      	b.n	8008966 <HAL_SPI_TransmitReceive_IT+0x126>
  }
  else
  {
    hspi->CRCSize = 0U;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	2200      	movs	r2, #0
 8008964:	649a      	str	r2, [r3, #72]	; 0x48
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	68db      	ldr	r3, [r3, #12]
 800896a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800896e:	d802      	bhi.n	8008976 <HAL_SPI_TransmitReceive_IT+0x136>
 8008970:	887b      	ldrh	r3, [r7, #2]
 8008972:	2b01      	cmp	r3, #1
 8008974:	d908      	bls.n	8008988 <HAL_SPI_TransmitReceive_IT+0x148>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	685a      	ldr	r2, [r3, #4]
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008984:	605a      	str	r2, [r3, #4]
 8008986:	e007      	b.n	8008998 <HAL_SPI_TransmitReceive_IT+0x158>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	685a      	ldr	r2, [r3, #4]
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008996:	605a      	str	r2, [r3, #4]
  }


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089a2:	2b40      	cmp	r3, #64	; 0x40
 80089a4:	d007      	beq.n	80089b6 <HAL_SPI_TransmitReceive_IT+0x176>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	681a      	ldr	r2, [r3, #0]
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80089b4:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	2200      	movs	r2, #0
 80089ba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	685a      	ldr	r2, [r3, #4]
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 80089cc:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 80089ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80089d0:	4618      	mov	r0, r3
 80089d2:	371c      	adds	r7, #28
 80089d4:	46bd      	mov	sp, r7
 80089d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089da:	4770      	bx	lr
 80089dc:	08008e21 	.word	0x08008e21
 80089e0:	08008ed1 	.word	0x08008ed1
 80089e4:	08008c29 	.word	0x08008c29
 80089e8:	08008d65 	.word	0x08008d65

080089ec <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b088      	sub	sp, #32
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	685b      	ldr	r3, [r3, #4]
 80089fa:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	689b      	ldr	r3, [r3, #8]
 8008a02:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008a04:	69bb      	ldr	r3, [r7, #24]
 8008a06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d10e      	bne.n	8008a2c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008a0e:	69bb      	ldr	r3, [r7, #24]
 8008a10:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d009      	beq.n	8008a2c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008a18:	69fb      	ldr	r3, [r7, #28]
 8008a1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d004      	beq.n	8008a2c <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a26:	6878      	ldr	r0, [r7, #4]
 8008a28:	4798      	blx	r3
    return;
 8008a2a:	e0ce      	b.n	8008bca <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8008a2c:	69bb      	ldr	r3, [r7, #24]
 8008a2e:	f003 0302 	and.w	r3, r3, #2
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d009      	beq.n	8008a4a <HAL_SPI_IRQHandler+0x5e>
 8008a36:	69fb      	ldr	r3, [r7, #28]
 8008a38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d004      	beq.n	8008a4a <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a44:	6878      	ldr	r0, [r7, #4]
 8008a46:	4798      	blx	r3
    return;
 8008a48:	e0bf      	b.n	8008bca <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8008a4a:	69bb      	ldr	r3, [r7, #24]
 8008a4c:	f003 0320 	and.w	r3, r3, #32
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d10a      	bne.n	8008a6a <HAL_SPI_IRQHandler+0x7e>
 8008a54:	69bb      	ldr	r3, [r7, #24]
 8008a56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d105      	bne.n	8008a6a <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8008a5e:	69bb      	ldr	r3, [r7, #24]
 8008a60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	f000 80b0 	beq.w	8008bca <HAL_SPI_IRQHandler+0x1de>
 8008a6a:	69fb      	ldr	r3, [r7, #28]
 8008a6c:	f003 0320 	and.w	r3, r3, #32
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	f000 80aa 	beq.w	8008bca <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8008a76:	69bb      	ldr	r3, [r7, #24]
 8008a78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d023      	beq.n	8008ac8 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008a86:	b2db      	uxtb	r3, r3
 8008a88:	2b03      	cmp	r3, #3
 8008a8a:	d011      	beq.n	8008ab0 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a90:	f043 0204 	orr.w	r2, r3, #4
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008a98:	2300      	movs	r3, #0
 8008a9a:	617b      	str	r3, [r7, #20]
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	68db      	ldr	r3, [r3, #12]
 8008aa2:	617b      	str	r3, [r7, #20]
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	689b      	ldr	r3, [r3, #8]
 8008aaa:	617b      	str	r3, [r7, #20]
 8008aac:	697b      	ldr	r3, [r7, #20]
 8008aae:	e00b      	b.n	8008ac8 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	613b      	str	r3, [r7, #16]
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	68db      	ldr	r3, [r3, #12]
 8008aba:	613b      	str	r3, [r7, #16]
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	689b      	ldr	r3, [r3, #8]
 8008ac2:	613b      	str	r3, [r7, #16]
 8008ac4:	693b      	ldr	r3, [r7, #16]
        return;
 8008ac6:	e080      	b.n	8008bca <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8008ac8:	69bb      	ldr	r3, [r7, #24]
 8008aca:	f003 0320 	and.w	r3, r3, #32
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d014      	beq.n	8008afc <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ad6:	f043 0201 	orr.w	r2, r3, #1
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008ade:	2300      	movs	r3, #0
 8008ae0:	60fb      	str	r3, [r7, #12]
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	689b      	ldr	r3, [r3, #8]
 8008ae8:	60fb      	str	r3, [r7, #12]
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	681a      	ldr	r2, [r3, #0]
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008af8:	601a      	str	r2, [r3, #0]
 8008afa:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8008afc:	69bb      	ldr	r3, [r7, #24]
 8008afe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d00c      	beq.n	8008b20 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b0a:	f043 0208 	orr.w	r2, r3, #8
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008b12:	2300      	movs	r3, #0
 8008b14:	60bb      	str	r3, [r7, #8]
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	689b      	ldr	r3, [r3, #8]
 8008b1c:	60bb      	str	r3, [r7, #8]
 8008b1e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d04f      	beq.n	8008bc8 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	685a      	ldr	r2, [r3, #4]
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008b36:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2201      	movs	r2, #1
 8008b3c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8008b40:	69fb      	ldr	r3, [r7, #28]
 8008b42:	f003 0302 	and.w	r3, r3, #2
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d104      	bne.n	8008b54 <HAL_SPI_IRQHandler+0x168>
 8008b4a:	69fb      	ldr	r3, [r7, #28]
 8008b4c:	f003 0301 	and.w	r3, r3, #1
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d034      	beq.n	8008bbe <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	685a      	ldr	r2, [r3, #4]
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	f022 0203 	bic.w	r2, r2, #3
 8008b62:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d011      	beq.n	8008b90 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b70:	4a17      	ldr	r2, [pc, #92]	; (8008bd0 <HAL_SPI_IRQHandler+0x1e4>)
 8008b72:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b78:	4618      	mov	r0, r3
 8008b7a:	f7fc f90c 	bl	8004d96 <HAL_DMA_Abort_IT>
 8008b7e:	4603      	mov	r3, r0
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d005      	beq.n	8008b90 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b88:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d016      	beq.n	8008bc6 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b9c:	4a0c      	ldr	r2, [pc, #48]	; (8008bd0 <HAL_SPI_IRQHandler+0x1e4>)
 8008b9e:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	f7fc f8f6 	bl	8004d96 <HAL_DMA_Abort_IT>
 8008baa:	4603      	mov	r3, r0
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d00a      	beq.n	8008bc6 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008bb4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8008bbc:	e003      	b.n	8008bc6 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8008bbe:	6878      	ldr	r0, [r7, #4]
 8008bc0:	f000 f812 	bl	8008be8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8008bc4:	e000      	b.n	8008bc8 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8008bc6:	bf00      	nop
    return;
 8008bc8:	bf00      	nop
  }
}
 8008bca:	3720      	adds	r7, #32
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	bd80      	pop	{r7, pc}
 8008bd0:	08008bfd 	.word	0x08008bfd

08008bd4 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008bd4:	b480      	push	{r7}
 8008bd6:	b083      	sub	sp, #12
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8008bdc:	bf00      	nop
 8008bde:	370c      	adds	r7, #12
 8008be0:	46bd      	mov	sp, r7
 8008be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be6:	4770      	bx	lr

08008be8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8008be8:	b480      	push	{r7}
 8008bea:	b083      	sub	sp, #12
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8008bf0:	bf00      	nop
 8008bf2:	370c      	adds	r7, #12
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfa:	4770      	bx	lr

08008bfc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b084      	sub	sp, #16
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c08:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	2200      	movs	r2, #0
 8008c16:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8008c18:	68f8      	ldr	r0, [r7, #12]
 8008c1a:	f7ff ffe5 	bl	8008be8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008c1e:	bf00      	nop
 8008c20:	3710      	adds	r7, #16
 8008c22:	46bd      	mov	sp, r7
 8008c24:	bd80      	pop	{r7, pc}
	...

08008c28 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b082      	sub	sp, #8
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008c36:	b29b      	uxth	r3, r3
 8008c38:	2b01      	cmp	r3, #1
 8008c3a:	d923      	bls.n	8008c84 <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	68da      	ldr	r2, [r3, #12]
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c46:	b292      	uxth	r2, r2
 8008c48:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c4e:	1c9a      	adds	r2, r3, #2
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008c5a:	b29b      	uxth	r3, r3
 8008c5c:	3b02      	subs	r3, #2
 8008c5e:	b29a      	uxth	r2, r3
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008c6c:	b29b      	uxth	r3, r3
 8008c6e:	2b01      	cmp	r3, #1
 8008c70:	d11f      	bne.n	8008cb2 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	685a      	ldr	r2, [r3, #4]
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008c80:	605a      	str	r2, [r3, #4]
 8008c82:	e016      	b.n	8008cb2 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	f103 020c 	add.w	r2, r3, #12
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c90:	7812      	ldrb	r2, [r2, #0]
 8008c92:	b2d2      	uxtb	r2, r2
 8008c94:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c9a:	1c5a      	adds	r2, r3, #1
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008ca6:	b29b      	uxth	r3, r3
 8008ca8:	3b01      	subs	r3, #1
 8008caa:	b29a      	uxth	r2, r3
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008cb8:	b29b      	uxth	r3, r3
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d120      	bne.n	8008d00 <SPI_2linesRxISR_8BIT+0xd8>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008cc6:	d10b      	bne.n	8008ce0 <SPI_2linesRxISR_8BIT+0xb8>
    {
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	685a      	ldr	r2, [r3, #4]
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008cd6:	605a      	str	r2, [r3, #4]
      hspi->RxISR =  SPI_2linesRxISR_8BITCRC;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	4a0b      	ldr	r2, [pc, #44]	; (8008d08 <SPI_2linesRxISR_8BIT+0xe0>)
 8008cdc:	64da      	str	r2, [r3, #76]	; 0x4c
      return;
 8008cde:	e00f      	b.n	8008d00 <SPI_2linesRxISR_8BIT+0xd8>
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	685a      	ldr	r2, [r3, #4]
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8008cee:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008cf4:	b29b      	uxth	r3, r3
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d102      	bne.n	8008d00 <SPI_2linesRxISR_8BIT+0xd8>
    {
      SPI_CloseRxTx_ISR(hspi);
 8008cfa:	6878      	ldr	r0, [r7, #4]
 8008cfc:	f000 fc0c 	bl	8009518 <SPI_CloseRxTx_ISR>
    }
  }
}
 8008d00:	3708      	adds	r7, #8
 8008d02:	46bd      	mov	sp, r7
 8008d04:	bd80      	pop	{r7, pc}
 8008d06:	bf00      	nop
 8008d08:	08008d0d 	.word	0x08008d0d

08008d0c <SPI_2linesRxISR_8BITCRC>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BITCRC(struct __SPI_HandleTypeDef *hspi)
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b084      	sub	sp, #16
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8008d14:	2300      	movs	r3, #0
 8008d16:	72fb      	strb	r3, [r7, #11]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	330c      	adds	r3, #12
 8008d1e:	60fb      	str	r3, [r7, #12]
  /* Read 8bit CRC to flush Data Register */
  tmpreg8 = *ptmpreg8;
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	781b      	ldrb	r3, [r3, #0]
 8008d24:	b2db      	uxtb	r3, r3
 8008d26:	72fb      	strb	r3, [r7, #11]
  /* To avoid GCC warning */
  UNUSED(tmpreg8);
 8008d28:	7afb      	ldrb	r3, [r7, #11]

  hspi->CRCSize--;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d2e:	1e5a      	subs	r2, r3, #1
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	649a      	str	r2, [r3, #72]	; 0x48

  /* Check end of the reception */
  if (hspi->CRCSize == 0U)
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d10f      	bne.n	8008d5c <SPI_2linesRxISR_8BITCRC+0x50>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	685a      	ldr	r2, [r3, #4]
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8008d4a:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008d50:	b29b      	uxth	r3, r3
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d102      	bne.n	8008d5c <SPI_2linesRxISR_8BITCRC+0x50>
    {
      SPI_CloseRxTx_ISR(hspi);
 8008d56:	6878      	ldr	r0, [r7, #4]
 8008d58:	f000 fbde 	bl	8009518 <SPI_CloseRxTx_ISR>
    }
  }
}
 8008d5c:	bf00      	nop
 8008d5e:	3710      	adds	r7, #16
 8008d60:	46bd      	mov	sp, r7
 8008d62:	bd80      	pop	{r7, pc}

08008d64 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b082      	sub	sp, #8
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008d70:	b29b      	uxth	r3, r3
 8008d72:	2b01      	cmp	r3, #1
 8008d74:	d912      	bls.n	8008d9c <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d7a:	881a      	ldrh	r2, [r3, #0]
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d86:	1c9a      	adds	r2, r3, #2
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008d90:	b29b      	uxth	r3, r3
 8008d92:	3b02      	subs	r3, #2
 8008d94:	b29a      	uxth	r2, r3
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008d9a:	e012      	b.n	8008dc2 <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	330c      	adds	r3, #12
 8008da6:	7812      	ldrb	r2, [r2, #0]
 8008da8:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dae:	1c5a      	adds	r2, r3, #1
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008db8:	b29b      	uxth	r3, r3
 8008dba:	3b01      	subs	r3, #1
 8008dbc:	b29a      	uxth	r2, r3
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008dc6:	b29b      	uxth	r3, r3
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d126      	bne.n	8008e1a <SPI_2linesTxISR_8BIT+0xb6>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dd0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008dd4:	d110      	bne.n	8008df8 <SPI_2linesTxISR_8BIT+0x94>
    {
      /* Set CRC Next Bit to send CRC */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	681a      	ldr	r2, [r3, #0]
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008de4:	601a      	str	r2, [r3, #0]
      /* Disable TXE interrupt */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	685a      	ldr	r2, [r3, #4]
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008df4:	605a      	str	r2, [r3, #4]
      return;
 8008df6:	e010      	b.n	8008e1a <SPI_2linesTxISR_8BIT+0xb6>
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	685a      	ldr	r2, [r3, #4]
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008e06:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008e0e:	b29b      	uxth	r3, r3
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d102      	bne.n	8008e1a <SPI_2linesTxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8008e14:	6878      	ldr	r0, [r7, #4]
 8008e16:	f000 fb7f 	bl	8009518 <SPI_CloseRxTx_ISR>
    }
  }
}
 8008e1a:	3708      	adds	r7, #8
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	bd80      	pop	{r7, pc}

08008e20 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b082      	sub	sp, #8
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	68da      	ldr	r2, [r3, #12]
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e32:	b292      	uxth	r2, r2
 8008e34:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e3a:	1c9a      	adds	r2, r3, #2
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008e46:	b29b      	uxth	r3, r3
 8008e48:	3b01      	subs	r3, #1
 8008e4a:	b29a      	uxth	r2, r3
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008e58:	b29b      	uxth	r3, r3
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d118      	bne.n	8008e90 <SPI_2linesRxISR_16BIT+0x70>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e66:	d103      	bne.n	8008e70 <SPI_2linesRxISR_16BIT+0x50>
    {
      hspi->RxISR =  SPI_2linesRxISR_16BITCRC;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	4a0b      	ldr	r2, [pc, #44]	; (8008e98 <SPI_2linesRxISR_16BIT+0x78>)
 8008e6c:	64da      	str	r2, [r3, #76]	; 0x4c
      return;
 8008e6e:	e00f      	b.n	8008e90 <SPI_2linesRxISR_16BIT+0x70>
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	685a      	ldr	r2, [r3, #4]
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008e7e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e84:	b29b      	uxth	r3, r3
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d102      	bne.n	8008e90 <SPI_2linesRxISR_16BIT+0x70>
    {
      SPI_CloseRxTx_ISR(hspi);
 8008e8a:	6878      	ldr	r0, [r7, #4]
 8008e8c:	f000 fb44 	bl	8009518 <SPI_CloseRxTx_ISR>
    }
  }
}
 8008e90:	3708      	adds	r7, #8
 8008e92:	46bd      	mov	sp, r7
 8008e94:	bd80      	pop	{r7, pc}
 8008e96:	bf00      	nop
 8008e98:	08008e9d 	.word	0x08008e9d

08008e9c <SPI_2linesRxISR_16BITCRC>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BITCRC(struct __SPI_HandleTypeDef *hspi)
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b084      	sub	sp, #16
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0U;
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	60fb      	str	r3, [r7, #12]

  /* Read 16bit CRC to flush Data Register */
  tmpreg = READ_REG(hspi->Instance->DR);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	68db      	ldr	r3, [r3, #12]
 8008eae:	60fb      	str	r3, [r7, #12]
  /* To avoid GCC warning */
  UNUSED(tmpreg);
 8008eb0:	68fb      	ldr	r3, [r7, #12]

  /* Disable RXNE interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	685a      	ldr	r2, [r3, #4]
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008ec0:	605a      	str	r2, [r3, #4]

  SPI_CloseRxTx_ISR(hspi);
 8008ec2:	6878      	ldr	r0, [r7, #4]
 8008ec4:	f000 fb28 	bl	8009518 <SPI_CloseRxTx_ISR>
}
 8008ec8:	bf00      	nop
 8008eca:	3710      	adds	r7, #16
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	bd80      	pop	{r7, pc}

08008ed0 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b082      	sub	sp, #8
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008edc:	881a      	ldrh	r2, [r3, #0]
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ee8:	1c9a      	adds	r2, r3, #2
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008ef2:	b29b      	uxth	r3, r3
 8008ef4:	3b01      	subs	r3, #1
 8008ef6:	b29a      	uxth	r2, r3
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008f00:	b29b      	uxth	r3, r3
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d126      	bne.n	8008f54 <SPI_2linesTxISR_16BIT+0x84>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008f0e:	d110      	bne.n	8008f32 <SPI_2linesTxISR_16BIT+0x62>
    {
      /* Set CRC Next Bit to send CRC */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	681a      	ldr	r2, [r3, #0]
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008f1e:	601a      	str	r2, [r3, #0]
      /* Disable TXE interrupt */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	685a      	ldr	r2, [r3, #4]
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008f2e:	605a      	str	r2, [r3, #4]
      return;
 8008f30:	e010      	b.n	8008f54 <SPI_2linesTxISR_16BIT+0x84>
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	685a      	ldr	r2, [r3, #4]
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008f40:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008f48:	b29b      	uxth	r3, r3
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d102      	bne.n	8008f54 <SPI_2linesTxISR_16BIT+0x84>
    {
      SPI_CloseRxTx_ISR(hspi);
 8008f4e:	6878      	ldr	r0, [r7, #4]
 8008f50:	f000 fae2 	bl	8009518 <SPI_CloseRxTx_ISR>
    }
  }
}
 8008f54:	3708      	adds	r7, #8
 8008f56:	46bd      	mov	sp, r7
 8008f58:	bd80      	pop	{r7, pc}

08008f5a <SPI_RxISR_8BITCRC>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BITCRC(struct __SPI_HandleTypeDef *hspi)
{
 8008f5a:	b580      	push	{r7, lr}
 8008f5c:	b084      	sub	sp, #16
 8008f5e:	af00      	add	r7, sp, #0
 8008f60:	6078      	str	r0, [r7, #4]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8008f62:	2300      	movs	r3, #0
 8008f64:	72fb      	strb	r3, [r7, #11]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	330c      	adds	r3, #12
 8008f6c:	60fb      	str	r3, [r7, #12]
  /* Read 8bit CRC to flush Data Register */
  tmpreg8 = *ptmpreg8;
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	781b      	ldrb	r3, [r3, #0]
 8008f72:	b2db      	uxtb	r3, r3
 8008f74:	72fb      	strb	r3, [r7, #11]
  /* To avoid GCC warning */
  UNUSED(tmpreg8);
 8008f76:	7afb      	ldrb	r3, [r7, #11]

  hspi->CRCSize--;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f7c:	1e5a      	subs	r2, r3, #1
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	649a      	str	r2, [r3, #72]	; 0x48

  if (hspi->CRCSize == 0U)
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d102      	bne.n	8008f90 <SPI_RxISR_8BITCRC+0x36>
  {
    SPI_CloseRx_ISR(hspi);
 8008f8a:	6878      	ldr	r0, [r7, #4]
 8008f8c:	f000 fb20 	bl	80095d0 <SPI_CloseRx_ISR>
  }
}
 8008f90:	bf00      	nop
 8008f92:	3710      	adds	r7, #16
 8008f94:	46bd      	mov	sp, r7
 8008f96:	bd80      	pop	{r7, pc}

08008f98 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b082      	sub	sp, #8
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	f103 020c 	add.w	r2, r3, #12
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fac:	7812      	ldrb	r2, [r2, #0]
 8008fae:	b2d2      	uxtb	r2, r2
 8008fb0:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fb6:	1c5a      	adds	r2, r3, #1
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008fc2:	b29b      	uxth	r3, r3
 8008fc4:	3b01      	subs	r3, #1
 8008fc6:	b29a      	uxth	r2, r3
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if ((hspi->RxXferCount == 1U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008fd4:	b29b      	uxth	r3, r3
 8008fd6:	2b01      	cmp	r3, #1
 8008fd8:	d10c      	bne.n	8008ff4 <SPI_RxISR_8BIT+0x5c>
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008fe2:	d107      	bne.n	8008ff4 <SPI_RxISR_8BIT+0x5c>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	681a      	ldr	r2, [r3, #0]
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008ff2:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008ffa:	b29b      	uxth	r3, r3
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d10b      	bne.n	8009018 <SPI_RxISR_8BIT+0x80>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009004:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009008:	d103      	bne.n	8009012 <SPI_RxISR_8BIT+0x7a>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	4a04      	ldr	r2, [pc, #16]	; (8009020 <SPI_RxISR_8BIT+0x88>)
 800900e:	64da      	str	r2, [r3, #76]	; 0x4c
      return;
 8009010:	e002      	b.n	8009018 <SPI_RxISR_8BIT+0x80>
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8009012:	6878      	ldr	r0, [r7, #4]
 8009014:	f000 fadc 	bl	80095d0 <SPI_CloseRx_ISR>
  }
}
 8009018:	3708      	adds	r7, #8
 800901a:	46bd      	mov	sp, r7
 800901c:	bd80      	pop	{r7, pc}
 800901e:	bf00      	nop
 8009020:	08008f5b 	.word	0x08008f5b

08009024 <SPI_RxISR_16BITCRC>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BITCRC(struct __SPI_HandleTypeDef *hspi)
{
 8009024:	b580      	push	{r7, lr}
 8009026:	b084      	sub	sp, #16
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0U;
 800902c:	2300      	movs	r3, #0
 800902e:	60fb      	str	r3, [r7, #12]

  /* Read 16bit CRC to flush Data Register */
  tmpreg = READ_REG(hspi->Instance->DR);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	68db      	ldr	r3, [r3, #12]
 8009036:	60fb      	str	r3, [r7, #12]
  /* To avoid GCC warning */
  UNUSED(tmpreg);
 8009038:	68fb      	ldr	r3, [r7, #12]

  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	685a      	ldr	r2, [r3, #4]
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8009048:	605a      	str	r2, [r3, #4]

  SPI_CloseRx_ISR(hspi);
 800904a:	6878      	ldr	r0, [r7, #4]
 800904c:	f000 fac0 	bl	80095d0 <SPI_CloseRx_ISR>
}
 8009050:	bf00      	nop
 8009052:	3710      	adds	r7, #16
 8009054:	46bd      	mov	sp, r7
 8009056:	bd80      	pop	{r7, pc}

08009058 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8009058:	b580      	push	{r7, lr}
 800905a:	b082      	sub	sp, #8
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	68da      	ldr	r2, [r3, #12]
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800906a:	b292      	uxth	r2, r2
 800906c:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009072:	1c9a      	adds	r2, r3, #2
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800907e:	b29b      	uxth	r3, r3
 8009080:	3b01      	subs	r3, #1
 8009082:	b29a      	uxth	r2, r3
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if ((hspi->RxXferCount == 1U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009090:	b29b      	uxth	r3, r3
 8009092:	2b01      	cmp	r3, #1
 8009094:	d10c      	bne.n	80090b0 <SPI_RxISR_16BIT+0x58>
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800909a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800909e:	d107      	bne.n	80090b0 <SPI_RxISR_16BIT+0x58>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	681a      	ldr	r2, [r3, #0]
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80090ae:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80090b6:	b29b      	uxth	r3, r3
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d10b      	bne.n	80090d4 <SPI_RxISR_16BIT+0x7c>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80090c4:	d103      	bne.n	80090ce <SPI_RxISR_16BIT+0x76>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	4a04      	ldr	r2, [pc, #16]	; (80090dc <SPI_RxISR_16BIT+0x84>)
 80090ca:	64da      	str	r2, [r3, #76]	; 0x4c
      return;
 80090cc:	e002      	b.n	80090d4 <SPI_RxISR_16BIT+0x7c>
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 80090ce:	6878      	ldr	r0, [r7, #4]
 80090d0:	f000 fa7e 	bl	80095d0 <SPI_CloseRx_ISR>
  }
}
 80090d4:	3708      	adds	r7, #8
 80090d6:	46bd      	mov	sp, r7
 80090d8:	bd80      	pop	{r7, pc}
 80090da:	bf00      	nop
 80090dc:	08009025 	.word	0x08009025

080090e0 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b082      	sub	sp, #8
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	330c      	adds	r3, #12
 80090f2:	7812      	ldrb	r2, [r2, #0]
 80090f4:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090fa:	1c5a      	adds	r2, r3, #1
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009104:	b29b      	uxth	r3, r3
 8009106:	3b01      	subs	r3, #1
 8009108:	b29a      	uxth	r2, r3
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009112:	b29b      	uxth	r3, r3
 8009114:	2b00      	cmp	r3, #0
 8009116:	d10f      	bne.n	8009138 <SPI_TxISR_8BIT+0x58>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800911c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009120:	d107      	bne.n	8009132 <SPI_TxISR_8BIT+0x52>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	681a      	ldr	r2, [r3, #0]
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009130:	601a      	str	r2, [r3, #0]
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8009132:	6878      	ldr	r0, [r7, #4]
 8009134:	f000 fa92 	bl	800965c <SPI_CloseTx_ISR>
  }
}
 8009138:	bf00      	nop
 800913a:	3708      	adds	r7, #8
 800913c:	46bd      	mov	sp, r7
 800913e:	bd80      	pop	{r7, pc}

08009140 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b082      	sub	sp, #8
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800914c:	881a      	ldrh	r2, [r3, #0]
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009158:	1c9a      	adds	r2, r3, #2
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009162:	b29b      	uxth	r3, r3
 8009164:	3b01      	subs	r3, #1
 8009166:	b29a      	uxth	r2, r3
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009170:	b29b      	uxth	r3, r3
 8009172:	2b00      	cmp	r3, #0
 8009174:	d10f      	bne.n	8009196 <SPI_TxISR_16BIT+0x56>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800917a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800917e:	d107      	bne.n	8009190 <SPI_TxISR_16BIT+0x50>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	681a      	ldr	r2, [r3, #0]
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800918e:	601a      	str	r2, [r3, #0]
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8009190:	6878      	ldr	r0, [r7, #4]
 8009192:	f000 fa63 	bl	800965c <SPI_CloseTx_ISR>
  }
}
 8009196:	bf00      	nop
 8009198:	3708      	adds	r7, #8
 800919a:	46bd      	mov	sp, r7
 800919c:	bd80      	pop	{r7, pc}
	...

080091a0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b088      	sub	sp, #32
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	60f8      	str	r0, [r7, #12]
 80091a8:	60b9      	str	r1, [r7, #8]
 80091aa:	603b      	str	r3, [r7, #0]
 80091ac:	4613      	mov	r3, r2
 80091ae:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80091b0:	f7fa fe7c 	bl	8003eac <HAL_GetTick>
 80091b4:	4602      	mov	r2, r0
 80091b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091b8:	1a9b      	subs	r3, r3, r2
 80091ba:	683a      	ldr	r2, [r7, #0]
 80091bc:	4413      	add	r3, r2
 80091be:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80091c0:	f7fa fe74 	bl	8003eac <HAL_GetTick>
 80091c4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80091c6:	4b39      	ldr	r3, [pc, #228]	; (80092ac <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	015b      	lsls	r3, r3, #5
 80091cc:	0d1b      	lsrs	r3, r3, #20
 80091ce:	69fa      	ldr	r2, [r7, #28]
 80091d0:	fb02 f303 	mul.w	r3, r2, r3
 80091d4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80091d6:	e054      	b.n	8009282 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80091d8:	683b      	ldr	r3, [r7, #0]
 80091da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091de:	d050      	beq.n	8009282 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80091e0:	f7fa fe64 	bl	8003eac <HAL_GetTick>
 80091e4:	4602      	mov	r2, r0
 80091e6:	69bb      	ldr	r3, [r7, #24]
 80091e8:	1ad3      	subs	r3, r2, r3
 80091ea:	69fa      	ldr	r2, [r7, #28]
 80091ec:	429a      	cmp	r2, r3
 80091ee:	d902      	bls.n	80091f6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80091f0:	69fb      	ldr	r3, [r7, #28]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d13d      	bne.n	8009272 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	685a      	ldr	r2, [r3, #4]
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009204:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	685b      	ldr	r3, [r3, #4]
 800920a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800920e:	d111      	bne.n	8009234 <SPI_WaitFlagStateUntilTimeout+0x94>
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	689b      	ldr	r3, [r3, #8]
 8009214:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009218:	d004      	beq.n	8009224 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	689b      	ldr	r3, [r3, #8]
 800921e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009222:	d107      	bne.n	8009234 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	681a      	ldr	r2, [r3, #0]
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009232:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009238:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800923c:	d10f      	bne.n	800925e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	681a      	ldr	r2, [r3, #0]
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800924c:	601a      	str	r2, [r3, #0]
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	681a      	ldr	r2, [r3, #0]
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800925c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	2201      	movs	r2, #1
 8009262:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	2200      	movs	r2, #0
 800926a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800926e:	2303      	movs	r3, #3
 8009270:	e017      	b.n	80092a2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009272:	697b      	ldr	r3, [r7, #20]
 8009274:	2b00      	cmp	r3, #0
 8009276:	d101      	bne.n	800927c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009278:	2300      	movs	r3, #0
 800927a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800927c:	697b      	ldr	r3, [r7, #20]
 800927e:	3b01      	subs	r3, #1
 8009280:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	689a      	ldr	r2, [r3, #8]
 8009288:	68bb      	ldr	r3, [r7, #8]
 800928a:	4013      	ands	r3, r2
 800928c:	68ba      	ldr	r2, [r7, #8]
 800928e:	429a      	cmp	r2, r3
 8009290:	bf0c      	ite	eq
 8009292:	2301      	moveq	r3, #1
 8009294:	2300      	movne	r3, #0
 8009296:	b2db      	uxtb	r3, r3
 8009298:	461a      	mov	r2, r3
 800929a:	79fb      	ldrb	r3, [r7, #7]
 800929c:	429a      	cmp	r2, r3
 800929e:	d19b      	bne.n	80091d8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80092a0:	2300      	movs	r3, #0
}
 80092a2:	4618      	mov	r0, r3
 80092a4:	3720      	adds	r7, #32
 80092a6:	46bd      	mov	sp, r7
 80092a8:	bd80      	pop	{r7, pc}
 80092aa:	bf00      	nop
 80092ac:	20000000 	.word	0x20000000

080092b0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b08a      	sub	sp, #40	; 0x28
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	60f8      	str	r0, [r7, #12]
 80092b8:	60b9      	str	r1, [r7, #8]
 80092ba:	607a      	str	r2, [r7, #4]
 80092bc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80092be:	2300      	movs	r3, #0
 80092c0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80092c2:	f7fa fdf3 	bl	8003eac <HAL_GetTick>
 80092c6:	4602      	mov	r2, r0
 80092c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092ca:	1a9b      	subs	r3, r3, r2
 80092cc:	683a      	ldr	r2, [r7, #0]
 80092ce:	4413      	add	r3, r2
 80092d0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80092d2:	f7fa fdeb 	bl	8003eac <HAL_GetTick>
 80092d6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	330c      	adds	r3, #12
 80092de:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80092e0:	4b3d      	ldr	r3, [pc, #244]	; (80093d8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80092e2:	681a      	ldr	r2, [r3, #0]
 80092e4:	4613      	mov	r3, r2
 80092e6:	009b      	lsls	r3, r3, #2
 80092e8:	4413      	add	r3, r2
 80092ea:	00da      	lsls	r2, r3, #3
 80092ec:	1ad3      	subs	r3, r2, r3
 80092ee:	0d1b      	lsrs	r3, r3, #20
 80092f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092f2:	fb02 f303 	mul.w	r3, r2, r3
 80092f6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80092f8:	e060      	b.n	80093bc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80092fa:	68bb      	ldr	r3, [r7, #8]
 80092fc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8009300:	d107      	bne.n	8009312 <SPI_WaitFifoStateUntilTimeout+0x62>
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d104      	bne.n	8009312 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8009308:	69fb      	ldr	r3, [r7, #28]
 800930a:	781b      	ldrb	r3, [r3, #0]
 800930c:	b2db      	uxtb	r3, r3
 800930e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8009310:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8009312:	683b      	ldr	r3, [r7, #0]
 8009314:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009318:	d050      	beq.n	80093bc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800931a:	f7fa fdc7 	bl	8003eac <HAL_GetTick>
 800931e:	4602      	mov	r2, r0
 8009320:	6a3b      	ldr	r3, [r7, #32]
 8009322:	1ad3      	subs	r3, r2, r3
 8009324:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009326:	429a      	cmp	r2, r3
 8009328:	d902      	bls.n	8009330 <SPI_WaitFifoStateUntilTimeout+0x80>
 800932a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800932c:	2b00      	cmp	r3, #0
 800932e:	d13d      	bne.n	80093ac <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	685a      	ldr	r2, [r3, #4]
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800933e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	685b      	ldr	r3, [r3, #4]
 8009344:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009348:	d111      	bne.n	800936e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	689b      	ldr	r3, [r3, #8]
 800934e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009352:	d004      	beq.n	800935e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	689b      	ldr	r3, [r3, #8]
 8009358:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800935c:	d107      	bne.n	800936e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	681a      	ldr	r2, [r3, #0]
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800936c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009372:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009376:	d10f      	bne.n	8009398 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	681a      	ldr	r2, [r3, #0]
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009386:	601a      	str	r2, [r3, #0]
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	681a      	ldr	r2, [r3, #0]
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009396:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	2201      	movs	r2, #1
 800939c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	2200      	movs	r2, #0
 80093a4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80093a8:	2303      	movs	r3, #3
 80093aa:	e010      	b.n	80093ce <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80093ac:	69bb      	ldr	r3, [r7, #24]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d101      	bne.n	80093b6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80093b2:	2300      	movs	r3, #0
 80093b4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80093b6:	69bb      	ldr	r3, [r7, #24]
 80093b8:	3b01      	subs	r3, #1
 80093ba:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	689a      	ldr	r2, [r3, #8]
 80093c2:	68bb      	ldr	r3, [r7, #8]
 80093c4:	4013      	ands	r3, r2
 80093c6:	687a      	ldr	r2, [r7, #4]
 80093c8:	429a      	cmp	r2, r3
 80093ca:	d196      	bne.n	80092fa <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80093cc:	2300      	movs	r3, #0
}
 80093ce:	4618      	mov	r0, r3
 80093d0:	3728      	adds	r7, #40	; 0x28
 80093d2:	46bd      	mov	sp, r7
 80093d4:	bd80      	pop	{r7, pc}
 80093d6:	bf00      	nop
 80093d8:	20000000 	.word	0x20000000

080093dc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b086      	sub	sp, #24
 80093e0:	af02      	add	r7, sp, #8
 80093e2:	60f8      	str	r0, [r7, #12]
 80093e4:	60b9      	str	r1, [r7, #8]
 80093e6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	685b      	ldr	r3, [r3, #4]
 80093ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80093f0:	d111      	bne.n	8009416 <SPI_EndRxTransaction+0x3a>
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	689b      	ldr	r3, [r3, #8]
 80093f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80093fa:	d004      	beq.n	8009406 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	689b      	ldr	r3, [r3, #8]
 8009400:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009404:	d107      	bne.n	8009416 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	681a      	ldr	r2, [r3, #0]
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009414:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	9300      	str	r3, [sp, #0]
 800941a:	68bb      	ldr	r3, [r7, #8]
 800941c:	2200      	movs	r2, #0
 800941e:	2180      	movs	r1, #128	; 0x80
 8009420:	68f8      	ldr	r0, [r7, #12]
 8009422:	f7ff febd 	bl	80091a0 <SPI_WaitFlagStateUntilTimeout>
 8009426:	4603      	mov	r3, r0
 8009428:	2b00      	cmp	r3, #0
 800942a:	d007      	beq.n	800943c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009430:	f043 0220 	orr.w	r2, r3, #32
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009438:	2303      	movs	r3, #3
 800943a:	e023      	b.n	8009484 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	685b      	ldr	r3, [r3, #4]
 8009440:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009444:	d11d      	bne.n	8009482 <SPI_EndRxTransaction+0xa6>
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	689b      	ldr	r3, [r3, #8]
 800944a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800944e:	d004      	beq.n	800945a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	689b      	ldr	r3, [r3, #8]
 8009454:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009458:	d113      	bne.n	8009482 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	9300      	str	r3, [sp, #0]
 800945e:	68bb      	ldr	r3, [r7, #8]
 8009460:	2200      	movs	r2, #0
 8009462:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8009466:	68f8      	ldr	r0, [r7, #12]
 8009468:	f7ff ff22 	bl	80092b0 <SPI_WaitFifoStateUntilTimeout>
 800946c:	4603      	mov	r3, r0
 800946e:	2b00      	cmp	r3, #0
 8009470:	d007      	beq.n	8009482 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009476:	f043 0220 	orr.w	r2, r3, #32
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800947e:	2303      	movs	r3, #3
 8009480:	e000      	b.n	8009484 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8009482:	2300      	movs	r3, #0
}
 8009484:	4618      	mov	r0, r3
 8009486:	3710      	adds	r7, #16
 8009488:	46bd      	mov	sp, r7
 800948a:	bd80      	pop	{r7, pc}

0800948c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b086      	sub	sp, #24
 8009490:	af02      	add	r7, sp, #8
 8009492:	60f8      	str	r0, [r7, #12]
 8009494:	60b9      	str	r1, [r7, #8]
 8009496:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	9300      	str	r3, [sp, #0]
 800949c:	68bb      	ldr	r3, [r7, #8]
 800949e:	2200      	movs	r2, #0
 80094a0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80094a4:	68f8      	ldr	r0, [r7, #12]
 80094a6:	f7ff ff03 	bl	80092b0 <SPI_WaitFifoStateUntilTimeout>
 80094aa:	4603      	mov	r3, r0
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d007      	beq.n	80094c0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80094b4:	f043 0220 	orr.w	r2, r3, #32
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80094bc:	2303      	movs	r3, #3
 80094be:	e027      	b.n	8009510 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	9300      	str	r3, [sp, #0]
 80094c4:	68bb      	ldr	r3, [r7, #8]
 80094c6:	2200      	movs	r2, #0
 80094c8:	2180      	movs	r1, #128	; 0x80
 80094ca:	68f8      	ldr	r0, [r7, #12]
 80094cc:	f7ff fe68 	bl	80091a0 <SPI_WaitFlagStateUntilTimeout>
 80094d0:	4603      	mov	r3, r0
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d007      	beq.n	80094e6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80094da:	f043 0220 	orr.w	r2, r3, #32
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80094e2:	2303      	movs	r3, #3
 80094e4:	e014      	b.n	8009510 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	9300      	str	r3, [sp, #0]
 80094ea:	68bb      	ldr	r3, [r7, #8]
 80094ec:	2200      	movs	r2, #0
 80094ee:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80094f2:	68f8      	ldr	r0, [r7, #12]
 80094f4:	f7ff fedc 	bl	80092b0 <SPI_WaitFifoStateUntilTimeout>
 80094f8:	4603      	mov	r3, r0
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d007      	beq.n	800950e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009502:	f043 0220 	orr.w	r2, r3, #32
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800950a:	2303      	movs	r3, #3
 800950c:	e000      	b.n	8009510 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800950e:	2300      	movs	r3, #0
}
 8009510:	4618      	mov	r0, r3
 8009512:	3710      	adds	r7, #16
 8009514:	46bd      	mov	sp, r7
 8009516:	bd80      	pop	{r7, pc}

08009518 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8009518:	b580      	push	{r7, lr}
 800951a:	b084      	sub	sp, #16
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009520:	f7fa fcc4 	bl	8003eac <HAL_GetTick>
 8009524:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	685a      	ldr	r2, [r3, #4]
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	f022 0220 	bic.w	r2, r2, #32
 8009534:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8009536:	68fa      	ldr	r2, [r7, #12]
 8009538:	2164      	movs	r1, #100	; 0x64
 800953a:	6878      	ldr	r0, [r7, #4]
 800953c:	f7ff ffa6 	bl	800948c <SPI_EndRxTxTransaction>
 8009540:	4603      	mov	r3, r0
 8009542:	2b00      	cmp	r3, #0
 8009544:	d005      	beq.n	8009552 <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800954a:	f043 0220 	orr.w	r2, r3, #32
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	661a      	str	r2, [r3, #96]	; 0x60
  }

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	689b      	ldr	r3, [r3, #8]
 8009558:	f003 0310 	and.w	r3, r3, #16
 800955c:	2b10      	cmp	r3, #16
 800955e:	d112      	bne.n	8009586 <SPI_CloseRxTx_ISR+0x6e>
  {
    hspi->State = HAL_SPI_STATE_READY;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2201      	movs	r2, #1
 8009564:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800956c:	f043 0202 	orr.w	r2, r3, #2
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	661a      	str	r2, [r3, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800957c:	609a      	str	r2, [r3, #8]
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 800957e:	6878      	ldr	r0, [r7, #4]
 8009580:	f7ff fb32 	bl	8008be8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8009584:	e020      	b.n	80095c8 <SPI_CloseRxTx_ISR+0xb0>
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800958a:	2b00      	cmp	r3, #0
 800958c:	d115      	bne.n	80095ba <SPI_CloseRxTx_ISR+0xa2>
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009594:	b2db      	uxtb	r3, r3
 8009596:	2b04      	cmp	r3, #4
 8009598:	d107      	bne.n	80095aa <SPI_CloseRxTx_ISR+0x92>
        hspi->State = HAL_SPI_STATE_READY;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	2201      	movs	r2, #1
 800959e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_RxCpltCallback(hspi);
 80095a2:	6878      	ldr	r0, [r7, #4]
 80095a4:	f7f9 ff6a 	bl	800347c <HAL_SPI_RxCpltCallback>
}
 80095a8:	e00e      	b.n	80095c8 <SPI_CloseRxTx_ISR+0xb0>
        hspi->State = HAL_SPI_STATE_READY;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	2201      	movs	r2, #1
 80095ae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 80095b2:	6878      	ldr	r0, [r7, #4]
 80095b4:	f7ff fb0e 	bl	8008bd4 <HAL_SPI_TxRxCpltCallback>
}
 80095b8:	e006      	b.n	80095c8 <SPI_CloseRxTx_ISR+0xb0>
      hspi->State = HAL_SPI_STATE_READY;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	2201      	movs	r2, #1
 80095be:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 80095c2:	6878      	ldr	r0, [r7, #4]
 80095c4:	f7ff fb10 	bl	8008be8 <HAL_SPI_ErrorCallback>
}
 80095c8:	bf00      	nop
 80095ca:	3710      	adds	r7, #16
 80095cc:	46bd      	mov	sp, r7
 80095ce:	bd80      	pop	{r7, pc}

080095d0 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b082      	sub	sp, #8
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	685a      	ldr	r2, [r3, #4]
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80095e6:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 80095e8:	f7fa fc60 	bl	8003eac <HAL_GetTick>
 80095ec:	4603      	mov	r3, r0
 80095ee:	461a      	mov	r2, r3
 80095f0:	2164      	movs	r1, #100	; 0x64
 80095f2:	6878      	ldr	r0, [r7, #4]
 80095f4:	f7ff fef2 	bl	80093dc <SPI_EndRxTransaction>
 80095f8:	4603      	mov	r3, r0
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d005      	beq.n	800960a <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009602:	f043 0220 	orr.w	r2, r3, #32
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	2201      	movs	r2, #1
 800960e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	689b      	ldr	r3, [r3, #8]
 8009618:	f003 0310 	and.w	r3, r3, #16
 800961c:	2b10      	cmp	r3, #16
 800961e:	d10e      	bne.n	800963e <SPI_CloseRx_ISR+0x6e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009624:	f043 0202 	orr.w	r2, r3, #2
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	661a      	str	r2, [r3, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8009634:	609a      	str	r2, [r3, #8]
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8009636:	6878      	ldr	r0, [r7, #4]
 8009638:	f7ff fad6 	bl	8008be8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800963c:	e00a      	b.n	8009654 <SPI_CloseRx_ISR+0x84>
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009642:	2b00      	cmp	r3, #0
 8009644:	d103      	bne.n	800964e <SPI_CloseRx_ISR+0x7e>
      HAL_SPI_RxCpltCallback(hspi);
 8009646:	6878      	ldr	r0, [r7, #4]
 8009648:	f7f9 ff18 	bl	800347c <HAL_SPI_RxCpltCallback>
}
 800964c:	e002      	b.n	8009654 <SPI_CloseRx_ISR+0x84>
      HAL_SPI_ErrorCallback(hspi);
 800964e:	6878      	ldr	r0, [r7, #4]
 8009650:	f7ff faca 	bl	8008be8 <HAL_SPI_ErrorCallback>
}
 8009654:	bf00      	nop
 8009656:	3708      	adds	r7, #8
 8009658:	46bd      	mov	sp, r7
 800965a:	bd80      	pop	{r7, pc}

0800965c <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b084      	sub	sp, #16
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009664:	f7fa fc22 	bl	8003eac <HAL_GetTick>
 8009668:	60f8      	str	r0, [r7, #12]

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	685a      	ldr	r2, [r3, #4]
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009678:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800967a:	68fa      	ldr	r2, [r7, #12]
 800967c:	2164      	movs	r1, #100	; 0x64
 800967e:	6878      	ldr	r0, [r7, #4]
 8009680:	f7ff ff04 	bl	800948c <SPI_EndRxTxTransaction>
 8009684:	4603      	mov	r3, r0
 8009686:	2b00      	cmp	r3, #0
 8009688:	d005      	beq.n	8009696 <SPI_CloseTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800968e:	f043 0220 	orr.w	r2, r3, #32
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	689b      	ldr	r3, [r3, #8]
 800969a:	2b00      	cmp	r3, #0
 800969c:	d10a      	bne.n	80096b4 <SPI_CloseTx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800969e:	2300      	movs	r3, #0
 80096a0:	60bb      	str	r3, [r7, #8]
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	68db      	ldr	r3, [r3, #12]
 80096a8:	60bb      	str	r3, [r7, #8]
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	689b      	ldr	r3, [r3, #8]
 80096b0:	60bb      	str	r3, [r7, #8]
 80096b2:	68bb      	ldr	r3, [r7, #8]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	2201      	movs	r2, #1
 80096b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d003      	beq.n	80096cc <SPI_CloseTx_ISR+0x70>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 80096c4:	6878      	ldr	r0, [r7, #4]
 80096c6:	f7ff fa8f 	bl	8008be8 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 80096ca:	e002      	b.n	80096d2 <SPI_CloseTx_ISR+0x76>
    HAL_SPI_TxCpltCallback(hspi);
 80096cc:	6878      	ldr	r0, [r7, #4]
 80096ce:	f7f9 fee9 	bl	80034a4 <HAL_SPI_TxCpltCallback>
}
 80096d2:	bf00      	nop
 80096d4:	3710      	adds	r7, #16
 80096d6:	46bd      	mov	sp, r7
 80096d8:	bd80      	pop	{r7, pc}

080096da <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80096da:	b580      	push	{r7, lr}
 80096dc:	b082      	sub	sp, #8
 80096de:	af00      	add	r7, sp, #0
 80096e0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d101      	bne.n	80096ec <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80096e8:	2301      	movs	r3, #1
 80096ea:	e049      	b.n	8009780 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80096f2:	b2db      	uxtb	r3, r3
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d106      	bne.n	8009706 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	2200      	movs	r2, #0
 80096fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009700:	6878      	ldr	r0, [r7, #4]
 8009702:	f7f8 f98d 	bl	8001a20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	2202      	movs	r2, #2
 800970a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681a      	ldr	r2, [r3, #0]
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	3304      	adds	r3, #4
 8009716:	4619      	mov	r1, r3
 8009718:	4610      	mov	r0, r2
 800971a:	f000 fa99 	bl	8009c50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	2201      	movs	r2, #1
 8009722:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	2201      	movs	r2, #1
 800972a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	2201      	movs	r2, #1
 8009732:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	2201      	movs	r2, #1
 800973a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	2201      	movs	r2, #1
 8009742:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	2201      	movs	r2, #1
 800974a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	2201      	movs	r2, #1
 8009752:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	2201      	movs	r2, #1
 800975a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	2201      	movs	r2, #1
 8009762:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	2201      	movs	r2, #1
 800976a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	2201      	movs	r2, #1
 8009772:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	2201      	movs	r2, #1
 800977a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800977e:	2300      	movs	r3, #0
}
 8009780:	4618      	mov	r0, r3
 8009782:	3708      	adds	r7, #8
 8009784:	46bd      	mov	sp, r7
 8009786:	bd80      	pop	{r7, pc}

08009788 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009788:	b480      	push	{r7}
 800978a:	b085      	sub	sp, #20
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009796:	b2db      	uxtb	r3, r3
 8009798:	2b01      	cmp	r3, #1
 800979a:	d001      	beq.n	80097a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800979c:	2301      	movs	r3, #1
 800979e:	e04f      	b.n	8009840 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	2202      	movs	r2, #2
 80097a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	68da      	ldr	r2, [r3, #12]
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	f042 0201 	orr.w	r2, r2, #1
 80097b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	4a23      	ldr	r2, [pc, #140]	; (800984c <HAL_TIM_Base_Start_IT+0xc4>)
 80097be:	4293      	cmp	r3, r2
 80097c0:	d01d      	beq.n	80097fe <HAL_TIM_Base_Start_IT+0x76>
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80097ca:	d018      	beq.n	80097fe <HAL_TIM_Base_Start_IT+0x76>
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	4a1f      	ldr	r2, [pc, #124]	; (8009850 <HAL_TIM_Base_Start_IT+0xc8>)
 80097d2:	4293      	cmp	r3, r2
 80097d4:	d013      	beq.n	80097fe <HAL_TIM_Base_Start_IT+0x76>
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	4a1e      	ldr	r2, [pc, #120]	; (8009854 <HAL_TIM_Base_Start_IT+0xcc>)
 80097dc:	4293      	cmp	r3, r2
 80097de:	d00e      	beq.n	80097fe <HAL_TIM_Base_Start_IT+0x76>
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	4a1c      	ldr	r2, [pc, #112]	; (8009858 <HAL_TIM_Base_Start_IT+0xd0>)
 80097e6:	4293      	cmp	r3, r2
 80097e8:	d009      	beq.n	80097fe <HAL_TIM_Base_Start_IT+0x76>
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	4a1b      	ldr	r2, [pc, #108]	; (800985c <HAL_TIM_Base_Start_IT+0xd4>)
 80097f0:	4293      	cmp	r3, r2
 80097f2:	d004      	beq.n	80097fe <HAL_TIM_Base_Start_IT+0x76>
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	4a19      	ldr	r2, [pc, #100]	; (8009860 <HAL_TIM_Base_Start_IT+0xd8>)
 80097fa:	4293      	cmp	r3, r2
 80097fc:	d115      	bne.n	800982a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	689a      	ldr	r2, [r3, #8]
 8009804:	4b17      	ldr	r3, [pc, #92]	; (8009864 <HAL_TIM_Base_Start_IT+0xdc>)
 8009806:	4013      	ands	r3, r2
 8009808:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	2b06      	cmp	r3, #6
 800980e:	d015      	beq.n	800983c <HAL_TIM_Base_Start_IT+0xb4>
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009816:	d011      	beq.n	800983c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	681a      	ldr	r2, [r3, #0]
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	f042 0201 	orr.w	r2, r2, #1
 8009826:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009828:	e008      	b.n	800983c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	681a      	ldr	r2, [r3, #0]
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	f042 0201 	orr.w	r2, r2, #1
 8009838:	601a      	str	r2, [r3, #0]
 800983a:	e000      	b.n	800983e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800983c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800983e:	2300      	movs	r3, #0
}
 8009840:	4618      	mov	r0, r3
 8009842:	3714      	adds	r7, #20
 8009844:	46bd      	mov	sp, r7
 8009846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984a:	4770      	bx	lr
 800984c:	40012c00 	.word	0x40012c00
 8009850:	40000400 	.word	0x40000400
 8009854:	40000800 	.word	0x40000800
 8009858:	40000c00 	.word	0x40000c00
 800985c:	40013400 	.word	0x40013400
 8009860:	40014000 	.word	0x40014000
 8009864:	00010007 	.word	0x00010007

08009868 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009868:	b580      	push	{r7, lr}
 800986a:	b084      	sub	sp, #16
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	68db      	ldr	r3, [r3, #12]
 8009876:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	691b      	ldr	r3, [r3, #16]
 800987e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009880:	68bb      	ldr	r3, [r7, #8]
 8009882:	f003 0302 	and.w	r3, r3, #2
 8009886:	2b00      	cmp	r3, #0
 8009888:	d020      	beq.n	80098cc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	f003 0302 	and.w	r3, r3, #2
 8009890:	2b00      	cmp	r3, #0
 8009892:	d01b      	beq.n	80098cc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	f06f 0202 	mvn.w	r2, #2
 800989c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	2201      	movs	r2, #1
 80098a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	699b      	ldr	r3, [r3, #24]
 80098aa:	f003 0303 	and.w	r3, r3, #3
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d003      	beq.n	80098ba <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80098b2:	6878      	ldr	r0, [r7, #4]
 80098b4:	f000 f9ad 	bl	8009c12 <HAL_TIM_IC_CaptureCallback>
 80098b8:	e005      	b.n	80098c6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80098ba:	6878      	ldr	r0, [r7, #4]
 80098bc:	f000 f99f 	bl	8009bfe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80098c0:	6878      	ldr	r0, [r7, #4]
 80098c2:	f000 f9b0 	bl	8009c26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	2200      	movs	r2, #0
 80098ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80098cc:	68bb      	ldr	r3, [r7, #8]
 80098ce:	f003 0304 	and.w	r3, r3, #4
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d020      	beq.n	8009918 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	f003 0304 	and.w	r3, r3, #4
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d01b      	beq.n	8009918 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	f06f 0204 	mvn.w	r2, #4
 80098e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	2202      	movs	r2, #2
 80098ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	699b      	ldr	r3, [r3, #24]
 80098f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d003      	beq.n	8009906 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80098fe:	6878      	ldr	r0, [r7, #4]
 8009900:	f000 f987 	bl	8009c12 <HAL_TIM_IC_CaptureCallback>
 8009904:	e005      	b.n	8009912 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009906:	6878      	ldr	r0, [r7, #4]
 8009908:	f000 f979 	bl	8009bfe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800990c:	6878      	ldr	r0, [r7, #4]
 800990e:	f000 f98a 	bl	8009c26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	2200      	movs	r2, #0
 8009916:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009918:	68bb      	ldr	r3, [r7, #8]
 800991a:	f003 0308 	and.w	r3, r3, #8
 800991e:	2b00      	cmp	r3, #0
 8009920:	d020      	beq.n	8009964 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	f003 0308 	and.w	r3, r3, #8
 8009928:	2b00      	cmp	r3, #0
 800992a:	d01b      	beq.n	8009964 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	f06f 0208 	mvn.w	r2, #8
 8009934:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	2204      	movs	r2, #4
 800993a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	69db      	ldr	r3, [r3, #28]
 8009942:	f003 0303 	and.w	r3, r3, #3
 8009946:	2b00      	cmp	r3, #0
 8009948:	d003      	beq.n	8009952 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800994a:	6878      	ldr	r0, [r7, #4]
 800994c:	f000 f961 	bl	8009c12 <HAL_TIM_IC_CaptureCallback>
 8009950:	e005      	b.n	800995e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009952:	6878      	ldr	r0, [r7, #4]
 8009954:	f000 f953 	bl	8009bfe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009958:	6878      	ldr	r0, [r7, #4]
 800995a:	f000 f964 	bl	8009c26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	2200      	movs	r2, #0
 8009962:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009964:	68bb      	ldr	r3, [r7, #8]
 8009966:	f003 0310 	and.w	r3, r3, #16
 800996a:	2b00      	cmp	r3, #0
 800996c:	d020      	beq.n	80099b0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	f003 0310 	and.w	r3, r3, #16
 8009974:	2b00      	cmp	r3, #0
 8009976:	d01b      	beq.n	80099b0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	f06f 0210 	mvn.w	r2, #16
 8009980:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	2208      	movs	r2, #8
 8009986:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	69db      	ldr	r3, [r3, #28]
 800998e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009992:	2b00      	cmp	r3, #0
 8009994:	d003      	beq.n	800999e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009996:	6878      	ldr	r0, [r7, #4]
 8009998:	f000 f93b 	bl	8009c12 <HAL_TIM_IC_CaptureCallback>
 800999c:	e005      	b.n	80099aa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800999e:	6878      	ldr	r0, [r7, #4]
 80099a0:	f000 f92d 	bl	8009bfe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80099a4:	6878      	ldr	r0, [r7, #4]
 80099a6:	f000 f93e 	bl	8009c26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	2200      	movs	r2, #0
 80099ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80099b0:	68bb      	ldr	r3, [r7, #8]
 80099b2:	f003 0301 	and.w	r3, r3, #1
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d00c      	beq.n	80099d4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	f003 0301 	and.w	r3, r3, #1
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d007      	beq.n	80099d4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	f06f 0201 	mvn.w	r2, #1
 80099cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80099ce:	6878      	ldr	r0, [r7, #4]
 80099d0:	f7f7 fe6b 	bl	80016aa <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80099d4:	68bb      	ldr	r3, [r7, #8]
 80099d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d00c      	beq.n	80099f8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d007      	beq.n	80099f8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80099f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80099f2:	6878      	ldr	r0, [r7, #4]
 80099f4:	f000 faf2 	bl	8009fdc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80099f8:	68bb      	ldr	r3, [r7, #8]
 80099fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d00c      	beq.n	8009a1c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d007      	beq.n	8009a1c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009a14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009a16:	6878      	ldr	r0, [r7, #4]
 8009a18:	f000 faea 	bl	8009ff0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009a1c:	68bb      	ldr	r3, [r7, #8]
 8009a1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d00c      	beq.n	8009a40 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d007      	beq.n	8009a40 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009a38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009a3a:	6878      	ldr	r0, [r7, #4]
 8009a3c:	f000 f8fd 	bl	8009c3a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009a40:	68bb      	ldr	r3, [r7, #8]
 8009a42:	f003 0320 	and.w	r3, r3, #32
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d00c      	beq.n	8009a64 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	f003 0320 	and.w	r3, r3, #32
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d007      	beq.n	8009a64 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	f06f 0220 	mvn.w	r2, #32
 8009a5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009a5e:	6878      	ldr	r0, [r7, #4]
 8009a60:	f000 fab2 	bl	8009fc8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009a64:	bf00      	nop
 8009a66:	3710      	adds	r7, #16
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	bd80      	pop	{r7, pc}

08009a6c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b084      	sub	sp, #16
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
 8009a74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009a76:	2300      	movs	r3, #0
 8009a78:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009a80:	2b01      	cmp	r3, #1
 8009a82:	d101      	bne.n	8009a88 <HAL_TIM_ConfigClockSource+0x1c>
 8009a84:	2302      	movs	r3, #2
 8009a86:	e0b6      	b.n	8009bf6 <HAL_TIM_ConfigClockSource+0x18a>
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	2201      	movs	r2, #1
 8009a8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	2202      	movs	r2, #2
 8009a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	689b      	ldr	r3, [r3, #8]
 8009a9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009aa0:	68bb      	ldr	r3, [r7, #8]
 8009aa2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009aa6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009aaa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009aac:	68bb      	ldr	r3, [r7, #8]
 8009aae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009ab2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	68ba      	ldr	r2, [r7, #8]
 8009aba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009abc:	683b      	ldr	r3, [r7, #0]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009ac4:	d03e      	beq.n	8009b44 <HAL_TIM_ConfigClockSource+0xd8>
 8009ac6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009aca:	f200 8087 	bhi.w	8009bdc <HAL_TIM_ConfigClockSource+0x170>
 8009ace:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ad2:	f000 8086 	beq.w	8009be2 <HAL_TIM_ConfigClockSource+0x176>
 8009ad6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ada:	d87f      	bhi.n	8009bdc <HAL_TIM_ConfigClockSource+0x170>
 8009adc:	2b70      	cmp	r3, #112	; 0x70
 8009ade:	d01a      	beq.n	8009b16 <HAL_TIM_ConfigClockSource+0xaa>
 8009ae0:	2b70      	cmp	r3, #112	; 0x70
 8009ae2:	d87b      	bhi.n	8009bdc <HAL_TIM_ConfigClockSource+0x170>
 8009ae4:	2b60      	cmp	r3, #96	; 0x60
 8009ae6:	d050      	beq.n	8009b8a <HAL_TIM_ConfigClockSource+0x11e>
 8009ae8:	2b60      	cmp	r3, #96	; 0x60
 8009aea:	d877      	bhi.n	8009bdc <HAL_TIM_ConfigClockSource+0x170>
 8009aec:	2b50      	cmp	r3, #80	; 0x50
 8009aee:	d03c      	beq.n	8009b6a <HAL_TIM_ConfigClockSource+0xfe>
 8009af0:	2b50      	cmp	r3, #80	; 0x50
 8009af2:	d873      	bhi.n	8009bdc <HAL_TIM_ConfigClockSource+0x170>
 8009af4:	2b40      	cmp	r3, #64	; 0x40
 8009af6:	d058      	beq.n	8009baa <HAL_TIM_ConfigClockSource+0x13e>
 8009af8:	2b40      	cmp	r3, #64	; 0x40
 8009afa:	d86f      	bhi.n	8009bdc <HAL_TIM_ConfigClockSource+0x170>
 8009afc:	2b30      	cmp	r3, #48	; 0x30
 8009afe:	d064      	beq.n	8009bca <HAL_TIM_ConfigClockSource+0x15e>
 8009b00:	2b30      	cmp	r3, #48	; 0x30
 8009b02:	d86b      	bhi.n	8009bdc <HAL_TIM_ConfigClockSource+0x170>
 8009b04:	2b20      	cmp	r3, #32
 8009b06:	d060      	beq.n	8009bca <HAL_TIM_ConfigClockSource+0x15e>
 8009b08:	2b20      	cmp	r3, #32
 8009b0a:	d867      	bhi.n	8009bdc <HAL_TIM_ConfigClockSource+0x170>
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d05c      	beq.n	8009bca <HAL_TIM_ConfigClockSource+0x15e>
 8009b10:	2b10      	cmp	r3, #16
 8009b12:	d05a      	beq.n	8009bca <HAL_TIM_ConfigClockSource+0x15e>
 8009b14:	e062      	b.n	8009bdc <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009b1a:	683b      	ldr	r3, [r7, #0]
 8009b1c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009b1e:	683b      	ldr	r3, [r7, #0]
 8009b20:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009b22:	683b      	ldr	r3, [r7, #0]
 8009b24:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009b26:	f000 f9a7 	bl	8009e78 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	689b      	ldr	r3, [r3, #8]
 8009b30:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009b32:	68bb      	ldr	r3, [r7, #8]
 8009b34:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009b38:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	68ba      	ldr	r2, [r7, #8]
 8009b40:	609a      	str	r2, [r3, #8]
      break;
 8009b42:	e04f      	b.n	8009be4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009b48:	683b      	ldr	r3, [r7, #0]
 8009b4a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009b4c:	683b      	ldr	r3, [r7, #0]
 8009b4e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009b50:	683b      	ldr	r3, [r7, #0]
 8009b52:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009b54:	f000 f990 	bl	8009e78 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	689a      	ldr	r2, [r3, #8]
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009b66:	609a      	str	r2, [r3, #8]
      break;
 8009b68:	e03c      	b.n	8009be4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009b6e:	683b      	ldr	r3, [r7, #0]
 8009b70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009b72:	683b      	ldr	r3, [r7, #0]
 8009b74:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009b76:	461a      	mov	r2, r3
 8009b78:	f000 f904 	bl	8009d84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	2150      	movs	r1, #80	; 0x50
 8009b82:	4618      	mov	r0, r3
 8009b84:	f000 f95d 	bl	8009e42 <TIM_ITRx_SetConfig>
      break;
 8009b88:	e02c      	b.n	8009be4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009b8e:	683b      	ldr	r3, [r7, #0]
 8009b90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009b92:	683b      	ldr	r3, [r7, #0]
 8009b94:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009b96:	461a      	mov	r2, r3
 8009b98:	f000 f923 	bl	8009de2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	2160      	movs	r1, #96	; 0x60
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	f000 f94d 	bl	8009e42 <TIM_ITRx_SetConfig>
      break;
 8009ba8:	e01c      	b.n	8009be4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009bae:	683b      	ldr	r3, [r7, #0]
 8009bb0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009bb2:	683b      	ldr	r3, [r7, #0]
 8009bb4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009bb6:	461a      	mov	r2, r3
 8009bb8:	f000 f8e4 	bl	8009d84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	2140      	movs	r1, #64	; 0x40
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	f000 f93d 	bl	8009e42 <TIM_ITRx_SetConfig>
      break;
 8009bc8:	e00c      	b.n	8009be4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681a      	ldr	r2, [r3, #0]
 8009bce:	683b      	ldr	r3, [r7, #0]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	4619      	mov	r1, r3
 8009bd4:	4610      	mov	r0, r2
 8009bd6:	f000 f934 	bl	8009e42 <TIM_ITRx_SetConfig>
      break;
 8009bda:	e003      	b.n	8009be4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8009bdc:	2301      	movs	r3, #1
 8009bde:	73fb      	strb	r3, [r7, #15]
      break;
 8009be0:	e000      	b.n	8009be4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8009be2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	2201      	movs	r2, #1
 8009be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	2200      	movs	r2, #0
 8009bf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009bf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	3710      	adds	r7, #16
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	bd80      	pop	{r7, pc}

08009bfe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009bfe:	b480      	push	{r7}
 8009c00:	b083      	sub	sp, #12
 8009c02:	af00      	add	r7, sp, #0
 8009c04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009c06:	bf00      	nop
 8009c08:	370c      	adds	r7, #12
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c10:	4770      	bx	lr

08009c12 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009c12:	b480      	push	{r7}
 8009c14:	b083      	sub	sp, #12
 8009c16:	af00      	add	r7, sp, #0
 8009c18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009c1a:	bf00      	nop
 8009c1c:	370c      	adds	r7, #12
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c24:	4770      	bx	lr

08009c26 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009c26:	b480      	push	{r7}
 8009c28:	b083      	sub	sp, #12
 8009c2a:	af00      	add	r7, sp, #0
 8009c2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009c2e:	bf00      	nop
 8009c30:	370c      	adds	r7, #12
 8009c32:	46bd      	mov	sp, r7
 8009c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c38:	4770      	bx	lr

08009c3a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009c3a:	b480      	push	{r7}
 8009c3c:	b083      	sub	sp, #12
 8009c3e:	af00      	add	r7, sp, #0
 8009c40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009c42:	bf00      	nop
 8009c44:	370c      	adds	r7, #12
 8009c46:	46bd      	mov	sp, r7
 8009c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4c:	4770      	bx	lr
	...

08009c50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009c50:	b480      	push	{r7}
 8009c52:	b085      	sub	sp, #20
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	6078      	str	r0, [r7, #4]
 8009c58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	4a40      	ldr	r2, [pc, #256]	; (8009d64 <TIM_Base_SetConfig+0x114>)
 8009c64:	4293      	cmp	r3, r2
 8009c66:	d013      	beq.n	8009c90 <TIM_Base_SetConfig+0x40>
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c6e:	d00f      	beq.n	8009c90 <TIM_Base_SetConfig+0x40>
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	4a3d      	ldr	r2, [pc, #244]	; (8009d68 <TIM_Base_SetConfig+0x118>)
 8009c74:	4293      	cmp	r3, r2
 8009c76:	d00b      	beq.n	8009c90 <TIM_Base_SetConfig+0x40>
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	4a3c      	ldr	r2, [pc, #240]	; (8009d6c <TIM_Base_SetConfig+0x11c>)
 8009c7c:	4293      	cmp	r3, r2
 8009c7e:	d007      	beq.n	8009c90 <TIM_Base_SetConfig+0x40>
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	4a3b      	ldr	r2, [pc, #236]	; (8009d70 <TIM_Base_SetConfig+0x120>)
 8009c84:	4293      	cmp	r3, r2
 8009c86:	d003      	beq.n	8009c90 <TIM_Base_SetConfig+0x40>
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	4a3a      	ldr	r2, [pc, #232]	; (8009d74 <TIM_Base_SetConfig+0x124>)
 8009c8c:	4293      	cmp	r3, r2
 8009c8e:	d108      	bne.n	8009ca2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009c98:	683b      	ldr	r3, [r7, #0]
 8009c9a:	685b      	ldr	r3, [r3, #4]
 8009c9c:	68fa      	ldr	r2, [r7, #12]
 8009c9e:	4313      	orrs	r3, r2
 8009ca0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	4a2f      	ldr	r2, [pc, #188]	; (8009d64 <TIM_Base_SetConfig+0x114>)
 8009ca6:	4293      	cmp	r3, r2
 8009ca8:	d01f      	beq.n	8009cea <TIM_Base_SetConfig+0x9a>
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009cb0:	d01b      	beq.n	8009cea <TIM_Base_SetConfig+0x9a>
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	4a2c      	ldr	r2, [pc, #176]	; (8009d68 <TIM_Base_SetConfig+0x118>)
 8009cb6:	4293      	cmp	r3, r2
 8009cb8:	d017      	beq.n	8009cea <TIM_Base_SetConfig+0x9a>
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	4a2b      	ldr	r2, [pc, #172]	; (8009d6c <TIM_Base_SetConfig+0x11c>)
 8009cbe:	4293      	cmp	r3, r2
 8009cc0:	d013      	beq.n	8009cea <TIM_Base_SetConfig+0x9a>
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	4a2a      	ldr	r2, [pc, #168]	; (8009d70 <TIM_Base_SetConfig+0x120>)
 8009cc6:	4293      	cmp	r3, r2
 8009cc8:	d00f      	beq.n	8009cea <TIM_Base_SetConfig+0x9a>
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	4a29      	ldr	r2, [pc, #164]	; (8009d74 <TIM_Base_SetConfig+0x124>)
 8009cce:	4293      	cmp	r3, r2
 8009cd0:	d00b      	beq.n	8009cea <TIM_Base_SetConfig+0x9a>
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	4a28      	ldr	r2, [pc, #160]	; (8009d78 <TIM_Base_SetConfig+0x128>)
 8009cd6:	4293      	cmp	r3, r2
 8009cd8:	d007      	beq.n	8009cea <TIM_Base_SetConfig+0x9a>
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	4a27      	ldr	r2, [pc, #156]	; (8009d7c <TIM_Base_SetConfig+0x12c>)
 8009cde:	4293      	cmp	r3, r2
 8009ce0:	d003      	beq.n	8009cea <TIM_Base_SetConfig+0x9a>
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	4a26      	ldr	r2, [pc, #152]	; (8009d80 <TIM_Base_SetConfig+0x130>)
 8009ce6:	4293      	cmp	r3, r2
 8009ce8:	d108      	bne.n	8009cfc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009cf0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009cf2:	683b      	ldr	r3, [r7, #0]
 8009cf4:	68db      	ldr	r3, [r3, #12]
 8009cf6:	68fa      	ldr	r2, [r7, #12]
 8009cf8:	4313      	orrs	r3, r2
 8009cfa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009d02:	683b      	ldr	r3, [r7, #0]
 8009d04:	695b      	ldr	r3, [r3, #20]
 8009d06:	4313      	orrs	r3, r2
 8009d08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	68fa      	ldr	r2, [r7, #12]
 8009d0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009d10:	683b      	ldr	r3, [r7, #0]
 8009d12:	689a      	ldr	r2, [r3, #8]
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009d18:	683b      	ldr	r3, [r7, #0]
 8009d1a:	681a      	ldr	r2, [r3, #0]
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	4a10      	ldr	r2, [pc, #64]	; (8009d64 <TIM_Base_SetConfig+0x114>)
 8009d24:	4293      	cmp	r3, r2
 8009d26:	d00f      	beq.n	8009d48 <TIM_Base_SetConfig+0xf8>
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	4a12      	ldr	r2, [pc, #72]	; (8009d74 <TIM_Base_SetConfig+0x124>)
 8009d2c:	4293      	cmp	r3, r2
 8009d2e:	d00b      	beq.n	8009d48 <TIM_Base_SetConfig+0xf8>
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	4a11      	ldr	r2, [pc, #68]	; (8009d78 <TIM_Base_SetConfig+0x128>)
 8009d34:	4293      	cmp	r3, r2
 8009d36:	d007      	beq.n	8009d48 <TIM_Base_SetConfig+0xf8>
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	4a10      	ldr	r2, [pc, #64]	; (8009d7c <TIM_Base_SetConfig+0x12c>)
 8009d3c:	4293      	cmp	r3, r2
 8009d3e:	d003      	beq.n	8009d48 <TIM_Base_SetConfig+0xf8>
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	4a0f      	ldr	r2, [pc, #60]	; (8009d80 <TIM_Base_SetConfig+0x130>)
 8009d44:	4293      	cmp	r3, r2
 8009d46:	d103      	bne.n	8009d50 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009d48:	683b      	ldr	r3, [r7, #0]
 8009d4a:	691a      	ldr	r2, [r3, #16]
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	2201      	movs	r2, #1
 8009d54:	615a      	str	r2, [r3, #20]
}
 8009d56:	bf00      	nop
 8009d58:	3714      	adds	r7, #20
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d60:	4770      	bx	lr
 8009d62:	bf00      	nop
 8009d64:	40012c00 	.word	0x40012c00
 8009d68:	40000400 	.word	0x40000400
 8009d6c:	40000800 	.word	0x40000800
 8009d70:	40000c00 	.word	0x40000c00
 8009d74:	40013400 	.word	0x40013400
 8009d78:	40014000 	.word	0x40014000
 8009d7c:	40014400 	.word	0x40014400
 8009d80:	40014800 	.word	0x40014800

08009d84 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009d84:	b480      	push	{r7}
 8009d86:	b087      	sub	sp, #28
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	60f8      	str	r0, [r7, #12]
 8009d8c:	60b9      	str	r1, [r7, #8]
 8009d8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	6a1b      	ldr	r3, [r3, #32]
 8009d94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	6a1b      	ldr	r3, [r3, #32]
 8009d9a:	f023 0201 	bic.w	r2, r3, #1
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	699b      	ldr	r3, [r3, #24]
 8009da6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009da8:	693b      	ldr	r3, [r7, #16]
 8009daa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009dae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	011b      	lsls	r3, r3, #4
 8009db4:	693a      	ldr	r2, [r7, #16]
 8009db6:	4313      	orrs	r3, r2
 8009db8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009dba:	697b      	ldr	r3, [r7, #20]
 8009dbc:	f023 030a 	bic.w	r3, r3, #10
 8009dc0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009dc2:	697a      	ldr	r2, [r7, #20]
 8009dc4:	68bb      	ldr	r3, [r7, #8]
 8009dc6:	4313      	orrs	r3, r2
 8009dc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	693a      	ldr	r2, [r7, #16]
 8009dce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	697a      	ldr	r2, [r7, #20]
 8009dd4:	621a      	str	r2, [r3, #32]
}
 8009dd6:	bf00      	nop
 8009dd8:	371c      	adds	r7, #28
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de0:	4770      	bx	lr

08009de2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009de2:	b480      	push	{r7}
 8009de4:	b087      	sub	sp, #28
 8009de6:	af00      	add	r7, sp, #0
 8009de8:	60f8      	str	r0, [r7, #12]
 8009dea:	60b9      	str	r1, [r7, #8]
 8009dec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	6a1b      	ldr	r3, [r3, #32]
 8009df2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	6a1b      	ldr	r3, [r3, #32]
 8009df8:	f023 0210 	bic.w	r2, r3, #16
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	699b      	ldr	r3, [r3, #24]
 8009e04:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009e06:	693b      	ldr	r3, [r7, #16]
 8009e08:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009e0c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	031b      	lsls	r3, r3, #12
 8009e12:	693a      	ldr	r2, [r7, #16]
 8009e14:	4313      	orrs	r3, r2
 8009e16:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009e18:	697b      	ldr	r3, [r7, #20]
 8009e1a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009e1e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009e20:	68bb      	ldr	r3, [r7, #8]
 8009e22:	011b      	lsls	r3, r3, #4
 8009e24:	697a      	ldr	r2, [r7, #20]
 8009e26:	4313      	orrs	r3, r2
 8009e28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	693a      	ldr	r2, [r7, #16]
 8009e2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	697a      	ldr	r2, [r7, #20]
 8009e34:	621a      	str	r2, [r3, #32]
}
 8009e36:	bf00      	nop
 8009e38:	371c      	adds	r7, #28
 8009e3a:	46bd      	mov	sp, r7
 8009e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e40:	4770      	bx	lr

08009e42 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009e42:	b480      	push	{r7}
 8009e44:	b085      	sub	sp, #20
 8009e46:	af00      	add	r7, sp, #0
 8009e48:	6078      	str	r0, [r7, #4]
 8009e4a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	689b      	ldr	r3, [r3, #8]
 8009e50:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e58:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009e5a:	683a      	ldr	r2, [r7, #0]
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	4313      	orrs	r3, r2
 8009e60:	f043 0307 	orr.w	r3, r3, #7
 8009e64:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	68fa      	ldr	r2, [r7, #12]
 8009e6a:	609a      	str	r2, [r3, #8]
}
 8009e6c:	bf00      	nop
 8009e6e:	3714      	adds	r7, #20
 8009e70:	46bd      	mov	sp, r7
 8009e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e76:	4770      	bx	lr

08009e78 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009e78:	b480      	push	{r7}
 8009e7a:	b087      	sub	sp, #28
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	60f8      	str	r0, [r7, #12]
 8009e80:	60b9      	str	r1, [r7, #8]
 8009e82:	607a      	str	r2, [r7, #4]
 8009e84:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	689b      	ldr	r3, [r3, #8]
 8009e8a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009e8c:	697b      	ldr	r3, [r7, #20]
 8009e8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009e92:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009e94:	683b      	ldr	r3, [r7, #0]
 8009e96:	021a      	lsls	r2, r3, #8
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	431a      	orrs	r2, r3
 8009e9c:	68bb      	ldr	r3, [r7, #8]
 8009e9e:	4313      	orrs	r3, r2
 8009ea0:	697a      	ldr	r2, [r7, #20]
 8009ea2:	4313      	orrs	r3, r2
 8009ea4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	697a      	ldr	r2, [r7, #20]
 8009eaa:	609a      	str	r2, [r3, #8]
}
 8009eac:	bf00      	nop
 8009eae:	371c      	adds	r7, #28
 8009eb0:	46bd      	mov	sp, r7
 8009eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb6:	4770      	bx	lr

08009eb8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009eb8:	b480      	push	{r7}
 8009eba:	b085      	sub	sp, #20
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]
 8009ec0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009ec8:	2b01      	cmp	r3, #1
 8009eca:	d101      	bne.n	8009ed0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009ecc:	2302      	movs	r3, #2
 8009ece:	e068      	b.n	8009fa2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	2201      	movs	r2, #1
 8009ed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	2202      	movs	r2, #2
 8009edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	685b      	ldr	r3, [r3, #4]
 8009ee6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	689b      	ldr	r3, [r3, #8]
 8009eee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	4a2e      	ldr	r2, [pc, #184]	; (8009fb0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009ef6:	4293      	cmp	r3, r2
 8009ef8:	d004      	beq.n	8009f04 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	4a2d      	ldr	r2, [pc, #180]	; (8009fb4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009f00:	4293      	cmp	r3, r2
 8009f02:	d108      	bne.n	8009f16 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009f0a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009f0c:	683b      	ldr	r3, [r7, #0]
 8009f0e:	685b      	ldr	r3, [r3, #4]
 8009f10:	68fa      	ldr	r2, [r7, #12]
 8009f12:	4313      	orrs	r3, r2
 8009f14:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f1c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009f1e:	683b      	ldr	r3, [r7, #0]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	68fa      	ldr	r2, [r7, #12]
 8009f24:	4313      	orrs	r3, r2
 8009f26:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	68fa      	ldr	r2, [r7, #12]
 8009f2e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	4a1e      	ldr	r2, [pc, #120]	; (8009fb0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009f36:	4293      	cmp	r3, r2
 8009f38:	d01d      	beq.n	8009f76 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f42:	d018      	beq.n	8009f76 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	4a1b      	ldr	r2, [pc, #108]	; (8009fb8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009f4a:	4293      	cmp	r3, r2
 8009f4c:	d013      	beq.n	8009f76 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	4a1a      	ldr	r2, [pc, #104]	; (8009fbc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009f54:	4293      	cmp	r3, r2
 8009f56:	d00e      	beq.n	8009f76 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	4a18      	ldr	r2, [pc, #96]	; (8009fc0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009f5e:	4293      	cmp	r3, r2
 8009f60:	d009      	beq.n	8009f76 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	4a13      	ldr	r2, [pc, #76]	; (8009fb4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009f68:	4293      	cmp	r3, r2
 8009f6a:	d004      	beq.n	8009f76 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	4a14      	ldr	r2, [pc, #80]	; (8009fc4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009f72:	4293      	cmp	r3, r2
 8009f74:	d10c      	bne.n	8009f90 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009f76:	68bb      	ldr	r3, [r7, #8]
 8009f78:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009f7c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009f7e:	683b      	ldr	r3, [r7, #0]
 8009f80:	689b      	ldr	r3, [r3, #8]
 8009f82:	68ba      	ldr	r2, [r7, #8]
 8009f84:	4313      	orrs	r3, r2
 8009f86:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	68ba      	ldr	r2, [r7, #8]
 8009f8e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	2201      	movs	r2, #1
 8009f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009fa0:	2300      	movs	r3, #0
}
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	3714      	adds	r7, #20
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fac:	4770      	bx	lr
 8009fae:	bf00      	nop
 8009fb0:	40012c00 	.word	0x40012c00
 8009fb4:	40013400 	.word	0x40013400
 8009fb8:	40000400 	.word	0x40000400
 8009fbc:	40000800 	.word	0x40000800
 8009fc0:	40000c00 	.word	0x40000c00
 8009fc4:	40014000 	.word	0x40014000

08009fc8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009fc8:	b480      	push	{r7}
 8009fca:	b083      	sub	sp, #12
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009fd0:	bf00      	nop
 8009fd2:	370c      	adds	r7, #12
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fda:	4770      	bx	lr

08009fdc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009fdc:	b480      	push	{r7}
 8009fde:	b083      	sub	sp, #12
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009fe4:	bf00      	nop
 8009fe6:	370c      	adds	r7, #12
 8009fe8:	46bd      	mov	sp, r7
 8009fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fee:	4770      	bx	lr

08009ff0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009ff0:	b480      	push	{r7}
 8009ff2:	b083      	sub	sp, #12
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009ff8:	bf00      	nop
 8009ffa:	370c      	adds	r7, #12
 8009ffc:	46bd      	mov	sp, r7
 8009ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a002:	4770      	bx	lr

0800a004 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a004:	b580      	push	{r7, lr}
 800a006:	b082      	sub	sp, #8
 800a008:	af00      	add	r7, sp, #0
 800a00a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d101      	bne.n	800a016 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a012:	2301      	movs	r3, #1
 800a014:	e042      	b.n	800a09c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d106      	bne.n	800a02e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	2200      	movs	r2, #0
 800a024:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a028:	6878      	ldr	r0, [r7, #4]
 800a02a:	f000 f83b 	bl	800a0a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	2224      	movs	r2, #36	; 0x24
 800a032:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	681a      	ldr	r2, [r3, #0]
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	f022 0201 	bic.w	r2, r2, #1
 800a044:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d002      	beq.n	800a054 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800a04e:	6878      	ldr	r0, [r7, #4]
 800a050:	f000 fc86 	bl	800a960 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a054:	6878      	ldr	r0, [r7, #4]
 800a056:	f000 f987 	bl	800a368 <UART_SetConfig>
 800a05a:	4603      	mov	r3, r0
 800a05c:	2b01      	cmp	r3, #1
 800a05e:	d101      	bne.n	800a064 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800a060:	2301      	movs	r3, #1
 800a062:	e01b      	b.n	800a09c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	685a      	ldr	r2, [r3, #4]
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a072:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	689a      	ldr	r2, [r3, #8]
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a082:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	681a      	ldr	r2, [r3, #0]
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	f042 0201 	orr.w	r2, r2, #1
 800a092:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a094:	6878      	ldr	r0, [r7, #4]
 800a096:	f000 fd05 	bl	800aaa4 <UART_CheckIdleState>
 800a09a:	4603      	mov	r3, r0
}
 800a09c:	4618      	mov	r0, r3
 800a09e:	3708      	adds	r7, #8
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	bd80      	pop	{r7, pc}

0800a0a4 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800a0a4:	b480      	push	{r7}
 800a0a6:	b083      	sub	sp, #12
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 800a0ac:	bf00      	nop
 800a0ae:	370c      	adds	r7, #12
 800a0b0:	46bd      	mov	sp, r7
 800a0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b6:	4770      	bx	lr

0800a0b8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a0b8:	b580      	push	{r7, lr}
 800a0ba:	b08a      	sub	sp, #40	; 0x28
 800a0bc:	af02      	add	r7, sp, #8
 800a0be:	60f8      	str	r0, [r7, #12]
 800a0c0:	60b9      	str	r1, [r7, #8]
 800a0c2:	603b      	str	r3, [r7, #0]
 800a0c4:	4613      	mov	r3, r2
 800a0c6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0ce:	2b20      	cmp	r3, #32
 800a0d0:	d17c      	bne.n	800a1cc <HAL_UART_Transmit+0x114>
  {
    if ((pData == NULL) || (Size == 0U))
 800a0d2:	68bb      	ldr	r3, [r7, #8]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d002      	beq.n	800a0de <HAL_UART_Transmit+0x26>
 800a0d8:	88fb      	ldrh	r3, [r7, #6]
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d101      	bne.n	800a0e2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800a0de:	2301      	movs	r3, #1
 800a0e0:	e075      	b.n	800a1ce <HAL_UART_Transmit+0x116>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	2200      	movs	r2, #0
 800a0e6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	2221      	movs	r2, #33	; 0x21
 800a0ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a0f2:	f7f9 fedb 	bl	8003eac <HAL_GetTick>
 800a0f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	88fa      	ldrh	r2, [r7, #6]
 800a0fc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	88fa      	ldrh	r2, [r7, #6]
 800a104:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	689b      	ldr	r3, [r3, #8]
 800a10c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a110:	d108      	bne.n	800a124 <HAL_UART_Transmit+0x6c>
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	691b      	ldr	r3, [r3, #16]
 800a116:	2b00      	cmp	r3, #0
 800a118:	d104      	bne.n	800a124 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800a11a:	2300      	movs	r3, #0
 800a11c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a11e:	68bb      	ldr	r3, [r7, #8]
 800a120:	61bb      	str	r3, [r7, #24]
 800a122:	e003      	b.n	800a12c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800a124:	68bb      	ldr	r3, [r7, #8]
 800a126:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a128:	2300      	movs	r3, #0
 800a12a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a12c:	e031      	b.n	800a192 <HAL_UART_Transmit+0xda>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a12e:	683b      	ldr	r3, [r7, #0]
 800a130:	9300      	str	r3, [sp, #0]
 800a132:	697b      	ldr	r3, [r7, #20]
 800a134:	2200      	movs	r2, #0
 800a136:	2180      	movs	r1, #128	; 0x80
 800a138:	68f8      	ldr	r0, [r7, #12]
 800a13a:	f000 fd5d 	bl	800abf8 <UART_WaitOnFlagUntilTimeout>
 800a13e:	4603      	mov	r3, r0
 800a140:	2b00      	cmp	r3, #0
 800a142:	d005      	beq.n	800a150 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	2220      	movs	r2, #32
 800a148:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800a14c:	2303      	movs	r3, #3
 800a14e:	e03e      	b.n	800a1ce <HAL_UART_Transmit+0x116>
      }
      if (pdata8bits == NULL)
 800a150:	69fb      	ldr	r3, [r7, #28]
 800a152:	2b00      	cmp	r3, #0
 800a154:	d10b      	bne.n	800a16e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a156:	69bb      	ldr	r3, [r7, #24]
 800a158:	881a      	ldrh	r2, [r3, #0]
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a162:	b292      	uxth	r2, r2
 800a164:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a166:	69bb      	ldr	r3, [r7, #24]
 800a168:	3302      	adds	r3, #2
 800a16a:	61bb      	str	r3, [r7, #24]
 800a16c:	e008      	b.n	800a180 <HAL_UART_Transmit+0xc8>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a16e:	69fb      	ldr	r3, [r7, #28]
 800a170:	781a      	ldrb	r2, [r3, #0]
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	b292      	uxth	r2, r2
 800a178:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a17a:	69fb      	ldr	r3, [r7, #28]
 800a17c:	3301      	adds	r3, #1
 800a17e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a186:	b29b      	uxth	r3, r3
 800a188:	3b01      	subs	r3, #1
 800a18a:	b29a      	uxth	r2, r3
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a198:	b29b      	uxth	r3, r3
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d1c7      	bne.n	800a12e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a19e:	683b      	ldr	r3, [r7, #0]
 800a1a0:	9300      	str	r3, [sp, #0]
 800a1a2:	697b      	ldr	r3, [r7, #20]
 800a1a4:	2200      	movs	r2, #0
 800a1a6:	2140      	movs	r1, #64	; 0x40
 800a1a8:	68f8      	ldr	r0, [r7, #12]
 800a1aa:	f000 fd25 	bl	800abf8 <UART_WaitOnFlagUntilTimeout>
 800a1ae:	4603      	mov	r3, r0
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d005      	beq.n	800a1c0 <HAL_UART_Transmit+0x108>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	2220      	movs	r2, #32
 800a1b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800a1bc:	2303      	movs	r3, #3
 800a1be:	e006      	b.n	800a1ce <HAL_UART_Transmit+0x116>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	2220      	movs	r2, #32
 800a1c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800a1c8:	2300      	movs	r3, #0
 800a1ca:	e000      	b.n	800a1ce <HAL_UART_Transmit+0x116>
  }
  else
  {
    return HAL_BUSY;
 800a1cc:	2302      	movs	r3, #2
  }
}
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	3720      	adds	r7, #32
 800a1d2:	46bd      	mov	sp, r7
 800a1d4:	bd80      	pop	{r7, pc}

0800a1d6 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a1d6:	b580      	push	{r7, lr}
 800a1d8:	b08a      	sub	sp, #40	; 0x28
 800a1da:	af02      	add	r7, sp, #8
 800a1dc:	60f8      	str	r0, [r7, #12]
 800a1de:	60b9      	str	r1, [r7, #8]
 800a1e0:	603b      	str	r3, [r7, #0]
 800a1e2:	4613      	mov	r3, r2
 800a1e4:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a1ec:	2b20      	cmp	r3, #32
 800a1ee:	f040 80b6 	bne.w	800a35e <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 800a1f2:	68bb      	ldr	r3, [r7, #8]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d002      	beq.n	800a1fe <HAL_UART_Receive+0x28>
 800a1f8:	88fb      	ldrh	r3, [r7, #6]
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d101      	bne.n	800a202 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800a1fe:	2301      	movs	r3, #1
 800a200:	e0ae      	b.n	800a360 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	2200      	movs	r2, #0
 800a206:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	2222      	movs	r2, #34	; 0x22
 800a20e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	2200      	movs	r2, #0
 800a216:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a218:	f7f9 fe48 	bl	8003eac <HAL_GetTick>
 800a21c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	88fa      	ldrh	r2, [r7, #6]
 800a222:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	88fa      	ldrh	r2, [r7, #6]
 800a22a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	689b      	ldr	r3, [r3, #8]
 800a232:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a236:	d10e      	bne.n	800a256 <HAL_UART_Receive+0x80>
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	691b      	ldr	r3, [r3, #16]
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d105      	bne.n	800a24c <HAL_UART_Receive+0x76>
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	f240 12ff 	movw	r2, #511	; 0x1ff
 800a246:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a24a:	e02d      	b.n	800a2a8 <HAL_UART_Receive+0xd2>
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	22ff      	movs	r2, #255	; 0xff
 800a250:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a254:	e028      	b.n	800a2a8 <HAL_UART_Receive+0xd2>
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	689b      	ldr	r3, [r3, #8]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d10d      	bne.n	800a27a <HAL_UART_Receive+0xa4>
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	691b      	ldr	r3, [r3, #16]
 800a262:	2b00      	cmp	r3, #0
 800a264:	d104      	bne.n	800a270 <HAL_UART_Receive+0x9a>
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	22ff      	movs	r2, #255	; 0xff
 800a26a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a26e:	e01b      	b.n	800a2a8 <HAL_UART_Receive+0xd2>
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	227f      	movs	r2, #127	; 0x7f
 800a274:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a278:	e016      	b.n	800a2a8 <HAL_UART_Receive+0xd2>
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	689b      	ldr	r3, [r3, #8]
 800a27e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a282:	d10d      	bne.n	800a2a0 <HAL_UART_Receive+0xca>
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	691b      	ldr	r3, [r3, #16]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d104      	bne.n	800a296 <HAL_UART_Receive+0xc0>
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	227f      	movs	r2, #127	; 0x7f
 800a290:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a294:	e008      	b.n	800a2a8 <HAL_UART_Receive+0xd2>
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	223f      	movs	r2, #63	; 0x3f
 800a29a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a29e:	e003      	b.n	800a2a8 <HAL_UART_Receive+0xd2>
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	2200      	movs	r2, #0
 800a2a4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a2ae:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	689b      	ldr	r3, [r3, #8]
 800a2b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a2b8:	d108      	bne.n	800a2cc <HAL_UART_Receive+0xf6>
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	691b      	ldr	r3, [r3, #16]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d104      	bne.n	800a2cc <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a2c6:	68bb      	ldr	r3, [r7, #8]
 800a2c8:	61bb      	str	r3, [r7, #24]
 800a2ca:	e003      	b.n	800a2d4 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800a2cc:	68bb      	ldr	r3, [r7, #8]
 800a2ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800a2d4:	e037      	b.n	800a346 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800a2d6:	683b      	ldr	r3, [r7, #0]
 800a2d8:	9300      	str	r3, [sp, #0]
 800a2da:	697b      	ldr	r3, [r7, #20]
 800a2dc:	2200      	movs	r2, #0
 800a2de:	2120      	movs	r1, #32
 800a2e0:	68f8      	ldr	r0, [r7, #12]
 800a2e2:	f000 fc89 	bl	800abf8 <UART_WaitOnFlagUntilTimeout>
 800a2e6:	4603      	mov	r3, r0
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d005      	beq.n	800a2f8 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	2220      	movs	r2, #32
 800a2f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 800a2f4:	2303      	movs	r3, #3
 800a2f6:	e033      	b.n	800a360 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 800a2f8:	69fb      	ldr	r3, [r7, #28]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d10c      	bne.n	800a318 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800a304:	b29a      	uxth	r2, r3
 800a306:	8a7b      	ldrh	r3, [r7, #18]
 800a308:	4013      	ands	r3, r2
 800a30a:	b29a      	uxth	r2, r3
 800a30c:	69bb      	ldr	r3, [r7, #24]
 800a30e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800a310:	69bb      	ldr	r3, [r7, #24]
 800a312:	3302      	adds	r3, #2
 800a314:	61bb      	str	r3, [r7, #24]
 800a316:	e00d      	b.n	800a334 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800a31e:	b29b      	uxth	r3, r3
 800a320:	b2da      	uxtb	r2, r3
 800a322:	8a7b      	ldrh	r3, [r7, #18]
 800a324:	b2db      	uxtb	r3, r3
 800a326:	4013      	ands	r3, r2
 800a328:	b2da      	uxtb	r2, r3
 800a32a:	69fb      	ldr	r3, [r7, #28]
 800a32c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800a32e:	69fb      	ldr	r3, [r7, #28]
 800a330:	3301      	adds	r3, #1
 800a332:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a33a:	b29b      	uxth	r3, r3
 800a33c:	3b01      	subs	r3, #1
 800a33e:	b29a      	uxth	r2, r3
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a34c:	b29b      	uxth	r3, r3
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d1c1      	bne.n	800a2d6 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	2220      	movs	r2, #32
 800a356:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 800a35a:	2300      	movs	r3, #0
 800a35c:	e000      	b.n	800a360 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 800a35e:	2302      	movs	r3, #2
  }
}
 800a360:	4618      	mov	r0, r3
 800a362:	3720      	adds	r7, #32
 800a364:	46bd      	mov	sp, r7
 800a366:	bd80      	pop	{r7, pc}

0800a368 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a368:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a36c:	b08c      	sub	sp, #48	; 0x30
 800a36e:	af00      	add	r7, sp, #0
 800a370:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a372:	2300      	movs	r3, #0
 800a374:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a378:	697b      	ldr	r3, [r7, #20]
 800a37a:	689a      	ldr	r2, [r3, #8]
 800a37c:	697b      	ldr	r3, [r7, #20]
 800a37e:	691b      	ldr	r3, [r3, #16]
 800a380:	431a      	orrs	r2, r3
 800a382:	697b      	ldr	r3, [r7, #20]
 800a384:	695b      	ldr	r3, [r3, #20]
 800a386:	431a      	orrs	r2, r3
 800a388:	697b      	ldr	r3, [r7, #20]
 800a38a:	69db      	ldr	r3, [r3, #28]
 800a38c:	4313      	orrs	r3, r2
 800a38e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a390:	697b      	ldr	r3, [r7, #20]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	681a      	ldr	r2, [r3, #0]
 800a396:	4baa      	ldr	r3, [pc, #680]	; (800a640 <UART_SetConfig+0x2d8>)
 800a398:	4013      	ands	r3, r2
 800a39a:	697a      	ldr	r2, [r7, #20]
 800a39c:	6812      	ldr	r2, [r2, #0]
 800a39e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a3a0:	430b      	orrs	r3, r1
 800a3a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a3a4:	697b      	ldr	r3, [r7, #20]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	685b      	ldr	r3, [r3, #4]
 800a3aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a3ae:	697b      	ldr	r3, [r7, #20]
 800a3b0:	68da      	ldr	r2, [r3, #12]
 800a3b2:	697b      	ldr	r3, [r7, #20]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	430a      	orrs	r2, r1
 800a3b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a3ba:	697b      	ldr	r3, [r7, #20]
 800a3bc:	699b      	ldr	r3, [r3, #24]
 800a3be:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a3c0:	697b      	ldr	r3, [r7, #20]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	4a9f      	ldr	r2, [pc, #636]	; (800a644 <UART_SetConfig+0x2dc>)
 800a3c6:	4293      	cmp	r3, r2
 800a3c8:	d004      	beq.n	800a3d4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a3ca:	697b      	ldr	r3, [r7, #20]
 800a3cc:	6a1b      	ldr	r3, [r3, #32]
 800a3ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a3d0:	4313      	orrs	r3, r2
 800a3d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a3d4:	697b      	ldr	r3, [r7, #20]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	689b      	ldr	r3, [r3, #8]
 800a3da:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800a3de:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800a3e2:	697a      	ldr	r2, [r7, #20]
 800a3e4:	6812      	ldr	r2, [r2, #0]
 800a3e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a3e8:	430b      	orrs	r3, r1
 800a3ea:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a3ec:	697b      	ldr	r3, [r7, #20]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3f2:	f023 010f 	bic.w	r1, r3, #15
 800a3f6:	697b      	ldr	r3, [r7, #20]
 800a3f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a3fa:	697b      	ldr	r3, [r7, #20]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	430a      	orrs	r2, r1
 800a400:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a402:	697b      	ldr	r3, [r7, #20]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	4a90      	ldr	r2, [pc, #576]	; (800a648 <UART_SetConfig+0x2e0>)
 800a408:	4293      	cmp	r3, r2
 800a40a:	d125      	bne.n	800a458 <UART_SetConfig+0xf0>
 800a40c:	4b8f      	ldr	r3, [pc, #572]	; (800a64c <UART_SetConfig+0x2e4>)
 800a40e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a412:	f003 0303 	and.w	r3, r3, #3
 800a416:	2b03      	cmp	r3, #3
 800a418:	d81a      	bhi.n	800a450 <UART_SetConfig+0xe8>
 800a41a:	a201      	add	r2, pc, #4	; (adr r2, 800a420 <UART_SetConfig+0xb8>)
 800a41c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a420:	0800a431 	.word	0x0800a431
 800a424:	0800a441 	.word	0x0800a441
 800a428:	0800a439 	.word	0x0800a439
 800a42c:	0800a449 	.word	0x0800a449
 800a430:	2301      	movs	r3, #1
 800a432:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a436:	e116      	b.n	800a666 <UART_SetConfig+0x2fe>
 800a438:	2302      	movs	r3, #2
 800a43a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a43e:	e112      	b.n	800a666 <UART_SetConfig+0x2fe>
 800a440:	2304      	movs	r3, #4
 800a442:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a446:	e10e      	b.n	800a666 <UART_SetConfig+0x2fe>
 800a448:	2308      	movs	r3, #8
 800a44a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a44e:	e10a      	b.n	800a666 <UART_SetConfig+0x2fe>
 800a450:	2310      	movs	r3, #16
 800a452:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a456:	e106      	b.n	800a666 <UART_SetConfig+0x2fe>
 800a458:	697b      	ldr	r3, [r7, #20]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	4a7c      	ldr	r2, [pc, #496]	; (800a650 <UART_SetConfig+0x2e8>)
 800a45e:	4293      	cmp	r3, r2
 800a460:	d138      	bne.n	800a4d4 <UART_SetConfig+0x16c>
 800a462:	4b7a      	ldr	r3, [pc, #488]	; (800a64c <UART_SetConfig+0x2e4>)
 800a464:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a468:	f003 030c 	and.w	r3, r3, #12
 800a46c:	2b0c      	cmp	r3, #12
 800a46e:	d82d      	bhi.n	800a4cc <UART_SetConfig+0x164>
 800a470:	a201      	add	r2, pc, #4	; (adr r2, 800a478 <UART_SetConfig+0x110>)
 800a472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a476:	bf00      	nop
 800a478:	0800a4ad 	.word	0x0800a4ad
 800a47c:	0800a4cd 	.word	0x0800a4cd
 800a480:	0800a4cd 	.word	0x0800a4cd
 800a484:	0800a4cd 	.word	0x0800a4cd
 800a488:	0800a4bd 	.word	0x0800a4bd
 800a48c:	0800a4cd 	.word	0x0800a4cd
 800a490:	0800a4cd 	.word	0x0800a4cd
 800a494:	0800a4cd 	.word	0x0800a4cd
 800a498:	0800a4b5 	.word	0x0800a4b5
 800a49c:	0800a4cd 	.word	0x0800a4cd
 800a4a0:	0800a4cd 	.word	0x0800a4cd
 800a4a4:	0800a4cd 	.word	0x0800a4cd
 800a4a8:	0800a4c5 	.word	0x0800a4c5
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a4b2:	e0d8      	b.n	800a666 <UART_SetConfig+0x2fe>
 800a4b4:	2302      	movs	r3, #2
 800a4b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a4ba:	e0d4      	b.n	800a666 <UART_SetConfig+0x2fe>
 800a4bc:	2304      	movs	r3, #4
 800a4be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a4c2:	e0d0      	b.n	800a666 <UART_SetConfig+0x2fe>
 800a4c4:	2308      	movs	r3, #8
 800a4c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a4ca:	e0cc      	b.n	800a666 <UART_SetConfig+0x2fe>
 800a4cc:	2310      	movs	r3, #16
 800a4ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a4d2:	e0c8      	b.n	800a666 <UART_SetConfig+0x2fe>
 800a4d4:	697b      	ldr	r3, [r7, #20]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	4a5e      	ldr	r2, [pc, #376]	; (800a654 <UART_SetConfig+0x2ec>)
 800a4da:	4293      	cmp	r3, r2
 800a4dc:	d125      	bne.n	800a52a <UART_SetConfig+0x1c2>
 800a4de:	4b5b      	ldr	r3, [pc, #364]	; (800a64c <UART_SetConfig+0x2e4>)
 800a4e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4e4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a4e8:	2b30      	cmp	r3, #48	; 0x30
 800a4ea:	d016      	beq.n	800a51a <UART_SetConfig+0x1b2>
 800a4ec:	2b30      	cmp	r3, #48	; 0x30
 800a4ee:	d818      	bhi.n	800a522 <UART_SetConfig+0x1ba>
 800a4f0:	2b20      	cmp	r3, #32
 800a4f2:	d00a      	beq.n	800a50a <UART_SetConfig+0x1a2>
 800a4f4:	2b20      	cmp	r3, #32
 800a4f6:	d814      	bhi.n	800a522 <UART_SetConfig+0x1ba>
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d002      	beq.n	800a502 <UART_SetConfig+0x19a>
 800a4fc:	2b10      	cmp	r3, #16
 800a4fe:	d008      	beq.n	800a512 <UART_SetConfig+0x1aa>
 800a500:	e00f      	b.n	800a522 <UART_SetConfig+0x1ba>
 800a502:	2300      	movs	r3, #0
 800a504:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a508:	e0ad      	b.n	800a666 <UART_SetConfig+0x2fe>
 800a50a:	2302      	movs	r3, #2
 800a50c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a510:	e0a9      	b.n	800a666 <UART_SetConfig+0x2fe>
 800a512:	2304      	movs	r3, #4
 800a514:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a518:	e0a5      	b.n	800a666 <UART_SetConfig+0x2fe>
 800a51a:	2308      	movs	r3, #8
 800a51c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a520:	e0a1      	b.n	800a666 <UART_SetConfig+0x2fe>
 800a522:	2310      	movs	r3, #16
 800a524:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a528:	e09d      	b.n	800a666 <UART_SetConfig+0x2fe>
 800a52a:	697b      	ldr	r3, [r7, #20]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	4a4a      	ldr	r2, [pc, #296]	; (800a658 <UART_SetConfig+0x2f0>)
 800a530:	4293      	cmp	r3, r2
 800a532:	d125      	bne.n	800a580 <UART_SetConfig+0x218>
 800a534:	4b45      	ldr	r3, [pc, #276]	; (800a64c <UART_SetConfig+0x2e4>)
 800a536:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a53a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a53e:	2bc0      	cmp	r3, #192	; 0xc0
 800a540:	d016      	beq.n	800a570 <UART_SetConfig+0x208>
 800a542:	2bc0      	cmp	r3, #192	; 0xc0
 800a544:	d818      	bhi.n	800a578 <UART_SetConfig+0x210>
 800a546:	2b80      	cmp	r3, #128	; 0x80
 800a548:	d00a      	beq.n	800a560 <UART_SetConfig+0x1f8>
 800a54a:	2b80      	cmp	r3, #128	; 0x80
 800a54c:	d814      	bhi.n	800a578 <UART_SetConfig+0x210>
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d002      	beq.n	800a558 <UART_SetConfig+0x1f0>
 800a552:	2b40      	cmp	r3, #64	; 0x40
 800a554:	d008      	beq.n	800a568 <UART_SetConfig+0x200>
 800a556:	e00f      	b.n	800a578 <UART_SetConfig+0x210>
 800a558:	2300      	movs	r3, #0
 800a55a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a55e:	e082      	b.n	800a666 <UART_SetConfig+0x2fe>
 800a560:	2302      	movs	r3, #2
 800a562:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a566:	e07e      	b.n	800a666 <UART_SetConfig+0x2fe>
 800a568:	2304      	movs	r3, #4
 800a56a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a56e:	e07a      	b.n	800a666 <UART_SetConfig+0x2fe>
 800a570:	2308      	movs	r3, #8
 800a572:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a576:	e076      	b.n	800a666 <UART_SetConfig+0x2fe>
 800a578:	2310      	movs	r3, #16
 800a57a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a57e:	e072      	b.n	800a666 <UART_SetConfig+0x2fe>
 800a580:	697b      	ldr	r3, [r7, #20]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	4a35      	ldr	r2, [pc, #212]	; (800a65c <UART_SetConfig+0x2f4>)
 800a586:	4293      	cmp	r3, r2
 800a588:	d12a      	bne.n	800a5e0 <UART_SetConfig+0x278>
 800a58a:	4b30      	ldr	r3, [pc, #192]	; (800a64c <UART_SetConfig+0x2e4>)
 800a58c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a590:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a594:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a598:	d01a      	beq.n	800a5d0 <UART_SetConfig+0x268>
 800a59a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a59e:	d81b      	bhi.n	800a5d8 <UART_SetConfig+0x270>
 800a5a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a5a4:	d00c      	beq.n	800a5c0 <UART_SetConfig+0x258>
 800a5a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a5aa:	d815      	bhi.n	800a5d8 <UART_SetConfig+0x270>
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d003      	beq.n	800a5b8 <UART_SetConfig+0x250>
 800a5b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a5b4:	d008      	beq.n	800a5c8 <UART_SetConfig+0x260>
 800a5b6:	e00f      	b.n	800a5d8 <UART_SetConfig+0x270>
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a5be:	e052      	b.n	800a666 <UART_SetConfig+0x2fe>
 800a5c0:	2302      	movs	r3, #2
 800a5c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a5c6:	e04e      	b.n	800a666 <UART_SetConfig+0x2fe>
 800a5c8:	2304      	movs	r3, #4
 800a5ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a5ce:	e04a      	b.n	800a666 <UART_SetConfig+0x2fe>
 800a5d0:	2308      	movs	r3, #8
 800a5d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a5d6:	e046      	b.n	800a666 <UART_SetConfig+0x2fe>
 800a5d8:	2310      	movs	r3, #16
 800a5da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a5de:	e042      	b.n	800a666 <UART_SetConfig+0x2fe>
 800a5e0:	697b      	ldr	r3, [r7, #20]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	4a17      	ldr	r2, [pc, #92]	; (800a644 <UART_SetConfig+0x2dc>)
 800a5e6:	4293      	cmp	r3, r2
 800a5e8:	d13a      	bne.n	800a660 <UART_SetConfig+0x2f8>
 800a5ea:	4b18      	ldr	r3, [pc, #96]	; (800a64c <UART_SetConfig+0x2e4>)
 800a5ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5f0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a5f4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a5f8:	d01a      	beq.n	800a630 <UART_SetConfig+0x2c8>
 800a5fa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a5fe:	d81b      	bhi.n	800a638 <UART_SetConfig+0x2d0>
 800a600:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a604:	d00c      	beq.n	800a620 <UART_SetConfig+0x2b8>
 800a606:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a60a:	d815      	bhi.n	800a638 <UART_SetConfig+0x2d0>
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d003      	beq.n	800a618 <UART_SetConfig+0x2b0>
 800a610:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a614:	d008      	beq.n	800a628 <UART_SetConfig+0x2c0>
 800a616:	e00f      	b.n	800a638 <UART_SetConfig+0x2d0>
 800a618:	2300      	movs	r3, #0
 800a61a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a61e:	e022      	b.n	800a666 <UART_SetConfig+0x2fe>
 800a620:	2302      	movs	r3, #2
 800a622:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a626:	e01e      	b.n	800a666 <UART_SetConfig+0x2fe>
 800a628:	2304      	movs	r3, #4
 800a62a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a62e:	e01a      	b.n	800a666 <UART_SetConfig+0x2fe>
 800a630:	2308      	movs	r3, #8
 800a632:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a636:	e016      	b.n	800a666 <UART_SetConfig+0x2fe>
 800a638:	2310      	movs	r3, #16
 800a63a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a63e:	e012      	b.n	800a666 <UART_SetConfig+0x2fe>
 800a640:	cfff69f3 	.word	0xcfff69f3
 800a644:	40008000 	.word	0x40008000
 800a648:	40013800 	.word	0x40013800
 800a64c:	40021000 	.word	0x40021000
 800a650:	40004400 	.word	0x40004400
 800a654:	40004800 	.word	0x40004800
 800a658:	40004c00 	.word	0x40004c00
 800a65c:	40005000 	.word	0x40005000
 800a660:	2310      	movs	r3, #16
 800a662:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a666:	697b      	ldr	r3, [r7, #20]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	4aae      	ldr	r2, [pc, #696]	; (800a924 <UART_SetConfig+0x5bc>)
 800a66c:	4293      	cmp	r3, r2
 800a66e:	f040 8097 	bne.w	800a7a0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a672:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a676:	2b08      	cmp	r3, #8
 800a678:	d823      	bhi.n	800a6c2 <UART_SetConfig+0x35a>
 800a67a:	a201      	add	r2, pc, #4	; (adr r2, 800a680 <UART_SetConfig+0x318>)
 800a67c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a680:	0800a6a5 	.word	0x0800a6a5
 800a684:	0800a6c3 	.word	0x0800a6c3
 800a688:	0800a6ad 	.word	0x0800a6ad
 800a68c:	0800a6c3 	.word	0x0800a6c3
 800a690:	0800a6b3 	.word	0x0800a6b3
 800a694:	0800a6c3 	.word	0x0800a6c3
 800a698:	0800a6c3 	.word	0x0800a6c3
 800a69c:	0800a6c3 	.word	0x0800a6c3
 800a6a0:	0800a6bb 	.word	0x0800a6bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a6a4:	f7fc fb1c 	bl	8006ce0 <HAL_RCC_GetPCLK1Freq>
 800a6a8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a6aa:	e010      	b.n	800a6ce <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a6ac:	4b9e      	ldr	r3, [pc, #632]	; (800a928 <UART_SetConfig+0x5c0>)
 800a6ae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a6b0:	e00d      	b.n	800a6ce <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a6b2:	f7fc fa7d 	bl	8006bb0 <HAL_RCC_GetSysClockFreq>
 800a6b6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a6b8:	e009      	b.n	800a6ce <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a6ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a6be:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a6c0:	e005      	b.n	800a6ce <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800a6c6:	2301      	movs	r3, #1
 800a6c8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800a6cc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a6ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	f000 8130 	beq.w	800a936 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a6d6:	697b      	ldr	r3, [r7, #20]
 800a6d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6da:	4a94      	ldr	r2, [pc, #592]	; (800a92c <UART_SetConfig+0x5c4>)
 800a6dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a6e0:	461a      	mov	r2, r3
 800a6e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6e4:	fbb3 f3f2 	udiv	r3, r3, r2
 800a6e8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a6ea:	697b      	ldr	r3, [r7, #20]
 800a6ec:	685a      	ldr	r2, [r3, #4]
 800a6ee:	4613      	mov	r3, r2
 800a6f0:	005b      	lsls	r3, r3, #1
 800a6f2:	4413      	add	r3, r2
 800a6f4:	69ba      	ldr	r2, [r7, #24]
 800a6f6:	429a      	cmp	r2, r3
 800a6f8:	d305      	bcc.n	800a706 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a6fa:	697b      	ldr	r3, [r7, #20]
 800a6fc:	685b      	ldr	r3, [r3, #4]
 800a6fe:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a700:	69ba      	ldr	r2, [r7, #24]
 800a702:	429a      	cmp	r2, r3
 800a704:	d903      	bls.n	800a70e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800a706:	2301      	movs	r3, #1
 800a708:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800a70c:	e113      	b.n	800a936 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a70e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a710:	2200      	movs	r2, #0
 800a712:	60bb      	str	r3, [r7, #8]
 800a714:	60fa      	str	r2, [r7, #12]
 800a716:	697b      	ldr	r3, [r7, #20]
 800a718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a71a:	4a84      	ldr	r2, [pc, #528]	; (800a92c <UART_SetConfig+0x5c4>)
 800a71c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a720:	b29b      	uxth	r3, r3
 800a722:	2200      	movs	r2, #0
 800a724:	603b      	str	r3, [r7, #0]
 800a726:	607a      	str	r2, [r7, #4]
 800a728:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a72c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a730:	f7f6 fa04 	bl	8000b3c <__aeabi_uldivmod>
 800a734:	4602      	mov	r2, r0
 800a736:	460b      	mov	r3, r1
 800a738:	4610      	mov	r0, r2
 800a73a:	4619      	mov	r1, r3
 800a73c:	f04f 0200 	mov.w	r2, #0
 800a740:	f04f 0300 	mov.w	r3, #0
 800a744:	020b      	lsls	r3, r1, #8
 800a746:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a74a:	0202      	lsls	r2, r0, #8
 800a74c:	6979      	ldr	r1, [r7, #20]
 800a74e:	6849      	ldr	r1, [r1, #4]
 800a750:	0849      	lsrs	r1, r1, #1
 800a752:	2000      	movs	r0, #0
 800a754:	460c      	mov	r4, r1
 800a756:	4605      	mov	r5, r0
 800a758:	eb12 0804 	adds.w	r8, r2, r4
 800a75c:	eb43 0905 	adc.w	r9, r3, r5
 800a760:	697b      	ldr	r3, [r7, #20]
 800a762:	685b      	ldr	r3, [r3, #4]
 800a764:	2200      	movs	r2, #0
 800a766:	469a      	mov	sl, r3
 800a768:	4693      	mov	fp, r2
 800a76a:	4652      	mov	r2, sl
 800a76c:	465b      	mov	r3, fp
 800a76e:	4640      	mov	r0, r8
 800a770:	4649      	mov	r1, r9
 800a772:	f7f6 f9e3 	bl	8000b3c <__aeabi_uldivmod>
 800a776:	4602      	mov	r2, r0
 800a778:	460b      	mov	r3, r1
 800a77a:	4613      	mov	r3, r2
 800a77c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a77e:	6a3b      	ldr	r3, [r7, #32]
 800a780:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a784:	d308      	bcc.n	800a798 <UART_SetConfig+0x430>
 800a786:	6a3b      	ldr	r3, [r7, #32]
 800a788:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a78c:	d204      	bcs.n	800a798 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800a78e:	697b      	ldr	r3, [r7, #20]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	6a3a      	ldr	r2, [r7, #32]
 800a794:	60da      	str	r2, [r3, #12]
 800a796:	e0ce      	b.n	800a936 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800a798:	2301      	movs	r3, #1
 800a79a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800a79e:	e0ca      	b.n	800a936 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a7a0:	697b      	ldr	r3, [r7, #20]
 800a7a2:	69db      	ldr	r3, [r3, #28]
 800a7a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a7a8:	d166      	bne.n	800a878 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800a7aa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a7ae:	2b08      	cmp	r3, #8
 800a7b0:	d827      	bhi.n	800a802 <UART_SetConfig+0x49a>
 800a7b2:	a201      	add	r2, pc, #4	; (adr r2, 800a7b8 <UART_SetConfig+0x450>)
 800a7b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7b8:	0800a7dd 	.word	0x0800a7dd
 800a7bc:	0800a7e5 	.word	0x0800a7e5
 800a7c0:	0800a7ed 	.word	0x0800a7ed
 800a7c4:	0800a803 	.word	0x0800a803
 800a7c8:	0800a7f3 	.word	0x0800a7f3
 800a7cc:	0800a803 	.word	0x0800a803
 800a7d0:	0800a803 	.word	0x0800a803
 800a7d4:	0800a803 	.word	0x0800a803
 800a7d8:	0800a7fb 	.word	0x0800a7fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a7dc:	f7fc fa80 	bl	8006ce0 <HAL_RCC_GetPCLK1Freq>
 800a7e0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a7e2:	e014      	b.n	800a80e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a7e4:	f7fc fa92 	bl	8006d0c <HAL_RCC_GetPCLK2Freq>
 800a7e8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a7ea:	e010      	b.n	800a80e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a7ec:	4b4e      	ldr	r3, [pc, #312]	; (800a928 <UART_SetConfig+0x5c0>)
 800a7ee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a7f0:	e00d      	b.n	800a80e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a7f2:	f7fc f9dd 	bl	8006bb0 <HAL_RCC_GetSysClockFreq>
 800a7f6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a7f8:	e009      	b.n	800a80e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a7fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a7fe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a800:	e005      	b.n	800a80e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800a802:	2300      	movs	r3, #0
 800a804:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800a806:	2301      	movs	r3, #1
 800a808:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800a80c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a80e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a810:	2b00      	cmp	r3, #0
 800a812:	f000 8090 	beq.w	800a936 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a816:	697b      	ldr	r3, [r7, #20]
 800a818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a81a:	4a44      	ldr	r2, [pc, #272]	; (800a92c <UART_SetConfig+0x5c4>)
 800a81c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a820:	461a      	mov	r2, r3
 800a822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a824:	fbb3 f3f2 	udiv	r3, r3, r2
 800a828:	005a      	lsls	r2, r3, #1
 800a82a:	697b      	ldr	r3, [r7, #20]
 800a82c:	685b      	ldr	r3, [r3, #4]
 800a82e:	085b      	lsrs	r3, r3, #1
 800a830:	441a      	add	r2, r3
 800a832:	697b      	ldr	r3, [r7, #20]
 800a834:	685b      	ldr	r3, [r3, #4]
 800a836:	fbb2 f3f3 	udiv	r3, r2, r3
 800a83a:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a83c:	6a3b      	ldr	r3, [r7, #32]
 800a83e:	2b0f      	cmp	r3, #15
 800a840:	d916      	bls.n	800a870 <UART_SetConfig+0x508>
 800a842:	6a3b      	ldr	r3, [r7, #32]
 800a844:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a848:	d212      	bcs.n	800a870 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a84a:	6a3b      	ldr	r3, [r7, #32]
 800a84c:	b29b      	uxth	r3, r3
 800a84e:	f023 030f 	bic.w	r3, r3, #15
 800a852:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a854:	6a3b      	ldr	r3, [r7, #32]
 800a856:	085b      	lsrs	r3, r3, #1
 800a858:	b29b      	uxth	r3, r3
 800a85a:	f003 0307 	and.w	r3, r3, #7
 800a85e:	b29a      	uxth	r2, r3
 800a860:	8bfb      	ldrh	r3, [r7, #30]
 800a862:	4313      	orrs	r3, r2
 800a864:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800a866:	697b      	ldr	r3, [r7, #20]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	8bfa      	ldrh	r2, [r7, #30]
 800a86c:	60da      	str	r2, [r3, #12]
 800a86e:	e062      	b.n	800a936 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800a870:	2301      	movs	r3, #1
 800a872:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800a876:	e05e      	b.n	800a936 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a878:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a87c:	2b08      	cmp	r3, #8
 800a87e:	d828      	bhi.n	800a8d2 <UART_SetConfig+0x56a>
 800a880:	a201      	add	r2, pc, #4	; (adr r2, 800a888 <UART_SetConfig+0x520>)
 800a882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a886:	bf00      	nop
 800a888:	0800a8ad 	.word	0x0800a8ad
 800a88c:	0800a8b5 	.word	0x0800a8b5
 800a890:	0800a8bd 	.word	0x0800a8bd
 800a894:	0800a8d3 	.word	0x0800a8d3
 800a898:	0800a8c3 	.word	0x0800a8c3
 800a89c:	0800a8d3 	.word	0x0800a8d3
 800a8a0:	0800a8d3 	.word	0x0800a8d3
 800a8a4:	0800a8d3 	.word	0x0800a8d3
 800a8a8:	0800a8cb 	.word	0x0800a8cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a8ac:	f7fc fa18 	bl	8006ce0 <HAL_RCC_GetPCLK1Freq>
 800a8b0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a8b2:	e014      	b.n	800a8de <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a8b4:	f7fc fa2a 	bl	8006d0c <HAL_RCC_GetPCLK2Freq>
 800a8b8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a8ba:	e010      	b.n	800a8de <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a8bc:	4b1a      	ldr	r3, [pc, #104]	; (800a928 <UART_SetConfig+0x5c0>)
 800a8be:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a8c0:	e00d      	b.n	800a8de <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a8c2:	f7fc f975 	bl	8006bb0 <HAL_RCC_GetSysClockFreq>
 800a8c6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a8c8:	e009      	b.n	800a8de <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a8ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a8ce:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a8d0:	e005      	b.n	800a8de <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800a8d6:	2301      	movs	r3, #1
 800a8d8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800a8dc:	bf00      	nop
    }

    if (pclk != 0U)
 800a8de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d028      	beq.n	800a936 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a8e4:	697b      	ldr	r3, [r7, #20]
 800a8e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8e8:	4a10      	ldr	r2, [pc, #64]	; (800a92c <UART_SetConfig+0x5c4>)
 800a8ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a8ee:	461a      	mov	r2, r3
 800a8f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8f2:	fbb3 f2f2 	udiv	r2, r3, r2
 800a8f6:	697b      	ldr	r3, [r7, #20]
 800a8f8:	685b      	ldr	r3, [r3, #4]
 800a8fa:	085b      	lsrs	r3, r3, #1
 800a8fc:	441a      	add	r2, r3
 800a8fe:	697b      	ldr	r3, [r7, #20]
 800a900:	685b      	ldr	r3, [r3, #4]
 800a902:	fbb2 f3f3 	udiv	r3, r2, r3
 800a906:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a908:	6a3b      	ldr	r3, [r7, #32]
 800a90a:	2b0f      	cmp	r3, #15
 800a90c:	d910      	bls.n	800a930 <UART_SetConfig+0x5c8>
 800a90e:	6a3b      	ldr	r3, [r7, #32]
 800a910:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a914:	d20c      	bcs.n	800a930 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a916:	6a3b      	ldr	r3, [r7, #32]
 800a918:	b29a      	uxth	r2, r3
 800a91a:	697b      	ldr	r3, [r7, #20]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	60da      	str	r2, [r3, #12]
 800a920:	e009      	b.n	800a936 <UART_SetConfig+0x5ce>
 800a922:	bf00      	nop
 800a924:	40008000 	.word	0x40008000
 800a928:	00f42400 	.word	0x00f42400
 800a92c:	0800caf4 	.word	0x0800caf4
      }
      else
      {
        ret = HAL_ERROR;
 800a930:	2301      	movs	r3, #1
 800a932:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a936:	697b      	ldr	r3, [r7, #20]
 800a938:	2201      	movs	r2, #1
 800a93a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a93e:	697b      	ldr	r3, [r7, #20]
 800a940:	2201      	movs	r2, #1
 800a942:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a946:	697b      	ldr	r3, [r7, #20]
 800a948:	2200      	movs	r2, #0
 800a94a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800a94c:	697b      	ldr	r3, [r7, #20]
 800a94e:	2200      	movs	r2, #0
 800a950:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800a952:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800a956:	4618      	mov	r0, r3
 800a958:	3730      	adds	r7, #48	; 0x30
 800a95a:	46bd      	mov	sp, r7
 800a95c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800a960 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a960:	b480      	push	{r7}
 800a962:	b083      	sub	sp, #12
 800a964:	af00      	add	r7, sp, #0
 800a966:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a96c:	f003 0308 	and.w	r3, r3, #8
 800a970:	2b00      	cmp	r3, #0
 800a972:	d00a      	beq.n	800a98a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	685b      	ldr	r3, [r3, #4]
 800a97a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	430a      	orrs	r2, r1
 800a988:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a98e:	f003 0301 	and.w	r3, r3, #1
 800a992:	2b00      	cmp	r3, #0
 800a994:	d00a      	beq.n	800a9ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	685b      	ldr	r3, [r3, #4]
 800a99c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	430a      	orrs	r2, r1
 800a9aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9b0:	f003 0302 	and.w	r3, r3, #2
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d00a      	beq.n	800a9ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	685b      	ldr	r3, [r3, #4]
 800a9be:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	430a      	orrs	r2, r1
 800a9cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9d2:	f003 0304 	and.w	r3, r3, #4
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d00a      	beq.n	800a9f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	685b      	ldr	r3, [r3, #4]
 800a9e0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	430a      	orrs	r2, r1
 800a9ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9f4:	f003 0310 	and.w	r3, r3, #16
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d00a      	beq.n	800aa12 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	689b      	ldr	r3, [r3, #8]
 800aa02:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	430a      	orrs	r2, r1
 800aa10:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa16:	f003 0320 	and.w	r3, r3, #32
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d00a      	beq.n	800aa34 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	689b      	ldr	r3, [r3, #8]
 800aa24:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	430a      	orrs	r2, r1
 800aa32:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d01a      	beq.n	800aa76 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	685b      	ldr	r3, [r3, #4]
 800aa46:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	430a      	orrs	r2, r1
 800aa54:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aa5e:	d10a      	bne.n	800aa76 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	685b      	ldr	r3, [r3, #4]
 800aa66:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	430a      	orrs	r2, r1
 800aa74:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d00a      	beq.n	800aa98 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	685b      	ldr	r3, [r3, #4]
 800aa88:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	430a      	orrs	r2, r1
 800aa96:	605a      	str	r2, [r3, #4]
  }
}
 800aa98:	bf00      	nop
 800aa9a:	370c      	adds	r7, #12
 800aa9c:	46bd      	mov	sp, r7
 800aa9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa2:	4770      	bx	lr

0800aaa4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800aaa4:	b580      	push	{r7, lr}
 800aaa6:	b098      	sub	sp, #96	; 0x60
 800aaa8:	af02      	add	r7, sp, #8
 800aaaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	2200      	movs	r2, #0
 800aab0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800aab4:	f7f9 f9fa 	bl	8003eac <HAL_GetTick>
 800aab8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	f003 0308 	and.w	r3, r3, #8
 800aac4:	2b08      	cmp	r3, #8
 800aac6:	d12f      	bne.n	800ab28 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aac8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800aacc:	9300      	str	r3, [sp, #0]
 800aace:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aad0:	2200      	movs	r2, #0
 800aad2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800aad6:	6878      	ldr	r0, [r7, #4]
 800aad8:	f000 f88e 	bl	800abf8 <UART_WaitOnFlagUntilTimeout>
 800aadc:	4603      	mov	r3, r0
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d022      	beq.n	800ab28 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaea:	e853 3f00 	ldrex	r3, [r3]
 800aaee:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800aaf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aaf2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aaf6:	653b      	str	r3, [r7, #80]	; 0x50
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	461a      	mov	r2, r3
 800aafe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ab00:	647b      	str	r3, [r7, #68]	; 0x44
 800ab02:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab04:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ab06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ab08:	e841 2300 	strex	r3, r2, [r1]
 800ab0c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ab0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d1e6      	bne.n	800aae2 <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	2220      	movs	r2, #32
 800ab18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	2200      	movs	r2, #0
 800ab20:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ab24:	2303      	movs	r3, #3
 800ab26:	e063      	b.n	800abf0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	f003 0304 	and.w	r3, r3, #4
 800ab32:	2b04      	cmp	r3, #4
 800ab34:	d149      	bne.n	800abca <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ab36:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ab3a:	9300      	str	r3, [sp, #0]
 800ab3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ab3e:	2200      	movs	r2, #0
 800ab40:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ab44:	6878      	ldr	r0, [r7, #4]
 800ab46:	f000 f857 	bl	800abf8 <UART_WaitOnFlagUntilTimeout>
 800ab4a:	4603      	mov	r3, r0
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d03c      	beq.n	800abca <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab58:	e853 3f00 	ldrex	r3, [r3]
 800ab5c:	623b      	str	r3, [r7, #32]
   return(result);
 800ab5e:	6a3b      	ldr	r3, [r7, #32]
 800ab60:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ab64:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	461a      	mov	r2, r3
 800ab6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab6e:	633b      	str	r3, [r7, #48]	; 0x30
 800ab70:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab72:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ab74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab76:	e841 2300 	strex	r3, r2, [r1]
 800ab7a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ab7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d1e6      	bne.n	800ab50 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	3308      	adds	r3, #8
 800ab88:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab8a:	693b      	ldr	r3, [r7, #16]
 800ab8c:	e853 3f00 	ldrex	r3, [r3]
 800ab90:	60fb      	str	r3, [r7, #12]
   return(result);
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	f023 0301 	bic.w	r3, r3, #1
 800ab98:	64bb      	str	r3, [r7, #72]	; 0x48
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	3308      	adds	r3, #8
 800aba0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aba2:	61fa      	str	r2, [r7, #28]
 800aba4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aba6:	69b9      	ldr	r1, [r7, #24]
 800aba8:	69fa      	ldr	r2, [r7, #28]
 800abaa:	e841 2300 	strex	r3, r2, [r1]
 800abae:	617b      	str	r3, [r7, #20]
   return(result);
 800abb0:	697b      	ldr	r3, [r7, #20]
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d1e5      	bne.n	800ab82 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	2220      	movs	r2, #32
 800abba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	2200      	movs	r2, #0
 800abc2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800abc6:	2303      	movs	r3, #3
 800abc8:	e012      	b.n	800abf0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	2220      	movs	r2, #32
 800abce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	2220      	movs	r2, #32
 800abd6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	2200      	movs	r2, #0
 800abde:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	2200      	movs	r2, #0
 800abe4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	2200      	movs	r2, #0
 800abea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800abee:	2300      	movs	r3, #0
}
 800abf0:	4618      	mov	r0, r3
 800abf2:	3758      	adds	r7, #88	; 0x58
 800abf4:	46bd      	mov	sp, r7
 800abf6:	bd80      	pop	{r7, pc}

0800abf8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800abf8:	b580      	push	{r7, lr}
 800abfa:	b084      	sub	sp, #16
 800abfc:	af00      	add	r7, sp, #0
 800abfe:	60f8      	str	r0, [r7, #12]
 800ac00:	60b9      	str	r1, [r7, #8]
 800ac02:	603b      	str	r3, [r7, #0]
 800ac04:	4613      	mov	r3, r2
 800ac06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ac08:	e049      	b.n	800ac9e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ac0a:	69bb      	ldr	r3, [r7, #24]
 800ac0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac10:	d045      	beq.n	800ac9e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ac12:	f7f9 f94b 	bl	8003eac <HAL_GetTick>
 800ac16:	4602      	mov	r2, r0
 800ac18:	683b      	ldr	r3, [r7, #0]
 800ac1a:	1ad3      	subs	r3, r2, r3
 800ac1c:	69ba      	ldr	r2, [r7, #24]
 800ac1e:	429a      	cmp	r2, r3
 800ac20:	d302      	bcc.n	800ac28 <UART_WaitOnFlagUntilTimeout+0x30>
 800ac22:	69bb      	ldr	r3, [r7, #24]
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d101      	bne.n	800ac2c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ac28:	2303      	movs	r3, #3
 800ac2a:	e048      	b.n	800acbe <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	f003 0304 	and.w	r3, r3, #4
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d031      	beq.n	800ac9e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	69db      	ldr	r3, [r3, #28]
 800ac40:	f003 0308 	and.w	r3, r3, #8
 800ac44:	2b08      	cmp	r3, #8
 800ac46:	d110      	bne.n	800ac6a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	2208      	movs	r2, #8
 800ac4e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ac50:	68f8      	ldr	r0, [r7, #12]
 800ac52:	f000 f838 	bl	800acc6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	2208      	movs	r2, #8
 800ac5a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	2200      	movs	r2, #0
 800ac62:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800ac66:	2301      	movs	r3, #1
 800ac68:	e029      	b.n	800acbe <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	69db      	ldr	r3, [r3, #28]
 800ac70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ac74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ac78:	d111      	bne.n	800ac9e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ac82:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ac84:	68f8      	ldr	r0, [r7, #12]
 800ac86:	f000 f81e 	bl	800acc6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	2220      	movs	r2, #32
 800ac8e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	2200      	movs	r2, #0
 800ac96:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800ac9a:	2303      	movs	r3, #3
 800ac9c:	e00f      	b.n	800acbe <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	69da      	ldr	r2, [r3, #28]
 800aca4:	68bb      	ldr	r3, [r7, #8]
 800aca6:	4013      	ands	r3, r2
 800aca8:	68ba      	ldr	r2, [r7, #8]
 800acaa:	429a      	cmp	r2, r3
 800acac:	bf0c      	ite	eq
 800acae:	2301      	moveq	r3, #1
 800acb0:	2300      	movne	r3, #0
 800acb2:	b2db      	uxtb	r3, r3
 800acb4:	461a      	mov	r2, r3
 800acb6:	79fb      	ldrb	r3, [r7, #7]
 800acb8:	429a      	cmp	r2, r3
 800acba:	d0a6      	beq.n	800ac0a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800acbc:	2300      	movs	r3, #0
}
 800acbe:	4618      	mov	r0, r3
 800acc0:	3710      	adds	r7, #16
 800acc2:	46bd      	mov	sp, r7
 800acc4:	bd80      	pop	{r7, pc}

0800acc6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800acc6:	b480      	push	{r7}
 800acc8:	b095      	sub	sp, #84	; 0x54
 800acca:	af00      	add	r7, sp, #0
 800accc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acd6:	e853 3f00 	ldrex	r3, [r3]
 800acda:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800acdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acde:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ace2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	461a      	mov	r2, r3
 800acea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800acec:	643b      	str	r3, [r7, #64]	; 0x40
 800acee:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acf0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800acf2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800acf4:	e841 2300 	strex	r3, r2, [r1]
 800acf8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800acfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d1e6      	bne.n	800acce <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	3308      	adds	r3, #8
 800ad06:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad08:	6a3b      	ldr	r3, [r7, #32]
 800ad0a:	e853 3f00 	ldrex	r3, [r3]
 800ad0e:	61fb      	str	r3, [r7, #28]
   return(result);
 800ad10:	69fb      	ldr	r3, [r7, #28]
 800ad12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ad16:	f023 0301 	bic.w	r3, r3, #1
 800ad1a:	64bb      	str	r3, [r7, #72]	; 0x48
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	3308      	adds	r3, #8
 800ad22:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ad24:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ad26:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad28:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ad2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ad2c:	e841 2300 	strex	r3, r2, [r1]
 800ad30:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ad32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d1e3      	bne.n	800ad00 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ad3c:	2b01      	cmp	r3, #1
 800ad3e:	d118      	bne.n	800ad72 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	e853 3f00 	ldrex	r3, [r3]
 800ad4c:	60bb      	str	r3, [r7, #8]
   return(result);
 800ad4e:	68bb      	ldr	r3, [r7, #8]
 800ad50:	f023 0310 	bic.w	r3, r3, #16
 800ad54:	647b      	str	r3, [r7, #68]	; 0x44
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	461a      	mov	r2, r3
 800ad5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ad5e:	61bb      	str	r3, [r7, #24]
 800ad60:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad62:	6979      	ldr	r1, [r7, #20]
 800ad64:	69ba      	ldr	r2, [r7, #24]
 800ad66:	e841 2300 	strex	r3, r2, [r1]
 800ad6a:	613b      	str	r3, [r7, #16]
   return(result);
 800ad6c:	693b      	ldr	r3, [r7, #16]
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d1e6      	bne.n	800ad40 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	2220      	movs	r2, #32
 800ad76:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	2200      	movs	r2, #0
 800ad7e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	2200      	movs	r2, #0
 800ad84:	675a      	str	r2, [r3, #116]	; 0x74
}
 800ad86:	bf00      	nop
 800ad88:	3754      	adds	r7, #84	; 0x54
 800ad8a:	46bd      	mov	sp, r7
 800ad8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad90:	4770      	bx	lr
	...

0800ad94 <malloc>:
 800ad94:	4b02      	ldr	r3, [pc, #8]	; (800ada0 <malloc+0xc>)
 800ad96:	4601      	mov	r1, r0
 800ad98:	6818      	ldr	r0, [r3, #0]
 800ad9a:	f000 b823 	b.w	800ade4 <_malloc_r>
 800ad9e:	bf00      	nop
 800ada0:	20000088 	.word	0x20000088

0800ada4 <sbrk_aligned>:
 800ada4:	b570      	push	{r4, r5, r6, lr}
 800ada6:	4e0e      	ldr	r6, [pc, #56]	; (800ade0 <sbrk_aligned+0x3c>)
 800ada8:	460c      	mov	r4, r1
 800adaa:	6831      	ldr	r1, [r6, #0]
 800adac:	4605      	mov	r5, r0
 800adae:	b911      	cbnz	r1, 800adb6 <sbrk_aligned+0x12>
 800adb0:	f000 fbb4 	bl	800b51c <_sbrk_r>
 800adb4:	6030      	str	r0, [r6, #0]
 800adb6:	4621      	mov	r1, r4
 800adb8:	4628      	mov	r0, r5
 800adba:	f000 fbaf 	bl	800b51c <_sbrk_r>
 800adbe:	1c43      	adds	r3, r0, #1
 800adc0:	d00a      	beq.n	800add8 <sbrk_aligned+0x34>
 800adc2:	1cc4      	adds	r4, r0, #3
 800adc4:	f024 0403 	bic.w	r4, r4, #3
 800adc8:	42a0      	cmp	r0, r4
 800adca:	d007      	beq.n	800addc <sbrk_aligned+0x38>
 800adcc:	1a21      	subs	r1, r4, r0
 800adce:	4628      	mov	r0, r5
 800add0:	f000 fba4 	bl	800b51c <_sbrk_r>
 800add4:	3001      	adds	r0, #1
 800add6:	d101      	bne.n	800addc <sbrk_aligned+0x38>
 800add8:	f04f 34ff 	mov.w	r4, #4294967295
 800addc:	4620      	mov	r0, r4
 800adde:	bd70      	pop	{r4, r5, r6, pc}
 800ade0:	20006314 	.word	0x20006314

0800ade4 <_malloc_r>:
 800ade4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ade8:	1ccd      	adds	r5, r1, #3
 800adea:	f025 0503 	bic.w	r5, r5, #3
 800adee:	3508      	adds	r5, #8
 800adf0:	2d0c      	cmp	r5, #12
 800adf2:	bf38      	it	cc
 800adf4:	250c      	movcc	r5, #12
 800adf6:	2d00      	cmp	r5, #0
 800adf8:	4607      	mov	r7, r0
 800adfa:	db01      	blt.n	800ae00 <_malloc_r+0x1c>
 800adfc:	42a9      	cmp	r1, r5
 800adfe:	d905      	bls.n	800ae0c <_malloc_r+0x28>
 800ae00:	230c      	movs	r3, #12
 800ae02:	603b      	str	r3, [r7, #0]
 800ae04:	2600      	movs	r6, #0
 800ae06:	4630      	mov	r0, r6
 800ae08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae0c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800aee0 <_malloc_r+0xfc>
 800ae10:	f000 f868 	bl	800aee4 <__malloc_lock>
 800ae14:	f8d8 3000 	ldr.w	r3, [r8]
 800ae18:	461c      	mov	r4, r3
 800ae1a:	bb5c      	cbnz	r4, 800ae74 <_malloc_r+0x90>
 800ae1c:	4629      	mov	r1, r5
 800ae1e:	4638      	mov	r0, r7
 800ae20:	f7ff ffc0 	bl	800ada4 <sbrk_aligned>
 800ae24:	1c43      	adds	r3, r0, #1
 800ae26:	4604      	mov	r4, r0
 800ae28:	d155      	bne.n	800aed6 <_malloc_r+0xf2>
 800ae2a:	f8d8 4000 	ldr.w	r4, [r8]
 800ae2e:	4626      	mov	r6, r4
 800ae30:	2e00      	cmp	r6, #0
 800ae32:	d145      	bne.n	800aec0 <_malloc_r+0xdc>
 800ae34:	2c00      	cmp	r4, #0
 800ae36:	d048      	beq.n	800aeca <_malloc_r+0xe6>
 800ae38:	6823      	ldr	r3, [r4, #0]
 800ae3a:	4631      	mov	r1, r6
 800ae3c:	4638      	mov	r0, r7
 800ae3e:	eb04 0903 	add.w	r9, r4, r3
 800ae42:	f000 fb6b 	bl	800b51c <_sbrk_r>
 800ae46:	4581      	cmp	r9, r0
 800ae48:	d13f      	bne.n	800aeca <_malloc_r+0xe6>
 800ae4a:	6821      	ldr	r1, [r4, #0]
 800ae4c:	1a6d      	subs	r5, r5, r1
 800ae4e:	4629      	mov	r1, r5
 800ae50:	4638      	mov	r0, r7
 800ae52:	f7ff ffa7 	bl	800ada4 <sbrk_aligned>
 800ae56:	3001      	adds	r0, #1
 800ae58:	d037      	beq.n	800aeca <_malloc_r+0xe6>
 800ae5a:	6823      	ldr	r3, [r4, #0]
 800ae5c:	442b      	add	r3, r5
 800ae5e:	6023      	str	r3, [r4, #0]
 800ae60:	f8d8 3000 	ldr.w	r3, [r8]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d038      	beq.n	800aeda <_malloc_r+0xf6>
 800ae68:	685a      	ldr	r2, [r3, #4]
 800ae6a:	42a2      	cmp	r2, r4
 800ae6c:	d12b      	bne.n	800aec6 <_malloc_r+0xe2>
 800ae6e:	2200      	movs	r2, #0
 800ae70:	605a      	str	r2, [r3, #4]
 800ae72:	e00f      	b.n	800ae94 <_malloc_r+0xb0>
 800ae74:	6822      	ldr	r2, [r4, #0]
 800ae76:	1b52      	subs	r2, r2, r5
 800ae78:	d41f      	bmi.n	800aeba <_malloc_r+0xd6>
 800ae7a:	2a0b      	cmp	r2, #11
 800ae7c:	d917      	bls.n	800aeae <_malloc_r+0xca>
 800ae7e:	1961      	adds	r1, r4, r5
 800ae80:	42a3      	cmp	r3, r4
 800ae82:	6025      	str	r5, [r4, #0]
 800ae84:	bf18      	it	ne
 800ae86:	6059      	strne	r1, [r3, #4]
 800ae88:	6863      	ldr	r3, [r4, #4]
 800ae8a:	bf08      	it	eq
 800ae8c:	f8c8 1000 	streq.w	r1, [r8]
 800ae90:	5162      	str	r2, [r4, r5]
 800ae92:	604b      	str	r3, [r1, #4]
 800ae94:	4638      	mov	r0, r7
 800ae96:	f104 060b 	add.w	r6, r4, #11
 800ae9a:	f000 f829 	bl	800aef0 <__malloc_unlock>
 800ae9e:	f026 0607 	bic.w	r6, r6, #7
 800aea2:	1d23      	adds	r3, r4, #4
 800aea4:	1af2      	subs	r2, r6, r3
 800aea6:	d0ae      	beq.n	800ae06 <_malloc_r+0x22>
 800aea8:	1b9b      	subs	r3, r3, r6
 800aeaa:	50a3      	str	r3, [r4, r2]
 800aeac:	e7ab      	b.n	800ae06 <_malloc_r+0x22>
 800aeae:	42a3      	cmp	r3, r4
 800aeb0:	6862      	ldr	r2, [r4, #4]
 800aeb2:	d1dd      	bne.n	800ae70 <_malloc_r+0x8c>
 800aeb4:	f8c8 2000 	str.w	r2, [r8]
 800aeb8:	e7ec      	b.n	800ae94 <_malloc_r+0xb0>
 800aeba:	4623      	mov	r3, r4
 800aebc:	6864      	ldr	r4, [r4, #4]
 800aebe:	e7ac      	b.n	800ae1a <_malloc_r+0x36>
 800aec0:	4634      	mov	r4, r6
 800aec2:	6876      	ldr	r6, [r6, #4]
 800aec4:	e7b4      	b.n	800ae30 <_malloc_r+0x4c>
 800aec6:	4613      	mov	r3, r2
 800aec8:	e7cc      	b.n	800ae64 <_malloc_r+0x80>
 800aeca:	230c      	movs	r3, #12
 800aecc:	603b      	str	r3, [r7, #0]
 800aece:	4638      	mov	r0, r7
 800aed0:	f000 f80e 	bl	800aef0 <__malloc_unlock>
 800aed4:	e797      	b.n	800ae06 <_malloc_r+0x22>
 800aed6:	6025      	str	r5, [r4, #0]
 800aed8:	e7dc      	b.n	800ae94 <_malloc_r+0xb0>
 800aeda:	605b      	str	r3, [r3, #4]
 800aedc:	deff      	udf	#255	; 0xff
 800aede:	bf00      	nop
 800aee0:	20006310 	.word	0x20006310

0800aee4 <__malloc_lock>:
 800aee4:	4801      	ldr	r0, [pc, #4]	; (800aeec <__malloc_lock+0x8>)
 800aee6:	f000 bb65 	b.w	800b5b4 <__retarget_lock_acquire_recursive>
 800aeea:	bf00      	nop
 800aeec:	20006458 	.word	0x20006458

0800aef0 <__malloc_unlock>:
 800aef0:	4801      	ldr	r0, [pc, #4]	; (800aef8 <__malloc_unlock+0x8>)
 800aef2:	f000 bb60 	b.w	800b5b6 <__retarget_lock_release_recursive>
 800aef6:	bf00      	nop
 800aef8:	20006458 	.word	0x20006458

0800aefc <std>:
 800aefc:	2300      	movs	r3, #0
 800aefe:	b510      	push	{r4, lr}
 800af00:	4604      	mov	r4, r0
 800af02:	e9c0 3300 	strd	r3, r3, [r0]
 800af06:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800af0a:	6083      	str	r3, [r0, #8]
 800af0c:	8181      	strh	r1, [r0, #12]
 800af0e:	6643      	str	r3, [r0, #100]	; 0x64
 800af10:	81c2      	strh	r2, [r0, #14]
 800af12:	6183      	str	r3, [r0, #24]
 800af14:	4619      	mov	r1, r3
 800af16:	2208      	movs	r2, #8
 800af18:	305c      	adds	r0, #92	; 0x5c
 800af1a:	f000 fa1d 	bl	800b358 <memset>
 800af1e:	4b05      	ldr	r3, [pc, #20]	; (800af34 <std+0x38>)
 800af20:	6263      	str	r3, [r4, #36]	; 0x24
 800af22:	4b05      	ldr	r3, [pc, #20]	; (800af38 <std+0x3c>)
 800af24:	62a3      	str	r3, [r4, #40]	; 0x28
 800af26:	4b05      	ldr	r3, [pc, #20]	; (800af3c <std+0x40>)
 800af28:	62e3      	str	r3, [r4, #44]	; 0x2c
 800af2a:	4b05      	ldr	r3, [pc, #20]	; (800af40 <std+0x44>)
 800af2c:	6224      	str	r4, [r4, #32]
 800af2e:	6323      	str	r3, [r4, #48]	; 0x30
 800af30:	bd10      	pop	{r4, pc}
 800af32:	bf00      	nop
 800af34:	0800b189 	.word	0x0800b189
 800af38:	0800b1ab 	.word	0x0800b1ab
 800af3c:	0800b1e3 	.word	0x0800b1e3
 800af40:	0800b207 	.word	0x0800b207

0800af44 <stdio_exit_handler>:
 800af44:	4a02      	ldr	r2, [pc, #8]	; (800af50 <stdio_exit_handler+0xc>)
 800af46:	4903      	ldr	r1, [pc, #12]	; (800af54 <stdio_exit_handler+0x10>)
 800af48:	4803      	ldr	r0, [pc, #12]	; (800af58 <stdio_exit_handler+0x14>)
 800af4a:	f000 b869 	b.w	800b020 <_fwalk_sglue>
 800af4e:	bf00      	nop
 800af50:	20000030 	.word	0x20000030
 800af54:	0800c01d 	.word	0x0800c01d
 800af58:	2000003c 	.word	0x2000003c

0800af5c <cleanup_stdio>:
 800af5c:	6841      	ldr	r1, [r0, #4]
 800af5e:	4b0c      	ldr	r3, [pc, #48]	; (800af90 <cleanup_stdio+0x34>)
 800af60:	4299      	cmp	r1, r3
 800af62:	b510      	push	{r4, lr}
 800af64:	4604      	mov	r4, r0
 800af66:	d001      	beq.n	800af6c <cleanup_stdio+0x10>
 800af68:	f001 f858 	bl	800c01c <_fflush_r>
 800af6c:	68a1      	ldr	r1, [r4, #8]
 800af6e:	4b09      	ldr	r3, [pc, #36]	; (800af94 <cleanup_stdio+0x38>)
 800af70:	4299      	cmp	r1, r3
 800af72:	d002      	beq.n	800af7a <cleanup_stdio+0x1e>
 800af74:	4620      	mov	r0, r4
 800af76:	f001 f851 	bl	800c01c <_fflush_r>
 800af7a:	68e1      	ldr	r1, [r4, #12]
 800af7c:	4b06      	ldr	r3, [pc, #24]	; (800af98 <cleanup_stdio+0x3c>)
 800af7e:	4299      	cmp	r1, r3
 800af80:	d004      	beq.n	800af8c <cleanup_stdio+0x30>
 800af82:	4620      	mov	r0, r4
 800af84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af88:	f001 b848 	b.w	800c01c <_fflush_r>
 800af8c:	bd10      	pop	{r4, pc}
 800af8e:	bf00      	nop
 800af90:	20006318 	.word	0x20006318
 800af94:	20006380 	.word	0x20006380
 800af98:	200063e8 	.word	0x200063e8

0800af9c <global_stdio_init.part.0>:
 800af9c:	b510      	push	{r4, lr}
 800af9e:	4b0b      	ldr	r3, [pc, #44]	; (800afcc <global_stdio_init.part.0+0x30>)
 800afa0:	4c0b      	ldr	r4, [pc, #44]	; (800afd0 <global_stdio_init.part.0+0x34>)
 800afa2:	4a0c      	ldr	r2, [pc, #48]	; (800afd4 <global_stdio_init.part.0+0x38>)
 800afa4:	601a      	str	r2, [r3, #0]
 800afa6:	4620      	mov	r0, r4
 800afa8:	2200      	movs	r2, #0
 800afaa:	2104      	movs	r1, #4
 800afac:	f7ff ffa6 	bl	800aefc <std>
 800afb0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800afb4:	2201      	movs	r2, #1
 800afb6:	2109      	movs	r1, #9
 800afb8:	f7ff ffa0 	bl	800aefc <std>
 800afbc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800afc0:	2202      	movs	r2, #2
 800afc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800afc6:	2112      	movs	r1, #18
 800afc8:	f7ff bf98 	b.w	800aefc <std>
 800afcc:	20006450 	.word	0x20006450
 800afd0:	20006318 	.word	0x20006318
 800afd4:	0800af45 	.word	0x0800af45

0800afd8 <__sfp_lock_acquire>:
 800afd8:	4801      	ldr	r0, [pc, #4]	; (800afe0 <__sfp_lock_acquire+0x8>)
 800afda:	f000 baeb 	b.w	800b5b4 <__retarget_lock_acquire_recursive>
 800afde:	bf00      	nop
 800afe0:	20006459 	.word	0x20006459

0800afe4 <__sfp_lock_release>:
 800afe4:	4801      	ldr	r0, [pc, #4]	; (800afec <__sfp_lock_release+0x8>)
 800afe6:	f000 bae6 	b.w	800b5b6 <__retarget_lock_release_recursive>
 800afea:	bf00      	nop
 800afec:	20006459 	.word	0x20006459

0800aff0 <__sinit>:
 800aff0:	b510      	push	{r4, lr}
 800aff2:	4604      	mov	r4, r0
 800aff4:	f7ff fff0 	bl	800afd8 <__sfp_lock_acquire>
 800aff8:	6a23      	ldr	r3, [r4, #32]
 800affa:	b11b      	cbz	r3, 800b004 <__sinit+0x14>
 800affc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b000:	f7ff bff0 	b.w	800afe4 <__sfp_lock_release>
 800b004:	4b04      	ldr	r3, [pc, #16]	; (800b018 <__sinit+0x28>)
 800b006:	6223      	str	r3, [r4, #32]
 800b008:	4b04      	ldr	r3, [pc, #16]	; (800b01c <__sinit+0x2c>)
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d1f5      	bne.n	800affc <__sinit+0xc>
 800b010:	f7ff ffc4 	bl	800af9c <global_stdio_init.part.0>
 800b014:	e7f2      	b.n	800affc <__sinit+0xc>
 800b016:	bf00      	nop
 800b018:	0800af5d 	.word	0x0800af5d
 800b01c:	20006450 	.word	0x20006450

0800b020 <_fwalk_sglue>:
 800b020:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b024:	4607      	mov	r7, r0
 800b026:	4688      	mov	r8, r1
 800b028:	4614      	mov	r4, r2
 800b02a:	2600      	movs	r6, #0
 800b02c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b030:	f1b9 0901 	subs.w	r9, r9, #1
 800b034:	d505      	bpl.n	800b042 <_fwalk_sglue+0x22>
 800b036:	6824      	ldr	r4, [r4, #0]
 800b038:	2c00      	cmp	r4, #0
 800b03a:	d1f7      	bne.n	800b02c <_fwalk_sglue+0xc>
 800b03c:	4630      	mov	r0, r6
 800b03e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b042:	89ab      	ldrh	r3, [r5, #12]
 800b044:	2b01      	cmp	r3, #1
 800b046:	d907      	bls.n	800b058 <_fwalk_sglue+0x38>
 800b048:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b04c:	3301      	adds	r3, #1
 800b04e:	d003      	beq.n	800b058 <_fwalk_sglue+0x38>
 800b050:	4629      	mov	r1, r5
 800b052:	4638      	mov	r0, r7
 800b054:	47c0      	blx	r8
 800b056:	4306      	orrs	r6, r0
 800b058:	3568      	adds	r5, #104	; 0x68
 800b05a:	e7e9      	b.n	800b030 <_fwalk_sglue+0x10>

0800b05c <iprintf>:
 800b05c:	b40f      	push	{r0, r1, r2, r3}
 800b05e:	b507      	push	{r0, r1, r2, lr}
 800b060:	4906      	ldr	r1, [pc, #24]	; (800b07c <iprintf+0x20>)
 800b062:	ab04      	add	r3, sp, #16
 800b064:	6808      	ldr	r0, [r1, #0]
 800b066:	f853 2b04 	ldr.w	r2, [r3], #4
 800b06a:	6881      	ldr	r1, [r0, #8]
 800b06c:	9301      	str	r3, [sp, #4]
 800b06e:	f000 fca5 	bl	800b9bc <_vfiprintf_r>
 800b072:	b003      	add	sp, #12
 800b074:	f85d eb04 	ldr.w	lr, [sp], #4
 800b078:	b004      	add	sp, #16
 800b07a:	4770      	bx	lr
 800b07c:	20000088 	.word	0x20000088

0800b080 <putchar>:
 800b080:	4b02      	ldr	r3, [pc, #8]	; (800b08c <putchar+0xc>)
 800b082:	4601      	mov	r1, r0
 800b084:	6818      	ldr	r0, [r3, #0]
 800b086:	6882      	ldr	r2, [r0, #8]
 800b088:	f001 b864 	b.w	800c154 <_putc_r>
 800b08c:	20000088 	.word	0x20000088

0800b090 <_puts_r>:
 800b090:	6a03      	ldr	r3, [r0, #32]
 800b092:	b570      	push	{r4, r5, r6, lr}
 800b094:	6884      	ldr	r4, [r0, #8]
 800b096:	4605      	mov	r5, r0
 800b098:	460e      	mov	r6, r1
 800b09a:	b90b      	cbnz	r3, 800b0a0 <_puts_r+0x10>
 800b09c:	f7ff ffa8 	bl	800aff0 <__sinit>
 800b0a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b0a2:	07db      	lsls	r3, r3, #31
 800b0a4:	d405      	bmi.n	800b0b2 <_puts_r+0x22>
 800b0a6:	89a3      	ldrh	r3, [r4, #12]
 800b0a8:	0598      	lsls	r0, r3, #22
 800b0aa:	d402      	bmi.n	800b0b2 <_puts_r+0x22>
 800b0ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b0ae:	f000 fa81 	bl	800b5b4 <__retarget_lock_acquire_recursive>
 800b0b2:	89a3      	ldrh	r3, [r4, #12]
 800b0b4:	0719      	lsls	r1, r3, #28
 800b0b6:	d513      	bpl.n	800b0e0 <_puts_r+0x50>
 800b0b8:	6923      	ldr	r3, [r4, #16]
 800b0ba:	b18b      	cbz	r3, 800b0e0 <_puts_r+0x50>
 800b0bc:	3e01      	subs	r6, #1
 800b0be:	68a3      	ldr	r3, [r4, #8]
 800b0c0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b0c4:	3b01      	subs	r3, #1
 800b0c6:	60a3      	str	r3, [r4, #8]
 800b0c8:	b9e9      	cbnz	r1, 800b106 <_puts_r+0x76>
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	da2e      	bge.n	800b12c <_puts_r+0x9c>
 800b0ce:	4622      	mov	r2, r4
 800b0d0:	210a      	movs	r1, #10
 800b0d2:	4628      	mov	r0, r5
 800b0d4:	f000 f89b 	bl	800b20e <__swbuf_r>
 800b0d8:	3001      	adds	r0, #1
 800b0da:	d007      	beq.n	800b0ec <_puts_r+0x5c>
 800b0dc:	250a      	movs	r5, #10
 800b0de:	e007      	b.n	800b0f0 <_puts_r+0x60>
 800b0e0:	4621      	mov	r1, r4
 800b0e2:	4628      	mov	r0, r5
 800b0e4:	f000 f8d0 	bl	800b288 <__swsetup_r>
 800b0e8:	2800      	cmp	r0, #0
 800b0ea:	d0e7      	beq.n	800b0bc <_puts_r+0x2c>
 800b0ec:	f04f 35ff 	mov.w	r5, #4294967295
 800b0f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b0f2:	07da      	lsls	r2, r3, #31
 800b0f4:	d405      	bmi.n	800b102 <_puts_r+0x72>
 800b0f6:	89a3      	ldrh	r3, [r4, #12]
 800b0f8:	059b      	lsls	r3, r3, #22
 800b0fa:	d402      	bmi.n	800b102 <_puts_r+0x72>
 800b0fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b0fe:	f000 fa5a 	bl	800b5b6 <__retarget_lock_release_recursive>
 800b102:	4628      	mov	r0, r5
 800b104:	bd70      	pop	{r4, r5, r6, pc}
 800b106:	2b00      	cmp	r3, #0
 800b108:	da04      	bge.n	800b114 <_puts_r+0x84>
 800b10a:	69a2      	ldr	r2, [r4, #24]
 800b10c:	429a      	cmp	r2, r3
 800b10e:	dc06      	bgt.n	800b11e <_puts_r+0x8e>
 800b110:	290a      	cmp	r1, #10
 800b112:	d004      	beq.n	800b11e <_puts_r+0x8e>
 800b114:	6823      	ldr	r3, [r4, #0]
 800b116:	1c5a      	adds	r2, r3, #1
 800b118:	6022      	str	r2, [r4, #0]
 800b11a:	7019      	strb	r1, [r3, #0]
 800b11c:	e7cf      	b.n	800b0be <_puts_r+0x2e>
 800b11e:	4622      	mov	r2, r4
 800b120:	4628      	mov	r0, r5
 800b122:	f000 f874 	bl	800b20e <__swbuf_r>
 800b126:	3001      	adds	r0, #1
 800b128:	d1c9      	bne.n	800b0be <_puts_r+0x2e>
 800b12a:	e7df      	b.n	800b0ec <_puts_r+0x5c>
 800b12c:	6823      	ldr	r3, [r4, #0]
 800b12e:	250a      	movs	r5, #10
 800b130:	1c5a      	adds	r2, r3, #1
 800b132:	6022      	str	r2, [r4, #0]
 800b134:	701d      	strb	r5, [r3, #0]
 800b136:	e7db      	b.n	800b0f0 <_puts_r+0x60>

0800b138 <puts>:
 800b138:	4b02      	ldr	r3, [pc, #8]	; (800b144 <puts+0xc>)
 800b13a:	4601      	mov	r1, r0
 800b13c:	6818      	ldr	r0, [r3, #0]
 800b13e:	f7ff bfa7 	b.w	800b090 <_puts_r>
 800b142:	bf00      	nop
 800b144:	20000088 	.word	0x20000088

0800b148 <siprintf>:
 800b148:	b40e      	push	{r1, r2, r3}
 800b14a:	b500      	push	{lr}
 800b14c:	b09c      	sub	sp, #112	; 0x70
 800b14e:	ab1d      	add	r3, sp, #116	; 0x74
 800b150:	9002      	str	r0, [sp, #8]
 800b152:	9006      	str	r0, [sp, #24]
 800b154:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b158:	4809      	ldr	r0, [pc, #36]	; (800b180 <siprintf+0x38>)
 800b15a:	9107      	str	r1, [sp, #28]
 800b15c:	9104      	str	r1, [sp, #16]
 800b15e:	4909      	ldr	r1, [pc, #36]	; (800b184 <siprintf+0x3c>)
 800b160:	f853 2b04 	ldr.w	r2, [r3], #4
 800b164:	9105      	str	r1, [sp, #20]
 800b166:	6800      	ldr	r0, [r0, #0]
 800b168:	9301      	str	r3, [sp, #4]
 800b16a:	a902      	add	r1, sp, #8
 800b16c:	f000 fafe 	bl	800b76c <_svfiprintf_r>
 800b170:	9b02      	ldr	r3, [sp, #8]
 800b172:	2200      	movs	r2, #0
 800b174:	701a      	strb	r2, [r3, #0]
 800b176:	b01c      	add	sp, #112	; 0x70
 800b178:	f85d eb04 	ldr.w	lr, [sp], #4
 800b17c:	b003      	add	sp, #12
 800b17e:	4770      	bx	lr
 800b180:	20000088 	.word	0x20000088
 800b184:	ffff0208 	.word	0xffff0208

0800b188 <__sread>:
 800b188:	b510      	push	{r4, lr}
 800b18a:	460c      	mov	r4, r1
 800b18c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b190:	f000 f9b2 	bl	800b4f8 <_read_r>
 800b194:	2800      	cmp	r0, #0
 800b196:	bfab      	itete	ge
 800b198:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b19a:	89a3      	ldrhlt	r3, [r4, #12]
 800b19c:	181b      	addge	r3, r3, r0
 800b19e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b1a2:	bfac      	ite	ge
 800b1a4:	6563      	strge	r3, [r4, #84]	; 0x54
 800b1a6:	81a3      	strhlt	r3, [r4, #12]
 800b1a8:	bd10      	pop	{r4, pc}

0800b1aa <__swrite>:
 800b1aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1ae:	461f      	mov	r7, r3
 800b1b0:	898b      	ldrh	r3, [r1, #12]
 800b1b2:	05db      	lsls	r3, r3, #23
 800b1b4:	4605      	mov	r5, r0
 800b1b6:	460c      	mov	r4, r1
 800b1b8:	4616      	mov	r6, r2
 800b1ba:	d505      	bpl.n	800b1c8 <__swrite+0x1e>
 800b1bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1c0:	2302      	movs	r3, #2
 800b1c2:	2200      	movs	r2, #0
 800b1c4:	f000 f986 	bl	800b4d4 <_lseek_r>
 800b1c8:	89a3      	ldrh	r3, [r4, #12]
 800b1ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b1ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b1d2:	81a3      	strh	r3, [r4, #12]
 800b1d4:	4632      	mov	r2, r6
 800b1d6:	463b      	mov	r3, r7
 800b1d8:	4628      	mov	r0, r5
 800b1da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b1de:	f000 b9ad 	b.w	800b53c <_write_r>

0800b1e2 <__sseek>:
 800b1e2:	b510      	push	{r4, lr}
 800b1e4:	460c      	mov	r4, r1
 800b1e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1ea:	f000 f973 	bl	800b4d4 <_lseek_r>
 800b1ee:	1c43      	adds	r3, r0, #1
 800b1f0:	89a3      	ldrh	r3, [r4, #12]
 800b1f2:	bf15      	itete	ne
 800b1f4:	6560      	strne	r0, [r4, #84]	; 0x54
 800b1f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b1fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b1fe:	81a3      	strheq	r3, [r4, #12]
 800b200:	bf18      	it	ne
 800b202:	81a3      	strhne	r3, [r4, #12]
 800b204:	bd10      	pop	{r4, pc}

0800b206 <__sclose>:
 800b206:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b20a:	f000 b953 	b.w	800b4b4 <_close_r>

0800b20e <__swbuf_r>:
 800b20e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b210:	460e      	mov	r6, r1
 800b212:	4614      	mov	r4, r2
 800b214:	4605      	mov	r5, r0
 800b216:	b118      	cbz	r0, 800b220 <__swbuf_r+0x12>
 800b218:	6a03      	ldr	r3, [r0, #32]
 800b21a:	b90b      	cbnz	r3, 800b220 <__swbuf_r+0x12>
 800b21c:	f7ff fee8 	bl	800aff0 <__sinit>
 800b220:	69a3      	ldr	r3, [r4, #24]
 800b222:	60a3      	str	r3, [r4, #8]
 800b224:	89a3      	ldrh	r3, [r4, #12]
 800b226:	071a      	lsls	r2, r3, #28
 800b228:	d525      	bpl.n	800b276 <__swbuf_r+0x68>
 800b22a:	6923      	ldr	r3, [r4, #16]
 800b22c:	b31b      	cbz	r3, 800b276 <__swbuf_r+0x68>
 800b22e:	6823      	ldr	r3, [r4, #0]
 800b230:	6922      	ldr	r2, [r4, #16]
 800b232:	1a98      	subs	r0, r3, r2
 800b234:	6963      	ldr	r3, [r4, #20]
 800b236:	b2f6      	uxtb	r6, r6
 800b238:	4283      	cmp	r3, r0
 800b23a:	4637      	mov	r7, r6
 800b23c:	dc04      	bgt.n	800b248 <__swbuf_r+0x3a>
 800b23e:	4621      	mov	r1, r4
 800b240:	4628      	mov	r0, r5
 800b242:	f000 feeb 	bl	800c01c <_fflush_r>
 800b246:	b9e0      	cbnz	r0, 800b282 <__swbuf_r+0x74>
 800b248:	68a3      	ldr	r3, [r4, #8]
 800b24a:	3b01      	subs	r3, #1
 800b24c:	60a3      	str	r3, [r4, #8]
 800b24e:	6823      	ldr	r3, [r4, #0]
 800b250:	1c5a      	adds	r2, r3, #1
 800b252:	6022      	str	r2, [r4, #0]
 800b254:	701e      	strb	r6, [r3, #0]
 800b256:	6962      	ldr	r2, [r4, #20]
 800b258:	1c43      	adds	r3, r0, #1
 800b25a:	429a      	cmp	r2, r3
 800b25c:	d004      	beq.n	800b268 <__swbuf_r+0x5a>
 800b25e:	89a3      	ldrh	r3, [r4, #12]
 800b260:	07db      	lsls	r3, r3, #31
 800b262:	d506      	bpl.n	800b272 <__swbuf_r+0x64>
 800b264:	2e0a      	cmp	r6, #10
 800b266:	d104      	bne.n	800b272 <__swbuf_r+0x64>
 800b268:	4621      	mov	r1, r4
 800b26a:	4628      	mov	r0, r5
 800b26c:	f000 fed6 	bl	800c01c <_fflush_r>
 800b270:	b938      	cbnz	r0, 800b282 <__swbuf_r+0x74>
 800b272:	4638      	mov	r0, r7
 800b274:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b276:	4621      	mov	r1, r4
 800b278:	4628      	mov	r0, r5
 800b27a:	f000 f805 	bl	800b288 <__swsetup_r>
 800b27e:	2800      	cmp	r0, #0
 800b280:	d0d5      	beq.n	800b22e <__swbuf_r+0x20>
 800b282:	f04f 37ff 	mov.w	r7, #4294967295
 800b286:	e7f4      	b.n	800b272 <__swbuf_r+0x64>

0800b288 <__swsetup_r>:
 800b288:	b538      	push	{r3, r4, r5, lr}
 800b28a:	4b2a      	ldr	r3, [pc, #168]	; (800b334 <__swsetup_r+0xac>)
 800b28c:	4605      	mov	r5, r0
 800b28e:	6818      	ldr	r0, [r3, #0]
 800b290:	460c      	mov	r4, r1
 800b292:	b118      	cbz	r0, 800b29c <__swsetup_r+0x14>
 800b294:	6a03      	ldr	r3, [r0, #32]
 800b296:	b90b      	cbnz	r3, 800b29c <__swsetup_r+0x14>
 800b298:	f7ff feaa 	bl	800aff0 <__sinit>
 800b29c:	89a3      	ldrh	r3, [r4, #12]
 800b29e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b2a2:	0718      	lsls	r0, r3, #28
 800b2a4:	d422      	bmi.n	800b2ec <__swsetup_r+0x64>
 800b2a6:	06d9      	lsls	r1, r3, #27
 800b2a8:	d407      	bmi.n	800b2ba <__swsetup_r+0x32>
 800b2aa:	2309      	movs	r3, #9
 800b2ac:	602b      	str	r3, [r5, #0]
 800b2ae:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b2b2:	81a3      	strh	r3, [r4, #12]
 800b2b4:	f04f 30ff 	mov.w	r0, #4294967295
 800b2b8:	e034      	b.n	800b324 <__swsetup_r+0x9c>
 800b2ba:	0758      	lsls	r0, r3, #29
 800b2bc:	d512      	bpl.n	800b2e4 <__swsetup_r+0x5c>
 800b2be:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b2c0:	b141      	cbz	r1, 800b2d4 <__swsetup_r+0x4c>
 800b2c2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b2c6:	4299      	cmp	r1, r3
 800b2c8:	d002      	beq.n	800b2d0 <__swsetup_r+0x48>
 800b2ca:	4628      	mov	r0, r5
 800b2cc:	f000 f9a8 	bl	800b620 <_free_r>
 800b2d0:	2300      	movs	r3, #0
 800b2d2:	6363      	str	r3, [r4, #52]	; 0x34
 800b2d4:	89a3      	ldrh	r3, [r4, #12]
 800b2d6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b2da:	81a3      	strh	r3, [r4, #12]
 800b2dc:	2300      	movs	r3, #0
 800b2de:	6063      	str	r3, [r4, #4]
 800b2e0:	6923      	ldr	r3, [r4, #16]
 800b2e2:	6023      	str	r3, [r4, #0]
 800b2e4:	89a3      	ldrh	r3, [r4, #12]
 800b2e6:	f043 0308 	orr.w	r3, r3, #8
 800b2ea:	81a3      	strh	r3, [r4, #12]
 800b2ec:	6923      	ldr	r3, [r4, #16]
 800b2ee:	b94b      	cbnz	r3, 800b304 <__swsetup_r+0x7c>
 800b2f0:	89a3      	ldrh	r3, [r4, #12]
 800b2f2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b2f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b2fa:	d003      	beq.n	800b304 <__swsetup_r+0x7c>
 800b2fc:	4621      	mov	r1, r4
 800b2fe:	4628      	mov	r0, r5
 800b300:	f000 feec 	bl	800c0dc <__smakebuf_r>
 800b304:	89a0      	ldrh	r0, [r4, #12]
 800b306:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b30a:	f010 0301 	ands.w	r3, r0, #1
 800b30e:	d00a      	beq.n	800b326 <__swsetup_r+0x9e>
 800b310:	2300      	movs	r3, #0
 800b312:	60a3      	str	r3, [r4, #8]
 800b314:	6963      	ldr	r3, [r4, #20]
 800b316:	425b      	negs	r3, r3
 800b318:	61a3      	str	r3, [r4, #24]
 800b31a:	6923      	ldr	r3, [r4, #16]
 800b31c:	b943      	cbnz	r3, 800b330 <__swsetup_r+0xa8>
 800b31e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b322:	d1c4      	bne.n	800b2ae <__swsetup_r+0x26>
 800b324:	bd38      	pop	{r3, r4, r5, pc}
 800b326:	0781      	lsls	r1, r0, #30
 800b328:	bf58      	it	pl
 800b32a:	6963      	ldrpl	r3, [r4, #20]
 800b32c:	60a3      	str	r3, [r4, #8]
 800b32e:	e7f4      	b.n	800b31a <__swsetup_r+0x92>
 800b330:	2000      	movs	r0, #0
 800b332:	e7f7      	b.n	800b324 <__swsetup_r+0x9c>
 800b334:	20000088 	.word	0x20000088

0800b338 <memcmp>:
 800b338:	b510      	push	{r4, lr}
 800b33a:	3901      	subs	r1, #1
 800b33c:	4402      	add	r2, r0
 800b33e:	4290      	cmp	r0, r2
 800b340:	d101      	bne.n	800b346 <memcmp+0xe>
 800b342:	2000      	movs	r0, #0
 800b344:	e005      	b.n	800b352 <memcmp+0x1a>
 800b346:	7803      	ldrb	r3, [r0, #0]
 800b348:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800b34c:	42a3      	cmp	r3, r4
 800b34e:	d001      	beq.n	800b354 <memcmp+0x1c>
 800b350:	1b18      	subs	r0, r3, r4
 800b352:	bd10      	pop	{r4, pc}
 800b354:	3001      	adds	r0, #1
 800b356:	e7f2      	b.n	800b33e <memcmp+0x6>

0800b358 <memset>:
 800b358:	4402      	add	r2, r0
 800b35a:	4603      	mov	r3, r0
 800b35c:	4293      	cmp	r3, r2
 800b35e:	d100      	bne.n	800b362 <memset+0xa>
 800b360:	4770      	bx	lr
 800b362:	f803 1b01 	strb.w	r1, [r3], #1
 800b366:	e7f9      	b.n	800b35c <memset+0x4>

0800b368 <strcat>:
 800b368:	b510      	push	{r4, lr}
 800b36a:	4602      	mov	r2, r0
 800b36c:	7814      	ldrb	r4, [r2, #0]
 800b36e:	4613      	mov	r3, r2
 800b370:	3201      	adds	r2, #1
 800b372:	2c00      	cmp	r4, #0
 800b374:	d1fa      	bne.n	800b36c <strcat+0x4>
 800b376:	3b01      	subs	r3, #1
 800b378:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b37c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b380:	2a00      	cmp	r2, #0
 800b382:	d1f9      	bne.n	800b378 <strcat+0x10>
 800b384:	bd10      	pop	{r4, pc}

0800b386 <strncmp>:
 800b386:	b510      	push	{r4, lr}
 800b388:	b16a      	cbz	r2, 800b3a6 <strncmp+0x20>
 800b38a:	3901      	subs	r1, #1
 800b38c:	1884      	adds	r4, r0, r2
 800b38e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b392:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b396:	429a      	cmp	r2, r3
 800b398:	d103      	bne.n	800b3a2 <strncmp+0x1c>
 800b39a:	42a0      	cmp	r0, r4
 800b39c:	d001      	beq.n	800b3a2 <strncmp+0x1c>
 800b39e:	2a00      	cmp	r2, #0
 800b3a0:	d1f5      	bne.n	800b38e <strncmp+0x8>
 800b3a2:	1ad0      	subs	r0, r2, r3
 800b3a4:	bd10      	pop	{r4, pc}
 800b3a6:	4610      	mov	r0, r2
 800b3a8:	e7fc      	b.n	800b3a4 <strncmp+0x1e>

0800b3aa <strncpy>:
 800b3aa:	b510      	push	{r4, lr}
 800b3ac:	3901      	subs	r1, #1
 800b3ae:	4603      	mov	r3, r0
 800b3b0:	b132      	cbz	r2, 800b3c0 <strncpy+0x16>
 800b3b2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800b3b6:	f803 4b01 	strb.w	r4, [r3], #1
 800b3ba:	3a01      	subs	r2, #1
 800b3bc:	2c00      	cmp	r4, #0
 800b3be:	d1f7      	bne.n	800b3b0 <strncpy+0x6>
 800b3c0:	441a      	add	r2, r3
 800b3c2:	2100      	movs	r1, #0
 800b3c4:	4293      	cmp	r3, r2
 800b3c6:	d100      	bne.n	800b3ca <strncpy+0x20>
 800b3c8:	bd10      	pop	{r4, pc}
 800b3ca:	f803 1b01 	strb.w	r1, [r3], #1
 800b3ce:	e7f9      	b.n	800b3c4 <strncpy+0x1a>

0800b3d0 <strtok>:
 800b3d0:	4b16      	ldr	r3, [pc, #88]	; (800b42c <strtok+0x5c>)
 800b3d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b3d4:	681e      	ldr	r6, [r3, #0]
 800b3d6:	6c74      	ldr	r4, [r6, #68]	; 0x44
 800b3d8:	4605      	mov	r5, r0
 800b3da:	b9fc      	cbnz	r4, 800b41c <strtok+0x4c>
 800b3dc:	2050      	movs	r0, #80	; 0x50
 800b3de:	9101      	str	r1, [sp, #4]
 800b3e0:	f7ff fcd8 	bl	800ad94 <malloc>
 800b3e4:	9901      	ldr	r1, [sp, #4]
 800b3e6:	6470      	str	r0, [r6, #68]	; 0x44
 800b3e8:	4602      	mov	r2, r0
 800b3ea:	b920      	cbnz	r0, 800b3f6 <strtok+0x26>
 800b3ec:	4b10      	ldr	r3, [pc, #64]	; (800b430 <strtok+0x60>)
 800b3ee:	4811      	ldr	r0, [pc, #68]	; (800b434 <strtok+0x64>)
 800b3f0:	215b      	movs	r1, #91	; 0x5b
 800b3f2:	f000 f8f7 	bl	800b5e4 <__assert_func>
 800b3f6:	e9c0 4400 	strd	r4, r4, [r0]
 800b3fa:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800b3fe:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800b402:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800b406:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800b40a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800b40e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800b412:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800b416:	6184      	str	r4, [r0, #24]
 800b418:	7704      	strb	r4, [r0, #28]
 800b41a:	6244      	str	r4, [r0, #36]	; 0x24
 800b41c:	6c72      	ldr	r2, [r6, #68]	; 0x44
 800b41e:	2301      	movs	r3, #1
 800b420:	4628      	mov	r0, r5
 800b422:	b002      	add	sp, #8
 800b424:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b428:	f000 b806 	b.w	800b438 <__strtok_r>
 800b42c:	20000088 	.word	0x20000088
 800b430:	0800cb0c 	.word	0x0800cb0c
 800b434:	0800cb23 	.word	0x0800cb23

0800b438 <__strtok_r>:
 800b438:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b43a:	b908      	cbnz	r0, 800b440 <__strtok_r+0x8>
 800b43c:	6810      	ldr	r0, [r2, #0]
 800b43e:	b188      	cbz	r0, 800b464 <__strtok_r+0x2c>
 800b440:	4604      	mov	r4, r0
 800b442:	4620      	mov	r0, r4
 800b444:	f814 5b01 	ldrb.w	r5, [r4], #1
 800b448:	460f      	mov	r7, r1
 800b44a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800b44e:	b91e      	cbnz	r6, 800b458 <__strtok_r+0x20>
 800b450:	b965      	cbnz	r5, 800b46c <__strtok_r+0x34>
 800b452:	6015      	str	r5, [r2, #0]
 800b454:	4628      	mov	r0, r5
 800b456:	e005      	b.n	800b464 <__strtok_r+0x2c>
 800b458:	42b5      	cmp	r5, r6
 800b45a:	d1f6      	bne.n	800b44a <__strtok_r+0x12>
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d1f0      	bne.n	800b442 <__strtok_r+0xa>
 800b460:	6014      	str	r4, [r2, #0]
 800b462:	7003      	strb	r3, [r0, #0]
 800b464:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b466:	461c      	mov	r4, r3
 800b468:	e00c      	b.n	800b484 <__strtok_r+0x4c>
 800b46a:	b915      	cbnz	r5, 800b472 <__strtok_r+0x3a>
 800b46c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b470:	460e      	mov	r6, r1
 800b472:	f816 5b01 	ldrb.w	r5, [r6], #1
 800b476:	42ab      	cmp	r3, r5
 800b478:	d1f7      	bne.n	800b46a <__strtok_r+0x32>
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d0f3      	beq.n	800b466 <__strtok_r+0x2e>
 800b47e:	2300      	movs	r3, #0
 800b480:	f804 3c01 	strb.w	r3, [r4, #-1]
 800b484:	6014      	str	r4, [r2, #0]
 800b486:	e7ed      	b.n	800b464 <__strtok_r+0x2c>

0800b488 <strstr>:
 800b488:	780a      	ldrb	r2, [r1, #0]
 800b48a:	b570      	push	{r4, r5, r6, lr}
 800b48c:	b96a      	cbnz	r2, 800b4aa <strstr+0x22>
 800b48e:	bd70      	pop	{r4, r5, r6, pc}
 800b490:	429a      	cmp	r2, r3
 800b492:	d109      	bne.n	800b4a8 <strstr+0x20>
 800b494:	460c      	mov	r4, r1
 800b496:	4605      	mov	r5, r0
 800b498:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d0f6      	beq.n	800b48e <strstr+0x6>
 800b4a0:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800b4a4:	429e      	cmp	r6, r3
 800b4a6:	d0f7      	beq.n	800b498 <strstr+0x10>
 800b4a8:	3001      	adds	r0, #1
 800b4aa:	7803      	ldrb	r3, [r0, #0]
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d1ef      	bne.n	800b490 <strstr+0x8>
 800b4b0:	4618      	mov	r0, r3
 800b4b2:	e7ec      	b.n	800b48e <strstr+0x6>

0800b4b4 <_close_r>:
 800b4b4:	b538      	push	{r3, r4, r5, lr}
 800b4b6:	4d06      	ldr	r5, [pc, #24]	; (800b4d0 <_close_r+0x1c>)
 800b4b8:	2300      	movs	r3, #0
 800b4ba:	4604      	mov	r4, r0
 800b4bc:	4608      	mov	r0, r1
 800b4be:	602b      	str	r3, [r5, #0]
 800b4c0:	f7f6 fb88 	bl	8001bd4 <_close>
 800b4c4:	1c43      	adds	r3, r0, #1
 800b4c6:	d102      	bne.n	800b4ce <_close_r+0x1a>
 800b4c8:	682b      	ldr	r3, [r5, #0]
 800b4ca:	b103      	cbz	r3, 800b4ce <_close_r+0x1a>
 800b4cc:	6023      	str	r3, [r4, #0]
 800b4ce:	bd38      	pop	{r3, r4, r5, pc}
 800b4d0:	20006454 	.word	0x20006454

0800b4d4 <_lseek_r>:
 800b4d4:	b538      	push	{r3, r4, r5, lr}
 800b4d6:	4d07      	ldr	r5, [pc, #28]	; (800b4f4 <_lseek_r+0x20>)
 800b4d8:	4604      	mov	r4, r0
 800b4da:	4608      	mov	r0, r1
 800b4dc:	4611      	mov	r1, r2
 800b4de:	2200      	movs	r2, #0
 800b4e0:	602a      	str	r2, [r5, #0]
 800b4e2:	461a      	mov	r2, r3
 800b4e4:	f7f6 fb9d 	bl	8001c22 <_lseek>
 800b4e8:	1c43      	adds	r3, r0, #1
 800b4ea:	d102      	bne.n	800b4f2 <_lseek_r+0x1e>
 800b4ec:	682b      	ldr	r3, [r5, #0]
 800b4ee:	b103      	cbz	r3, 800b4f2 <_lseek_r+0x1e>
 800b4f0:	6023      	str	r3, [r4, #0]
 800b4f2:	bd38      	pop	{r3, r4, r5, pc}
 800b4f4:	20006454 	.word	0x20006454

0800b4f8 <_read_r>:
 800b4f8:	b538      	push	{r3, r4, r5, lr}
 800b4fa:	4d07      	ldr	r5, [pc, #28]	; (800b518 <_read_r+0x20>)
 800b4fc:	4604      	mov	r4, r0
 800b4fe:	4608      	mov	r0, r1
 800b500:	4611      	mov	r1, r2
 800b502:	2200      	movs	r2, #0
 800b504:	602a      	str	r2, [r5, #0]
 800b506:	461a      	mov	r2, r3
 800b508:	f7f6 fb2b 	bl	8001b62 <_read>
 800b50c:	1c43      	adds	r3, r0, #1
 800b50e:	d102      	bne.n	800b516 <_read_r+0x1e>
 800b510:	682b      	ldr	r3, [r5, #0]
 800b512:	b103      	cbz	r3, 800b516 <_read_r+0x1e>
 800b514:	6023      	str	r3, [r4, #0]
 800b516:	bd38      	pop	{r3, r4, r5, pc}
 800b518:	20006454 	.word	0x20006454

0800b51c <_sbrk_r>:
 800b51c:	b538      	push	{r3, r4, r5, lr}
 800b51e:	4d06      	ldr	r5, [pc, #24]	; (800b538 <_sbrk_r+0x1c>)
 800b520:	2300      	movs	r3, #0
 800b522:	4604      	mov	r4, r0
 800b524:	4608      	mov	r0, r1
 800b526:	602b      	str	r3, [r5, #0]
 800b528:	f7f6 fb88 	bl	8001c3c <_sbrk>
 800b52c:	1c43      	adds	r3, r0, #1
 800b52e:	d102      	bne.n	800b536 <_sbrk_r+0x1a>
 800b530:	682b      	ldr	r3, [r5, #0]
 800b532:	b103      	cbz	r3, 800b536 <_sbrk_r+0x1a>
 800b534:	6023      	str	r3, [r4, #0]
 800b536:	bd38      	pop	{r3, r4, r5, pc}
 800b538:	20006454 	.word	0x20006454

0800b53c <_write_r>:
 800b53c:	b538      	push	{r3, r4, r5, lr}
 800b53e:	4d07      	ldr	r5, [pc, #28]	; (800b55c <_write_r+0x20>)
 800b540:	4604      	mov	r4, r0
 800b542:	4608      	mov	r0, r1
 800b544:	4611      	mov	r1, r2
 800b546:	2200      	movs	r2, #0
 800b548:	602a      	str	r2, [r5, #0]
 800b54a:	461a      	mov	r2, r3
 800b54c:	f7f6 fb26 	bl	8001b9c <_write>
 800b550:	1c43      	adds	r3, r0, #1
 800b552:	d102      	bne.n	800b55a <_write_r+0x1e>
 800b554:	682b      	ldr	r3, [r5, #0]
 800b556:	b103      	cbz	r3, 800b55a <_write_r+0x1e>
 800b558:	6023      	str	r3, [r4, #0]
 800b55a:	bd38      	pop	{r3, r4, r5, pc}
 800b55c:	20006454 	.word	0x20006454

0800b560 <__errno>:
 800b560:	4b01      	ldr	r3, [pc, #4]	; (800b568 <__errno+0x8>)
 800b562:	6818      	ldr	r0, [r3, #0]
 800b564:	4770      	bx	lr
 800b566:	bf00      	nop
 800b568:	20000088 	.word	0x20000088

0800b56c <__libc_init_array>:
 800b56c:	b570      	push	{r4, r5, r6, lr}
 800b56e:	4d0d      	ldr	r5, [pc, #52]	; (800b5a4 <__libc_init_array+0x38>)
 800b570:	4c0d      	ldr	r4, [pc, #52]	; (800b5a8 <__libc_init_array+0x3c>)
 800b572:	1b64      	subs	r4, r4, r5
 800b574:	10a4      	asrs	r4, r4, #2
 800b576:	2600      	movs	r6, #0
 800b578:	42a6      	cmp	r6, r4
 800b57a:	d109      	bne.n	800b590 <__libc_init_array+0x24>
 800b57c:	4d0b      	ldr	r5, [pc, #44]	; (800b5ac <__libc_init_array+0x40>)
 800b57e:	4c0c      	ldr	r4, [pc, #48]	; (800b5b0 <__libc_init_array+0x44>)
 800b580:	f000 ff22 	bl	800c3c8 <_init>
 800b584:	1b64      	subs	r4, r4, r5
 800b586:	10a4      	asrs	r4, r4, #2
 800b588:	2600      	movs	r6, #0
 800b58a:	42a6      	cmp	r6, r4
 800b58c:	d105      	bne.n	800b59a <__libc_init_array+0x2e>
 800b58e:	bd70      	pop	{r4, r5, r6, pc}
 800b590:	f855 3b04 	ldr.w	r3, [r5], #4
 800b594:	4798      	blx	r3
 800b596:	3601      	adds	r6, #1
 800b598:	e7ee      	b.n	800b578 <__libc_init_array+0xc>
 800b59a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b59e:	4798      	blx	r3
 800b5a0:	3601      	adds	r6, #1
 800b5a2:	e7f2      	b.n	800b58a <__libc_init_array+0x1e>
 800b5a4:	0800cbf4 	.word	0x0800cbf4
 800b5a8:	0800cbf4 	.word	0x0800cbf4
 800b5ac:	0800cbf4 	.word	0x0800cbf4
 800b5b0:	0800cbf8 	.word	0x0800cbf8

0800b5b4 <__retarget_lock_acquire_recursive>:
 800b5b4:	4770      	bx	lr

0800b5b6 <__retarget_lock_release_recursive>:
 800b5b6:	4770      	bx	lr

0800b5b8 <strcpy>:
 800b5b8:	4603      	mov	r3, r0
 800b5ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b5be:	f803 2b01 	strb.w	r2, [r3], #1
 800b5c2:	2a00      	cmp	r2, #0
 800b5c4:	d1f9      	bne.n	800b5ba <strcpy+0x2>
 800b5c6:	4770      	bx	lr

0800b5c8 <memcpy>:
 800b5c8:	440a      	add	r2, r1
 800b5ca:	4291      	cmp	r1, r2
 800b5cc:	f100 33ff 	add.w	r3, r0, #4294967295
 800b5d0:	d100      	bne.n	800b5d4 <memcpy+0xc>
 800b5d2:	4770      	bx	lr
 800b5d4:	b510      	push	{r4, lr}
 800b5d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b5da:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b5de:	4291      	cmp	r1, r2
 800b5e0:	d1f9      	bne.n	800b5d6 <memcpy+0xe>
 800b5e2:	bd10      	pop	{r4, pc}

0800b5e4 <__assert_func>:
 800b5e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b5e6:	4614      	mov	r4, r2
 800b5e8:	461a      	mov	r2, r3
 800b5ea:	4b09      	ldr	r3, [pc, #36]	; (800b610 <__assert_func+0x2c>)
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	4605      	mov	r5, r0
 800b5f0:	68d8      	ldr	r0, [r3, #12]
 800b5f2:	b14c      	cbz	r4, 800b608 <__assert_func+0x24>
 800b5f4:	4b07      	ldr	r3, [pc, #28]	; (800b614 <__assert_func+0x30>)
 800b5f6:	9100      	str	r1, [sp, #0]
 800b5f8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b5fc:	4906      	ldr	r1, [pc, #24]	; (800b618 <__assert_func+0x34>)
 800b5fe:	462b      	mov	r3, r5
 800b600:	f000 fd34 	bl	800c06c <fiprintf>
 800b604:	f000 fe16 	bl	800c234 <abort>
 800b608:	4b04      	ldr	r3, [pc, #16]	; (800b61c <__assert_func+0x38>)
 800b60a:	461c      	mov	r4, r3
 800b60c:	e7f3      	b.n	800b5f6 <__assert_func+0x12>
 800b60e:	bf00      	nop
 800b610:	20000088 	.word	0x20000088
 800b614:	0800cb7d 	.word	0x0800cb7d
 800b618:	0800cb8a 	.word	0x0800cb8a
 800b61c:	0800cbb8 	.word	0x0800cbb8

0800b620 <_free_r>:
 800b620:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b622:	2900      	cmp	r1, #0
 800b624:	d044      	beq.n	800b6b0 <_free_r+0x90>
 800b626:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b62a:	9001      	str	r0, [sp, #4]
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	f1a1 0404 	sub.w	r4, r1, #4
 800b632:	bfb8      	it	lt
 800b634:	18e4      	addlt	r4, r4, r3
 800b636:	f7ff fc55 	bl	800aee4 <__malloc_lock>
 800b63a:	4a1e      	ldr	r2, [pc, #120]	; (800b6b4 <_free_r+0x94>)
 800b63c:	9801      	ldr	r0, [sp, #4]
 800b63e:	6813      	ldr	r3, [r2, #0]
 800b640:	b933      	cbnz	r3, 800b650 <_free_r+0x30>
 800b642:	6063      	str	r3, [r4, #4]
 800b644:	6014      	str	r4, [r2, #0]
 800b646:	b003      	add	sp, #12
 800b648:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b64c:	f7ff bc50 	b.w	800aef0 <__malloc_unlock>
 800b650:	42a3      	cmp	r3, r4
 800b652:	d908      	bls.n	800b666 <_free_r+0x46>
 800b654:	6825      	ldr	r5, [r4, #0]
 800b656:	1961      	adds	r1, r4, r5
 800b658:	428b      	cmp	r3, r1
 800b65a:	bf01      	itttt	eq
 800b65c:	6819      	ldreq	r1, [r3, #0]
 800b65e:	685b      	ldreq	r3, [r3, #4]
 800b660:	1949      	addeq	r1, r1, r5
 800b662:	6021      	streq	r1, [r4, #0]
 800b664:	e7ed      	b.n	800b642 <_free_r+0x22>
 800b666:	461a      	mov	r2, r3
 800b668:	685b      	ldr	r3, [r3, #4]
 800b66a:	b10b      	cbz	r3, 800b670 <_free_r+0x50>
 800b66c:	42a3      	cmp	r3, r4
 800b66e:	d9fa      	bls.n	800b666 <_free_r+0x46>
 800b670:	6811      	ldr	r1, [r2, #0]
 800b672:	1855      	adds	r5, r2, r1
 800b674:	42a5      	cmp	r5, r4
 800b676:	d10b      	bne.n	800b690 <_free_r+0x70>
 800b678:	6824      	ldr	r4, [r4, #0]
 800b67a:	4421      	add	r1, r4
 800b67c:	1854      	adds	r4, r2, r1
 800b67e:	42a3      	cmp	r3, r4
 800b680:	6011      	str	r1, [r2, #0]
 800b682:	d1e0      	bne.n	800b646 <_free_r+0x26>
 800b684:	681c      	ldr	r4, [r3, #0]
 800b686:	685b      	ldr	r3, [r3, #4]
 800b688:	6053      	str	r3, [r2, #4]
 800b68a:	440c      	add	r4, r1
 800b68c:	6014      	str	r4, [r2, #0]
 800b68e:	e7da      	b.n	800b646 <_free_r+0x26>
 800b690:	d902      	bls.n	800b698 <_free_r+0x78>
 800b692:	230c      	movs	r3, #12
 800b694:	6003      	str	r3, [r0, #0]
 800b696:	e7d6      	b.n	800b646 <_free_r+0x26>
 800b698:	6825      	ldr	r5, [r4, #0]
 800b69a:	1961      	adds	r1, r4, r5
 800b69c:	428b      	cmp	r3, r1
 800b69e:	bf04      	itt	eq
 800b6a0:	6819      	ldreq	r1, [r3, #0]
 800b6a2:	685b      	ldreq	r3, [r3, #4]
 800b6a4:	6063      	str	r3, [r4, #4]
 800b6a6:	bf04      	itt	eq
 800b6a8:	1949      	addeq	r1, r1, r5
 800b6aa:	6021      	streq	r1, [r4, #0]
 800b6ac:	6054      	str	r4, [r2, #4]
 800b6ae:	e7ca      	b.n	800b646 <_free_r+0x26>
 800b6b0:	b003      	add	sp, #12
 800b6b2:	bd30      	pop	{r4, r5, pc}
 800b6b4:	20006310 	.word	0x20006310

0800b6b8 <__ssputs_r>:
 800b6b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b6bc:	688e      	ldr	r6, [r1, #8]
 800b6be:	461f      	mov	r7, r3
 800b6c0:	42be      	cmp	r6, r7
 800b6c2:	680b      	ldr	r3, [r1, #0]
 800b6c4:	4682      	mov	sl, r0
 800b6c6:	460c      	mov	r4, r1
 800b6c8:	4690      	mov	r8, r2
 800b6ca:	d82c      	bhi.n	800b726 <__ssputs_r+0x6e>
 800b6cc:	898a      	ldrh	r2, [r1, #12]
 800b6ce:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b6d2:	d026      	beq.n	800b722 <__ssputs_r+0x6a>
 800b6d4:	6965      	ldr	r5, [r4, #20]
 800b6d6:	6909      	ldr	r1, [r1, #16]
 800b6d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b6dc:	eba3 0901 	sub.w	r9, r3, r1
 800b6e0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b6e4:	1c7b      	adds	r3, r7, #1
 800b6e6:	444b      	add	r3, r9
 800b6e8:	106d      	asrs	r5, r5, #1
 800b6ea:	429d      	cmp	r5, r3
 800b6ec:	bf38      	it	cc
 800b6ee:	461d      	movcc	r5, r3
 800b6f0:	0553      	lsls	r3, r2, #21
 800b6f2:	d527      	bpl.n	800b744 <__ssputs_r+0x8c>
 800b6f4:	4629      	mov	r1, r5
 800b6f6:	f7ff fb75 	bl	800ade4 <_malloc_r>
 800b6fa:	4606      	mov	r6, r0
 800b6fc:	b360      	cbz	r0, 800b758 <__ssputs_r+0xa0>
 800b6fe:	6921      	ldr	r1, [r4, #16]
 800b700:	464a      	mov	r2, r9
 800b702:	f7ff ff61 	bl	800b5c8 <memcpy>
 800b706:	89a3      	ldrh	r3, [r4, #12]
 800b708:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b70c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b710:	81a3      	strh	r3, [r4, #12]
 800b712:	6126      	str	r6, [r4, #16]
 800b714:	6165      	str	r5, [r4, #20]
 800b716:	444e      	add	r6, r9
 800b718:	eba5 0509 	sub.w	r5, r5, r9
 800b71c:	6026      	str	r6, [r4, #0]
 800b71e:	60a5      	str	r5, [r4, #8]
 800b720:	463e      	mov	r6, r7
 800b722:	42be      	cmp	r6, r7
 800b724:	d900      	bls.n	800b728 <__ssputs_r+0x70>
 800b726:	463e      	mov	r6, r7
 800b728:	6820      	ldr	r0, [r4, #0]
 800b72a:	4632      	mov	r2, r6
 800b72c:	4641      	mov	r1, r8
 800b72e:	f000 fd45 	bl	800c1bc <memmove>
 800b732:	68a3      	ldr	r3, [r4, #8]
 800b734:	1b9b      	subs	r3, r3, r6
 800b736:	60a3      	str	r3, [r4, #8]
 800b738:	6823      	ldr	r3, [r4, #0]
 800b73a:	4433      	add	r3, r6
 800b73c:	6023      	str	r3, [r4, #0]
 800b73e:	2000      	movs	r0, #0
 800b740:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b744:	462a      	mov	r2, r5
 800b746:	f000 fd7c 	bl	800c242 <_realloc_r>
 800b74a:	4606      	mov	r6, r0
 800b74c:	2800      	cmp	r0, #0
 800b74e:	d1e0      	bne.n	800b712 <__ssputs_r+0x5a>
 800b750:	6921      	ldr	r1, [r4, #16]
 800b752:	4650      	mov	r0, sl
 800b754:	f7ff ff64 	bl	800b620 <_free_r>
 800b758:	230c      	movs	r3, #12
 800b75a:	f8ca 3000 	str.w	r3, [sl]
 800b75e:	89a3      	ldrh	r3, [r4, #12]
 800b760:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b764:	81a3      	strh	r3, [r4, #12]
 800b766:	f04f 30ff 	mov.w	r0, #4294967295
 800b76a:	e7e9      	b.n	800b740 <__ssputs_r+0x88>

0800b76c <_svfiprintf_r>:
 800b76c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b770:	4698      	mov	r8, r3
 800b772:	898b      	ldrh	r3, [r1, #12]
 800b774:	061b      	lsls	r3, r3, #24
 800b776:	b09d      	sub	sp, #116	; 0x74
 800b778:	4607      	mov	r7, r0
 800b77a:	460d      	mov	r5, r1
 800b77c:	4614      	mov	r4, r2
 800b77e:	d50e      	bpl.n	800b79e <_svfiprintf_r+0x32>
 800b780:	690b      	ldr	r3, [r1, #16]
 800b782:	b963      	cbnz	r3, 800b79e <_svfiprintf_r+0x32>
 800b784:	2140      	movs	r1, #64	; 0x40
 800b786:	f7ff fb2d 	bl	800ade4 <_malloc_r>
 800b78a:	6028      	str	r0, [r5, #0]
 800b78c:	6128      	str	r0, [r5, #16]
 800b78e:	b920      	cbnz	r0, 800b79a <_svfiprintf_r+0x2e>
 800b790:	230c      	movs	r3, #12
 800b792:	603b      	str	r3, [r7, #0]
 800b794:	f04f 30ff 	mov.w	r0, #4294967295
 800b798:	e0d0      	b.n	800b93c <_svfiprintf_r+0x1d0>
 800b79a:	2340      	movs	r3, #64	; 0x40
 800b79c:	616b      	str	r3, [r5, #20]
 800b79e:	2300      	movs	r3, #0
 800b7a0:	9309      	str	r3, [sp, #36]	; 0x24
 800b7a2:	2320      	movs	r3, #32
 800b7a4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b7a8:	f8cd 800c 	str.w	r8, [sp, #12]
 800b7ac:	2330      	movs	r3, #48	; 0x30
 800b7ae:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b954 <_svfiprintf_r+0x1e8>
 800b7b2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b7b6:	f04f 0901 	mov.w	r9, #1
 800b7ba:	4623      	mov	r3, r4
 800b7bc:	469a      	mov	sl, r3
 800b7be:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b7c2:	b10a      	cbz	r2, 800b7c8 <_svfiprintf_r+0x5c>
 800b7c4:	2a25      	cmp	r2, #37	; 0x25
 800b7c6:	d1f9      	bne.n	800b7bc <_svfiprintf_r+0x50>
 800b7c8:	ebba 0b04 	subs.w	fp, sl, r4
 800b7cc:	d00b      	beq.n	800b7e6 <_svfiprintf_r+0x7a>
 800b7ce:	465b      	mov	r3, fp
 800b7d0:	4622      	mov	r2, r4
 800b7d2:	4629      	mov	r1, r5
 800b7d4:	4638      	mov	r0, r7
 800b7d6:	f7ff ff6f 	bl	800b6b8 <__ssputs_r>
 800b7da:	3001      	adds	r0, #1
 800b7dc:	f000 80a9 	beq.w	800b932 <_svfiprintf_r+0x1c6>
 800b7e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b7e2:	445a      	add	r2, fp
 800b7e4:	9209      	str	r2, [sp, #36]	; 0x24
 800b7e6:	f89a 3000 	ldrb.w	r3, [sl]
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	f000 80a1 	beq.w	800b932 <_svfiprintf_r+0x1c6>
 800b7f0:	2300      	movs	r3, #0
 800b7f2:	f04f 32ff 	mov.w	r2, #4294967295
 800b7f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b7fa:	f10a 0a01 	add.w	sl, sl, #1
 800b7fe:	9304      	str	r3, [sp, #16]
 800b800:	9307      	str	r3, [sp, #28]
 800b802:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b806:	931a      	str	r3, [sp, #104]	; 0x68
 800b808:	4654      	mov	r4, sl
 800b80a:	2205      	movs	r2, #5
 800b80c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b810:	4850      	ldr	r0, [pc, #320]	; (800b954 <_svfiprintf_r+0x1e8>)
 800b812:	f7f4 fcfd 	bl	8000210 <memchr>
 800b816:	9a04      	ldr	r2, [sp, #16]
 800b818:	b9d8      	cbnz	r0, 800b852 <_svfiprintf_r+0xe6>
 800b81a:	06d0      	lsls	r0, r2, #27
 800b81c:	bf44      	itt	mi
 800b81e:	2320      	movmi	r3, #32
 800b820:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b824:	0711      	lsls	r1, r2, #28
 800b826:	bf44      	itt	mi
 800b828:	232b      	movmi	r3, #43	; 0x2b
 800b82a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b82e:	f89a 3000 	ldrb.w	r3, [sl]
 800b832:	2b2a      	cmp	r3, #42	; 0x2a
 800b834:	d015      	beq.n	800b862 <_svfiprintf_r+0xf6>
 800b836:	9a07      	ldr	r2, [sp, #28]
 800b838:	4654      	mov	r4, sl
 800b83a:	2000      	movs	r0, #0
 800b83c:	f04f 0c0a 	mov.w	ip, #10
 800b840:	4621      	mov	r1, r4
 800b842:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b846:	3b30      	subs	r3, #48	; 0x30
 800b848:	2b09      	cmp	r3, #9
 800b84a:	d94d      	bls.n	800b8e8 <_svfiprintf_r+0x17c>
 800b84c:	b1b0      	cbz	r0, 800b87c <_svfiprintf_r+0x110>
 800b84e:	9207      	str	r2, [sp, #28]
 800b850:	e014      	b.n	800b87c <_svfiprintf_r+0x110>
 800b852:	eba0 0308 	sub.w	r3, r0, r8
 800b856:	fa09 f303 	lsl.w	r3, r9, r3
 800b85a:	4313      	orrs	r3, r2
 800b85c:	9304      	str	r3, [sp, #16]
 800b85e:	46a2      	mov	sl, r4
 800b860:	e7d2      	b.n	800b808 <_svfiprintf_r+0x9c>
 800b862:	9b03      	ldr	r3, [sp, #12]
 800b864:	1d19      	adds	r1, r3, #4
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	9103      	str	r1, [sp, #12]
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	bfbb      	ittet	lt
 800b86e:	425b      	neglt	r3, r3
 800b870:	f042 0202 	orrlt.w	r2, r2, #2
 800b874:	9307      	strge	r3, [sp, #28]
 800b876:	9307      	strlt	r3, [sp, #28]
 800b878:	bfb8      	it	lt
 800b87a:	9204      	strlt	r2, [sp, #16]
 800b87c:	7823      	ldrb	r3, [r4, #0]
 800b87e:	2b2e      	cmp	r3, #46	; 0x2e
 800b880:	d10c      	bne.n	800b89c <_svfiprintf_r+0x130>
 800b882:	7863      	ldrb	r3, [r4, #1]
 800b884:	2b2a      	cmp	r3, #42	; 0x2a
 800b886:	d134      	bne.n	800b8f2 <_svfiprintf_r+0x186>
 800b888:	9b03      	ldr	r3, [sp, #12]
 800b88a:	1d1a      	adds	r2, r3, #4
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	9203      	str	r2, [sp, #12]
 800b890:	2b00      	cmp	r3, #0
 800b892:	bfb8      	it	lt
 800b894:	f04f 33ff 	movlt.w	r3, #4294967295
 800b898:	3402      	adds	r4, #2
 800b89a:	9305      	str	r3, [sp, #20]
 800b89c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800b964 <_svfiprintf_r+0x1f8>
 800b8a0:	7821      	ldrb	r1, [r4, #0]
 800b8a2:	2203      	movs	r2, #3
 800b8a4:	4650      	mov	r0, sl
 800b8a6:	f7f4 fcb3 	bl	8000210 <memchr>
 800b8aa:	b138      	cbz	r0, 800b8bc <_svfiprintf_r+0x150>
 800b8ac:	9b04      	ldr	r3, [sp, #16]
 800b8ae:	eba0 000a 	sub.w	r0, r0, sl
 800b8b2:	2240      	movs	r2, #64	; 0x40
 800b8b4:	4082      	lsls	r2, r0
 800b8b6:	4313      	orrs	r3, r2
 800b8b8:	3401      	adds	r4, #1
 800b8ba:	9304      	str	r3, [sp, #16]
 800b8bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8c0:	4825      	ldr	r0, [pc, #148]	; (800b958 <_svfiprintf_r+0x1ec>)
 800b8c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b8c6:	2206      	movs	r2, #6
 800b8c8:	f7f4 fca2 	bl	8000210 <memchr>
 800b8cc:	2800      	cmp	r0, #0
 800b8ce:	d038      	beq.n	800b942 <_svfiprintf_r+0x1d6>
 800b8d0:	4b22      	ldr	r3, [pc, #136]	; (800b95c <_svfiprintf_r+0x1f0>)
 800b8d2:	bb1b      	cbnz	r3, 800b91c <_svfiprintf_r+0x1b0>
 800b8d4:	9b03      	ldr	r3, [sp, #12]
 800b8d6:	3307      	adds	r3, #7
 800b8d8:	f023 0307 	bic.w	r3, r3, #7
 800b8dc:	3308      	adds	r3, #8
 800b8de:	9303      	str	r3, [sp, #12]
 800b8e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8e2:	4433      	add	r3, r6
 800b8e4:	9309      	str	r3, [sp, #36]	; 0x24
 800b8e6:	e768      	b.n	800b7ba <_svfiprintf_r+0x4e>
 800b8e8:	fb0c 3202 	mla	r2, ip, r2, r3
 800b8ec:	460c      	mov	r4, r1
 800b8ee:	2001      	movs	r0, #1
 800b8f0:	e7a6      	b.n	800b840 <_svfiprintf_r+0xd4>
 800b8f2:	2300      	movs	r3, #0
 800b8f4:	3401      	adds	r4, #1
 800b8f6:	9305      	str	r3, [sp, #20]
 800b8f8:	4619      	mov	r1, r3
 800b8fa:	f04f 0c0a 	mov.w	ip, #10
 800b8fe:	4620      	mov	r0, r4
 800b900:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b904:	3a30      	subs	r2, #48	; 0x30
 800b906:	2a09      	cmp	r2, #9
 800b908:	d903      	bls.n	800b912 <_svfiprintf_r+0x1a6>
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d0c6      	beq.n	800b89c <_svfiprintf_r+0x130>
 800b90e:	9105      	str	r1, [sp, #20]
 800b910:	e7c4      	b.n	800b89c <_svfiprintf_r+0x130>
 800b912:	fb0c 2101 	mla	r1, ip, r1, r2
 800b916:	4604      	mov	r4, r0
 800b918:	2301      	movs	r3, #1
 800b91a:	e7f0      	b.n	800b8fe <_svfiprintf_r+0x192>
 800b91c:	ab03      	add	r3, sp, #12
 800b91e:	9300      	str	r3, [sp, #0]
 800b920:	462a      	mov	r2, r5
 800b922:	4b0f      	ldr	r3, [pc, #60]	; (800b960 <_svfiprintf_r+0x1f4>)
 800b924:	a904      	add	r1, sp, #16
 800b926:	4638      	mov	r0, r7
 800b928:	f3af 8000 	nop.w
 800b92c:	1c42      	adds	r2, r0, #1
 800b92e:	4606      	mov	r6, r0
 800b930:	d1d6      	bne.n	800b8e0 <_svfiprintf_r+0x174>
 800b932:	89ab      	ldrh	r3, [r5, #12]
 800b934:	065b      	lsls	r3, r3, #25
 800b936:	f53f af2d 	bmi.w	800b794 <_svfiprintf_r+0x28>
 800b93a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b93c:	b01d      	add	sp, #116	; 0x74
 800b93e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b942:	ab03      	add	r3, sp, #12
 800b944:	9300      	str	r3, [sp, #0]
 800b946:	462a      	mov	r2, r5
 800b948:	4b05      	ldr	r3, [pc, #20]	; (800b960 <_svfiprintf_r+0x1f4>)
 800b94a:	a904      	add	r1, sp, #16
 800b94c:	4638      	mov	r0, r7
 800b94e:	f000 f9bd 	bl	800bccc <_printf_i>
 800b952:	e7eb      	b.n	800b92c <_svfiprintf_r+0x1c0>
 800b954:	0800cbb9 	.word	0x0800cbb9
 800b958:	0800cbc3 	.word	0x0800cbc3
 800b95c:	00000000 	.word	0x00000000
 800b960:	0800b6b9 	.word	0x0800b6b9
 800b964:	0800cbbf 	.word	0x0800cbbf

0800b968 <__sfputc_r>:
 800b968:	6893      	ldr	r3, [r2, #8]
 800b96a:	3b01      	subs	r3, #1
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	b410      	push	{r4}
 800b970:	6093      	str	r3, [r2, #8]
 800b972:	da08      	bge.n	800b986 <__sfputc_r+0x1e>
 800b974:	6994      	ldr	r4, [r2, #24]
 800b976:	42a3      	cmp	r3, r4
 800b978:	db01      	blt.n	800b97e <__sfputc_r+0x16>
 800b97a:	290a      	cmp	r1, #10
 800b97c:	d103      	bne.n	800b986 <__sfputc_r+0x1e>
 800b97e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b982:	f7ff bc44 	b.w	800b20e <__swbuf_r>
 800b986:	6813      	ldr	r3, [r2, #0]
 800b988:	1c58      	adds	r0, r3, #1
 800b98a:	6010      	str	r0, [r2, #0]
 800b98c:	7019      	strb	r1, [r3, #0]
 800b98e:	4608      	mov	r0, r1
 800b990:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b994:	4770      	bx	lr

0800b996 <__sfputs_r>:
 800b996:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b998:	4606      	mov	r6, r0
 800b99a:	460f      	mov	r7, r1
 800b99c:	4614      	mov	r4, r2
 800b99e:	18d5      	adds	r5, r2, r3
 800b9a0:	42ac      	cmp	r4, r5
 800b9a2:	d101      	bne.n	800b9a8 <__sfputs_r+0x12>
 800b9a4:	2000      	movs	r0, #0
 800b9a6:	e007      	b.n	800b9b8 <__sfputs_r+0x22>
 800b9a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9ac:	463a      	mov	r2, r7
 800b9ae:	4630      	mov	r0, r6
 800b9b0:	f7ff ffda 	bl	800b968 <__sfputc_r>
 800b9b4:	1c43      	adds	r3, r0, #1
 800b9b6:	d1f3      	bne.n	800b9a0 <__sfputs_r+0xa>
 800b9b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b9bc <_vfiprintf_r>:
 800b9bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9c0:	460d      	mov	r5, r1
 800b9c2:	b09d      	sub	sp, #116	; 0x74
 800b9c4:	4614      	mov	r4, r2
 800b9c6:	4698      	mov	r8, r3
 800b9c8:	4606      	mov	r6, r0
 800b9ca:	b118      	cbz	r0, 800b9d4 <_vfiprintf_r+0x18>
 800b9cc:	6a03      	ldr	r3, [r0, #32]
 800b9ce:	b90b      	cbnz	r3, 800b9d4 <_vfiprintf_r+0x18>
 800b9d0:	f7ff fb0e 	bl	800aff0 <__sinit>
 800b9d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b9d6:	07d9      	lsls	r1, r3, #31
 800b9d8:	d405      	bmi.n	800b9e6 <_vfiprintf_r+0x2a>
 800b9da:	89ab      	ldrh	r3, [r5, #12]
 800b9dc:	059a      	lsls	r2, r3, #22
 800b9de:	d402      	bmi.n	800b9e6 <_vfiprintf_r+0x2a>
 800b9e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b9e2:	f7ff fde7 	bl	800b5b4 <__retarget_lock_acquire_recursive>
 800b9e6:	89ab      	ldrh	r3, [r5, #12]
 800b9e8:	071b      	lsls	r3, r3, #28
 800b9ea:	d501      	bpl.n	800b9f0 <_vfiprintf_r+0x34>
 800b9ec:	692b      	ldr	r3, [r5, #16]
 800b9ee:	b99b      	cbnz	r3, 800ba18 <_vfiprintf_r+0x5c>
 800b9f0:	4629      	mov	r1, r5
 800b9f2:	4630      	mov	r0, r6
 800b9f4:	f7ff fc48 	bl	800b288 <__swsetup_r>
 800b9f8:	b170      	cbz	r0, 800ba18 <_vfiprintf_r+0x5c>
 800b9fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b9fc:	07dc      	lsls	r4, r3, #31
 800b9fe:	d504      	bpl.n	800ba0a <_vfiprintf_r+0x4e>
 800ba00:	f04f 30ff 	mov.w	r0, #4294967295
 800ba04:	b01d      	add	sp, #116	; 0x74
 800ba06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba0a:	89ab      	ldrh	r3, [r5, #12]
 800ba0c:	0598      	lsls	r0, r3, #22
 800ba0e:	d4f7      	bmi.n	800ba00 <_vfiprintf_r+0x44>
 800ba10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ba12:	f7ff fdd0 	bl	800b5b6 <__retarget_lock_release_recursive>
 800ba16:	e7f3      	b.n	800ba00 <_vfiprintf_r+0x44>
 800ba18:	2300      	movs	r3, #0
 800ba1a:	9309      	str	r3, [sp, #36]	; 0x24
 800ba1c:	2320      	movs	r3, #32
 800ba1e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ba22:	f8cd 800c 	str.w	r8, [sp, #12]
 800ba26:	2330      	movs	r3, #48	; 0x30
 800ba28:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800bbdc <_vfiprintf_r+0x220>
 800ba2c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ba30:	f04f 0901 	mov.w	r9, #1
 800ba34:	4623      	mov	r3, r4
 800ba36:	469a      	mov	sl, r3
 800ba38:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ba3c:	b10a      	cbz	r2, 800ba42 <_vfiprintf_r+0x86>
 800ba3e:	2a25      	cmp	r2, #37	; 0x25
 800ba40:	d1f9      	bne.n	800ba36 <_vfiprintf_r+0x7a>
 800ba42:	ebba 0b04 	subs.w	fp, sl, r4
 800ba46:	d00b      	beq.n	800ba60 <_vfiprintf_r+0xa4>
 800ba48:	465b      	mov	r3, fp
 800ba4a:	4622      	mov	r2, r4
 800ba4c:	4629      	mov	r1, r5
 800ba4e:	4630      	mov	r0, r6
 800ba50:	f7ff ffa1 	bl	800b996 <__sfputs_r>
 800ba54:	3001      	adds	r0, #1
 800ba56:	f000 80a9 	beq.w	800bbac <_vfiprintf_r+0x1f0>
 800ba5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ba5c:	445a      	add	r2, fp
 800ba5e:	9209      	str	r2, [sp, #36]	; 0x24
 800ba60:	f89a 3000 	ldrb.w	r3, [sl]
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	f000 80a1 	beq.w	800bbac <_vfiprintf_r+0x1f0>
 800ba6a:	2300      	movs	r3, #0
 800ba6c:	f04f 32ff 	mov.w	r2, #4294967295
 800ba70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ba74:	f10a 0a01 	add.w	sl, sl, #1
 800ba78:	9304      	str	r3, [sp, #16]
 800ba7a:	9307      	str	r3, [sp, #28]
 800ba7c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ba80:	931a      	str	r3, [sp, #104]	; 0x68
 800ba82:	4654      	mov	r4, sl
 800ba84:	2205      	movs	r2, #5
 800ba86:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba8a:	4854      	ldr	r0, [pc, #336]	; (800bbdc <_vfiprintf_r+0x220>)
 800ba8c:	f7f4 fbc0 	bl	8000210 <memchr>
 800ba90:	9a04      	ldr	r2, [sp, #16]
 800ba92:	b9d8      	cbnz	r0, 800bacc <_vfiprintf_r+0x110>
 800ba94:	06d1      	lsls	r1, r2, #27
 800ba96:	bf44      	itt	mi
 800ba98:	2320      	movmi	r3, #32
 800ba9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ba9e:	0713      	lsls	r3, r2, #28
 800baa0:	bf44      	itt	mi
 800baa2:	232b      	movmi	r3, #43	; 0x2b
 800baa4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800baa8:	f89a 3000 	ldrb.w	r3, [sl]
 800baac:	2b2a      	cmp	r3, #42	; 0x2a
 800baae:	d015      	beq.n	800badc <_vfiprintf_r+0x120>
 800bab0:	9a07      	ldr	r2, [sp, #28]
 800bab2:	4654      	mov	r4, sl
 800bab4:	2000      	movs	r0, #0
 800bab6:	f04f 0c0a 	mov.w	ip, #10
 800baba:	4621      	mov	r1, r4
 800babc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bac0:	3b30      	subs	r3, #48	; 0x30
 800bac2:	2b09      	cmp	r3, #9
 800bac4:	d94d      	bls.n	800bb62 <_vfiprintf_r+0x1a6>
 800bac6:	b1b0      	cbz	r0, 800baf6 <_vfiprintf_r+0x13a>
 800bac8:	9207      	str	r2, [sp, #28]
 800baca:	e014      	b.n	800baf6 <_vfiprintf_r+0x13a>
 800bacc:	eba0 0308 	sub.w	r3, r0, r8
 800bad0:	fa09 f303 	lsl.w	r3, r9, r3
 800bad4:	4313      	orrs	r3, r2
 800bad6:	9304      	str	r3, [sp, #16]
 800bad8:	46a2      	mov	sl, r4
 800bada:	e7d2      	b.n	800ba82 <_vfiprintf_r+0xc6>
 800badc:	9b03      	ldr	r3, [sp, #12]
 800bade:	1d19      	adds	r1, r3, #4
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	9103      	str	r1, [sp, #12]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	bfbb      	ittet	lt
 800bae8:	425b      	neglt	r3, r3
 800baea:	f042 0202 	orrlt.w	r2, r2, #2
 800baee:	9307      	strge	r3, [sp, #28]
 800baf0:	9307      	strlt	r3, [sp, #28]
 800baf2:	bfb8      	it	lt
 800baf4:	9204      	strlt	r2, [sp, #16]
 800baf6:	7823      	ldrb	r3, [r4, #0]
 800baf8:	2b2e      	cmp	r3, #46	; 0x2e
 800bafa:	d10c      	bne.n	800bb16 <_vfiprintf_r+0x15a>
 800bafc:	7863      	ldrb	r3, [r4, #1]
 800bafe:	2b2a      	cmp	r3, #42	; 0x2a
 800bb00:	d134      	bne.n	800bb6c <_vfiprintf_r+0x1b0>
 800bb02:	9b03      	ldr	r3, [sp, #12]
 800bb04:	1d1a      	adds	r2, r3, #4
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	9203      	str	r2, [sp, #12]
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	bfb8      	it	lt
 800bb0e:	f04f 33ff 	movlt.w	r3, #4294967295
 800bb12:	3402      	adds	r4, #2
 800bb14:	9305      	str	r3, [sp, #20]
 800bb16:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800bbec <_vfiprintf_r+0x230>
 800bb1a:	7821      	ldrb	r1, [r4, #0]
 800bb1c:	2203      	movs	r2, #3
 800bb1e:	4650      	mov	r0, sl
 800bb20:	f7f4 fb76 	bl	8000210 <memchr>
 800bb24:	b138      	cbz	r0, 800bb36 <_vfiprintf_r+0x17a>
 800bb26:	9b04      	ldr	r3, [sp, #16]
 800bb28:	eba0 000a 	sub.w	r0, r0, sl
 800bb2c:	2240      	movs	r2, #64	; 0x40
 800bb2e:	4082      	lsls	r2, r0
 800bb30:	4313      	orrs	r3, r2
 800bb32:	3401      	adds	r4, #1
 800bb34:	9304      	str	r3, [sp, #16]
 800bb36:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb3a:	4829      	ldr	r0, [pc, #164]	; (800bbe0 <_vfiprintf_r+0x224>)
 800bb3c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bb40:	2206      	movs	r2, #6
 800bb42:	f7f4 fb65 	bl	8000210 <memchr>
 800bb46:	2800      	cmp	r0, #0
 800bb48:	d03f      	beq.n	800bbca <_vfiprintf_r+0x20e>
 800bb4a:	4b26      	ldr	r3, [pc, #152]	; (800bbe4 <_vfiprintf_r+0x228>)
 800bb4c:	bb1b      	cbnz	r3, 800bb96 <_vfiprintf_r+0x1da>
 800bb4e:	9b03      	ldr	r3, [sp, #12]
 800bb50:	3307      	adds	r3, #7
 800bb52:	f023 0307 	bic.w	r3, r3, #7
 800bb56:	3308      	adds	r3, #8
 800bb58:	9303      	str	r3, [sp, #12]
 800bb5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb5c:	443b      	add	r3, r7
 800bb5e:	9309      	str	r3, [sp, #36]	; 0x24
 800bb60:	e768      	b.n	800ba34 <_vfiprintf_r+0x78>
 800bb62:	fb0c 3202 	mla	r2, ip, r2, r3
 800bb66:	460c      	mov	r4, r1
 800bb68:	2001      	movs	r0, #1
 800bb6a:	e7a6      	b.n	800baba <_vfiprintf_r+0xfe>
 800bb6c:	2300      	movs	r3, #0
 800bb6e:	3401      	adds	r4, #1
 800bb70:	9305      	str	r3, [sp, #20]
 800bb72:	4619      	mov	r1, r3
 800bb74:	f04f 0c0a 	mov.w	ip, #10
 800bb78:	4620      	mov	r0, r4
 800bb7a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bb7e:	3a30      	subs	r2, #48	; 0x30
 800bb80:	2a09      	cmp	r2, #9
 800bb82:	d903      	bls.n	800bb8c <_vfiprintf_r+0x1d0>
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d0c6      	beq.n	800bb16 <_vfiprintf_r+0x15a>
 800bb88:	9105      	str	r1, [sp, #20]
 800bb8a:	e7c4      	b.n	800bb16 <_vfiprintf_r+0x15a>
 800bb8c:	fb0c 2101 	mla	r1, ip, r1, r2
 800bb90:	4604      	mov	r4, r0
 800bb92:	2301      	movs	r3, #1
 800bb94:	e7f0      	b.n	800bb78 <_vfiprintf_r+0x1bc>
 800bb96:	ab03      	add	r3, sp, #12
 800bb98:	9300      	str	r3, [sp, #0]
 800bb9a:	462a      	mov	r2, r5
 800bb9c:	4b12      	ldr	r3, [pc, #72]	; (800bbe8 <_vfiprintf_r+0x22c>)
 800bb9e:	a904      	add	r1, sp, #16
 800bba0:	4630      	mov	r0, r6
 800bba2:	f3af 8000 	nop.w
 800bba6:	4607      	mov	r7, r0
 800bba8:	1c78      	adds	r0, r7, #1
 800bbaa:	d1d6      	bne.n	800bb5a <_vfiprintf_r+0x19e>
 800bbac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bbae:	07d9      	lsls	r1, r3, #31
 800bbb0:	d405      	bmi.n	800bbbe <_vfiprintf_r+0x202>
 800bbb2:	89ab      	ldrh	r3, [r5, #12]
 800bbb4:	059a      	lsls	r2, r3, #22
 800bbb6:	d402      	bmi.n	800bbbe <_vfiprintf_r+0x202>
 800bbb8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bbba:	f7ff fcfc 	bl	800b5b6 <__retarget_lock_release_recursive>
 800bbbe:	89ab      	ldrh	r3, [r5, #12]
 800bbc0:	065b      	lsls	r3, r3, #25
 800bbc2:	f53f af1d 	bmi.w	800ba00 <_vfiprintf_r+0x44>
 800bbc6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bbc8:	e71c      	b.n	800ba04 <_vfiprintf_r+0x48>
 800bbca:	ab03      	add	r3, sp, #12
 800bbcc:	9300      	str	r3, [sp, #0]
 800bbce:	462a      	mov	r2, r5
 800bbd0:	4b05      	ldr	r3, [pc, #20]	; (800bbe8 <_vfiprintf_r+0x22c>)
 800bbd2:	a904      	add	r1, sp, #16
 800bbd4:	4630      	mov	r0, r6
 800bbd6:	f000 f879 	bl	800bccc <_printf_i>
 800bbda:	e7e4      	b.n	800bba6 <_vfiprintf_r+0x1ea>
 800bbdc:	0800cbb9 	.word	0x0800cbb9
 800bbe0:	0800cbc3 	.word	0x0800cbc3
 800bbe4:	00000000 	.word	0x00000000
 800bbe8:	0800b997 	.word	0x0800b997
 800bbec:	0800cbbf 	.word	0x0800cbbf

0800bbf0 <_printf_common>:
 800bbf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bbf4:	4616      	mov	r6, r2
 800bbf6:	4699      	mov	r9, r3
 800bbf8:	688a      	ldr	r2, [r1, #8]
 800bbfa:	690b      	ldr	r3, [r1, #16]
 800bbfc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bc00:	4293      	cmp	r3, r2
 800bc02:	bfb8      	it	lt
 800bc04:	4613      	movlt	r3, r2
 800bc06:	6033      	str	r3, [r6, #0]
 800bc08:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bc0c:	4607      	mov	r7, r0
 800bc0e:	460c      	mov	r4, r1
 800bc10:	b10a      	cbz	r2, 800bc16 <_printf_common+0x26>
 800bc12:	3301      	adds	r3, #1
 800bc14:	6033      	str	r3, [r6, #0]
 800bc16:	6823      	ldr	r3, [r4, #0]
 800bc18:	0699      	lsls	r1, r3, #26
 800bc1a:	bf42      	ittt	mi
 800bc1c:	6833      	ldrmi	r3, [r6, #0]
 800bc1e:	3302      	addmi	r3, #2
 800bc20:	6033      	strmi	r3, [r6, #0]
 800bc22:	6825      	ldr	r5, [r4, #0]
 800bc24:	f015 0506 	ands.w	r5, r5, #6
 800bc28:	d106      	bne.n	800bc38 <_printf_common+0x48>
 800bc2a:	f104 0a19 	add.w	sl, r4, #25
 800bc2e:	68e3      	ldr	r3, [r4, #12]
 800bc30:	6832      	ldr	r2, [r6, #0]
 800bc32:	1a9b      	subs	r3, r3, r2
 800bc34:	42ab      	cmp	r3, r5
 800bc36:	dc26      	bgt.n	800bc86 <_printf_common+0x96>
 800bc38:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bc3c:	1e13      	subs	r3, r2, #0
 800bc3e:	6822      	ldr	r2, [r4, #0]
 800bc40:	bf18      	it	ne
 800bc42:	2301      	movne	r3, #1
 800bc44:	0692      	lsls	r2, r2, #26
 800bc46:	d42b      	bmi.n	800bca0 <_printf_common+0xb0>
 800bc48:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bc4c:	4649      	mov	r1, r9
 800bc4e:	4638      	mov	r0, r7
 800bc50:	47c0      	blx	r8
 800bc52:	3001      	adds	r0, #1
 800bc54:	d01e      	beq.n	800bc94 <_printf_common+0xa4>
 800bc56:	6823      	ldr	r3, [r4, #0]
 800bc58:	6922      	ldr	r2, [r4, #16]
 800bc5a:	f003 0306 	and.w	r3, r3, #6
 800bc5e:	2b04      	cmp	r3, #4
 800bc60:	bf02      	ittt	eq
 800bc62:	68e5      	ldreq	r5, [r4, #12]
 800bc64:	6833      	ldreq	r3, [r6, #0]
 800bc66:	1aed      	subeq	r5, r5, r3
 800bc68:	68a3      	ldr	r3, [r4, #8]
 800bc6a:	bf0c      	ite	eq
 800bc6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bc70:	2500      	movne	r5, #0
 800bc72:	4293      	cmp	r3, r2
 800bc74:	bfc4      	itt	gt
 800bc76:	1a9b      	subgt	r3, r3, r2
 800bc78:	18ed      	addgt	r5, r5, r3
 800bc7a:	2600      	movs	r6, #0
 800bc7c:	341a      	adds	r4, #26
 800bc7e:	42b5      	cmp	r5, r6
 800bc80:	d11a      	bne.n	800bcb8 <_printf_common+0xc8>
 800bc82:	2000      	movs	r0, #0
 800bc84:	e008      	b.n	800bc98 <_printf_common+0xa8>
 800bc86:	2301      	movs	r3, #1
 800bc88:	4652      	mov	r2, sl
 800bc8a:	4649      	mov	r1, r9
 800bc8c:	4638      	mov	r0, r7
 800bc8e:	47c0      	blx	r8
 800bc90:	3001      	adds	r0, #1
 800bc92:	d103      	bne.n	800bc9c <_printf_common+0xac>
 800bc94:	f04f 30ff 	mov.w	r0, #4294967295
 800bc98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc9c:	3501      	adds	r5, #1
 800bc9e:	e7c6      	b.n	800bc2e <_printf_common+0x3e>
 800bca0:	18e1      	adds	r1, r4, r3
 800bca2:	1c5a      	adds	r2, r3, #1
 800bca4:	2030      	movs	r0, #48	; 0x30
 800bca6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bcaa:	4422      	add	r2, r4
 800bcac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bcb0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bcb4:	3302      	adds	r3, #2
 800bcb6:	e7c7      	b.n	800bc48 <_printf_common+0x58>
 800bcb8:	2301      	movs	r3, #1
 800bcba:	4622      	mov	r2, r4
 800bcbc:	4649      	mov	r1, r9
 800bcbe:	4638      	mov	r0, r7
 800bcc0:	47c0      	blx	r8
 800bcc2:	3001      	adds	r0, #1
 800bcc4:	d0e6      	beq.n	800bc94 <_printf_common+0xa4>
 800bcc6:	3601      	adds	r6, #1
 800bcc8:	e7d9      	b.n	800bc7e <_printf_common+0x8e>
	...

0800bccc <_printf_i>:
 800bccc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bcd0:	7e0f      	ldrb	r7, [r1, #24]
 800bcd2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bcd4:	2f78      	cmp	r7, #120	; 0x78
 800bcd6:	4691      	mov	r9, r2
 800bcd8:	4680      	mov	r8, r0
 800bcda:	460c      	mov	r4, r1
 800bcdc:	469a      	mov	sl, r3
 800bcde:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bce2:	d807      	bhi.n	800bcf4 <_printf_i+0x28>
 800bce4:	2f62      	cmp	r7, #98	; 0x62
 800bce6:	d80a      	bhi.n	800bcfe <_printf_i+0x32>
 800bce8:	2f00      	cmp	r7, #0
 800bcea:	f000 80d4 	beq.w	800be96 <_printf_i+0x1ca>
 800bcee:	2f58      	cmp	r7, #88	; 0x58
 800bcf0:	f000 80c0 	beq.w	800be74 <_printf_i+0x1a8>
 800bcf4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bcf8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bcfc:	e03a      	b.n	800bd74 <_printf_i+0xa8>
 800bcfe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bd02:	2b15      	cmp	r3, #21
 800bd04:	d8f6      	bhi.n	800bcf4 <_printf_i+0x28>
 800bd06:	a101      	add	r1, pc, #4	; (adr r1, 800bd0c <_printf_i+0x40>)
 800bd08:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bd0c:	0800bd65 	.word	0x0800bd65
 800bd10:	0800bd79 	.word	0x0800bd79
 800bd14:	0800bcf5 	.word	0x0800bcf5
 800bd18:	0800bcf5 	.word	0x0800bcf5
 800bd1c:	0800bcf5 	.word	0x0800bcf5
 800bd20:	0800bcf5 	.word	0x0800bcf5
 800bd24:	0800bd79 	.word	0x0800bd79
 800bd28:	0800bcf5 	.word	0x0800bcf5
 800bd2c:	0800bcf5 	.word	0x0800bcf5
 800bd30:	0800bcf5 	.word	0x0800bcf5
 800bd34:	0800bcf5 	.word	0x0800bcf5
 800bd38:	0800be7d 	.word	0x0800be7d
 800bd3c:	0800bda5 	.word	0x0800bda5
 800bd40:	0800be37 	.word	0x0800be37
 800bd44:	0800bcf5 	.word	0x0800bcf5
 800bd48:	0800bcf5 	.word	0x0800bcf5
 800bd4c:	0800be9f 	.word	0x0800be9f
 800bd50:	0800bcf5 	.word	0x0800bcf5
 800bd54:	0800bda5 	.word	0x0800bda5
 800bd58:	0800bcf5 	.word	0x0800bcf5
 800bd5c:	0800bcf5 	.word	0x0800bcf5
 800bd60:	0800be3f 	.word	0x0800be3f
 800bd64:	682b      	ldr	r3, [r5, #0]
 800bd66:	1d1a      	adds	r2, r3, #4
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	602a      	str	r2, [r5, #0]
 800bd6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bd70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bd74:	2301      	movs	r3, #1
 800bd76:	e09f      	b.n	800beb8 <_printf_i+0x1ec>
 800bd78:	6820      	ldr	r0, [r4, #0]
 800bd7a:	682b      	ldr	r3, [r5, #0]
 800bd7c:	0607      	lsls	r7, r0, #24
 800bd7e:	f103 0104 	add.w	r1, r3, #4
 800bd82:	6029      	str	r1, [r5, #0]
 800bd84:	d501      	bpl.n	800bd8a <_printf_i+0xbe>
 800bd86:	681e      	ldr	r6, [r3, #0]
 800bd88:	e003      	b.n	800bd92 <_printf_i+0xc6>
 800bd8a:	0646      	lsls	r6, r0, #25
 800bd8c:	d5fb      	bpl.n	800bd86 <_printf_i+0xba>
 800bd8e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800bd92:	2e00      	cmp	r6, #0
 800bd94:	da03      	bge.n	800bd9e <_printf_i+0xd2>
 800bd96:	232d      	movs	r3, #45	; 0x2d
 800bd98:	4276      	negs	r6, r6
 800bd9a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bd9e:	485a      	ldr	r0, [pc, #360]	; (800bf08 <_printf_i+0x23c>)
 800bda0:	230a      	movs	r3, #10
 800bda2:	e012      	b.n	800bdca <_printf_i+0xfe>
 800bda4:	682b      	ldr	r3, [r5, #0]
 800bda6:	6820      	ldr	r0, [r4, #0]
 800bda8:	1d19      	adds	r1, r3, #4
 800bdaa:	6029      	str	r1, [r5, #0]
 800bdac:	0605      	lsls	r5, r0, #24
 800bdae:	d501      	bpl.n	800bdb4 <_printf_i+0xe8>
 800bdb0:	681e      	ldr	r6, [r3, #0]
 800bdb2:	e002      	b.n	800bdba <_printf_i+0xee>
 800bdb4:	0641      	lsls	r1, r0, #25
 800bdb6:	d5fb      	bpl.n	800bdb0 <_printf_i+0xe4>
 800bdb8:	881e      	ldrh	r6, [r3, #0]
 800bdba:	4853      	ldr	r0, [pc, #332]	; (800bf08 <_printf_i+0x23c>)
 800bdbc:	2f6f      	cmp	r7, #111	; 0x6f
 800bdbe:	bf0c      	ite	eq
 800bdc0:	2308      	moveq	r3, #8
 800bdc2:	230a      	movne	r3, #10
 800bdc4:	2100      	movs	r1, #0
 800bdc6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bdca:	6865      	ldr	r5, [r4, #4]
 800bdcc:	60a5      	str	r5, [r4, #8]
 800bdce:	2d00      	cmp	r5, #0
 800bdd0:	bfa2      	ittt	ge
 800bdd2:	6821      	ldrge	r1, [r4, #0]
 800bdd4:	f021 0104 	bicge.w	r1, r1, #4
 800bdd8:	6021      	strge	r1, [r4, #0]
 800bdda:	b90e      	cbnz	r6, 800bde0 <_printf_i+0x114>
 800bddc:	2d00      	cmp	r5, #0
 800bdde:	d04b      	beq.n	800be78 <_printf_i+0x1ac>
 800bde0:	4615      	mov	r5, r2
 800bde2:	fbb6 f1f3 	udiv	r1, r6, r3
 800bde6:	fb03 6711 	mls	r7, r3, r1, r6
 800bdea:	5dc7      	ldrb	r7, [r0, r7]
 800bdec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bdf0:	4637      	mov	r7, r6
 800bdf2:	42bb      	cmp	r3, r7
 800bdf4:	460e      	mov	r6, r1
 800bdf6:	d9f4      	bls.n	800bde2 <_printf_i+0x116>
 800bdf8:	2b08      	cmp	r3, #8
 800bdfa:	d10b      	bne.n	800be14 <_printf_i+0x148>
 800bdfc:	6823      	ldr	r3, [r4, #0]
 800bdfe:	07de      	lsls	r6, r3, #31
 800be00:	d508      	bpl.n	800be14 <_printf_i+0x148>
 800be02:	6923      	ldr	r3, [r4, #16]
 800be04:	6861      	ldr	r1, [r4, #4]
 800be06:	4299      	cmp	r1, r3
 800be08:	bfde      	ittt	le
 800be0a:	2330      	movle	r3, #48	; 0x30
 800be0c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800be10:	f105 35ff 	addle.w	r5, r5, #4294967295
 800be14:	1b52      	subs	r2, r2, r5
 800be16:	6122      	str	r2, [r4, #16]
 800be18:	f8cd a000 	str.w	sl, [sp]
 800be1c:	464b      	mov	r3, r9
 800be1e:	aa03      	add	r2, sp, #12
 800be20:	4621      	mov	r1, r4
 800be22:	4640      	mov	r0, r8
 800be24:	f7ff fee4 	bl	800bbf0 <_printf_common>
 800be28:	3001      	adds	r0, #1
 800be2a:	d14a      	bne.n	800bec2 <_printf_i+0x1f6>
 800be2c:	f04f 30ff 	mov.w	r0, #4294967295
 800be30:	b004      	add	sp, #16
 800be32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be36:	6823      	ldr	r3, [r4, #0]
 800be38:	f043 0320 	orr.w	r3, r3, #32
 800be3c:	6023      	str	r3, [r4, #0]
 800be3e:	4833      	ldr	r0, [pc, #204]	; (800bf0c <_printf_i+0x240>)
 800be40:	2778      	movs	r7, #120	; 0x78
 800be42:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800be46:	6823      	ldr	r3, [r4, #0]
 800be48:	6829      	ldr	r1, [r5, #0]
 800be4a:	061f      	lsls	r7, r3, #24
 800be4c:	f851 6b04 	ldr.w	r6, [r1], #4
 800be50:	d402      	bmi.n	800be58 <_printf_i+0x18c>
 800be52:	065f      	lsls	r7, r3, #25
 800be54:	bf48      	it	mi
 800be56:	b2b6      	uxthmi	r6, r6
 800be58:	07df      	lsls	r7, r3, #31
 800be5a:	bf48      	it	mi
 800be5c:	f043 0320 	orrmi.w	r3, r3, #32
 800be60:	6029      	str	r1, [r5, #0]
 800be62:	bf48      	it	mi
 800be64:	6023      	strmi	r3, [r4, #0]
 800be66:	b91e      	cbnz	r6, 800be70 <_printf_i+0x1a4>
 800be68:	6823      	ldr	r3, [r4, #0]
 800be6a:	f023 0320 	bic.w	r3, r3, #32
 800be6e:	6023      	str	r3, [r4, #0]
 800be70:	2310      	movs	r3, #16
 800be72:	e7a7      	b.n	800bdc4 <_printf_i+0xf8>
 800be74:	4824      	ldr	r0, [pc, #144]	; (800bf08 <_printf_i+0x23c>)
 800be76:	e7e4      	b.n	800be42 <_printf_i+0x176>
 800be78:	4615      	mov	r5, r2
 800be7a:	e7bd      	b.n	800bdf8 <_printf_i+0x12c>
 800be7c:	682b      	ldr	r3, [r5, #0]
 800be7e:	6826      	ldr	r6, [r4, #0]
 800be80:	6961      	ldr	r1, [r4, #20]
 800be82:	1d18      	adds	r0, r3, #4
 800be84:	6028      	str	r0, [r5, #0]
 800be86:	0635      	lsls	r5, r6, #24
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	d501      	bpl.n	800be90 <_printf_i+0x1c4>
 800be8c:	6019      	str	r1, [r3, #0]
 800be8e:	e002      	b.n	800be96 <_printf_i+0x1ca>
 800be90:	0670      	lsls	r0, r6, #25
 800be92:	d5fb      	bpl.n	800be8c <_printf_i+0x1c0>
 800be94:	8019      	strh	r1, [r3, #0]
 800be96:	2300      	movs	r3, #0
 800be98:	6123      	str	r3, [r4, #16]
 800be9a:	4615      	mov	r5, r2
 800be9c:	e7bc      	b.n	800be18 <_printf_i+0x14c>
 800be9e:	682b      	ldr	r3, [r5, #0]
 800bea0:	1d1a      	adds	r2, r3, #4
 800bea2:	602a      	str	r2, [r5, #0]
 800bea4:	681d      	ldr	r5, [r3, #0]
 800bea6:	6862      	ldr	r2, [r4, #4]
 800bea8:	2100      	movs	r1, #0
 800beaa:	4628      	mov	r0, r5
 800beac:	f7f4 f9b0 	bl	8000210 <memchr>
 800beb0:	b108      	cbz	r0, 800beb6 <_printf_i+0x1ea>
 800beb2:	1b40      	subs	r0, r0, r5
 800beb4:	6060      	str	r0, [r4, #4]
 800beb6:	6863      	ldr	r3, [r4, #4]
 800beb8:	6123      	str	r3, [r4, #16]
 800beba:	2300      	movs	r3, #0
 800bebc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bec0:	e7aa      	b.n	800be18 <_printf_i+0x14c>
 800bec2:	6923      	ldr	r3, [r4, #16]
 800bec4:	462a      	mov	r2, r5
 800bec6:	4649      	mov	r1, r9
 800bec8:	4640      	mov	r0, r8
 800beca:	47d0      	blx	sl
 800becc:	3001      	adds	r0, #1
 800bece:	d0ad      	beq.n	800be2c <_printf_i+0x160>
 800bed0:	6823      	ldr	r3, [r4, #0]
 800bed2:	079b      	lsls	r3, r3, #30
 800bed4:	d413      	bmi.n	800befe <_printf_i+0x232>
 800bed6:	68e0      	ldr	r0, [r4, #12]
 800bed8:	9b03      	ldr	r3, [sp, #12]
 800beda:	4298      	cmp	r0, r3
 800bedc:	bfb8      	it	lt
 800bede:	4618      	movlt	r0, r3
 800bee0:	e7a6      	b.n	800be30 <_printf_i+0x164>
 800bee2:	2301      	movs	r3, #1
 800bee4:	4632      	mov	r2, r6
 800bee6:	4649      	mov	r1, r9
 800bee8:	4640      	mov	r0, r8
 800beea:	47d0      	blx	sl
 800beec:	3001      	adds	r0, #1
 800beee:	d09d      	beq.n	800be2c <_printf_i+0x160>
 800bef0:	3501      	adds	r5, #1
 800bef2:	68e3      	ldr	r3, [r4, #12]
 800bef4:	9903      	ldr	r1, [sp, #12]
 800bef6:	1a5b      	subs	r3, r3, r1
 800bef8:	42ab      	cmp	r3, r5
 800befa:	dcf2      	bgt.n	800bee2 <_printf_i+0x216>
 800befc:	e7eb      	b.n	800bed6 <_printf_i+0x20a>
 800befe:	2500      	movs	r5, #0
 800bf00:	f104 0619 	add.w	r6, r4, #25
 800bf04:	e7f5      	b.n	800bef2 <_printf_i+0x226>
 800bf06:	bf00      	nop
 800bf08:	0800cbca 	.word	0x0800cbca
 800bf0c:	0800cbdb 	.word	0x0800cbdb

0800bf10 <__sflush_r>:
 800bf10:	898a      	ldrh	r2, [r1, #12]
 800bf12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf16:	4605      	mov	r5, r0
 800bf18:	0710      	lsls	r0, r2, #28
 800bf1a:	460c      	mov	r4, r1
 800bf1c:	d458      	bmi.n	800bfd0 <__sflush_r+0xc0>
 800bf1e:	684b      	ldr	r3, [r1, #4]
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	dc05      	bgt.n	800bf30 <__sflush_r+0x20>
 800bf24:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	dc02      	bgt.n	800bf30 <__sflush_r+0x20>
 800bf2a:	2000      	movs	r0, #0
 800bf2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf30:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bf32:	2e00      	cmp	r6, #0
 800bf34:	d0f9      	beq.n	800bf2a <__sflush_r+0x1a>
 800bf36:	2300      	movs	r3, #0
 800bf38:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bf3c:	682f      	ldr	r7, [r5, #0]
 800bf3e:	6a21      	ldr	r1, [r4, #32]
 800bf40:	602b      	str	r3, [r5, #0]
 800bf42:	d032      	beq.n	800bfaa <__sflush_r+0x9a>
 800bf44:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bf46:	89a3      	ldrh	r3, [r4, #12]
 800bf48:	075a      	lsls	r2, r3, #29
 800bf4a:	d505      	bpl.n	800bf58 <__sflush_r+0x48>
 800bf4c:	6863      	ldr	r3, [r4, #4]
 800bf4e:	1ac0      	subs	r0, r0, r3
 800bf50:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bf52:	b10b      	cbz	r3, 800bf58 <__sflush_r+0x48>
 800bf54:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bf56:	1ac0      	subs	r0, r0, r3
 800bf58:	2300      	movs	r3, #0
 800bf5a:	4602      	mov	r2, r0
 800bf5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bf5e:	6a21      	ldr	r1, [r4, #32]
 800bf60:	4628      	mov	r0, r5
 800bf62:	47b0      	blx	r6
 800bf64:	1c43      	adds	r3, r0, #1
 800bf66:	89a3      	ldrh	r3, [r4, #12]
 800bf68:	d106      	bne.n	800bf78 <__sflush_r+0x68>
 800bf6a:	6829      	ldr	r1, [r5, #0]
 800bf6c:	291d      	cmp	r1, #29
 800bf6e:	d82b      	bhi.n	800bfc8 <__sflush_r+0xb8>
 800bf70:	4a29      	ldr	r2, [pc, #164]	; (800c018 <__sflush_r+0x108>)
 800bf72:	410a      	asrs	r2, r1
 800bf74:	07d6      	lsls	r6, r2, #31
 800bf76:	d427      	bmi.n	800bfc8 <__sflush_r+0xb8>
 800bf78:	2200      	movs	r2, #0
 800bf7a:	6062      	str	r2, [r4, #4]
 800bf7c:	04d9      	lsls	r1, r3, #19
 800bf7e:	6922      	ldr	r2, [r4, #16]
 800bf80:	6022      	str	r2, [r4, #0]
 800bf82:	d504      	bpl.n	800bf8e <__sflush_r+0x7e>
 800bf84:	1c42      	adds	r2, r0, #1
 800bf86:	d101      	bne.n	800bf8c <__sflush_r+0x7c>
 800bf88:	682b      	ldr	r3, [r5, #0]
 800bf8a:	b903      	cbnz	r3, 800bf8e <__sflush_r+0x7e>
 800bf8c:	6560      	str	r0, [r4, #84]	; 0x54
 800bf8e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bf90:	602f      	str	r7, [r5, #0]
 800bf92:	2900      	cmp	r1, #0
 800bf94:	d0c9      	beq.n	800bf2a <__sflush_r+0x1a>
 800bf96:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bf9a:	4299      	cmp	r1, r3
 800bf9c:	d002      	beq.n	800bfa4 <__sflush_r+0x94>
 800bf9e:	4628      	mov	r0, r5
 800bfa0:	f7ff fb3e 	bl	800b620 <_free_r>
 800bfa4:	2000      	movs	r0, #0
 800bfa6:	6360      	str	r0, [r4, #52]	; 0x34
 800bfa8:	e7c0      	b.n	800bf2c <__sflush_r+0x1c>
 800bfaa:	2301      	movs	r3, #1
 800bfac:	4628      	mov	r0, r5
 800bfae:	47b0      	blx	r6
 800bfb0:	1c41      	adds	r1, r0, #1
 800bfb2:	d1c8      	bne.n	800bf46 <__sflush_r+0x36>
 800bfb4:	682b      	ldr	r3, [r5, #0]
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d0c5      	beq.n	800bf46 <__sflush_r+0x36>
 800bfba:	2b1d      	cmp	r3, #29
 800bfbc:	d001      	beq.n	800bfc2 <__sflush_r+0xb2>
 800bfbe:	2b16      	cmp	r3, #22
 800bfc0:	d101      	bne.n	800bfc6 <__sflush_r+0xb6>
 800bfc2:	602f      	str	r7, [r5, #0]
 800bfc4:	e7b1      	b.n	800bf2a <__sflush_r+0x1a>
 800bfc6:	89a3      	ldrh	r3, [r4, #12]
 800bfc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bfcc:	81a3      	strh	r3, [r4, #12]
 800bfce:	e7ad      	b.n	800bf2c <__sflush_r+0x1c>
 800bfd0:	690f      	ldr	r7, [r1, #16]
 800bfd2:	2f00      	cmp	r7, #0
 800bfd4:	d0a9      	beq.n	800bf2a <__sflush_r+0x1a>
 800bfd6:	0793      	lsls	r3, r2, #30
 800bfd8:	680e      	ldr	r6, [r1, #0]
 800bfda:	bf08      	it	eq
 800bfdc:	694b      	ldreq	r3, [r1, #20]
 800bfde:	600f      	str	r7, [r1, #0]
 800bfe0:	bf18      	it	ne
 800bfe2:	2300      	movne	r3, #0
 800bfe4:	eba6 0807 	sub.w	r8, r6, r7
 800bfe8:	608b      	str	r3, [r1, #8]
 800bfea:	f1b8 0f00 	cmp.w	r8, #0
 800bfee:	dd9c      	ble.n	800bf2a <__sflush_r+0x1a>
 800bff0:	6a21      	ldr	r1, [r4, #32]
 800bff2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bff4:	4643      	mov	r3, r8
 800bff6:	463a      	mov	r2, r7
 800bff8:	4628      	mov	r0, r5
 800bffa:	47b0      	blx	r6
 800bffc:	2800      	cmp	r0, #0
 800bffe:	dc06      	bgt.n	800c00e <__sflush_r+0xfe>
 800c000:	89a3      	ldrh	r3, [r4, #12]
 800c002:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c006:	81a3      	strh	r3, [r4, #12]
 800c008:	f04f 30ff 	mov.w	r0, #4294967295
 800c00c:	e78e      	b.n	800bf2c <__sflush_r+0x1c>
 800c00e:	4407      	add	r7, r0
 800c010:	eba8 0800 	sub.w	r8, r8, r0
 800c014:	e7e9      	b.n	800bfea <__sflush_r+0xda>
 800c016:	bf00      	nop
 800c018:	dfbffffe 	.word	0xdfbffffe

0800c01c <_fflush_r>:
 800c01c:	b538      	push	{r3, r4, r5, lr}
 800c01e:	690b      	ldr	r3, [r1, #16]
 800c020:	4605      	mov	r5, r0
 800c022:	460c      	mov	r4, r1
 800c024:	b913      	cbnz	r3, 800c02c <_fflush_r+0x10>
 800c026:	2500      	movs	r5, #0
 800c028:	4628      	mov	r0, r5
 800c02a:	bd38      	pop	{r3, r4, r5, pc}
 800c02c:	b118      	cbz	r0, 800c036 <_fflush_r+0x1a>
 800c02e:	6a03      	ldr	r3, [r0, #32]
 800c030:	b90b      	cbnz	r3, 800c036 <_fflush_r+0x1a>
 800c032:	f7fe ffdd 	bl	800aff0 <__sinit>
 800c036:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d0f3      	beq.n	800c026 <_fflush_r+0xa>
 800c03e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c040:	07d0      	lsls	r0, r2, #31
 800c042:	d404      	bmi.n	800c04e <_fflush_r+0x32>
 800c044:	0599      	lsls	r1, r3, #22
 800c046:	d402      	bmi.n	800c04e <_fflush_r+0x32>
 800c048:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c04a:	f7ff fab3 	bl	800b5b4 <__retarget_lock_acquire_recursive>
 800c04e:	4628      	mov	r0, r5
 800c050:	4621      	mov	r1, r4
 800c052:	f7ff ff5d 	bl	800bf10 <__sflush_r>
 800c056:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c058:	07da      	lsls	r2, r3, #31
 800c05a:	4605      	mov	r5, r0
 800c05c:	d4e4      	bmi.n	800c028 <_fflush_r+0xc>
 800c05e:	89a3      	ldrh	r3, [r4, #12]
 800c060:	059b      	lsls	r3, r3, #22
 800c062:	d4e1      	bmi.n	800c028 <_fflush_r+0xc>
 800c064:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c066:	f7ff faa6 	bl	800b5b6 <__retarget_lock_release_recursive>
 800c06a:	e7dd      	b.n	800c028 <_fflush_r+0xc>

0800c06c <fiprintf>:
 800c06c:	b40e      	push	{r1, r2, r3}
 800c06e:	b503      	push	{r0, r1, lr}
 800c070:	4601      	mov	r1, r0
 800c072:	ab03      	add	r3, sp, #12
 800c074:	4805      	ldr	r0, [pc, #20]	; (800c08c <fiprintf+0x20>)
 800c076:	f853 2b04 	ldr.w	r2, [r3], #4
 800c07a:	6800      	ldr	r0, [r0, #0]
 800c07c:	9301      	str	r3, [sp, #4]
 800c07e:	f7ff fc9d 	bl	800b9bc <_vfiprintf_r>
 800c082:	b002      	add	sp, #8
 800c084:	f85d eb04 	ldr.w	lr, [sp], #4
 800c088:	b003      	add	sp, #12
 800c08a:	4770      	bx	lr
 800c08c:	20000088 	.word	0x20000088

0800c090 <__swhatbuf_r>:
 800c090:	b570      	push	{r4, r5, r6, lr}
 800c092:	460c      	mov	r4, r1
 800c094:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c098:	2900      	cmp	r1, #0
 800c09a:	b096      	sub	sp, #88	; 0x58
 800c09c:	4615      	mov	r5, r2
 800c09e:	461e      	mov	r6, r3
 800c0a0:	da0d      	bge.n	800c0be <__swhatbuf_r+0x2e>
 800c0a2:	89a3      	ldrh	r3, [r4, #12]
 800c0a4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c0a8:	f04f 0100 	mov.w	r1, #0
 800c0ac:	bf0c      	ite	eq
 800c0ae:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c0b2:	2340      	movne	r3, #64	; 0x40
 800c0b4:	2000      	movs	r0, #0
 800c0b6:	6031      	str	r1, [r6, #0]
 800c0b8:	602b      	str	r3, [r5, #0]
 800c0ba:	b016      	add	sp, #88	; 0x58
 800c0bc:	bd70      	pop	{r4, r5, r6, pc}
 800c0be:	466a      	mov	r2, sp
 800c0c0:	f000 f896 	bl	800c1f0 <_fstat_r>
 800c0c4:	2800      	cmp	r0, #0
 800c0c6:	dbec      	blt.n	800c0a2 <__swhatbuf_r+0x12>
 800c0c8:	9901      	ldr	r1, [sp, #4]
 800c0ca:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c0ce:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c0d2:	4259      	negs	r1, r3
 800c0d4:	4159      	adcs	r1, r3
 800c0d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c0da:	e7eb      	b.n	800c0b4 <__swhatbuf_r+0x24>

0800c0dc <__smakebuf_r>:
 800c0dc:	898b      	ldrh	r3, [r1, #12]
 800c0de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c0e0:	079d      	lsls	r5, r3, #30
 800c0e2:	4606      	mov	r6, r0
 800c0e4:	460c      	mov	r4, r1
 800c0e6:	d507      	bpl.n	800c0f8 <__smakebuf_r+0x1c>
 800c0e8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c0ec:	6023      	str	r3, [r4, #0]
 800c0ee:	6123      	str	r3, [r4, #16]
 800c0f0:	2301      	movs	r3, #1
 800c0f2:	6163      	str	r3, [r4, #20]
 800c0f4:	b002      	add	sp, #8
 800c0f6:	bd70      	pop	{r4, r5, r6, pc}
 800c0f8:	ab01      	add	r3, sp, #4
 800c0fa:	466a      	mov	r2, sp
 800c0fc:	f7ff ffc8 	bl	800c090 <__swhatbuf_r>
 800c100:	9900      	ldr	r1, [sp, #0]
 800c102:	4605      	mov	r5, r0
 800c104:	4630      	mov	r0, r6
 800c106:	f7fe fe6d 	bl	800ade4 <_malloc_r>
 800c10a:	b948      	cbnz	r0, 800c120 <__smakebuf_r+0x44>
 800c10c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c110:	059a      	lsls	r2, r3, #22
 800c112:	d4ef      	bmi.n	800c0f4 <__smakebuf_r+0x18>
 800c114:	f023 0303 	bic.w	r3, r3, #3
 800c118:	f043 0302 	orr.w	r3, r3, #2
 800c11c:	81a3      	strh	r3, [r4, #12]
 800c11e:	e7e3      	b.n	800c0e8 <__smakebuf_r+0xc>
 800c120:	89a3      	ldrh	r3, [r4, #12]
 800c122:	6020      	str	r0, [r4, #0]
 800c124:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c128:	81a3      	strh	r3, [r4, #12]
 800c12a:	9b00      	ldr	r3, [sp, #0]
 800c12c:	6163      	str	r3, [r4, #20]
 800c12e:	9b01      	ldr	r3, [sp, #4]
 800c130:	6120      	str	r0, [r4, #16]
 800c132:	b15b      	cbz	r3, 800c14c <__smakebuf_r+0x70>
 800c134:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c138:	4630      	mov	r0, r6
 800c13a:	f000 f86b 	bl	800c214 <_isatty_r>
 800c13e:	b128      	cbz	r0, 800c14c <__smakebuf_r+0x70>
 800c140:	89a3      	ldrh	r3, [r4, #12]
 800c142:	f023 0303 	bic.w	r3, r3, #3
 800c146:	f043 0301 	orr.w	r3, r3, #1
 800c14a:	81a3      	strh	r3, [r4, #12]
 800c14c:	89a3      	ldrh	r3, [r4, #12]
 800c14e:	431d      	orrs	r5, r3
 800c150:	81a5      	strh	r5, [r4, #12]
 800c152:	e7cf      	b.n	800c0f4 <__smakebuf_r+0x18>

0800c154 <_putc_r>:
 800c154:	b570      	push	{r4, r5, r6, lr}
 800c156:	460d      	mov	r5, r1
 800c158:	4614      	mov	r4, r2
 800c15a:	4606      	mov	r6, r0
 800c15c:	b118      	cbz	r0, 800c166 <_putc_r+0x12>
 800c15e:	6a03      	ldr	r3, [r0, #32]
 800c160:	b90b      	cbnz	r3, 800c166 <_putc_r+0x12>
 800c162:	f7fe ff45 	bl	800aff0 <__sinit>
 800c166:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c168:	07d8      	lsls	r0, r3, #31
 800c16a:	d405      	bmi.n	800c178 <_putc_r+0x24>
 800c16c:	89a3      	ldrh	r3, [r4, #12]
 800c16e:	0599      	lsls	r1, r3, #22
 800c170:	d402      	bmi.n	800c178 <_putc_r+0x24>
 800c172:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c174:	f7ff fa1e 	bl	800b5b4 <__retarget_lock_acquire_recursive>
 800c178:	68a3      	ldr	r3, [r4, #8]
 800c17a:	3b01      	subs	r3, #1
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	60a3      	str	r3, [r4, #8]
 800c180:	da05      	bge.n	800c18e <_putc_r+0x3a>
 800c182:	69a2      	ldr	r2, [r4, #24]
 800c184:	4293      	cmp	r3, r2
 800c186:	db12      	blt.n	800c1ae <_putc_r+0x5a>
 800c188:	b2eb      	uxtb	r3, r5
 800c18a:	2b0a      	cmp	r3, #10
 800c18c:	d00f      	beq.n	800c1ae <_putc_r+0x5a>
 800c18e:	6823      	ldr	r3, [r4, #0]
 800c190:	1c5a      	adds	r2, r3, #1
 800c192:	6022      	str	r2, [r4, #0]
 800c194:	701d      	strb	r5, [r3, #0]
 800c196:	b2ed      	uxtb	r5, r5
 800c198:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c19a:	07da      	lsls	r2, r3, #31
 800c19c:	d405      	bmi.n	800c1aa <_putc_r+0x56>
 800c19e:	89a3      	ldrh	r3, [r4, #12]
 800c1a0:	059b      	lsls	r3, r3, #22
 800c1a2:	d402      	bmi.n	800c1aa <_putc_r+0x56>
 800c1a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c1a6:	f7ff fa06 	bl	800b5b6 <__retarget_lock_release_recursive>
 800c1aa:	4628      	mov	r0, r5
 800c1ac:	bd70      	pop	{r4, r5, r6, pc}
 800c1ae:	4629      	mov	r1, r5
 800c1b0:	4622      	mov	r2, r4
 800c1b2:	4630      	mov	r0, r6
 800c1b4:	f7ff f82b 	bl	800b20e <__swbuf_r>
 800c1b8:	4605      	mov	r5, r0
 800c1ba:	e7ed      	b.n	800c198 <_putc_r+0x44>

0800c1bc <memmove>:
 800c1bc:	4288      	cmp	r0, r1
 800c1be:	b510      	push	{r4, lr}
 800c1c0:	eb01 0402 	add.w	r4, r1, r2
 800c1c4:	d902      	bls.n	800c1cc <memmove+0x10>
 800c1c6:	4284      	cmp	r4, r0
 800c1c8:	4623      	mov	r3, r4
 800c1ca:	d807      	bhi.n	800c1dc <memmove+0x20>
 800c1cc:	1e43      	subs	r3, r0, #1
 800c1ce:	42a1      	cmp	r1, r4
 800c1d0:	d008      	beq.n	800c1e4 <memmove+0x28>
 800c1d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c1d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c1da:	e7f8      	b.n	800c1ce <memmove+0x12>
 800c1dc:	4402      	add	r2, r0
 800c1de:	4601      	mov	r1, r0
 800c1e0:	428a      	cmp	r2, r1
 800c1e2:	d100      	bne.n	800c1e6 <memmove+0x2a>
 800c1e4:	bd10      	pop	{r4, pc}
 800c1e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c1ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c1ee:	e7f7      	b.n	800c1e0 <memmove+0x24>

0800c1f0 <_fstat_r>:
 800c1f0:	b538      	push	{r3, r4, r5, lr}
 800c1f2:	4d07      	ldr	r5, [pc, #28]	; (800c210 <_fstat_r+0x20>)
 800c1f4:	2300      	movs	r3, #0
 800c1f6:	4604      	mov	r4, r0
 800c1f8:	4608      	mov	r0, r1
 800c1fa:	4611      	mov	r1, r2
 800c1fc:	602b      	str	r3, [r5, #0]
 800c1fe:	f7f5 fcf5 	bl	8001bec <_fstat>
 800c202:	1c43      	adds	r3, r0, #1
 800c204:	d102      	bne.n	800c20c <_fstat_r+0x1c>
 800c206:	682b      	ldr	r3, [r5, #0]
 800c208:	b103      	cbz	r3, 800c20c <_fstat_r+0x1c>
 800c20a:	6023      	str	r3, [r4, #0]
 800c20c:	bd38      	pop	{r3, r4, r5, pc}
 800c20e:	bf00      	nop
 800c210:	20006454 	.word	0x20006454

0800c214 <_isatty_r>:
 800c214:	b538      	push	{r3, r4, r5, lr}
 800c216:	4d06      	ldr	r5, [pc, #24]	; (800c230 <_isatty_r+0x1c>)
 800c218:	2300      	movs	r3, #0
 800c21a:	4604      	mov	r4, r0
 800c21c:	4608      	mov	r0, r1
 800c21e:	602b      	str	r3, [r5, #0]
 800c220:	f7f5 fcf4 	bl	8001c0c <_isatty>
 800c224:	1c43      	adds	r3, r0, #1
 800c226:	d102      	bne.n	800c22e <_isatty_r+0x1a>
 800c228:	682b      	ldr	r3, [r5, #0]
 800c22a:	b103      	cbz	r3, 800c22e <_isatty_r+0x1a>
 800c22c:	6023      	str	r3, [r4, #0]
 800c22e:	bd38      	pop	{r3, r4, r5, pc}
 800c230:	20006454 	.word	0x20006454

0800c234 <abort>:
 800c234:	b508      	push	{r3, lr}
 800c236:	2006      	movs	r0, #6
 800c238:	f000 f85a 	bl	800c2f0 <raise>
 800c23c:	2001      	movs	r0, #1
 800c23e:	f7f5 fc86 	bl	8001b4e <_exit>

0800c242 <_realloc_r>:
 800c242:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c246:	4680      	mov	r8, r0
 800c248:	4614      	mov	r4, r2
 800c24a:	460e      	mov	r6, r1
 800c24c:	b921      	cbnz	r1, 800c258 <_realloc_r+0x16>
 800c24e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c252:	4611      	mov	r1, r2
 800c254:	f7fe bdc6 	b.w	800ade4 <_malloc_r>
 800c258:	b92a      	cbnz	r2, 800c266 <_realloc_r+0x24>
 800c25a:	f7ff f9e1 	bl	800b620 <_free_r>
 800c25e:	4625      	mov	r5, r4
 800c260:	4628      	mov	r0, r5
 800c262:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c266:	f000 f85f 	bl	800c328 <_malloc_usable_size_r>
 800c26a:	4284      	cmp	r4, r0
 800c26c:	4607      	mov	r7, r0
 800c26e:	d802      	bhi.n	800c276 <_realloc_r+0x34>
 800c270:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c274:	d812      	bhi.n	800c29c <_realloc_r+0x5a>
 800c276:	4621      	mov	r1, r4
 800c278:	4640      	mov	r0, r8
 800c27a:	f7fe fdb3 	bl	800ade4 <_malloc_r>
 800c27e:	4605      	mov	r5, r0
 800c280:	2800      	cmp	r0, #0
 800c282:	d0ed      	beq.n	800c260 <_realloc_r+0x1e>
 800c284:	42bc      	cmp	r4, r7
 800c286:	4622      	mov	r2, r4
 800c288:	4631      	mov	r1, r6
 800c28a:	bf28      	it	cs
 800c28c:	463a      	movcs	r2, r7
 800c28e:	f7ff f99b 	bl	800b5c8 <memcpy>
 800c292:	4631      	mov	r1, r6
 800c294:	4640      	mov	r0, r8
 800c296:	f7ff f9c3 	bl	800b620 <_free_r>
 800c29a:	e7e1      	b.n	800c260 <_realloc_r+0x1e>
 800c29c:	4635      	mov	r5, r6
 800c29e:	e7df      	b.n	800c260 <_realloc_r+0x1e>

0800c2a0 <_raise_r>:
 800c2a0:	291f      	cmp	r1, #31
 800c2a2:	b538      	push	{r3, r4, r5, lr}
 800c2a4:	4604      	mov	r4, r0
 800c2a6:	460d      	mov	r5, r1
 800c2a8:	d904      	bls.n	800c2b4 <_raise_r+0x14>
 800c2aa:	2316      	movs	r3, #22
 800c2ac:	6003      	str	r3, [r0, #0]
 800c2ae:	f04f 30ff 	mov.w	r0, #4294967295
 800c2b2:	bd38      	pop	{r3, r4, r5, pc}
 800c2b4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800c2b6:	b112      	cbz	r2, 800c2be <_raise_r+0x1e>
 800c2b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c2bc:	b94b      	cbnz	r3, 800c2d2 <_raise_r+0x32>
 800c2be:	4620      	mov	r0, r4
 800c2c0:	f000 f830 	bl	800c324 <_getpid_r>
 800c2c4:	462a      	mov	r2, r5
 800c2c6:	4601      	mov	r1, r0
 800c2c8:	4620      	mov	r0, r4
 800c2ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c2ce:	f000 b817 	b.w	800c300 <_kill_r>
 800c2d2:	2b01      	cmp	r3, #1
 800c2d4:	d00a      	beq.n	800c2ec <_raise_r+0x4c>
 800c2d6:	1c59      	adds	r1, r3, #1
 800c2d8:	d103      	bne.n	800c2e2 <_raise_r+0x42>
 800c2da:	2316      	movs	r3, #22
 800c2dc:	6003      	str	r3, [r0, #0]
 800c2de:	2001      	movs	r0, #1
 800c2e0:	e7e7      	b.n	800c2b2 <_raise_r+0x12>
 800c2e2:	2400      	movs	r4, #0
 800c2e4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c2e8:	4628      	mov	r0, r5
 800c2ea:	4798      	blx	r3
 800c2ec:	2000      	movs	r0, #0
 800c2ee:	e7e0      	b.n	800c2b2 <_raise_r+0x12>

0800c2f0 <raise>:
 800c2f0:	4b02      	ldr	r3, [pc, #8]	; (800c2fc <raise+0xc>)
 800c2f2:	4601      	mov	r1, r0
 800c2f4:	6818      	ldr	r0, [r3, #0]
 800c2f6:	f7ff bfd3 	b.w	800c2a0 <_raise_r>
 800c2fa:	bf00      	nop
 800c2fc:	20000088 	.word	0x20000088

0800c300 <_kill_r>:
 800c300:	b538      	push	{r3, r4, r5, lr}
 800c302:	4d07      	ldr	r5, [pc, #28]	; (800c320 <_kill_r+0x20>)
 800c304:	2300      	movs	r3, #0
 800c306:	4604      	mov	r4, r0
 800c308:	4608      	mov	r0, r1
 800c30a:	4611      	mov	r1, r2
 800c30c:	602b      	str	r3, [r5, #0]
 800c30e:	f7f5 fc0e 	bl	8001b2e <_kill>
 800c312:	1c43      	adds	r3, r0, #1
 800c314:	d102      	bne.n	800c31c <_kill_r+0x1c>
 800c316:	682b      	ldr	r3, [r5, #0]
 800c318:	b103      	cbz	r3, 800c31c <_kill_r+0x1c>
 800c31a:	6023      	str	r3, [r4, #0]
 800c31c:	bd38      	pop	{r3, r4, r5, pc}
 800c31e:	bf00      	nop
 800c320:	20006454 	.word	0x20006454

0800c324 <_getpid_r>:
 800c324:	f7f5 bbfb 	b.w	8001b1e <_getpid>

0800c328 <_malloc_usable_size_r>:
 800c328:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c32c:	1f18      	subs	r0, r3, #4
 800c32e:	2b00      	cmp	r3, #0
 800c330:	bfbc      	itt	lt
 800c332:	580b      	ldrlt	r3, [r1, r0]
 800c334:	18c0      	addlt	r0, r0, r3
 800c336:	4770      	bx	lr

0800c338 <round>:
 800c338:	ec53 2b10 	vmov	r2, r3, d0
 800c33c:	b570      	push	{r4, r5, r6, lr}
 800c33e:	f3c3 540a 	ubfx	r4, r3, #20, #11
 800c342:	f2a4 30ff 	subw	r0, r4, #1023	; 0x3ff
 800c346:	2813      	cmp	r0, #19
 800c348:	ee10 5a10 	vmov	r5, s0
 800c34c:	4619      	mov	r1, r3
 800c34e:	dc18      	bgt.n	800c382 <round+0x4a>
 800c350:	2800      	cmp	r0, #0
 800c352:	da09      	bge.n	800c368 <round+0x30>
 800c354:	3001      	adds	r0, #1
 800c356:	f003 4100 	and.w	r1, r3, #2147483648	; 0x80000000
 800c35a:	d103      	bne.n	800c364 <round+0x2c>
 800c35c:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800c360:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800c364:	2300      	movs	r3, #0
 800c366:	e02a      	b.n	800c3be <round+0x86>
 800c368:	4c16      	ldr	r4, [pc, #88]	; (800c3c4 <round+0x8c>)
 800c36a:	4104      	asrs	r4, r0
 800c36c:	ea03 0604 	and.w	r6, r3, r4
 800c370:	4316      	orrs	r6, r2
 800c372:	d011      	beq.n	800c398 <round+0x60>
 800c374:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c378:	4103      	asrs	r3, r0
 800c37a:	440b      	add	r3, r1
 800c37c:	ea23 0104 	bic.w	r1, r3, r4
 800c380:	e7f0      	b.n	800c364 <round+0x2c>
 800c382:	2833      	cmp	r0, #51	; 0x33
 800c384:	dd0b      	ble.n	800c39e <round+0x66>
 800c386:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800c38a:	d105      	bne.n	800c398 <round+0x60>
 800c38c:	ee10 0a10 	vmov	r0, s0
 800c390:	f7f3 ff94 	bl	80002bc <__adddf3>
 800c394:	4602      	mov	r2, r0
 800c396:	460b      	mov	r3, r1
 800c398:	ec43 2b10 	vmov	d0, r2, r3
 800c39c:	bd70      	pop	{r4, r5, r6, pc}
 800c39e:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 800c3a2:	f04f 34ff 	mov.w	r4, #4294967295
 800c3a6:	40f4      	lsrs	r4, r6
 800c3a8:	4214      	tst	r4, r2
 800c3aa:	d0f5      	beq.n	800c398 <round+0x60>
 800c3ac:	f1c0 0033 	rsb	r0, r0, #51	; 0x33
 800c3b0:	2301      	movs	r3, #1
 800c3b2:	4083      	lsls	r3, r0
 800c3b4:	195b      	adds	r3, r3, r5
 800c3b6:	bf28      	it	cs
 800c3b8:	3101      	addcs	r1, #1
 800c3ba:	ea23 0304 	bic.w	r3, r3, r4
 800c3be:	461a      	mov	r2, r3
 800c3c0:	460b      	mov	r3, r1
 800c3c2:	e7e9      	b.n	800c398 <round+0x60>
 800c3c4:	000fffff 	.word	0x000fffff

0800c3c8 <_init>:
 800c3c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3ca:	bf00      	nop
 800c3cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c3ce:	bc08      	pop	{r3}
 800c3d0:	469e      	mov	lr, r3
 800c3d2:	4770      	bx	lr

0800c3d4 <_fini>:
 800c3d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3d6:	bf00      	nop
 800c3d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c3da:	bc08      	pop	{r3}
 800c3dc:	469e      	mov	lr, r3
 800c3de:	4770      	bx	lr
