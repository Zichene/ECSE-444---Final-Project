
WiFi_HTTP_Server.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e98  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005d4  08008058  08008058  00018058  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800862c  0800862c  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800862c  0800862c  0001862c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008634  08008634  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008634  08008634  00018634  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008638  08008638  00018638  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800863c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000193ec  20000078  080086b4  00020078  2**2
                  ALLOC
 10 ._user_heap   00010004  20019464  080086b4  00029464  2**0
                  ALLOC
 11 ._user_stack  00007f00  10000000  10000000  00030000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 14 .debug_line   000200fb  00000000  00000000  000200eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line_str 000000cb  00000000  00000000  000401e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_info   0001e7c4  00000000  00000000  000402b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 0000391f  00000000  00000000  0005ea75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00001ac8  00000000  00000000  00062398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00120f41  00000000  00000000  00063e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_rnglists 000014e3  00000000  00000000  00184da1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  00004f85  00000000  00000000  00186284  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00007d90  00000000  00000000  0018b20c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000078 	.word	0x20000078
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08008040 	.word	0x08008040

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	2000007c 	.word	0x2000007c
 80001fc:	08008040 	.word	0x08008040

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2f>:
 8000a9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000aa4:	bf24      	itt	cs
 8000aa6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aaa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aae:	d90d      	bls.n	8000acc <__aeabi_d2f+0x30>
 8000ab0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ab4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ab8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000abc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ac0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac4:	bf08      	it	eq
 8000ac6:	f020 0001 	biceq.w	r0, r0, #1
 8000aca:	4770      	bx	lr
 8000acc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ad0:	d121      	bne.n	8000b16 <__aeabi_d2f+0x7a>
 8000ad2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ad6:	bfbc      	itt	lt
 8000ad8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000adc:	4770      	bxlt	lr
 8000ade:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ae2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ae6:	f1c2 0218 	rsb	r2, r2, #24
 8000aea:	f1c2 0c20 	rsb	ip, r2, #32
 8000aee:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af2:	fa20 f002 	lsr.w	r0, r0, r2
 8000af6:	bf18      	it	ne
 8000af8:	f040 0001 	orrne.w	r0, r0, #1
 8000afc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b00:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b04:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b08:	ea40 000c 	orr.w	r0, r0, ip
 8000b0c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b10:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b14:	e7cc      	b.n	8000ab0 <__aeabi_d2f+0x14>
 8000b16:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1a:	d107      	bne.n	8000b2c <__aeabi_d2f+0x90>
 8000b1c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b20:	bf1e      	ittt	ne
 8000b22:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b26:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b2a:	4770      	bxne	lr
 8000b2c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b34:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop

08000b3c <__aeabi_uldivmod>:
 8000b3c:	b953      	cbnz	r3, 8000b54 <__aeabi_uldivmod+0x18>
 8000b3e:	b94a      	cbnz	r2, 8000b54 <__aeabi_uldivmod+0x18>
 8000b40:	2900      	cmp	r1, #0
 8000b42:	bf08      	it	eq
 8000b44:	2800      	cmpeq	r0, #0
 8000b46:	bf1c      	itt	ne
 8000b48:	f04f 31ff 	movne.w	r1, #4294967295
 8000b4c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b50:	f000 b970 	b.w	8000e34 <__aeabi_idiv0>
 8000b54:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b58:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b5c:	f000 f806 	bl	8000b6c <__udivmoddi4>
 8000b60:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b68:	b004      	add	sp, #16
 8000b6a:	4770      	bx	lr

08000b6c <__udivmoddi4>:
 8000b6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b70:	9e08      	ldr	r6, [sp, #32]
 8000b72:	460d      	mov	r5, r1
 8000b74:	4604      	mov	r4, r0
 8000b76:	460f      	mov	r7, r1
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d14a      	bne.n	8000c12 <__udivmoddi4+0xa6>
 8000b7c:	428a      	cmp	r2, r1
 8000b7e:	4694      	mov	ip, r2
 8000b80:	d965      	bls.n	8000c4e <__udivmoddi4+0xe2>
 8000b82:	fab2 f382 	clz	r3, r2
 8000b86:	b143      	cbz	r3, 8000b9a <__udivmoddi4+0x2e>
 8000b88:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b8c:	f1c3 0220 	rsb	r2, r3, #32
 8000b90:	409f      	lsls	r7, r3
 8000b92:	fa20 f202 	lsr.w	r2, r0, r2
 8000b96:	4317      	orrs	r7, r2
 8000b98:	409c      	lsls	r4, r3
 8000b9a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000b9e:	fa1f f58c 	uxth.w	r5, ip
 8000ba2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000ba6:	0c22      	lsrs	r2, r4, #16
 8000ba8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000bac:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000bb0:	fb01 f005 	mul.w	r0, r1, r5
 8000bb4:	4290      	cmp	r0, r2
 8000bb6:	d90a      	bls.n	8000bce <__udivmoddi4+0x62>
 8000bb8:	eb1c 0202 	adds.w	r2, ip, r2
 8000bbc:	f101 37ff 	add.w	r7, r1, #4294967295
 8000bc0:	f080 811c 	bcs.w	8000dfc <__udivmoddi4+0x290>
 8000bc4:	4290      	cmp	r0, r2
 8000bc6:	f240 8119 	bls.w	8000dfc <__udivmoddi4+0x290>
 8000bca:	3902      	subs	r1, #2
 8000bcc:	4462      	add	r2, ip
 8000bce:	1a12      	subs	r2, r2, r0
 8000bd0:	b2a4      	uxth	r4, r4
 8000bd2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000bd6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000bda:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bde:	fb00 f505 	mul.w	r5, r0, r5
 8000be2:	42a5      	cmp	r5, r4
 8000be4:	d90a      	bls.n	8000bfc <__udivmoddi4+0x90>
 8000be6:	eb1c 0404 	adds.w	r4, ip, r4
 8000bea:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bee:	f080 8107 	bcs.w	8000e00 <__udivmoddi4+0x294>
 8000bf2:	42a5      	cmp	r5, r4
 8000bf4:	f240 8104 	bls.w	8000e00 <__udivmoddi4+0x294>
 8000bf8:	4464      	add	r4, ip
 8000bfa:	3802      	subs	r0, #2
 8000bfc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c00:	1b64      	subs	r4, r4, r5
 8000c02:	2100      	movs	r1, #0
 8000c04:	b11e      	cbz	r6, 8000c0e <__udivmoddi4+0xa2>
 8000c06:	40dc      	lsrs	r4, r3
 8000c08:	2300      	movs	r3, #0
 8000c0a:	e9c6 4300 	strd	r4, r3, [r6]
 8000c0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c12:	428b      	cmp	r3, r1
 8000c14:	d908      	bls.n	8000c28 <__udivmoddi4+0xbc>
 8000c16:	2e00      	cmp	r6, #0
 8000c18:	f000 80ed 	beq.w	8000df6 <__udivmoddi4+0x28a>
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	e9c6 0500 	strd	r0, r5, [r6]
 8000c22:	4608      	mov	r0, r1
 8000c24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c28:	fab3 f183 	clz	r1, r3
 8000c2c:	2900      	cmp	r1, #0
 8000c2e:	d149      	bne.n	8000cc4 <__udivmoddi4+0x158>
 8000c30:	42ab      	cmp	r3, r5
 8000c32:	d302      	bcc.n	8000c3a <__udivmoddi4+0xce>
 8000c34:	4282      	cmp	r2, r0
 8000c36:	f200 80f8 	bhi.w	8000e2a <__udivmoddi4+0x2be>
 8000c3a:	1a84      	subs	r4, r0, r2
 8000c3c:	eb65 0203 	sbc.w	r2, r5, r3
 8000c40:	2001      	movs	r0, #1
 8000c42:	4617      	mov	r7, r2
 8000c44:	2e00      	cmp	r6, #0
 8000c46:	d0e2      	beq.n	8000c0e <__udivmoddi4+0xa2>
 8000c48:	e9c6 4700 	strd	r4, r7, [r6]
 8000c4c:	e7df      	b.n	8000c0e <__udivmoddi4+0xa2>
 8000c4e:	b902      	cbnz	r2, 8000c52 <__udivmoddi4+0xe6>
 8000c50:	deff      	udf	#255	; 0xff
 8000c52:	fab2 f382 	clz	r3, r2
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	f040 8090 	bne.w	8000d7c <__udivmoddi4+0x210>
 8000c5c:	1a8a      	subs	r2, r1, r2
 8000c5e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c62:	fa1f fe8c 	uxth.w	lr, ip
 8000c66:	2101      	movs	r1, #1
 8000c68:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c6c:	fb07 2015 	mls	r0, r7, r5, r2
 8000c70:	0c22      	lsrs	r2, r4, #16
 8000c72:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c76:	fb0e f005 	mul.w	r0, lr, r5
 8000c7a:	4290      	cmp	r0, r2
 8000c7c:	d908      	bls.n	8000c90 <__udivmoddi4+0x124>
 8000c7e:	eb1c 0202 	adds.w	r2, ip, r2
 8000c82:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c86:	d202      	bcs.n	8000c8e <__udivmoddi4+0x122>
 8000c88:	4290      	cmp	r0, r2
 8000c8a:	f200 80cb 	bhi.w	8000e24 <__udivmoddi4+0x2b8>
 8000c8e:	4645      	mov	r5, r8
 8000c90:	1a12      	subs	r2, r2, r0
 8000c92:	b2a4      	uxth	r4, r4
 8000c94:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c98:	fb07 2210 	mls	r2, r7, r0, r2
 8000c9c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ca0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ca4:	45a6      	cmp	lr, r4
 8000ca6:	d908      	bls.n	8000cba <__udivmoddi4+0x14e>
 8000ca8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cac:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cb0:	d202      	bcs.n	8000cb8 <__udivmoddi4+0x14c>
 8000cb2:	45a6      	cmp	lr, r4
 8000cb4:	f200 80bb 	bhi.w	8000e2e <__udivmoddi4+0x2c2>
 8000cb8:	4610      	mov	r0, r2
 8000cba:	eba4 040e 	sub.w	r4, r4, lr
 8000cbe:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000cc2:	e79f      	b.n	8000c04 <__udivmoddi4+0x98>
 8000cc4:	f1c1 0720 	rsb	r7, r1, #32
 8000cc8:	408b      	lsls	r3, r1
 8000cca:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cce:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cd2:	fa05 f401 	lsl.w	r4, r5, r1
 8000cd6:	fa20 f307 	lsr.w	r3, r0, r7
 8000cda:	40fd      	lsrs	r5, r7
 8000cdc:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ce0:	4323      	orrs	r3, r4
 8000ce2:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ce6:	fa1f fe8c 	uxth.w	lr, ip
 8000cea:	fb09 5518 	mls	r5, r9, r8, r5
 8000cee:	0c1c      	lsrs	r4, r3, #16
 8000cf0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000cf4:	fb08 f50e 	mul.w	r5, r8, lr
 8000cf8:	42a5      	cmp	r5, r4
 8000cfa:	fa02 f201 	lsl.w	r2, r2, r1
 8000cfe:	fa00 f001 	lsl.w	r0, r0, r1
 8000d02:	d90b      	bls.n	8000d1c <__udivmoddi4+0x1b0>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d0c:	f080 8088 	bcs.w	8000e20 <__udivmoddi4+0x2b4>
 8000d10:	42a5      	cmp	r5, r4
 8000d12:	f240 8085 	bls.w	8000e20 <__udivmoddi4+0x2b4>
 8000d16:	f1a8 0802 	sub.w	r8, r8, #2
 8000d1a:	4464      	add	r4, ip
 8000d1c:	1b64      	subs	r4, r4, r5
 8000d1e:	b29d      	uxth	r5, r3
 8000d20:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d24:	fb09 4413 	mls	r4, r9, r3, r4
 8000d28:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d2c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d30:	45a6      	cmp	lr, r4
 8000d32:	d908      	bls.n	8000d46 <__udivmoddi4+0x1da>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f103 35ff 	add.w	r5, r3, #4294967295
 8000d3c:	d26c      	bcs.n	8000e18 <__udivmoddi4+0x2ac>
 8000d3e:	45a6      	cmp	lr, r4
 8000d40:	d96a      	bls.n	8000e18 <__udivmoddi4+0x2ac>
 8000d42:	3b02      	subs	r3, #2
 8000d44:	4464      	add	r4, ip
 8000d46:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d4a:	fba3 9502 	umull	r9, r5, r3, r2
 8000d4e:	eba4 040e 	sub.w	r4, r4, lr
 8000d52:	42ac      	cmp	r4, r5
 8000d54:	46c8      	mov	r8, r9
 8000d56:	46ae      	mov	lr, r5
 8000d58:	d356      	bcc.n	8000e08 <__udivmoddi4+0x29c>
 8000d5a:	d053      	beq.n	8000e04 <__udivmoddi4+0x298>
 8000d5c:	b156      	cbz	r6, 8000d74 <__udivmoddi4+0x208>
 8000d5e:	ebb0 0208 	subs.w	r2, r0, r8
 8000d62:	eb64 040e 	sbc.w	r4, r4, lr
 8000d66:	fa04 f707 	lsl.w	r7, r4, r7
 8000d6a:	40ca      	lsrs	r2, r1
 8000d6c:	40cc      	lsrs	r4, r1
 8000d6e:	4317      	orrs	r7, r2
 8000d70:	e9c6 7400 	strd	r7, r4, [r6]
 8000d74:	4618      	mov	r0, r3
 8000d76:	2100      	movs	r1, #0
 8000d78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7c:	f1c3 0120 	rsb	r1, r3, #32
 8000d80:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d84:	fa20 f201 	lsr.w	r2, r0, r1
 8000d88:	fa25 f101 	lsr.w	r1, r5, r1
 8000d8c:	409d      	lsls	r5, r3
 8000d8e:	432a      	orrs	r2, r5
 8000d90:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d94:	fa1f fe8c 	uxth.w	lr, ip
 8000d98:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d9c:	fb07 1510 	mls	r5, r7, r0, r1
 8000da0:	0c11      	lsrs	r1, r2, #16
 8000da2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000da6:	fb00 f50e 	mul.w	r5, r0, lr
 8000daa:	428d      	cmp	r5, r1
 8000dac:	fa04 f403 	lsl.w	r4, r4, r3
 8000db0:	d908      	bls.n	8000dc4 <__udivmoddi4+0x258>
 8000db2:	eb1c 0101 	adds.w	r1, ip, r1
 8000db6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dba:	d22f      	bcs.n	8000e1c <__udivmoddi4+0x2b0>
 8000dbc:	428d      	cmp	r5, r1
 8000dbe:	d92d      	bls.n	8000e1c <__udivmoddi4+0x2b0>
 8000dc0:	3802      	subs	r0, #2
 8000dc2:	4461      	add	r1, ip
 8000dc4:	1b49      	subs	r1, r1, r5
 8000dc6:	b292      	uxth	r2, r2
 8000dc8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000dcc:	fb07 1115 	mls	r1, r7, r5, r1
 8000dd0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000dd4:	fb05 f10e 	mul.w	r1, r5, lr
 8000dd8:	4291      	cmp	r1, r2
 8000dda:	d908      	bls.n	8000dee <__udivmoddi4+0x282>
 8000ddc:	eb1c 0202 	adds.w	r2, ip, r2
 8000de0:	f105 38ff 	add.w	r8, r5, #4294967295
 8000de4:	d216      	bcs.n	8000e14 <__udivmoddi4+0x2a8>
 8000de6:	4291      	cmp	r1, r2
 8000de8:	d914      	bls.n	8000e14 <__udivmoddi4+0x2a8>
 8000dea:	3d02      	subs	r5, #2
 8000dec:	4462      	add	r2, ip
 8000dee:	1a52      	subs	r2, r2, r1
 8000df0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000df4:	e738      	b.n	8000c68 <__udivmoddi4+0xfc>
 8000df6:	4631      	mov	r1, r6
 8000df8:	4630      	mov	r0, r6
 8000dfa:	e708      	b.n	8000c0e <__udivmoddi4+0xa2>
 8000dfc:	4639      	mov	r1, r7
 8000dfe:	e6e6      	b.n	8000bce <__udivmoddi4+0x62>
 8000e00:	4610      	mov	r0, r2
 8000e02:	e6fb      	b.n	8000bfc <__udivmoddi4+0x90>
 8000e04:	4548      	cmp	r0, r9
 8000e06:	d2a9      	bcs.n	8000d5c <__udivmoddi4+0x1f0>
 8000e08:	ebb9 0802 	subs.w	r8, r9, r2
 8000e0c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e10:	3b01      	subs	r3, #1
 8000e12:	e7a3      	b.n	8000d5c <__udivmoddi4+0x1f0>
 8000e14:	4645      	mov	r5, r8
 8000e16:	e7ea      	b.n	8000dee <__udivmoddi4+0x282>
 8000e18:	462b      	mov	r3, r5
 8000e1a:	e794      	b.n	8000d46 <__udivmoddi4+0x1da>
 8000e1c:	4640      	mov	r0, r8
 8000e1e:	e7d1      	b.n	8000dc4 <__udivmoddi4+0x258>
 8000e20:	46d0      	mov	r8, sl
 8000e22:	e77b      	b.n	8000d1c <__udivmoddi4+0x1b0>
 8000e24:	3d02      	subs	r5, #2
 8000e26:	4462      	add	r2, ip
 8000e28:	e732      	b.n	8000c90 <__udivmoddi4+0x124>
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e70a      	b.n	8000c44 <__udivmoddi4+0xd8>
 8000e2e:	4464      	add	r4, ip
 8000e30:	3802      	subs	r0, #2
 8000e32:	e742      	b.n	8000cba <__udivmoddi4+0x14e>

08000e34 <__aeabi_idiv0>:
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop

08000e38 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000e38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e70 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e3c:	f000 fe86 	bl	8001b4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000e40:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000e42:	e003      	b.n	8000e4c <LoopCopyDataInit>

08000e44 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000e44:	4b0b      	ldr	r3, [pc, #44]	; (8000e74 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000e46:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000e48:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000e4a:	3104      	adds	r1, #4

08000e4c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000e4c:	480a      	ldr	r0, [pc, #40]	; (8000e78 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000e4e:	4b0b      	ldr	r3, [pc, #44]	; (8000e7c <LoopForever+0xe>)
	adds	r2, r0, r1
 8000e50:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000e52:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000e54:	d3f6      	bcc.n	8000e44 <CopyDataInit>
	ldr	r2, =_sbss
 8000e56:	4a0a      	ldr	r2, [pc, #40]	; (8000e80 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000e58:	e002      	b.n	8000e60 <LoopFillZerobss>

08000e5a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000e5a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000e5c:	f842 3b04 	str.w	r3, [r2], #4

08000e60 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000e60:	4b08      	ldr	r3, [pc, #32]	; (8000e84 <LoopForever+0x16>)
	cmp	r2, r3
 8000e62:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000e64:	d3f9      	bcc.n	8000e5a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e66:	f006 fa73 	bl	8007350 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e6a:	f000 f80f 	bl	8000e8c <main>

08000e6e <LoopForever>:

LoopForever:
    b LoopForever
 8000e6e:	e7fe      	b.n	8000e6e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000e70:	20032000 	.word	0x20032000
	ldr	r3, =_sidata
 8000e74:	0800863c 	.word	0x0800863c
	ldr	r0, =_sdata
 8000e78:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000e7c:	20000078 	.word	0x20000078
	ldr	r2, =_sbss
 8000e80:	20000078 	.word	0x20000078
	ldr	r3, = _ebss
 8000e84:	20019464 	.word	0x20019464

08000e88 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e88:	e7fe      	b.n	8000e88 <ADC1_IRQHandler>
	...

08000e8c <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af02      	add	r7, sp, #8
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e92:	f001 fa51 	bl	8002338 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8000e96:	f000 f99b 	bl	80011d0 <SystemClock_Config>

  /* Configure LED2 */
  BSP_LED_Init(LED2);
 8000e9a:	2000      	movs	r0, #0
 8000e9c:	f001 f9b0 	bl	8002200 <BSP_LED_Init>

  /* Initialize all configured peripherals */
  MX_DMA_Init();
 8000ea0:	f000 fb0a 	bl	80014b8 <MX_DMA_Init>
  MX_DAC1_Init();
 8000ea4:	f000 fa14 	bl	80012d0 <MX_DAC1_Init>
  MX_TIM2_Init();
 8000ea8:	f000 fab8 	bl	800141c <MX_TIM2_Init>
  MX_DFSDM1_Init();
 8000eac:	f000 fa52 	bl	8001354 <MX_DFSDM1_Init>
  MX_GPIO_Init();
 8000eb0:	f000 f9c8 	bl	8001244 <MX_GPIO_Init>


  //HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
  HAL_TIM_Base_Start_IT(&htim2); // the _IT at the end of fn. means interrupt
 8000eb4:	483e      	ldr	r0, [pc, #248]	; (8000fb0 <main+0x124>)
 8000eb6:	f004 fcc7 	bl	8005848 <HAL_TIM_Base_Start_IT>

  /* WIFI Web Server demonstration */
#if defined (TERMINAL_USE)
  /* Initialize all configured peripherals */
  hDiscoUart.Instance = DISCOVERY_COM1;
 8000eba:	4b3e      	ldr	r3, [pc, #248]	; (8000fb4 <main+0x128>)
 8000ebc:	4a3e      	ldr	r2, [pc, #248]	; (8000fb8 <main+0x12c>)
 8000ebe:	601a      	str	r2, [r3, #0]
  hDiscoUart.Init.BaudRate = 115200;
 8000ec0:	4b3c      	ldr	r3, [pc, #240]	; (8000fb4 <main+0x128>)
 8000ec2:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ec6:	605a      	str	r2, [r3, #4]
  hDiscoUart.Init.WordLength = UART_WORDLENGTH_8B;
 8000ec8:	4b3a      	ldr	r3, [pc, #232]	; (8000fb4 <main+0x128>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	609a      	str	r2, [r3, #8]
  hDiscoUart.Init.StopBits = UART_STOPBITS_1;
 8000ece:	4b39      	ldr	r3, [pc, #228]	; (8000fb4 <main+0x128>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	60da      	str	r2, [r3, #12]
  hDiscoUart.Init.Parity = UART_PARITY_NONE;
 8000ed4:	4b37      	ldr	r3, [pc, #220]	; (8000fb4 <main+0x128>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	611a      	str	r2, [r3, #16]
  hDiscoUart.Init.Mode = UART_MODE_TX_RX;
 8000eda:	4b36      	ldr	r3, [pc, #216]	; (8000fb4 <main+0x128>)
 8000edc:	220c      	movs	r2, #12
 8000ede:	615a      	str	r2, [r3, #20]
  hDiscoUart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ee0:	4b34      	ldr	r3, [pc, #208]	; (8000fb4 <main+0x128>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	619a      	str	r2, [r3, #24]
  hDiscoUart.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ee6:	4b33      	ldr	r3, [pc, #204]	; (8000fb4 <main+0x128>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	61da      	str	r2, [r3, #28]
  hDiscoUart.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000eec:	4b31      	ldr	r3, [pc, #196]	; (8000fb4 <main+0x128>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	621a      	str	r2, [r3, #32]
  hDiscoUart.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ef2:	4b30      	ldr	r3, [pc, #192]	; (8000fb4 <main+0x128>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	629a      	str	r2, [r3, #40]	; 0x28


  BSP_COM_Init(COM1, &hDiscoUart);
 8000ef8:	492e      	ldr	r1, [pc, #184]	; (8000fb4 <main+0x128>)
 8000efa:	2000      	movs	r0, #0
 8000efc:	f001 f9b0 	bl	8002260 <BSP_COM_Init>

  /* resetting buffers */
  memset(recordingBuffer, 0, VOICE_BUFLEN*sizeof(int32_t));
 8000f00:	4a2e      	ldr	r2, [pc, #184]	; (8000fbc <main+0x130>)
 8000f02:	2100      	movs	r1, #0
 8000f04:	482e      	ldr	r0, [pc, #184]	; (8000fc0 <main+0x134>)
 8000f06:	f006 f9a9 	bl	800725c <memset>
  memset(sendingBuffer, 0, VOICE_BUFLEN/2);
 8000f0a:	f242 7210 	movw	r2, #10000	; 0x2710
 8000f0e:	2100      	movs	r1, #0
 8000f10:	482c      	ldr	r0, [pc, #176]	; (8000fc4 <main+0x138>)
 8000f12:	f006 f9a3 	bl	800725c <memset>

  printf("****** SENDING BOARD Initiating ****** \r\n");
 8000f16:	482c      	ldr	r0, [pc, #176]	; (8000fc8 <main+0x13c>)
 8000f18:	f006 f8a0 	bl	800705c <puts>
    // successfully connected to board
    printf("Connected to other board. \r\n");
    wifi_send_data_to_board("test");
  */
  while (true) {
    printf("Waiting for button press to send mic data.\r\n");
 8000f1c:	482b      	ldr	r0, [pc, #172]	; (8000fcc <main+0x140>)
 8000f1e:	f006 f89d 	bl	800705c <puts>
    while(buttonPressed==false){
 8000f22:	e000      	b.n	8000f26 <main+0x9a>
    	__WFI(); // Waiting for interrupt mode?
 8000f24:	bf30      	wfi
    while(buttonPressed==false){
 8000f26:	4b2a      	ldr	r3, [pc, #168]	; (8000fd0 <main+0x144>)
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	b2db      	uxtb	r3, r3
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d0f9      	beq.n	8000f24 <main+0x98>
    }
    buttonPressed = false;
 8000f30:	4b27      	ldr	r3, [pc, #156]	; (8000fd0 <main+0x144>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	701a      	strb	r2, [r3, #0]
    while (buttonPressed == false) {
 8000f36:	e032      	b.n	8000f9e <main+0x112>
    	// IF YOU WANT TO USE THE HALF_FINISHED THING U HAVE TO SET DMA TO CIRCULAR IN hal_msp.c
    	if (HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter0, recordingBuffer, VOICE_BUFLEN) != HAL_OK) {
 8000f38:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000f3c:	4920      	ldr	r1, [pc, #128]	; (8000fc0 <main+0x134>)
 8000f3e:	4825      	ldr	r0, [pc, #148]	; (8000fd4 <main+0x148>)
 8000f40:	f002 f866 	bl	8003010 <HAL_DFSDM_FilterRegularStart_DMA>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d002      	beq.n	8000f50 <main+0xc4>
    	  printf("Failed to start DFSDM\r\n");
 8000f4a:	4823      	ldr	r0, [pc, #140]	; (8000fd8 <main+0x14c>)
 8000f4c:	f006 f886 	bl	800705c <puts>
		DFSDM_half_finished = false;
		transformBufferToDAC(recordingBuffer, VOICE_BUFLEN/2, sendingBuffer);
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, recordingBuffer, VOICE_BUFLEN/2, DAC_ALIGN_8B_R);
		//wifi_send_data_to_board(sendingBuffer);
		 */
		while (!DFSDM_finished) {
 8000f50:	bf00      	nop
 8000f52:	4b22      	ldr	r3, [pc, #136]	; (8000fdc <main+0x150>)
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	b2db      	uxtb	r3, r3
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d0fa      	beq.n	8000f52 <main+0xc6>
		}
		DFSDM_finished = false;
 8000f5c:	4b1f      	ldr	r3, [pc, #124]	; (8000fdc <main+0x150>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	701a      	strb	r2, [r3, #0]
		HAL_DFSDM_FilterRegularStop_DMA(&hdfsdm1_filter0); // not sure how necessary this is
 8000f62:	481c      	ldr	r0, [pc, #112]	; (8000fd4 <main+0x148>)
 8000f64:	f002 f8d6 	bl	8003114 <HAL_DFSDM_FilterRegularStop_DMA>
		transformBufferToDAC(&(recordingBuffer[VOICE_BUFLEN/2]), VOICE_BUFLEN/2, sendingBuffer);
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, &(recordingBuffer[VOICE_BUFLEN/2]), VOICE_BUFLEN/2, DAC_ALIGN_8B_R);
		wifi_send_data_to_board(sendingBuffer);
		*/
		/* test playback on this board */
		transformBufferToDAC(recordingBuffer, VOICE_BUFLEN, sendingBuffer);
 8000f68:	4a16      	ldr	r2, [pc, #88]	; (8000fc4 <main+0x138>)
 8000f6a:	f644 6120 	movw	r1, #20000	; 0x4e20
 8000f6e:	4814      	ldr	r0, [pc, #80]	; (8000fc0 <main+0x134>)
 8000f70:	f000 f8a6 	bl	80010c0 <transformBufferToDAC>
		if (HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, recordingBuffer, VOICE_BUFLEN, DAC_ALIGN_8B_R) != HAL_OK) {
 8000f74:	2308      	movs	r3, #8
 8000f76:	9300      	str	r3, [sp, #0]
 8000f78:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000f7c:	4a10      	ldr	r2, [pc, #64]	; (8000fc0 <main+0x134>)
 8000f7e:	2100      	movs	r1, #0
 8000f80:	4817      	ldr	r0, [pc, #92]	; (8000fe0 <main+0x154>)
 8000f82:	f001 fba5 	bl	80026d0 <HAL_DAC_Start_DMA>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d002      	beq.n	8000f92 <main+0x106>
		  printf("Failed to start DAC");
 8000f8c:	4815      	ldr	r0, [pc, #84]	; (8000fe4 <main+0x158>)
 8000f8e:	f005 ffff 	bl	8006f90 <iprintf>
		}
		printf("Sending audio to other board \r\n");
 8000f92:	4815      	ldr	r0, [pc, #84]	; (8000fe8 <main+0x15c>)
 8000f94:	f006 f862 	bl	800705c <puts>
		wifi_send_data_to_board(sendingBuffer);
 8000f98:	480a      	ldr	r0, [pc, #40]	; (8000fc4 <main+0x138>)
 8000f9a:	f000 f827 	bl	8000fec <wifi_send_data_to_board>
    while (buttonPressed == false) {
 8000f9e:	4b0c      	ldr	r3, [pc, #48]	; (8000fd0 <main+0x144>)
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	b2db      	uxtb	r3, r3
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d0c7      	beq.n	8000f38 <main+0xac>
    }
    buttonPressed = false;
 8000fa8:	4b09      	ldr	r3, [pc, #36]	; (8000fd0 <main+0x144>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	701a      	strb	r2, [r3, #0]
    printf("Waiting for button press to send mic data.\r\n");
 8000fae:	e7b5      	b.n	8000f1c <main+0x90>
 8000fb0:	200001f4 	.word	0x200001f4
 8000fb4:	2001925c 	.word	0x2001925c
 8000fb8:	40013800 	.word	0x40013800
 8000fbc:	00013880 	.word	0x00013880
 8000fc0:	20000244 	.word	0x20000244
 8000fc4:	20013ac4 	.word	0x20013ac4
 8000fc8:	08008058 	.word	0x08008058
 8000fcc:	08008084 	.word	0x08008084
 8000fd0:	200188e6 	.word	0x200188e6
 8000fd4:	20000108 	.word	0x20000108
 8000fd8:	080080b0 	.word	0x080080b0
 8000fdc:	200188e5 	.word	0x200188e5
 8000fe0:	20000094 	.word	0x20000094
 8000fe4:	080080c8 	.word	0x080080c8
 8000fe8:	080080dc 	.word	0x080080dc

08000fec <wifi_send_data_to_board>:
}

/**
 * This function attempts to sent an HTTP request to the other board, which contains some data.
 */
static int wifi_send_data_to_board(char* data) {
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b086      	sub	sp, #24
 8000ff0:	af02      	add	r7, sp, #8
 8000ff2:	6078      	str	r0, [r7, #4]
	// first try to connect to the board
    if (WIFI_OpenClientConnection(REMOTE_SOCKET, WIFI_TCP_PROTOCOL, "test", RemoteIP_Addr, REMOTE_PORT, PORT) != WIFI_STATUS_OK) {
 8000ff4:	230a      	movs	r3, #10
 8000ff6:	9301      	str	r3, [sp, #4]
 8000ff8:	2350      	movs	r3, #80	; 0x50
 8000ffa:	9300      	str	r3, [sp, #0]
 8000ffc:	4b28      	ldr	r3, [pc, #160]	; (80010a0 <wifi_send_data_to_board+0xb4>)
 8000ffe:	4a29      	ldr	r2, [pc, #164]	; (80010a4 <wifi_send_data_to_board+0xb8>)
 8001000:	2100      	movs	r1, #0
 8001002:	2000      	movs	r0, #0
 8001004:	f001 f882 	bl	800210c <WIFI_OpenClientConnection>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d005      	beq.n	800101a <wifi_send_data_to_board+0x2e>
    	printf("Could not connect to other board \r\n");
 800100e:	4826      	ldr	r0, [pc, #152]	; (80010a8 <wifi_send_data_to_board+0xbc>)
 8001010:	f006 f824 	bl	800705c <puts>
    	return -1;
 8001014:	f04f 33ff 	mov.w	r3, #4294967295
 8001018:	e03d      	b.n	8001096 <wifi_send_data_to_board+0xaa>
    }
    printf("Connected to other board\r\n");
 800101a:	4824      	ldr	r0, [pc, #144]	; (80010ac <wifi_send_data_to_board+0xc0>)
 800101c:	f006 f81e 	bl	800705c <puts>
	//char* http_header = "HTTP/1.0 200 OK\r\nContent-Type: text/plain\r\n";
    //strcat(http_header, data);
    uint16_t actualSent;
    if (WIFI_SendData(REMOTE_SOCKET, data, VOICE_BUFLEN,&actualSent, WIFI_WRITE_TIMEOUT) != WIFI_STATUS_OK) {
 8001020:	f107 030e 	add.w	r3, r7, #14
 8001024:	f242 7210 	movw	r2, #10000	; 0x2710
 8001028:	9200      	str	r2, [sp, #0]
 800102a:	f644 6220 	movw	r2, #20000	; 0x4e20
 800102e:	6879      	ldr	r1, [r7, #4]
 8001030:	2000      	movs	r0, #0
 8001032:	f001 f8c3 	bl	80021bc <WIFI_SendData>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d00e      	beq.n	800105a <wifi_send_data_to_board+0x6e>
    	printf("Could not send data \r\n");
 800103c:	481c      	ldr	r0, [pc, #112]	; (80010b0 <wifi_send_data_to_board+0xc4>)
 800103e:	f006 f80d 	bl	800705c <puts>
        memset(data, 0, strlen(data));
 8001042:	6878      	ldr	r0, [r7, #4]
 8001044:	f7ff f8dc 	bl	8000200 <strlen>
 8001048:	4603      	mov	r3, r0
 800104a:	461a      	mov	r2, r3
 800104c:	2100      	movs	r1, #0
 800104e:	6878      	ldr	r0, [r7, #4]
 8001050:	f006 f904 	bl	800725c <memset>
        return -1;
 8001054:	f04f 33ff 	mov.w	r3, #4294967295
 8001058:	e01d      	b.n	8001096 <wifi_send_data_to_board+0xaa>
    }
    printf("Sent out %d bytes\r\n", actualSent);
 800105a:	89fb      	ldrh	r3, [r7, #14]
 800105c:	4619      	mov	r1, r3
 800105e:	4815      	ldr	r0, [pc, #84]	; (80010b4 <wifi_send_data_to_board+0xc8>)
 8001060:	f005 ff96 	bl	8006f90 <iprintf>
    memset(data, 0, strlen(data)); // maybe we can remove this
 8001064:	6878      	ldr	r0, [r7, #4]
 8001066:	f7ff f8cb 	bl	8000200 <strlen>
 800106a:	4603      	mov	r3, r0
 800106c:	461a      	mov	r2, r3
 800106e:	2100      	movs	r1, #0
 8001070:	6878      	ldr	r0, [r7, #4]
 8001072:	f006 f8f3 	bl	800725c <memset>

    }
    printf("Received response from receiving board: %s\r\n", resp);
    */
    // close connection
    if (WIFI_CloseClientConnection(REMOTE_SOCKET) != WIFI_STATUS_OK) {
 8001076:	2000      	movs	r0, #0
 8001078:	f001 f884 	bl	8002184 <WIFI_CloseClientConnection>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d005      	beq.n	800108e <wifi_send_data_to_board+0xa2>
    	printf("Could not close client connection \r\n");
 8001082:	480d      	ldr	r0, [pc, #52]	; (80010b8 <wifi_send_data_to_board+0xcc>)
 8001084:	f005 ffea 	bl	800705c <puts>
    	return -1;
 8001088:	f04f 33ff 	mov.w	r3, #4294967295
 800108c:	e003      	b.n	8001096 <wifi_send_data_to_board+0xaa>
    }
    printf("Closed client connection \r\n");
 800108e:	480b      	ldr	r0, [pc, #44]	; (80010bc <wifi_send_data_to_board+0xd0>)
 8001090:	f005 ffe4 	bl	800705c <puts>

    return WIFI_STATUS_OK;
 8001094:	2300      	movs	r3, #0
}
 8001096:	4618      	mov	r0, r3
 8001098:	3710      	adds	r7, #16
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	20000240 	.word	0x20000240
 80010a4:	080080fc 	.word	0x080080fc
 80010a8:	08008104 	.word	0x08008104
 80010ac:	08008128 	.word	0x08008128
 80010b0:	08008144 	.word	0x08008144
 80010b4:	0800815c 	.word	0x0800815c
 80010b8:	08008170 	.word	0x08008170
 80010bc:	08008194 	.word	0x08008194

080010c0 <transformBufferToDAC>:
}

/**
 * Transforms a buffer's values into valid DAC 8bit right aligned values
 */
void transformBufferToDAC(int32_t *buffer, uint32_t recording_buffer_length, uint8_t *outputBuffer) {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b088      	sub	sp, #32
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	60f8      	str	r0, [r7, #12]
 80010c8:	60b9      	str	r1, [r7, #8]
 80010ca:	607a      	str	r2, [r7, #4]
	// need to map buffer values to 8bit right alligned values (uint8_t)
	// from experimentation (screaming at the board): min values tend to be -3000 and max seems to be ~1000
	const int16_t MAX_VAL = 1000;
 80010cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010d0:	82fb      	strh	r3, [r7, #22]
	const int16_t MIN_VAL = -1000;
 80010d2:	f64f 4318 	movw	r3, #64536	; 0xfc18
 80010d6:	82bb      	strh	r3, [r7, #20]
	const float a = (255.0)/(MAX_VAL - MIN_VAL); // slope
 80010d8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80010dc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80010e0:	1ad3      	subs	r3, r2, r3
 80010e2:	4618      	mov	r0, r3
 80010e4:	f7ff fa36 	bl	8000554 <__aeabi_i2d>
 80010e8:	4602      	mov	r2, r0
 80010ea:	460b      	mov	r3, r1
 80010ec:	a136      	add	r1, pc, #216	; (adr r1, 80011c8 <transformBufferToDAC+0x108>)
 80010ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80010f2:	f7ff fbc3 	bl	800087c <__aeabi_ddiv>
 80010f6:	4602      	mov	r2, r0
 80010f8:	460b      	mov	r3, r1
 80010fa:	4610      	mov	r0, r2
 80010fc:	4619      	mov	r1, r3
 80010fe:	f7ff fccd 	bl	8000a9c <__aeabi_d2f>
 8001102:	4603      	mov	r3, r0
 8001104:	613b      	str	r3, [r7, #16]
	for (int i = 0; i < recording_buffer_length; i++) {
 8001106:	2300      	movs	r3, #0
 8001108:	61fb      	str	r3, [r7, #28]
 800110a:	e054      	b.n	80011b6 <transformBufferToDAC+0xf6>
		int32_t val = buffer[i]; // 24-bit value
 800110c:	69fb      	ldr	r3, [r7, #28]
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	68fa      	ldr	r2, [r7, #12]
 8001112:	4413      	add	r3, r2
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	61bb      	str	r3, [r7, #24]
		val = val >> 8; // remove this for LOUDER but MORE SCUFFED NOISE
 8001118:	69bb      	ldr	r3, [r7, #24]
 800111a:	121b      	asrs	r3, r3, #8
 800111c:	61bb      	str	r3, [r7, #24]
		// clip buffer values to within [-MIN_VAL, MAX_VAL]
		if (val <= MIN_VAL) {
 800111e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001122:	69ba      	ldr	r2, [r7, #24]
 8001124:	429a      	cmp	r2, r3
 8001126:	dc02      	bgt.n	800112e <transformBufferToDAC+0x6e>
			val = MIN_VAL;
 8001128:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800112c:	61bb      	str	r3, [r7, #24]
		}
		if (val >= MAX_VAL) {
 800112e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001132:	69ba      	ldr	r2, [r7, #24]
 8001134:	429a      	cmp	r2, r3
 8001136:	db02      	blt.n	800113e <transformBufferToDAC+0x7e>
			val = MAX_VAL;
 8001138:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800113c:	61bb      	str	r3, [r7, #24]
		}
		// scale values up by [-MIN_VAL] to make sure no negatives
		if (MIN_VAL < 0) {
 800113e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001142:	2b00      	cmp	r3, #0
 8001144:	da04      	bge.n	8001150 <transformBufferToDAC+0x90>
			val += (-MIN_VAL);
 8001146:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800114a:	69ba      	ldr	r2, [r7, #24]
 800114c:	1ad3      	subs	r3, r2, r3
 800114e:	61bb      	str	r3, [r7, #24]
		}
		// now the range of val should be [0, MAX_VAL-MIN_VAL], apply linear function to get DAC val
		val = round(a*val);
 8001150:	69bb      	ldr	r3, [r7, #24]
 8001152:	ee07 3a90 	vmov	s15, r3
 8001156:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800115a:	edd7 7a04 	vldr	s15, [r7, #16]
 800115e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001162:	ee17 0a90 	vmov	r0, s15
 8001166:	f7ff fa07 	bl	8000578 <__aeabi_f2d>
 800116a:	4602      	mov	r2, r0
 800116c:	460b      	mov	r3, r1
 800116e:	ec43 2b10 	vmov	d0, r2, r3
 8001172:	f006 ff1d 	bl	8007fb0 <round>
 8001176:	ec53 2b10 	vmov	r2, r3, d0
 800117a:	4610      	mov	r0, r2
 800117c:	4619      	mov	r1, r3
 800117e:	f7ff fc65 	bl	8000a4c <__aeabi_d2iz>
 8001182:	4603      	mov	r3, r0
 8001184:	61bb      	str	r3, [r7, #24]
		if (val >= 0 && val <= 255) {
 8001186:	69bb      	ldr	r3, [r7, #24]
 8001188:	2b00      	cmp	r3, #0
 800118a:	db0f      	blt.n	80011ac <transformBufferToDAC+0xec>
 800118c:	69bb      	ldr	r3, [r7, #24]
 800118e:	2bff      	cmp	r3, #255	; 0xff
 8001190:	dc0c      	bgt.n	80011ac <transformBufferToDAC+0xec>
			outputBuffer[i] = (uint8_t)val; // change the buffer
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	687a      	ldr	r2, [r7, #4]
 8001196:	4413      	add	r3, r2
 8001198:	69ba      	ldr	r2, [r7, #24]
 800119a:	b2d2      	uxtb	r2, r2
 800119c:	701a      	strb	r2, [r3, #0]
			buffer[i]=val;
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	68fa      	ldr	r2, [r7, #12]
 80011a4:	4413      	add	r3, r2
 80011a6:	69ba      	ldr	r2, [r7, #24]
 80011a8:	601a      	str	r2, [r3, #0]
 80011aa:	e001      	b.n	80011b0 <transformBufferToDAC+0xf0>
		} else {
			Error_Handler(); // should not happen
 80011ac:	f000 f9fa 	bl	80015a4 <Error_Handler>
	for (int i = 0; i < recording_buffer_length; i++) {
 80011b0:	69fb      	ldr	r3, [r7, #28]
 80011b2:	3301      	adds	r3, #1
 80011b4:	61fb      	str	r3, [r7, #28]
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	68ba      	ldr	r2, [r7, #8]
 80011ba:	429a      	cmp	r2, r3
 80011bc:	d8a6      	bhi.n	800110c <transformBufferToDAC+0x4c>
		}
	}
}
 80011be:	bf00      	nop
 80011c0:	bf00      	nop
 80011c2:	3720      	adds	r7, #32
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	00000000 	.word	0x00000000
 80011cc:	406fe000 	.word	0x406fe000

080011d0 <SystemClock_Config>:
  *            Flash Latency(WS)              = 4
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b096      	sub	sp, #88	; 0x58
 80011d4:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  /* MSI is enabled after System reset, activate PLL with MSI as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80011d6:	2310      	movs	r3, #16
 80011d8:	603b      	str	r3, [r7, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80011da:	2301      	movs	r3, #1
 80011dc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80011de:	2360      	movs	r3, #96	; 0x60
 80011e0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80011e2:	2300      	movs	r3, #0
 80011e4:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011e6:	2302      	movs	r3, #2
 80011e8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80011ea:	2301      	movs	r3, #1
 80011ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80011ee:	2301      	movs	r3, #1
 80011f0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLN = 40;
 80011f2:	2328      	movs	r3, #40	; 0x28
 80011f4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLR = 2;
 80011f6:	2302      	movs	r3, #2
 80011f8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = 7;
 80011fa:	2307      	movs	r3, #7
 80011fc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80011fe:	2304      	movs	r3, #4
 8001200:	63fb      	str	r3, [r7, #60]	; 0x3c
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001202:	463b      	mov	r3, r7
 8001204:	4618      	mov	r0, r3
 8001206:	f002 fdc5 	bl	8003d94 <HAL_RCC_OscConfig>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d000      	beq.n	8001212 <SystemClock_Config+0x42>
  {
    /* Initialization Error */
    while(1);
 8001210:	e7fe      	b.n	8001210 <SystemClock_Config+0x40>
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8001212:	230f      	movs	r3, #15
 8001214:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001216:	2303      	movs	r3, #3
 8001218:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800121a:	2300      	movs	r3, #0
 800121c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800121e:	2300      	movs	r3, #0
 8001220:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001222:	2300      	movs	r3, #0
 8001224:	657b      	str	r3, [r7, #84]	; 0x54
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001226:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800122a:	2104      	movs	r1, #4
 800122c:	4618      	mov	r0, r3
 800122e:	f003 f9cb 	bl	80045c8 <HAL_RCC_ClockConfig>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d000      	beq.n	800123a <SystemClock_Config+0x6a>
  {
    /* Initialization Error */
    while(1);
 8001238:	e7fe      	b.n	8001238 <SystemClock_Config+0x68>
  }
}
 800123a:	bf00      	nop
 800123c:	3758      	adds	r7, #88	; 0x58
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
	...

08001244 <MX_GPIO_Init>:
static void MX_GPIO_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b086      	sub	sp, #24
 8001248:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800124a:	1d3b      	adds	r3, r7, #4
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]
 8001250:	605a      	str	r2, [r3, #4]
 8001252:	609a      	str	r2, [r3, #8]
 8001254:	60da      	str	r2, [r3, #12]
 8001256:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001258:	4b12      	ldr	r3, [pc, #72]	; (80012a4 <MX_GPIO_Init+0x60>)
 800125a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800125c:	4a11      	ldr	r2, [pc, #68]	; (80012a4 <MX_GPIO_Init+0x60>)
 800125e:	f043 0304 	orr.w	r3, r3, #4
 8001262:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001264:	4b0f      	ldr	r3, [pc, #60]	; (80012a4 <MX_GPIO_Init+0x60>)
 8001266:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001268:	f003 0304 	and.w	r3, r3, #4
 800126c:	603b      	str	r3, [r7, #0]
 800126e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001270:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001274:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001276:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800127a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127c:	2300      	movs	r3, #0
 800127e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001280:	1d3b      	adds	r3, r7, #4
 8001282:	4619      	mov	r1, r3
 8001284:	4808      	ldr	r0, [pc, #32]	; (80012a8 <MX_GPIO_Init+0x64>)
 8001286:	f002 fbbb 	bl	8003a00 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800128a:	2200      	movs	r2, #0
 800128c:	2100      	movs	r1, #0
 800128e:	2028      	movs	r0, #40	; 0x28
 8001290:	f001 f9c5 	bl	800261e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001294:	2028      	movs	r0, #40	; 0x28
 8001296:	f001 f9de 	bl	8002656 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800129a:	bf00      	nop
 800129c:	3718      	adds	r7, #24
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	40021000 	.word	0x40021000
 80012a8:	48000800 	.word	0x48000800

080012ac <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&hDiscoUart, (uint8_t *)&ch, 1, 0xFFFF);
 80012b4:	1d39      	adds	r1, r7, #4
 80012b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012ba:	2201      	movs	r2, #1
 80012bc:	4803      	ldr	r0, [pc, #12]	; (80012cc <__io_putchar+0x20>)
 80012be:	f004 ff65 	bl	800618c <HAL_UART_Transmit>

  return ch;
 80012c2:	687b      	ldr	r3, [r7, #4]
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	3708      	adds	r7, #8
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	2001925c 	.word	0x2001925c

080012d0 <MX_DAC1_Init>:
}

#endif

static void MX_DAC1_Init(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b08a      	sub	sp, #40	; 0x28
 80012d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80012d6:	463b      	mov	r3, r7
 80012d8:	2228      	movs	r2, #40	; 0x28
 80012da:	2100      	movs	r1, #0
 80012dc:	4618      	mov	r0, r3
 80012de:	f005 ffbd 	bl	800725c <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80012e2:	4b1a      	ldr	r3, [pc, #104]	; (800134c <MX_DAC1_Init+0x7c>)
 80012e4:	4a1a      	ldr	r2, [pc, #104]	; (8001350 <MX_DAC1_Init+0x80>)
 80012e6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80012e8:	4818      	ldr	r0, [pc, #96]	; (800134c <MX_DAC1_Init+0x7c>)
 80012ea:	f001 f9ce 	bl	800268a <HAL_DAC_Init>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80012f4:	f000 f956 	bl	80015a4 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80012f8:	2300      	movs	r3, #0
 80012fa:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 80012fc:	230a      	movs	r3, #10
 80012fe:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8001300:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001304:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001306:	2300      	movs	r3, #0
 8001308:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800130a:	2300      	movs	r3, #0
 800130c:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800130e:	2300      	movs	r3, #0
 8001310:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001312:	463b      	mov	r3, r7
 8001314:	2200      	movs	r2, #0
 8001316:	4619      	mov	r1, r3
 8001318:	480c      	ldr	r0, [pc, #48]	; (800134c <MX_DAC1_Init+0x7c>)
 800131a:	f001 fac3 	bl	80028a4 <HAL_DAC_ConfigChannel>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <MX_DAC1_Init+0x58>
  {
    Error_Handler();
 8001324:	f000 f93e 	bl	80015a4 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001328:	2300      	movs	r3, #0
 800132a:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800132c:	463b      	mov	r3, r7
 800132e:	2210      	movs	r2, #16
 8001330:	4619      	mov	r1, r3
 8001332:	4806      	ldr	r0, [pc, #24]	; (800134c <MX_DAC1_Init+0x7c>)
 8001334:	f001 fab6 	bl	80028a4 <HAL_DAC_ConfigChannel>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <MX_DAC1_Init+0x72>
  {
    Error_Handler();
 800133e:	f000 f931 	bl	80015a4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001342:	bf00      	nop
 8001344:	3728      	adds	r7, #40	; 0x28
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	20000094 	.word	0x20000094
 8001350:	40007400 	.word	0x40007400

08001354 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 8001358:	4b2b      	ldr	r3, [pc, #172]	; (8001408 <MX_DFSDM1_Init+0xb4>)
 800135a:	4a2c      	ldr	r2, [pc, #176]	; (800140c <MX_DFSDM1_Init+0xb8>)
 800135c:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 800135e:	4b2a      	ldr	r3, [pc, #168]	; (8001408 <MX_DFSDM1_Init+0xb4>)
 8001360:	2200      	movs	r2, #0
 8001362:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 8001364:	4b28      	ldr	r3, [pc, #160]	; (8001408 <MX_DFSDM1_Init+0xb4>)
 8001366:	2201      	movs	r2, #1
 8001368:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 800136a:	4b27      	ldr	r3, [pc, #156]	; (8001408 <MX_DFSDM1_Init+0xb4>)
 800136c:	2201      	movs	r2, #1
 800136e:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_FASTSINC_ORDER;
 8001370:	4b25      	ldr	r3, [pc, #148]	; (8001408 <MX_DFSDM1_Init+0xb4>)
 8001372:	2200      	movs	r2, #0
 8001374:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 100;
 8001376:	4b24      	ldr	r3, [pc, #144]	; (8001408 <MX_DFSDM1_Init+0xb4>)
 8001378:	2264      	movs	r2, #100	; 0x64
 800137a:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 800137c:	4b22      	ldr	r3, [pc, #136]	; (8001408 <MX_DFSDM1_Init+0xb4>)
 800137e:	2201      	movs	r2, #1
 8001380:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter0) != HAL_OK)
 8001382:	4821      	ldr	r0, [pc, #132]	; (8001408 <MX_DFSDM1_Init+0xb4>)
 8001384:	f001 fd24 	bl	8002dd0 <HAL_DFSDM_FilterInit>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <MX_DFSDM1_Init+0x3e>
  {
    Error_Handler();
 800138e:	f000 f909 	bl	80015a4 <Error_Handler>
  }
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 8001392:	4b1f      	ldr	r3, [pc, #124]	; (8001410 <MX_DFSDM1_Init+0xbc>)
 8001394:	4a1f      	ldr	r2, [pc, #124]	; (8001414 <MX_DFSDM1_Init+0xc0>)
 8001396:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 8001398:	4b1d      	ldr	r3, [pc, #116]	; (8001410 <MX_DFSDM1_Init+0xbc>)
 800139a:	2201      	movs	r2, #1
 800139c:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 800139e:	4b1c      	ldr	r3, [pc, #112]	; (8001410 <MX_DFSDM1_Init+0xbc>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 50;
 80013a4:	4b1a      	ldr	r3, [pc, #104]	; (8001410 <MX_DFSDM1_Init+0xbc>)
 80013a6:	2232      	movs	r2, #50	; 0x32
 80013a8:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80013aa:	4b19      	ldr	r3, [pc, #100]	; (8001410 <MX_DFSDM1_Init+0xbc>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80013b0:	4b17      	ldr	r3, [pc, #92]	; (8001410 <MX_DFSDM1_Init+0xbc>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 80013b6:	4b16      	ldr	r3, [pc, #88]	; (8001410 <MX_DFSDM1_Init+0xbc>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80013bc:	4b14      	ldr	r3, [pc, #80]	; (8001410 <MX_DFSDM1_Init+0xbc>)
 80013be:	2200      	movs	r2, #0
 80013c0:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80013c2:	4b13      	ldr	r3, [pc, #76]	; (8001410 <MX_DFSDM1_Init+0xbc>)
 80013c4:	2204      	movs	r2, #4
 80013c6:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80013c8:	4b11      	ldr	r3, [pc, #68]	; (8001410 <MX_DFSDM1_Init+0xbc>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 80013ce:	4b10      	ldr	r3, [pc, #64]	; (8001410 <MX_DFSDM1_Init+0xbc>)
 80013d0:	2201      	movs	r2, #1
 80013d2:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 80013d4:	4b0e      	ldr	r3, [pc, #56]	; (8001410 <MX_DFSDM1_Init+0xbc>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 80013da:	4b0d      	ldr	r3, [pc, #52]	; (8001410 <MX_DFSDM1_Init+0xbc>)
 80013dc:	2200      	movs	r2, #0
 80013de:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 80013e0:	480b      	ldr	r0, [pc, #44]	; (8001410 <MX_DFSDM1_Init+0xbc>)
 80013e2:	f001 fc35 	bl	8002c50 <HAL_DFSDM_ChannelInit>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <MX_DFSDM1_Init+0x9c>
  {
    Error_Handler();
 80013ec:	f000 f8da 	bl	80015a4 <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_2, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 80013f0:	2201      	movs	r2, #1
 80013f2:	4909      	ldr	r1, [pc, #36]	; (8001418 <MX_DFSDM1_Init+0xc4>)
 80013f4:	4804      	ldr	r0, [pc, #16]	; (8001408 <MX_DFSDM1_Init+0xb4>)
 80013f6:	f001 fdc5 	bl	8002f84 <HAL_DFSDM_FilterConfigRegChannel>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <MX_DFSDM1_Init+0xb0>
  {
    Error_Handler();
 8001400:	f000 f8d0 	bl	80015a4 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8001404:	bf00      	nop
 8001406:	bd80      	pop	{r7, pc}
 8001408:	20000108 	.word	0x20000108
 800140c:	40016100 	.word	0x40016100
 8001410:	2000015c 	.word	0x2000015c
 8001414:	40016040 	.word	0x40016040
 8001418:	00020004 	.word	0x00020004

0800141c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b088      	sub	sp, #32
 8001420:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001422:	f107 0310 	add.w	r3, r7, #16
 8001426:	2200      	movs	r2, #0
 8001428:	601a      	str	r2, [r3, #0]
 800142a:	605a      	str	r2, [r3, #4]
 800142c:	609a      	str	r2, [r3, #8]
 800142e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001430:	1d3b      	adds	r3, r7, #4
 8001432:	2200      	movs	r2, #0
 8001434:	601a      	str	r2, [r3, #0]
 8001436:	605a      	str	r2, [r3, #4]
 8001438:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800143a:	4b1e      	ldr	r3, [pc, #120]	; (80014b4 <MX_TIM2_Init+0x98>)
 800143c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001440:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001442:	4b1c      	ldr	r3, [pc, #112]	; (80014b4 <MX_TIM2_Init+0x98>)
 8001444:	2200      	movs	r2, #0
 8001446:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001448:	4b1a      	ldr	r3, [pc, #104]	; (80014b4 <MX_TIM2_Init+0x98>)
 800144a:	2200      	movs	r2, #0
 800144c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5000;
 800144e:	4b19      	ldr	r3, [pc, #100]	; (80014b4 <MX_TIM2_Init+0x98>)
 8001450:	f241 3288 	movw	r2, #5000	; 0x1388
 8001454:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001456:	4b17      	ldr	r3, [pc, #92]	; (80014b4 <MX_TIM2_Init+0x98>)
 8001458:	2200      	movs	r2, #0
 800145a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800145c:	4b15      	ldr	r3, [pc, #84]	; (80014b4 <MX_TIM2_Init+0x98>)
 800145e:	2200      	movs	r2, #0
 8001460:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001462:	4814      	ldr	r0, [pc, #80]	; (80014b4 <MX_TIM2_Init+0x98>)
 8001464:	f004 f999 	bl	800579a <HAL_TIM_Base_Init>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800146e:	f000 f899 	bl	80015a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001472:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001476:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001478:	f107 0310 	add.w	r3, r7, #16
 800147c:	4619      	mov	r1, r3
 800147e:	480d      	ldr	r0, [pc, #52]	; (80014b4 <MX_TIM2_Init+0x98>)
 8001480:	f004 fb54 	bl	8005b2c <HAL_TIM_ConfigClockSource>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800148a:	f000 f88b 	bl	80015a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800148e:	2320      	movs	r3, #32
 8001490:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001492:	2300      	movs	r3, #0
 8001494:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001496:	1d3b      	adds	r3, r7, #4
 8001498:	4619      	mov	r1, r3
 800149a:	4806      	ldr	r0, [pc, #24]	; (80014b4 <MX_TIM2_Init+0x98>)
 800149c:	f004 fd76 	bl	8005f8c <HAL_TIMEx_MasterConfigSynchronization>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80014a6:	f000 f87d 	bl	80015a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80014aa:	bf00      	nop
 80014ac:	3720      	adds	r7, #32
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	200001f4 	.word	0x200001f4

080014b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80014be:	4b16      	ldr	r3, [pc, #88]	; (8001518 <MX_DMA_Init+0x60>)
 80014c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014c2:	4a15      	ldr	r2, [pc, #84]	; (8001518 <MX_DMA_Init+0x60>)
 80014c4:	f043 0304 	orr.w	r3, r3, #4
 80014c8:	6493      	str	r3, [r2, #72]	; 0x48
 80014ca:	4b13      	ldr	r3, [pc, #76]	; (8001518 <MX_DMA_Init+0x60>)
 80014cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014ce:	f003 0304 	and.w	r3, r3, #4
 80014d2:	607b      	str	r3, [r7, #4]
 80014d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80014d6:	4b10      	ldr	r3, [pc, #64]	; (8001518 <MX_DMA_Init+0x60>)
 80014d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014da:	4a0f      	ldr	r2, [pc, #60]	; (8001518 <MX_DMA_Init+0x60>)
 80014dc:	f043 0301 	orr.w	r3, r3, #1
 80014e0:	6493      	str	r3, [r2, #72]	; 0x48
 80014e2:	4b0d      	ldr	r3, [pc, #52]	; (8001518 <MX_DMA_Init+0x60>)
 80014e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014e6:	f003 0301 	and.w	r3, r3, #1
 80014ea:	603b      	str	r3, [r7, #0]
 80014ec:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80014ee:	2200      	movs	r2, #0
 80014f0:	2100      	movs	r1, #0
 80014f2:	200b      	movs	r0, #11
 80014f4:	f001 f893 	bl	800261e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80014f8:	200b      	movs	r0, #11
 80014fa:	f001 f8ac 	bl	8002656 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80014fe:	2200      	movs	r2, #0
 8001500:	2100      	movs	r1, #0
 8001502:	200c      	movs	r0, #12
 8001504:	f001 f88b 	bl	800261e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001508:	200c      	movs	r0, #12
 800150a:	f001 f8a4 	bl	8002656 <HAL_NVIC_EnableIRQ>

}
 800150e:	bf00      	nop
 8001510:	3708      	adds	r7, #8
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	40021000 	.word	0x40021000

0800151c <HAL_GPIO_EXTI_Callback>:
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	4603      	mov	r3, r0
 8001524:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 8001526:	88fb      	ldrh	r3, [r7, #6]
 8001528:	2b02      	cmp	r3, #2
 800152a:	d003      	beq.n	8001534 <HAL_GPIO_EXTI_Callback+0x18>
 800152c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001530:	d003      	beq.n	800153a <HAL_GPIO_EXTI_Callback+0x1e>
      buttonPressed=1;
        break;
     }
    default:
    {
      break;
 8001532:	e006      	b.n	8001542 <HAL_GPIO_EXTI_Callback+0x26>
      SPI_WIFI_ISR();
 8001534:	f000 fdda 	bl	80020ec <SPI_WIFI_ISR>
      break;
 8001538:	e003      	b.n	8001542 <HAL_GPIO_EXTI_Callback+0x26>
      buttonPressed=1;
 800153a:	4b04      	ldr	r3, [pc, #16]	; (800154c <HAL_GPIO_EXTI_Callback+0x30>)
 800153c:	2201      	movs	r2, #1
 800153e:	701a      	strb	r2, [r3, #0]
        break;
 8001540:	bf00      	nop
    }
  }
}
 8001542:	bf00      	nop
 8001544:	3708      	adds	r7, #8
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	200188e6 	.word	0x200188e6

08001550 <HAL_DFSDM_FilterRegConvCpltCallback>:
    {
     buttonPressed=true;
    }
}*/

void HAL_DFSDM_FilterRegConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter) {
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
	DFSDM_finished = true;
 8001558:	4b04      	ldr	r3, [pc, #16]	; (800156c <HAL_DFSDM_FilterRegConvCpltCallback+0x1c>)
 800155a:	2201      	movs	r2, #1
 800155c:	701a      	strb	r2, [r3, #0]
}
 800155e:	bf00      	nop
 8001560:	370c      	adds	r7, #12
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	200188e5 	.word	0x200188e5

08001570 <HAL_DFSDM_FilterRegConvHalfCpltCallback>:

void HAL_DFSDM_FilterRegConvHalfCpltCallback (DFSDM_Filter_HandleTypeDef * hdfsdm_filter) {
 8001570:	b480      	push	{r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
	DFSDM_half_finished = true;
 8001578:	4b04      	ldr	r3, [pc, #16]	; (800158c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1c>)
 800157a:	2201      	movs	r2, #1
 800157c:	701a      	strb	r2, [r3, #0]
}
 800157e:	bf00      	nop
 8001580:	370c      	adds	r7, #12
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	200188e4 	.word	0x200188e4

08001590 <SPI3_IRQHandler>:
  * @brief  SPI3 line detection callback.
  * @param  None
  * @retval None
  */
void SPI3_IRQHandler(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
  HAL_SPI_IRQHandler(&hspi);
 8001594:	4802      	ldr	r0, [pc, #8]	; (80015a0 <SPI3_IRQHandler+0x10>)
 8001596:	f003 ffed 	bl	8005574 <HAL_SPI_IRQHandler>
}
 800159a:	bf00      	nop
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	200188f4 	.word	0x200188f4

080015a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015a8:	b672      	cpsid	i
}
 80015aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015ac:	e7fe      	b.n	80015ac <Error_Handler+0x8>
	...

080015b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015b6:	4b0f      	ldr	r3, [pc, #60]	; (80015f4 <HAL_MspInit+0x44>)
 80015b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015ba:	4a0e      	ldr	r2, [pc, #56]	; (80015f4 <HAL_MspInit+0x44>)
 80015bc:	f043 0301 	orr.w	r3, r3, #1
 80015c0:	6613      	str	r3, [r2, #96]	; 0x60
 80015c2:	4b0c      	ldr	r3, [pc, #48]	; (80015f4 <HAL_MspInit+0x44>)
 80015c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015c6:	f003 0301 	and.w	r3, r3, #1
 80015ca:	607b      	str	r3, [r7, #4]
 80015cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015ce:	4b09      	ldr	r3, [pc, #36]	; (80015f4 <HAL_MspInit+0x44>)
 80015d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015d2:	4a08      	ldr	r2, [pc, #32]	; (80015f4 <HAL_MspInit+0x44>)
 80015d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015d8:	6593      	str	r3, [r2, #88]	; 0x58
 80015da:	4b06      	ldr	r3, [pc, #24]	; (80015f4 <HAL_MspInit+0x44>)
 80015dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015e2:	603b      	str	r3, [r7, #0]
 80015e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015e6:	bf00      	nop
 80015e8:	370c      	adds	r7, #12
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	40021000 	.word	0x40021000

080015f8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b08a      	sub	sp, #40	; 0x28
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001600:	f107 0314 	add.w	r3, r7, #20
 8001604:	2200      	movs	r2, #0
 8001606:	601a      	str	r2, [r3, #0]
 8001608:	605a      	str	r2, [r3, #4]
 800160a:	609a      	str	r2, [r3, #8]
 800160c:	60da      	str	r2, [r3, #12]
 800160e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a2a      	ldr	r2, [pc, #168]	; (80016c0 <HAL_DAC_MspInit+0xc8>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d14e      	bne.n	80016b8 <HAL_DAC_MspInit+0xc0>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800161a:	4b2a      	ldr	r3, [pc, #168]	; (80016c4 <HAL_DAC_MspInit+0xcc>)
 800161c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800161e:	4a29      	ldr	r2, [pc, #164]	; (80016c4 <HAL_DAC_MspInit+0xcc>)
 8001620:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001624:	6593      	str	r3, [r2, #88]	; 0x58
 8001626:	4b27      	ldr	r3, [pc, #156]	; (80016c4 <HAL_DAC_MspInit+0xcc>)
 8001628:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800162a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800162e:	613b      	str	r3, [r7, #16]
 8001630:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001632:	4b24      	ldr	r3, [pc, #144]	; (80016c4 <HAL_DAC_MspInit+0xcc>)
 8001634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001636:	4a23      	ldr	r2, [pc, #140]	; (80016c4 <HAL_DAC_MspInit+0xcc>)
 8001638:	f043 0301 	orr.w	r3, r3, #1
 800163c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800163e:	4b21      	ldr	r3, [pc, #132]	; (80016c4 <HAL_DAC_MspInit+0xcc>)
 8001640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001642:	f003 0301 	and.w	r3, r3, #1
 8001646:	60fb      	str	r3, [r7, #12]
 8001648:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800164a:	2330      	movs	r3, #48	; 0x30
 800164c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800164e:	2303      	movs	r3, #3
 8001650:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001652:	2300      	movs	r3, #0
 8001654:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001656:	f107 0314 	add.w	r3, r7, #20
 800165a:	4619      	mov	r1, r3
 800165c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001660:	f002 f9ce 	bl	8003a00 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel1;
 8001664:	4b18      	ldr	r3, [pc, #96]	; (80016c8 <HAL_DAC_MspInit+0xd0>)
 8001666:	4a19      	ldr	r2, [pc, #100]	; (80016cc <HAL_DAC_MspInit+0xd4>)
 8001668:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CH1;
 800166a:	4b17      	ldr	r3, [pc, #92]	; (80016c8 <HAL_DAC_MspInit+0xd0>)
 800166c:	2206      	movs	r2, #6
 800166e:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001670:	4b15      	ldr	r3, [pc, #84]	; (80016c8 <HAL_DAC_MspInit+0xd0>)
 8001672:	2210      	movs	r2, #16
 8001674:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001676:	4b14      	ldr	r3, [pc, #80]	; (80016c8 <HAL_DAC_MspInit+0xd0>)
 8001678:	2200      	movs	r2, #0
 800167a:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800167c:	4b12      	ldr	r3, [pc, #72]	; (80016c8 <HAL_DAC_MspInit+0xd0>)
 800167e:	2280      	movs	r2, #128	; 0x80
 8001680:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001682:	4b11      	ldr	r3, [pc, #68]	; (80016c8 <HAL_DAC_MspInit+0xd0>)
 8001684:	2200      	movs	r2, #0
 8001686:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001688:	4b0f      	ldr	r3, [pc, #60]	; (80016c8 <HAL_DAC_MspInit+0xd0>)
 800168a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800168e:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_NORMAL;
 8001690:	4b0d      	ldr	r3, [pc, #52]	; (80016c8 <HAL_DAC_MspInit+0xd0>)
 8001692:	2200      	movs	r2, #0
 8001694:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001696:	4b0c      	ldr	r3, [pc, #48]	; (80016c8 <HAL_DAC_MspInit+0xd0>)
 8001698:	2200      	movs	r2, #0
 800169a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 800169c:	480a      	ldr	r0, [pc, #40]	; (80016c8 <HAL_DAC_MspInit+0xd0>)
 800169e:	f001 fe81 	bl	80033a4 <HAL_DMA_Init>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <HAL_DAC_MspInit+0xb4>
    {
      Error_Handler();
 80016a8:	f7ff ff7c 	bl	80015a4 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	4a06      	ldr	r2, [pc, #24]	; (80016c8 <HAL_DAC_MspInit+0xd0>)
 80016b0:	609a      	str	r2, [r3, #8]
 80016b2:	4a05      	ldr	r2, [pc, #20]	; (80016c8 <HAL_DAC_MspInit+0xd0>)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80016b8:	bf00      	nop
 80016ba:	3728      	adds	r7, #40	; 0x28
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	40007400 	.word	0x40007400
 80016c4:	40021000 	.word	0x40021000
 80016c8:	200000a8 	.word	0x200000a8
 80016cc:	40020008 	.word	0x40020008

080016d0 <HAL_DFSDM_FilterMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_filter: DFSDM_Filter handle pointer
* @retval None
*/
void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b0ae      	sub	sp, #184	; 0xb8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]
 80016e0:	605a      	str	r2, [r3, #4]
 80016e2:	609a      	str	r2, [r3, #8]
 80016e4:	60da      	str	r2, [r3, #12]
 80016e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016e8:	f107 0310 	add.w	r3, r7, #16
 80016ec:	2294      	movs	r2, #148	; 0x94
 80016ee:	2100      	movs	r1, #0
 80016f0:	4618      	mov	r0, r3
 80016f2:	f005 fdb3 	bl	800725c <memset>
  if(DFSDM1_Init == 0)
 80016f6:	4b45      	ldr	r3, [pc, #276]	; (800180c <HAL_DFSDM_FilterMspInit+0x13c>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d14b      	bne.n	8001796 <HAL_DFSDM_FilterMspInit+0xc6>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 80016fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001702:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001704:	2300      	movs	r3, #0
 8001706:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800170a:	f107 0310 	add.w	r3, r7, #16
 800170e:	4618      	mov	r0, r3
 8001710:	f003 fa18 	bl	8004b44 <HAL_RCCEx_PeriphCLKConfig>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <HAL_DFSDM_FilterMspInit+0x4e>
    {
      Error_Handler();
 800171a:	f7ff ff43 	bl	80015a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 800171e:	4b3c      	ldr	r3, [pc, #240]	; (8001810 <HAL_DFSDM_FilterMspInit+0x140>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	3301      	adds	r3, #1
 8001724:	4a3a      	ldr	r2, [pc, #232]	; (8001810 <HAL_DFSDM_FilterMspInit+0x140>)
 8001726:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8001728:	4b39      	ldr	r3, [pc, #228]	; (8001810 <HAL_DFSDM_FilterMspInit+0x140>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	2b01      	cmp	r3, #1
 800172e:	d10b      	bne.n	8001748 <HAL_DFSDM_FilterMspInit+0x78>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001730:	4b38      	ldr	r3, [pc, #224]	; (8001814 <HAL_DFSDM_FilterMspInit+0x144>)
 8001732:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001734:	4a37      	ldr	r2, [pc, #220]	; (8001814 <HAL_DFSDM_FilterMspInit+0x144>)
 8001736:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800173a:	6613      	str	r3, [r2, #96]	; 0x60
 800173c:	4b35      	ldr	r3, [pc, #212]	; (8001814 <HAL_DFSDM_FilterMspInit+0x144>)
 800173e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001740:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001744:	60fb      	str	r3, [r7, #12]
 8001746:	68fb      	ldr	r3, [r7, #12]
    }

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001748:	4b32      	ldr	r3, [pc, #200]	; (8001814 <HAL_DFSDM_FilterMspInit+0x144>)
 800174a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800174c:	4a31      	ldr	r2, [pc, #196]	; (8001814 <HAL_DFSDM_FilterMspInit+0x144>)
 800174e:	f043 0310 	orr.w	r3, r3, #16
 8001752:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001754:	4b2f      	ldr	r3, [pc, #188]	; (8001814 <HAL_DFSDM_FilterMspInit+0x144>)
 8001756:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001758:	f003 0310 	and.w	r3, r3, #16
 800175c:	60bb      	str	r3, [r7, #8]
 800175e:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8001760:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001764:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001768:	2302      	movs	r3, #2
 800176a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176e:	2300      	movs	r3, #0
 8001770:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001774:	2300      	movs	r3, #0
 8001776:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800177a:	2306      	movs	r3, #6
 800177c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001780:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001784:	4619      	mov	r1, r3
 8001786:	4824      	ldr	r0, [pc, #144]	; (8001818 <HAL_DFSDM_FilterMspInit+0x148>)
 8001788:	f002 f93a 	bl	8003a00 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 800178c:	4b1f      	ldr	r3, [pc, #124]	; (800180c <HAL_DFSDM_FilterMspInit+0x13c>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	3301      	adds	r3, #1
 8001792:	4a1e      	ldr	r2, [pc, #120]	; (800180c <HAL_DFSDM_FilterMspInit+0x13c>)
 8001794:	6013      	str	r3, [r2, #0]
  }

    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(hdfsdm_filter->Instance == DFSDM1_Filter0){
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a20      	ldr	r2, [pc, #128]	; (800181c <HAL_DFSDM_FilterMspInit+0x14c>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d130      	bne.n	8001802 <HAL_DFSDM_FilterMspInit+0x132>
    hdma_dfsdm1_flt0.Instance = DMA1_Channel2;
 80017a0:	4b1f      	ldr	r3, [pc, #124]	; (8001820 <HAL_DFSDM_FilterMspInit+0x150>)
 80017a2:	4a20      	ldr	r2, [pc, #128]	; (8001824 <HAL_DFSDM_FilterMspInit+0x154>)
 80017a4:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt0.Init.Request = DMA_REQUEST_DFSDM1_FLT0;
 80017a6:	4b1e      	ldr	r3, [pc, #120]	; (8001820 <HAL_DFSDM_FilterMspInit+0x150>)
 80017a8:	2256      	movs	r2, #86	; 0x56
 80017aa:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017ac:	4b1c      	ldr	r3, [pc, #112]	; (8001820 <HAL_DFSDM_FilterMspInit+0x150>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 80017b2:	4b1b      	ldr	r3, [pc, #108]	; (8001820 <HAL_DFSDM_FilterMspInit+0x150>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 80017b8:	4b19      	ldr	r3, [pc, #100]	; (8001820 <HAL_DFSDM_FilterMspInit+0x150>)
 80017ba:	2280      	movs	r2, #128	; 0x80
 80017bc:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80017be:	4b18      	ldr	r3, [pc, #96]	; (8001820 <HAL_DFSDM_FilterMspInit+0x150>)
 80017c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017c4:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80017c6:	4b16      	ldr	r3, [pc, #88]	; (8001820 <HAL_DFSDM_FilterMspInit+0x150>)
 80017c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80017cc:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_NORMAL;
 80017ce:	4b14      	ldr	r3, [pc, #80]	; (8001820 <HAL_DFSDM_FilterMspInit+0x150>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_LOW;
 80017d4:	4b12      	ldr	r3, [pc, #72]	; (8001820 <HAL_DFSDM_FilterMspInit+0x150>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 80017da:	4811      	ldr	r0, [pc, #68]	; (8001820 <HAL_DFSDM_FilterMspInit+0x150>)
 80017dc:	f001 fde2 	bl	80033a4 <HAL_DMA_Init>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <HAL_DFSDM_FilterMspInit+0x11a>
    {
      Error_Handler();
 80017e6:	f7ff fedd 	bl	80015a4 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hdfsdm_filter,hdmaInj,hdma_dfsdm1_flt0);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4a0c      	ldr	r2, [pc, #48]	; (8001820 <HAL_DFSDM_FilterMspInit+0x150>)
 80017ee:	62da      	str	r2, [r3, #44]	; 0x2c
 80017f0:	4a0b      	ldr	r2, [pc, #44]	; (8001820 <HAL_DFSDM_FilterMspInit+0x150>)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(hdfsdm_filter,hdmaReg,hdma_dfsdm1_flt0);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	4a09      	ldr	r2, [pc, #36]	; (8001820 <HAL_DFSDM_FilterMspInit+0x150>)
 80017fa:	629a      	str	r2, [r3, #40]	; 0x28
 80017fc:	4a08      	ldr	r2, [pc, #32]	; (8001820 <HAL_DFSDM_FilterMspInit+0x150>)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6293      	str	r3, [r2, #40]	; 0x28
  }

}
 8001802:	bf00      	nop
 8001804:	37b8      	adds	r7, #184	; 0xb8
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	200188ec 	.word	0x200188ec
 8001810:	200188e8 	.word	0x200188e8
 8001814:	40021000 	.word	0x40021000
 8001818:	48001000 	.word	0x48001000
 800181c:	40016100 	.word	0x40016100
 8001820:	20000194 	.word	0x20000194
 8001824:	4002001c 	.word	0x4002001c

08001828 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b0ae      	sub	sp, #184	; 0xb8
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001830:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001834:	2200      	movs	r2, #0
 8001836:	601a      	str	r2, [r3, #0]
 8001838:	605a      	str	r2, [r3, #4]
 800183a:	609a      	str	r2, [r3, #8]
 800183c:	60da      	str	r2, [r3, #12]
 800183e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001840:	f107 0310 	add.w	r3, r7, #16
 8001844:	2294      	movs	r2, #148	; 0x94
 8001846:	2100      	movs	r1, #0
 8001848:	4618      	mov	r0, r3
 800184a:	f005 fd07 	bl	800725c <memset>
  if(DFSDM1_Init == 0)
 800184e:	4b2a      	ldr	r3, [pc, #168]	; (80018f8 <HAL_DFSDM_ChannelMspInit+0xd0>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d14b      	bne.n	80018ee <HAL_DFSDM_ChannelMspInit+0xc6>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8001856:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800185a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 800185c:	2300      	movs	r3, #0
 800185e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001862:	f107 0310 	add.w	r3, r7, #16
 8001866:	4618      	mov	r0, r3
 8001868:	f003 f96c 	bl	8004b44 <HAL_RCCEx_PeriphCLKConfig>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8001872:	f7ff fe97 	bl	80015a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8001876:	4b21      	ldr	r3, [pc, #132]	; (80018fc <HAL_DFSDM_ChannelMspInit+0xd4>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	3301      	adds	r3, #1
 800187c:	4a1f      	ldr	r2, [pc, #124]	; (80018fc <HAL_DFSDM_ChannelMspInit+0xd4>)
 800187e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8001880:	4b1e      	ldr	r3, [pc, #120]	; (80018fc <HAL_DFSDM_ChannelMspInit+0xd4>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	2b01      	cmp	r3, #1
 8001886:	d10b      	bne.n	80018a0 <HAL_DFSDM_ChannelMspInit+0x78>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001888:	4b1d      	ldr	r3, [pc, #116]	; (8001900 <HAL_DFSDM_ChannelMspInit+0xd8>)
 800188a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800188c:	4a1c      	ldr	r2, [pc, #112]	; (8001900 <HAL_DFSDM_ChannelMspInit+0xd8>)
 800188e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001892:	6613      	str	r3, [r2, #96]	; 0x60
 8001894:	4b1a      	ldr	r3, [pc, #104]	; (8001900 <HAL_DFSDM_ChannelMspInit+0xd8>)
 8001896:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001898:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800189c:	60fb      	str	r3, [r7, #12]
 800189e:	68fb      	ldr	r3, [r7, #12]
    }

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80018a0:	4b17      	ldr	r3, [pc, #92]	; (8001900 <HAL_DFSDM_ChannelMspInit+0xd8>)
 80018a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018a4:	4a16      	ldr	r2, [pc, #88]	; (8001900 <HAL_DFSDM_ChannelMspInit+0xd8>)
 80018a6:	f043 0310 	orr.w	r3, r3, #16
 80018aa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018ac:	4b14      	ldr	r3, [pc, #80]	; (8001900 <HAL_DFSDM_ChannelMspInit+0xd8>)
 80018ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018b0:	f003 0310 	and.w	r3, r3, #16
 80018b4:	60bb      	str	r3, [r7, #8]
 80018b6:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 80018b8:	f44f 7320 	mov.w	r3, #640	; 0x280
 80018bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c0:	2302      	movs	r3, #2
 80018c2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c6:	2300      	movs	r3, #0
 80018c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018cc:	2300      	movs	r3, #0
 80018ce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80018d2:	2306      	movs	r3, #6
 80018d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018d8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80018dc:	4619      	mov	r1, r3
 80018de:	4809      	ldr	r0, [pc, #36]	; (8001904 <HAL_DFSDM_ChannelMspInit+0xdc>)
 80018e0:	f002 f88e 	bl	8003a00 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80018e4:	4b04      	ldr	r3, [pc, #16]	; (80018f8 <HAL_DFSDM_ChannelMspInit+0xd0>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	3301      	adds	r3, #1
 80018ea:	4a03      	ldr	r2, [pc, #12]	; (80018f8 <HAL_DFSDM_ChannelMspInit+0xd0>)
 80018ec:	6013      	str	r3, [r2, #0]
  }

}
 80018ee:	bf00      	nop
 80018f0:	37b8      	adds	r7, #184	; 0xb8
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	200188ec 	.word	0x200188ec
 80018fc:	200188e8 	.word	0x200188e8
 8001900:	40021000 	.word	0x40021000
 8001904:	48001000 	.word	0x48001000

08001908 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b084      	sub	sp, #16
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001918:	d113      	bne.n	8001942 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800191a:	4b0c      	ldr	r3, [pc, #48]	; (800194c <HAL_TIM_Base_MspInit+0x44>)
 800191c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800191e:	4a0b      	ldr	r2, [pc, #44]	; (800194c <HAL_TIM_Base_MspInit+0x44>)
 8001920:	f043 0301 	orr.w	r3, r3, #1
 8001924:	6593      	str	r3, [r2, #88]	; 0x58
 8001926:	4b09      	ldr	r3, [pc, #36]	; (800194c <HAL_TIM_Base_MspInit+0x44>)
 8001928:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800192a:	f003 0301 	and.w	r3, r3, #1
 800192e:	60fb      	str	r3, [r7, #12]
 8001930:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001932:	2200      	movs	r2, #0
 8001934:	2100      	movs	r1, #0
 8001936:	201c      	movs	r0, #28
 8001938:	f000 fe71 	bl	800261e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800193c:	201c      	movs	r0, #28
 800193e:	f000 fe8a 	bl	8002656 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001942:	bf00      	nop
 8001944:	3710      	adds	r7, #16
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	40021000 	.word	0x40021000

08001950 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
}
 8001954:	bf00      	nop
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr

0800195e <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800195e:	b480      	push	{r7}
 8001960:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8001962:	e7fe      	b.n	8001962 <HardFault_Handler+0x4>

08001964 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8001968:	e7fe      	b.n	8001968 <MemManage_Handler+0x4>

0800196a <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800196a:	b480      	push	{r7}
 800196c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800196e:	e7fe      	b.n	800196e <BusFault_Handler+0x4>

08001970 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8001974:	e7fe      	b.n	8001974 <UsageFault_Handler+0x4>

08001976 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8001976:	b480      	push	{r7}
 8001978:	af00      	add	r7, sp, #0
}
 800197a:	bf00      	nop
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr

08001984 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
}
 8001988:	bf00      	nop
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr

08001992 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8001992:	b480      	push	{r7}
 8001994:	af00      	add	r7, sp, #0
}
 8001996:	bf00      	nop
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr

080019a0 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
  HAL_IncTick();
 80019a4:	f000 fd1c 	bl	80023e0 <HAL_IncTick>
}
 80019a8:	bf00      	nop
 80019aa:	bd80      	pop	{r7, pc}

080019ac <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80019b0:	4802      	ldr	r0, [pc, #8]	; (80019bc <DMA1_Channel1_IRQHandler+0x10>)
 80019b2:	f001 fed5 	bl	8003760 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80019b6:	bf00      	nop
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	200000a8 	.word	0x200000a8

080019c0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 80019c4:	4802      	ldr	r0, [pc, #8]	; (80019d0 <DMA1_Channel2_IRQHandler+0x10>)
 80019c6:	f001 fecb 	bl	8003760 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80019ca:	bf00      	nop
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	20000194 	.word	0x20000194

080019d4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80019d8:	4802      	ldr	r0, [pc, #8]	; (80019e4 <TIM2_IRQHandler+0x10>)
 80019da:	f003 ffa5 	bl	8005928 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80019de:	bf00      	nop
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	200001f4 	.word	0x200001f4

080019e8 <EXTI1_IRQHandler>:
  * @brief  This function handles external lines 1interrupt request.
  * @param  None
  * @retval None
  */
void EXTI1_IRQHandler(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
 HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80019ec:	2002      	movs	r0, #2
 80019ee:	f002 f999 	bl	8003d24 <HAL_GPIO_EXTI_IRQHandler>
}
 80019f2:	bf00      	nop
 80019f4:	bd80      	pop	{r7, pc}

080019f6 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 80019f6:	b580      	push	{r7, lr}
 80019f8:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(USER_BUTTON_PIN);
 80019fa:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80019fe:	f002 f991 	bl	8003d24 <HAL_GPIO_EXTI_IRQHandler>
}
 8001a02:	bf00      	nop
 8001a04:	bd80      	pop	{r7, pc}

08001a06 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a06:	b580      	push	{r7, lr}
 8001a08:	b086      	sub	sp, #24
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	60f8      	str	r0, [r7, #12]
 8001a0e:	60b9      	str	r1, [r7, #8]
 8001a10:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a12:	2300      	movs	r3, #0
 8001a14:	617b      	str	r3, [r7, #20]
 8001a16:	e00a      	b.n	8001a2e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a18:	f3af 8000 	nop.w
 8001a1c:	4601      	mov	r1, r0
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	1c5a      	adds	r2, r3, #1
 8001a22:	60ba      	str	r2, [r7, #8]
 8001a24:	b2ca      	uxtb	r2, r1
 8001a26:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	617b      	str	r3, [r7, #20]
 8001a2e:	697a      	ldr	r2, [r7, #20]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	429a      	cmp	r2, r3
 8001a34:	dbf0      	blt.n	8001a18 <_read+0x12>
  }

  return len;
 8001a36:	687b      	ldr	r3, [r7, #4]
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3718      	adds	r7, #24
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}

08001a40 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b086      	sub	sp, #24
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	60f8      	str	r0, [r7, #12]
 8001a48:	60b9      	str	r1, [r7, #8]
 8001a4a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	617b      	str	r3, [r7, #20]
 8001a50:	e009      	b.n	8001a66 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a52:	68bb      	ldr	r3, [r7, #8]
 8001a54:	1c5a      	adds	r2, r3, #1
 8001a56:	60ba      	str	r2, [r7, #8]
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f7ff fc26 	bl	80012ac <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	3301      	adds	r3, #1
 8001a64:	617b      	str	r3, [r7, #20]
 8001a66:	697a      	ldr	r2, [r7, #20]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	429a      	cmp	r2, r3
 8001a6c:	dbf1      	blt.n	8001a52 <_write+0x12>
  }
  return len;
 8001a6e:	687b      	ldr	r3, [r7, #4]
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	3718      	adds	r7, #24
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}

08001a78 <_close>:

int _close(int file)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a80:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	370c      	adds	r7, #12
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr

08001a90 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001aa0:	605a      	str	r2, [r3, #4]
  return 0;
 8001aa2:	2300      	movs	r3, #0
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	370c      	adds	r7, #12
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr

08001ab0 <_isatty>:

int _isatty(int file)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ab8:	2301      	movs	r3, #1
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	370c      	adds	r7, #12
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr

08001ac6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ac6:	b480      	push	{r7}
 8001ac8:	b085      	sub	sp, #20
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	60f8      	str	r0, [r7, #12]
 8001ace:	60b9      	str	r1, [r7, #8]
 8001ad0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ad2:	2300      	movs	r3, #0
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3714      	adds	r7, #20
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr

08001ae0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b086      	sub	sp, #24
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ae8:	4a14      	ldr	r2, [pc, #80]	; (8001b3c <_sbrk+0x5c>)
 8001aea:	4b15      	ldr	r3, [pc, #84]	; (8001b40 <_sbrk+0x60>)
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001af4:	4b13      	ldr	r3, [pc, #76]	; (8001b44 <_sbrk+0x64>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d102      	bne.n	8001b02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001afc:	4b11      	ldr	r3, [pc, #68]	; (8001b44 <_sbrk+0x64>)
 8001afe:	4a12      	ldr	r2, [pc, #72]	; (8001b48 <_sbrk+0x68>)
 8001b00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b02:	4b10      	ldr	r3, [pc, #64]	; (8001b44 <_sbrk+0x64>)
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4413      	add	r3, r2
 8001b0a:	693a      	ldr	r2, [r7, #16]
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	d207      	bcs.n	8001b20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b10:	f005 fc18 	bl	8007344 <__errno>
 8001b14:	4603      	mov	r3, r0
 8001b16:	220c      	movs	r2, #12
 8001b18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b1a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b1e:	e009      	b.n	8001b34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b20:	4b08      	ldr	r3, [pc, #32]	; (8001b44 <_sbrk+0x64>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b26:	4b07      	ldr	r3, [pc, #28]	; (8001b44 <_sbrk+0x64>)
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4413      	add	r3, r2
 8001b2e:	4a05      	ldr	r2, [pc, #20]	; (8001b44 <_sbrk+0x64>)
 8001b30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b32:	68fb      	ldr	r3, [r7, #12]
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	3718      	adds	r7, #24
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	20032000 	.word	0x20032000
 8001b40:	00007f00 	.word	0x00007f00
 8001b44:	200188f0 	.word	0x200188f0
 8001b48:	20019468 	.word	0x20019468

08001b4c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b50:	4b17      	ldr	r3, [pc, #92]	; (8001bb0 <SystemInit+0x64>)
 8001b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b56:	4a16      	ldr	r2, [pc, #88]	; (8001bb0 <SystemInit+0x64>)
 8001b58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001b60:	4b14      	ldr	r3, [pc, #80]	; (8001bb4 <SystemInit+0x68>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a13      	ldr	r2, [pc, #76]	; (8001bb4 <SystemInit+0x68>)
 8001b66:	f043 0301 	orr.w	r3, r3, #1
 8001b6a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001b6c:	4b11      	ldr	r3, [pc, #68]	; (8001bb4 <SystemInit+0x68>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 8001b72:	4b10      	ldr	r3, [pc, #64]	; (8001bb4 <SystemInit+0x68>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a0f      	ldr	r2, [pc, #60]	; (8001bb4 <SystemInit+0x68>)
 8001b78:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001b7c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001b80:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000;
 8001b82:	4b0c      	ldr	r3, [pc, #48]	; (8001bb4 <SystemInit+0x68>)
 8001b84:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001b88:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001b8a:	4b0a      	ldr	r3, [pc, #40]	; (8001bb4 <SystemInit+0x68>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a09      	ldr	r2, [pc, #36]	; (8001bb4 <SystemInit+0x68>)
 8001b90:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b94:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001b96:	4b07      	ldr	r3, [pc, #28]	; (8001bb4 <SystemInit+0x68>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001b9c:	4b04      	ldr	r3, [pc, #16]	; (8001bb0 <SystemInit+0x64>)
 8001b9e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ba2:	609a      	str	r2, [r3, #8]
#endif
}
 8001ba4:	bf00      	nop
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	e000ed00 	.word	0xe000ed00
 8001bb4:	40021000 	.word	0x40021000

08001bb8 <AT_ExecuteCommand>:
  * @param  cmd: pointer to the command string
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_ExecuteCommand(ES_WIFIObject_t *Obj, const uint8_t *cmd, uint8_t *pdata)
{
 8001bb8:	b590      	push	{r4, r7, lr}
 8001bba:	b087      	sub	sp, #28
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	60f8      	str	r0, [r7, #12]
 8001bc0:	60b9      	str	r1, [r7, #8]
 8001bc2:	607a      	str	r2, [r7, #4]
  int ret = 0;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	613b      	str	r3, [r7, #16]
  int16_t recv_len = 0;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	82fb      	strh	r3, [r7, #22]

  DEBUGCMD("%s\n",cmd);

  if ((Obj->fops.IO_Send != NULL) && (Obj->fops.IO_Receive != NULL)) {
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d056      	beq.n	8001c84 <AT_ExecuteCommand+0xcc>
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d051      	beq.n	8001c84 <AT_ExecuteCommand+0xcc>

  ret = Obj->fops.IO_Send(cmd, strlen((const char *)cmd), Obj->Timeout);
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
 8001be6:	68b8      	ldr	r0, [r7, #8]
 8001be8:	f7fe fb0a 	bl	8000200 <strlen>
 8001bec:	4603      	mov	r3, r0
 8001bee:	b299      	uxth	r1, r3
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	68b8      	ldr	r0, [r7, #8]
 8001bfa:	47a0      	blx	r4
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	613b      	str	r3, [r7, #16]

  if( ret > 0)
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	dd3e      	ble.n	8001c84 <AT_ExecuteCommand+0xcc>
  {
    recv_len = Obj->fops.IO_Receive(pdata, ES_WIFI_DATA_SIZE, Obj->Timeout);
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8001c0c:	68fa      	ldr	r2, [r7, #12]
 8001c0e:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8001c12:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	4798      	blx	r3
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	82fb      	strh	r3, [r7, #22]
    if ((recv_len > 0) && (recv_len <= ES_WIFI_DATA_SIZE))
 8001c1e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	dd27      	ble.n	8001c76 <AT_ExecuteCommand+0xbe>
 8001c26:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001c2a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001c2e:	dc22      	bgt.n	8001c76 <AT_ExecuteCommand+0xbe>
    {
      if (recv_len == ES_WIFI_DATA_SIZE)
 8001c30:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001c34:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001c38:	d105      	bne.n	8001c46 <AT_ExecuteCommand+0x8e>
      {
        /* ES_WIFI_DATA_SIZE maybe too small !! */
        recv_len--;
 8001c3a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001c3e:	b29b      	uxth	r3, r3
 8001c40:	3b01      	subs	r3, #1
 8001c42:	b29b      	uxth	r3, r3
 8001c44:	82fb      	strh	r3, [r7, #22]
      }
      *(pdata + recv_len) = 0;
 8001c46:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001c4a:	687a      	ldr	r2, [r7, #4]
 8001c4c:	4413      	add	r3, r2
 8001c4e:	2200      	movs	r2, #0
 8001c50:	701a      	strb	r2, [r3, #0]
      DEBUGCMD("%s\n",cmd);

      if (strstr((char *)pdata, AT_OK_STRING))
 8001c52:	490f      	ldr	r1, [pc, #60]	; (8001c90 <AT_ExecuteCommand+0xd8>)
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	f005 fb09 	bl	800726c <strstr>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d001      	beq.n	8001c64 <AT_ExecuteCommand+0xac>
      {
        return ES_WIFI_STATUS_OK;
 8001c60:	2300      	movs	r3, #0
 8001c62:	e010      	b.n	8001c86 <AT_ExecuteCommand+0xce>
      }
      else if (strstr((char *)pdata, AT_ERROR_STRING))
 8001c64:	490b      	ldr	r1, [pc, #44]	; (8001c94 <AT_ExecuteCommand+0xdc>)
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	f005 fb00 	bl	800726c <strstr>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d001      	beq.n	8001c76 <AT_ExecuteCommand+0xbe>
      {
        return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8001c72:	2305      	movs	r3, #5
 8001c74:	e007      	b.n	8001c86 <AT_ExecuteCommand+0xce>
      }
    }
    if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER)
 8001c76:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001c7a:	f113 0f04 	cmn.w	r3, #4
 8001c7e:	d101      	bne.n	8001c84 <AT_ExecuteCommand+0xcc>
    {
      return ES_WIFI_STATUS_MODULE_CRASH;
 8001c80:	2306      	movs	r3, #6
 8001c82:	e000      	b.n	8001c86 <AT_ExecuteCommand+0xce>
    }
   }
  }
  return ES_WIFI_STATUS_IO_ERROR;
 8001c84:	2304      	movs	r3, #4
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	371c      	adds	r7, #28
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd90      	pop	{r4, r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	08008340 	.word	0x08008340
 8001c94:	0800834c 	.word	0x0800834c

08001c98 <AT_RequestSendData>:
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_RequestSendData(ES_WIFIObject_t *Obj, uint8_t* cmd,
                                           const uint8_t *pcmd_data, uint16_t len, uint8_t *pdata)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b086      	sub	sp, #24
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	60f8      	str	r0, [r7, #12]
 8001ca0:	60b9      	str	r1, [r7, #8]
 8001ca2:	607a      	str	r2, [r7, #4]
 8001ca4:	807b      	strh	r3, [r7, #2]
  int16_t send_len = 0;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	82fb      	strh	r3, [r7, #22]
  int16_t recv_len = 0;
 8001caa:	2300      	movs	r3, #0
 8001cac:	82bb      	strh	r3, [r7, #20]
  uint16_t cmd_len = 0;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	827b      	strh	r3, [r7, #18]
  uint16_t n;

  cmd_len = strlen((char*)cmd);
 8001cb2:	68b8      	ldr	r0, [r7, #8]
 8001cb4:	f7fe faa4 	bl	8000200 <strlen>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	827b      	strh	r3, [r7, #18]

  /* Can send only even number of byte on first send. */
  if (cmd_len & 1) return ES_WIFI_STATUS_ERROR;
 8001cbc:	8a7b      	ldrh	r3, [r7, #18]
 8001cbe:	f003 0301 	and.w	r3, r3, #1
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d001      	beq.n	8001cca <AT_RequestSendData+0x32>
 8001cc6:	2302      	movs	r3, #2
 8001cc8:	e05d      	b.n	8001d86 <AT_RequestSendData+0xee>

  if ((Obj->fops.IO_Send != NULL) && (Obj->fops.IO_Receive != NULL)) {
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d057      	beq.n	8001d84 <AT_RequestSendData+0xec>
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d052      	beq.n	8001d84 <AT_RequestSendData+0xec>

  n = Obj->fops.IO_Send(cmd, cmd_len, Obj->Timeout);
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8001ce4:	68fa      	ldr	r2, [r7, #12]
 8001ce6:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8001cea:	8a79      	ldrh	r1, [r7, #18]
 8001cec:	68b8      	ldr	r0, [r7, #8]
 8001cee:	4798      	blx	r3
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	823b      	strh	r3, [r7, #16]
  if (n == cmd_len)
 8001cf4:	8a3a      	ldrh	r2, [r7, #16]
 8001cf6:	8a7b      	ldrh	r3, [r7, #18]
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d143      	bne.n	8001d84 <AT_RequestSendData+0xec>
  {
    send_len = Obj->fops.IO_Send(pcmd_data, len, Obj->Timeout);
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8001d02:	68fa      	ldr	r2, [r7, #12]
 8001d04:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8001d08:	8879      	ldrh	r1, [r7, #2]
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	4798      	blx	r3
 8001d0e:	4603      	mov	r3, r0
 8001d10:	82fb      	strh	r3, [r7, #22]
    if (send_len == len)
 8001d12:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001d16:	887b      	ldrh	r3, [r7, #2]
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d131      	bne.n	8001d80 <AT_RequestSendData+0xe8>
    {
      recv_len = Obj->fops.IO_Receive(pdata, 0, Obj->Timeout);
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8001d22:	68fa      	ldr	r2, [r7, #12]
 8001d24:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8001d28:	2100      	movs	r1, #0
 8001d2a:	6a38      	ldr	r0, [r7, #32]
 8001d2c:	4798      	blx	r3
 8001d2e:	4603      	mov	r3, r0
 8001d30:	82bb      	strh	r3, [r7, #20]
      if (recv_len > 0)
 8001d32:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	dd19      	ble.n	8001d6e <AT_RequestSendData+0xd6>
      {
        *(pdata + recv_len) = 0;
 8001d3a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001d3e:	6a3a      	ldr	r2, [r7, #32]
 8001d40:	4413      	add	r3, r2
 8001d42:	2200      	movs	r2, #0
 8001d44:	701a      	strb	r2, [r3, #0]
        if(strstr((char *)pdata, AT_OK_STRING))
 8001d46:	4912      	ldr	r1, [pc, #72]	; (8001d90 <AT_RequestSendData+0xf8>)
 8001d48:	6a38      	ldr	r0, [r7, #32]
 8001d4a:	f005 fa8f 	bl	800726c <strstr>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d001      	beq.n	8001d58 <AT_RequestSendData+0xc0>
        {
          return ES_WIFI_STATUS_OK;
 8001d54:	2300      	movs	r3, #0
 8001d56:	e016      	b.n	8001d86 <AT_RequestSendData+0xee>
        }
        else if(strstr((char *)pdata, AT_ERROR_STRING))
 8001d58:	490e      	ldr	r1, [pc, #56]	; (8001d94 <AT_RequestSendData+0xfc>)
 8001d5a:	6a38      	ldr	r0, [r7, #32]
 8001d5c:	f005 fa86 	bl	800726c <strstr>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d001      	beq.n	8001d6a <AT_RequestSendData+0xd2>
        {
          return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8001d66:	2305      	movs	r3, #5
 8001d68:	e00d      	b.n	8001d86 <AT_RequestSendData+0xee>
        }
        else
        {
          return ES_WIFI_STATUS_ERROR;
 8001d6a:	2302      	movs	r3, #2
 8001d6c:	e00b      	b.n	8001d86 <AT_RequestSendData+0xee>
        }
      }

      if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER)
 8001d6e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001d72:	f113 0f04 	cmn.w	r3, #4
 8001d76:	d101      	bne.n	8001d7c <AT_RequestSendData+0xe4>
      {
        return ES_WIFI_STATUS_MODULE_CRASH;
 8001d78:	2306      	movs	r3, #6
 8001d7a:	e004      	b.n	8001d86 <AT_RequestSendData+0xee>
      }
      return ES_WIFI_STATUS_ERROR;
 8001d7c:	2302      	movs	r3, #2
 8001d7e:	e002      	b.n	8001d86 <AT_RequestSendData+0xee>
    }
    else
    {
      return ES_WIFI_STATUS_ERROR;
 8001d80:	2302      	movs	r3, #2
 8001d82:	e000      	b.n	8001d86 <AT_RequestSendData+0xee>
    }
  }
 }
  return ES_WIFI_STATUS_IO_ERROR;
 8001d84:	2304      	movs	r3, #4
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3718      	adds	r7, #24
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	08008340 	.word	0x08008340
 8001d94:	0800834c 	.word	0x0800834c

08001d98 <ES_WIFI_StartClientConnection>:
  * @param  Obj: pointer to the module handle
  * @param  conn: pointer to the connection structure
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StartClientConnection(ES_WIFIObject_t *Obj, ES_WIFI_Conn_t *conn)
{
 8001d98:	b590      	push	{r4, r7, lr}
 8001d9a:	b087      	sub	sp, #28
 8001d9c:	af02      	add	r7, sp, #8
 8001d9e:	6078      	str	r0, [r7, #4]
 8001da0:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_OK;
 8001da2:	2300      	movs	r3, #0
 8001da4:	73fb      	strb	r3, [r7, #15]

  if ( ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)) && (conn->RemotePort == 0) ) return ES_WIFI_STATUS_ERROR;
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d003      	beq.n	8001db6 <ES_WIFI_StartClientConnection+0x1e>
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	2b03      	cmp	r3, #3
 8001db4:	d105      	bne.n	8001dc2 <ES_WIFI_StartClientConnection+0x2a>
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	889b      	ldrh	r3, [r3, #4]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d101      	bne.n	8001dc2 <ES_WIFI_StartClientConnection+0x2a>
 8001dbe:	2302      	movs	r3, #2
 8001dc0:	e0c1      	b.n	8001f46 <ES_WIFI_StartClientConnection+0x1ae>

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	f503 7094 	add.w	r0, r3, #296	; 0x128
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	789b      	ldrb	r3, [r3, #2]
 8001dcc:	461a      	mov	r2, r3
 8001dce:	4960      	ldr	r1, [pc, #384]	; (8001f50 <ES_WIFI_StartClientConnection+0x1b8>)
 8001dd0:	f005 f94c 	bl	800706c <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001de0:	461a      	mov	r2, r3
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f7ff fee8 	bl	8001bb8 <AT_ExecuteCommand>
 8001de8:	4603      	mov	r3, r0
 8001dea:	73fb      	strb	r3, [r7, #15]

  if (ret == ES_WIFI_STATUS_OK)
 8001dec:	7bfb      	ldrb	r3, [r7, #15]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d114      	bne.n	8001e1c <ES_WIFI_StartClientConnection+0x84>
  {
    sprintf((char*)Obj->CmdData,"P1=%d\r", conn->Type);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	f503 7094 	add.w	r0, r3, #296	; 0x128
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	4955      	ldr	r1, [pc, #340]	; (8001f54 <ES_WIFI_StartClientConnection+0x1bc>)
 8001e00:	f005 f934 	bl	800706c <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001e10:	461a      	mov	r2, r3
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f7ff fed0 	bl	8001bb8 <AT_ExecuteCommand>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	73fb      	strb	r3, [r7, #15]
  }

  if (ret == ES_WIFI_STATUS_OK)
 8001e1c:	7bfb      	ldrb	r3, [r7, #15]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d114      	bne.n	8001e4c <ES_WIFI_StartClientConnection+0xb4>
  {
    sprintf((char*)Obj->CmdData,"P2=%d\r", conn->LocalPort);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	f503 7094 	add.w	r0, r3, #296	; 0x128
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	88db      	ldrh	r3, [r3, #6]
 8001e2c:	461a      	mov	r2, r3
 8001e2e:	494a      	ldr	r1, [pc, #296]	; (8001f58 <ES_WIFI_StartClientConnection+0x1c0>)
 8001e30:	f005 f91c 	bl	800706c <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001e40:	461a      	mov	r2, r3
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f7ff feb8 	bl	8001bb8 <AT_ExecuteCommand>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	73fb      	strb	r3, [r7, #15]
  }

  if ((ret == ES_WIFI_STATUS_OK)&& ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)))
 8001e4c:	7bfb      	ldrb	r3, [r7, #15]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d11c      	bne.n	8001e8c <ES_WIFI_StartClientConnection+0xf4>
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d003      	beq.n	8001e62 <ES_WIFI_StartClientConnection+0xca>
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	781b      	ldrb	r3, [r3, #0]
 8001e5e:	2b03      	cmp	r3, #3
 8001e60:	d114      	bne.n	8001e8c <ES_WIFI_StartClientConnection+0xf4>
  {
    sprintf((char*)Obj->CmdData,"P4=%d\r", conn->RemotePort);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	f503 7094 	add.w	r0, r3, #296	; 0x128
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	889b      	ldrh	r3, [r3, #4]
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	493b      	ldr	r1, [pc, #236]	; (8001f5c <ES_WIFI_StartClientConnection+0x1c4>)
 8001e70:	f005 f8fc 	bl	800706c <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001e80:	461a      	mov	r2, r3
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f7ff fe98 	bl	8001bb8 <AT_ExecuteCommand>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	73fb      	strb	r3, [r7, #15]
  }

  if ((ret == ES_WIFI_STATUS_OK) && ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)))
 8001e8c:	7bfb      	ldrb	r3, [r7, #15]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d128      	bne.n	8001ee4 <ES_WIFI_StartClientConnection+0x14c>
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	781b      	ldrb	r3, [r3, #0]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d003      	beq.n	8001ea2 <ES_WIFI_StartClientConnection+0x10a>
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	2b03      	cmp	r3, #3
 8001ea0:	d120      	bne.n	8001ee4 <ES_WIFI_StartClientConnection+0x14c>
  {
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	f503 7094 	add.w	r0, r3, #296	; 0x128
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	7a1b      	ldrb	r3, [r3, #8]
 8001eac:	4619      	mov	r1, r3
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	7a5b      	ldrb	r3, [r3, #9]
 8001eb2:	461c      	mov	r4, r3
            conn->RemoteIP[2],conn->RemoteIP[3]);
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	7a9b      	ldrb	r3, [r3, #10]
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 8001eb8:	461a      	mov	r2, r3
            conn->RemoteIP[2],conn->RemoteIP[3]);
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	7adb      	ldrb	r3, [r3, #11]
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 8001ebe:	9301      	str	r3, [sp, #4]
 8001ec0:	9200      	str	r2, [sp, #0]
 8001ec2:	4623      	mov	r3, r4
 8001ec4:	460a      	mov	r2, r1
 8001ec6:	4926      	ldr	r1, [pc, #152]	; (8001f60 <ES_WIFI_StartClientConnection+0x1c8>)
 8001ec8:	f005 f8d0 	bl	800706c <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001ed8:	461a      	mov	r2, r3
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f7ff fe6c 	bl	8001bb8 <AT_ExecuteCommand>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	73fb      	strb	r3, [r7, #15]
  }

  if ((ret == ES_WIFI_STATUS_OK) && (conn->Type == ES_WIFI_TCP_SSL_CONNECTION))
 8001ee4:	7bfb      	ldrb	r3, [r7, #15]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d116      	bne.n	8001f18 <ES_WIFI_StartClientConnection+0x180>
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	781b      	ldrb	r3, [r3, #0]
 8001eee:	2b03      	cmp	r3, #3
 8001ef0:	d112      	bne.n	8001f18 <ES_WIFI_StartClientConnection+0x180>
  {
    sprintf((char*)Obj->CmdData,"P9=2\r");
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001ef8:	491a      	ldr	r1, [pc, #104]	; (8001f64 <ES_WIFI_StartClientConnection+0x1cc>)
 8001efa:	4618      	mov	r0, r3
 8001efc:	f005 f8b6 	bl	800706c <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	f7ff fe52 	bl	8001bb8 <AT_ExecuteCommand>
 8001f14:	4603      	mov	r3, r0
 8001f16:	73fb      	strb	r3, [r7, #15]
  }

  if (ret == ES_WIFI_STATUS_OK)
 8001f18:	7bfb      	ldrb	r3, [r7, #15]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d112      	bne.n	8001f44 <ES_WIFI_StartClientConnection+0x1ac>
  {
    sprintf((char*)Obj->CmdData,"P6=1\r");
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001f24:	4910      	ldr	r1, [pc, #64]	; (8001f68 <ES_WIFI_StartClientConnection+0x1d0>)
 8001f26:	4618      	mov	r0, r3
 8001f28:	f005 f8a0 	bl	800706c <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001f38:	461a      	mov	r2, r3
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	f7ff fe3c 	bl	8001bb8 <AT_ExecuteCommand>
 8001f40:	4603      	mov	r3, r0
 8001f42:	73fb      	strb	r3, [r7, #15]
  }

  UNLOCK_WIFI();
  return ret;
 8001f44:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3714      	adds	r7, #20
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd90      	pop	{r4, r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	08008450 	.word	0x08008450
 8001f54:	08008458 	.word	0x08008458
 8001f58:	08008460 	.word	0x08008460
 8001f5c:	08008468 	.word	0x08008468
 8001f60:	08008470 	.word	0x08008470
 8001f64:	08008480 	.word	0x08008480
 8001f68:	08008488 	.word	0x08008488

08001f6c <ES_WIFI_StopClientConnection>:
  * @brief  Stop Client connection.
  * @param  Obj: pointer to the module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StopClientConnection(ES_WIFIObject_t *Obj, ES_WIFI_Conn_t *conn)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b084      	sub	sp, #16
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
 8001f74:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret;

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	f503 7094 	add.w	r0, r3, #296	; 0x128
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	789b      	ldrb	r3, [r3, #2]
 8001f80:	461a      	mov	r2, r3
 8001f82:	4915      	ldr	r1, [pc, #84]	; (8001fd8 <ES_WIFI_StopClientConnection+0x6c>)
 8001f84:	f005 f872 	bl	800706c <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001f94:	461a      	mov	r2, r3
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f7ff fe0e 	bl	8001bb8 <AT_ExecuteCommand>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	73fb      	strb	r3, [r7, #15]

  if (ret == ES_WIFI_STATUS_OK)
 8001fa0:	7bfb      	ldrb	r3, [r7, #15]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d112      	bne.n	8001fcc <ES_WIFI_StopClientConnection+0x60>
  {
    sprintf((char*)Obj->CmdData,"P6=0\r");
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001fac:	490b      	ldr	r1, [pc, #44]	; (8001fdc <ES_WIFI_StopClientConnection+0x70>)
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f005 f85c 	bl	800706c <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001fc0:	461a      	mov	r2, r3
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f7ff fdf8 	bl	8001bb8 <AT_ExecuteCommand>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	73fb      	strb	r3, [r7, #15]
  }

  UNLOCK_WIFI();

  return ret;
 8001fcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3710      	adds	r7, #16
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	08008450 	.word	0x08008450
 8001fdc:	08008490 	.word	0x08008490

08001fe0 <ES_WIFI_SendData>:
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_SendData(ES_WIFIObject_t *Obj, uint8_t Socket,
                                  const uint8_t *pdata, uint16_t Reqlen,
                                  uint16_t *SentLen, uint32_t Timeout)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b088      	sub	sp, #32
 8001fe4:	af02      	add	r7, sp, #8
 8001fe6:	60f8      	str	r0, [r7, #12]
 8001fe8:	607a      	str	r2, [r7, #4]
 8001fea:	461a      	mov	r2, r3
 8001fec:	460b      	mov	r3, r1
 8001fee:	72fb      	strb	r3, [r7, #11]
 8001ff0:	4613      	mov	r3, r2
 8001ff2:	813b      	strh	r3, [r7, #8]
  uint32_t wkgTimeOut;

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8001ff4:	2302      	movs	r3, #2
 8001ff6:	74fb      	strb	r3, [r7, #19]

  if (Timeout == 0)
 8001ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d102      	bne.n	8002004 <ES_WIFI_SendData+0x24>
  {
    wkgTimeOut = NET_DEFAULT_NOBLOCKING_WRITE_TIMEOUT;
 8001ffe:	2301      	movs	r3, #1
 8002000:	617b      	str	r3, [r7, #20]
 8002002:	e001      	b.n	8002008 <ES_WIFI_SendData+0x28>
  }
  else
  {
    wkgTimeOut = Timeout;
 8002004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002006:	617b      	str	r3, [r7, #20]
  }

  LOCK_WIFI();

  if (Reqlen >= ES_WIFI_PAYLOAD_SIZE)
 8002008:	893b      	ldrh	r3, [r7, #8]
 800200a:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 800200e:	d302      	bcc.n	8002016 <ES_WIFI_SendData+0x36>
  {
    Reqlen = ES_WIFI_PAYLOAD_SIZE;
 8002010:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8002014:	813b      	strh	r3, [r7, #8]
  }

  *SentLen = Reqlen;
 8002016:	6a3b      	ldr	r3, [r7, #32]
 8002018:	893a      	ldrh	r2, [r7, #8]
 800201a:	801a      	strh	r2, [r3, #0]
  sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002022:	7afa      	ldrb	r2, [r7, #11]
 8002024:	492d      	ldr	r1, [pc, #180]	; (80020dc <ES_WIFI_SendData+0xfc>)
 8002026:	4618      	mov	r0, r3
 8002028:	f005 f820 	bl	800706c <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002038:	461a      	mov	r2, r3
 800203a:	68f8      	ldr	r0, [r7, #12]
 800203c:	f7ff fdbc 	bl	8001bb8 <AT_ExecuteCommand>
 8002040:	4603      	mov	r3, r0
 8002042:	74fb      	strb	r3, [r7, #19]
  if (ret == ES_WIFI_STATUS_OK)
 8002044:	7cfb      	ldrb	r3, [r7, #19]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d13c      	bne.n	80020c4 <ES_WIFI_SendData+0xe4>
  {
    sprintf((char*)Obj->CmdData,"S2=%lu\r",wkgTimeOut);
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002050:	697a      	ldr	r2, [r7, #20]
 8002052:	4923      	ldr	r1, [pc, #140]	; (80020e0 <ES_WIFI_SendData+0x100>)
 8002054:	4618      	mov	r0, r3
 8002056:	f005 f809 	bl	800706c <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002066:	461a      	mov	r2, r3
 8002068:	68f8      	ldr	r0, [r7, #12]
 800206a:	f7ff fda5 	bl	8001bb8 <AT_ExecuteCommand>
 800206e:	4603      	mov	r3, r0
 8002070:	74fb      	strb	r3, [r7, #19]

    if (ret == ES_WIFI_STATUS_OK)
 8002072:	7cfb      	ldrb	r3, [r7, #19]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d125      	bne.n	80020c4 <ES_WIFI_SendData+0xe4>
    {
      sprintf((char *)Obj->CmdData, "S3=%04d\r", Reqlen);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800207e:	893a      	ldrh	r2, [r7, #8]
 8002080:	4918      	ldr	r1, [pc, #96]	; (80020e4 <ES_WIFI_SendData+0x104>)
 8002082:	4618      	mov	r0, r3
 8002084:	f004 fff2 	bl	800706c <siprintf>
      ret = AT_RequestSendData(Obj, Obj->CmdData, pdata, Reqlen, Obj->CmdData);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002094:	893a      	ldrh	r2, [r7, #8]
 8002096:	9300      	str	r3, [sp, #0]
 8002098:	4613      	mov	r3, r2
 800209a:	687a      	ldr	r2, [r7, #4]
 800209c:	68f8      	ldr	r0, [r7, #12]
 800209e:	f7ff fdfb 	bl	8001c98 <AT_RequestSendData>
 80020a2:	4603      	mov	r3, r0
 80020a4:	74fb      	strb	r3, [r7, #19]

      if (ret == ES_WIFI_STATUS_OK)
 80020a6:	7cfb      	ldrb	r3, [r7, #19]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d10b      	bne.n	80020c4 <ES_WIFI_SendData+0xe4>
      {
        if (strstr((char *)Obj->CmdData, "-1\r\n"))
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80020b2:	490d      	ldr	r1, [pc, #52]	; (80020e8 <ES_WIFI_SendData+0x108>)
 80020b4:	4618      	mov	r0, r3
 80020b6:	f005 f8d9 	bl	800726c <strstr>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d001      	beq.n	80020c4 <ES_WIFI_SendData+0xe4>
        {
          DEBUG("Send Data detect error %s\n", (char *)Obj->CmdData);
          ret = ES_WIFI_STATUS_ERROR;
 80020c0:	2302      	movs	r3, #2
 80020c2:	74fb      	strb	r3, [r7, #19]
  else
  {
   DEBUG("P0 command failed\n");
  }

  if (ret == ES_WIFI_STATUS_ERROR)
 80020c4:	7cfb      	ldrb	r3, [r7, #19]
 80020c6:	2b02      	cmp	r3, #2
 80020c8:	d102      	bne.n	80020d0 <ES_WIFI_SendData+0xf0>
  {
    *SentLen = 0;
 80020ca:	6a3b      	ldr	r3, [r7, #32]
 80020cc:	2200      	movs	r2, #0
 80020ce:	801a      	strh	r2, [r3, #0]
  }

  UNLOCK_WIFI();

  return ret;
 80020d0:	7cfb      	ldrb	r3, [r7, #19]
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3718      	adds	r7, #24
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	08008450 	.word	0x08008450
 80020e0:	0800852c 	.word	0x0800852c
 80020e4:	08008534 	.word	0x08008534
 80020e8:	08008540 	.word	0x08008540

080020ec <SPI_WIFI_ISR>:
  * @brief  Interrupt handler for CMDDATARDY input signal
  * @param  None
  * @retval None
  */
void    SPI_WIFI_ISR(void)
{
 80020ec:	b480      	push	{r7}
 80020ee:	af00      	add	r7, sp, #0
   if (cmddata_rdy_rising_event == 1)
 80020f0:	4b05      	ldr	r3, [pc, #20]	; (8002108 <SPI_WIFI_ISR+0x1c>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d102      	bne.n	80020fe <SPI_WIFI_ISR+0x12>
   {
     SEM_SIGNAL(cmddata_rdy_rising_sem);
     cmddata_rdy_rising_event = 0;
 80020f8:	4b03      	ldr	r3, [pc, #12]	; (8002108 <SPI_WIFI_ISR+0x1c>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	601a      	str	r2, [r3, #0]
   }
}
 80020fe:	bf00      	nop
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr
 8002108:	20018958 	.word	0x20018958

0800210c <WIFI_OpenClientConnection>:
  * @param  local_port : Local port
  * @retval Operation status
  */
WIFI_Status_t WIFI_OpenClientConnection(uint32_t socket, WIFI_Protocol_t type, const char *name,
                                        const uint8_t *ipaddr, uint16_t port, uint16_t local_port)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b08a      	sub	sp, #40	; 0x28
 8002110:	af00      	add	r7, sp, #0
 8002112:	60f8      	str	r0, [r7, #12]
 8002114:	607a      	str	r2, [r7, #4]
 8002116:	603b      	str	r3, [r7, #0]
 8002118:	460b      	mov	r3, r1
 800211a:	72fb      	strb	r3, [r7, #11]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  ES_WIFI_Conn_t conn;

  conn.Number = (uint8_t)socket;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	b2db      	uxtb	r3, r3
 8002126:	74bb      	strb	r3, [r7, #18]
  conn.RemotePort = port;
 8002128:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800212a:	82bb      	strh	r3, [r7, #20]
  conn.LocalPort = local_port;
 800212c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800212e:	82fb      	strh	r3, [r7, #22]
  conn.Type = (type == WIFI_TCP_PROTOCOL)? ES_WIFI_TCP_CONNECTION : ES_WIFI_UDP_CONNECTION;
 8002130:	7afb      	ldrb	r3, [r7, #11]
 8002132:	2b00      	cmp	r3, #0
 8002134:	bf14      	ite	ne
 8002136:	2301      	movne	r3, #1
 8002138:	2300      	moveq	r3, #0
 800213a:	b2db      	uxtb	r3, r3
 800213c:	743b      	strb	r3, [r7, #16]
  conn.RemoteIP[0] = ipaddr[0];
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	781b      	ldrb	r3, [r3, #0]
 8002142:	763b      	strb	r3, [r7, #24]
  conn.RemoteIP[1] = ipaddr[1];
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	3301      	adds	r3, #1
 8002148:	781b      	ldrb	r3, [r3, #0]
 800214a:	767b      	strb	r3, [r7, #25]
  conn.RemoteIP[2] = ipaddr[2];
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	3302      	adds	r3, #2
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	76bb      	strb	r3, [r7, #26]
  conn.RemoteIP[3] = ipaddr[3];
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	3303      	adds	r3, #3
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	76fb      	strb	r3, [r7, #27]

  if(ES_WIFI_StartClientConnection(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 800215c:	f107 0310 	add.w	r3, r7, #16
 8002160:	4619      	mov	r1, r3
 8002162:	4807      	ldr	r0, [pc, #28]	; (8002180 <WIFI_OpenClientConnection+0x74>)
 8002164:	f7ff fe18 	bl	8001d98 <ES_WIFI_StartClientConnection>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d102      	bne.n	8002174 <WIFI_OpenClientConnection+0x68>
  {
    ret = WIFI_STATUS_OK;
 800216e:	2300      	movs	r3, #0
 8002170:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 8002174:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002178:	4618      	mov	r0, r3
 800217a:	3728      	adds	r7, #40	; 0x28
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	2001895c 	.word	0x2001895c

08002184 <WIFI_CloseClientConnection>:
  * @brief  Close client connection
  * @param  socket : socket
  * @retval Operation status
  */
WIFI_Status_t WIFI_CloseClientConnection(uint32_t socket)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b088      	sub	sp, #32
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	77fb      	strb	r3, [r7, #31]
  ES_WIFI_Conn_t conn;
  conn.Number = (uint8_t)socket;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	b2db      	uxtb	r3, r3
 8002194:	72bb      	strb	r3, [r7, #10]

  if(ES_WIFI_StopClientConnection(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 8002196:	f107 0308 	add.w	r3, r7, #8
 800219a:	4619      	mov	r1, r3
 800219c:	4806      	ldr	r0, [pc, #24]	; (80021b8 <WIFI_CloseClientConnection+0x34>)
 800219e:	f7ff fee5 	bl	8001f6c <ES_WIFI_StopClientConnection>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d101      	bne.n	80021ac <WIFI_CloseClientConnection+0x28>
  {
    ret = WIFI_STATUS_OK;
 80021a8:	2300      	movs	r3, #0
 80021aa:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 80021ac:	7ffb      	ldrb	r3, [r7, #31]
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3720      	adds	r7, #32
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	2001895c 	.word	0x2001895c

080021bc <WIFI_SendData>:
  * @param  Timeout : Socket write timeout (ms)
  * @retval Operation status
  */
WIFI_Status_t WIFI_SendData(uint32_t socket, const uint8_t *pdata, uint16_t Reqlen, uint16_t *SentDatalen,
                            uint32_t Timeout)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b088      	sub	sp, #32
 80021c0:	af02      	add	r7, sp, #8
 80021c2:	60f8      	str	r0, [r7, #12]
 80021c4:	60b9      	str	r1, [r7, #8]
 80021c6:	603b      	str	r3, [r7, #0]
 80021c8:	4613      	mov	r3, r2
 80021ca:	80fb      	strh	r3, [r7, #6]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	75fb      	strb	r3, [r7, #23]

    if (ES_WIFI_SendData(&EsWifiObj, (uint8_t)socket, pdata, Reqlen, SentDatalen, Timeout) == ES_WIFI_STATUS_OK)
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	b2d9      	uxtb	r1, r3
 80021d4:	88fa      	ldrh	r2, [r7, #6]
 80021d6:	6a3b      	ldr	r3, [r7, #32]
 80021d8:	9301      	str	r3, [sp, #4]
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	9300      	str	r3, [sp, #0]
 80021de:	4613      	mov	r3, r2
 80021e0:	68ba      	ldr	r2, [r7, #8]
 80021e2:	4806      	ldr	r0, [pc, #24]	; (80021fc <WIFI_SendData+0x40>)
 80021e4:	f7ff fefc 	bl	8001fe0 <ES_WIFI_SendData>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d101      	bne.n	80021f2 <WIFI_SendData+0x36>
    {
      ret = WIFI_STATUS_OK;
 80021ee:	2300      	movs	r3, #0
 80021f0:	75fb      	strb	r3, [r7, #23]
    }

  return ret;
 80021f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3718      	adds	r7, #24
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	2001895c 	.word	0x2001895c

08002200 <BSP_LED_Init>:
  * @param  Led  LED to be initialized. 
  *              This parameter can be one of the following values:
  *                @arg  LED2
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b088      	sub	sp, #32
 8002204:	af00      	add	r7, sp, #0
 8002206:	4603      	mov	r3, r0
 8002208:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;
  
  LEDx_GPIO_CLK_ENABLE(Led);
 800220a:	79fb      	ldrb	r3, [r7, #7]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d10b      	bne.n	8002228 <BSP_LED_Init+0x28>
 8002210:	4b11      	ldr	r3, [pc, #68]	; (8002258 <BSP_LED_Init+0x58>)
 8002212:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002214:	4a10      	ldr	r2, [pc, #64]	; (8002258 <BSP_LED_Init+0x58>)
 8002216:	f043 0302 	orr.w	r3, r3, #2
 800221a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800221c:	4b0e      	ldr	r3, [pc, #56]	; (8002258 <BSP_LED_Init+0x58>)
 800221e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002220:	f003 0302 	and.w	r3, r3, #2
 8002224:	60bb      	str	r3, [r7, #8]
 8002226:	68bb      	ldr	r3, [r7, #8]
  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = GPIO_PIN[Led];
 8002228:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800222c:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 800222e:	2301      	movs	r3, #1
 8002230:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8002232:	2300      	movs	r3, #0
 8002234:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002236:	2302      	movs	r3, #2
 8002238:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpio_init_structure);
 800223a:	79fb      	ldrb	r3, [r7, #7]
 800223c:	4a07      	ldr	r2, [pc, #28]	; (800225c <BSP_LED_Init+0x5c>)
 800223e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002242:	f107 020c 	add.w	r2, r7, #12
 8002246:	4611      	mov	r1, r2
 8002248:	4618      	mov	r0, r3
 800224a:	f001 fbd9 	bl	8003a00 <HAL_GPIO_Init>
}
 800224e:	bf00      	nop
 8002250:	3720      	adds	r7, #32
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	40021000 	.word	0x40021000
 800225c:	20000004 	.word	0x20000004

08002260 <BSP_COM_Init>:
  *                @arg  COM1 
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains the
  *                configuration information for the specified USART peripheral.
  */
void BSP_COM_Init(COM_TypeDef COM, UART_HandleTypeDef *huart)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b08a      	sub	sp, #40	; 0x28
 8002264:	af00      	add	r7, sp, #0
 8002266:	4603      	mov	r3, r0
 8002268:	6039      	str	r1, [r7, #0]
 800226a:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable GPIO clock */
  DISCOVERY_COMx_TX_GPIO_CLK_ENABLE(COM);
 800226c:	79fb      	ldrb	r3, [r7, #7]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d10b      	bne.n	800228a <BSP_COM_Init+0x2a>
 8002272:	4b2d      	ldr	r3, [pc, #180]	; (8002328 <BSP_COM_Init+0xc8>)
 8002274:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002276:	4a2c      	ldr	r2, [pc, #176]	; (8002328 <BSP_COM_Init+0xc8>)
 8002278:	f043 0302 	orr.w	r3, r3, #2
 800227c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800227e:	4b2a      	ldr	r3, [pc, #168]	; (8002328 <BSP_COM_Init+0xc8>)
 8002280:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002282:	f003 0302 	and.w	r3, r3, #2
 8002286:	613b      	str	r3, [r7, #16]
 8002288:	693b      	ldr	r3, [r7, #16]
  DISCOVERY_COMx_RX_GPIO_CLK_ENABLE(COM);
 800228a:	79fb      	ldrb	r3, [r7, #7]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d10b      	bne.n	80022a8 <BSP_COM_Init+0x48>
 8002290:	4b25      	ldr	r3, [pc, #148]	; (8002328 <BSP_COM_Init+0xc8>)
 8002292:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002294:	4a24      	ldr	r2, [pc, #144]	; (8002328 <BSP_COM_Init+0xc8>)
 8002296:	f043 0302 	orr.w	r3, r3, #2
 800229a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800229c:	4b22      	ldr	r3, [pc, #136]	; (8002328 <BSP_COM_Init+0xc8>)
 800229e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022a0:	f003 0302 	and.w	r3, r3, #2
 80022a4:	60fb      	str	r3, [r7, #12]
 80022a6:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  DISCOVERY_COMx_CLK_ENABLE(COM);
 80022a8:	79fb      	ldrb	r3, [r7, #7]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d10b      	bne.n	80022c6 <BSP_COM_Init+0x66>
 80022ae:	4b1e      	ldr	r3, [pc, #120]	; (8002328 <BSP_COM_Init+0xc8>)
 80022b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022b2:	4a1d      	ldr	r2, [pc, #116]	; (8002328 <BSP_COM_Init+0xc8>)
 80022b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022b8:	6613      	str	r3, [r2, #96]	; 0x60
 80022ba:	4b1b      	ldr	r3, [pc, #108]	; (8002328 <BSP_COM_Init+0xc8>)
 80022bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022c2:	60bb      	str	r3, [r7, #8]
 80022c4:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM_TX_PIN[COM];
 80022c6:	2340      	movs	r3, #64	; 0x40
 80022c8:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80022ca:	2302      	movs	r3, #2
 80022cc:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80022ce:	2302      	movs	r3, #2
 80022d0:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 80022d2:	2300      	movs	r3, #0
 80022d4:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM_TX_AF[COM];
 80022d6:	2307      	movs	r3, #7
 80022d8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(COM_TX_PORT[COM], &gpio_init_structure);
 80022da:	79fb      	ldrb	r3, [r7, #7]
 80022dc:	4a13      	ldr	r2, [pc, #76]	; (800232c <BSP_COM_Init+0xcc>)
 80022de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022e2:	f107 0214 	add.w	r2, r7, #20
 80022e6:	4611      	mov	r1, r2
 80022e8:	4618      	mov	r0, r3
 80022ea:	f001 fb89 	bl	8003a00 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM_RX_PIN[COM];
 80022ee:	2380      	movs	r3, #128	; 0x80
 80022f0:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80022f2:	2302      	movs	r3, #2
 80022f4:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM_RX_AF[COM];
 80022f6:	2307      	movs	r3, #7
 80022f8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(COM_RX_PORT[COM], &gpio_init_structure);
 80022fa:	79fb      	ldrb	r3, [r7, #7]
 80022fc:	4a0c      	ldr	r2, [pc, #48]	; (8002330 <BSP_COM_Init+0xd0>)
 80022fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002302:	f107 0214 	add.w	r2, r7, #20
 8002306:	4611      	mov	r1, r2
 8002308:	4618      	mov	r0, r3
 800230a:	f001 fb79 	bl	8003a00 <HAL_GPIO_Init>

  /* USART configuration */
  huart->Instance = COM_USART[COM];
 800230e:	79fb      	ldrb	r3, [r7, #7]
 8002310:	4a08      	ldr	r2, [pc, #32]	; (8002334 <BSP_COM_Init+0xd4>)
 8002312:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	601a      	str	r2, [r3, #0]
  HAL_UART_Init(huart);
 800231a:	6838      	ldr	r0, [r7, #0]
 800231c:	f003 fedc 	bl	80060d8 <HAL_UART_Init>
}
 8002320:	bf00      	nop
 8002322:	3728      	adds	r7, #40	; 0x28
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}
 8002328:	40021000 	.word	0x40021000
 800232c:	2000000c 	.word	0x2000000c
 8002330:	20000010 	.word	0x20000010
 8002334:	20000008 	.word	0x20000008

08002338 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800233e:	2300      	movs	r3, #0
 8002340:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002342:	2003      	movs	r0, #3
 8002344:	f000 f960 	bl	8002608 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002348:	200f      	movs	r0, #15
 800234a:	f000 f80d 	bl	8002368 <HAL_InitTick>
 800234e:	4603      	mov	r3, r0
 8002350:	2b00      	cmp	r3, #0
 8002352:	d002      	beq.n	800235a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	71fb      	strb	r3, [r7, #7]
 8002358:	e001      	b.n	800235e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800235a:	f7ff f929 	bl	80015b0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800235e:	79fb      	ldrb	r3, [r7, #7]
}
 8002360:	4618      	mov	r0, r3
 8002362:	3708      	adds	r7, #8
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}

08002368 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b084      	sub	sp, #16
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002370:	2300      	movs	r3, #0
 8002372:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002374:	4b17      	ldr	r3, [pc, #92]	; (80023d4 <HAL_InitTick+0x6c>)
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d023      	beq.n	80023c4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800237c:	4b16      	ldr	r3, [pc, #88]	; (80023d8 <HAL_InitTick+0x70>)
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	4b14      	ldr	r3, [pc, #80]	; (80023d4 <HAL_InitTick+0x6c>)
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	4619      	mov	r1, r3
 8002386:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800238a:	fbb3 f3f1 	udiv	r3, r3, r1
 800238e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002392:	4618      	mov	r0, r3
 8002394:	f000 f96d 	bl	8002672 <HAL_SYSTICK_Config>
 8002398:	4603      	mov	r3, r0
 800239a:	2b00      	cmp	r3, #0
 800239c:	d10f      	bne.n	80023be <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2b0f      	cmp	r3, #15
 80023a2:	d809      	bhi.n	80023b8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023a4:	2200      	movs	r2, #0
 80023a6:	6879      	ldr	r1, [r7, #4]
 80023a8:	f04f 30ff 	mov.w	r0, #4294967295
 80023ac:	f000 f937 	bl	800261e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80023b0:	4a0a      	ldr	r2, [pc, #40]	; (80023dc <HAL_InitTick+0x74>)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6013      	str	r3, [r2, #0]
 80023b6:	e007      	b.n	80023c8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	73fb      	strb	r3, [r7, #15]
 80023bc:	e004      	b.n	80023c8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	73fb      	strb	r3, [r7, #15]
 80023c2:	e001      	b.n	80023c8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80023c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3710      	adds	r7, #16
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	20000018 	.word	0x20000018
 80023d8:	20000000 	.word	0x20000000
 80023dc:	20000014 	.word	0x20000014

080023e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80023e4:	4b06      	ldr	r3, [pc, #24]	; (8002400 <HAL_IncTick+0x20>)
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	461a      	mov	r2, r3
 80023ea:	4b06      	ldr	r3, [pc, #24]	; (8002404 <HAL_IncTick+0x24>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4413      	add	r3, r2
 80023f0:	4a04      	ldr	r2, [pc, #16]	; (8002404 <HAL_IncTick+0x24>)
 80023f2:	6013      	str	r3, [r2, #0]
}
 80023f4:	bf00      	nop
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr
 80023fe:	bf00      	nop
 8002400:	20000018 	.word	0x20000018
 8002404:	200192f0 	.word	0x200192f0

08002408 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002408:	b480      	push	{r7}
 800240a:	af00      	add	r7, sp, #0
  return uwTick;
 800240c:	4b03      	ldr	r3, [pc, #12]	; (800241c <HAL_GetTick+0x14>)
 800240e:	681b      	ldr	r3, [r3, #0]
}
 8002410:	4618      	mov	r0, r3
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr
 800241a:	bf00      	nop
 800241c:	200192f0 	.word	0x200192f0

08002420 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b084      	sub	sp, #16
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002428:	f7ff ffee 	bl	8002408 <HAL_GetTick>
 800242c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002438:	d005      	beq.n	8002446 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800243a:	4b0a      	ldr	r3, [pc, #40]	; (8002464 <HAL_Delay+0x44>)
 800243c:	781b      	ldrb	r3, [r3, #0]
 800243e:	461a      	mov	r2, r3
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	4413      	add	r3, r2
 8002444:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002446:	bf00      	nop
 8002448:	f7ff ffde 	bl	8002408 <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	68fa      	ldr	r2, [r7, #12]
 8002454:	429a      	cmp	r2, r3
 8002456:	d8f7      	bhi.n	8002448 <HAL_Delay+0x28>
  {
  }
}
 8002458:	bf00      	nop
 800245a:	bf00      	nop
 800245c:	3710      	adds	r7, #16
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	20000018 	.word	0x20000018

08002468 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002468:	b480      	push	{r7}
 800246a:	b085      	sub	sp, #20
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	f003 0307 	and.w	r3, r3, #7
 8002476:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002478:	4b0c      	ldr	r3, [pc, #48]	; (80024ac <__NVIC_SetPriorityGrouping+0x44>)
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800247e:	68ba      	ldr	r2, [r7, #8]
 8002480:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002484:	4013      	ands	r3, r2
 8002486:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002490:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002494:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002498:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800249a:	4a04      	ldr	r2, [pc, #16]	; (80024ac <__NVIC_SetPriorityGrouping+0x44>)
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	60d3      	str	r3, [r2, #12]
}
 80024a0:	bf00      	nop
 80024a2:	3714      	adds	r7, #20
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr
 80024ac:	e000ed00 	.word	0xe000ed00

080024b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024b0:	b480      	push	{r7}
 80024b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024b4:	4b04      	ldr	r3, [pc, #16]	; (80024c8 <__NVIC_GetPriorityGrouping+0x18>)
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	0a1b      	lsrs	r3, r3, #8
 80024ba:	f003 0307 	and.w	r3, r3, #7
}
 80024be:	4618      	mov	r0, r3
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr
 80024c8:	e000ed00 	.word	0xe000ed00

080024cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b083      	sub	sp, #12
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	4603      	mov	r3, r0
 80024d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	db0b      	blt.n	80024f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024de:	79fb      	ldrb	r3, [r7, #7]
 80024e0:	f003 021f 	and.w	r2, r3, #31
 80024e4:	4907      	ldr	r1, [pc, #28]	; (8002504 <__NVIC_EnableIRQ+0x38>)
 80024e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ea:	095b      	lsrs	r3, r3, #5
 80024ec:	2001      	movs	r0, #1
 80024ee:	fa00 f202 	lsl.w	r2, r0, r2
 80024f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80024f6:	bf00      	nop
 80024f8:	370c      	adds	r7, #12
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
 8002502:	bf00      	nop
 8002504:	e000e100 	.word	0xe000e100

08002508 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002508:	b480      	push	{r7}
 800250a:	b083      	sub	sp, #12
 800250c:	af00      	add	r7, sp, #0
 800250e:	4603      	mov	r3, r0
 8002510:	6039      	str	r1, [r7, #0]
 8002512:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002514:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002518:	2b00      	cmp	r3, #0
 800251a:	db0a      	blt.n	8002532 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	b2da      	uxtb	r2, r3
 8002520:	490c      	ldr	r1, [pc, #48]	; (8002554 <__NVIC_SetPriority+0x4c>)
 8002522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002526:	0112      	lsls	r2, r2, #4
 8002528:	b2d2      	uxtb	r2, r2
 800252a:	440b      	add	r3, r1
 800252c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002530:	e00a      	b.n	8002548 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	b2da      	uxtb	r2, r3
 8002536:	4908      	ldr	r1, [pc, #32]	; (8002558 <__NVIC_SetPriority+0x50>)
 8002538:	79fb      	ldrb	r3, [r7, #7]
 800253a:	f003 030f 	and.w	r3, r3, #15
 800253e:	3b04      	subs	r3, #4
 8002540:	0112      	lsls	r2, r2, #4
 8002542:	b2d2      	uxtb	r2, r2
 8002544:	440b      	add	r3, r1
 8002546:	761a      	strb	r2, [r3, #24]
}
 8002548:	bf00      	nop
 800254a:	370c      	adds	r7, #12
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr
 8002554:	e000e100 	.word	0xe000e100
 8002558:	e000ed00 	.word	0xe000ed00

0800255c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800255c:	b480      	push	{r7}
 800255e:	b089      	sub	sp, #36	; 0x24
 8002560:	af00      	add	r7, sp, #0
 8002562:	60f8      	str	r0, [r7, #12]
 8002564:	60b9      	str	r1, [r7, #8]
 8002566:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	f003 0307 	and.w	r3, r3, #7
 800256e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	f1c3 0307 	rsb	r3, r3, #7
 8002576:	2b04      	cmp	r3, #4
 8002578:	bf28      	it	cs
 800257a:	2304      	movcs	r3, #4
 800257c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	3304      	adds	r3, #4
 8002582:	2b06      	cmp	r3, #6
 8002584:	d902      	bls.n	800258c <NVIC_EncodePriority+0x30>
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	3b03      	subs	r3, #3
 800258a:	e000      	b.n	800258e <NVIC_EncodePriority+0x32>
 800258c:	2300      	movs	r3, #0
 800258e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002590:	f04f 32ff 	mov.w	r2, #4294967295
 8002594:	69bb      	ldr	r3, [r7, #24]
 8002596:	fa02 f303 	lsl.w	r3, r2, r3
 800259a:	43da      	mvns	r2, r3
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	401a      	ands	r2, r3
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025a4:	f04f 31ff 	mov.w	r1, #4294967295
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	fa01 f303 	lsl.w	r3, r1, r3
 80025ae:	43d9      	mvns	r1, r3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025b4:	4313      	orrs	r3, r2
         );
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3724      	adds	r7, #36	; 0x24
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr
	...

080025c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b082      	sub	sp, #8
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	3b01      	subs	r3, #1
 80025d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025d4:	d301      	bcc.n	80025da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025d6:	2301      	movs	r3, #1
 80025d8:	e00f      	b.n	80025fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025da:	4a0a      	ldr	r2, [pc, #40]	; (8002604 <SysTick_Config+0x40>)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	3b01      	subs	r3, #1
 80025e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025e2:	210f      	movs	r1, #15
 80025e4:	f04f 30ff 	mov.w	r0, #4294967295
 80025e8:	f7ff ff8e 	bl	8002508 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025ec:	4b05      	ldr	r3, [pc, #20]	; (8002604 <SysTick_Config+0x40>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025f2:	4b04      	ldr	r3, [pc, #16]	; (8002604 <SysTick_Config+0x40>)
 80025f4:	2207      	movs	r2, #7
 80025f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025f8:	2300      	movs	r3, #0
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3708      	adds	r7, #8
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	e000e010 	.word	0xe000e010

08002608 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b082      	sub	sp, #8
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	f7ff ff29 	bl	8002468 <__NVIC_SetPriorityGrouping>
}
 8002616:	bf00      	nop
 8002618:	3708      	adds	r7, #8
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}

0800261e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800261e:	b580      	push	{r7, lr}
 8002620:	b086      	sub	sp, #24
 8002622:	af00      	add	r7, sp, #0
 8002624:	4603      	mov	r3, r0
 8002626:	60b9      	str	r1, [r7, #8]
 8002628:	607a      	str	r2, [r7, #4]
 800262a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800262c:	2300      	movs	r3, #0
 800262e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002630:	f7ff ff3e 	bl	80024b0 <__NVIC_GetPriorityGrouping>
 8002634:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002636:	687a      	ldr	r2, [r7, #4]
 8002638:	68b9      	ldr	r1, [r7, #8]
 800263a:	6978      	ldr	r0, [r7, #20]
 800263c:	f7ff ff8e 	bl	800255c <NVIC_EncodePriority>
 8002640:	4602      	mov	r2, r0
 8002642:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002646:	4611      	mov	r1, r2
 8002648:	4618      	mov	r0, r3
 800264a:	f7ff ff5d 	bl	8002508 <__NVIC_SetPriority>
}
 800264e:	bf00      	nop
 8002650:	3718      	adds	r7, #24
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}

08002656 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002656:	b580      	push	{r7, lr}
 8002658:	b082      	sub	sp, #8
 800265a:	af00      	add	r7, sp, #0
 800265c:	4603      	mov	r3, r0
 800265e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002660:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002664:	4618      	mov	r0, r3
 8002666:	f7ff ff31 	bl	80024cc <__NVIC_EnableIRQ>
}
 800266a:	bf00      	nop
 800266c:	3708      	adds	r7, #8
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}

08002672 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002672:	b580      	push	{r7, lr}
 8002674:	b082      	sub	sp, #8
 8002676:	af00      	add	r7, sp, #0
 8002678:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f7ff ffa2 	bl	80025c4 <SysTick_Config>
 8002680:	4603      	mov	r3, r0
}
 8002682:	4618      	mov	r0, r3
 8002684:	3708      	adds	r7, #8
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}

0800268a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800268a:	b580      	push	{r7, lr}
 800268c:	b082      	sub	sp, #8
 800268e:	af00      	add	r7, sp, #0
 8002690:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d101      	bne.n	800269c <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	e014      	b.n	80026c6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	791b      	ldrb	r3, [r3, #4]
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d105      	bne.n	80026b2 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2200      	movs	r2, #0
 80026aa:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	f7fe ffa3 	bl	80015f8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2202      	movs	r2, #2
 80026b6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2200      	movs	r2, #0
 80026bc:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2201      	movs	r2, #1
 80026c2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80026c4:	2300      	movs	r3, #0
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3708      	adds	r7, #8
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
	...

080026d0 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b086      	sub	sp, #24
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	60f8      	str	r0, [r7, #12]
 80026d8:	60b9      	str	r1, [r7, #8]
 80026da:	607a      	str	r2, [r7, #4]
 80026dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 80026de:	2300      	movs	r3, #0
 80026e0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	795b      	ldrb	r3, [r3, #5]
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d101      	bne.n	80026ee <HAL_DAC_Start_DMA+0x1e>
 80026ea:	2302      	movs	r3, #2
 80026ec:	e0ab      	b.n	8002846 <HAL_DAC_Start_DMA+0x176>
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	2201      	movs	r2, #1
 80026f2:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2202      	movs	r2, #2
 80026f8:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d12f      	bne.n	8002760 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	4a52      	ldr	r2, [pc, #328]	; (8002850 <HAL_DAC_Start_DMA+0x180>)
 8002706:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	4a51      	ldr	r2, [pc, #324]	; (8002854 <HAL_DAC_Start_DMA+0x184>)
 800270e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	4a50      	ldr	r2, [pc, #320]	; (8002858 <HAL_DAC_Start_DMA+0x188>)
 8002716:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002726:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8002728:	6a3b      	ldr	r3, [r7, #32]
 800272a:	2b08      	cmp	r3, #8
 800272c:	d013      	beq.n	8002756 <HAL_DAC_Start_DMA+0x86>
 800272e:	6a3b      	ldr	r3, [r7, #32]
 8002730:	2b08      	cmp	r3, #8
 8002732:	d845      	bhi.n	80027c0 <HAL_DAC_Start_DMA+0xf0>
 8002734:	6a3b      	ldr	r3, [r7, #32]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d003      	beq.n	8002742 <HAL_DAC_Start_DMA+0x72>
 800273a:	6a3b      	ldr	r3, [r7, #32]
 800273c:	2b04      	cmp	r3, #4
 800273e:	d005      	beq.n	800274c <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8002740:	e03e      	b.n	80027c0 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	3308      	adds	r3, #8
 8002748:	613b      	str	r3, [r7, #16]
        break;
 800274a:	e03c      	b.n	80027c6 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	330c      	adds	r3, #12
 8002752:	613b      	str	r3, [r7, #16]
        break;
 8002754:	e037      	b.n	80027c6 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	3310      	adds	r3, #16
 800275c:	613b      	str	r3, [r7, #16]
        break;
 800275e:	e032      	b.n	80027c6 <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	4a3d      	ldr	r2, [pc, #244]	; (800285c <HAL_DAC_Start_DMA+0x18c>)
 8002766:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	4a3c      	ldr	r2, [pc, #240]	; (8002860 <HAL_DAC_Start_DMA+0x190>)
 800276e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	4a3b      	ldr	r2, [pc, #236]	; (8002864 <HAL_DAC_Start_DMA+0x194>)
 8002776:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002786:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8002788:	6a3b      	ldr	r3, [r7, #32]
 800278a:	2b08      	cmp	r3, #8
 800278c:	d013      	beq.n	80027b6 <HAL_DAC_Start_DMA+0xe6>
 800278e:	6a3b      	ldr	r3, [r7, #32]
 8002790:	2b08      	cmp	r3, #8
 8002792:	d817      	bhi.n	80027c4 <HAL_DAC_Start_DMA+0xf4>
 8002794:	6a3b      	ldr	r3, [r7, #32]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d003      	beq.n	80027a2 <HAL_DAC_Start_DMA+0xd2>
 800279a:	6a3b      	ldr	r3, [r7, #32]
 800279c:	2b04      	cmp	r3, #4
 800279e:	d005      	beq.n	80027ac <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 80027a0:	e010      	b.n	80027c4 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	3314      	adds	r3, #20
 80027a8:	613b      	str	r3, [r7, #16]
        break;
 80027aa:	e00c      	b.n	80027c6 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	3318      	adds	r3, #24
 80027b2:	613b      	str	r3, [r7, #16]
        break;
 80027b4:	e007      	b.n	80027c6 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	331c      	adds	r3, #28
 80027bc:	613b      	str	r3, [r7, #16]
        break;
 80027be:	e002      	b.n	80027c6 <HAL_DAC_Start_DMA+0xf6>
        break;
 80027c0:	bf00      	nop
 80027c2:	e000      	b.n	80027c6 <HAL_DAC_Start_DMA+0xf6>
        break;
 80027c4:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d111      	bne.n	80027f0 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80027da:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	6898      	ldr	r0, [r3, #8]
 80027e0:	6879      	ldr	r1, [r7, #4]
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	693a      	ldr	r2, [r7, #16]
 80027e6:	f000 fe85 	bl	80034f4 <HAL_DMA_Start_IT>
 80027ea:	4603      	mov	r3, r0
 80027ec:	75fb      	strb	r3, [r7, #23]
 80027ee:	e010      	b.n	8002812 <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80027fe:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	68d8      	ldr	r0, [r3, #12]
 8002804:	6879      	ldr	r1, [r7, #4]
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	693a      	ldr	r2, [r7, #16]
 800280a:	f000 fe73 	bl	80034f4 <HAL_DMA_Start_IT>
 800280e:	4603      	mov	r3, r0
 8002810:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2200      	movs	r2, #0
 8002816:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8002818:	7dfb      	ldrb	r3, [r7, #23]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d10c      	bne.n	8002838 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	6819      	ldr	r1, [r3, #0]
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	f003 0310 	and.w	r3, r3, #16
 800282a:	2201      	movs	r2, #1
 800282c:	409a      	lsls	r2, r3
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	430a      	orrs	r2, r1
 8002834:	601a      	str	r2, [r3, #0]
 8002836:	e005      	b.n	8002844 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	691b      	ldr	r3, [r3, #16]
 800283c:	f043 0204 	orr.w	r2, r3, #4
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8002844:	7dfb      	ldrb	r3, [r7, #23]
}
 8002846:	4618      	mov	r0, r3
 8002848:	3718      	adds	r7, #24
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	08002b3d 	.word	0x08002b3d
 8002854:	08002b5f 	.word	0x08002b5f
 8002858:	08002b7b 	.word	0x08002b7b
 800285c:	08002be5 	.word	0x08002be5
 8002860:	08002c07 	.word	0x08002c07
 8002864:	08002c23 	.word	0x08002c23

08002868 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002868:	b480      	push	{r7}
 800286a:	b083      	sub	sp, #12
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8002870:	bf00      	nop
 8002872:	370c      	adds	r7, #12
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr

0800287c <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800287c:	b480      	push	{r7}
 800287e:	b083      	sub	sp, #12
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8002884:	bf00      	nop
 8002886:	370c      	adds	r7, #12
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr

08002890 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002890:	b480      	push	{r7}
 8002892:	b083      	sub	sp, #12
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8002898:	bf00      	nop
 800289a:	370c      	adds	r7, #12
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr

080028a4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b088      	sub	sp, #32
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	60f8      	str	r0, [r7, #12]
 80028ac:	60b9      	str	r1, [r7, #8]
 80028ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 80028b0:	2300      	movs	r3, #0
 80028b2:	61bb      	str	r3, [r7, #24]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	795b      	ldrb	r3, [r3, #5]
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d101      	bne.n	80028c0 <HAL_DAC_ConfigChannel+0x1c>
 80028bc:	2302      	movs	r3, #2
 80028be:	e137      	b.n	8002b30 <HAL_DAC_ConfigChannel+0x28c>
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2201      	movs	r2, #1
 80028c4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2202      	movs	r2, #2
 80028ca:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	2b04      	cmp	r3, #4
 80028d2:	f040 8081 	bne.w	80029d8 <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80028d6:	f7ff fd97 	bl	8002408 <HAL_GetTick>
 80028da:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d140      	bne.n	8002964 <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80028e2:	e018      	b.n	8002916 <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80028e4:	f7ff fd90 	bl	8002408 <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	69bb      	ldr	r3, [r7, #24]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d911      	bls.n	8002916 <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d00a      	beq.n	8002916 <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	691b      	ldr	r3, [r3, #16]
 8002904:	f043 0208 	orr.w	r2, r3, #8
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	2203      	movs	r2, #3
 8002910:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002912:	2303      	movs	r3, #3
 8002914:	e10c      	b.n	8002b30 <HAL_DAC_ConfigChannel+0x28c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800291c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002920:	2b00      	cmp	r3, #0
 8002922:	d1df      	bne.n	80028e4 <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 8002924:	2001      	movs	r0, #1
 8002926:	f7ff fd7b 	bl	8002420 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	68ba      	ldr	r2, [r7, #8]
 8002930:	69d2      	ldr	r2, [r2, #28]
 8002932:	641a      	str	r2, [r3, #64]	; 0x40
 8002934:	e023      	b.n	800297e <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002936:	f7ff fd67 	bl	8002408 <HAL_GetTick>
 800293a:	4602      	mov	r2, r0
 800293c:	69bb      	ldr	r3, [r7, #24]
 800293e:	1ad3      	subs	r3, r2, r3
 8002940:	2b01      	cmp	r3, #1
 8002942:	d90f      	bls.n	8002964 <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800294a:	2b00      	cmp	r3, #0
 800294c:	da0a      	bge.n	8002964 <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	691b      	ldr	r3, [r3, #16]
 8002952:	f043 0208 	orr.w	r2, r3, #8
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2203      	movs	r2, #3
 800295e:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002960:	2303      	movs	r3, #3
 8002962:	e0e5      	b.n	8002b30 <HAL_DAC_ConfigChannel+0x28c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800296a:	2b00      	cmp	r3, #0
 800296c:	dbe3      	blt.n	8002936 <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 800296e:	2001      	movs	r0, #1
 8002970:	f7ff fd56 	bl	8002420 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	68ba      	ldr	r2, [r7, #8]
 800297a:	69d2      	ldr	r2, [r2, #28]
 800297c:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	f003 0310 	and.w	r3, r3, #16
 800298a:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800298e:	fa01 f303 	lsl.w	r3, r1, r3
 8002992:	43db      	mvns	r3, r3
 8002994:	ea02 0103 	and.w	r1, r2, r3
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	6a1a      	ldr	r2, [r3, #32]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	f003 0310 	and.w	r3, r3, #16
 80029a2:	409a      	lsls	r2, r3
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	430a      	orrs	r2, r1
 80029aa:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	f003 0310 	and.w	r3, r3, #16
 80029b8:	21ff      	movs	r1, #255	; 0xff
 80029ba:	fa01 f303 	lsl.w	r3, r1, r3
 80029be:	43db      	mvns	r3, r3
 80029c0:	ea02 0103 	and.w	r1, r2, r3
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	f003 0310 	and.w	r3, r3, #16
 80029ce:	409a      	lsls	r2, r3
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	430a      	orrs	r2, r1
 80029d6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	695b      	ldr	r3, [r3, #20]
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d11d      	bne.n	8002a1c <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029e6:	61fb      	str	r3, [r7, #28]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	f003 0310 	and.w	r3, r3, #16
 80029ee:	221f      	movs	r2, #31
 80029f0:	fa02 f303 	lsl.w	r3, r2, r3
 80029f4:	43db      	mvns	r3, r3
 80029f6:	69fa      	ldr	r2, [r7, #28]
 80029f8:	4013      	ands	r3, r2
 80029fa:	61fb      	str	r3, [r7, #28]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	699b      	ldr	r3, [r3, #24]
 8002a00:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	f003 0310 	and.w	r3, r3, #16
 8002a08:	697a      	ldr	r2, [r7, #20]
 8002a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0e:	69fa      	ldr	r2, [r7, #28]
 8002a10:	4313      	orrs	r3, r2
 8002a12:	61fb      	str	r3, [r7, #28]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	69fa      	ldr	r2, [r7, #28]
 8002a1a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a22:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	f003 0310 	and.w	r3, r3, #16
 8002a2a:	2207      	movs	r2, #7
 8002a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a30:	43db      	mvns	r3, r3
 8002a32:	69fa      	ldr	r2, [r7, #28]
 8002a34:	4013      	ands	r3, r2
 8002a36:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	685a      	ldr	r2, [r3, #4]
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	431a      	orrs	r2, r3
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	691b      	ldr	r3, [r3, #16]
 8002a46:	4313      	orrs	r3, r2
 8002a48:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	f003 0310 	and.w	r3, r3, #16
 8002a50:	697a      	ldr	r2, [r7, #20]
 8002a52:	fa02 f303 	lsl.w	r3, r2, r3
 8002a56:	69fa      	ldr	r2, [r7, #28]
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	61fb      	str	r3, [r7, #28]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	69fa      	ldr	r2, [r7, #28]
 8002a62:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	6819      	ldr	r1, [r3, #0]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	f003 0310 	and.w	r3, r3, #16
 8002a70:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002a74:	fa02 f303 	lsl.w	r3, r2, r3
 8002a78:	43da      	mvns	r2, r3
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	400a      	ands	r2, r1
 8002a80:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	61fb      	str	r3, [r7, #28]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	f003 0310 	and.w	r3, r3, #16
 8002a90:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002a94:	fa02 f303 	lsl.w	r3, r2, r3
 8002a98:	43db      	mvns	r3, r3
 8002a9a:	69fa      	ldr	r2, [r7, #28]
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	f003 0310 	and.w	r3, r3, #16
 8002aac:	697a      	ldr	r2, [r7, #20]
 8002aae:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab2:	69fa      	ldr	r2, [r7, #28]
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	61fb      	str	r3, [r7, #28]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ac0:	d104      	bne.n	8002acc <HAL_DAC_ConfigChannel+0x228>
  {
    tmpreg1 |= DAC_CR_HFSEL;
 8002ac2:	69fb      	ldr	r3, [r7, #28]
 8002ac4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ac8:	61fb      	str	r3, [r7, #28]
 8002aca:	e018      	b.n	8002afe <HAL_DAC_ConfigChannel+0x25a>
  }
  else
  {
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d104      	bne.n	8002ade <HAL_DAC_ConfigChannel+0x23a>
    {
      tmpreg1 &= ~(DAC_CR_HFSEL);
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002ada:	61fb      	str	r3, [r7, #28]
 8002adc:	e00f      	b.n	8002afe <HAL_DAC_ConfigChannel+0x25a>
    }
    else /* Automatic selection */
    {
      hclkfreq = HAL_RCC_GetHCLKFreq();
 8002ade:	f001 ff39 	bl	8004954 <HAL_RCC_GetHCLKFreq>
 8002ae2:	6138      	str	r0, [r7, #16]
      if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	4a14      	ldr	r2, [pc, #80]	; (8002b38 <HAL_DAC_ConfigChannel+0x294>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d904      	bls.n	8002af6 <HAL_DAC_ConfigChannel+0x252>
      {
        /* High frequency enable when HCLK frequency higher than 80   */
         tmpreg1 |= DAC_CR_HFSEL;
 8002aec:	69fb      	ldr	r3, [r7, #28]
 8002aee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002af2:	61fb      	str	r3, [r7, #28]
 8002af4:	e003      	b.n	8002afe <HAL_DAC_ConfigChannel+0x25a>
      }
      else
      {
        /* High frequency disable when HCLK frequency higher than 80  */
        tmpreg1 &= ~(DAC_CR_HFSEL);
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002afc:	61fb      	str	r3, [r7, #28]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	69fa      	ldr	r2, [r7, #28]
 8002b04:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	6819      	ldr	r1, [r3, #0]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	f003 0310 	and.w	r3, r3, #16
 8002b12:	22c0      	movs	r2, #192	; 0xc0
 8002b14:	fa02 f303 	lsl.w	r3, r2, r3
 8002b18:	43da      	mvns	r2, r3
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	400a      	ands	r2, r1
 8002b20:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2201      	movs	r2, #1
 8002b26:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002b2e:	2300      	movs	r3, #0
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	3720      	adds	r7, #32
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	04c4b400 	.word	0x04c4b400

08002b3c <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b084      	sub	sp, #16
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b48:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8002b4a:	68f8      	ldr	r0, [r7, #12]
 8002b4c:	f7ff fe8c 	bl	8002868 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2201      	movs	r2, #1
 8002b54:	711a      	strb	r2, [r3, #4]
}
 8002b56:	bf00      	nop
 8002b58:	3710      	adds	r7, #16
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}

08002b5e <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002b5e:	b580      	push	{r7, lr}
 8002b60:	b084      	sub	sp, #16
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b6a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8002b6c:	68f8      	ldr	r0, [r7, #12]
 8002b6e:	f7ff fe85 	bl	800287c <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002b72:	bf00      	nop
 8002b74:	3710      	adds	r7, #16
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}

08002b7a <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8002b7a:	b580      	push	{r7, lr}
 8002b7c:	b084      	sub	sp, #16
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b86:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	691b      	ldr	r3, [r3, #16]
 8002b8c:	f043 0204 	orr.w	r2, r3, #4
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8002b94:	68f8      	ldr	r0, [r7, #12]
 8002b96:	f7ff fe7b 	bl	8002890 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	711a      	strb	r2, [r3, #4]
}
 8002ba0:	bf00      	nop
 8002ba2:	3710      	adds	r7, #16
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}

08002ba8 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b083      	sub	sp, #12
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8002bb0:	bf00      	nop
 8002bb2:	370c      	adds	r7, #12
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr

08002bbc <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b083      	sub	sp, #12
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8002bc4:	bf00      	nop
 8002bc6:	370c      	adds	r7, #12
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr

08002bd0 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8002bd8:	bf00      	nop
 8002bda:	370c      	adds	r7, #12
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be2:	4770      	bx	lr

08002be4 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b084      	sub	sp, #16
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bf0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8002bf2:	68f8      	ldr	r0, [r7, #12]
 8002bf4:	f7ff ffd8 	bl	8002ba8 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	711a      	strb	r2, [r3, #4]
}
 8002bfe:	bf00      	nop
 8002c00:	3710      	adds	r7, #16
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}

08002c06 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002c06:	b580      	push	{r7, lr}
 8002c08:	b084      	sub	sp, #16
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c12:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8002c14:	68f8      	ldr	r0, [r7, #12]
 8002c16:	f7ff ffd1 	bl	8002bbc <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002c1a:	bf00      	nop
 8002c1c:	3710      	adds	r7, #16
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}

08002c22 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8002c22:	b580      	push	{r7, lr}
 8002c24:	b084      	sub	sp, #16
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c2e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	691b      	ldr	r3, [r3, #16]
 8002c34:	f043 0204 	orr.w	r2, r3, #4
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8002c3c:	68f8      	ldr	r0, [r7, #12]
 8002c3e:	f7ff ffc7 	bl	8002bd0 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2201      	movs	r2, #1
 8002c46:	711a      	strb	r2, [r3, #4]
}
 8002c48:	bf00      	nop
 8002c4a:	3710      	adds	r7, #16
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}

08002c50 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b082      	sub	sp, #8
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d101      	bne.n	8002c62 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e0ac      	b.n	8002dbc <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4618      	mov	r0, r3
 8002c68:	f000 faac 	bl	80031c4 <DFSDM_GetChannelFromInstance>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	4a55      	ldr	r2, [pc, #340]	; (8002dc4 <HAL_DFSDM_ChannelInit+0x174>)
 8002c70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d001      	beq.n	8002c7c <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e09f      	b.n	8002dbc <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	f7fe fdd3 	bl	8001828 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8002c82:	4b51      	ldr	r3, [pc, #324]	; (8002dc8 <HAL_DFSDM_ChannelInit+0x178>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	3301      	adds	r3, #1
 8002c88:	4a4f      	ldr	r2, [pc, #316]	; (8002dc8 <HAL_DFSDM_ChannelInit+0x178>)
 8002c8a:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8002c8c:	4b4e      	ldr	r3, [pc, #312]	; (8002dc8 <HAL_DFSDM_ChannelInit+0x178>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d125      	bne.n	8002ce0 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8002c94:	4b4d      	ldr	r3, [pc, #308]	; (8002dcc <HAL_DFSDM_ChannelInit+0x17c>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a4c      	ldr	r2, [pc, #304]	; (8002dcc <HAL_DFSDM_ChannelInit+0x17c>)
 8002c9a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002c9e:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8002ca0:	4b4a      	ldr	r3, [pc, #296]	; (8002dcc <HAL_DFSDM_ChannelInit+0x17c>)
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	4948      	ldr	r1, [pc, #288]	; (8002dcc <HAL_DFSDM_ChannelInit+0x17c>)
 8002caa:	4313      	orrs	r3, r2
 8002cac:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8002cae:	4b47      	ldr	r3, [pc, #284]	; (8002dcc <HAL_DFSDM_ChannelInit+0x17c>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a46      	ldr	r2, [pc, #280]	; (8002dcc <HAL_DFSDM_ChannelInit+0x17c>)
 8002cb4:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8002cb8:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	791b      	ldrb	r3, [r3, #4]
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d108      	bne.n	8002cd4 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8002cc2:	4b42      	ldr	r3, [pc, #264]	; (8002dcc <HAL_DFSDM_ChannelInit+0x17c>)
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	68db      	ldr	r3, [r3, #12]
 8002cca:	3b01      	subs	r3, #1
 8002ccc:	041b      	lsls	r3, r3, #16
 8002cce:	493f      	ldr	r1, [pc, #252]	; (8002dcc <HAL_DFSDM_ChannelInit+0x17c>)
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8002cd4:	4b3d      	ldr	r3, [pc, #244]	; (8002dcc <HAL_DFSDM_ChannelInit+0x17c>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a3c      	ldr	r2, [pc, #240]	; (8002dcc <HAL_DFSDM_ChannelInit+0x17c>)
 8002cda:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002cde:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8002cee:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	6819      	ldr	r1, [r3, #0]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002cfe:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002d04:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	430a      	orrs	r2, r1
 8002d0c:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f022 020f 	bic.w	r2, r2, #15
 8002d1c:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	6819      	ldr	r1, [r3, #0]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002d2c:	431a      	orrs	r2, r3
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	430a      	orrs	r2, r1
 8002d34:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	689a      	ldr	r2, [r3, #8]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8002d44:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	6899      	ldr	r1, [r3, #8]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d54:	3b01      	subs	r3, #1
 8002d56:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002d58:	431a      	orrs	r2, r3
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	430a      	orrs	r2, r1
 8002d60:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	685a      	ldr	r2, [r3, #4]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f002 0207 	and.w	r2, r2, #7
 8002d70:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	6859      	ldr	r1, [r3, #4]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d7c:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d82:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002d84:	431a      	orrs	r2, r3
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	430a      	orrs	r2, r1
 8002d8c:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002d9c:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2201      	movs	r2, #1
 8002da2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4618      	mov	r0, r3
 8002dac:	f000 fa0a 	bl	80031c4 <DFSDM_GetChannelFromInstance>
 8002db0:	4602      	mov	r2, r0
 8002db2:	4904      	ldr	r1, [pc, #16]	; (8002dc4 <HAL_DFSDM_ChannelInit+0x174>)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8002dba:	2300      	movs	r3, #0
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3708      	adds	r7, #8
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	200192f8 	.word	0x200192f8
 8002dc8:	200192f4 	.word	0x200192f4
 8002dcc:	40016000 	.word	0x40016000

08002dd0 <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b082      	sub	sp, #8
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_filter == NULL)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d101      	bne.n	8002de2 <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e0ca      	b.n	8002f78 <HAL_DFSDM_FilterInit+0x1a8>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a66      	ldr	r2, [pc, #408]	; (8002f80 <HAL_DFSDM_FilterInit+0x1b0>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d109      	bne.n	8002e00 <HAL_DFSDM_FilterInit+0x30>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	685b      	ldr	r3, [r3, #4]
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d003      	beq.n	8002dfc <HAL_DFSDM_FilterInit+0x2c>
       (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	68db      	ldr	r3, [r3, #12]
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d101      	bne.n	8002e00 <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e0bb      	b.n	8002f78 <HAL_DFSDM_FilterInit+0x1a8>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2200      	movs	r2, #0
 8002e04:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2201      	movs	r2, #1
 8002e0a:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2201      	movs	r2, #1
 8002e10:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2200      	movs	r2, #0
 8002e16:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	f7fe fc59 	bl	80016d0 <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8002e2c:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	7a1b      	ldrb	r3, [r3, #8]
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d108      	bne.n	8002e48 <HAL_DFSDM_FilterInit+0x78>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002e44:	601a      	str	r2, [r3, #0]
 8002e46:	e007      	b.n	8002e58 <HAL_DFSDM_FilterInit+0x88>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8002e56:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	7a5b      	ldrb	r3, [r3, #9]
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d108      	bne.n	8002e72 <HAL_DFSDM_FilterInit+0xa2>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8002e6e:	601a      	str	r2, [r3, #0]
 8002e70:	e007      	b.n	8002e82 <HAL_DFSDM_FilterInit+0xb2>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8002e80:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	6812      	ldr	r2, [r2, #0]
 8002e8c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002e90:	f023 0308 	bic.w	r3, r3, #8
 8002e94:	6013      	str	r3, [r2, #0]
  if (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	68db      	ldr	r3, [r3, #12]
 8002e9a:	2b02      	cmp	r3, #2
 8002e9c:	d108      	bne.n	8002eb0 <HAL_DFSDM_FilterInit+0xe0>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	6819      	ldr	r1, [r3, #0]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	695a      	ldr	r2, [r3, #20]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	430a      	orrs	r2, r1
 8002eae:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	7c1b      	ldrb	r3, [r3, #16]
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d108      	bne.n	8002eca <HAL_DFSDM_FilterInit+0xfa>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f042 0210 	orr.w	r2, r2, #16
 8002ec6:	601a      	str	r2, [r3, #0]
 8002ec8:	e007      	b.n	8002eda <HAL_DFSDM_FilterInit+0x10a>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f022 0210 	bic.w	r2, r2, #16
 8002ed8:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	7c5b      	ldrb	r3, [r3, #17]
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d108      	bne.n	8002ef4 <HAL_DFSDM_FilterInit+0x124>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f042 0220 	orr.w	r2, r2, #32
 8002ef0:	601a      	str	r2, [r3, #0]
 8002ef2:	e007      	b.n	8002f04 <HAL_DFSDM_FilterInit+0x134>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f022 0220 	bic.w	r2, r2, #32
 8002f02:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	695b      	ldr	r3, [r3, #20]
 8002f0a:	687a      	ldr	r2, [r7, #4]
 8002f0c:	6812      	ldr	r2, [r2, #0]
 8002f0e:	f023 4363 	bic.w	r3, r3, #3808428032	; 0xe3000000
 8002f12:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 8002f16:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	6959      	ldr	r1, [r3, #20]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	69da      	ldr	r2, [r3, #28]
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6a1b      	ldr	r3, [r3, #32]
 8002f26:	3b01      	subs	r3, #1
 8002f28:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8002f2a:	431a      	orrs	r2, r3
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f30:	3b01      	subs	r3, #1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8002f32:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	430a      	orrs	r2, r1
 8002f3a:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	685a      	ldr	r2, [r3, #4]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	68da      	ldr	r2, [r3, #12]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	699a      	ldr	r2, [r3, #24]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	7c1a      	ldrb	r2, [r3, #16]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f042 0201 	orr.w	r2, r2, #1
 8002f6c:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2201      	movs	r2, #1
 8002f72:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 8002f76:	2300      	movs	r3, #0
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	3708      	adds	r7, #8
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}
 8002f80:	40016100 	.word	0x40016100

08002f84 <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b087      	sub	sp, #28
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	60f8      	str	r0, [r7, #12]
 8002f8c:	60b9      	str	r1, [r7, #8]
 8002f8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f90:	2300      	movs	r3, #0
 8002f92:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d02e      	beq.n	8002ffc <HAL_DFSDM_FilterConfigRegChannel+0x78>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8002fa4:	2bff      	cmp	r3, #255	; 0xff
 8002fa6:	d029      	beq.n	8002ffc <HAL_DFSDM_FilterConfigRegChannel+0x78>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	68fa      	ldr	r2, [r7, #12]
 8002fb0:	6812      	ldr	r2, [r2, #0]
 8002fb2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002fb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fba:	6013      	str	r3, [r2, #0]
    if (ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d10d      	bne.n	8002fde <HAL_DFSDM_FilterConfigRegChannel+0x5a>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)(((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	021b      	lsls	r3, r3, #8
 8002fcc:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002fd0:	431a      	orrs	r2, r3
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002fda:	601a      	str	r2, [r3, #0]
 8002fdc:	e00a      	b.n	8002ff4 <HAL_DFSDM_FilterConfigRegChannel+0x70>
                                                    DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	6819      	ldr	r1, [r3, #0]
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	021b      	lsls	r3, r3, #8
 8002fe8:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	430a      	orrs	r2, r1
 8002ff2:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	631a      	str	r2, [r3, #48]	; 0x30
 8002ffa:	e001      	b.n	8003000 <HAL_DFSDM_FilterConfigRegChannel+0x7c>
  }
  else
  {
    status = HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 8003000:	7dfb      	ldrb	r3, [r7, #23]
}
 8003002:	4618      	mov	r0, r3
 8003004:	371c      	adds	r7, #28
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr
	...

08003010 <HAL_DFSDM_FilterRegularStart_DMA>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStart_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   int32_t                    *pData,
                                                   uint32_t                    Length)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b086      	sub	sp, #24
 8003014:	af00      	add	r7, sp, #0
 8003016:	60f8      	str	r0, [r7, #12]
 8003018:	60b9      	str	r1, [r7, #8]
 800301a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800301c:	2300      	movs	r3, #0
 800301e:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check destination address and length */
  if ((pData == NULL) || (Length == 0U))
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d002      	beq.n	800302c <HAL_DFSDM_FilterRegularStart_DMA+0x1c>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d102      	bne.n	8003032 <HAL_DFSDM_FilterRegularStart_DMA+0x22>
  {
    status = HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	75fb      	strb	r3, [r7, #23]
 8003030:	e064      	b.n	80030fc <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check that DMA is enabled for regular conversion */
  else if ((hdfsdm_filter->Instance->FLTCR1 & DFSDM_FLTCR1_RDMAEN) != DFSDM_FLTCR1_RDMAEN)
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800303c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003040:	d002      	beq.n	8003048 <HAL_DFSDM_FilterRegularStart_DMA+0x38>
  {
    status = HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	75fb      	strb	r3, [r7, #23]
 8003046:	e059      	b.n	80030fc <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check parameters compatibility */
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800304c:	2b00      	cmp	r3, #0
 800304e:	d10e      	bne.n	800306e <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8003054:	2b00      	cmp	r3, #0
 8003056:	d10a      	bne.n	800306e <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800305c:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 800305e:	2b00      	cmp	r3, #0
 8003060:	d105      	bne.n	800306e <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2b01      	cmp	r3, #1
 8003066:	d002      	beq.n	800306e <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (Length != 1U))
  {
    status = HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	75fb      	strb	r3, [r7, #23]
 800306c:	e046      	b.n	80030fc <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003072:	2b00      	cmp	r3, #0
 8003074:	d10b      	bne.n	800308e <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 800307a:	2b00      	cmp	r3, #0
 800307c:	d107      	bne.n	800308e <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR))
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003082:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8003084:	2b20      	cmp	r3, #32
 8003086:	d102      	bne.n	800308e <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
  {
    status = HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	75fb      	strb	r3, [r7, #23]
 800308c:	e036      	b.n	80030fc <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check DFSDM filter state */
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8003094:	2b01      	cmp	r3, #1
 8003096:	d004      	beq.n	80030a2 <HAL_DFSDM_FilterRegularStart_DMA+0x92>
           (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ))
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 800309e:	2b03      	cmp	r3, #3
 80030a0:	d12a      	bne.n	80030f8 <HAL_DFSDM_FilterRegularStart_DMA+0xe8>
  {
    /* Set callbacks on DMA handler */
    hdfsdm_filter->hdmaReg->XferCpltCallback = DFSDM_DMARegularConvCplt;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030a6:	4a18      	ldr	r2, [pc, #96]	; (8003108 <HAL_DFSDM_FilterRegularStart_DMA+0xf8>)
 80030a8:	62da      	str	r2, [r3, #44]	; 0x2c
    hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ae:	4a17      	ldr	r2, [pc, #92]	; (800310c <HAL_DFSDM_FilterRegularStart_DMA+0xfc>)
 80030b0:	635a      	str	r2, [r3, #52]	; 0x34
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030b6:	69db      	ldr	r3, [r3, #28]
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 80030b8:	2b20      	cmp	r3, #32
 80030ba:	d101      	bne.n	80030c0 <HAL_DFSDM_FilterRegularStart_DMA+0xb0>
 80030bc:	4a14      	ldr	r2, [pc, #80]	; (8003110 <HAL_DFSDM_FilterRegularStart_DMA+0x100>)
 80030be:	e000      	b.n	80030c2 <HAL_DFSDM_FilterRegularStart_DMA+0xb2>
 80030c0:	2200      	movs	r2, #0
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030c6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Start DMA in interrupt mode */
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	331c      	adds	r3, #28
 80030d2:	4619      	mov	r1, r3
 80030d4:	68ba      	ldr	r2, [r7, #8]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	f000 fa0c 	bl	80034f4 <HAL_DMA_Start_IT>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d006      	beq.n	80030f0 <HAL_DFSDM_FilterRegularStart_DMA+0xe0>
                         (uint32_t) pData, Length) != HAL_OK)
    {
      /* Set DFSDM filter in error state */
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	22ff      	movs	r2, #255	; 0xff
 80030e6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      status = HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	75fb      	strb	r3, [r7, #23]
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 80030ee:	e005      	b.n	80030fc <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
    else
    {
      /* Start regular conversion */
      DFSDM_RegConvStart(hdfsdm_filter);
 80030f0:	68f8      	ldr	r0, [r7, #12]
 80030f2:	f000 f8b3 	bl	800325c <DFSDM_RegConvStart>
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 80030f6:	e001      	b.n	80030fc <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
  }
  else
  {
    status = HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 80030fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3718      	adds	r7, #24
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	08003185 	.word	0x08003185
 800310c:	080031a1 	.word	0x080031a1
 8003110:	08003169 	.word	0x08003169

08003114 <HAL_DFSDM_FilterRegularStop_DMA>:
  * @note   This function should be called only if regular conversion is ongoing.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStop_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b084      	sub	sp, #16
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800311c:	2300      	movs	r3, #0
 800311e:	73fb      	strb	r3, [r7, #15]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG) && \
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8003126:	2b02      	cmp	r3, #2
 8003128:	d007      	beq.n	800313a <HAL_DFSDM_FilterRegularStop_DMA+0x26>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG_INJ))
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG) && \
 8003130:	2b04      	cmp	r3, #4
 8003132:	d002      	beq.n	800313a <HAL_DFSDM_FilterRegularStop_DMA+0x26>
  {
    /* Return error status */
    status = HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	73fb      	strb	r3, [r7, #15]
 8003138:	e007      	b.n	800314a <HAL_DFSDM_FilterRegularStop_DMA+0x36>
  else
  {
    /* Stop current DMA transfer */
    /* No need to check the returned value of HAL_DMA_Abort. */
    /* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for DFSDM. */
    (void) HAL_DMA_Abort(hdfsdm_filter->hdmaReg);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800313e:	4618      	mov	r0, r3
 8003140:	f000 fa53 	bl	80035ea <HAL_DMA_Abort>

    /* Stop regular conversion */
    DFSDM_RegConvStop(hdfsdm_filter);
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	f000 f8df 	bl	8003308 <DFSDM_RegConvStop>
  }
  /* Return function status */
  return status;
 800314a:	7bfb      	ldrb	r3, [r7, #15]
}
 800314c:	4618      	mov	r0, r3
 800314e:	3710      	adds	r7, #16
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}

08003154 <HAL_DFSDM_FilterErrorCallback>:
  * @brief  Error callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterErrorCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8003154:	b480      	push	{r7}
 8003156:	b083      	sub	sp, #12
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterErrorCallback could be implemented in the user file.
   */
}
 800315c:	bf00      	nop
 800315e:	370c      	adds	r7, #12
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr

08003168 <DFSDM_DMARegularHalfConvCplt>:
  * @brief  DMA half transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b084      	sub	sp, #16
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003174:	60fb      	str	r3, [r7, #12]

  /* Call regular half conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvHalfCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvHalfCpltCallback(hdfsdm_filter);
 8003176:	68f8      	ldr	r0, [r7, #12]
 8003178:	f7fe f9fa 	bl	8001570 <HAL_DFSDM_FilterRegConvHalfCpltCallback>
#endif
}
 800317c:	bf00      	nop
 800317e:	3710      	adds	r7, #16
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}

08003184 <DFSDM_DMARegularConvCplt>:
  * @brief  DMA transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularConvCplt(DMA_HandleTypeDef *hdma)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b084      	sub	sp, #16
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003190:	60fb      	str	r3, [r7, #12]

  /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 8003192:	68f8      	ldr	r0, [r7, #12]
 8003194:	f7fe f9dc 	bl	8001550 <HAL_DFSDM_FilterRegConvCpltCallback>
#endif
}
 8003198:	bf00      	nop
 800319a:	3710      	adds	r7, #16
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}

080031a0 <DFSDM_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMAError(DMA_HandleTypeDef *hdma)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b084      	sub	sp, #16
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ac:	60fb      	str	r3, [r7, #12]

  /* Update error code */
  hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_DMA;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2203      	movs	r2, #3
 80031b2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 80031b4:	68f8      	ldr	r0, [r7, #12]
 80031b6:	f7ff ffcd 	bl	8003154 <HAL_DFSDM_FilterErrorCallback>
#endif
}
 80031ba:	bf00      	nop
 80031bc:	3710      	adds	r7, #16
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}
	...

080031c4 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b085      	sub	sp, #20
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	4a1c      	ldr	r2, [pc, #112]	; (8003240 <DFSDM_GetChannelFromInstance+0x7c>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d102      	bne.n	80031da <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 80031d4:	2300      	movs	r3, #0
 80031d6:	60fb      	str	r3, [r7, #12]
 80031d8:	e02b      	b.n	8003232 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4a19      	ldr	r2, [pc, #100]	; (8003244 <DFSDM_GetChannelFromInstance+0x80>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d102      	bne.n	80031e8 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 80031e2:	2301      	movs	r3, #1
 80031e4:	60fb      	str	r3, [r7, #12]
 80031e6:	e024      	b.n	8003232 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	4a17      	ldr	r2, [pc, #92]	; (8003248 <DFSDM_GetChannelFromInstance+0x84>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d102      	bne.n	80031f6 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 80031f0:	2302      	movs	r3, #2
 80031f2:	60fb      	str	r3, [r7, #12]
 80031f4:	e01d      	b.n	8003232 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	4a14      	ldr	r2, [pc, #80]	; (800324c <DFSDM_GetChannelFromInstance+0x88>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d102      	bne.n	8003204 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 80031fe:	2304      	movs	r3, #4
 8003200:	60fb      	str	r3, [r7, #12]
 8003202:	e016      	b.n	8003232 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	4a12      	ldr	r2, [pc, #72]	; (8003250 <DFSDM_GetChannelFromInstance+0x8c>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d102      	bne.n	8003212 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 800320c:	2305      	movs	r3, #5
 800320e:	60fb      	str	r3, [r7, #12]
 8003210:	e00f      	b.n	8003232 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	4a0f      	ldr	r2, [pc, #60]	; (8003254 <DFSDM_GetChannelFromInstance+0x90>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d102      	bne.n	8003220 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 800321a:	2306      	movs	r3, #6
 800321c:	60fb      	str	r3, [r7, #12]
 800321e:	e008      	b.n	8003232 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	4a0d      	ldr	r2, [pc, #52]	; (8003258 <DFSDM_GetChannelFromInstance+0x94>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d102      	bne.n	800322e <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8003228:	2307      	movs	r3, #7
 800322a:	60fb      	str	r3, [r7, #12]
 800322c:	e001      	b.n	8003232 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 800322e:	2303      	movs	r3, #3
 8003230:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8003232:	68fb      	ldr	r3, [r7, #12]
}
 8003234:	4618      	mov	r0, r3
 8003236:	3714      	adds	r7, #20
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr
 8003240:	40016000 	.word	0x40016000
 8003244:	40016020 	.word	0x40016020
 8003248:	40016040 	.word	0x40016040
 800324c:	40016080 	.word	0x40016080
 8003250:	400160a0 	.word	0x400160a0
 8003254:	400160c0 	.word	0x400160c0
 8003258:	400160e0 	.word	0x400160e0

0800325c <DFSDM_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 800325c:	b480      	push	{r7}
 800325e:	b083      	sub	sp, #12
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  /* Check regular trigger */
  if (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003268:	2b00      	cmp	r3, #0
 800326a:	d108      	bne.n	800327e <DFSDM_RegConvStart+0x22>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800327a:	601a      	str	r2, [r3, #0]
 800327c:	e033      	b.n	80032e6 <DFSDM_RegConvStart+0x8a>
  }
  else /* synchronous trigger */
  {
    /* Disable DFSDM filter */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f022 0201 	bic.w	r2, r2, #1
 800328c:	601a      	str	r2, [r3, #0]

    /* Set RSYNC bit in DFSDM_FLTCR1 register */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	681a      	ldr	r2, [r3, #0]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800329c:	601a      	str	r2, [r3, #0]

    /* Enable DFSDM  filter */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f042 0201 	orr.w	r2, r2, #1
 80032ac:	601a      	str	r2, [r3, #0]

    /* If injected conversion was in progress, restart it */
    if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80032b4:	2b03      	cmp	r3, #3
 80032b6:	d116      	bne.n	80032e6 <DFSDM_RegConvStart+0x8a>
    {
      if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d107      	bne.n	80032d0 <DFSDM_RegConvStart+0x74>
      {
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f042 0202 	orr.w	r2, r2, #2
 80032ce:	601a      	str	r2, [r3, #0]
      }
      /* Update remaining injected conversions */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d102      	bne.n	80032e0 <DFSDM_RegConvStart+0x84>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032de:	e000      	b.n	80032e2 <DFSDM_RegConvStart+0x86>
 80032e0:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	6493      	str	r3, [r2, #72]	; 0x48
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                         HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d101      	bne.n	80032f4 <DFSDM_RegConvStart+0x98>
 80032f0:	2202      	movs	r2, #2
 80032f2:	e000      	b.n	80032f6 <DFSDM_RegConvStart+0x9a>
 80032f4:	2204      	movs	r2, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 80032fc:	bf00      	nop
 80032fe:	370c      	adds	r7, #12
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr

08003308 <DFSDM_RegConvStop>:
  * @brief  This function allows to really stop regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStop(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8003308:	b480      	push	{r7}
 800330a:	b083      	sub	sp, #12
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  /* Disable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f022 0201 	bic.w	r2, r2, #1
 800331e:	601a      	str	r2, [r3, #0]

  /* If regular trigger was synchronous, reset RSYNC bit in DFSDM_FLTCR1 register */
  if (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SYNC_TRIGGER)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003324:	2b01      	cmp	r3, #1
 8003326:	d107      	bne.n	8003338 <DFSDM_RegConvStop+0x30>
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8003336:	601a      	str	r2, [r3, #0]
  }

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f042 0201 	orr.w	r2, r2, #1
 8003346:	601a      	str	r2, [r3, #0]

  /* If injected conversion was in progress, restart it */
  if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG_INJ)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800334e:	2b04      	cmp	r3, #4
 8003350:	d116      	bne.n	8003380 <DFSDM_RegConvStop+0x78>
  {
    if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003356:	2b00      	cmp	r3, #0
 8003358:	d107      	bne.n	800336a <DFSDM_RegConvStop+0x62>
    {
      hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f042 0202 	orr.w	r2, r2, #2
 8003368:	601a      	str	r2, [r3, #0]
    }
    /* Update remaining injected conversions */
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                      hdfsdm_filter->InjectedChannelsNbr : 1U;
 8003370:	2b01      	cmp	r3, #1
 8003372:	d102      	bne.n	800337a <DFSDM_RegConvStop+0x72>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003378:	e000      	b.n	800337c <DFSDM_RegConvStop+0x74>
 800337a:	2301      	movs	r3, #1
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 800337c:	687a      	ldr	r2, [r7, #4]
 800337e:	6493      	str	r3, [r2, #72]	; 0x48
  }

  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                         HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_INJ;
 8003386:	2b02      	cmp	r3, #2
 8003388:	d101      	bne.n	800338e <DFSDM_RegConvStop+0x86>
 800338a:	2201      	movs	r2, #1
 800338c:	e000      	b.n	8003390 <DFSDM_RegConvStop+0x88>
 800338e:	2203      	movs	r2, #3
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 8003396:	bf00      	nop
 8003398:	370c      	adds	r7, #12
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr
	...

080033a4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b084      	sub	sp, #16
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d101      	bne.n	80033b6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e08d      	b.n	80034d2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	461a      	mov	r2, r3
 80033bc:	4b47      	ldr	r3, [pc, #284]	; (80034dc <HAL_DMA_Init+0x138>)
 80033be:	429a      	cmp	r2, r3
 80033c0:	d80f      	bhi.n	80033e2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	461a      	mov	r2, r3
 80033c8:	4b45      	ldr	r3, [pc, #276]	; (80034e0 <HAL_DMA_Init+0x13c>)
 80033ca:	4413      	add	r3, r2
 80033cc:	4a45      	ldr	r2, [pc, #276]	; (80034e4 <HAL_DMA_Init+0x140>)
 80033ce:	fba2 2303 	umull	r2, r3, r2, r3
 80033d2:	091b      	lsrs	r3, r3, #4
 80033d4:	009a      	lsls	r2, r3, #2
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4a42      	ldr	r2, [pc, #264]	; (80034e8 <HAL_DMA_Init+0x144>)
 80033de:	641a      	str	r2, [r3, #64]	; 0x40
 80033e0:	e00e      	b.n	8003400 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	461a      	mov	r2, r3
 80033e8:	4b40      	ldr	r3, [pc, #256]	; (80034ec <HAL_DMA_Init+0x148>)
 80033ea:	4413      	add	r3, r2
 80033ec:	4a3d      	ldr	r2, [pc, #244]	; (80034e4 <HAL_DMA_Init+0x140>)
 80033ee:	fba2 2303 	umull	r2, r3, r2, r3
 80033f2:	091b      	lsrs	r3, r3, #4
 80033f4:	009a      	lsls	r2, r3, #2
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	4a3c      	ldr	r2, [pc, #240]	; (80034f0 <HAL_DMA_Init+0x14c>)
 80033fe:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2202      	movs	r2, #2
 8003404:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003416:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800341a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003424:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	691b      	ldr	r3, [r3, #16]
 800342a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003430:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	699b      	ldr	r3, [r3, #24]
 8003436:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800343c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6a1b      	ldr	r3, [r3, #32]
 8003442:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003444:	68fa      	ldr	r2, [r7, #12]
 8003446:	4313      	orrs	r3, r2
 8003448:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	68fa      	ldr	r2, [r7, #12]
 8003450:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f000 fa72 	bl	800393c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003460:	d102      	bne.n	8003468 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2200      	movs	r2, #0
 8003466:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	685a      	ldr	r2, [r3, #4]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003470:	b2d2      	uxtb	r2, r2
 8003472:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003478:	687a      	ldr	r2, [r7, #4]
 800347a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800347c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d010      	beq.n	80034a8 <HAL_DMA_Init+0x104>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	2b04      	cmp	r3, #4
 800348c:	d80c      	bhi.n	80034a8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f000 fa92 	bl	80039b8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003498:	2200      	movs	r2, #0
 800349a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034a0:	687a      	ldr	r2, [r7, #4]
 80034a2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80034a4:	605a      	str	r2, [r3, #4]
 80034a6:	e008      	b.n	80034ba <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2200      	movs	r2, #0
 80034ac:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2200      	movs	r2, #0
 80034b2:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2200      	movs	r2, #0
 80034b8:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2200      	movs	r2, #0
 80034be:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2201      	movs	r2, #1
 80034c4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2200      	movs	r2, #0
 80034cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80034d0:	2300      	movs	r3, #0
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3710      	adds	r7, #16
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	bf00      	nop
 80034dc:	40020407 	.word	0x40020407
 80034e0:	bffdfff8 	.word	0xbffdfff8
 80034e4:	cccccccd 	.word	0xcccccccd
 80034e8:	40020000 	.word	0x40020000
 80034ec:	bffdfbf8 	.word	0xbffdfbf8
 80034f0:	40020400 	.word	0x40020400

080034f4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b086      	sub	sp, #24
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	60f8      	str	r0, [r7, #12]
 80034fc:	60b9      	str	r1, [r7, #8]
 80034fe:	607a      	str	r2, [r7, #4]
 8003500:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003502:	2300      	movs	r3, #0
 8003504:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800350c:	2b01      	cmp	r3, #1
 800350e:	d101      	bne.n	8003514 <HAL_DMA_Start_IT+0x20>
 8003510:	2302      	movs	r3, #2
 8003512:	e066      	b.n	80035e2 <HAL_DMA_Start_IT+0xee>
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2201      	movs	r2, #1
 8003518:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003522:	b2db      	uxtb	r3, r3
 8003524:	2b01      	cmp	r3, #1
 8003526:	d155      	bne.n	80035d4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2202      	movs	r2, #2
 800352c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2200      	movs	r2, #0
 8003534:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f022 0201 	bic.w	r2, r2, #1
 8003544:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	687a      	ldr	r2, [r7, #4]
 800354a:	68b9      	ldr	r1, [r7, #8]
 800354c:	68f8      	ldr	r0, [r7, #12]
 800354e:	f000 f9b6 	bl	80038be <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003556:	2b00      	cmp	r3, #0
 8003558:	d008      	beq.n	800356c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	681a      	ldr	r2, [r3, #0]
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f042 020e 	orr.w	r2, r2, #14
 8003568:	601a      	str	r2, [r3, #0]
 800356a:	e00f      	b.n	800358c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f022 0204 	bic.w	r2, r2, #4
 800357a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f042 020a 	orr.w	r2, r2, #10
 800358a:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d007      	beq.n	80035aa <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035a8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d007      	beq.n	80035c2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035c0:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f042 0201 	orr.w	r2, r2, #1
 80035d0:	601a      	str	r2, [r3, #0]
 80035d2:	e005      	b.n	80035e0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2200      	movs	r2, #0
 80035d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80035dc:	2302      	movs	r3, #2
 80035de:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80035e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3718      	adds	r7, #24
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}

080035ea <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80035ea:	b480      	push	{r7}
 80035ec:	b085      	sub	sp, #20
 80035ee:	af00      	add	r7, sp, #0
 80035f0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035f2:	2300      	movs	r3, #0
 80035f4:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	2b02      	cmp	r3, #2
 8003600:	d008      	beq.n	8003614 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2204      	movs	r2, #4
 8003606:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2200      	movs	r2, #0
 800360c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	e040      	b.n	8003696 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f022 020e 	bic.w	r2, r2, #14
 8003622:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800362e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003632:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f022 0201 	bic.w	r2, r2, #1
 8003642:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003648:	f003 021c 	and.w	r2, r3, #28
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003650:	2101      	movs	r1, #1
 8003652:	fa01 f202 	lsl.w	r2, r1, r2
 8003656:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800365c:	687a      	ldr	r2, [r7, #4]
 800365e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003660:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003666:	2b00      	cmp	r3, #0
 8003668:	d00c      	beq.n	8003684 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003674:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003678:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003682:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2201      	movs	r2, #1
 8003688:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2200      	movs	r2, #0
 8003690:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8003694:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003696:	4618      	mov	r0, r3
 8003698:	3714      	adds	r7, #20
 800369a:	46bd      	mov	sp, r7
 800369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a0:	4770      	bx	lr

080036a2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80036a2:	b580      	push	{r7, lr}
 80036a4:	b084      	sub	sp, #16
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036aa:	2300      	movs	r3, #0
 80036ac:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	2b02      	cmp	r3, #2
 80036b8:	d005      	beq.n	80036c6 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2204      	movs	r2, #4
 80036be:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	73fb      	strb	r3, [r7, #15]
 80036c4:	e047      	b.n	8003756 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f022 020e 	bic.w	r2, r2, #14
 80036d4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f022 0201 	bic.w	r2, r2, #1
 80036e4:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80036f4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036fa:	f003 021c 	and.w	r2, r3, #28
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003702:	2101      	movs	r1, #1
 8003704:	fa01 f202 	lsl.w	r2, r1, r2
 8003708:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800370e:	687a      	ldr	r2, [r7, #4]
 8003710:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003712:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003718:	2b00      	cmp	r3, #0
 800371a:	d00c      	beq.n	8003736 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003726:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800372a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003730:	687a      	ldr	r2, [r7, #4]
 8003732:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003734:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2201      	movs	r2, #1
 800373a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2200      	movs	r2, #0
 8003742:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800374a:	2b00      	cmp	r3, #0
 800374c:	d003      	beq.n	8003756 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	4798      	blx	r3
    }
  }
  return status;
 8003756:	7bfb      	ldrb	r3, [r7, #15]
}
 8003758:	4618      	mov	r0, r3
 800375a:	3710      	adds	r7, #16
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}

08003760 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b084      	sub	sp, #16
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800377c:	f003 031c 	and.w	r3, r3, #28
 8003780:	2204      	movs	r2, #4
 8003782:	409a      	lsls	r2, r3
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	4013      	ands	r3, r2
 8003788:	2b00      	cmp	r3, #0
 800378a:	d026      	beq.n	80037da <HAL_DMA_IRQHandler+0x7a>
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	f003 0304 	and.w	r3, r3, #4
 8003792:	2b00      	cmp	r3, #0
 8003794:	d021      	beq.n	80037da <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 0320 	and.w	r3, r3, #32
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d107      	bne.n	80037b4 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f022 0204 	bic.w	r2, r2, #4
 80037b2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037b8:	f003 021c 	and.w	r2, r3, #28
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c0:	2104      	movs	r1, #4
 80037c2:	fa01 f202 	lsl.w	r2, r1, r2
 80037c6:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d071      	beq.n	80038b4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80037d8:	e06c      	b.n	80038b4 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037de:	f003 031c 	and.w	r3, r3, #28
 80037e2:	2202      	movs	r2, #2
 80037e4:	409a      	lsls	r2, r3
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	4013      	ands	r3, r2
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d02e      	beq.n	800384c <HAL_DMA_IRQHandler+0xec>
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	f003 0302 	and.w	r3, r3, #2
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d029      	beq.n	800384c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 0320 	and.w	r3, r3, #32
 8003802:	2b00      	cmp	r3, #0
 8003804:	d10b      	bne.n	800381e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f022 020a 	bic.w	r2, r2, #10
 8003814:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2201      	movs	r2, #1
 800381a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003822:	f003 021c 	and.w	r2, r3, #28
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800382a:	2102      	movs	r1, #2
 800382c:	fa01 f202 	lsl.w	r2, r1, r2
 8003830:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2200      	movs	r2, #0
 8003836:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800383e:	2b00      	cmp	r3, #0
 8003840:	d038      	beq.n	80038b4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800384a:	e033      	b.n	80038b4 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003850:	f003 031c 	and.w	r3, r3, #28
 8003854:	2208      	movs	r2, #8
 8003856:	409a      	lsls	r2, r3
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	4013      	ands	r3, r2
 800385c:	2b00      	cmp	r3, #0
 800385e:	d02a      	beq.n	80038b6 <HAL_DMA_IRQHandler+0x156>
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	f003 0308 	and.w	r3, r3, #8
 8003866:	2b00      	cmp	r3, #0
 8003868:	d025      	beq.n	80038b6 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f022 020e 	bic.w	r2, r2, #14
 8003878:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800387e:	f003 021c 	and.w	r2, r3, #28
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003886:	2101      	movs	r1, #1
 8003888:	fa01 f202 	lsl.w	r2, r1, r2
 800388c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2201      	movs	r2, #1
 8003892:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2201      	movs	r2, #1
 8003898:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2200      	movs	r2, #0
 80038a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d004      	beq.n	80038b6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80038b4:	bf00      	nop
 80038b6:	bf00      	nop
}
 80038b8:	3710      	adds	r7, #16
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}

080038be <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80038be:	b480      	push	{r7}
 80038c0:	b085      	sub	sp, #20
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	60f8      	str	r0, [r7, #12]
 80038c6:	60b9      	str	r1, [r7, #8]
 80038c8:	607a      	str	r2, [r7, #4]
 80038ca:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038d0:	68fa      	ldr	r2, [r7, #12]
 80038d2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80038d4:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d004      	beq.n	80038e8 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038e2:	68fa      	ldr	r2, [r7, #12]
 80038e4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80038e6:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ec:	f003 021c 	and.w	r2, r3, #28
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f4:	2101      	movs	r1, #1
 80038f6:	fa01 f202 	lsl.w	r2, r1, r2
 80038fa:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	683a      	ldr	r2, [r7, #0]
 8003902:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	2b10      	cmp	r3, #16
 800390a:	d108      	bne.n	800391e <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	687a      	ldr	r2, [r7, #4]
 8003912:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	68ba      	ldr	r2, [r7, #8]
 800391a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800391c:	e007      	b.n	800392e <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	68ba      	ldr	r2, [r7, #8]
 8003924:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	687a      	ldr	r2, [r7, #4]
 800392c:	60da      	str	r2, [r3, #12]
}
 800392e:	bf00      	nop
 8003930:	3714      	adds	r7, #20
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr
	...

0800393c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800393c:	b480      	push	{r7}
 800393e:	b085      	sub	sp, #20
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	461a      	mov	r2, r3
 800394a:	4b17      	ldr	r3, [pc, #92]	; (80039a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800394c:	429a      	cmp	r2, r3
 800394e:	d80a      	bhi.n	8003966 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003954:	089b      	lsrs	r3, r3, #2
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800395c:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8003960:	687a      	ldr	r2, [r7, #4]
 8003962:	6493      	str	r3, [r2, #72]	; 0x48
 8003964:	e007      	b.n	8003976 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800396a:	089b      	lsrs	r3, r3, #2
 800396c:	009a      	lsls	r2, r3, #2
 800396e:	4b0f      	ldr	r3, [pc, #60]	; (80039ac <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003970:	4413      	add	r3, r2
 8003972:	687a      	ldr	r2, [r7, #4]
 8003974:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	b2db      	uxtb	r3, r3
 800397c:	3b08      	subs	r3, #8
 800397e:	4a0c      	ldr	r2, [pc, #48]	; (80039b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003980:	fba2 2303 	umull	r2, r3, r2, r3
 8003984:	091b      	lsrs	r3, r3, #4
 8003986:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	4a0a      	ldr	r2, [pc, #40]	; (80039b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800398c:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	f003 031f 	and.w	r3, r3, #31
 8003994:	2201      	movs	r2, #1
 8003996:	409a      	lsls	r2, r3
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800399c:	bf00      	nop
 800399e:	3714      	adds	r7, #20
 80039a0:	46bd      	mov	sp, r7
 80039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a6:	4770      	bx	lr
 80039a8:	40020407 	.word	0x40020407
 80039ac:	4002081c 	.word	0x4002081c
 80039b0:	cccccccd 	.word	0xcccccccd
 80039b4:	40020880 	.word	0x40020880

080039b8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b085      	sub	sp, #20
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80039c8:	68fa      	ldr	r2, [r7, #12]
 80039ca:	4b0b      	ldr	r3, [pc, #44]	; (80039f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80039cc:	4413      	add	r3, r2
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	461a      	mov	r2, r3
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4a08      	ldr	r2, [pc, #32]	; (80039fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80039da:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	3b01      	subs	r3, #1
 80039e0:	f003 0303 	and.w	r3, r3, #3
 80039e4:	2201      	movs	r2, #1
 80039e6:	409a      	lsls	r2, r3
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80039ec:	bf00      	nop
 80039ee:	3714      	adds	r7, #20
 80039f0:	46bd      	mov	sp, r7
 80039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f6:	4770      	bx	lr
 80039f8:	1000823f 	.word	0x1000823f
 80039fc:	40020940 	.word	0x40020940

08003a00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b087      	sub	sp, #28
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
 8003a08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a0e:	e166      	b.n	8003cde <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	2101      	movs	r1, #1
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	fa01 f303 	lsl.w	r3, r1, r3
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	f000 8158 	beq.w	8003cd8 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	f003 0303 	and.w	r3, r3, #3
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d005      	beq.n	8003a40 <HAL_GPIO_Init+0x40>
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	f003 0303 	and.w	r3, r3, #3
 8003a3c:	2b02      	cmp	r3, #2
 8003a3e:	d130      	bne.n	8003aa2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	005b      	lsls	r3, r3, #1
 8003a4a:	2203      	movs	r2, #3
 8003a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a50:	43db      	mvns	r3, r3
 8003a52:	693a      	ldr	r2, [r7, #16]
 8003a54:	4013      	ands	r3, r2
 8003a56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	68da      	ldr	r2, [r3, #12]
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	005b      	lsls	r3, r3, #1
 8003a60:	fa02 f303 	lsl.w	r3, r2, r3
 8003a64:	693a      	ldr	r2, [r7, #16]
 8003a66:	4313      	orrs	r3, r2
 8003a68:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	693a      	ldr	r2, [r7, #16]
 8003a6e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003a76:	2201      	movs	r2, #1
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a7e:	43db      	mvns	r3, r3
 8003a80:	693a      	ldr	r2, [r7, #16]
 8003a82:	4013      	ands	r3, r2
 8003a84:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	091b      	lsrs	r3, r3, #4
 8003a8c:	f003 0201 	and.w	r2, r3, #1
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	fa02 f303 	lsl.w	r3, r2, r3
 8003a96:	693a      	ldr	r2, [r7, #16]
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	693a      	ldr	r2, [r7, #16]
 8003aa0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	f003 0303 	and.w	r3, r3, #3
 8003aaa:	2b03      	cmp	r3, #3
 8003aac:	d017      	beq.n	8003ade <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	68db      	ldr	r3, [r3, #12]
 8003ab2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	005b      	lsls	r3, r3, #1
 8003ab8:	2203      	movs	r2, #3
 8003aba:	fa02 f303 	lsl.w	r3, r2, r3
 8003abe:	43db      	mvns	r3, r3
 8003ac0:	693a      	ldr	r2, [r7, #16]
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	689a      	ldr	r2, [r3, #8]
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	005b      	lsls	r3, r3, #1
 8003ace:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad2:	693a      	ldr	r2, [r7, #16]
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	693a      	ldr	r2, [r7, #16]
 8003adc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	f003 0303 	and.w	r3, r3, #3
 8003ae6:	2b02      	cmp	r3, #2
 8003ae8:	d123      	bne.n	8003b32 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	08da      	lsrs	r2, r3, #3
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	3208      	adds	r2, #8
 8003af2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003af6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	f003 0307 	and.w	r3, r3, #7
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	220f      	movs	r2, #15
 8003b02:	fa02 f303 	lsl.w	r3, r2, r3
 8003b06:	43db      	mvns	r3, r3
 8003b08:	693a      	ldr	r2, [r7, #16]
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	691a      	ldr	r2, [r3, #16]
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	f003 0307 	and.w	r3, r3, #7
 8003b18:	009b      	lsls	r3, r3, #2
 8003b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b1e:	693a      	ldr	r2, [r7, #16]
 8003b20:	4313      	orrs	r3, r2
 8003b22:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	08da      	lsrs	r2, r3, #3
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	3208      	adds	r2, #8
 8003b2c:	6939      	ldr	r1, [r7, #16]
 8003b2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	005b      	lsls	r3, r3, #1
 8003b3c:	2203      	movs	r2, #3
 8003b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b42:	43db      	mvns	r3, r3
 8003b44:	693a      	ldr	r2, [r7, #16]
 8003b46:	4013      	ands	r3, r2
 8003b48:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	f003 0203 	and.w	r2, r3, #3
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	005b      	lsls	r3, r3, #1
 8003b56:	fa02 f303 	lsl.w	r3, r2, r3
 8003b5a:	693a      	ldr	r2, [r7, #16]
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	693a      	ldr	r2, [r7, #16]
 8003b64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	f000 80b2 	beq.w	8003cd8 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b74:	4b61      	ldr	r3, [pc, #388]	; (8003cfc <HAL_GPIO_Init+0x2fc>)
 8003b76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b78:	4a60      	ldr	r2, [pc, #384]	; (8003cfc <HAL_GPIO_Init+0x2fc>)
 8003b7a:	f043 0301 	orr.w	r3, r3, #1
 8003b7e:	6613      	str	r3, [r2, #96]	; 0x60
 8003b80:	4b5e      	ldr	r3, [pc, #376]	; (8003cfc <HAL_GPIO_Init+0x2fc>)
 8003b82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b84:	f003 0301 	and.w	r3, r3, #1
 8003b88:	60bb      	str	r3, [r7, #8]
 8003b8a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003b8c:	4a5c      	ldr	r2, [pc, #368]	; (8003d00 <HAL_GPIO_Init+0x300>)
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	089b      	lsrs	r3, r3, #2
 8003b92:	3302      	adds	r3, #2
 8003b94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b98:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	f003 0303 	and.w	r3, r3, #3
 8003ba0:	009b      	lsls	r3, r3, #2
 8003ba2:	220f      	movs	r2, #15
 8003ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba8:	43db      	mvns	r3, r3
 8003baa:	693a      	ldr	r2, [r7, #16]
 8003bac:	4013      	ands	r3, r2
 8003bae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003bb6:	d02b      	beq.n	8003c10 <HAL_GPIO_Init+0x210>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	4a52      	ldr	r2, [pc, #328]	; (8003d04 <HAL_GPIO_Init+0x304>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d025      	beq.n	8003c0c <HAL_GPIO_Init+0x20c>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	4a51      	ldr	r2, [pc, #324]	; (8003d08 <HAL_GPIO_Init+0x308>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d01f      	beq.n	8003c08 <HAL_GPIO_Init+0x208>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	4a50      	ldr	r2, [pc, #320]	; (8003d0c <HAL_GPIO_Init+0x30c>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d019      	beq.n	8003c04 <HAL_GPIO_Init+0x204>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	4a4f      	ldr	r2, [pc, #316]	; (8003d10 <HAL_GPIO_Init+0x310>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d013      	beq.n	8003c00 <HAL_GPIO_Init+0x200>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	4a4e      	ldr	r2, [pc, #312]	; (8003d14 <HAL_GPIO_Init+0x314>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d00d      	beq.n	8003bfc <HAL_GPIO_Init+0x1fc>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	4a4d      	ldr	r2, [pc, #308]	; (8003d18 <HAL_GPIO_Init+0x318>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d007      	beq.n	8003bf8 <HAL_GPIO_Init+0x1f8>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	4a4c      	ldr	r2, [pc, #304]	; (8003d1c <HAL_GPIO_Init+0x31c>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d101      	bne.n	8003bf4 <HAL_GPIO_Init+0x1f4>
 8003bf0:	2307      	movs	r3, #7
 8003bf2:	e00e      	b.n	8003c12 <HAL_GPIO_Init+0x212>
 8003bf4:	2308      	movs	r3, #8
 8003bf6:	e00c      	b.n	8003c12 <HAL_GPIO_Init+0x212>
 8003bf8:	2306      	movs	r3, #6
 8003bfa:	e00a      	b.n	8003c12 <HAL_GPIO_Init+0x212>
 8003bfc:	2305      	movs	r3, #5
 8003bfe:	e008      	b.n	8003c12 <HAL_GPIO_Init+0x212>
 8003c00:	2304      	movs	r3, #4
 8003c02:	e006      	b.n	8003c12 <HAL_GPIO_Init+0x212>
 8003c04:	2303      	movs	r3, #3
 8003c06:	e004      	b.n	8003c12 <HAL_GPIO_Init+0x212>
 8003c08:	2302      	movs	r3, #2
 8003c0a:	e002      	b.n	8003c12 <HAL_GPIO_Init+0x212>
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	e000      	b.n	8003c12 <HAL_GPIO_Init+0x212>
 8003c10:	2300      	movs	r3, #0
 8003c12:	697a      	ldr	r2, [r7, #20]
 8003c14:	f002 0203 	and.w	r2, r2, #3
 8003c18:	0092      	lsls	r2, r2, #2
 8003c1a:	4093      	lsls	r3, r2
 8003c1c:	693a      	ldr	r2, [r7, #16]
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003c22:	4937      	ldr	r1, [pc, #220]	; (8003d00 <HAL_GPIO_Init+0x300>)
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	089b      	lsrs	r3, r3, #2
 8003c28:	3302      	adds	r3, #2
 8003c2a:	693a      	ldr	r2, [r7, #16]
 8003c2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003c30:	4b3b      	ldr	r3, [pc, #236]	; (8003d20 <HAL_GPIO_Init+0x320>)
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	43db      	mvns	r3, r3
 8003c3a:	693a      	ldr	r2, [r7, #16]
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d003      	beq.n	8003c54 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003c4c:	693a      	ldr	r2, [r7, #16]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	4313      	orrs	r3, r2
 8003c52:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003c54:	4a32      	ldr	r2, [pc, #200]	; (8003d20 <HAL_GPIO_Init+0x320>)
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003c5a:	4b31      	ldr	r3, [pc, #196]	; (8003d20 <HAL_GPIO_Init+0x320>)
 8003c5c:	68db      	ldr	r3, [r3, #12]
 8003c5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	43db      	mvns	r3, r3
 8003c64:	693a      	ldr	r2, [r7, #16]
 8003c66:	4013      	ands	r3, r2
 8003c68:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d003      	beq.n	8003c7e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8003c76:	693a      	ldr	r2, [r7, #16]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003c7e:	4a28      	ldr	r2, [pc, #160]	; (8003d20 <HAL_GPIO_Init+0x320>)
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003c84:	4b26      	ldr	r3, [pc, #152]	; (8003d20 <HAL_GPIO_Init+0x320>)
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	43db      	mvns	r3, r3
 8003c8e:	693a      	ldr	r2, [r7, #16]
 8003c90:	4013      	ands	r3, r2
 8003c92:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d003      	beq.n	8003ca8 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8003ca0:	693a      	ldr	r2, [r7, #16]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003ca8:	4a1d      	ldr	r2, [pc, #116]	; (8003d20 <HAL_GPIO_Init+0x320>)
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003cae:	4b1c      	ldr	r3, [pc, #112]	; (8003d20 <HAL_GPIO_Init+0x320>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	43db      	mvns	r3, r3
 8003cb8:	693a      	ldr	r2, [r7, #16]
 8003cba:	4013      	ands	r3, r2
 8003cbc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d003      	beq.n	8003cd2 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8003cca:	693a      	ldr	r2, [r7, #16]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003cd2:	4a13      	ldr	r2, [pc, #76]	; (8003d20 <HAL_GPIO_Init+0x320>)
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	3301      	adds	r3, #1
 8003cdc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	fa22 f303 	lsr.w	r3, r2, r3
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	f47f ae91 	bne.w	8003a10 <HAL_GPIO_Init+0x10>
  }
}
 8003cee:	bf00      	nop
 8003cf0:	bf00      	nop
 8003cf2:	371c      	adds	r7, #28
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr
 8003cfc:	40021000 	.word	0x40021000
 8003d00:	40010000 	.word	0x40010000
 8003d04:	48000400 	.word	0x48000400
 8003d08:	48000800 	.word	0x48000800
 8003d0c:	48000c00 	.word	0x48000c00
 8003d10:	48001000 	.word	0x48001000
 8003d14:	48001400 	.word	0x48001400
 8003d18:	48001800 	.word	0x48001800
 8003d1c:	48001c00 	.word	0x48001c00
 8003d20:	40010400 	.word	0x40010400

08003d24 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b082      	sub	sp, #8
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003d2e:	4b08      	ldr	r3, [pc, #32]	; (8003d50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d30:	695a      	ldr	r2, [r3, #20]
 8003d32:	88fb      	ldrh	r3, [r7, #6]
 8003d34:	4013      	ands	r3, r2
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d006      	beq.n	8003d48 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003d3a:	4a05      	ldr	r2, [pc, #20]	; (8003d50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d3c:	88fb      	ldrh	r3, [r7, #6]
 8003d3e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003d40:	88fb      	ldrh	r3, [r7, #6]
 8003d42:	4618      	mov	r0, r3
 8003d44:	f7fd fbea 	bl	800151c <HAL_GPIO_EXTI_Callback>
  }
}
 8003d48:	bf00      	nop
 8003d4a:	3708      	adds	r7, #8
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}
 8003d50:	40010400 	.word	0x40010400

08003d54 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003d54:	b480      	push	{r7}
 8003d56:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d58:	4b0d      	ldr	r3, [pc, #52]	; (8003d90 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003d60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d64:	d102      	bne.n	8003d6c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8003d66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d6a:	e00b      	b.n	8003d84 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8003d6c:	4b08      	ldr	r3, [pc, #32]	; (8003d90 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003d6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d7a:	d102      	bne.n	8003d82 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8003d7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003d80:	e000      	b.n	8003d84 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8003d82:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr
 8003d8e:	bf00      	nop
 8003d90:	40007000 	.word	0x40007000

08003d94 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b088      	sub	sp, #32
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d102      	bne.n	8003da8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	f000 bc08 	b.w	80045b8 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003da8:	4b96      	ldr	r3, [pc, #600]	; (8004004 <HAL_RCC_OscConfig+0x270>)
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	f003 030c 	and.w	r3, r3, #12
 8003db0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003db2:	4b94      	ldr	r3, [pc, #592]	; (8004004 <HAL_RCC_OscConfig+0x270>)
 8003db4:	68db      	ldr	r3, [r3, #12]
 8003db6:	f003 0303 	and.w	r3, r3, #3
 8003dba:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f003 0310 	and.w	r3, r3, #16
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	f000 80e4 	beq.w	8003f92 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003dca:	69bb      	ldr	r3, [r7, #24]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d007      	beq.n	8003de0 <HAL_RCC_OscConfig+0x4c>
 8003dd0:	69bb      	ldr	r3, [r7, #24]
 8003dd2:	2b0c      	cmp	r3, #12
 8003dd4:	f040 808b 	bne.w	8003eee <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	f040 8087 	bne.w	8003eee <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003de0:	4b88      	ldr	r3, [pc, #544]	; (8004004 <HAL_RCC_OscConfig+0x270>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 0302 	and.w	r3, r3, #2
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d005      	beq.n	8003df8 <HAL_RCC_OscConfig+0x64>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	699b      	ldr	r3, [r3, #24]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d101      	bne.n	8003df8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	e3df      	b.n	80045b8 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6a1a      	ldr	r2, [r3, #32]
 8003dfc:	4b81      	ldr	r3, [pc, #516]	; (8004004 <HAL_RCC_OscConfig+0x270>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 0308 	and.w	r3, r3, #8
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d004      	beq.n	8003e12 <HAL_RCC_OscConfig+0x7e>
 8003e08:	4b7e      	ldr	r3, [pc, #504]	; (8004004 <HAL_RCC_OscConfig+0x270>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e10:	e005      	b.n	8003e1e <HAL_RCC_OscConfig+0x8a>
 8003e12:	4b7c      	ldr	r3, [pc, #496]	; (8004004 <HAL_RCC_OscConfig+0x270>)
 8003e14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e18:	091b      	lsrs	r3, r3, #4
 8003e1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d223      	bcs.n	8003e6a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6a1b      	ldr	r3, [r3, #32]
 8003e26:	4618      	mov	r0, r3
 8003e28:	f000 fdcc 	bl	80049c4 <RCC_SetFlashLatencyFromMSIRange>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d001      	beq.n	8003e36 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	e3c0      	b.n	80045b8 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e36:	4b73      	ldr	r3, [pc, #460]	; (8004004 <HAL_RCC_OscConfig+0x270>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a72      	ldr	r2, [pc, #456]	; (8004004 <HAL_RCC_OscConfig+0x270>)
 8003e3c:	f043 0308 	orr.w	r3, r3, #8
 8003e40:	6013      	str	r3, [r2, #0]
 8003e42:	4b70      	ldr	r3, [pc, #448]	; (8004004 <HAL_RCC_OscConfig+0x270>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6a1b      	ldr	r3, [r3, #32]
 8003e4e:	496d      	ldr	r1, [pc, #436]	; (8004004 <HAL_RCC_OscConfig+0x270>)
 8003e50:	4313      	orrs	r3, r2
 8003e52:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e54:	4b6b      	ldr	r3, [pc, #428]	; (8004004 <HAL_RCC_OscConfig+0x270>)
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	69db      	ldr	r3, [r3, #28]
 8003e60:	021b      	lsls	r3, r3, #8
 8003e62:	4968      	ldr	r1, [pc, #416]	; (8004004 <HAL_RCC_OscConfig+0x270>)
 8003e64:	4313      	orrs	r3, r2
 8003e66:	604b      	str	r3, [r1, #4]
 8003e68:	e025      	b.n	8003eb6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e6a:	4b66      	ldr	r3, [pc, #408]	; (8004004 <HAL_RCC_OscConfig+0x270>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a65      	ldr	r2, [pc, #404]	; (8004004 <HAL_RCC_OscConfig+0x270>)
 8003e70:	f043 0308 	orr.w	r3, r3, #8
 8003e74:	6013      	str	r3, [r2, #0]
 8003e76:	4b63      	ldr	r3, [pc, #396]	; (8004004 <HAL_RCC_OscConfig+0x270>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6a1b      	ldr	r3, [r3, #32]
 8003e82:	4960      	ldr	r1, [pc, #384]	; (8004004 <HAL_RCC_OscConfig+0x270>)
 8003e84:	4313      	orrs	r3, r2
 8003e86:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e88:	4b5e      	ldr	r3, [pc, #376]	; (8004004 <HAL_RCC_OscConfig+0x270>)
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	69db      	ldr	r3, [r3, #28]
 8003e94:	021b      	lsls	r3, r3, #8
 8003e96:	495b      	ldr	r1, [pc, #364]	; (8004004 <HAL_RCC_OscConfig+0x270>)
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e9c:	69bb      	ldr	r3, [r7, #24]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d109      	bne.n	8003eb6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6a1b      	ldr	r3, [r3, #32]
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f000 fd8c 	bl	80049c4 <RCC_SetFlashLatencyFromMSIRange>
 8003eac:	4603      	mov	r3, r0
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d001      	beq.n	8003eb6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e380      	b.n	80045b8 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003eb6:	f000 fcc1 	bl	800483c <HAL_RCC_GetSysClockFreq>
 8003eba:	4602      	mov	r2, r0
 8003ebc:	4b51      	ldr	r3, [pc, #324]	; (8004004 <HAL_RCC_OscConfig+0x270>)
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	091b      	lsrs	r3, r3, #4
 8003ec2:	f003 030f 	and.w	r3, r3, #15
 8003ec6:	4950      	ldr	r1, [pc, #320]	; (8004008 <HAL_RCC_OscConfig+0x274>)
 8003ec8:	5ccb      	ldrb	r3, [r1, r3]
 8003eca:	f003 031f 	and.w	r3, r3, #31
 8003ece:	fa22 f303 	lsr.w	r3, r2, r3
 8003ed2:	4a4e      	ldr	r2, [pc, #312]	; (800400c <HAL_RCC_OscConfig+0x278>)
 8003ed4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003ed6:	4b4e      	ldr	r3, [pc, #312]	; (8004010 <HAL_RCC_OscConfig+0x27c>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4618      	mov	r0, r3
 8003edc:	f7fe fa44 	bl	8002368 <HAL_InitTick>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003ee4:	7bfb      	ldrb	r3, [r7, #15]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d052      	beq.n	8003f90 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003eea:	7bfb      	ldrb	r3, [r7, #15]
 8003eec:	e364      	b.n	80045b8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	699b      	ldr	r3, [r3, #24]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d032      	beq.n	8003f5c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003ef6:	4b43      	ldr	r3, [pc, #268]	; (8004004 <HAL_RCC_OscConfig+0x270>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a42      	ldr	r2, [pc, #264]	; (8004004 <HAL_RCC_OscConfig+0x270>)
 8003efc:	f043 0301 	orr.w	r3, r3, #1
 8003f00:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003f02:	f7fe fa81 	bl	8002408 <HAL_GetTick>
 8003f06:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f08:	e008      	b.n	8003f1c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003f0a:	f7fe fa7d 	bl	8002408 <HAL_GetTick>
 8003f0e:	4602      	mov	r2, r0
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	1ad3      	subs	r3, r2, r3
 8003f14:	2b02      	cmp	r3, #2
 8003f16:	d901      	bls.n	8003f1c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003f18:	2303      	movs	r3, #3
 8003f1a:	e34d      	b.n	80045b8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f1c:	4b39      	ldr	r3, [pc, #228]	; (8004004 <HAL_RCC_OscConfig+0x270>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f003 0302 	and.w	r3, r3, #2
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d0f0      	beq.n	8003f0a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f28:	4b36      	ldr	r3, [pc, #216]	; (8004004 <HAL_RCC_OscConfig+0x270>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a35      	ldr	r2, [pc, #212]	; (8004004 <HAL_RCC_OscConfig+0x270>)
 8003f2e:	f043 0308 	orr.w	r3, r3, #8
 8003f32:	6013      	str	r3, [r2, #0]
 8003f34:	4b33      	ldr	r3, [pc, #204]	; (8004004 <HAL_RCC_OscConfig+0x270>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6a1b      	ldr	r3, [r3, #32]
 8003f40:	4930      	ldr	r1, [pc, #192]	; (8004004 <HAL_RCC_OscConfig+0x270>)
 8003f42:	4313      	orrs	r3, r2
 8003f44:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f46:	4b2f      	ldr	r3, [pc, #188]	; (8004004 <HAL_RCC_OscConfig+0x270>)
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	69db      	ldr	r3, [r3, #28]
 8003f52:	021b      	lsls	r3, r3, #8
 8003f54:	492b      	ldr	r1, [pc, #172]	; (8004004 <HAL_RCC_OscConfig+0x270>)
 8003f56:	4313      	orrs	r3, r2
 8003f58:	604b      	str	r3, [r1, #4]
 8003f5a:	e01a      	b.n	8003f92 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003f5c:	4b29      	ldr	r3, [pc, #164]	; (8004004 <HAL_RCC_OscConfig+0x270>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a28      	ldr	r2, [pc, #160]	; (8004004 <HAL_RCC_OscConfig+0x270>)
 8003f62:	f023 0301 	bic.w	r3, r3, #1
 8003f66:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003f68:	f7fe fa4e 	bl	8002408 <HAL_GetTick>
 8003f6c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003f6e:	e008      	b.n	8003f82 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003f70:	f7fe fa4a 	bl	8002408 <HAL_GetTick>
 8003f74:	4602      	mov	r2, r0
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	1ad3      	subs	r3, r2, r3
 8003f7a:	2b02      	cmp	r3, #2
 8003f7c:	d901      	bls.n	8003f82 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003f7e:	2303      	movs	r3, #3
 8003f80:	e31a      	b.n	80045b8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003f82:	4b20      	ldr	r3, [pc, #128]	; (8004004 <HAL_RCC_OscConfig+0x270>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 0302 	and.w	r3, r3, #2
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d1f0      	bne.n	8003f70 <HAL_RCC_OscConfig+0x1dc>
 8003f8e:	e000      	b.n	8003f92 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003f90:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 0301 	and.w	r3, r3, #1
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d073      	beq.n	8004086 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003f9e:	69bb      	ldr	r3, [r7, #24]
 8003fa0:	2b08      	cmp	r3, #8
 8003fa2:	d005      	beq.n	8003fb0 <HAL_RCC_OscConfig+0x21c>
 8003fa4:	69bb      	ldr	r3, [r7, #24]
 8003fa6:	2b0c      	cmp	r3, #12
 8003fa8:	d10e      	bne.n	8003fc8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	2b03      	cmp	r3, #3
 8003fae:	d10b      	bne.n	8003fc8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fb0:	4b14      	ldr	r3, [pc, #80]	; (8004004 <HAL_RCC_OscConfig+0x270>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d063      	beq.n	8004084 <HAL_RCC_OscConfig+0x2f0>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d15f      	bne.n	8004084 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	e2f7      	b.n	80045b8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fd0:	d106      	bne.n	8003fe0 <HAL_RCC_OscConfig+0x24c>
 8003fd2:	4b0c      	ldr	r3, [pc, #48]	; (8004004 <HAL_RCC_OscConfig+0x270>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a0b      	ldr	r2, [pc, #44]	; (8004004 <HAL_RCC_OscConfig+0x270>)
 8003fd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fdc:	6013      	str	r3, [r2, #0]
 8003fde:	e025      	b.n	800402c <HAL_RCC_OscConfig+0x298>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003fe8:	d114      	bne.n	8004014 <HAL_RCC_OscConfig+0x280>
 8003fea:	4b06      	ldr	r3, [pc, #24]	; (8004004 <HAL_RCC_OscConfig+0x270>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a05      	ldr	r2, [pc, #20]	; (8004004 <HAL_RCC_OscConfig+0x270>)
 8003ff0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ff4:	6013      	str	r3, [r2, #0]
 8003ff6:	4b03      	ldr	r3, [pc, #12]	; (8004004 <HAL_RCC_OscConfig+0x270>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a02      	ldr	r2, [pc, #8]	; (8004004 <HAL_RCC_OscConfig+0x270>)
 8003ffc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004000:	6013      	str	r3, [r2, #0]
 8004002:	e013      	b.n	800402c <HAL_RCC_OscConfig+0x298>
 8004004:	40021000 	.word	0x40021000
 8004008:	08008598 	.word	0x08008598
 800400c:	20000000 	.word	0x20000000
 8004010:	20000014 	.word	0x20000014
 8004014:	4ba0      	ldr	r3, [pc, #640]	; (8004298 <HAL_RCC_OscConfig+0x504>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a9f      	ldr	r2, [pc, #636]	; (8004298 <HAL_RCC_OscConfig+0x504>)
 800401a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800401e:	6013      	str	r3, [r2, #0]
 8004020:	4b9d      	ldr	r3, [pc, #628]	; (8004298 <HAL_RCC_OscConfig+0x504>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a9c      	ldr	r2, [pc, #624]	; (8004298 <HAL_RCC_OscConfig+0x504>)
 8004026:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800402a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d013      	beq.n	800405c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004034:	f7fe f9e8 	bl	8002408 <HAL_GetTick>
 8004038:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800403a:	e008      	b.n	800404e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800403c:	f7fe f9e4 	bl	8002408 <HAL_GetTick>
 8004040:	4602      	mov	r2, r0
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	1ad3      	subs	r3, r2, r3
 8004046:	2b64      	cmp	r3, #100	; 0x64
 8004048:	d901      	bls.n	800404e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800404a:	2303      	movs	r3, #3
 800404c:	e2b4      	b.n	80045b8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800404e:	4b92      	ldr	r3, [pc, #584]	; (8004298 <HAL_RCC_OscConfig+0x504>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004056:	2b00      	cmp	r3, #0
 8004058:	d0f0      	beq.n	800403c <HAL_RCC_OscConfig+0x2a8>
 800405a:	e014      	b.n	8004086 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800405c:	f7fe f9d4 	bl	8002408 <HAL_GetTick>
 8004060:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004062:	e008      	b.n	8004076 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004064:	f7fe f9d0 	bl	8002408 <HAL_GetTick>
 8004068:	4602      	mov	r2, r0
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	1ad3      	subs	r3, r2, r3
 800406e:	2b64      	cmp	r3, #100	; 0x64
 8004070:	d901      	bls.n	8004076 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004072:	2303      	movs	r3, #3
 8004074:	e2a0      	b.n	80045b8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004076:	4b88      	ldr	r3, [pc, #544]	; (8004298 <HAL_RCC_OscConfig+0x504>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800407e:	2b00      	cmp	r3, #0
 8004080:	d1f0      	bne.n	8004064 <HAL_RCC_OscConfig+0x2d0>
 8004082:	e000      	b.n	8004086 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004084:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f003 0302 	and.w	r3, r3, #2
 800408e:	2b00      	cmp	r3, #0
 8004090:	d060      	beq.n	8004154 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004092:	69bb      	ldr	r3, [r7, #24]
 8004094:	2b04      	cmp	r3, #4
 8004096:	d005      	beq.n	80040a4 <HAL_RCC_OscConfig+0x310>
 8004098:	69bb      	ldr	r3, [r7, #24]
 800409a:	2b0c      	cmp	r3, #12
 800409c:	d119      	bne.n	80040d2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	2b02      	cmp	r3, #2
 80040a2:	d116      	bne.n	80040d2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80040a4:	4b7c      	ldr	r3, [pc, #496]	; (8004298 <HAL_RCC_OscConfig+0x504>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d005      	beq.n	80040bc <HAL_RCC_OscConfig+0x328>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	68db      	ldr	r3, [r3, #12]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d101      	bne.n	80040bc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	e27d      	b.n	80045b8 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040bc:	4b76      	ldr	r3, [pc, #472]	; (8004298 <HAL_RCC_OscConfig+0x504>)
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	691b      	ldr	r3, [r3, #16]
 80040c8:	061b      	lsls	r3, r3, #24
 80040ca:	4973      	ldr	r1, [pc, #460]	; (8004298 <HAL_RCC_OscConfig+0x504>)
 80040cc:	4313      	orrs	r3, r2
 80040ce:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80040d0:	e040      	b.n	8004154 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	68db      	ldr	r3, [r3, #12]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d023      	beq.n	8004122 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040da:	4b6f      	ldr	r3, [pc, #444]	; (8004298 <HAL_RCC_OscConfig+0x504>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a6e      	ldr	r2, [pc, #440]	; (8004298 <HAL_RCC_OscConfig+0x504>)
 80040e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040e6:	f7fe f98f 	bl	8002408 <HAL_GetTick>
 80040ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80040ec:	e008      	b.n	8004100 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040ee:	f7fe f98b 	bl	8002408 <HAL_GetTick>
 80040f2:	4602      	mov	r2, r0
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	1ad3      	subs	r3, r2, r3
 80040f8:	2b02      	cmp	r3, #2
 80040fa:	d901      	bls.n	8004100 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80040fc:	2303      	movs	r3, #3
 80040fe:	e25b      	b.n	80045b8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004100:	4b65      	ldr	r3, [pc, #404]	; (8004298 <HAL_RCC_OscConfig+0x504>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004108:	2b00      	cmp	r3, #0
 800410a:	d0f0      	beq.n	80040ee <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800410c:	4b62      	ldr	r3, [pc, #392]	; (8004298 <HAL_RCC_OscConfig+0x504>)
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	691b      	ldr	r3, [r3, #16]
 8004118:	061b      	lsls	r3, r3, #24
 800411a:	495f      	ldr	r1, [pc, #380]	; (8004298 <HAL_RCC_OscConfig+0x504>)
 800411c:	4313      	orrs	r3, r2
 800411e:	604b      	str	r3, [r1, #4]
 8004120:	e018      	b.n	8004154 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004122:	4b5d      	ldr	r3, [pc, #372]	; (8004298 <HAL_RCC_OscConfig+0x504>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a5c      	ldr	r2, [pc, #368]	; (8004298 <HAL_RCC_OscConfig+0x504>)
 8004128:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800412c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800412e:	f7fe f96b 	bl	8002408 <HAL_GetTick>
 8004132:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004134:	e008      	b.n	8004148 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004136:	f7fe f967 	bl	8002408 <HAL_GetTick>
 800413a:	4602      	mov	r2, r0
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	1ad3      	subs	r3, r2, r3
 8004140:	2b02      	cmp	r3, #2
 8004142:	d901      	bls.n	8004148 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004144:	2303      	movs	r3, #3
 8004146:	e237      	b.n	80045b8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004148:	4b53      	ldr	r3, [pc, #332]	; (8004298 <HAL_RCC_OscConfig+0x504>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004150:	2b00      	cmp	r3, #0
 8004152:	d1f0      	bne.n	8004136 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f003 0308 	and.w	r3, r3, #8
 800415c:	2b00      	cmp	r3, #0
 800415e:	d03c      	beq.n	80041da <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	695b      	ldr	r3, [r3, #20]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d01c      	beq.n	80041a2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004168:	4b4b      	ldr	r3, [pc, #300]	; (8004298 <HAL_RCC_OscConfig+0x504>)
 800416a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800416e:	4a4a      	ldr	r2, [pc, #296]	; (8004298 <HAL_RCC_OscConfig+0x504>)
 8004170:	f043 0301 	orr.w	r3, r3, #1
 8004174:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004178:	f7fe f946 	bl	8002408 <HAL_GetTick>
 800417c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800417e:	e008      	b.n	8004192 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004180:	f7fe f942 	bl	8002408 <HAL_GetTick>
 8004184:	4602      	mov	r2, r0
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	1ad3      	subs	r3, r2, r3
 800418a:	2b02      	cmp	r3, #2
 800418c:	d901      	bls.n	8004192 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800418e:	2303      	movs	r3, #3
 8004190:	e212      	b.n	80045b8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004192:	4b41      	ldr	r3, [pc, #260]	; (8004298 <HAL_RCC_OscConfig+0x504>)
 8004194:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004198:	f003 0302 	and.w	r3, r3, #2
 800419c:	2b00      	cmp	r3, #0
 800419e:	d0ef      	beq.n	8004180 <HAL_RCC_OscConfig+0x3ec>
 80041a0:	e01b      	b.n	80041da <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041a2:	4b3d      	ldr	r3, [pc, #244]	; (8004298 <HAL_RCC_OscConfig+0x504>)
 80041a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041a8:	4a3b      	ldr	r2, [pc, #236]	; (8004298 <HAL_RCC_OscConfig+0x504>)
 80041aa:	f023 0301 	bic.w	r3, r3, #1
 80041ae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041b2:	f7fe f929 	bl	8002408 <HAL_GetTick>
 80041b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80041b8:	e008      	b.n	80041cc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041ba:	f7fe f925 	bl	8002408 <HAL_GetTick>
 80041be:	4602      	mov	r2, r0
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	1ad3      	subs	r3, r2, r3
 80041c4:	2b02      	cmp	r3, #2
 80041c6:	d901      	bls.n	80041cc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80041c8:	2303      	movs	r3, #3
 80041ca:	e1f5      	b.n	80045b8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80041cc:	4b32      	ldr	r3, [pc, #200]	; (8004298 <HAL_RCC_OscConfig+0x504>)
 80041ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041d2:	f003 0302 	and.w	r3, r3, #2
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d1ef      	bne.n	80041ba <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f003 0304 	and.w	r3, r3, #4
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	f000 80a6 	beq.w	8004334 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041e8:	2300      	movs	r3, #0
 80041ea:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80041ec:	4b2a      	ldr	r3, [pc, #168]	; (8004298 <HAL_RCC_OscConfig+0x504>)
 80041ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d10d      	bne.n	8004214 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041f8:	4b27      	ldr	r3, [pc, #156]	; (8004298 <HAL_RCC_OscConfig+0x504>)
 80041fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041fc:	4a26      	ldr	r2, [pc, #152]	; (8004298 <HAL_RCC_OscConfig+0x504>)
 80041fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004202:	6593      	str	r3, [r2, #88]	; 0x58
 8004204:	4b24      	ldr	r3, [pc, #144]	; (8004298 <HAL_RCC_OscConfig+0x504>)
 8004206:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004208:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800420c:	60bb      	str	r3, [r7, #8]
 800420e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004210:	2301      	movs	r3, #1
 8004212:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004214:	4b21      	ldr	r3, [pc, #132]	; (800429c <HAL_RCC_OscConfig+0x508>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800421c:	2b00      	cmp	r3, #0
 800421e:	d118      	bne.n	8004252 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004220:	4b1e      	ldr	r3, [pc, #120]	; (800429c <HAL_RCC_OscConfig+0x508>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a1d      	ldr	r2, [pc, #116]	; (800429c <HAL_RCC_OscConfig+0x508>)
 8004226:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800422a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800422c:	f7fe f8ec 	bl	8002408 <HAL_GetTick>
 8004230:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004232:	e008      	b.n	8004246 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004234:	f7fe f8e8 	bl	8002408 <HAL_GetTick>
 8004238:	4602      	mov	r2, r0
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	1ad3      	subs	r3, r2, r3
 800423e:	2b02      	cmp	r3, #2
 8004240:	d901      	bls.n	8004246 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004242:	2303      	movs	r3, #3
 8004244:	e1b8      	b.n	80045b8 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004246:	4b15      	ldr	r3, [pc, #84]	; (800429c <HAL_RCC_OscConfig+0x508>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800424e:	2b00      	cmp	r3, #0
 8004250:	d0f0      	beq.n	8004234 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	2b01      	cmp	r3, #1
 8004258:	d108      	bne.n	800426c <HAL_RCC_OscConfig+0x4d8>
 800425a:	4b0f      	ldr	r3, [pc, #60]	; (8004298 <HAL_RCC_OscConfig+0x504>)
 800425c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004260:	4a0d      	ldr	r2, [pc, #52]	; (8004298 <HAL_RCC_OscConfig+0x504>)
 8004262:	f043 0301 	orr.w	r3, r3, #1
 8004266:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800426a:	e029      	b.n	80042c0 <HAL_RCC_OscConfig+0x52c>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	2b05      	cmp	r3, #5
 8004272:	d115      	bne.n	80042a0 <HAL_RCC_OscConfig+0x50c>
 8004274:	4b08      	ldr	r3, [pc, #32]	; (8004298 <HAL_RCC_OscConfig+0x504>)
 8004276:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800427a:	4a07      	ldr	r2, [pc, #28]	; (8004298 <HAL_RCC_OscConfig+0x504>)
 800427c:	f043 0304 	orr.w	r3, r3, #4
 8004280:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004284:	4b04      	ldr	r3, [pc, #16]	; (8004298 <HAL_RCC_OscConfig+0x504>)
 8004286:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800428a:	4a03      	ldr	r2, [pc, #12]	; (8004298 <HAL_RCC_OscConfig+0x504>)
 800428c:	f043 0301 	orr.w	r3, r3, #1
 8004290:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004294:	e014      	b.n	80042c0 <HAL_RCC_OscConfig+0x52c>
 8004296:	bf00      	nop
 8004298:	40021000 	.word	0x40021000
 800429c:	40007000 	.word	0x40007000
 80042a0:	4b9d      	ldr	r3, [pc, #628]	; (8004518 <HAL_RCC_OscConfig+0x784>)
 80042a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042a6:	4a9c      	ldr	r2, [pc, #624]	; (8004518 <HAL_RCC_OscConfig+0x784>)
 80042a8:	f023 0301 	bic.w	r3, r3, #1
 80042ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80042b0:	4b99      	ldr	r3, [pc, #612]	; (8004518 <HAL_RCC_OscConfig+0x784>)
 80042b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042b6:	4a98      	ldr	r2, [pc, #608]	; (8004518 <HAL_RCC_OscConfig+0x784>)
 80042b8:	f023 0304 	bic.w	r3, r3, #4
 80042bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d016      	beq.n	80042f6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042c8:	f7fe f89e 	bl	8002408 <HAL_GetTick>
 80042cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042ce:	e00a      	b.n	80042e6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042d0:	f7fe f89a 	bl	8002408 <HAL_GetTick>
 80042d4:	4602      	mov	r2, r0
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	1ad3      	subs	r3, r2, r3
 80042da:	f241 3288 	movw	r2, #5000	; 0x1388
 80042de:	4293      	cmp	r3, r2
 80042e0:	d901      	bls.n	80042e6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80042e2:	2303      	movs	r3, #3
 80042e4:	e168      	b.n	80045b8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042e6:	4b8c      	ldr	r3, [pc, #560]	; (8004518 <HAL_RCC_OscConfig+0x784>)
 80042e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042ec:	f003 0302 	and.w	r3, r3, #2
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d0ed      	beq.n	80042d0 <HAL_RCC_OscConfig+0x53c>
 80042f4:	e015      	b.n	8004322 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042f6:	f7fe f887 	bl	8002408 <HAL_GetTick>
 80042fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80042fc:	e00a      	b.n	8004314 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042fe:	f7fe f883 	bl	8002408 <HAL_GetTick>
 8004302:	4602      	mov	r2, r0
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	1ad3      	subs	r3, r2, r3
 8004308:	f241 3288 	movw	r2, #5000	; 0x1388
 800430c:	4293      	cmp	r3, r2
 800430e:	d901      	bls.n	8004314 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004310:	2303      	movs	r3, #3
 8004312:	e151      	b.n	80045b8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004314:	4b80      	ldr	r3, [pc, #512]	; (8004518 <HAL_RCC_OscConfig+0x784>)
 8004316:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800431a:	f003 0302 	and.w	r3, r3, #2
 800431e:	2b00      	cmp	r3, #0
 8004320:	d1ed      	bne.n	80042fe <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004322:	7ffb      	ldrb	r3, [r7, #31]
 8004324:	2b01      	cmp	r3, #1
 8004326:	d105      	bne.n	8004334 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004328:	4b7b      	ldr	r3, [pc, #492]	; (8004518 <HAL_RCC_OscConfig+0x784>)
 800432a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800432c:	4a7a      	ldr	r2, [pc, #488]	; (8004518 <HAL_RCC_OscConfig+0x784>)
 800432e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004332:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 0320 	and.w	r3, r3, #32
 800433c:	2b00      	cmp	r3, #0
 800433e:	d03c      	beq.n	80043ba <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004344:	2b00      	cmp	r3, #0
 8004346:	d01c      	beq.n	8004382 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004348:	4b73      	ldr	r3, [pc, #460]	; (8004518 <HAL_RCC_OscConfig+0x784>)
 800434a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800434e:	4a72      	ldr	r2, [pc, #456]	; (8004518 <HAL_RCC_OscConfig+0x784>)
 8004350:	f043 0301 	orr.w	r3, r3, #1
 8004354:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004358:	f7fe f856 	bl	8002408 <HAL_GetTick>
 800435c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800435e:	e008      	b.n	8004372 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004360:	f7fe f852 	bl	8002408 <HAL_GetTick>
 8004364:	4602      	mov	r2, r0
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	1ad3      	subs	r3, r2, r3
 800436a:	2b02      	cmp	r3, #2
 800436c:	d901      	bls.n	8004372 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800436e:	2303      	movs	r3, #3
 8004370:	e122      	b.n	80045b8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004372:	4b69      	ldr	r3, [pc, #420]	; (8004518 <HAL_RCC_OscConfig+0x784>)
 8004374:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004378:	f003 0302 	and.w	r3, r3, #2
 800437c:	2b00      	cmp	r3, #0
 800437e:	d0ef      	beq.n	8004360 <HAL_RCC_OscConfig+0x5cc>
 8004380:	e01b      	b.n	80043ba <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004382:	4b65      	ldr	r3, [pc, #404]	; (8004518 <HAL_RCC_OscConfig+0x784>)
 8004384:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004388:	4a63      	ldr	r2, [pc, #396]	; (8004518 <HAL_RCC_OscConfig+0x784>)
 800438a:	f023 0301 	bic.w	r3, r3, #1
 800438e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004392:	f7fe f839 	bl	8002408 <HAL_GetTick>
 8004396:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004398:	e008      	b.n	80043ac <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800439a:	f7fe f835 	bl	8002408 <HAL_GetTick>
 800439e:	4602      	mov	r2, r0
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	1ad3      	subs	r3, r2, r3
 80043a4:	2b02      	cmp	r3, #2
 80043a6:	d901      	bls.n	80043ac <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80043a8:	2303      	movs	r3, #3
 80043aa:	e105      	b.n	80045b8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80043ac:	4b5a      	ldr	r3, [pc, #360]	; (8004518 <HAL_RCC_OscConfig+0x784>)
 80043ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80043b2:	f003 0302 	and.w	r3, r3, #2
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d1ef      	bne.n	800439a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043be:	2b00      	cmp	r3, #0
 80043c0:	f000 80f9 	beq.w	80045b6 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043c8:	2b02      	cmp	r3, #2
 80043ca:	f040 80cf 	bne.w	800456c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80043ce:	4b52      	ldr	r3, [pc, #328]	; (8004518 <HAL_RCC_OscConfig+0x784>)
 80043d0:	68db      	ldr	r3, [r3, #12]
 80043d2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	f003 0203 	and.w	r2, r3, #3
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043de:	429a      	cmp	r2, r3
 80043e0:	d12c      	bne.n	800443c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ec:	3b01      	subs	r3, #1
 80043ee:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d123      	bne.n	800443c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043fe:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004400:	429a      	cmp	r2, r3
 8004402:	d11b      	bne.n	800443c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800440e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004410:	429a      	cmp	r2, r3
 8004412:	d113      	bne.n	800443c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800441e:	085b      	lsrs	r3, r3, #1
 8004420:	3b01      	subs	r3, #1
 8004422:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004424:	429a      	cmp	r2, r3
 8004426:	d109      	bne.n	800443c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004432:	085b      	lsrs	r3, r3, #1
 8004434:	3b01      	subs	r3, #1
 8004436:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004438:	429a      	cmp	r2, r3
 800443a:	d071      	beq.n	8004520 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800443c:	69bb      	ldr	r3, [r7, #24]
 800443e:	2b0c      	cmp	r3, #12
 8004440:	d068      	beq.n	8004514 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004442:	4b35      	ldr	r3, [pc, #212]	; (8004518 <HAL_RCC_OscConfig+0x784>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800444a:	2b00      	cmp	r3, #0
 800444c:	d105      	bne.n	800445a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800444e:	4b32      	ldr	r3, [pc, #200]	; (8004518 <HAL_RCC_OscConfig+0x784>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004456:	2b00      	cmp	r3, #0
 8004458:	d001      	beq.n	800445e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	e0ac      	b.n	80045b8 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800445e:	4b2e      	ldr	r3, [pc, #184]	; (8004518 <HAL_RCC_OscConfig+0x784>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a2d      	ldr	r2, [pc, #180]	; (8004518 <HAL_RCC_OscConfig+0x784>)
 8004464:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004468:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800446a:	f7fd ffcd 	bl	8002408 <HAL_GetTick>
 800446e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004470:	e008      	b.n	8004484 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004472:	f7fd ffc9 	bl	8002408 <HAL_GetTick>
 8004476:	4602      	mov	r2, r0
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	1ad3      	subs	r3, r2, r3
 800447c:	2b02      	cmp	r3, #2
 800447e:	d901      	bls.n	8004484 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8004480:	2303      	movs	r3, #3
 8004482:	e099      	b.n	80045b8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004484:	4b24      	ldr	r3, [pc, #144]	; (8004518 <HAL_RCC_OscConfig+0x784>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800448c:	2b00      	cmp	r3, #0
 800448e:	d1f0      	bne.n	8004472 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004490:	4b21      	ldr	r3, [pc, #132]	; (8004518 <HAL_RCC_OscConfig+0x784>)
 8004492:	68da      	ldr	r2, [r3, #12]
 8004494:	4b21      	ldr	r3, [pc, #132]	; (800451c <HAL_RCC_OscConfig+0x788>)
 8004496:	4013      	ands	r3, r2
 8004498:	687a      	ldr	r2, [r7, #4]
 800449a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800449c:	687a      	ldr	r2, [r7, #4]
 800449e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80044a0:	3a01      	subs	r2, #1
 80044a2:	0112      	lsls	r2, r2, #4
 80044a4:	4311      	orrs	r1, r2
 80044a6:	687a      	ldr	r2, [r7, #4]
 80044a8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80044aa:	0212      	lsls	r2, r2, #8
 80044ac:	4311      	orrs	r1, r2
 80044ae:	687a      	ldr	r2, [r7, #4]
 80044b0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80044b2:	0852      	lsrs	r2, r2, #1
 80044b4:	3a01      	subs	r2, #1
 80044b6:	0552      	lsls	r2, r2, #21
 80044b8:	4311      	orrs	r1, r2
 80044ba:	687a      	ldr	r2, [r7, #4]
 80044bc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80044be:	0852      	lsrs	r2, r2, #1
 80044c0:	3a01      	subs	r2, #1
 80044c2:	0652      	lsls	r2, r2, #25
 80044c4:	4311      	orrs	r1, r2
 80044c6:	687a      	ldr	r2, [r7, #4]
 80044c8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80044ca:	06d2      	lsls	r2, r2, #27
 80044cc:	430a      	orrs	r2, r1
 80044ce:	4912      	ldr	r1, [pc, #72]	; (8004518 <HAL_RCC_OscConfig+0x784>)
 80044d0:	4313      	orrs	r3, r2
 80044d2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80044d4:	4b10      	ldr	r3, [pc, #64]	; (8004518 <HAL_RCC_OscConfig+0x784>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a0f      	ldr	r2, [pc, #60]	; (8004518 <HAL_RCC_OscConfig+0x784>)
 80044da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044de:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80044e0:	4b0d      	ldr	r3, [pc, #52]	; (8004518 <HAL_RCC_OscConfig+0x784>)
 80044e2:	68db      	ldr	r3, [r3, #12]
 80044e4:	4a0c      	ldr	r2, [pc, #48]	; (8004518 <HAL_RCC_OscConfig+0x784>)
 80044e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044ea:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80044ec:	f7fd ff8c 	bl	8002408 <HAL_GetTick>
 80044f0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044f2:	e008      	b.n	8004506 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044f4:	f7fd ff88 	bl	8002408 <HAL_GetTick>
 80044f8:	4602      	mov	r2, r0
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	2b02      	cmp	r3, #2
 8004500:	d901      	bls.n	8004506 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8004502:	2303      	movs	r3, #3
 8004504:	e058      	b.n	80045b8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004506:	4b04      	ldr	r3, [pc, #16]	; (8004518 <HAL_RCC_OscConfig+0x784>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800450e:	2b00      	cmp	r3, #0
 8004510:	d0f0      	beq.n	80044f4 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004512:	e050      	b.n	80045b6 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	e04f      	b.n	80045b8 <HAL_RCC_OscConfig+0x824>
 8004518:	40021000 	.word	0x40021000
 800451c:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004520:	4b27      	ldr	r3, [pc, #156]	; (80045c0 <HAL_RCC_OscConfig+0x82c>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004528:	2b00      	cmp	r3, #0
 800452a:	d144      	bne.n	80045b6 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800452c:	4b24      	ldr	r3, [pc, #144]	; (80045c0 <HAL_RCC_OscConfig+0x82c>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a23      	ldr	r2, [pc, #140]	; (80045c0 <HAL_RCC_OscConfig+0x82c>)
 8004532:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004536:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004538:	4b21      	ldr	r3, [pc, #132]	; (80045c0 <HAL_RCC_OscConfig+0x82c>)
 800453a:	68db      	ldr	r3, [r3, #12]
 800453c:	4a20      	ldr	r2, [pc, #128]	; (80045c0 <HAL_RCC_OscConfig+0x82c>)
 800453e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004542:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004544:	f7fd ff60 	bl	8002408 <HAL_GetTick>
 8004548:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800454a:	e008      	b.n	800455e <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800454c:	f7fd ff5c 	bl	8002408 <HAL_GetTick>
 8004550:	4602      	mov	r2, r0
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	1ad3      	subs	r3, r2, r3
 8004556:	2b02      	cmp	r3, #2
 8004558:	d901      	bls.n	800455e <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800455a:	2303      	movs	r3, #3
 800455c:	e02c      	b.n	80045b8 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800455e:	4b18      	ldr	r3, [pc, #96]	; (80045c0 <HAL_RCC_OscConfig+0x82c>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004566:	2b00      	cmp	r3, #0
 8004568:	d0f0      	beq.n	800454c <HAL_RCC_OscConfig+0x7b8>
 800456a:	e024      	b.n	80045b6 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800456c:	69bb      	ldr	r3, [r7, #24]
 800456e:	2b0c      	cmp	r3, #12
 8004570:	d01f      	beq.n	80045b2 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004572:	4b13      	ldr	r3, [pc, #76]	; (80045c0 <HAL_RCC_OscConfig+0x82c>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a12      	ldr	r2, [pc, #72]	; (80045c0 <HAL_RCC_OscConfig+0x82c>)
 8004578:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800457c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800457e:	f7fd ff43 	bl	8002408 <HAL_GetTick>
 8004582:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004584:	e008      	b.n	8004598 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004586:	f7fd ff3f 	bl	8002408 <HAL_GetTick>
 800458a:	4602      	mov	r2, r0
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	1ad3      	subs	r3, r2, r3
 8004590:	2b02      	cmp	r3, #2
 8004592:	d901      	bls.n	8004598 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8004594:	2303      	movs	r3, #3
 8004596:	e00f      	b.n	80045b8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004598:	4b09      	ldr	r3, [pc, #36]	; (80045c0 <HAL_RCC_OscConfig+0x82c>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d1f0      	bne.n	8004586 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80045a4:	4b06      	ldr	r3, [pc, #24]	; (80045c0 <HAL_RCC_OscConfig+0x82c>)
 80045a6:	68da      	ldr	r2, [r3, #12]
 80045a8:	4905      	ldr	r1, [pc, #20]	; (80045c0 <HAL_RCC_OscConfig+0x82c>)
 80045aa:	4b06      	ldr	r3, [pc, #24]	; (80045c4 <HAL_RCC_OscConfig+0x830>)
 80045ac:	4013      	ands	r3, r2
 80045ae:	60cb      	str	r3, [r1, #12]
 80045b0:	e001      	b.n	80045b6 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	e000      	b.n	80045b8 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80045b6:	2300      	movs	r3, #0
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	3720      	adds	r7, #32
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}
 80045c0:	40021000 	.word	0x40021000
 80045c4:	feeefffc 	.word	0xfeeefffc

080045c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b086      	sub	sp, #24
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
 80045d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80045d2:	2300      	movs	r3, #0
 80045d4:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d101      	bne.n	80045e0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80045dc:	2301      	movs	r3, #1
 80045de:	e11d      	b.n	800481c <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80045e0:	4b90      	ldr	r3, [pc, #576]	; (8004824 <HAL_RCC_ClockConfig+0x25c>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f003 030f 	and.w	r3, r3, #15
 80045e8:	683a      	ldr	r2, [r7, #0]
 80045ea:	429a      	cmp	r2, r3
 80045ec:	d910      	bls.n	8004610 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045ee:	4b8d      	ldr	r3, [pc, #564]	; (8004824 <HAL_RCC_ClockConfig+0x25c>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f023 020f 	bic.w	r2, r3, #15
 80045f6:	498b      	ldr	r1, [pc, #556]	; (8004824 <HAL_RCC_ClockConfig+0x25c>)
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	4313      	orrs	r3, r2
 80045fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045fe:	4b89      	ldr	r3, [pc, #548]	; (8004824 <HAL_RCC_ClockConfig+0x25c>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 030f 	and.w	r3, r3, #15
 8004606:	683a      	ldr	r2, [r7, #0]
 8004608:	429a      	cmp	r2, r3
 800460a:	d001      	beq.n	8004610 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	e105      	b.n	800481c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f003 0302 	and.w	r3, r3, #2
 8004618:	2b00      	cmp	r3, #0
 800461a:	d010      	beq.n	800463e <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	689a      	ldr	r2, [r3, #8]
 8004620:	4b81      	ldr	r3, [pc, #516]	; (8004828 <HAL_RCC_ClockConfig+0x260>)
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004628:	429a      	cmp	r2, r3
 800462a:	d908      	bls.n	800463e <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800462c:	4b7e      	ldr	r3, [pc, #504]	; (8004828 <HAL_RCC_ClockConfig+0x260>)
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	497b      	ldr	r1, [pc, #492]	; (8004828 <HAL_RCC_ClockConfig+0x260>)
 800463a:	4313      	orrs	r3, r2
 800463c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f003 0301 	and.w	r3, r3, #1
 8004646:	2b00      	cmp	r3, #0
 8004648:	d079      	beq.n	800473e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	2b03      	cmp	r3, #3
 8004650:	d11e      	bne.n	8004690 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004652:	4b75      	ldr	r3, [pc, #468]	; (8004828 <HAL_RCC_ClockConfig+0x260>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800465a:	2b00      	cmp	r3, #0
 800465c:	d101      	bne.n	8004662 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	e0dc      	b.n	800481c <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8004662:	f000 fa09 	bl	8004a78 <RCC_GetSysClockFreqFromPLLSource>
 8004666:	4603      	mov	r3, r0
 8004668:	4a70      	ldr	r2, [pc, #448]	; (800482c <HAL_RCC_ClockConfig+0x264>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d946      	bls.n	80046fc <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800466e:	4b6e      	ldr	r3, [pc, #440]	; (8004828 <HAL_RCC_ClockConfig+0x260>)
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004676:	2b00      	cmp	r3, #0
 8004678:	d140      	bne.n	80046fc <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800467a:	4b6b      	ldr	r3, [pc, #428]	; (8004828 <HAL_RCC_ClockConfig+0x260>)
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004682:	4a69      	ldr	r2, [pc, #420]	; (8004828 <HAL_RCC_ClockConfig+0x260>)
 8004684:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004688:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800468a:	2380      	movs	r3, #128	; 0x80
 800468c:	617b      	str	r3, [r7, #20]
 800468e:	e035      	b.n	80046fc <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	2b02      	cmp	r3, #2
 8004696:	d107      	bne.n	80046a8 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004698:	4b63      	ldr	r3, [pc, #396]	; (8004828 <HAL_RCC_ClockConfig+0x260>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d115      	bne.n	80046d0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80046a4:	2301      	movs	r3, #1
 80046a6:	e0b9      	b.n	800481c <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d107      	bne.n	80046c0 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80046b0:	4b5d      	ldr	r3, [pc, #372]	; (8004828 <HAL_RCC_ClockConfig+0x260>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f003 0302 	and.w	r3, r3, #2
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d109      	bne.n	80046d0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80046bc:	2301      	movs	r3, #1
 80046be:	e0ad      	b.n	800481c <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80046c0:	4b59      	ldr	r3, [pc, #356]	; (8004828 <HAL_RCC_ClockConfig+0x260>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d101      	bne.n	80046d0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	e0a5      	b.n	800481c <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80046d0:	f000 f8b4 	bl	800483c <HAL_RCC_GetSysClockFreq>
 80046d4:	4603      	mov	r3, r0
 80046d6:	4a55      	ldr	r2, [pc, #340]	; (800482c <HAL_RCC_ClockConfig+0x264>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d90f      	bls.n	80046fc <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80046dc:	4b52      	ldr	r3, [pc, #328]	; (8004828 <HAL_RCC_ClockConfig+0x260>)
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d109      	bne.n	80046fc <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80046e8:	4b4f      	ldr	r3, [pc, #316]	; (8004828 <HAL_RCC_ClockConfig+0x260>)
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80046f0:	4a4d      	ldr	r2, [pc, #308]	; (8004828 <HAL_RCC_ClockConfig+0x260>)
 80046f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046f6:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80046f8:	2380      	movs	r3, #128	; 0x80
 80046fa:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80046fc:	4b4a      	ldr	r3, [pc, #296]	; (8004828 <HAL_RCC_ClockConfig+0x260>)
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	f023 0203 	bic.w	r2, r3, #3
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	4947      	ldr	r1, [pc, #284]	; (8004828 <HAL_RCC_ClockConfig+0x260>)
 800470a:	4313      	orrs	r3, r2
 800470c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800470e:	f7fd fe7b 	bl	8002408 <HAL_GetTick>
 8004712:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004714:	e00a      	b.n	800472c <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004716:	f7fd fe77 	bl	8002408 <HAL_GetTick>
 800471a:	4602      	mov	r2, r0
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	1ad3      	subs	r3, r2, r3
 8004720:	f241 3288 	movw	r2, #5000	; 0x1388
 8004724:	4293      	cmp	r3, r2
 8004726:	d901      	bls.n	800472c <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8004728:	2303      	movs	r3, #3
 800472a:	e077      	b.n	800481c <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800472c:	4b3e      	ldr	r3, [pc, #248]	; (8004828 <HAL_RCC_ClockConfig+0x260>)
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	f003 020c 	and.w	r2, r3, #12
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	009b      	lsls	r3, r3, #2
 800473a:	429a      	cmp	r2, r3
 800473c:	d1eb      	bne.n	8004716 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	2b80      	cmp	r3, #128	; 0x80
 8004742:	d105      	bne.n	8004750 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004744:	4b38      	ldr	r3, [pc, #224]	; (8004828 <HAL_RCC_ClockConfig+0x260>)
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	4a37      	ldr	r2, [pc, #220]	; (8004828 <HAL_RCC_ClockConfig+0x260>)
 800474a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800474e:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 0302 	and.w	r3, r3, #2
 8004758:	2b00      	cmp	r3, #0
 800475a:	d010      	beq.n	800477e <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	689a      	ldr	r2, [r3, #8]
 8004760:	4b31      	ldr	r3, [pc, #196]	; (8004828 <HAL_RCC_ClockConfig+0x260>)
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004768:	429a      	cmp	r2, r3
 800476a:	d208      	bcs.n	800477e <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800476c:	4b2e      	ldr	r3, [pc, #184]	; (8004828 <HAL_RCC_ClockConfig+0x260>)
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	492b      	ldr	r1, [pc, #172]	; (8004828 <HAL_RCC_ClockConfig+0x260>)
 800477a:	4313      	orrs	r3, r2
 800477c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800477e:	4b29      	ldr	r3, [pc, #164]	; (8004824 <HAL_RCC_ClockConfig+0x25c>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f003 030f 	and.w	r3, r3, #15
 8004786:	683a      	ldr	r2, [r7, #0]
 8004788:	429a      	cmp	r2, r3
 800478a:	d210      	bcs.n	80047ae <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800478c:	4b25      	ldr	r3, [pc, #148]	; (8004824 <HAL_RCC_ClockConfig+0x25c>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f023 020f 	bic.w	r2, r3, #15
 8004794:	4923      	ldr	r1, [pc, #140]	; (8004824 <HAL_RCC_ClockConfig+0x25c>)
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	4313      	orrs	r3, r2
 800479a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800479c:	4b21      	ldr	r3, [pc, #132]	; (8004824 <HAL_RCC_ClockConfig+0x25c>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f003 030f 	and.w	r3, r3, #15
 80047a4:	683a      	ldr	r2, [r7, #0]
 80047a6:	429a      	cmp	r2, r3
 80047a8:	d001      	beq.n	80047ae <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	e036      	b.n	800481c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f003 0304 	and.w	r3, r3, #4
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d008      	beq.n	80047cc <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047ba:	4b1b      	ldr	r3, [pc, #108]	; (8004828 <HAL_RCC_ClockConfig+0x260>)
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	68db      	ldr	r3, [r3, #12]
 80047c6:	4918      	ldr	r1, [pc, #96]	; (8004828 <HAL_RCC_ClockConfig+0x260>)
 80047c8:	4313      	orrs	r3, r2
 80047ca:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f003 0308 	and.w	r3, r3, #8
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d009      	beq.n	80047ec <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80047d8:	4b13      	ldr	r3, [pc, #76]	; (8004828 <HAL_RCC_ClockConfig+0x260>)
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	691b      	ldr	r3, [r3, #16]
 80047e4:	00db      	lsls	r3, r3, #3
 80047e6:	4910      	ldr	r1, [pc, #64]	; (8004828 <HAL_RCC_ClockConfig+0x260>)
 80047e8:	4313      	orrs	r3, r2
 80047ea:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80047ec:	f000 f826 	bl	800483c <HAL_RCC_GetSysClockFreq>
 80047f0:	4602      	mov	r2, r0
 80047f2:	4b0d      	ldr	r3, [pc, #52]	; (8004828 <HAL_RCC_ClockConfig+0x260>)
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	091b      	lsrs	r3, r3, #4
 80047f8:	f003 030f 	and.w	r3, r3, #15
 80047fc:	490c      	ldr	r1, [pc, #48]	; (8004830 <HAL_RCC_ClockConfig+0x268>)
 80047fe:	5ccb      	ldrb	r3, [r1, r3]
 8004800:	f003 031f 	and.w	r3, r3, #31
 8004804:	fa22 f303 	lsr.w	r3, r2, r3
 8004808:	4a0a      	ldr	r2, [pc, #40]	; (8004834 <HAL_RCC_ClockConfig+0x26c>)
 800480a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800480c:	4b0a      	ldr	r3, [pc, #40]	; (8004838 <HAL_RCC_ClockConfig+0x270>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4618      	mov	r0, r3
 8004812:	f7fd fda9 	bl	8002368 <HAL_InitTick>
 8004816:	4603      	mov	r3, r0
 8004818:	73fb      	strb	r3, [r7, #15]

  return status;
 800481a:	7bfb      	ldrb	r3, [r7, #15]
}
 800481c:	4618      	mov	r0, r3
 800481e:	3718      	adds	r7, #24
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}
 8004824:	40022000 	.word	0x40022000
 8004828:	40021000 	.word	0x40021000
 800482c:	04c4b400 	.word	0x04c4b400
 8004830:	08008598 	.word	0x08008598
 8004834:	20000000 	.word	0x20000000
 8004838:	20000014 	.word	0x20000014

0800483c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800483c:	b480      	push	{r7}
 800483e:	b089      	sub	sp, #36	; 0x24
 8004840:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004842:	2300      	movs	r3, #0
 8004844:	61fb      	str	r3, [r7, #28]
 8004846:	2300      	movs	r3, #0
 8004848:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800484a:	4b3e      	ldr	r3, [pc, #248]	; (8004944 <HAL_RCC_GetSysClockFreq+0x108>)
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	f003 030c 	and.w	r3, r3, #12
 8004852:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004854:	4b3b      	ldr	r3, [pc, #236]	; (8004944 <HAL_RCC_GetSysClockFreq+0x108>)
 8004856:	68db      	ldr	r3, [r3, #12]
 8004858:	f003 0303 	and.w	r3, r3, #3
 800485c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d005      	beq.n	8004870 <HAL_RCC_GetSysClockFreq+0x34>
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	2b0c      	cmp	r3, #12
 8004868:	d121      	bne.n	80048ae <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2b01      	cmp	r3, #1
 800486e:	d11e      	bne.n	80048ae <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004870:	4b34      	ldr	r3, [pc, #208]	; (8004944 <HAL_RCC_GetSysClockFreq+0x108>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 0308 	and.w	r3, r3, #8
 8004878:	2b00      	cmp	r3, #0
 800487a:	d107      	bne.n	800488c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800487c:	4b31      	ldr	r3, [pc, #196]	; (8004944 <HAL_RCC_GetSysClockFreq+0x108>)
 800487e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004882:	0a1b      	lsrs	r3, r3, #8
 8004884:	f003 030f 	and.w	r3, r3, #15
 8004888:	61fb      	str	r3, [r7, #28]
 800488a:	e005      	b.n	8004898 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800488c:	4b2d      	ldr	r3, [pc, #180]	; (8004944 <HAL_RCC_GetSysClockFreq+0x108>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	091b      	lsrs	r3, r3, #4
 8004892:	f003 030f 	and.w	r3, r3, #15
 8004896:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004898:	4a2b      	ldr	r2, [pc, #172]	; (8004948 <HAL_RCC_GetSysClockFreq+0x10c>)
 800489a:	69fb      	ldr	r3, [r7, #28]
 800489c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048a0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d10d      	bne.n	80048c4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80048a8:	69fb      	ldr	r3, [r7, #28]
 80048aa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80048ac:	e00a      	b.n	80048c4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	2b04      	cmp	r3, #4
 80048b2:	d102      	bne.n	80048ba <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80048b4:	4b25      	ldr	r3, [pc, #148]	; (800494c <HAL_RCC_GetSysClockFreq+0x110>)
 80048b6:	61bb      	str	r3, [r7, #24]
 80048b8:	e004      	b.n	80048c4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	2b08      	cmp	r3, #8
 80048be:	d101      	bne.n	80048c4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80048c0:	4b23      	ldr	r3, [pc, #140]	; (8004950 <HAL_RCC_GetSysClockFreq+0x114>)
 80048c2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	2b0c      	cmp	r3, #12
 80048c8:	d134      	bne.n	8004934 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80048ca:	4b1e      	ldr	r3, [pc, #120]	; (8004944 <HAL_RCC_GetSysClockFreq+0x108>)
 80048cc:	68db      	ldr	r3, [r3, #12]
 80048ce:	f003 0303 	and.w	r3, r3, #3
 80048d2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	2b02      	cmp	r3, #2
 80048d8:	d003      	beq.n	80048e2 <HAL_RCC_GetSysClockFreq+0xa6>
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	2b03      	cmp	r3, #3
 80048de:	d003      	beq.n	80048e8 <HAL_RCC_GetSysClockFreq+0xac>
 80048e0:	e005      	b.n	80048ee <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80048e2:	4b1a      	ldr	r3, [pc, #104]	; (800494c <HAL_RCC_GetSysClockFreq+0x110>)
 80048e4:	617b      	str	r3, [r7, #20]
      break;
 80048e6:	e005      	b.n	80048f4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80048e8:	4b19      	ldr	r3, [pc, #100]	; (8004950 <HAL_RCC_GetSysClockFreq+0x114>)
 80048ea:	617b      	str	r3, [r7, #20]
      break;
 80048ec:	e002      	b.n	80048f4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80048ee:	69fb      	ldr	r3, [r7, #28]
 80048f0:	617b      	str	r3, [r7, #20]
      break;
 80048f2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80048f4:	4b13      	ldr	r3, [pc, #76]	; (8004944 <HAL_RCC_GetSysClockFreq+0x108>)
 80048f6:	68db      	ldr	r3, [r3, #12]
 80048f8:	091b      	lsrs	r3, r3, #4
 80048fa:	f003 030f 	and.w	r3, r3, #15
 80048fe:	3301      	adds	r3, #1
 8004900:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004902:	4b10      	ldr	r3, [pc, #64]	; (8004944 <HAL_RCC_GetSysClockFreq+0x108>)
 8004904:	68db      	ldr	r3, [r3, #12]
 8004906:	0a1b      	lsrs	r3, r3, #8
 8004908:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800490c:	697a      	ldr	r2, [r7, #20]
 800490e:	fb03 f202 	mul.w	r2, r3, r2
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	fbb2 f3f3 	udiv	r3, r2, r3
 8004918:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800491a:	4b0a      	ldr	r3, [pc, #40]	; (8004944 <HAL_RCC_GetSysClockFreq+0x108>)
 800491c:	68db      	ldr	r3, [r3, #12]
 800491e:	0e5b      	lsrs	r3, r3, #25
 8004920:	f003 0303 	and.w	r3, r3, #3
 8004924:	3301      	adds	r3, #1
 8004926:	005b      	lsls	r3, r3, #1
 8004928:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800492a:	697a      	ldr	r2, [r7, #20]
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004932:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004934:	69bb      	ldr	r3, [r7, #24]
}
 8004936:	4618      	mov	r0, r3
 8004938:	3724      	adds	r7, #36	; 0x24
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr
 8004942:	bf00      	nop
 8004944:	40021000 	.word	0x40021000
 8004948:	080085b0 	.word	0x080085b0
 800494c:	00f42400 	.word	0x00f42400
 8004950:	007a1200 	.word	0x007a1200

08004954 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004954:	b480      	push	{r7}
 8004956:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004958:	4b03      	ldr	r3, [pc, #12]	; (8004968 <HAL_RCC_GetHCLKFreq+0x14>)
 800495a:	681b      	ldr	r3, [r3, #0]
}
 800495c:	4618      	mov	r0, r3
 800495e:	46bd      	mov	sp, r7
 8004960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004964:	4770      	bx	lr
 8004966:	bf00      	nop
 8004968:	20000000 	.word	0x20000000

0800496c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004970:	f7ff fff0 	bl	8004954 <HAL_RCC_GetHCLKFreq>
 8004974:	4602      	mov	r2, r0
 8004976:	4b06      	ldr	r3, [pc, #24]	; (8004990 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	0a1b      	lsrs	r3, r3, #8
 800497c:	f003 0307 	and.w	r3, r3, #7
 8004980:	4904      	ldr	r1, [pc, #16]	; (8004994 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004982:	5ccb      	ldrb	r3, [r1, r3]
 8004984:	f003 031f 	and.w	r3, r3, #31
 8004988:	fa22 f303 	lsr.w	r3, r2, r3
}
 800498c:	4618      	mov	r0, r3
 800498e:	bd80      	pop	{r7, pc}
 8004990:	40021000 	.word	0x40021000
 8004994:	080085a8 	.word	0x080085a8

08004998 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800499c:	f7ff ffda 	bl	8004954 <HAL_RCC_GetHCLKFreq>
 80049a0:	4602      	mov	r2, r0
 80049a2:	4b06      	ldr	r3, [pc, #24]	; (80049bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	0adb      	lsrs	r3, r3, #11
 80049a8:	f003 0307 	and.w	r3, r3, #7
 80049ac:	4904      	ldr	r1, [pc, #16]	; (80049c0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80049ae:	5ccb      	ldrb	r3, [r1, r3]
 80049b0:	f003 031f 	and.w	r3, r3, #31
 80049b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	bd80      	pop	{r7, pc}
 80049bc:	40021000 	.word	0x40021000
 80049c0:	080085a8 	.word	0x080085a8

080049c4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b086      	sub	sp, #24
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80049cc:	2300      	movs	r3, #0
 80049ce:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80049d0:	4b27      	ldr	r3, [pc, #156]	; (8004a70 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80049d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d003      	beq.n	80049e4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80049dc:	f7ff f9ba 	bl	8003d54 <HAL_PWREx_GetVoltageRange>
 80049e0:	6178      	str	r0, [r7, #20]
 80049e2:	e014      	b.n	8004a0e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80049e4:	4b22      	ldr	r3, [pc, #136]	; (8004a70 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80049e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049e8:	4a21      	ldr	r2, [pc, #132]	; (8004a70 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80049ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049ee:	6593      	str	r3, [r2, #88]	; 0x58
 80049f0:	4b1f      	ldr	r3, [pc, #124]	; (8004a70 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80049f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049f8:	60fb      	str	r3, [r7, #12]
 80049fa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80049fc:	f7ff f9aa 	bl	8003d54 <HAL_PWREx_GetVoltageRange>
 8004a00:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004a02:	4b1b      	ldr	r3, [pc, #108]	; (8004a70 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004a04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a06:	4a1a      	ldr	r2, [pc, #104]	; (8004a70 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004a08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a0c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a14:	d10b      	bne.n	8004a2e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2b80      	cmp	r3, #128	; 0x80
 8004a1a:	d913      	bls.n	8004a44 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2ba0      	cmp	r3, #160	; 0xa0
 8004a20:	d902      	bls.n	8004a28 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004a22:	2302      	movs	r3, #2
 8004a24:	613b      	str	r3, [r7, #16]
 8004a26:	e00d      	b.n	8004a44 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004a28:	2301      	movs	r3, #1
 8004a2a:	613b      	str	r3, [r7, #16]
 8004a2c:	e00a      	b.n	8004a44 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2b7f      	cmp	r3, #127	; 0x7f
 8004a32:	d902      	bls.n	8004a3a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8004a34:	2302      	movs	r3, #2
 8004a36:	613b      	str	r3, [r7, #16]
 8004a38:	e004      	b.n	8004a44 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2b70      	cmp	r3, #112	; 0x70
 8004a3e:	d101      	bne.n	8004a44 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004a40:	2301      	movs	r3, #1
 8004a42:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004a44:	4b0b      	ldr	r3, [pc, #44]	; (8004a74 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f023 020f 	bic.w	r2, r3, #15
 8004a4c:	4909      	ldr	r1, [pc, #36]	; (8004a74 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	4313      	orrs	r3, r2
 8004a52:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004a54:	4b07      	ldr	r3, [pc, #28]	; (8004a74 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f003 030f 	and.w	r3, r3, #15
 8004a5c:	693a      	ldr	r2, [r7, #16]
 8004a5e:	429a      	cmp	r2, r3
 8004a60:	d001      	beq.n	8004a66 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	e000      	b.n	8004a68 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8004a66:	2300      	movs	r3, #0
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	3718      	adds	r7, #24
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd80      	pop	{r7, pc}
 8004a70:	40021000 	.word	0x40021000
 8004a74:	40022000 	.word	0x40022000

08004a78 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b087      	sub	sp, #28
 8004a7c:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004a7e:	4b2d      	ldr	r3, [pc, #180]	; (8004b34 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004a80:	68db      	ldr	r3, [r3, #12]
 8004a82:	f003 0303 	and.w	r3, r3, #3
 8004a86:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2b03      	cmp	r3, #3
 8004a8c:	d00b      	beq.n	8004aa6 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2b03      	cmp	r3, #3
 8004a92:	d825      	bhi.n	8004ae0 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2b01      	cmp	r3, #1
 8004a98:	d008      	beq.n	8004aac <RCC_GetSysClockFreqFromPLLSource+0x34>
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2b02      	cmp	r3, #2
 8004a9e:	d11f      	bne.n	8004ae0 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8004aa0:	4b25      	ldr	r3, [pc, #148]	; (8004b38 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004aa2:	613b      	str	r3, [r7, #16]
    break;
 8004aa4:	e01f      	b.n	8004ae6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8004aa6:	4b25      	ldr	r3, [pc, #148]	; (8004b3c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8004aa8:	613b      	str	r3, [r7, #16]
    break;
 8004aaa:	e01c      	b.n	8004ae6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004aac:	4b21      	ldr	r3, [pc, #132]	; (8004b34 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f003 0308 	and.w	r3, r3, #8
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d107      	bne.n	8004ac8 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004ab8:	4b1e      	ldr	r3, [pc, #120]	; (8004b34 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004aba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004abe:	0a1b      	lsrs	r3, r3, #8
 8004ac0:	f003 030f 	and.w	r3, r3, #15
 8004ac4:	617b      	str	r3, [r7, #20]
 8004ac6:	e005      	b.n	8004ad4 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004ac8:	4b1a      	ldr	r3, [pc, #104]	; (8004b34 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	091b      	lsrs	r3, r3, #4
 8004ace:	f003 030f 	and.w	r3, r3, #15
 8004ad2:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8004ad4:	4a1a      	ldr	r2, [pc, #104]	; (8004b40 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004adc:	613b      	str	r3, [r7, #16]
    break;
 8004ade:	e002      	b.n	8004ae6 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	613b      	str	r3, [r7, #16]
    break;
 8004ae4:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004ae6:	4b13      	ldr	r3, [pc, #76]	; (8004b34 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004ae8:	68db      	ldr	r3, [r3, #12]
 8004aea:	091b      	lsrs	r3, r3, #4
 8004aec:	f003 030f 	and.w	r3, r3, #15
 8004af0:	3301      	adds	r3, #1
 8004af2:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004af4:	4b0f      	ldr	r3, [pc, #60]	; (8004b34 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004af6:	68db      	ldr	r3, [r3, #12]
 8004af8:	0a1b      	lsrs	r3, r3, #8
 8004afa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004afe:	693a      	ldr	r2, [r7, #16]
 8004b00:	fb03 f202 	mul.w	r2, r3, r2
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b0a:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004b0c:	4b09      	ldr	r3, [pc, #36]	; (8004b34 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004b0e:	68db      	ldr	r3, [r3, #12]
 8004b10:	0e5b      	lsrs	r3, r3, #25
 8004b12:	f003 0303 	and.w	r3, r3, #3
 8004b16:	3301      	adds	r3, #1
 8004b18:	005b      	lsls	r3, r3, #1
 8004b1a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8004b1c:	693a      	ldr	r2, [r7, #16]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b24:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8004b26:	683b      	ldr	r3, [r7, #0]
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	371c      	adds	r7, #28
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b32:	4770      	bx	lr
 8004b34:	40021000 	.word	0x40021000
 8004b38:	00f42400 	.word	0x00f42400
 8004b3c:	007a1200 	.word	0x007a1200
 8004b40:	080085b0 	.word	0x080085b0

08004b44 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b086      	sub	sp, #24
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004b50:	2300      	movs	r3, #0
 8004b52:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d040      	beq.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b64:	2b80      	cmp	r3, #128	; 0x80
 8004b66:	d02a      	beq.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004b68:	2b80      	cmp	r3, #128	; 0x80
 8004b6a:	d825      	bhi.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004b6c:	2b60      	cmp	r3, #96	; 0x60
 8004b6e:	d026      	beq.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004b70:	2b60      	cmp	r3, #96	; 0x60
 8004b72:	d821      	bhi.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004b74:	2b40      	cmp	r3, #64	; 0x40
 8004b76:	d006      	beq.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8004b78:	2b40      	cmp	r3, #64	; 0x40
 8004b7a:	d81d      	bhi.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d009      	beq.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8004b80:	2b20      	cmp	r3, #32
 8004b82:	d010      	beq.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8004b84:	e018      	b.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004b86:	4b89      	ldr	r3, [pc, #548]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b88:	68db      	ldr	r3, [r3, #12]
 8004b8a:	4a88      	ldr	r2, [pc, #544]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b90:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004b92:	e015      	b.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	3304      	adds	r3, #4
 8004b98:	2100      	movs	r1, #0
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	f000 fb02 	bl	80051a4 <RCCEx_PLLSAI1_Config>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004ba4:	e00c      	b.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	3320      	adds	r3, #32
 8004baa:	2100      	movs	r1, #0
 8004bac:	4618      	mov	r0, r3
 8004bae:	f000 fbed 	bl	800538c <RCCEx_PLLSAI2_Config>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004bb6:	e003      	b.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	74fb      	strb	r3, [r7, #19]
      break;
 8004bbc:	e000      	b.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8004bbe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004bc0:	7cfb      	ldrb	r3, [r7, #19]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d10b      	bne.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004bc6:	4b79      	ldr	r3, [pc, #484]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004bc8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004bcc:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004bd4:	4975      	ldr	r1, [pc, #468]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004bdc:	e001      	b.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bde:	7cfb      	ldrb	r3, [r7, #19]
 8004be0:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d047      	beq.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bf2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bf6:	d030      	beq.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004bf8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bfc:	d82a      	bhi.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004bfe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c02:	d02a      	beq.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004c04:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c08:	d824      	bhi.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004c0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c0e:	d008      	beq.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004c10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c14:	d81e      	bhi.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d00a      	beq.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004c1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c1e:	d010      	beq.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004c20:	e018      	b.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004c22:	4b62      	ldr	r3, [pc, #392]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c24:	68db      	ldr	r3, [r3, #12]
 8004c26:	4a61      	ldr	r2, [pc, #388]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c2c:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004c2e:	e015      	b.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	3304      	adds	r3, #4
 8004c34:	2100      	movs	r1, #0
 8004c36:	4618      	mov	r0, r3
 8004c38:	f000 fab4 	bl	80051a4 <RCCEx_PLLSAI1_Config>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004c40:	e00c      	b.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	3320      	adds	r3, #32
 8004c46:	2100      	movs	r1, #0
 8004c48:	4618      	mov	r0, r3
 8004c4a:	f000 fb9f 	bl	800538c <RCCEx_PLLSAI2_Config>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004c52:	e003      	b.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c54:	2301      	movs	r3, #1
 8004c56:	74fb      	strb	r3, [r7, #19]
      break;
 8004c58:	e000      	b.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8004c5a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c5c:	7cfb      	ldrb	r3, [r7, #19]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d10b      	bne.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004c62:	4b52      	ldr	r3, [pc, #328]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c64:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004c68:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c70:	494e      	ldr	r1, [pc, #312]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c72:	4313      	orrs	r3, r2
 8004c74:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004c78:	e001      	b.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c7a:	7cfb      	ldrb	r3, [r7, #19]
 8004c7c:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	f000 809f 	beq.w	8004dca <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004c90:	4b46      	ldr	r3, [pc, #280]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d101      	bne.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	e000      	b.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d00d      	beq.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ca6:	4b41      	ldr	r3, [pc, #260]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004ca8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004caa:	4a40      	ldr	r2, [pc, #256]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004cac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cb0:	6593      	str	r3, [r2, #88]	; 0x58
 8004cb2:	4b3e      	ldr	r3, [pc, #248]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004cb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cba:	60bb      	str	r3, [r7, #8]
 8004cbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004cc2:	4b3b      	ldr	r3, [pc, #236]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a3a      	ldr	r2, [pc, #232]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004cc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ccc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004cce:	f7fd fb9b 	bl	8002408 <HAL_GetTick>
 8004cd2:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004cd4:	e009      	b.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cd6:	f7fd fb97 	bl	8002408 <HAL_GetTick>
 8004cda:	4602      	mov	r2, r0
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	1ad3      	subs	r3, r2, r3
 8004ce0:	2b02      	cmp	r3, #2
 8004ce2:	d902      	bls.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8004ce4:	2303      	movs	r3, #3
 8004ce6:	74fb      	strb	r3, [r7, #19]
        break;
 8004ce8:	e005      	b.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004cea:	4b31      	ldr	r3, [pc, #196]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d0ef      	beq.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8004cf6:	7cfb      	ldrb	r3, [r7, #19]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d15b      	bne.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004cfc:	4b2b      	ldr	r3, [pc, #172]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d06:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d01f      	beq.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d14:	697a      	ldr	r2, [r7, #20]
 8004d16:	429a      	cmp	r2, r3
 8004d18:	d019      	beq.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004d1a:	4b24      	ldr	r3, [pc, #144]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d24:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004d26:	4b21      	ldr	r3, [pc, #132]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d2c:	4a1f      	ldr	r2, [pc, #124]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d32:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004d36:	4b1d      	ldr	r3, [pc, #116]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d3c:	4a1b      	ldr	r2, [pc, #108]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d42:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004d46:	4a19      	ldr	r2, [pc, #100]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	f003 0301 	and.w	r3, r3, #1
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d016      	beq.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d58:	f7fd fb56 	bl	8002408 <HAL_GetTick>
 8004d5c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d5e:	e00b      	b.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d60:	f7fd fb52 	bl	8002408 <HAL_GetTick>
 8004d64:	4602      	mov	r2, r0
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	1ad3      	subs	r3, r2, r3
 8004d6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d902      	bls.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8004d72:	2303      	movs	r3, #3
 8004d74:	74fb      	strb	r3, [r7, #19]
            break;
 8004d76:	e006      	b.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d78:	4b0c      	ldr	r3, [pc, #48]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d7e:	f003 0302 	and.w	r3, r3, #2
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d0ec      	beq.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8004d86:	7cfb      	ldrb	r3, [r7, #19]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d10c      	bne.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d8c:	4b07      	ldr	r3, [pc, #28]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d92:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d9c:	4903      	ldr	r1, [pc, #12]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004da4:	e008      	b.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004da6:	7cfb      	ldrb	r3, [r7, #19]
 8004da8:	74bb      	strb	r3, [r7, #18]
 8004daa:	e005      	b.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8004dac:	40021000 	.word	0x40021000
 8004db0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004db4:	7cfb      	ldrb	r3, [r7, #19]
 8004db6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004db8:	7c7b      	ldrb	r3, [r7, #17]
 8004dba:	2b01      	cmp	r3, #1
 8004dbc:	d105      	bne.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004dbe:	4ba0      	ldr	r3, [pc, #640]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004dc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dc2:	4a9f      	ldr	r2, [pc, #636]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004dc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004dc8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f003 0301 	and.w	r3, r3, #1
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d00a      	beq.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004dd6:	4b9a      	ldr	r3, [pc, #616]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004dd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ddc:	f023 0203 	bic.w	r2, r3, #3
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004de4:	4996      	ldr	r1, [pc, #600]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004de6:	4313      	orrs	r3, r2
 8004de8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f003 0302 	and.w	r3, r3, #2
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d00a      	beq.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004df8:	4b91      	ldr	r3, [pc, #580]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dfe:	f023 020c 	bic.w	r2, r3, #12
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e06:	498e      	ldr	r1, [pc, #568]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f003 0304 	and.w	r3, r3, #4
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d00a      	beq.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004e1a:	4b89      	ldr	r3, [pc, #548]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e20:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e28:	4985      	ldr	r1, [pc, #532]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f003 0308 	and.w	r3, r3, #8
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d00a      	beq.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004e3c:	4b80      	ldr	r3, [pc, #512]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e42:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e4a:	497d      	ldr	r1, [pc, #500]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f003 0310 	and.w	r3, r3, #16
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d00a      	beq.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004e5e:	4b78      	ldr	r3, [pc, #480]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e64:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e6c:	4974      	ldr	r1, [pc, #464]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f003 0320 	and.w	r3, r3, #32
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d00a      	beq.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004e80:	4b6f      	ldr	r3, [pc, #444]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e86:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e8e:	496c      	ldr	r1, [pc, #432]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e90:	4313      	orrs	r3, r2
 8004e92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d00a      	beq.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004ea2:	4b67      	ldr	r3, [pc, #412]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ea4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ea8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004eb0:	4963      	ldr	r1, [pc, #396]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d00a      	beq.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004ec4:	4b5e      	ldr	r3, [pc, #376]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ed2:	495b      	ldr	r1, [pc, #364]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d00a      	beq.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004ee6:	4b56      	ldr	r3, [pc, #344]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ee8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eec:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ef4:	4952      	ldr	r1, [pc, #328]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d00a      	beq.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004f08:	4b4d      	ldr	r3, [pc, #308]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f0e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f16:	494a      	ldr	r1, [pc, #296]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d00a      	beq.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004f2a:	4b45      	ldr	r3, [pc, #276]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f30:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f38:	4941      	ldr	r1, [pc, #260]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d00a      	beq.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004f4c:	4b3c      	ldr	r3, [pc, #240]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f4e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004f52:	f023 0203 	bic.w	r2, r3, #3
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f5a:	4939      	ldr	r1, [pc, #228]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d028      	beq.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004f6e:	4b34      	ldr	r3, [pc, #208]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f74:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f7c:	4930      	ldr	r1, [pc, #192]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f88:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f8c:	d106      	bne.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f8e:	4b2c      	ldr	r3, [pc, #176]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f90:	68db      	ldr	r3, [r3, #12]
 8004f92:	4a2b      	ldr	r2, [pc, #172]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f94:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f98:	60d3      	str	r3, [r2, #12]
 8004f9a:	e011      	b.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fa0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004fa4:	d10c      	bne.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	3304      	adds	r3, #4
 8004faa:	2101      	movs	r1, #1
 8004fac:	4618      	mov	r0, r3
 8004fae:	f000 f8f9 	bl	80051a4 <RCCEx_PLLSAI1_Config>
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004fb6:	7cfb      	ldrb	r3, [r7, #19]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d001      	beq.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8004fbc:	7cfb      	ldrb	r3, [r7, #19]
 8004fbe:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d04d      	beq.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004fd0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004fd4:	d108      	bne.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8004fd6:	4b1a      	ldr	r3, [pc, #104]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004fd8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004fdc:	4a18      	ldr	r2, [pc, #96]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004fde:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004fe2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004fe6:	e012      	b.n	800500e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004fe8:	4b15      	ldr	r3, [pc, #84]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004fea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004fee:	4a14      	ldr	r2, [pc, #80]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ff0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ff4:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004ff8:	4b11      	ldr	r3, [pc, #68]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ffe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005006:	490e      	ldr	r1, [pc, #56]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005008:	4313      	orrs	r3, r2
 800500a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005012:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005016:	d106      	bne.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005018:	4b09      	ldr	r3, [pc, #36]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800501a:	68db      	ldr	r3, [r3, #12]
 800501c:	4a08      	ldr	r2, [pc, #32]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800501e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005022:	60d3      	str	r3, [r2, #12]
 8005024:	e020      	b.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800502a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800502e:	d109      	bne.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005030:	4b03      	ldr	r3, [pc, #12]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005032:	68db      	ldr	r3, [r3, #12]
 8005034:	4a02      	ldr	r2, [pc, #8]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005036:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800503a:	60d3      	str	r3, [r2, #12]
 800503c:	e014      	b.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800503e:	bf00      	nop
 8005040:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005048:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800504c:	d10c      	bne.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	3304      	adds	r3, #4
 8005052:	2101      	movs	r1, #1
 8005054:	4618      	mov	r0, r3
 8005056:	f000 f8a5 	bl	80051a4 <RCCEx_PLLSAI1_Config>
 800505a:	4603      	mov	r3, r0
 800505c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800505e:	7cfb      	ldrb	r3, [r7, #19]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d001      	beq.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8005064:	7cfb      	ldrb	r3, [r7, #19]
 8005066:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005070:	2b00      	cmp	r3, #0
 8005072:	d028      	beq.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005074:	4b4a      	ldr	r3, [pc, #296]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005076:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800507a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005082:	4947      	ldr	r1, [pc, #284]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005084:	4313      	orrs	r3, r2
 8005086:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800508e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005092:	d106      	bne.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005094:	4b42      	ldr	r3, [pc, #264]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005096:	68db      	ldr	r3, [r3, #12]
 8005098:	4a41      	ldr	r2, [pc, #260]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800509a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800509e:	60d3      	str	r3, [r2, #12]
 80050a0:	e011      	b.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80050a6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80050aa:	d10c      	bne.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	3304      	adds	r3, #4
 80050b0:	2101      	movs	r1, #1
 80050b2:	4618      	mov	r0, r3
 80050b4:	f000 f876 	bl	80051a4 <RCCEx_PLLSAI1_Config>
 80050b8:	4603      	mov	r3, r0
 80050ba:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80050bc:	7cfb      	ldrb	r3, [r7, #19]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d001      	beq.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80050c2:	7cfb      	ldrb	r3, [r7, #19]
 80050c4:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d01e      	beq.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80050d2:	4b33      	ldr	r3, [pc, #204]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80050d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050d8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80050e2:	492f      	ldr	r1, [pc, #188]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80050e4:	4313      	orrs	r3, r2
 80050e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80050f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80050f4:	d10c      	bne.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	3304      	adds	r3, #4
 80050fa:	2102      	movs	r1, #2
 80050fc:	4618      	mov	r0, r3
 80050fe:	f000 f851 	bl	80051a4 <RCCEx_PLLSAI1_Config>
 8005102:	4603      	mov	r3, r0
 8005104:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005106:	7cfb      	ldrb	r3, [r7, #19]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d001      	beq.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 800510c:	7cfb      	ldrb	r3, [r7, #19]
 800510e:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005118:	2b00      	cmp	r3, #0
 800511a:	d00b      	beq.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800511c:	4b20      	ldr	r3, [pc, #128]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800511e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005122:	f023 0204 	bic.w	r2, r3, #4
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800512c:	491c      	ldr	r1, [pc, #112]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800512e:	4313      	orrs	r3, r2
 8005130:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800513c:	2b00      	cmp	r3, #0
 800513e:	d00b      	beq.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005140:	4b17      	ldr	r3, [pc, #92]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005142:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005146:	f023 0218 	bic.w	r2, r3, #24
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005150:	4913      	ldr	r1, [pc, #76]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005152:	4313      	orrs	r3, r2
 8005154:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005160:	2b00      	cmp	r3, #0
 8005162:	d017      	beq.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005164:	4b0e      	ldr	r3, [pc, #56]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005166:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800516a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005174:	490a      	ldr	r1, [pc, #40]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005176:	4313      	orrs	r3, r2
 8005178:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005182:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005186:	d105      	bne.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005188:	4b05      	ldr	r3, [pc, #20]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800518a:	68db      	ldr	r3, [r3, #12]
 800518c:	4a04      	ldr	r2, [pc, #16]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800518e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005192:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005194:	7cbb      	ldrb	r3, [r7, #18]
}
 8005196:	4618      	mov	r0, r3
 8005198:	3718      	adds	r7, #24
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}
 800519e:	bf00      	nop
 80051a0:	40021000 	.word	0x40021000

080051a4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b084      	sub	sp, #16
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
 80051ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80051ae:	2300      	movs	r3, #0
 80051b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80051b2:	4b72      	ldr	r3, [pc, #456]	; (800537c <RCCEx_PLLSAI1_Config+0x1d8>)
 80051b4:	68db      	ldr	r3, [r3, #12]
 80051b6:	f003 0303 	and.w	r3, r3, #3
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d00e      	beq.n	80051dc <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80051be:	4b6f      	ldr	r3, [pc, #444]	; (800537c <RCCEx_PLLSAI1_Config+0x1d8>)
 80051c0:	68db      	ldr	r3, [r3, #12]
 80051c2:	f003 0203 	and.w	r2, r3, #3
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	429a      	cmp	r2, r3
 80051cc:	d103      	bne.n	80051d6 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
       ||
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d142      	bne.n	800525c <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80051d6:	2301      	movs	r3, #1
 80051d8:	73fb      	strb	r3, [r7, #15]
 80051da:	e03f      	b.n	800525c <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	2b03      	cmp	r3, #3
 80051e2:	d018      	beq.n	8005216 <RCCEx_PLLSAI1_Config+0x72>
 80051e4:	2b03      	cmp	r3, #3
 80051e6:	d825      	bhi.n	8005234 <RCCEx_PLLSAI1_Config+0x90>
 80051e8:	2b01      	cmp	r3, #1
 80051ea:	d002      	beq.n	80051f2 <RCCEx_PLLSAI1_Config+0x4e>
 80051ec:	2b02      	cmp	r3, #2
 80051ee:	d009      	beq.n	8005204 <RCCEx_PLLSAI1_Config+0x60>
 80051f0:	e020      	b.n	8005234 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80051f2:	4b62      	ldr	r3, [pc, #392]	; (800537c <RCCEx_PLLSAI1_Config+0x1d8>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f003 0302 	and.w	r3, r3, #2
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d11d      	bne.n	800523a <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005202:	e01a      	b.n	800523a <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005204:	4b5d      	ldr	r3, [pc, #372]	; (800537c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800520c:	2b00      	cmp	r3, #0
 800520e:	d116      	bne.n	800523e <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8005210:	2301      	movs	r3, #1
 8005212:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005214:	e013      	b.n	800523e <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005216:	4b59      	ldr	r3, [pc, #356]	; (800537c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800521e:	2b00      	cmp	r3, #0
 8005220:	d10f      	bne.n	8005242 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005222:	4b56      	ldr	r3, [pc, #344]	; (800537c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800522a:	2b00      	cmp	r3, #0
 800522c:	d109      	bne.n	8005242 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800522e:	2301      	movs	r3, #1
 8005230:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005232:	e006      	b.n	8005242 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005234:	2301      	movs	r3, #1
 8005236:	73fb      	strb	r3, [r7, #15]
      break;
 8005238:	e004      	b.n	8005244 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800523a:	bf00      	nop
 800523c:	e002      	b.n	8005244 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800523e:	bf00      	nop
 8005240:	e000      	b.n	8005244 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005242:	bf00      	nop
    }

    if(status == HAL_OK)
 8005244:	7bfb      	ldrb	r3, [r7, #15]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d108      	bne.n	800525c <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800524a:	4b4c      	ldr	r3, [pc, #304]	; (800537c <RCCEx_PLLSAI1_Config+0x1d8>)
 800524c:	68db      	ldr	r3, [r3, #12]
 800524e:	f023 0203 	bic.w	r2, r3, #3
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4949      	ldr	r1, [pc, #292]	; (800537c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005258:	4313      	orrs	r3, r2
 800525a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800525c:	7bfb      	ldrb	r3, [r7, #15]
 800525e:	2b00      	cmp	r3, #0
 8005260:	f040 8086 	bne.w	8005370 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005264:	4b45      	ldr	r3, [pc, #276]	; (800537c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a44      	ldr	r2, [pc, #272]	; (800537c <RCCEx_PLLSAI1_Config+0x1d8>)
 800526a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800526e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005270:	f7fd f8ca 	bl	8002408 <HAL_GetTick>
 8005274:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005276:	e009      	b.n	800528c <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005278:	f7fd f8c6 	bl	8002408 <HAL_GetTick>
 800527c:	4602      	mov	r2, r0
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	1ad3      	subs	r3, r2, r3
 8005282:	2b02      	cmp	r3, #2
 8005284:	d902      	bls.n	800528c <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005286:	2303      	movs	r3, #3
 8005288:	73fb      	strb	r3, [r7, #15]
        break;
 800528a:	e005      	b.n	8005298 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800528c:	4b3b      	ldr	r3, [pc, #236]	; (800537c <RCCEx_PLLSAI1_Config+0x1d8>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005294:	2b00      	cmp	r3, #0
 8005296:	d1ef      	bne.n	8005278 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005298:	7bfb      	ldrb	r3, [r7, #15]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d168      	bne.n	8005370 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d113      	bne.n	80052cc <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80052a4:	4b35      	ldr	r3, [pc, #212]	; (800537c <RCCEx_PLLSAI1_Config+0x1d8>)
 80052a6:	691a      	ldr	r2, [r3, #16]
 80052a8:	4b35      	ldr	r3, [pc, #212]	; (8005380 <RCCEx_PLLSAI1_Config+0x1dc>)
 80052aa:	4013      	ands	r3, r2
 80052ac:	687a      	ldr	r2, [r7, #4]
 80052ae:	6892      	ldr	r2, [r2, #8]
 80052b0:	0211      	lsls	r1, r2, #8
 80052b2:	687a      	ldr	r2, [r7, #4]
 80052b4:	68d2      	ldr	r2, [r2, #12]
 80052b6:	06d2      	lsls	r2, r2, #27
 80052b8:	4311      	orrs	r1, r2
 80052ba:	687a      	ldr	r2, [r7, #4]
 80052bc:	6852      	ldr	r2, [r2, #4]
 80052be:	3a01      	subs	r2, #1
 80052c0:	0112      	lsls	r2, r2, #4
 80052c2:	430a      	orrs	r2, r1
 80052c4:	492d      	ldr	r1, [pc, #180]	; (800537c <RCCEx_PLLSAI1_Config+0x1d8>)
 80052c6:	4313      	orrs	r3, r2
 80052c8:	610b      	str	r3, [r1, #16]
 80052ca:	e02d      	b.n	8005328 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	2b01      	cmp	r3, #1
 80052d0:	d115      	bne.n	80052fe <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80052d2:	4b2a      	ldr	r3, [pc, #168]	; (800537c <RCCEx_PLLSAI1_Config+0x1d8>)
 80052d4:	691a      	ldr	r2, [r3, #16]
 80052d6:	4b2b      	ldr	r3, [pc, #172]	; (8005384 <RCCEx_PLLSAI1_Config+0x1e0>)
 80052d8:	4013      	ands	r3, r2
 80052da:	687a      	ldr	r2, [r7, #4]
 80052dc:	6892      	ldr	r2, [r2, #8]
 80052de:	0211      	lsls	r1, r2, #8
 80052e0:	687a      	ldr	r2, [r7, #4]
 80052e2:	6912      	ldr	r2, [r2, #16]
 80052e4:	0852      	lsrs	r2, r2, #1
 80052e6:	3a01      	subs	r2, #1
 80052e8:	0552      	lsls	r2, r2, #21
 80052ea:	4311      	orrs	r1, r2
 80052ec:	687a      	ldr	r2, [r7, #4]
 80052ee:	6852      	ldr	r2, [r2, #4]
 80052f0:	3a01      	subs	r2, #1
 80052f2:	0112      	lsls	r2, r2, #4
 80052f4:	430a      	orrs	r2, r1
 80052f6:	4921      	ldr	r1, [pc, #132]	; (800537c <RCCEx_PLLSAI1_Config+0x1d8>)
 80052f8:	4313      	orrs	r3, r2
 80052fa:	610b      	str	r3, [r1, #16]
 80052fc:	e014      	b.n	8005328 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80052fe:	4b1f      	ldr	r3, [pc, #124]	; (800537c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005300:	691a      	ldr	r2, [r3, #16]
 8005302:	4b21      	ldr	r3, [pc, #132]	; (8005388 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005304:	4013      	ands	r3, r2
 8005306:	687a      	ldr	r2, [r7, #4]
 8005308:	6892      	ldr	r2, [r2, #8]
 800530a:	0211      	lsls	r1, r2, #8
 800530c:	687a      	ldr	r2, [r7, #4]
 800530e:	6952      	ldr	r2, [r2, #20]
 8005310:	0852      	lsrs	r2, r2, #1
 8005312:	3a01      	subs	r2, #1
 8005314:	0652      	lsls	r2, r2, #25
 8005316:	4311      	orrs	r1, r2
 8005318:	687a      	ldr	r2, [r7, #4]
 800531a:	6852      	ldr	r2, [r2, #4]
 800531c:	3a01      	subs	r2, #1
 800531e:	0112      	lsls	r2, r2, #4
 8005320:	430a      	orrs	r2, r1
 8005322:	4916      	ldr	r1, [pc, #88]	; (800537c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005324:	4313      	orrs	r3, r2
 8005326:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005328:	4b14      	ldr	r3, [pc, #80]	; (800537c <RCCEx_PLLSAI1_Config+0x1d8>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a13      	ldr	r2, [pc, #76]	; (800537c <RCCEx_PLLSAI1_Config+0x1d8>)
 800532e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005332:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005334:	f7fd f868 	bl	8002408 <HAL_GetTick>
 8005338:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800533a:	e009      	b.n	8005350 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800533c:	f7fd f864 	bl	8002408 <HAL_GetTick>
 8005340:	4602      	mov	r2, r0
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	1ad3      	subs	r3, r2, r3
 8005346:	2b02      	cmp	r3, #2
 8005348:	d902      	bls.n	8005350 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800534a:	2303      	movs	r3, #3
 800534c:	73fb      	strb	r3, [r7, #15]
          break;
 800534e:	e005      	b.n	800535c <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005350:	4b0a      	ldr	r3, [pc, #40]	; (800537c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005358:	2b00      	cmp	r3, #0
 800535a:	d0ef      	beq.n	800533c <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800535c:	7bfb      	ldrb	r3, [r7, #15]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d106      	bne.n	8005370 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005362:	4b06      	ldr	r3, [pc, #24]	; (800537c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005364:	691a      	ldr	r2, [r3, #16]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	699b      	ldr	r3, [r3, #24]
 800536a:	4904      	ldr	r1, [pc, #16]	; (800537c <RCCEx_PLLSAI1_Config+0x1d8>)
 800536c:	4313      	orrs	r3, r2
 800536e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005370:	7bfb      	ldrb	r3, [r7, #15]
}
 8005372:	4618      	mov	r0, r3
 8005374:	3710      	adds	r7, #16
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}
 800537a:	bf00      	nop
 800537c:	40021000 	.word	0x40021000
 8005380:	07ff800f 	.word	0x07ff800f
 8005384:	ff9f800f 	.word	0xff9f800f
 8005388:	f9ff800f 	.word	0xf9ff800f

0800538c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b084      	sub	sp, #16
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
 8005394:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005396:	2300      	movs	r3, #0
 8005398:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800539a:	4b72      	ldr	r3, [pc, #456]	; (8005564 <RCCEx_PLLSAI2_Config+0x1d8>)
 800539c:	68db      	ldr	r3, [r3, #12]
 800539e:	f003 0303 	and.w	r3, r3, #3
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d00e      	beq.n	80053c4 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80053a6:	4b6f      	ldr	r3, [pc, #444]	; (8005564 <RCCEx_PLLSAI2_Config+0x1d8>)
 80053a8:	68db      	ldr	r3, [r3, #12]
 80053aa:	f003 0203 	and.w	r2, r3, #3
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	429a      	cmp	r2, r3
 80053b4:	d103      	bne.n	80053be <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
       ||
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d142      	bne.n	8005444 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	73fb      	strb	r3, [r7, #15]
 80053c2:	e03f      	b.n	8005444 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	2b03      	cmp	r3, #3
 80053ca:	d018      	beq.n	80053fe <RCCEx_PLLSAI2_Config+0x72>
 80053cc:	2b03      	cmp	r3, #3
 80053ce:	d825      	bhi.n	800541c <RCCEx_PLLSAI2_Config+0x90>
 80053d0:	2b01      	cmp	r3, #1
 80053d2:	d002      	beq.n	80053da <RCCEx_PLLSAI2_Config+0x4e>
 80053d4:	2b02      	cmp	r3, #2
 80053d6:	d009      	beq.n	80053ec <RCCEx_PLLSAI2_Config+0x60>
 80053d8:	e020      	b.n	800541c <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80053da:	4b62      	ldr	r3, [pc, #392]	; (8005564 <RCCEx_PLLSAI2_Config+0x1d8>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f003 0302 	and.w	r3, r3, #2
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d11d      	bne.n	8005422 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80053e6:	2301      	movs	r3, #1
 80053e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80053ea:	e01a      	b.n	8005422 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80053ec:	4b5d      	ldr	r3, [pc, #372]	; (8005564 <RCCEx_PLLSAI2_Config+0x1d8>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d116      	bne.n	8005426 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80053f8:	2301      	movs	r3, #1
 80053fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80053fc:	e013      	b.n	8005426 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80053fe:	4b59      	ldr	r3, [pc, #356]	; (8005564 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005406:	2b00      	cmp	r3, #0
 8005408:	d10f      	bne.n	800542a <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800540a:	4b56      	ldr	r3, [pc, #344]	; (8005564 <RCCEx_PLLSAI2_Config+0x1d8>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005412:	2b00      	cmp	r3, #0
 8005414:	d109      	bne.n	800542a <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8005416:	2301      	movs	r3, #1
 8005418:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800541a:	e006      	b.n	800542a <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 800541c:	2301      	movs	r3, #1
 800541e:	73fb      	strb	r3, [r7, #15]
      break;
 8005420:	e004      	b.n	800542c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005422:	bf00      	nop
 8005424:	e002      	b.n	800542c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005426:	bf00      	nop
 8005428:	e000      	b.n	800542c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800542a:	bf00      	nop
    }

    if(status == HAL_OK)
 800542c:	7bfb      	ldrb	r3, [r7, #15]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d108      	bne.n	8005444 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8005432:	4b4c      	ldr	r3, [pc, #304]	; (8005564 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005434:	68db      	ldr	r3, [r3, #12]
 8005436:	f023 0203 	bic.w	r2, r3, #3
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4949      	ldr	r1, [pc, #292]	; (8005564 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005440:	4313      	orrs	r3, r2
 8005442:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005444:	7bfb      	ldrb	r3, [r7, #15]
 8005446:	2b00      	cmp	r3, #0
 8005448:	f040 8086 	bne.w	8005558 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800544c:	4b45      	ldr	r3, [pc, #276]	; (8005564 <RCCEx_PLLSAI2_Config+0x1d8>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a44      	ldr	r2, [pc, #272]	; (8005564 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005452:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005456:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005458:	f7fc ffd6 	bl	8002408 <HAL_GetTick>
 800545c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800545e:	e009      	b.n	8005474 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005460:	f7fc ffd2 	bl	8002408 <HAL_GetTick>
 8005464:	4602      	mov	r2, r0
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	1ad3      	subs	r3, r2, r3
 800546a:	2b02      	cmp	r3, #2
 800546c:	d902      	bls.n	8005474 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800546e:	2303      	movs	r3, #3
 8005470:	73fb      	strb	r3, [r7, #15]
        break;
 8005472:	e005      	b.n	8005480 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005474:	4b3b      	ldr	r3, [pc, #236]	; (8005564 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800547c:	2b00      	cmp	r3, #0
 800547e:	d1ef      	bne.n	8005460 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005480:	7bfb      	ldrb	r3, [r7, #15]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d168      	bne.n	8005558 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d113      	bne.n	80054b4 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800548c:	4b35      	ldr	r3, [pc, #212]	; (8005564 <RCCEx_PLLSAI2_Config+0x1d8>)
 800548e:	695a      	ldr	r2, [r3, #20]
 8005490:	4b35      	ldr	r3, [pc, #212]	; (8005568 <RCCEx_PLLSAI2_Config+0x1dc>)
 8005492:	4013      	ands	r3, r2
 8005494:	687a      	ldr	r2, [r7, #4]
 8005496:	6892      	ldr	r2, [r2, #8]
 8005498:	0211      	lsls	r1, r2, #8
 800549a:	687a      	ldr	r2, [r7, #4]
 800549c:	68d2      	ldr	r2, [r2, #12]
 800549e:	06d2      	lsls	r2, r2, #27
 80054a0:	4311      	orrs	r1, r2
 80054a2:	687a      	ldr	r2, [r7, #4]
 80054a4:	6852      	ldr	r2, [r2, #4]
 80054a6:	3a01      	subs	r2, #1
 80054a8:	0112      	lsls	r2, r2, #4
 80054aa:	430a      	orrs	r2, r1
 80054ac:	492d      	ldr	r1, [pc, #180]	; (8005564 <RCCEx_PLLSAI2_Config+0x1d8>)
 80054ae:	4313      	orrs	r3, r2
 80054b0:	614b      	str	r3, [r1, #20]
 80054b2:	e02d      	b.n	8005510 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	2b01      	cmp	r3, #1
 80054b8:	d115      	bne.n	80054e6 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80054ba:	4b2a      	ldr	r3, [pc, #168]	; (8005564 <RCCEx_PLLSAI2_Config+0x1d8>)
 80054bc:	695a      	ldr	r2, [r3, #20]
 80054be:	4b2b      	ldr	r3, [pc, #172]	; (800556c <RCCEx_PLLSAI2_Config+0x1e0>)
 80054c0:	4013      	ands	r3, r2
 80054c2:	687a      	ldr	r2, [r7, #4]
 80054c4:	6892      	ldr	r2, [r2, #8]
 80054c6:	0211      	lsls	r1, r2, #8
 80054c8:	687a      	ldr	r2, [r7, #4]
 80054ca:	6912      	ldr	r2, [r2, #16]
 80054cc:	0852      	lsrs	r2, r2, #1
 80054ce:	3a01      	subs	r2, #1
 80054d0:	0552      	lsls	r2, r2, #21
 80054d2:	4311      	orrs	r1, r2
 80054d4:	687a      	ldr	r2, [r7, #4]
 80054d6:	6852      	ldr	r2, [r2, #4]
 80054d8:	3a01      	subs	r2, #1
 80054da:	0112      	lsls	r2, r2, #4
 80054dc:	430a      	orrs	r2, r1
 80054de:	4921      	ldr	r1, [pc, #132]	; (8005564 <RCCEx_PLLSAI2_Config+0x1d8>)
 80054e0:	4313      	orrs	r3, r2
 80054e2:	614b      	str	r3, [r1, #20]
 80054e4:	e014      	b.n	8005510 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80054e6:	4b1f      	ldr	r3, [pc, #124]	; (8005564 <RCCEx_PLLSAI2_Config+0x1d8>)
 80054e8:	695a      	ldr	r2, [r3, #20]
 80054ea:	4b21      	ldr	r3, [pc, #132]	; (8005570 <RCCEx_PLLSAI2_Config+0x1e4>)
 80054ec:	4013      	ands	r3, r2
 80054ee:	687a      	ldr	r2, [r7, #4]
 80054f0:	6892      	ldr	r2, [r2, #8]
 80054f2:	0211      	lsls	r1, r2, #8
 80054f4:	687a      	ldr	r2, [r7, #4]
 80054f6:	6952      	ldr	r2, [r2, #20]
 80054f8:	0852      	lsrs	r2, r2, #1
 80054fa:	3a01      	subs	r2, #1
 80054fc:	0652      	lsls	r2, r2, #25
 80054fe:	4311      	orrs	r1, r2
 8005500:	687a      	ldr	r2, [r7, #4]
 8005502:	6852      	ldr	r2, [r2, #4]
 8005504:	3a01      	subs	r2, #1
 8005506:	0112      	lsls	r2, r2, #4
 8005508:	430a      	orrs	r2, r1
 800550a:	4916      	ldr	r1, [pc, #88]	; (8005564 <RCCEx_PLLSAI2_Config+0x1d8>)
 800550c:	4313      	orrs	r3, r2
 800550e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005510:	4b14      	ldr	r3, [pc, #80]	; (8005564 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a13      	ldr	r2, [pc, #76]	; (8005564 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005516:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800551a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800551c:	f7fc ff74 	bl	8002408 <HAL_GetTick>
 8005520:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005522:	e009      	b.n	8005538 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005524:	f7fc ff70 	bl	8002408 <HAL_GetTick>
 8005528:	4602      	mov	r2, r0
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	1ad3      	subs	r3, r2, r3
 800552e:	2b02      	cmp	r3, #2
 8005530:	d902      	bls.n	8005538 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005532:	2303      	movs	r3, #3
 8005534:	73fb      	strb	r3, [r7, #15]
          break;
 8005536:	e005      	b.n	8005544 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005538:	4b0a      	ldr	r3, [pc, #40]	; (8005564 <RCCEx_PLLSAI2_Config+0x1d8>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005540:	2b00      	cmp	r3, #0
 8005542:	d0ef      	beq.n	8005524 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005544:	7bfb      	ldrb	r3, [r7, #15]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d106      	bne.n	8005558 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800554a:	4b06      	ldr	r3, [pc, #24]	; (8005564 <RCCEx_PLLSAI2_Config+0x1d8>)
 800554c:	695a      	ldr	r2, [r3, #20]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	699b      	ldr	r3, [r3, #24]
 8005552:	4904      	ldr	r1, [pc, #16]	; (8005564 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005554:	4313      	orrs	r3, r2
 8005556:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005558:	7bfb      	ldrb	r3, [r7, #15]
}
 800555a:	4618      	mov	r0, r3
 800555c:	3710      	adds	r7, #16
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}
 8005562:	bf00      	nop
 8005564:	40021000 	.word	0x40021000
 8005568:	07ff800f 	.word	0x07ff800f
 800556c:	ff9f800f 	.word	0xff9f800f
 8005570:	f9ff800f 	.word	0xf9ff800f

08005574 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b088      	sub	sp, #32
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	689b      	ldr	r3, [r3, #8]
 800558a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800558c:	69bb      	ldr	r3, [r7, #24]
 800558e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005592:	2b00      	cmp	r3, #0
 8005594:	d10e      	bne.n	80055b4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005596:	69bb      	ldr	r3, [r7, #24]
 8005598:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800559c:	2b00      	cmp	r3, #0
 800559e:	d009      	beq.n	80055b4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80055a0:	69fb      	ldr	r3, [r7, #28]
 80055a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d004      	beq.n	80055b4 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	4798      	blx	r3
    return;
 80055b2:	e0ce      	b.n	8005752 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80055b4:	69bb      	ldr	r3, [r7, #24]
 80055b6:	f003 0302 	and.w	r3, r3, #2
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d009      	beq.n	80055d2 <HAL_SPI_IRQHandler+0x5e>
 80055be:	69fb      	ldr	r3, [r7, #28]
 80055c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d004      	beq.n	80055d2 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055cc:	6878      	ldr	r0, [r7, #4]
 80055ce:	4798      	blx	r3
    return;
 80055d0:	e0bf      	b.n	8005752 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80055d2:	69bb      	ldr	r3, [r7, #24]
 80055d4:	f003 0320 	and.w	r3, r3, #32
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d10a      	bne.n	80055f2 <HAL_SPI_IRQHandler+0x7e>
 80055dc:	69bb      	ldr	r3, [r7, #24]
 80055de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d105      	bne.n	80055f2 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80055e6:	69bb      	ldr	r3, [r7, #24]
 80055e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	f000 80b0 	beq.w	8005752 <HAL_SPI_IRQHandler+0x1de>
 80055f2:	69fb      	ldr	r3, [r7, #28]
 80055f4:	f003 0320 	and.w	r3, r3, #32
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	f000 80aa 	beq.w	8005752 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80055fe:	69bb      	ldr	r3, [r7, #24]
 8005600:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005604:	2b00      	cmp	r3, #0
 8005606:	d023      	beq.n	8005650 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800560e:	b2db      	uxtb	r3, r3
 8005610:	2b03      	cmp	r3, #3
 8005612:	d011      	beq.n	8005638 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005618:	f043 0204 	orr.w	r2, r3, #4
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005620:	2300      	movs	r3, #0
 8005622:	617b      	str	r3, [r7, #20]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	68db      	ldr	r3, [r3, #12]
 800562a:	617b      	str	r3, [r7, #20]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	689b      	ldr	r3, [r3, #8]
 8005632:	617b      	str	r3, [r7, #20]
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	e00b      	b.n	8005650 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005638:	2300      	movs	r3, #0
 800563a:	613b      	str	r3, [r7, #16]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	68db      	ldr	r3, [r3, #12]
 8005642:	613b      	str	r3, [r7, #16]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	689b      	ldr	r3, [r3, #8]
 800564a:	613b      	str	r3, [r7, #16]
 800564c:	693b      	ldr	r3, [r7, #16]
        return;
 800564e:	e080      	b.n	8005752 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005650:	69bb      	ldr	r3, [r7, #24]
 8005652:	f003 0320 	and.w	r3, r3, #32
 8005656:	2b00      	cmp	r3, #0
 8005658:	d014      	beq.n	8005684 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800565e:	f043 0201 	orr.w	r2, r3, #1
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005666:	2300      	movs	r3, #0
 8005668:	60fb      	str	r3, [r7, #12]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	60fb      	str	r3, [r7, #12]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	681a      	ldr	r2, [r3, #0]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005680:	601a      	str	r2, [r3, #0]
 8005682:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005684:	69bb      	ldr	r3, [r7, #24]
 8005686:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800568a:	2b00      	cmp	r3, #0
 800568c:	d00c      	beq.n	80056a8 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005692:	f043 0208 	orr.w	r2, r3, #8
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800569a:	2300      	movs	r3, #0
 800569c:	60bb      	str	r3, [r7, #8]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	689b      	ldr	r3, [r3, #8]
 80056a4:	60bb      	str	r3, [r7, #8]
 80056a6:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d04f      	beq.n	8005750 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	685a      	ldr	r2, [r3, #4]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80056be:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2201      	movs	r2, #1
 80056c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80056c8:	69fb      	ldr	r3, [r7, #28]
 80056ca:	f003 0302 	and.w	r3, r3, #2
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d104      	bne.n	80056dc <HAL_SPI_IRQHandler+0x168>
 80056d2:	69fb      	ldr	r3, [r7, #28]
 80056d4:	f003 0301 	and.w	r3, r3, #1
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d034      	beq.n	8005746 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	685a      	ldr	r2, [r3, #4]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f022 0203 	bic.w	r2, r2, #3
 80056ea:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d011      	beq.n	8005718 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056f8:	4a17      	ldr	r2, [pc, #92]	; (8005758 <HAL_SPI_IRQHandler+0x1e4>)
 80056fa:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005700:	4618      	mov	r0, r3
 8005702:	f7fd ffce 	bl	80036a2 <HAL_DMA_Abort_IT>
 8005706:	4603      	mov	r3, r0
 8005708:	2b00      	cmp	r3, #0
 800570a:	d005      	beq.n	8005718 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005710:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800571c:	2b00      	cmp	r3, #0
 800571e:	d016      	beq.n	800574e <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005724:	4a0c      	ldr	r2, [pc, #48]	; (8005758 <HAL_SPI_IRQHandler+0x1e4>)
 8005726:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800572c:	4618      	mov	r0, r3
 800572e:	f7fd ffb8 	bl	80036a2 <HAL_DMA_Abort_IT>
 8005732:	4603      	mov	r3, r0
 8005734:	2b00      	cmp	r3, #0
 8005736:	d00a      	beq.n	800574e <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800573c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8005744:	e003      	b.n	800574e <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f000 f808 	bl	800575c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800574c:	e000      	b.n	8005750 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800574e:	bf00      	nop
    return;
 8005750:	bf00      	nop
  }
}
 8005752:	3720      	adds	r7, #32
 8005754:	46bd      	mov	sp, r7
 8005756:	bd80      	pop	{r7, pc}
 8005758:	08005771 	.word	0x08005771

0800575c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800575c:	b480      	push	{r7}
 800575e:	b083      	sub	sp, #12
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005764:	bf00      	nop
 8005766:	370c      	adds	r7, #12
 8005768:	46bd      	mov	sp, r7
 800576a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576e:	4770      	bx	lr

08005770 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b084      	sub	sp, #16
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800577c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	2200      	movs	r2, #0
 8005782:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	2200      	movs	r2, #0
 800578a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800578c:	68f8      	ldr	r0, [r7, #12]
 800578e:	f7ff ffe5 	bl	800575c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005792:	bf00      	nop
 8005794:	3710      	adds	r7, #16
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}

0800579a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800579a:	b580      	push	{r7, lr}
 800579c:	b082      	sub	sp, #8
 800579e:	af00      	add	r7, sp, #0
 80057a0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d101      	bne.n	80057ac <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80057a8:	2301      	movs	r3, #1
 80057aa:	e049      	b.n	8005840 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057b2:	b2db      	uxtb	r3, r3
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d106      	bne.n	80057c6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2200      	movs	r2, #0
 80057bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80057c0:	6878      	ldr	r0, [r7, #4]
 80057c2:	f7fc f8a1 	bl	8001908 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2202      	movs	r2, #2
 80057ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681a      	ldr	r2, [r3, #0]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	3304      	adds	r3, #4
 80057d6:	4619      	mov	r1, r3
 80057d8:	4610      	mov	r0, r2
 80057da:	f000 faa3 	bl	8005d24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2201      	movs	r2, #1
 80057e2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2201      	movs	r2, #1
 80057ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2201      	movs	r2, #1
 80057f2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2201      	movs	r2, #1
 80057fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2201      	movs	r2, #1
 8005802:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2201      	movs	r2, #1
 800580a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2201      	movs	r2, #1
 8005812:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2201      	movs	r2, #1
 800581a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2201      	movs	r2, #1
 8005822:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2201      	movs	r2, #1
 800582a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2201      	movs	r2, #1
 8005832:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2201      	movs	r2, #1
 800583a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800583e:	2300      	movs	r3, #0
}
 8005840:	4618      	mov	r0, r3
 8005842:	3708      	adds	r7, #8
 8005844:	46bd      	mov	sp, r7
 8005846:	bd80      	pop	{r7, pc}

08005848 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005848:	b480      	push	{r7}
 800584a:	b085      	sub	sp, #20
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005856:	b2db      	uxtb	r3, r3
 8005858:	2b01      	cmp	r3, #1
 800585a:	d001      	beq.n	8005860 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800585c:	2301      	movs	r3, #1
 800585e:	e04f      	b.n	8005900 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2202      	movs	r2, #2
 8005864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	68da      	ldr	r2, [r3, #12]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f042 0201 	orr.w	r2, r2, #1
 8005876:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a23      	ldr	r2, [pc, #140]	; (800590c <HAL_TIM_Base_Start_IT+0xc4>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d01d      	beq.n	80058be <HAL_TIM_Base_Start_IT+0x76>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800588a:	d018      	beq.n	80058be <HAL_TIM_Base_Start_IT+0x76>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a1f      	ldr	r2, [pc, #124]	; (8005910 <HAL_TIM_Base_Start_IT+0xc8>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d013      	beq.n	80058be <HAL_TIM_Base_Start_IT+0x76>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a1e      	ldr	r2, [pc, #120]	; (8005914 <HAL_TIM_Base_Start_IT+0xcc>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d00e      	beq.n	80058be <HAL_TIM_Base_Start_IT+0x76>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a1c      	ldr	r2, [pc, #112]	; (8005918 <HAL_TIM_Base_Start_IT+0xd0>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d009      	beq.n	80058be <HAL_TIM_Base_Start_IT+0x76>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4a1b      	ldr	r2, [pc, #108]	; (800591c <HAL_TIM_Base_Start_IT+0xd4>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d004      	beq.n	80058be <HAL_TIM_Base_Start_IT+0x76>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a19      	ldr	r2, [pc, #100]	; (8005920 <HAL_TIM_Base_Start_IT+0xd8>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d115      	bne.n	80058ea <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	689a      	ldr	r2, [r3, #8]
 80058c4:	4b17      	ldr	r3, [pc, #92]	; (8005924 <HAL_TIM_Base_Start_IT+0xdc>)
 80058c6:	4013      	ands	r3, r2
 80058c8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2b06      	cmp	r3, #6
 80058ce:	d015      	beq.n	80058fc <HAL_TIM_Base_Start_IT+0xb4>
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058d6:	d011      	beq.n	80058fc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	681a      	ldr	r2, [r3, #0]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f042 0201 	orr.w	r2, r2, #1
 80058e6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058e8:	e008      	b.n	80058fc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	681a      	ldr	r2, [r3, #0]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f042 0201 	orr.w	r2, r2, #1
 80058f8:	601a      	str	r2, [r3, #0]
 80058fa:	e000      	b.n	80058fe <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058fc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80058fe:	2300      	movs	r3, #0
}
 8005900:	4618      	mov	r0, r3
 8005902:	3714      	adds	r7, #20
 8005904:	46bd      	mov	sp, r7
 8005906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590a:	4770      	bx	lr
 800590c:	40012c00 	.word	0x40012c00
 8005910:	40000400 	.word	0x40000400
 8005914:	40000800 	.word	0x40000800
 8005918:	40000c00 	.word	0x40000c00
 800591c:	40013400 	.word	0x40013400
 8005920:	40014000 	.word	0x40014000
 8005924:	00010007 	.word	0x00010007

08005928 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b084      	sub	sp, #16
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	68db      	ldr	r3, [r3, #12]
 8005936:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	691b      	ldr	r3, [r3, #16]
 800593e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	f003 0302 	and.w	r3, r3, #2
 8005946:	2b00      	cmp	r3, #0
 8005948:	d020      	beq.n	800598c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	f003 0302 	and.w	r3, r3, #2
 8005950:	2b00      	cmp	r3, #0
 8005952:	d01b      	beq.n	800598c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f06f 0202 	mvn.w	r2, #2
 800595c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2201      	movs	r2, #1
 8005962:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	699b      	ldr	r3, [r3, #24]
 800596a:	f003 0303 	and.w	r3, r3, #3
 800596e:	2b00      	cmp	r3, #0
 8005970:	d003      	beq.n	800597a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f000 f9b7 	bl	8005ce6 <HAL_TIM_IC_CaptureCallback>
 8005978:	e005      	b.n	8005986 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f000 f9a9 	bl	8005cd2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005980:	6878      	ldr	r0, [r7, #4]
 8005982:	f000 f9ba 	bl	8005cfa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2200      	movs	r2, #0
 800598a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	f003 0304 	and.w	r3, r3, #4
 8005992:	2b00      	cmp	r3, #0
 8005994:	d020      	beq.n	80059d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	f003 0304 	and.w	r3, r3, #4
 800599c:	2b00      	cmp	r3, #0
 800599e:	d01b      	beq.n	80059d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f06f 0204 	mvn.w	r2, #4
 80059a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2202      	movs	r2, #2
 80059ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	699b      	ldr	r3, [r3, #24]
 80059b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d003      	beq.n	80059c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f000 f991 	bl	8005ce6 <HAL_TIM_IC_CaptureCallback>
 80059c4:	e005      	b.n	80059d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	f000 f983 	bl	8005cd2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	f000 f994 	bl	8005cfa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2200      	movs	r2, #0
 80059d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	f003 0308 	and.w	r3, r3, #8
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d020      	beq.n	8005a24 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	f003 0308 	and.w	r3, r3, #8
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d01b      	beq.n	8005a24 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f06f 0208 	mvn.w	r2, #8
 80059f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2204      	movs	r2, #4
 80059fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	69db      	ldr	r3, [r3, #28]
 8005a02:	f003 0303 	and.w	r3, r3, #3
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d003      	beq.n	8005a12 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f000 f96b 	bl	8005ce6 <HAL_TIM_IC_CaptureCallback>
 8005a10:	e005      	b.n	8005a1e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f000 f95d 	bl	8005cd2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	f000 f96e 	bl	8005cfa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2200      	movs	r2, #0
 8005a22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	f003 0310 	and.w	r3, r3, #16
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d020      	beq.n	8005a70 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	f003 0310 	and.w	r3, r3, #16
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d01b      	beq.n	8005a70 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f06f 0210 	mvn.w	r2, #16
 8005a40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2208      	movs	r2, #8
 8005a46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	69db      	ldr	r3, [r3, #28]
 8005a4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d003      	beq.n	8005a5e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f000 f945 	bl	8005ce6 <HAL_TIM_IC_CaptureCallback>
 8005a5c:	e005      	b.n	8005a6a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f000 f937 	bl	8005cd2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	f000 f948 	bl	8005cfa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	f003 0301 	and.w	r3, r3, #1
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d00c      	beq.n	8005a94 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	f003 0301 	and.w	r3, r3, #1
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d007      	beq.n	8005a94 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f06f 0201 	mvn.w	r2, #1
 8005a8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f000 f915 	bl	8005cbe <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d00c      	beq.n	8005ab8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d007      	beq.n	8005ab8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005ab0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f000 fafc 	bl	80060b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d00c      	beq.n	8005adc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d007      	beq.n	8005adc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005ad4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f000 faf4 	bl	80060c4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d00c      	beq.n	8005b00 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d007      	beq.n	8005b00 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005af8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	f000 f907 	bl	8005d0e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	f003 0320 	and.w	r3, r3, #32
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d00c      	beq.n	8005b24 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	f003 0320 	and.w	r3, r3, #32
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d007      	beq.n	8005b24 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f06f 0220 	mvn.w	r2, #32
 8005b1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f000 fabc 	bl	800609c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005b24:	bf00      	nop
 8005b26:	3710      	adds	r7, #16
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	bd80      	pop	{r7, pc}

08005b2c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b084      	sub	sp, #16
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
 8005b34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b36:	2300      	movs	r3, #0
 8005b38:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b40:	2b01      	cmp	r3, #1
 8005b42:	d101      	bne.n	8005b48 <HAL_TIM_ConfigClockSource+0x1c>
 8005b44:	2302      	movs	r3, #2
 8005b46:	e0b6      	b.n	8005cb6 <HAL_TIM_ConfigClockSource+0x18a>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2202      	movs	r2, #2
 8005b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	689b      	ldr	r3, [r3, #8]
 8005b5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b66:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005b6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b72:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	68ba      	ldr	r2, [r7, #8]
 8005b7a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b84:	d03e      	beq.n	8005c04 <HAL_TIM_ConfigClockSource+0xd8>
 8005b86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b8a:	f200 8087 	bhi.w	8005c9c <HAL_TIM_ConfigClockSource+0x170>
 8005b8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b92:	f000 8086 	beq.w	8005ca2 <HAL_TIM_ConfigClockSource+0x176>
 8005b96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b9a:	d87f      	bhi.n	8005c9c <HAL_TIM_ConfigClockSource+0x170>
 8005b9c:	2b70      	cmp	r3, #112	; 0x70
 8005b9e:	d01a      	beq.n	8005bd6 <HAL_TIM_ConfigClockSource+0xaa>
 8005ba0:	2b70      	cmp	r3, #112	; 0x70
 8005ba2:	d87b      	bhi.n	8005c9c <HAL_TIM_ConfigClockSource+0x170>
 8005ba4:	2b60      	cmp	r3, #96	; 0x60
 8005ba6:	d050      	beq.n	8005c4a <HAL_TIM_ConfigClockSource+0x11e>
 8005ba8:	2b60      	cmp	r3, #96	; 0x60
 8005baa:	d877      	bhi.n	8005c9c <HAL_TIM_ConfigClockSource+0x170>
 8005bac:	2b50      	cmp	r3, #80	; 0x50
 8005bae:	d03c      	beq.n	8005c2a <HAL_TIM_ConfigClockSource+0xfe>
 8005bb0:	2b50      	cmp	r3, #80	; 0x50
 8005bb2:	d873      	bhi.n	8005c9c <HAL_TIM_ConfigClockSource+0x170>
 8005bb4:	2b40      	cmp	r3, #64	; 0x40
 8005bb6:	d058      	beq.n	8005c6a <HAL_TIM_ConfigClockSource+0x13e>
 8005bb8:	2b40      	cmp	r3, #64	; 0x40
 8005bba:	d86f      	bhi.n	8005c9c <HAL_TIM_ConfigClockSource+0x170>
 8005bbc:	2b30      	cmp	r3, #48	; 0x30
 8005bbe:	d064      	beq.n	8005c8a <HAL_TIM_ConfigClockSource+0x15e>
 8005bc0:	2b30      	cmp	r3, #48	; 0x30
 8005bc2:	d86b      	bhi.n	8005c9c <HAL_TIM_ConfigClockSource+0x170>
 8005bc4:	2b20      	cmp	r3, #32
 8005bc6:	d060      	beq.n	8005c8a <HAL_TIM_ConfigClockSource+0x15e>
 8005bc8:	2b20      	cmp	r3, #32
 8005bca:	d867      	bhi.n	8005c9c <HAL_TIM_ConfigClockSource+0x170>
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d05c      	beq.n	8005c8a <HAL_TIM_ConfigClockSource+0x15e>
 8005bd0:	2b10      	cmp	r3, #16
 8005bd2:	d05a      	beq.n	8005c8a <HAL_TIM_ConfigClockSource+0x15e>
 8005bd4:	e062      	b.n	8005c9c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005be6:	f000 f9b1 	bl	8005f4c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	689b      	ldr	r3, [r3, #8]
 8005bf0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005bf8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	68ba      	ldr	r2, [r7, #8]
 8005c00:	609a      	str	r2, [r3, #8]
      break;
 8005c02:	e04f      	b.n	8005ca4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005c14:	f000 f99a 	bl	8005f4c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	689a      	ldr	r2, [r3, #8]
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005c26:	609a      	str	r2, [r3, #8]
      break;
 8005c28:	e03c      	b.n	8005ca4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c36:	461a      	mov	r2, r3
 8005c38:	f000 f90e 	bl	8005e58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	2150      	movs	r1, #80	; 0x50
 8005c42:	4618      	mov	r0, r3
 8005c44:	f000 f967 	bl	8005f16 <TIM_ITRx_SetConfig>
      break;
 8005c48:	e02c      	b.n	8005ca4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c56:	461a      	mov	r2, r3
 8005c58:	f000 f92d 	bl	8005eb6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	2160      	movs	r1, #96	; 0x60
 8005c62:	4618      	mov	r0, r3
 8005c64:	f000 f957 	bl	8005f16 <TIM_ITRx_SetConfig>
      break;
 8005c68:	e01c      	b.n	8005ca4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c76:	461a      	mov	r2, r3
 8005c78:	f000 f8ee 	bl	8005e58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	2140      	movs	r1, #64	; 0x40
 8005c82:	4618      	mov	r0, r3
 8005c84:	f000 f947 	bl	8005f16 <TIM_ITRx_SetConfig>
      break;
 8005c88:	e00c      	b.n	8005ca4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681a      	ldr	r2, [r3, #0]
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4619      	mov	r1, r3
 8005c94:	4610      	mov	r0, r2
 8005c96:	f000 f93e 	bl	8005f16 <TIM_ITRx_SetConfig>
      break;
 8005c9a:	e003      	b.n	8005ca4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	73fb      	strb	r3, [r7, #15]
      break;
 8005ca0:	e000      	b.n	8005ca4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005ca2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005cb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	3710      	adds	r7, #16
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}

08005cbe <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005cbe:	b480      	push	{r7}
 8005cc0:	b083      	sub	sp, #12
 8005cc2:	af00      	add	r7, sp, #0
 8005cc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005cc6:	bf00      	nop
 8005cc8:	370c      	adds	r7, #12
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd0:	4770      	bx	lr

08005cd2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005cd2:	b480      	push	{r7}
 8005cd4:	b083      	sub	sp, #12
 8005cd6:	af00      	add	r7, sp, #0
 8005cd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005cda:	bf00      	nop
 8005cdc:	370c      	adds	r7, #12
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce4:	4770      	bx	lr

08005ce6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005ce6:	b480      	push	{r7}
 8005ce8:	b083      	sub	sp, #12
 8005cea:	af00      	add	r7, sp, #0
 8005cec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005cee:	bf00      	nop
 8005cf0:	370c      	adds	r7, #12
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf8:	4770      	bx	lr

08005cfa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005cfa:	b480      	push	{r7}
 8005cfc:	b083      	sub	sp, #12
 8005cfe:	af00      	add	r7, sp, #0
 8005d00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005d02:	bf00      	nop
 8005d04:	370c      	adds	r7, #12
 8005d06:	46bd      	mov	sp, r7
 8005d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0c:	4770      	bx	lr

08005d0e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005d0e:	b480      	push	{r7}
 8005d10:	b083      	sub	sp, #12
 8005d12:	af00      	add	r7, sp, #0
 8005d14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005d16:	bf00      	nop
 8005d18:	370c      	adds	r7, #12
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d20:	4770      	bx	lr
	...

08005d24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005d24:	b480      	push	{r7}
 8005d26:	b085      	sub	sp, #20
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
 8005d2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	4a40      	ldr	r2, [pc, #256]	; (8005e38 <TIM_Base_SetConfig+0x114>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d013      	beq.n	8005d64 <TIM_Base_SetConfig+0x40>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d42:	d00f      	beq.n	8005d64 <TIM_Base_SetConfig+0x40>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	4a3d      	ldr	r2, [pc, #244]	; (8005e3c <TIM_Base_SetConfig+0x118>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d00b      	beq.n	8005d64 <TIM_Base_SetConfig+0x40>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	4a3c      	ldr	r2, [pc, #240]	; (8005e40 <TIM_Base_SetConfig+0x11c>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d007      	beq.n	8005d64 <TIM_Base_SetConfig+0x40>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	4a3b      	ldr	r2, [pc, #236]	; (8005e44 <TIM_Base_SetConfig+0x120>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d003      	beq.n	8005d64 <TIM_Base_SetConfig+0x40>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	4a3a      	ldr	r2, [pc, #232]	; (8005e48 <TIM_Base_SetConfig+0x124>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d108      	bne.n	8005d76 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	68fa      	ldr	r2, [r7, #12]
 8005d72:	4313      	orrs	r3, r2
 8005d74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	4a2f      	ldr	r2, [pc, #188]	; (8005e38 <TIM_Base_SetConfig+0x114>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d01f      	beq.n	8005dbe <TIM_Base_SetConfig+0x9a>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d84:	d01b      	beq.n	8005dbe <TIM_Base_SetConfig+0x9a>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	4a2c      	ldr	r2, [pc, #176]	; (8005e3c <TIM_Base_SetConfig+0x118>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d017      	beq.n	8005dbe <TIM_Base_SetConfig+0x9a>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	4a2b      	ldr	r2, [pc, #172]	; (8005e40 <TIM_Base_SetConfig+0x11c>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d013      	beq.n	8005dbe <TIM_Base_SetConfig+0x9a>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	4a2a      	ldr	r2, [pc, #168]	; (8005e44 <TIM_Base_SetConfig+0x120>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d00f      	beq.n	8005dbe <TIM_Base_SetConfig+0x9a>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	4a29      	ldr	r2, [pc, #164]	; (8005e48 <TIM_Base_SetConfig+0x124>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d00b      	beq.n	8005dbe <TIM_Base_SetConfig+0x9a>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	4a28      	ldr	r2, [pc, #160]	; (8005e4c <TIM_Base_SetConfig+0x128>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d007      	beq.n	8005dbe <TIM_Base_SetConfig+0x9a>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	4a27      	ldr	r2, [pc, #156]	; (8005e50 <TIM_Base_SetConfig+0x12c>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d003      	beq.n	8005dbe <TIM_Base_SetConfig+0x9a>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	4a26      	ldr	r2, [pc, #152]	; (8005e54 <TIM_Base_SetConfig+0x130>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d108      	bne.n	8005dd0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005dc4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	68db      	ldr	r3, [r3, #12]
 8005dca:	68fa      	ldr	r2, [r7, #12]
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	695b      	ldr	r3, [r3, #20]
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	68fa      	ldr	r2, [r7, #12]
 8005de2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	689a      	ldr	r2, [r3, #8]
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	681a      	ldr	r2, [r3, #0]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	4a10      	ldr	r2, [pc, #64]	; (8005e38 <TIM_Base_SetConfig+0x114>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d00f      	beq.n	8005e1c <TIM_Base_SetConfig+0xf8>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	4a12      	ldr	r2, [pc, #72]	; (8005e48 <TIM_Base_SetConfig+0x124>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d00b      	beq.n	8005e1c <TIM_Base_SetConfig+0xf8>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	4a11      	ldr	r2, [pc, #68]	; (8005e4c <TIM_Base_SetConfig+0x128>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d007      	beq.n	8005e1c <TIM_Base_SetConfig+0xf8>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	4a10      	ldr	r2, [pc, #64]	; (8005e50 <TIM_Base_SetConfig+0x12c>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d003      	beq.n	8005e1c <TIM_Base_SetConfig+0xf8>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	4a0f      	ldr	r2, [pc, #60]	; (8005e54 <TIM_Base_SetConfig+0x130>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d103      	bne.n	8005e24 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	691a      	ldr	r2, [r3, #16]
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2201      	movs	r2, #1
 8005e28:	615a      	str	r2, [r3, #20]
}
 8005e2a:	bf00      	nop
 8005e2c:	3714      	adds	r7, #20
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e34:	4770      	bx	lr
 8005e36:	bf00      	nop
 8005e38:	40012c00 	.word	0x40012c00
 8005e3c:	40000400 	.word	0x40000400
 8005e40:	40000800 	.word	0x40000800
 8005e44:	40000c00 	.word	0x40000c00
 8005e48:	40013400 	.word	0x40013400
 8005e4c:	40014000 	.word	0x40014000
 8005e50:	40014400 	.word	0x40014400
 8005e54:	40014800 	.word	0x40014800

08005e58 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b087      	sub	sp, #28
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	60f8      	str	r0, [r7, #12]
 8005e60:	60b9      	str	r1, [r7, #8]
 8005e62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	6a1b      	ldr	r3, [r3, #32]
 8005e68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	6a1b      	ldr	r3, [r3, #32]
 8005e6e:	f023 0201 	bic.w	r2, r3, #1
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	699b      	ldr	r3, [r3, #24]
 8005e7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005e7c:	693b      	ldr	r3, [r7, #16]
 8005e7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005e82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	011b      	lsls	r3, r3, #4
 8005e88:	693a      	ldr	r2, [r7, #16]
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005e8e:	697b      	ldr	r3, [r7, #20]
 8005e90:	f023 030a 	bic.w	r3, r3, #10
 8005e94:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005e96:	697a      	ldr	r2, [r7, #20]
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	693a      	ldr	r2, [r7, #16]
 8005ea2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	697a      	ldr	r2, [r7, #20]
 8005ea8:	621a      	str	r2, [r3, #32]
}
 8005eaa:	bf00      	nop
 8005eac:	371c      	adds	r7, #28
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb4:	4770      	bx	lr

08005eb6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005eb6:	b480      	push	{r7}
 8005eb8:	b087      	sub	sp, #28
 8005eba:	af00      	add	r7, sp, #0
 8005ebc:	60f8      	str	r0, [r7, #12]
 8005ebe:	60b9      	str	r1, [r7, #8]
 8005ec0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	6a1b      	ldr	r3, [r3, #32]
 8005ec6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	6a1b      	ldr	r3, [r3, #32]
 8005ecc:	f023 0210 	bic.w	r2, r3, #16
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	699b      	ldr	r3, [r3, #24]
 8005ed8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005ee0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	031b      	lsls	r3, r3, #12
 8005ee6:	693a      	ldr	r2, [r7, #16]
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005eec:	697b      	ldr	r3, [r7, #20]
 8005eee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005ef2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	011b      	lsls	r3, r3, #4
 8005ef8:	697a      	ldr	r2, [r7, #20]
 8005efa:	4313      	orrs	r3, r2
 8005efc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	693a      	ldr	r2, [r7, #16]
 8005f02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	697a      	ldr	r2, [r7, #20]
 8005f08:	621a      	str	r2, [r3, #32]
}
 8005f0a:	bf00      	nop
 8005f0c:	371c      	adds	r7, #28
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f14:	4770      	bx	lr

08005f16 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005f16:	b480      	push	{r7}
 8005f18:	b085      	sub	sp, #20
 8005f1a:	af00      	add	r7, sp, #0
 8005f1c:	6078      	str	r0, [r7, #4]
 8005f1e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	689b      	ldr	r3, [r3, #8]
 8005f24:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f2c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005f2e:	683a      	ldr	r2, [r7, #0]
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	4313      	orrs	r3, r2
 8005f34:	f043 0307 	orr.w	r3, r3, #7
 8005f38:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	68fa      	ldr	r2, [r7, #12]
 8005f3e:	609a      	str	r2, [r3, #8]
}
 8005f40:	bf00      	nop
 8005f42:	3714      	adds	r7, #20
 8005f44:	46bd      	mov	sp, r7
 8005f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4a:	4770      	bx	lr

08005f4c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b087      	sub	sp, #28
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	60f8      	str	r0, [r7, #12]
 8005f54:	60b9      	str	r1, [r7, #8]
 8005f56:	607a      	str	r2, [r7, #4]
 8005f58:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	689b      	ldr	r3, [r3, #8]
 8005f5e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005f66:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	021a      	lsls	r2, r3, #8
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	431a      	orrs	r2, r3
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	4313      	orrs	r3, r2
 8005f74:	697a      	ldr	r2, [r7, #20]
 8005f76:	4313      	orrs	r3, r2
 8005f78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	697a      	ldr	r2, [r7, #20]
 8005f7e:	609a      	str	r2, [r3, #8]
}
 8005f80:	bf00      	nop
 8005f82:	371c      	adds	r7, #28
 8005f84:	46bd      	mov	sp, r7
 8005f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8a:	4770      	bx	lr

08005f8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b085      	sub	sp, #20
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
 8005f94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f9c:	2b01      	cmp	r3, #1
 8005f9e:	d101      	bne.n	8005fa4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005fa0:	2302      	movs	r3, #2
 8005fa2:	e068      	b.n	8006076 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2202      	movs	r2, #2
 8005fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	685b      	ldr	r3, [r3, #4]
 8005fba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	689b      	ldr	r3, [r3, #8]
 8005fc2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a2e      	ldr	r2, [pc, #184]	; (8006084 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d004      	beq.n	8005fd8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a2d      	ldr	r2, [pc, #180]	; (8006088 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d108      	bne.n	8005fea <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005fde:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	685b      	ldr	r3, [r3, #4]
 8005fe4:	68fa      	ldr	r2, [r7, #12]
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ff0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	68fa      	ldr	r2, [r7, #12]
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	68fa      	ldr	r2, [r7, #12]
 8006002:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4a1e      	ldr	r2, [pc, #120]	; (8006084 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d01d      	beq.n	800604a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006016:	d018      	beq.n	800604a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4a1b      	ldr	r2, [pc, #108]	; (800608c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d013      	beq.n	800604a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4a1a      	ldr	r2, [pc, #104]	; (8006090 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d00e      	beq.n	800604a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	4a18      	ldr	r2, [pc, #96]	; (8006094 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d009      	beq.n	800604a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4a13      	ldr	r2, [pc, #76]	; (8006088 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d004      	beq.n	800604a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a14      	ldr	r2, [pc, #80]	; (8006098 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d10c      	bne.n	8006064 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006050:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	689b      	ldr	r3, [r3, #8]
 8006056:	68ba      	ldr	r2, [r7, #8]
 8006058:	4313      	orrs	r3, r2
 800605a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	68ba      	ldr	r2, [r7, #8]
 8006062:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2201      	movs	r2, #1
 8006068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2200      	movs	r2, #0
 8006070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006074:	2300      	movs	r3, #0
}
 8006076:	4618      	mov	r0, r3
 8006078:	3714      	adds	r7, #20
 800607a:	46bd      	mov	sp, r7
 800607c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006080:	4770      	bx	lr
 8006082:	bf00      	nop
 8006084:	40012c00 	.word	0x40012c00
 8006088:	40013400 	.word	0x40013400
 800608c:	40000400 	.word	0x40000400
 8006090:	40000800 	.word	0x40000800
 8006094:	40000c00 	.word	0x40000c00
 8006098:	40014000 	.word	0x40014000

0800609c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800609c:	b480      	push	{r7}
 800609e:	b083      	sub	sp, #12
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80060a4:	bf00      	nop
 80060a6:	370c      	adds	r7, #12
 80060a8:	46bd      	mov	sp, r7
 80060aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ae:	4770      	bx	lr

080060b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b083      	sub	sp, #12
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80060b8:	bf00      	nop
 80060ba:	370c      	adds	r7, #12
 80060bc:	46bd      	mov	sp, r7
 80060be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c2:	4770      	bx	lr

080060c4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80060c4:	b480      	push	{r7}
 80060c6:	b083      	sub	sp, #12
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80060cc:	bf00      	nop
 80060ce:	370c      	adds	r7, #12
 80060d0:	46bd      	mov	sp, r7
 80060d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d6:	4770      	bx	lr

080060d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b082      	sub	sp, #8
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d101      	bne.n	80060ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80060e6:	2301      	movs	r3, #1
 80060e8:	e042      	b.n	8006170 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d106      	bne.n	8006102 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2200      	movs	r2, #0
 80060f8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80060fc:	6878      	ldr	r0, [r7, #4]
 80060fe:	f000 f83b 	bl	8006178 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2224      	movs	r2, #36	; 0x24
 8006106:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	681a      	ldr	r2, [r3, #0]
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f022 0201 	bic.w	r2, r2, #1
 8006118:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800611e:	2b00      	cmp	r3, #0
 8006120:	d002      	beq.n	8006128 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f000 fbbe 	bl	80068a4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006128:	6878      	ldr	r0, [r7, #4]
 800612a:	f000 f8bf 	bl	80062ac <UART_SetConfig>
 800612e:	4603      	mov	r3, r0
 8006130:	2b01      	cmp	r3, #1
 8006132:	d101      	bne.n	8006138 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006134:	2301      	movs	r3, #1
 8006136:	e01b      	b.n	8006170 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	685a      	ldr	r2, [r3, #4]
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006146:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	689a      	ldr	r2, [r3, #8]
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006156:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	681a      	ldr	r2, [r3, #0]
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f042 0201 	orr.w	r2, r2, #1
 8006166:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006168:	6878      	ldr	r0, [r7, #4]
 800616a:	f000 fc3d 	bl	80069e8 <UART_CheckIdleState>
 800616e:	4603      	mov	r3, r0
}
 8006170:	4618      	mov	r0, r3
 8006172:	3708      	adds	r7, #8
 8006174:	46bd      	mov	sp, r7
 8006176:	bd80      	pop	{r7, pc}

08006178 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8006178:	b480      	push	{r7}
 800617a:	b083      	sub	sp, #12
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8006180:	bf00      	nop
 8006182:	370c      	adds	r7, #12
 8006184:	46bd      	mov	sp, r7
 8006186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618a:	4770      	bx	lr

0800618c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b08a      	sub	sp, #40	; 0x28
 8006190:	af02      	add	r7, sp, #8
 8006192:	60f8      	str	r0, [r7, #12]
 8006194:	60b9      	str	r1, [r7, #8]
 8006196:	603b      	str	r3, [r7, #0]
 8006198:	4613      	mov	r3, r2
 800619a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061a2:	2b20      	cmp	r3, #32
 80061a4:	d17c      	bne.n	80062a0 <HAL_UART_Transmit+0x114>
  {
    if ((pData == NULL) || (Size == 0U))
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d002      	beq.n	80061b2 <HAL_UART_Transmit+0x26>
 80061ac:	88fb      	ldrh	r3, [r7, #6]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d101      	bne.n	80061b6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80061b2:	2301      	movs	r3, #1
 80061b4:	e075      	b.n	80062a2 <HAL_UART_Transmit+0x116>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	2200      	movs	r2, #0
 80061ba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	2221      	movs	r2, #33	; 0x21
 80061c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80061c6:	f7fc f91f 	bl	8002408 <HAL_GetTick>
 80061ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	88fa      	ldrh	r2, [r7, #6]
 80061d0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	88fa      	ldrh	r2, [r7, #6]
 80061d8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	689b      	ldr	r3, [r3, #8]
 80061e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061e4:	d108      	bne.n	80061f8 <HAL_UART_Transmit+0x6c>
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	691b      	ldr	r3, [r3, #16]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d104      	bne.n	80061f8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80061ee:	2300      	movs	r3, #0
 80061f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	61bb      	str	r3, [r7, #24]
 80061f6:	e003      	b.n	8006200 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80061fc:	2300      	movs	r3, #0
 80061fe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006200:	e031      	b.n	8006266 <HAL_UART_Transmit+0xda>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	9300      	str	r3, [sp, #0]
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	2200      	movs	r2, #0
 800620a:	2180      	movs	r1, #128	; 0x80
 800620c:	68f8      	ldr	r0, [r7, #12]
 800620e:	f000 fc95 	bl	8006b3c <UART_WaitOnFlagUntilTimeout>
 8006212:	4603      	mov	r3, r0
 8006214:	2b00      	cmp	r3, #0
 8006216:	d005      	beq.n	8006224 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	2220      	movs	r2, #32
 800621c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8006220:	2303      	movs	r3, #3
 8006222:	e03e      	b.n	80062a2 <HAL_UART_Transmit+0x116>
      }
      if (pdata8bits == NULL)
 8006224:	69fb      	ldr	r3, [r7, #28]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d10b      	bne.n	8006242 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800622a:	69bb      	ldr	r3, [r7, #24]
 800622c:	881a      	ldrh	r2, [r3, #0]
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006236:	b292      	uxth	r2, r2
 8006238:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800623a:	69bb      	ldr	r3, [r7, #24]
 800623c:	3302      	adds	r3, #2
 800623e:	61bb      	str	r3, [r7, #24]
 8006240:	e008      	b.n	8006254 <HAL_UART_Transmit+0xc8>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006242:	69fb      	ldr	r3, [r7, #28]
 8006244:	781a      	ldrb	r2, [r3, #0]
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	b292      	uxth	r2, r2
 800624c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800624e:	69fb      	ldr	r3, [r7, #28]
 8006250:	3301      	adds	r3, #1
 8006252:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800625a:	b29b      	uxth	r3, r3
 800625c:	3b01      	subs	r3, #1
 800625e:	b29a      	uxth	r2, r3
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800626c:	b29b      	uxth	r3, r3
 800626e:	2b00      	cmp	r3, #0
 8006270:	d1c7      	bne.n	8006202 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	9300      	str	r3, [sp, #0]
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	2200      	movs	r2, #0
 800627a:	2140      	movs	r1, #64	; 0x40
 800627c:	68f8      	ldr	r0, [r7, #12]
 800627e:	f000 fc5d 	bl	8006b3c <UART_WaitOnFlagUntilTimeout>
 8006282:	4603      	mov	r3, r0
 8006284:	2b00      	cmp	r3, #0
 8006286:	d005      	beq.n	8006294 <HAL_UART_Transmit+0x108>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	2220      	movs	r2, #32
 800628c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8006290:	2303      	movs	r3, #3
 8006292:	e006      	b.n	80062a2 <HAL_UART_Transmit+0x116>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	2220      	movs	r2, #32
 8006298:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800629c:	2300      	movs	r3, #0
 800629e:	e000      	b.n	80062a2 <HAL_UART_Transmit+0x116>
  }
  else
  {
    return HAL_BUSY;
 80062a0:	2302      	movs	r3, #2
  }
}
 80062a2:	4618      	mov	r0, r3
 80062a4:	3720      	adds	r7, #32
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bd80      	pop	{r7, pc}
	...

080062ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80062ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80062b0:	b08c      	sub	sp, #48	; 0x30
 80062b2:	af00      	add	r7, sp, #0
 80062b4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80062b6:	2300      	movs	r3, #0
 80062b8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80062bc:	697b      	ldr	r3, [r7, #20]
 80062be:	689a      	ldr	r2, [r3, #8]
 80062c0:	697b      	ldr	r3, [r7, #20]
 80062c2:	691b      	ldr	r3, [r3, #16]
 80062c4:	431a      	orrs	r2, r3
 80062c6:	697b      	ldr	r3, [r7, #20]
 80062c8:	695b      	ldr	r3, [r3, #20]
 80062ca:	431a      	orrs	r2, r3
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	69db      	ldr	r3, [r3, #28]
 80062d0:	4313      	orrs	r3, r2
 80062d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80062d4:	697b      	ldr	r3, [r7, #20]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	681a      	ldr	r2, [r3, #0]
 80062da:	4baa      	ldr	r3, [pc, #680]	; (8006584 <UART_SetConfig+0x2d8>)
 80062dc:	4013      	ands	r3, r2
 80062de:	697a      	ldr	r2, [r7, #20]
 80062e0:	6812      	ldr	r2, [r2, #0]
 80062e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80062e4:	430b      	orrs	r3, r1
 80062e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	68da      	ldr	r2, [r3, #12]
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	430a      	orrs	r2, r1
 80062fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	699b      	ldr	r3, [r3, #24]
 8006302:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a9f      	ldr	r2, [pc, #636]	; (8006588 <UART_SetConfig+0x2dc>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d004      	beq.n	8006318 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	6a1b      	ldr	r3, [r3, #32]
 8006312:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006314:	4313      	orrs	r3, r2
 8006316:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006318:	697b      	ldr	r3, [r7, #20]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	689b      	ldr	r3, [r3, #8]
 800631e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006322:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006326:	697a      	ldr	r2, [r7, #20]
 8006328:	6812      	ldr	r2, [r2, #0]
 800632a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800632c:	430b      	orrs	r3, r1
 800632e:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006336:	f023 010f 	bic.w	r1, r3, #15
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	430a      	orrs	r2, r1
 8006344:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a90      	ldr	r2, [pc, #576]	; (800658c <UART_SetConfig+0x2e0>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d125      	bne.n	800639c <UART_SetConfig+0xf0>
 8006350:	4b8f      	ldr	r3, [pc, #572]	; (8006590 <UART_SetConfig+0x2e4>)
 8006352:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006356:	f003 0303 	and.w	r3, r3, #3
 800635a:	2b03      	cmp	r3, #3
 800635c:	d81a      	bhi.n	8006394 <UART_SetConfig+0xe8>
 800635e:	a201      	add	r2, pc, #4	; (adr r2, 8006364 <UART_SetConfig+0xb8>)
 8006360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006364:	08006375 	.word	0x08006375
 8006368:	08006385 	.word	0x08006385
 800636c:	0800637d 	.word	0x0800637d
 8006370:	0800638d 	.word	0x0800638d
 8006374:	2301      	movs	r3, #1
 8006376:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800637a:	e116      	b.n	80065aa <UART_SetConfig+0x2fe>
 800637c:	2302      	movs	r3, #2
 800637e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006382:	e112      	b.n	80065aa <UART_SetConfig+0x2fe>
 8006384:	2304      	movs	r3, #4
 8006386:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800638a:	e10e      	b.n	80065aa <UART_SetConfig+0x2fe>
 800638c:	2308      	movs	r3, #8
 800638e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006392:	e10a      	b.n	80065aa <UART_SetConfig+0x2fe>
 8006394:	2310      	movs	r3, #16
 8006396:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800639a:	e106      	b.n	80065aa <UART_SetConfig+0x2fe>
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a7c      	ldr	r2, [pc, #496]	; (8006594 <UART_SetConfig+0x2e8>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d138      	bne.n	8006418 <UART_SetConfig+0x16c>
 80063a6:	4b7a      	ldr	r3, [pc, #488]	; (8006590 <UART_SetConfig+0x2e4>)
 80063a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063ac:	f003 030c 	and.w	r3, r3, #12
 80063b0:	2b0c      	cmp	r3, #12
 80063b2:	d82d      	bhi.n	8006410 <UART_SetConfig+0x164>
 80063b4:	a201      	add	r2, pc, #4	; (adr r2, 80063bc <UART_SetConfig+0x110>)
 80063b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063ba:	bf00      	nop
 80063bc:	080063f1 	.word	0x080063f1
 80063c0:	08006411 	.word	0x08006411
 80063c4:	08006411 	.word	0x08006411
 80063c8:	08006411 	.word	0x08006411
 80063cc:	08006401 	.word	0x08006401
 80063d0:	08006411 	.word	0x08006411
 80063d4:	08006411 	.word	0x08006411
 80063d8:	08006411 	.word	0x08006411
 80063dc:	080063f9 	.word	0x080063f9
 80063e0:	08006411 	.word	0x08006411
 80063e4:	08006411 	.word	0x08006411
 80063e8:	08006411 	.word	0x08006411
 80063ec:	08006409 	.word	0x08006409
 80063f0:	2300      	movs	r3, #0
 80063f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063f6:	e0d8      	b.n	80065aa <UART_SetConfig+0x2fe>
 80063f8:	2302      	movs	r3, #2
 80063fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063fe:	e0d4      	b.n	80065aa <UART_SetConfig+0x2fe>
 8006400:	2304      	movs	r3, #4
 8006402:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006406:	e0d0      	b.n	80065aa <UART_SetConfig+0x2fe>
 8006408:	2308      	movs	r3, #8
 800640a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800640e:	e0cc      	b.n	80065aa <UART_SetConfig+0x2fe>
 8006410:	2310      	movs	r3, #16
 8006412:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006416:	e0c8      	b.n	80065aa <UART_SetConfig+0x2fe>
 8006418:	697b      	ldr	r3, [r7, #20]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a5e      	ldr	r2, [pc, #376]	; (8006598 <UART_SetConfig+0x2ec>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d125      	bne.n	800646e <UART_SetConfig+0x1c2>
 8006422:	4b5b      	ldr	r3, [pc, #364]	; (8006590 <UART_SetConfig+0x2e4>)
 8006424:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006428:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800642c:	2b30      	cmp	r3, #48	; 0x30
 800642e:	d016      	beq.n	800645e <UART_SetConfig+0x1b2>
 8006430:	2b30      	cmp	r3, #48	; 0x30
 8006432:	d818      	bhi.n	8006466 <UART_SetConfig+0x1ba>
 8006434:	2b20      	cmp	r3, #32
 8006436:	d00a      	beq.n	800644e <UART_SetConfig+0x1a2>
 8006438:	2b20      	cmp	r3, #32
 800643a:	d814      	bhi.n	8006466 <UART_SetConfig+0x1ba>
 800643c:	2b00      	cmp	r3, #0
 800643e:	d002      	beq.n	8006446 <UART_SetConfig+0x19a>
 8006440:	2b10      	cmp	r3, #16
 8006442:	d008      	beq.n	8006456 <UART_SetConfig+0x1aa>
 8006444:	e00f      	b.n	8006466 <UART_SetConfig+0x1ba>
 8006446:	2300      	movs	r3, #0
 8006448:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800644c:	e0ad      	b.n	80065aa <UART_SetConfig+0x2fe>
 800644e:	2302      	movs	r3, #2
 8006450:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006454:	e0a9      	b.n	80065aa <UART_SetConfig+0x2fe>
 8006456:	2304      	movs	r3, #4
 8006458:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800645c:	e0a5      	b.n	80065aa <UART_SetConfig+0x2fe>
 800645e:	2308      	movs	r3, #8
 8006460:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006464:	e0a1      	b.n	80065aa <UART_SetConfig+0x2fe>
 8006466:	2310      	movs	r3, #16
 8006468:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800646c:	e09d      	b.n	80065aa <UART_SetConfig+0x2fe>
 800646e:	697b      	ldr	r3, [r7, #20]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a4a      	ldr	r2, [pc, #296]	; (800659c <UART_SetConfig+0x2f0>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d125      	bne.n	80064c4 <UART_SetConfig+0x218>
 8006478:	4b45      	ldr	r3, [pc, #276]	; (8006590 <UART_SetConfig+0x2e4>)
 800647a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800647e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006482:	2bc0      	cmp	r3, #192	; 0xc0
 8006484:	d016      	beq.n	80064b4 <UART_SetConfig+0x208>
 8006486:	2bc0      	cmp	r3, #192	; 0xc0
 8006488:	d818      	bhi.n	80064bc <UART_SetConfig+0x210>
 800648a:	2b80      	cmp	r3, #128	; 0x80
 800648c:	d00a      	beq.n	80064a4 <UART_SetConfig+0x1f8>
 800648e:	2b80      	cmp	r3, #128	; 0x80
 8006490:	d814      	bhi.n	80064bc <UART_SetConfig+0x210>
 8006492:	2b00      	cmp	r3, #0
 8006494:	d002      	beq.n	800649c <UART_SetConfig+0x1f0>
 8006496:	2b40      	cmp	r3, #64	; 0x40
 8006498:	d008      	beq.n	80064ac <UART_SetConfig+0x200>
 800649a:	e00f      	b.n	80064bc <UART_SetConfig+0x210>
 800649c:	2300      	movs	r3, #0
 800649e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80064a2:	e082      	b.n	80065aa <UART_SetConfig+0x2fe>
 80064a4:	2302      	movs	r3, #2
 80064a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80064aa:	e07e      	b.n	80065aa <UART_SetConfig+0x2fe>
 80064ac:	2304      	movs	r3, #4
 80064ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80064b2:	e07a      	b.n	80065aa <UART_SetConfig+0x2fe>
 80064b4:	2308      	movs	r3, #8
 80064b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80064ba:	e076      	b.n	80065aa <UART_SetConfig+0x2fe>
 80064bc:	2310      	movs	r3, #16
 80064be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80064c2:	e072      	b.n	80065aa <UART_SetConfig+0x2fe>
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4a35      	ldr	r2, [pc, #212]	; (80065a0 <UART_SetConfig+0x2f4>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d12a      	bne.n	8006524 <UART_SetConfig+0x278>
 80064ce:	4b30      	ldr	r3, [pc, #192]	; (8006590 <UART_SetConfig+0x2e4>)
 80064d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80064dc:	d01a      	beq.n	8006514 <UART_SetConfig+0x268>
 80064de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80064e2:	d81b      	bhi.n	800651c <UART_SetConfig+0x270>
 80064e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064e8:	d00c      	beq.n	8006504 <UART_SetConfig+0x258>
 80064ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064ee:	d815      	bhi.n	800651c <UART_SetConfig+0x270>
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d003      	beq.n	80064fc <UART_SetConfig+0x250>
 80064f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064f8:	d008      	beq.n	800650c <UART_SetConfig+0x260>
 80064fa:	e00f      	b.n	800651c <UART_SetConfig+0x270>
 80064fc:	2300      	movs	r3, #0
 80064fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006502:	e052      	b.n	80065aa <UART_SetConfig+0x2fe>
 8006504:	2302      	movs	r3, #2
 8006506:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800650a:	e04e      	b.n	80065aa <UART_SetConfig+0x2fe>
 800650c:	2304      	movs	r3, #4
 800650e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006512:	e04a      	b.n	80065aa <UART_SetConfig+0x2fe>
 8006514:	2308      	movs	r3, #8
 8006516:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800651a:	e046      	b.n	80065aa <UART_SetConfig+0x2fe>
 800651c:	2310      	movs	r3, #16
 800651e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006522:	e042      	b.n	80065aa <UART_SetConfig+0x2fe>
 8006524:	697b      	ldr	r3, [r7, #20]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4a17      	ldr	r2, [pc, #92]	; (8006588 <UART_SetConfig+0x2dc>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d13a      	bne.n	80065a4 <UART_SetConfig+0x2f8>
 800652e:	4b18      	ldr	r3, [pc, #96]	; (8006590 <UART_SetConfig+0x2e4>)
 8006530:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006534:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006538:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800653c:	d01a      	beq.n	8006574 <UART_SetConfig+0x2c8>
 800653e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006542:	d81b      	bhi.n	800657c <UART_SetConfig+0x2d0>
 8006544:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006548:	d00c      	beq.n	8006564 <UART_SetConfig+0x2b8>
 800654a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800654e:	d815      	bhi.n	800657c <UART_SetConfig+0x2d0>
 8006550:	2b00      	cmp	r3, #0
 8006552:	d003      	beq.n	800655c <UART_SetConfig+0x2b0>
 8006554:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006558:	d008      	beq.n	800656c <UART_SetConfig+0x2c0>
 800655a:	e00f      	b.n	800657c <UART_SetConfig+0x2d0>
 800655c:	2300      	movs	r3, #0
 800655e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006562:	e022      	b.n	80065aa <UART_SetConfig+0x2fe>
 8006564:	2302      	movs	r3, #2
 8006566:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800656a:	e01e      	b.n	80065aa <UART_SetConfig+0x2fe>
 800656c:	2304      	movs	r3, #4
 800656e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006572:	e01a      	b.n	80065aa <UART_SetConfig+0x2fe>
 8006574:	2308      	movs	r3, #8
 8006576:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800657a:	e016      	b.n	80065aa <UART_SetConfig+0x2fe>
 800657c:	2310      	movs	r3, #16
 800657e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006582:	e012      	b.n	80065aa <UART_SetConfig+0x2fe>
 8006584:	cfff69f3 	.word	0xcfff69f3
 8006588:	40008000 	.word	0x40008000
 800658c:	40013800 	.word	0x40013800
 8006590:	40021000 	.word	0x40021000
 8006594:	40004400 	.word	0x40004400
 8006598:	40004800 	.word	0x40004800
 800659c:	40004c00 	.word	0x40004c00
 80065a0:	40005000 	.word	0x40005000
 80065a4:	2310      	movs	r3, #16
 80065a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4aae      	ldr	r2, [pc, #696]	; (8006868 <UART_SetConfig+0x5bc>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	f040 8097 	bne.w	80066e4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80065b6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80065ba:	2b08      	cmp	r3, #8
 80065bc:	d823      	bhi.n	8006606 <UART_SetConfig+0x35a>
 80065be:	a201      	add	r2, pc, #4	; (adr r2, 80065c4 <UART_SetConfig+0x318>)
 80065c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065c4:	080065e9 	.word	0x080065e9
 80065c8:	08006607 	.word	0x08006607
 80065cc:	080065f1 	.word	0x080065f1
 80065d0:	08006607 	.word	0x08006607
 80065d4:	080065f7 	.word	0x080065f7
 80065d8:	08006607 	.word	0x08006607
 80065dc:	08006607 	.word	0x08006607
 80065e0:	08006607 	.word	0x08006607
 80065e4:	080065ff 	.word	0x080065ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80065e8:	f7fe f9c0 	bl	800496c <HAL_RCC_GetPCLK1Freq>
 80065ec:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80065ee:	e010      	b.n	8006612 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80065f0:	4b9e      	ldr	r3, [pc, #632]	; (800686c <UART_SetConfig+0x5c0>)
 80065f2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80065f4:	e00d      	b.n	8006612 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80065f6:	f7fe f921 	bl	800483c <HAL_RCC_GetSysClockFreq>
 80065fa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80065fc:	e009      	b.n	8006612 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006602:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006604:	e005      	b.n	8006612 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006606:	2300      	movs	r3, #0
 8006608:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800660a:	2301      	movs	r3, #1
 800660c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006610:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006614:	2b00      	cmp	r3, #0
 8006616:	f000 8130 	beq.w	800687a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800661a:	697b      	ldr	r3, [r7, #20]
 800661c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800661e:	4a94      	ldr	r2, [pc, #592]	; (8006870 <UART_SetConfig+0x5c4>)
 8006620:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006624:	461a      	mov	r2, r3
 8006626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006628:	fbb3 f3f2 	udiv	r3, r3, r2
 800662c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	685a      	ldr	r2, [r3, #4]
 8006632:	4613      	mov	r3, r2
 8006634:	005b      	lsls	r3, r3, #1
 8006636:	4413      	add	r3, r2
 8006638:	69ba      	ldr	r2, [r7, #24]
 800663a:	429a      	cmp	r2, r3
 800663c:	d305      	bcc.n	800664a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800663e:	697b      	ldr	r3, [r7, #20]
 8006640:	685b      	ldr	r3, [r3, #4]
 8006642:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006644:	69ba      	ldr	r2, [r7, #24]
 8006646:	429a      	cmp	r2, r3
 8006648:	d903      	bls.n	8006652 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800664a:	2301      	movs	r3, #1
 800664c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006650:	e113      	b.n	800687a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006654:	2200      	movs	r2, #0
 8006656:	60bb      	str	r3, [r7, #8]
 8006658:	60fa      	str	r2, [r7, #12]
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800665e:	4a84      	ldr	r2, [pc, #528]	; (8006870 <UART_SetConfig+0x5c4>)
 8006660:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006664:	b29b      	uxth	r3, r3
 8006666:	2200      	movs	r2, #0
 8006668:	603b      	str	r3, [r7, #0]
 800666a:	607a      	str	r2, [r7, #4]
 800666c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006670:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006674:	f7fa fa62 	bl	8000b3c <__aeabi_uldivmod>
 8006678:	4602      	mov	r2, r0
 800667a:	460b      	mov	r3, r1
 800667c:	4610      	mov	r0, r2
 800667e:	4619      	mov	r1, r3
 8006680:	f04f 0200 	mov.w	r2, #0
 8006684:	f04f 0300 	mov.w	r3, #0
 8006688:	020b      	lsls	r3, r1, #8
 800668a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800668e:	0202      	lsls	r2, r0, #8
 8006690:	6979      	ldr	r1, [r7, #20]
 8006692:	6849      	ldr	r1, [r1, #4]
 8006694:	0849      	lsrs	r1, r1, #1
 8006696:	2000      	movs	r0, #0
 8006698:	460c      	mov	r4, r1
 800669a:	4605      	mov	r5, r0
 800669c:	eb12 0804 	adds.w	r8, r2, r4
 80066a0:	eb43 0905 	adc.w	r9, r3, r5
 80066a4:	697b      	ldr	r3, [r7, #20]
 80066a6:	685b      	ldr	r3, [r3, #4]
 80066a8:	2200      	movs	r2, #0
 80066aa:	469a      	mov	sl, r3
 80066ac:	4693      	mov	fp, r2
 80066ae:	4652      	mov	r2, sl
 80066b0:	465b      	mov	r3, fp
 80066b2:	4640      	mov	r0, r8
 80066b4:	4649      	mov	r1, r9
 80066b6:	f7fa fa41 	bl	8000b3c <__aeabi_uldivmod>
 80066ba:	4602      	mov	r2, r0
 80066bc:	460b      	mov	r3, r1
 80066be:	4613      	mov	r3, r2
 80066c0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80066c2:	6a3b      	ldr	r3, [r7, #32]
 80066c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80066c8:	d308      	bcc.n	80066dc <UART_SetConfig+0x430>
 80066ca:	6a3b      	ldr	r3, [r7, #32]
 80066cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80066d0:	d204      	bcs.n	80066dc <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80066d2:	697b      	ldr	r3, [r7, #20]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	6a3a      	ldr	r2, [r7, #32]
 80066d8:	60da      	str	r2, [r3, #12]
 80066da:	e0ce      	b.n	800687a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80066dc:	2301      	movs	r3, #1
 80066de:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80066e2:	e0ca      	b.n	800687a <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80066e4:	697b      	ldr	r3, [r7, #20]
 80066e6:	69db      	ldr	r3, [r3, #28]
 80066e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066ec:	d166      	bne.n	80067bc <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80066ee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80066f2:	2b08      	cmp	r3, #8
 80066f4:	d827      	bhi.n	8006746 <UART_SetConfig+0x49a>
 80066f6:	a201      	add	r2, pc, #4	; (adr r2, 80066fc <UART_SetConfig+0x450>)
 80066f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066fc:	08006721 	.word	0x08006721
 8006700:	08006729 	.word	0x08006729
 8006704:	08006731 	.word	0x08006731
 8006708:	08006747 	.word	0x08006747
 800670c:	08006737 	.word	0x08006737
 8006710:	08006747 	.word	0x08006747
 8006714:	08006747 	.word	0x08006747
 8006718:	08006747 	.word	0x08006747
 800671c:	0800673f 	.word	0x0800673f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006720:	f7fe f924 	bl	800496c <HAL_RCC_GetPCLK1Freq>
 8006724:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006726:	e014      	b.n	8006752 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006728:	f7fe f936 	bl	8004998 <HAL_RCC_GetPCLK2Freq>
 800672c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800672e:	e010      	b.n	8006752 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006730:	4b4e      	ldr	r3, [pc, #312]	; (800686c <UART_SetConfig+0x5c0>)
 8006732:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006734:	e00d      	b.n	8006752 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006736:	f7fe f881 	bl	800483c <HAL_RCC_GetSysClockFreq>
 800673a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800673c:	e009      	b.n	8006752 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800673e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006742:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006744:	e005      	b.n	8006752 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006746:	2300      	movs	r3, #0
 8006748:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800674a:	2301      	movs	r3, #1
 800674c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006750:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006754:	2b00      	cmp	r3, #0
 8006756:	f000 8090 	beq.w	800687a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800675a:	697b      	ldr	r3, [r7, #20]
 800675c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800675e:	4a44      	ldr	r2, [pc, #272]	; (8006870 <UART_SetConfig+0x5c4>)
 8006760:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006764:	461a      	mov	r2, r3
 8006766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006768:	fbb3 f3f2 	udiv	r3, r3, r2
 800676c:	005a      	lsls	r2, r3, #1
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	685b      	ldr	r3, [r3, #4]
 8006772:	085b      	lsrs	r3, r3, #1
 8006774:	441a      	add	r2, r3
 8006776:	697b      	ldr	r3, [r7, #20]
 8006778:	685b      	ldr	r3, [r3, #4]
 800677a:	fbb2 f3f3 	udiv	r3, r2, r3
 800677e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006780:	6a3b      	ldr	r3, [r7, #32]
 8006782:	2b0f      	cmp	r3, #15
 8006784:	d916      	bls.n	80067b4 <UART_SetConfig+0x508>
 8006786:	6a3b      	ldr	r3, [r7, #32]
 8006788:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800678c:	d212      	bcs.n	80067b4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800678e:	6a3b      	ldr	r3, [r7, #32]
 8006790:	b29b      	uxth	r3, r3
 8006792:	f023 030f 	bic.w	r3, r3, #15
 8006796:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006798:	6a3b      	ldr	r3, [r7, #32]
 800679a:	085b      	lsrs	r3, r3, #1
 800679c:	b29b      	uxth	r3, r3
 800679e:	f003 0307 	and.w	r3, r3, #7
 80067a2:	b29a      	uxth	r2, r3
 80067a4:	8bfb      	ldrh	r3, [r7, #30]
 80067a6:	4313      	orrs	r3, r2
 80067a8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80067aa:	697b      	ldr	r3, [r7, #20]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	8bfa      	ldrh	r2, [r7, #30]
 80067b0:	60da      	str	r2, [r3, #12]
 80067b2:	e062      	b.n	800687a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80067b4:	2301      	movs	r3, #1
 80067b6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80067ba:	e05e      	b.n	800687a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80067bc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80067c0:	2b08      	cmp	r3, #8
 80067c2:	d828      	bhi.n	8006816 <UART_SetConfig+0x56a>
 80067c4:	a201      	add	r2, pc, #4	; (adr r2, 80067cc <UART_SetConfig+0x520>)
 80067c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067ca:	bf00      	nop
 80067cc:	080067f1 	.word	0x080067f1
 80067d0:	080067f9 	.word	0x080067f9
 80067d4:	08006801 	.word	0x08006801
 80067d8:	08006817 	.word	0x08006817
 80067dc:	08006807 	.word	0x08006807
 80067e0:	08006817 	.word	0x08006817
 80067e4:	08006817 	.word	0x08006817
 80067e8:	08006817 	.word	0x08006817
 80067ec:	0800680f 	.word	0x0800680f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80067f0:	f7fe f8bc 	bl	800496c <HAL_RCC_GetPCLK1Freq>
 80067f4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80067f6:	e014      	b.n	8006822 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80067f8:	f7fe f8ce 	bl	8004998 <HAL_RCC_GetPCLK2Freq>
 80067fc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80067fe:	e010      	b.n	8006822 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006800:	4b1a      	ldr	r3, [pc, #104]	; (800686c <UART_SetConfig+0x5c0>)
 8006802:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006804:	e00d      	b.n	8006822 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006806:	f7fe f819 	bl	800483c <HAL_RCC_GetSysClockFreq>
 800680a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800680c:	e009      	b.n	8006822 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800680e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006812:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006814:	e005      	b.n	8006822 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006816:	2300      	movs	r3, #0
 8006818:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800681a:	2301      	movs	r3, #1
 800681c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006820:	bf00      	nop
    }

    if (pclk != 0U)
 8006822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006824:	2b00      	cmp	r3, #0
 8006826:	d028      	beq.n	800687a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006828:	697b      	ldr	r3, [r7, #20]
 800682a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800682c:	4a10      	ldr	r2, [pc, #64]	; (8006870 <UART_SetConfig+0x5c4>)
 800682e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006832:	461a      	mov	r2, r3
 8006834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006836:	fbb3 f2f2 	udiv	r2, r3, r2
 800683a:	697b      	ldr	r3, [r7, #20]
 800683c:	685b      	ldr	r3, [r3, #4]
 800683e:	085b      	lsrs	r3, r3, #1
 8006840:	441a      	add	r2, r3
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	685b      	ldr	r3, [r3, #4]
 8006846:	fbb2 f3f3 	udiv	r3, r2, r3
 800684a:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800684c:	6a3b      	ldr	r3, [r7, #32]
 800684e:	2b0f      	cmp	r3, #15
 8006850:	d910      	bls.n	8006874 <UART_SetConfig+0x5c8>
 8006852:	6a3b      	ldr	r3, [r7, #32]
 8006854:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006858:	d20c      	bcs.n	8006874 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800685a:	6a3b      	ldr	r3, [r7, #32]
 800685c:	b29a      	uxth	r2, r3
 800685e:	697b      	ldr	r3, [r7, #20]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	60da      	str	r2, [r3, #12]
 8006864:	e009      	b.n	800687a <UART_SetConfig+0x5ce>
 8006866:	bf00      	nop
 8006868:	40008000 	.word	0x40008000
 800686c:	00f42400 	.word	0x00f42400
 8006870:	080085e0 	.word	0x080085e0
      }
      else
      {
        ret = HAL_ERROR;
 8006874:	2301      	movs	r3, #1
 8006876:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800687a:	697b      	ldr	r3, [r7, #20]
 800687c:	2201      	movs	r2, #1
 800687e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006882:	697b      	ldr	r3, [r7, #20]
 8006884:	2201      	movs	r2, #1
 8006886:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800688a:	697b      	ldr	r3, [r7, #20]
 800688c:	2200      	movs	r2, #0
 800688e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8006890:	697b      	ldr	r3, [r7, #20]
 8006892:	2200      	movs	r2, #0
 8006894:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8006896:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800689a:	4618      	mov	r0, r3
 800689c:	3730      	adds	r7, #48	; 0x30
 800689e:	46bd      	mov	sp, r7
 80068a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080068a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80068a4:	b480      	push	{r7}
 80068a6:	b083      	sub	sp, #12
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068b0:	f003 0308 	and.w	r3, r3, #8
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d00a      	beq.n	80068ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	685b      	ldr	r3, [r3, #4]
 80068be:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	430a      	orrs	r2, r1
 80068cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068d2:	f003 0301 	and.w	r3, r3, #1
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d00a      	beq.n	80068f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	685b      	ldr	r3, [r3, #4]
 80068e0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	430a      	orrs	r2, r1
 80068ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068f4:	f003 0302 	and.w	r3, r3, #2
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d00a      	beq.n	8006912 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	685b      	ldr	r3, [r3, #4]
 8006902:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	430a      	orrs	r2, r1
 8006910:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006916:	f003 0304 	and.w	r3, r3, #4
 800691a:	2b00      	cmp	r3, #0
 800691c:	d00a      	beq.n	8006934 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	685b      	ldr	r3, [r3, #4]
 8006924:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	430a      	orrs	r2, r1
 8006932:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006938:	f003 0310 	and.w	r3, r3, #16
 800693c:	2b00      	cmp	r3, #0
 800693e:	d00a      	beq.n	8006956 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	689b      	ldr	r3, [r3, #8]
 8006946:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	430a      	orrs	r2, r1
 8006954:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800695a:	f003 0320 	and.w	r3, r3, #32
 800695e:	2b00      	cmp	r3, #0
 8006960:	d00a      	beq.n	8006978 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	689b      	ldr	r3, [r3, #8]
 8006968:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	430a      	orrs	r2, r1
 8006976:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800697c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006980:	2b00      	cmp	r3, #0
 8006982:	d01a      	beq.n	80069ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	685b      	ldr	r3, [r3, #4]
 800698a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	430a      	orrs	r2, r1
 8006998:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800699e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80069a2:	d10a      	bne.n	80069ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	685b      	ldr	r3, [r3, #4]
 80069aa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	430a      	orrs	r2, r1
 80069b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d00a      	beq.n	80069dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	685b      	ldr	r3, [r3, #4]
 80069cc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	430a      	orrs	r2, r1
 80069da:	605a      	str	r2, [r3, #4]
  }
}
 80069dc:	bf00      	nop
 80069de:	370c      	adds	r7, #12
 80069e0:	46bd      	mov	sp, r7
 80069e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e6:	4770      	bx	lr

080069e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b098      	sub	sp, #96	; 0x60
 80069ec:	af02      	add	r7, sp, #8
 80069ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2200      	movs	r2, #0
 80069f4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80069f8:	f7fb fd06 	bl	8002408 <HAL_GetTick>
 80069fc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f003 0308 	and.w	r3, r3, #8
 8006a08:	2b08      	cmp	r3, #8
 8006a0a:	d12f      	bne.n	8006a6c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a0c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006a10:	9300      	str	r3, [sp, #0]
 8006a12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a14:	2200      	movs	r2, #0
 8006a16:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f000 f88e 	bl	8006b3c <UART_WaitOnFlagUntilTimeout>
 8006a20:	4603      	mov	r3, r0
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d022      	beq.n	8006a6c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a2e:	e853 3f00 	ldrex	r3, [r3]
 8006a32:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006a34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a3a:	653b      	str	r3, [r7, #80]	; 0x50
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	461a      	mov	r2, r3
 8006a42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a44:	647b      	str	r3, [r7, #68]	; 0x44
 8006a46:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a48:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006a4a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006a4c:	e841 2300 	strex	r3, r2, [r1]
 8006a50:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006a52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d1e6      	bne.n	8006a26 <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2220      	movs	r2, #32
 8006a5c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2200      	movs	r2, #0
 8006a64:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a68:	2303      	movs	r3, #3
 8006a6a:	e063      	b.n	8006b34 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f003 0304 	and.w	r3, r3, #4
 8006a76:	2b04      	cmp	r3, #4
 8006a78:	d149      	bne.n	8006b0e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a7a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006a7e:	9300      	str	r3, [sp, #0]
 8006a80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a82:	2200      	movs	r2, #0
 8006a84:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006a88:	6878      	ldr	r0, [r7, #4]
 8006a8a:	f000 f857 	bl	8006b3c <UART_WaitOnFlagUntilTimeout>
 8006a8e:	4603      	mov	r3, r0
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d03c      	beq.n	8006b0e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a9c:	e853 3f00 	ldrex	r3, [r3]
 8006aa0:	623b      	str	r3, [r7, #32]
   return(result);
 8006aa2:	6a3b      	ldr	r3, [r7, #32]
 8006aa4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006aa8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	461a      	mov	r2, r3
 8006ab0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ab2:	633b      	str	r3, [r7, #48]	; 0x30
 8006ab4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ab6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006ab8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006aba:	e841 2300 	strex	r3, r2, [r1]
 8006abe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d1e6      	bne.n	8006a94 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	3308      	adds	r3, #8
 8006acc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ace:	693b      	ldr	r3, [r7, #16]
 8006ad0:	e853 3f00 	ldrex	r3, [r3]
 8006ad4:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	f023 0301 	bic.w	r3, r3, #1
 8006adc:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	3308      	adds	r3, #8
 8006ae4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ae6:	61fa      	str	r2, [r7, #28]
 8006ae8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aea:	69b9      	ldr	r1, [r7, #24]
 8006aec:	69fa      	ldr	r2, [r7, #28]
 8006aee:	e841 2300 	strex	r3, r2, [r1]
 8006af2:	617b      	str	r3, [r7, #20]
   return(result);
 8006af4:	697b      	ldr	r3, [r7, #20]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d1e5      	bne.n	8006ac6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2220      	movs	r2, #32
 8006afe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2200      	movs	r2, #0
 8006b06:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b0a:	2303      	movs	r3, #3
 8006b0c:	e012      	b.n	8006b34 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2220      	movs	r2, #32
 8006b12:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2220      	movs	r2, #32
 8006b1a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2200      	movs	r2, #0
 8006b22:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2200      	movs	r2, #0
 8006b28:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006b32:	2300      	movs	r3, #0
}
 8006b34:	4618      	mov	r0, r3
 8006b36:	3758      	adds	r7, #88	; 0x58
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	bd80      	pop	{r7, pc}

08006b3c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b084      	sub	sp, #16
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	60f8      	str	r0, [r7, #12]
 8006b44:	60b9      	str	r1, [r7, #8]
 8006b46:	603b      	str	r3, [r7, #0]
 8006b48:	4613      	mov	r3, r2
 8006b4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b4c:	e049      	b.n	8006be2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b4e:	69bb      	ldr	r3, [r7, #24]
 8006b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b54:	d045      	beq.n	8006be2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b56:	f7fb fc57 	bl	8002408 <HAL_GetTick>
 8006b5a:	4602      	mov	r2, r0
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	1ad3      	subs	r3, r2, r3
 8006b60:	69ba      	ldr	r2, [r7, #24]
 8006b62:	429a      	cmp	r2, r3
 8006b64:	d302      	bcc.n	8006b6c <UART_WaitOnFlagUntilTimeout+0x30>
 8006b66:	69bb      	ldr	r3, [r7, #24]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d101      	bne.n	8006b70 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006b6c:	2303      	movs	r3, #3
 8006b6e:	e048      	b.n	8006c02 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f003 0304 	and.w	r3, r3, #4
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d031      	beq.n	8006be2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	69db      	ldr	r3, [r3, #28]
 8006b84:	f003 0308 	and.w	r3, r3, #8
 8006b88:	2b08      	cmp	r3, #8
 8006b8a:	d110      	bne.n	8006bae <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	2208      	movs	r2, #8
 8006b92:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006b94:	68f8      	ldr	r0, [r7, #12]
 8006b96:	f000 f838 	bl	8006c0a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	2208      	movs	r2, #8
 8006b9e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8006baa:	2301      	movs	r3, #1
 8006bac:	e029      	b.n	8006c02 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	69db      	ldr	r3, [r3, #28]
 8006bb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006bb8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006bbc:	d111      	bne.n	8006be2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006bc6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006bc8:	68f8      	ldr	r0, [r7, #12]
 8006bca:	f000 f81e 	bl	8006c0a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	2220      	movs	r2, #32
 8006bd2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	2200      	movs	r2, #0
 8006bda:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8006bde:	2303      	movs	r3, #3
 8006be0:	e00f      	b.n	8006c02 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	69da      	ldr	r2, [r3, #28]
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	4013      	ands	r3, r2
 8006bec:	68ba      	ldr	r2, [r7, #8]
 8006bee:	429a      	cmp	r2, r3
 8006bf0:	bf0c      	ite	eq
 8006bf2:	2301      	moveq	r3, #1
 8006bf4:	2300      	movne	r3, #0
 8006bf6:	b2db      	uxtb	r3, r3
 8006bf8:	461a      	mov	r2, r3
 8006bfa:	79fb      	ldrb	r3, [r7, #7]
 8006bfc:	429a      	cmp	r2, r3
 8006bfe:	d0a6      	beq.n	8006b4e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006c00:	2300      	movs	r3, #0
}
 8006c02:	4618      	mov	r0, r3
 8006c04:	3710      	adds	r7, #16
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd80      	pop	{r7, pc}

08006c0a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006c0a:	b480      	push	{r7}
 8006c0c:	b095      	sub	sp, #84	; 0x54
 8006c0e:	af00      	add	r7, sp, #0
 8006c10:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c1a:	e853 3f00 	ldrex	r3, [r3]
 8006c1e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c22:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006c26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	461a      	mov	r2, r3
 8006c2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c30:	643b      	str	r3, [r7, #64]	; 0x40
 8006c32:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c34:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006c36:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006c38:	e841 2300 	strex	r3, r2, [r1]
 8006c3c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d1e6      	bne.n	8006c12 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	3308      	adds	r3, #8
 8006c4a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c4c:	6a3b      	ldr	r3, [r7, #32]
 8006c4e:	e853 3f00 	ldrex	r3, [r3]
 8006c52:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c54:	69fb      	ldr	r3, [r7, #28]
 8006c56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c5a:	f023 0301 	bic.w	r3, r3, #1
 8006c5e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	3308      	adds	r3, #8
 8006c66:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006c68:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006c6a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c6c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006c6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c70:	e841 2300 	strex	r3, r2, [r1]
 8006c74:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d1e3      	bne.n	8006c44 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c80:	2b01      	cmp	r3, #1
 8006c82:	d118      	bne.n	8006cb6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	e853 3f00 	ldrex	r3, [r3]
 8006c90:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	f023 0310 	bic.w	r3, r3, #16
 8006c98:	647b      	str	r3, [r7, #68]	; 0x44
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	461a      	mov	r2, r3
 8006ca0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ca2:	61bb      	str	r3, [r7, #24]
 8006ca4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ca6:	6979      	ldr	r1, [r7, #20]
 8006ca8:	69ba      	ldr	r2, [r7, #24]
 8006caa:	e841 2300 	strex	r3, r2, [r1]
 8006cae:	613b      	str	r3, [r7, #16]
   return(result);
 8006cb0:	693b      	ldr	r3, [r7, #16]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d1e6      	bne.n	8006c84 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2220      	movs	r2, #32
 8006cba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006cca:	bf00      	nop
 8006ccc:	3754      	adds	r7, #84	; 0x54
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd4:	4770      	bx	lr
	...

08006cd8 <sbrk_aligned>:
 8006cd8:	b570      	push	{r4, r5, r6, lr}
 8006cda:	4e0e      	ldr	r6, [pc, #56]	; (8006d14 <sbrk_aligned+0x3c>)
 8006cdc:	460c      	mov	r4, r1
 8006cde:	6831      	ldr	r1, [r6, #0]
 8006ce0:	4605      	mov	r5, r0
 8006ce2:	b911      	cbnz	r1, 8006cea <sbrk_aligned+0x12>
 8006ce4:	f000 fb0c 	bl	8007300 <_sbrk_r>
 8006ce8:	6030      	str	r0, [r6, #0]
 8006cea:	4621      	mov	r1, r4
 8006cec:	4628      	mov	r0, r5
 8006cee:	f000 fb07 	bl	8007300 <_sbrk_r>
 8006cf2:	1c43      	adds	r3, r0, #1
 8006cf4:	d00a      	beq.n	8006d0c <sbrk_aligned+0x34>
 8006cf6:	1cc4      	adds	r4, r0, #3
 8006cf8:	f024 0403 	bic.w	r4, r4, #3
 8006cfc:	42a0      	cmp	r0, r4
 8006cfe:	d007      	beq.n	8006d10 <sbrk_aligned+0x38>
 8006d00:	1a21      	subs	r1, r4, r0
 8006d02:	4628      	mov	r0, r5
 8006d04:	f000 fafc 	bl	8007300 <_sbrk_r>
 8006d08:	3001      	adds	r0, #1
 8006d0a:	d101      	bne.n	8006d10 <sbrk_aligned+0x38>
 8006d0c:	f04f 34ff 	mov.w	r4, #4294967295
 8006d10:	4620      	mov	r0, r4
 8006d12:	bd70      	pop	{r4, r5, r6, pc}
 8006d14:	2001931c 	.word	0x2001931c

08006d18 <_malloc_r>:
 8006d18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d1c:	1ccd      	adds	r5, r1, #3
 8006d1e:	f025 0503 	bic.w	r5, r5, #3
 8006d22:	3508      	adds	r5, #8
 8006d24:	2d0c      	cmp	r5, #12
 8006d26:	bf38      	it	cc
 8006d28:	250c      	movcc	r5, #12
 8006d2a:	2d00      	cmp	r5, #0
 8006d2c:	4607      	mov	r7, r0
 8006d2e:	db01      	blt.n	8006d34 <_malloc_r+0x1c>
 8006d30:	42a9      	cmp	r1, r5
 8006d32:	d905      	bls.n	8006d40 <_malloc_r+0x28>
 8006d34:	230c      	movs	r3, #12
 8006d36:	603b      	str	r3, [r7, #0]
 8006d38:	2600      	movs	r6, #0
 8006d3a:	4630      	mov	r0, r6
 8006d3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d40:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006e14 <_malloc_r+0xfc>
 8006d44:	f000 f868 	bl	8006e18 <__malloc_lock>
 8006d48:	f8d8 3000 	ldr.w	r3, [r8]
 8006d4c:	461c      	mov	r4, r3
 8006d4e:	bb5c      	cbnz	r4, 8006da8 <_malloc_r+0x90>
 8006d50:	4629      	mov	r1, r5
 8006d52:	4638      	mov	r0, r7
 8006d54:	f7ff ffc0 	bl	8006cd8 <sbrk_aligned>
 8006d58:	1c43      	adds	r3, r0, #1
 8006d5a:	4604      	mov	r4, r0
 8006d5c:	d155      	bne.n	8006e0a <_malloc_r+0xf2>
 8006d5e:	f8d8 4000 	ldr.w	r4, [r8]
 8006d62:	4626      	mov	r6, r4
 8006d64:	2e00      	cmp	r6, #0
 8006d66:	d145      	bne.n	8006df4 <_malloc_r+0xdc>
 8006d68:	2c00      	cmp	r4, #0
 8006d6a:	d048      	beq.n	8006dfe <_malloc_r+0xe6>
 8006d6c:	6823      	ldr	r3, [r4, #0]
 8006d6e:	4631      	mov	r1, r6
 8006d70:	4638      	mov	r0, r7
 8006d72:	eb04 0903 	add.w	r9, r4, r3
 8006d76:	f000 fac3 	bl	8007300 <_sbrk_r>
 8006d7a:	4581      	cmp	r9, r0
 8006d7c:	d13f      	bne.n	8006dfe <_malloc_r+0xe6>
 8006d7e:	6821      	ldr	r1, [r4, #0]
 8006d80:	1a6d      	subs	r5, r5, r1
 8006d82:	4629      	mov	r1, r5
 8006d84:	4638      	mov	r0, r7
 8006d86:	f7ff ffa7 	bl	8006cd8 <sbrk_aligned>
 8006d8a:	3001      	adds	r0, #1
 8006d8c:	d037      	beq.n	8006dfe <_malloc_r+0xe6>
 8006d8e:	6823      	ldr	r3, [r4, #0]
 8006d90:	442b      	add	r3, r5
 8006d92:	6023      	str	r3, [r4, #0]
 8006d94:	f8d8 3000 	ldr.w	r3, [r8]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d038      	beq.n	8006e0e <_malloc_r+0xf6>
 8006d9c:	685a      	ldr	r2, [r3, #4]
 8006d9e:	42a2      	cmp	r2, r4
 8006da0:	d12b      	bne.n	8006dfa <_malloc_r+0xe2>
 8006da2:	2200      	movs	r2, #0
 8006da4:	605a      	str	r2, [r3, #4]
 8006da6:	e00f      	b.n	8006dc8 <_malloc_r+0xb0>
 8006da8:	6822      	ldr	r2, [r4, #0]
 8006daa:	1b52      	subs	r2, r2, r5
 8006dac:	d41f      	bmi.n	8006dee <_malloc_r+0xd6>
 8006dae:	2a0b      	cmp	r2, #11
 8006db0:	d917      	bls.n	8006de2 <_malloc_r+0xca>
 8006db2:	1961      	adds	r1, r4, r5
 8006db4:	42a3      	cmp	r3, r4
 8006db6:	6025      	str	r5, [r4, #0]
 8006db8:	bf18      	it	ne
 8006dba:	6059      	strne	r1, [r3, #4]
 8006dbc:	6863      	ldr	r3, [r4, #4]
 8006dbe:	bf08      	it	eq
 8006dc0:	f8c8 1000 	streq.w	r1, [r8]
 8006dc4:	5162      	str	r2, [r4, r5]
 8006dc6:	604b      	str	r3, [r1, #4]
 8006dc8:	4638      	mov	r0, r7
 8006dca:	f104 060b 	add.w	r6, r4, #11
 8006dce:	f000 f829 	bl	8006e24 <__malloc_unlock>
 8006dd2:	f026 0607 	bic.w	r6, r6, #7
 8006dd6:	1d23      	adds	r3, r4, #4
 8006dd8:	1af2      	subs	r2, r6, r3
 8006dda:	d0ae      	beq.n	8006d3a <_malloc_r+0x22>
 8006ddc:	1b9b      	subs	r3, r3, r6
 8006dde:	50a3      	str	r3, [r4, r2]
 8006de0:	e7ab      	b.n	8006d3a <_malloc_r+0x22>
 8006de2:	42a3      	cmp	r3, r4
 8006de4:	6862      	ldr	r2, [r4, #4]
 8006de6:	d1dd      	bne.n	8006da4 <_malloc_r+0x8c>
 8006de8:	f8c8 2000 	str.w	r2, [r8]
 8006dec:	e7ec      	b.n	8006dc8 <_malloc_r+0xb0>
 8006dee:	4623      	mov	r3, r4
 8006df0:	6864      	ldr	r4, [r4, #4]
 8006df2:	e7ac      	b.n	8006d4e <_malloc_r+0x36>
 8006df4:	4634      	mov	r4, r6
 8006df6:	6876      	ldr	r6, [r6, #4]
 8006df8:	e7b4      	b.n	8006d64 <_malloc_r+0x4c>
 8006dfa:	4613      	mov	r3, r2
 8006dfc:	e7cc      	b.n	8006d98 <_malloc_r+0x80>
 8006dfe:	230c      	movs	r3, #12
 8006e00:	603b      	str	r3, [r7, #0]
 8006e02:	4638      	mov	r0, r7
 8006e04:	f000 f80e 	bl	8006e24 <__malloc_unlock>
 8006e08:	e797      	b.n	8006d3a <_malloc_r+0x22>
 8006e0a:	6025      	str	r5, [r4, #0]
 8006e0c:	e7dc      	b.n	8006dc8 <_malloc_r+0xb0>
 8006e0e:	605b      	str	r3, [r3, #4]
 8006e10:	deff      	udf	#255	; 0xff
 8006e12:	bf00      	nop
 8006e14:	20019318 	.word	0x20019318

08006e18 <__malloc_lock>:
 8006e18:	4801      	ldr	r0, [pc, #4]	; (8006e20 <__malloc_lock+0x8>)
 8006e1a:	f000 babd 	b.w	8007398 <__retarget_lock_acquire_recursive>
 8006e1e:	bf00      	nop
 8006e20:	20019460 	.word	0x20019460

08006e24 <__malloc_unlock>:
 8006e24:	4801      	ldr	r0, [pc, #4]	; (8006e2c <__malloc_unlock+0x8>)
 8006e26:	f000 bab8 	b.w	800739a <__retarget_lock_release_recursive>
 8006e2a:	bf00      	nop
 8006e2c:	20019460 	.word	0x20019460

08006e30 <std>:
 8006e30:	2300      	movs	r3, #0
 8006e32:	b510      	push	{r4, lr}
 8006e34:	4604      	mov	r4, r0
 8006e36:	e9c0 3300 	strd	r3, r3, [r0]
 8006e3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006e3e:	6083      	str	r3, [r0, #8]
 8006e40:	8181      	strh	r1, [r0, #12]
 8006e42:	6643      	str	r3, [r0, #100]	; 0x64
 8006e44:	81c2      	strh	r2, [r0, #14]
 8006e46:	6183      	str	r3, [r0, #24]
 8006e48:	4619      	mov	r1, r3
 8006e4a:	2208      	movs	r2, #8
 8006e4c:	305c      	adds	r0, #92	; 0x5c
 8006e4e:	f000 fa05 	bl	800725c <memset>
 8006e52:	4b05      	ldr	r3, [pc, #20]	; (8006e68 <std+0x38>)
 8006e54:	6263      	str	r3, [r4, #36]	; 0x24
 8006e56:	4b05      	ldr	r3, [pc, #20]	; (8006e6c <std+0x3c>)
 8006e58:	62a3      	str	r3, [r4, #40]	; 0x28
 8006e5a:	4b05      	ldr	r3, [pc, #20]	; (8006e70 <std+0x40>)
 8006e5c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006e5e:	4b05      	ldr	r3, [pc, #20]	; (8006e74 <std+0x44>)
 8006e60:	6224      	str	r4, [r4, #32]
 8006e62:	6323      	str	r3, [r4, #48]	; 0x30
 8006e64:	bd10      	pop	{r4, pc}
 8006e66:	bf00      	nop
 8006e68:	080070ad 	.word	0x080070ad
 8006e6c:	080070cf 	.word	0x080070cf
 8006e70:	08007107 	.word	0x08007107
 8006e74:	0800712b 	.word	0x0800712b

08006e78 <stdio_exit_handler>:
 8006e78:	4a02      	ldr	r2, [pc, #8]	; (8006e84 <stdio_exit_handler+0xc>)
 8006e7a:	4903      	ldr	r1, [pc, #12]	; (8006e88 <stdio_exit_handler+0x10>)
 8006e7c:	4803      	ldr	r0, [pc, #12]	; (8006e8c <stdio_exit_handler+0x14>)
 8006e7e:	f000 b869 	b.w	8006f54 <_fwalk_sglue>
 8006e82:	bf00      	nop
 8006e84:	2000001c 	.word	0x2000001c
 8006e88:	08007db5 	.word	0x08007db5
 8006e8c:	20000028 	.word	0x20000028

08006e90 <cleanup_stdio>:
 8006e90:	6841      	ldr	r1, [r0, #4]
 8006e92:	4b0c      	ldr	r3, [pc, #48]	; (8006ec4 <cleanup_stdio+0x34>)
 8006e94:	4299      	cmp	r1, r3
 8006e96:	b510      	push	{r4, lr}
 8006e98:	4604      	mov	r4, r0
 8006e9a:	d001      	beq.n	8006ea0 <cleanup_stdio+0x10>
 8006e9c:	f000 ff8a 	bl	8007db4 <_fflush_r>
 8006ea0:	68a1      	ldr	r1, [r4, #8]
 8006ea2:	4b09      	ldr	r3, [pc, #36]	; (8006ec8 <cleanup_stdio+0x38>)
 8006ea4:	4299      	cmp	r1, r3
 8006ea6:	d002      	beq.n	8006eae <cleanup_stdio+0x1e>
 8006ea8:	4620      	mov	r0, r4
 8006eaa:	f000 ff83 	bl	8007db4 <_fflush_r>
 8006eae:	68e1      	ldr	r1, [r4, #12]
 8006eb0:	4b06      	ldr	r3, [pc, #24]	; (8006ecc <cleanup_stdio+0x3c>)
 8006eb2:	4299      	cmp	r1, r3
 8006eb4:	d004      	beq.n	8006ec0 <cleanup_stdio+0x30>
 8006eb6:	4620      	mov	r0, r4
 8006eb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ebc:	f000 bf7a 	b.w	8007db4 <_fflush_r>
 8006ec0:	bd10      	pop	{r4, pc}
 8006ec2:	bf00      	nop
 8006ec4:	20019320 	.word	0x20019320
 8006ec8:	20019388 	.word	0x20019388
 8006ecc:	200193f0 	.word	0x200193f0

08006ed0 <global_stdio_init.part.0>:
 8006ed0:	b510      	push	{r4, lr}
 8006ed2:	4b0b      	ldr	r3, [pc, #44]	; (8006f00 <global_stdio_init.part.0+0x30>)
 8006ed4:	4c0b      	ldr	r4, [pc, #44]	; (8006f04 <global_stdio_init.part.0+0x34>)
 8006ed6:	4a0c      	ldr	r2, [pc, #48]	; (8006f08 <global_stdio_init.part.0+0x38>)
 8006ed8:	601a      	str	r2, [r3, #0]
 8006eda:	4620      	mov	r0, r4
 8006edc:	2200      	movs	r2, #0
 8006ede:	2104      	movs	r1, #4
 8006ee0:	f7ff ffa6 	bl	8006e30 <std>
 8006ee4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006ee8:	2201      	movs	r2, #1
 8006eea:	2109      	movs	r1, #9
 8006eec:	f7ff ffa0 	bl	8006e30 <std>
 8006ef0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006ef4:	2202      	movs	r2, #2
 8006ef6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006efa:	2112      	movs	r1, #18
 8006efc:	f7ff bf98 	b.w	8006e30 <std>
 8006f00:	20019458 	.word	0x20019458
 8006f04:	20019320 	.word	0x20019320
 8006f08:	08006e79 	.word	0x08006e79

08006f0c <__sfp_lock_acquire>:
 8006f0c:	4801      	ldr	r0, [pc, #4]	; (8006f14 <__sfp_lock_acquire+0x8>)
 8006f0e:	f000 ba43 	b.w	8007398 <__retarget_lock_acquire_recursive>
 8006f12:	bf00      	nop
 8006f14:	20019461 	.word	0x20019461

08006f18 <__sfp_lock_release>:
 8006f18:	4801      	ldr	r0, [pc, #4]	; (8006f20 <__sfp_lock_release+0x8>)
 8006f1a:	f000 ba3e 	b.w	800739a <__retarget_lock_release_recursive>
 8006f1e:	bf00      	nop
 8006f20:	20019461 	.word	0x20019461

08006f24 <__sinit>:
 8006f24:	b510      	push	{r4, lr}
 8006f26:	4604      	mov	r4, r0
 8006f28:	f7ff fff0 	bl	8006f0c <__sfp_lock_acquire>
 8006f2c:	6a23      	ldr	r3, [r4, #32]
 8006f2e:	b11b      	cbz	r3, 8006f38 <__sinit+0x14>
 8006f30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f34:	f7ff bff0 	b.w	8006f18 <__sfp_lock_release>
 8006f38:	4b04      	ldr	r3, [pc, #16]	; (8006f4c <__sinit+0x28>)
 8006f3a:	6223      	str	r3, [r4, #32]
 8006f3c:	4b04      	ldr	r3, [pc, #16]	; (8006f50 <__sinit+0x2c>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d1f5      	bne.n	8006f30 <__sinit+0xc>
 8006f44:	f7ff ffc4 	bl	8006ed0 <global_stdio_init.part.0>
 8006f48:	e7f2      	b.n	8006f30 <__sinit+0xc>
 8006f4a:	bf00      	nop
 8006f4c:	08006e91 	.word	0x08006e91
 8006f50:	20019458 	.word	0x20019458

08006f54 <_fwalk_sglue>:
 8006f54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f58:	4607      	mov	r7, r0
 8006f5a:	4688      	mov	r8, r1
 8006f5c:	4614      	mov	r4, r2
 8006f5e:	2600      	movs	r6, #0
 8006f60:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006f64:	f1b9 0901 	subs.w	r9, r9, #1
 8006f68:	d505      	bpl.n	8006f76 <_fwalk_sglue+0x22>
 8006f6a:	6824      	ldr	r4, [r4, #0]
 8006f6c:	2c00      	cmp	r4, #0
 8006f6e:	d1f7      	bne.n	8006f60 <_fwalk_sglue+0xc>
 8006f70:	4630      	mov	r0, r6
 8006f72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f76:	89ab      	ldrh	r3, [r5, #12]
 8006f78:	2b01      	cmp	r3, #1
 8006f7a:	d907      	bls.n	8006f8c <_fwalk_sglue+0x38>
 8006f7c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006f80:	3301      	adds	r3, #1
 8006f82:	d003      	beq.n	8006f8c <_fwalk_sglue+0x38>
 8006f84:	4629      	mov	r1, r5
 8006f86:	4638      	mov	r0, r7
 8006f88:	47c0      	blx	r8
 8006f8a:	4306      	orrs	r6, r0
 8006f8c:	3568      	adds	r5, #104	; 0x68
 8006f8e:	e7e9      	b.n	8006f64 <_fwalk_sglue+0x10>

08006f90 <iprintf>:
 8006f90:	b40f      	push	{r0, r1, r2, r3}
 8006f92:	b507      	push	{r0, r1, r2, lr}
 8006f94:	4906      	ldr	r1, [pc, #24]	; (8006fb0 <iprintf+0x20>)
 8006f96:	ab04      	add	r3, sp, #16
 8006f98:	6808      	ldr	r0, [r1, #0]
 8006f9a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f9e:	6881      	ldr	r1, [r0, #8]
 8006fa0:	9301      	str	r3, [sp, #4]
 8006fa2:	f000 fbd7 	bl	8007754 <_vfiprintf_r>
 8006fa6:	b003      	add	sp, #12
 8006fa8:	f85d eb04 	ldr.w	lr, [sp], #4
 8006fac:	b004      	add	sp, #16
 8006fae:	4770      	bx	lr
 8006fb0:	20000074 	.word	0x20000074

08006fb4 <_puts_r>:
 8006fb4:	6a03      	ldr	r3, [r0, #32]
 8006fb6:	b570      	push	{r4, r5, r6, lr}
 8006fb8:	6884      	ldr	r4, [r0, #8]
 8006fba:	4605      	mov	r5, r0
 8006fbc:	460e      	mov	r6, r1
 8006fbe:	b90b      	cbnz	r3, 8006fc4 <_puts_r+0x10>
 8006fc0:	f7ff ffb0 	bl	8006f24 <__sinit>
 8006fc4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006fc6:	07db      	lsls	r3, r3, #31
 8006fc8:	d405      	bmi.n	8006fd6 <_puts_r+0x22>
 8006fca:	89a3      	ldrh	r3, [r4, #12]
 8006fcc:	0598      	lsls	r0, r3, #22
 8006fce:	d402      	bmi.n	8006fd6 <_puts_r+0x22>
 8006fd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006fd2:	f000 f9e1 	bl	8007398 <__retarget_lock_acquire_recursive>
 8006fd6:	89a3      	ldrh	r3, [r4, #12]
 8006fd8:	0719      	lsls	r1, r3, #28
 8006fda:	d513      	bpl.n	8007004 <_puts_r+0x50>
 8006fdc:	6923      	ldr	r3, [r4, #16]
 8006fde:	b18b      	cbz	r3, 8007004 <_puts_r+0x50>
 8006fe0:	3e01      	subs	r6, #1
 8006fe2:	68a3      	ldr	r3, [r4, #8]
 8006fe4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006fe8:	3b01      	subs	r3, #1
 8006fea:	60a3      	str	r3, [r4, #8]
 8006fec:	b9e9      	cbnz	r1, 800702a <_puts_r+0x76>
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	da2e      	bge.n	8007050 <_puts_r+0x9c>
 8006ff2:	4622      	mov	r2, r4
 8006ff4:	210a      	movs	r1, #10
 8006ff6:	4628      	mov	r0, r5
 8006ff8:	f000 f89b 	bl	8007132 <__swbuf_r>
 8006ffc:	3001      	adds	r0, #1
 8006ffe:	d007      	beq.n	8007010 <_puts_r+0x5c>
 8007000:	250a      	movs	r5, #10
 8007002:	e007      	b.n	8007014 <_puts_r+0x60>
 8007004:	4621      	mov	r1, r4
 8007006:	4628      	mov	r0, r5
 8007008:	f000 f8d0 	bl	80071ac <__swsetup_r>
 800700c:	2800      	cmp	r0, #0
 800700e:	d0e7      	beq.n	8006fe0 <_puts_r+0x2c>
 8007010:	f04f 35ff 	mov.w	r5, #4294967295
 8007014:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007016:	07da      	lsls	r2, r3, #31
 8007018:	d405      	bmi.n	8007026 <_puts_r+0x72>
 800701a:	89a3      	ldrh	r3, [r4, #12]
 800701c:	059b      	lsls	r3, r3, #22
 800701e:	d402      	bmi.n	8007026 <_puts_r+0x72>
 8007020:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007022:	f000 f9ba 	bl	800739a <__retarget_lock_release_recursive>
 8007026:	4628      	mov	r0, r5
 8007028:	bd70      	pop	{r4, r5, r6, pc}
 800702a:	2b00      	cmp	r3, #0
 800702c:	da04      	bge.n	8007038 <_puts_r+0x84>
 800702e:	69a2      	ldr	r2, [r4, #24]
 8007030:	429a      	cmp	r2, r3
 8007032:	dc06      	bgt.n	8007042 <_puts_r+0x8e>
 8007034:	290a      	cmp	r1, #10
 8007036:	d004      	beq.n	8007042 <_puts_r+0x8e>
 8007038:	6823      	ldr	r3, [r4, #0]
 800703a:	1c5a      	adds	r2, r3, #1
 800703c:	6022      	str	r2, [r4, #0]
 800703e:	7019      	strb	r1, [r3, #0]
 8007040:	e7cf      	b.n	8006fe2 <_puts_r+0x2e>
 8007042:	4622      	mov	r2, r4
 8007044:	4628      	mov	r0, r5
 8007046:	f000 f874 	bl	8007132 <__swbuf_r>
 800704a:	3001      	adds	r0, #1
 800704c:	d1c9      	bne.n	8006fe2 <_puts_r+0x2e>
 800704e:	e7df      	b.n	8007010 <_puts_r+0x5c>
 8007050:	6823      	ldr	r3, [r4, #0]
 8007052:	250a      	movs	r5, #10
 8007054:	1c5a      	adds	r2, r3, #1
 8007056:	6022      	str	r2, [r4, #0]
 8007058:	701d      	strb	r5, [r3, #0]
 800705a:	e7db      	b.n	8007014 <_puts_r+0x60>

0800705c <puts>:
 800705c:	4b02      	ldr	r3, [pc, #8]	; (8007068 <puts+0xc>)
 800705e:	4601      	mov	r1, r0
 8007060:	6818      	ldr	r0, [r3, #0]
 8007062:	f7ff bfa7 	b.w	8006fb4 <_puts_r>
 8007066:	bf00      	nop
 8007068:	20000074 	.word	0x20000074

0800706c <siprintf>:
 800706c:	b40e      	push	{r1, r2, r3}
 800706e:	b500      	push	{lr}
 8007070:	b09c      	sub	sp, #112	; 0x70
 8007072:	ab1d      	add	r3, sp, #116	; 0x74
 8007074:	9002      	str	r0, [sp, #8]
 8007076:	9006      	str	r0, [sp, #24]
 8007078:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800707c:	4809      	ldr	r0, [pc, #36]	; (80070a4 <siprintf+0x38>)
 800707e:	9107      	str	r1, [sp, #28]
 8007080:	9104      	str	r1, [sp, #16]
 8007082:	4909      	ldr	r1, [pc, #36]	; (80070a8 <siprintf+0x3c>)
 8007084:	f853 2b04 	ldr.w	r2, [r3], #4
 8007088:	9105      	str	r1, [sp, #20]
 800708a:	6800      	ldr	r0, [r0, #0]
 800708c:	9301      	str	r3, [sp, #4]
 800708e:	a902      	add	r1, sp, #8
 8007090:	f000 fa38 	bl	8007504 <_svfiprintf_r>
 8007094:	9b02      	ldr	r3, [sp, #8]
 8007096:	2200      	movs	r2, #0
 8007098:	701a      	strb	r2, [r3, #0]
 800709a:	b01c      	add	sp, #112	; 0x70
 800709c:	f85d eb04 	ldr.w	lr, [sp], #4
 80070a0:	b003      	add	sp, #12
 80070a2:	4770      	bx	lr
 80070a4:	20000074 	.word	0x20000074
 80070a8:	ffff0208 	.word	0xffff0208

080070ac <__sread>:
 80070ac:	b510      	push	{r4, lr}
 80070ae:	460c      	mov	r4, r1
 80070b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070b4:	f000 f912 	bl	80072dc <_read_r>
 80070b8:	2800      	cmp	r0, #0
 80070ba:	bfab      	itete	ge
 80070bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80070be:	89a3      	ldrhlt	r3, [r4, #12]
 80070c0:	181b      	addge	r3, r3, r0
 80070c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80070c6:	bfac      	ite	ge
 80070c8:	6563      	strge	r3, [r4, #84]	; 0x54
 80070ca:	81a3      	strhlt	r3, [r4, #12]
 80070cc:	bd10      	pop	{r4, pc}

080070ce <__swrite>:
 80070ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070d2:	461f      	mov	r7, r3
 80070d4:	898b      	ldrh	r3, [r1, #12]
 80070d6:	05db      	lsls	r3, r3, #23
 80070d8:	4605      	mov	r5, r0
 80070da:	460c      	mov	r4, r1
 80070dc:	4616      	mov	r6, r2
 80070de:	d505      	bpl.n	80070ec <__swrite+0x1e>
 80070e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070e4:	2302      	movs	r3, #2
 80070e6:	2200      	movs	r2, #0
 80070e8:	f000 f8e6 	bl	80072b8 <_lseek_r>
 80070ec:	89a3      	ldrh	r3, [r4, #12]
 80070ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80070f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80070f6:	81a3      	strh	r3, [r4, #12]
 80070f8:	4632      	mov	r2, r6
 80070fa:	463b      	mov	r3, r7
 80070fc:	4628      	mov	r0, r5
 80070fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007102:	f000 b90d 	b.w	8007320 <_write_r>

08007106 <__sseek>:
 8007106:	b510      	push	{r4, lr}
 8007108:	460c      	mov	r4, r1
 800710a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800710e:	f000 f8d3 	bl	80072b8 <_lseek_r>
 8007112:	1c43      	adds	r3, r0, #1
 8007114:	89a3      	ldrh	r3, [r4, #12]
 8007116:	bf15      	itete	ne
 8007118:	6560      	strne	r0, [r4, #84]	; 0x54
 800711a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800711e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007122:	81a3      	strheq	r3, [r4, #12]
 8007124:	bf18      	it	ne
 8007126:	81a3      	strhne	r3, [r4, #12]
 8007128:	bd10      	pop	{r4, pc}

0800712a <__sclose>:
 800712a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800712e:	f000 b8b3 	b.w	8007298 <_close_r>

08007132 <__swbuf_r>:
 8007132:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007134:	460e      	mov	r6, r1
 8007136:	4614      	mov	r4, r2
 8007138:	4605      	mov	r5, r0
 800713a:	b118      	cbz	r0, 8007144 <__swbuf_r+0x12>
 800713c:	6a03      	ldr	r3, [r0, #32]
 800713e:	b90b      	cbnz	r3, 8007144 <__swbuf_r+0x12>
 8007140:	f7ff fef0 	bl	8006f24 <__sinit>
 8007144:	69a3      	ldr	r3, [r4, #24]
 8007146:	60a3      	str	r3, [r4, #8]
 8007148:	89a3      	ldrh	r3, [r4, #12]
 800714a:	071a      	lsls	r2, r3, #28
 800714c:	d525      	bpl.n	800719a <__swbuf_r+0x68>
 800714e:	6923      	ldr	r3, [r4, #16]
 8007150:	b31b      	cbz	r3, 800719a <__swbuf_r+0x68>
 8007152:	6823      	ldr	r3, [r4, #0]
 8007154:	6922      	ldr	r2, [r4, #16]
 8007156:	1a98      	subs	r0, r3, r2
 8007158:	6963      	ldr	r3, [r4, #20]
 800715a:	b2f6      	uxtb	r6, r6
 800715c:	4283      	cmp	r3, r0
 800715e:	4637      	mov	r7, r6
 8007160:	dc04      	bgt.n	800716c <__swbuf_r+0x3a>
 8007162:	4621      	mov	r1, r4
 8007164:	4628      	mov	r0, r5
 8007166:	f000 fe25 	bl	8007db4 <_fflush_r>
 800716a:	b9e0      	cbnz	r0, 80071a6 <__swbuf_r+0x74>
 800716c:	68a3      	ldr	r3, [r4, #8]
 800716e:	3b01      	subs	r3, #1
 8007170:	60a3      	str	r3, [r4, #8]
 8007172:	6823      	ldr	r3, [r4, #0]
 8007174:	1c5a      	adds	r2, r3, #1
 8007176:	6022      	str	r2, [r4, #0]
 8007178:	701e      	strb	r6, [r3, #0]
 800717a:	6962      	ldr	r2, [r4, #20]
 800717c:	1c43      	adds	r3, r0, #1
 800717e:	429a      	cmp	r2, r3
 8007180:	d004      	beq.n	800718c <__swbuf_r+0x5a>
 8007182:	89a3      	ldrh	r3, [r4, #12]
 8007184:	07db      	lsls	r3, r3, #31
 8007186:	d506      	bpl.n	8007196 <__swbuf_r+0x64>
 8007188:	2e0a      	cmp	r6, #10
 800718a:	d104      	bne.n	8007196 <__swbuf_r+0x64>
 800718c:	4621      	mov	r1, r4
 800718e:	4628      	mov	r0, r5
 8007190:	f000 fe10 	bl	8007db4 <_fflush_r>
 8007194:	b938      	cbnz	r0, 80071a6 <__swbuf_r+0x74>
 8007196:	4638      	mov	r0, r7
 8007198:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800719a:	4621      	mov	r1, r4
 800719c:	4628      	mov	r0, r5
 800719e:	f000 f805 	bl	80071ac <__swsetup_r>
 80071a2:	2800      	cmp	r0, #0
 80071a4:	d0d5      	beq.n	8007152 <__swbuf_r+0x20>
 80071a6:	f04f 37ff 	mov.w	r7, #4294967295
 80071aa:	e7f4      	b.n	8007196 <__swbuf_r+0x64>

080071ac <__swsetup_r>:
 80071ac:	b538      	push	{r3, r4, r5, lr}
 80071ae:	4b2a      	ldr	r3, [pc, #168]	; (8007258 <__swsetup_r+0xac>)
 80071b0:	4605      	mov	r5, r0
 80071b2:	6818      	ldr	r0, [r3, #0]
 80071b4:	460c      	mov	r4, r1
 80071b6:	b118      	cbz	r0, 80071c0 <__swsetup_r+0x14>
 80071b8:	6a03      	ldr	r3, [r0, #32]
 80071ba:	b90b      	cbnz	r3, 80071c0 <__swsetup_r+0x14>
 80071bc:	f7ff feb2 	bl	8006f24 <__sinit>
 80071c0:	89a3      	ldrh	r3, [r4, #12]
 80071c2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80071c6:	0718      	lsls	r0, r3, #28
 80071c8:	d422      	bmi.n	8007210 <__swsetup_r+0x64>
 80071ca:	06d9      	lsls	r1, r3, #27
 80071cc:	d407      	bmi.n	80071de <__swsetup_r+0x32>
 80071ce:	2309      	movs	r3, #9
 80071d0:	602b      	str	r3, [r5, #0]
 80071d2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80071d6:	81a3      	strh	r3, [r4, #12]
 80071d8:	f04f 30ff 	mov.w	r0, #4294967295
 80071dc:	e034      	b.n	8007248 <__swsetup_r+0x9c>
 80071de:	0758      	lsls	r0, r3, #29
 80071e0:	d512      	bpl.n	8007208 <__swsetup_r+0x5c>
 80071e2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80071e4:	b141      	cbz	r1, 80071f8 <__swsetup_r+0x4c>
 80071e6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80071ea:	4299      	cmp	r1, r3
 80071ec:	d002      	beq.n	80071f4 <__swsetup_r+0x48>
 80071ee:	4628      	mov	r0, r5
 80071f0:	f000 f8e2 	bl	80073b8 <_free_r>
 80071f4:	2300      	movs	r3, #0
 80071f6:	6363      	str	r3, [r4, #52]	; 0x34
 80071f8:	89a3      	ldrh	r3, [r4, #12]
 80071fa:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80071fe:	81a3      	strh	r3, [r4, #12]
 8007200:	2300      	movs	r3, #0
 8007202:	6063      	str	r3, [r4, #4]
 8007204:	6923      	ldr	r3, [r4, #16]
 8007206:	6023      	str	r3, [r4, #0]
 8007208:	89a3      	ldrh	r3, [r4, #12]
 800720a:	f043 0308 	orr.w	r3, r3, #8
 800720e:	81a3      	strh	r3, [r4, #12]
 8007210:	6923      	ldr	r3, [r4, #16]
 8007212:	b94b      	cbnz	r3, 8007228 <__swsetup_r+0x7c>
 8007214:	89a3      	ldrh	r3, [r4, #12]
 8007216:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800721a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800721e:	d003      	beq.n	8007228 <__swsetup_r+0x7c>
 8007220:	4621      	mov	r1, r4
 8007222:	4628      	mov	r0, r5
 8007224:	f000 fe14 	bl	8007e50 <__smakebuf_r>
 8007228:	89a0      	ldrh	r0, [r4, #12]
 800722a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800722e:	f010 0301 	ands.w	r3, r0, #1
 8007232:	d00a      	beq.n	800724a <__swsetup_r+0x9e>
 8007234:	2300      	movs	r3, #0
 8007236:	60a3      	str	r3, [r4, #8]
 8007238:	6963      	ldr	r3, [r4, #20]
 800723a:	425b      	negs	r3, r3
 800723c:	61a3      	str	r3, [r4, #24]
 800723e:	6923      	ldr	r3, [r4, #16]
 8007240:	b943      	cbnz	r3, 8007254 <__swsetup_r+0xa8>
 8007242:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007246:	d1c4      	bne.n	80071d2 <__swsetup_r+0x26>
 8007248:	bd38      	pop	{r3, r4, r5, pc}
 800724a:	0781      	lsls	r1, r0, #30
 800724c:	bf58      	it	pl
 800724e:	6963      	ldrpl	r3, [r4, #20]
 8007250:	60a3      	str	r3, [r4, #8]
 8007252:	e7f4      	b.n	800723e <__swsetup_r+0x92>
 8007254:	2000      	movs	r0, #0
 8007256:	e7f7      	b.n	8007248 <__swsetup_r+0x9c>
 8007258:	20000074 	.word	0x20000074

0800725c <memset>:
 800725c:	4402      	add	r2, r0
 800725e:	4603      	mov	r3, r0
 8007260:	4293      	cmp	r3, r2
 8007262:	d100      	bne.n	8007266 <memset+0xa>
 8007264:	4770      	bx	lr
 8007266:	f803 1b01 	strb.w	r1, [r3], #1
 800726a:	e7f9      	b.n	8007260 <memset+0x4>

0800726c <strstr>:
 800726c:	780a      	ldrb	r2, [r1, #0]
 800726e:	b570      	push	{r4, r5, r6, lr}
 8007270:	b96a      	cbnz	r2, 800728e <strstr+0x22>
 8007272:	bd70      	pop	{r4, r5, r6, pc}
 8007274:	429a      	cmp	r2, r3
 8007276:	d109      	bne.n	800728c <strstr+0x20>
 8007278:	460c      	mov	r4, r1
 800727a:	4605      	mov	r5, r0
 800727c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8007280:	2b00      	cmp	r3, #0
 8007282:	d0f6      	beq.n	8007272 <strstr+0x6>
 8007284:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8007288:	429e      	cmp	r6, r3
 800728a:	d0f7      	beq.n	800727c <strstr+0x10>
 800728c:	3001      	adds	r0, #1
 800728e:	7803      	ldrb	r3, [r0, #0]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d1ef      	bne.n	8007274 <strstr+0x8>
 8007294:	4618      	mov	r0, r3
 8007296:	e7ec      	b.n	8007272 <strstr+0x6>

08007298 <_close_r>:
 8007298:	b538      	push	{r3, r4, r5, lr}
 800729a:	4d06      	ldr	r5, [pc, #24]	; (80072b4 <_close_r+0x1c>)
 800729c:	2300      	movs	r3, #0
 800729e:	4604      	mov	r4, r0
 80072a0:	4608      	mov	r0, r1
 80072a2:	602b      	str	r3, [r5, #0]
 80072a4:	f7fa fbe8 	bl	8001a78 <_close>
 80072a8:	1c43      	adds	r3, r0, #1
 80072aa:	d102      	bne.n	80072b2 <_close_r+0x1a>
 80072ac:	682b      	ldr	r3, [r5, #0]
 80072ae:	b103      	cbz	r3, 80072b2 <_close_r+0x1a>
 80072b0:	6023      	str	r3, [r4, #0]
 80072b2:	bd38      	pop	{r3, r4, r5, pc}
 80072b4:	2001945c 	.word	0x2001945c

080072b8 <_lseek_r>:
 80072b8:	b538      	push	{r3, r4, r5, lr}
 80072ba:	4d07      	ldr	r5, [pc, #28]	; (80072d8 <_lseek_r+0x20>)
 80072bc:	4604      	mov	r4, r0
 80072be:	4608      	mov	r0, r1
 80072c0:	4611      	mov	r1, r2
 80072c2:	2200      	movs	r2, #0
 80072c4:	602a      	str	r2, [r5, #0]
 80072c6:	461a      	mov	r2, r3
 80072c8:	f7fa fbfd 	bl	8001ac6 <_lseek>
 80072cc:	1c43      	adds	r3, r0, #1
 80072ce:	d102      	bne.n	80072d6 <_lseek_r+0x1e>
 80072d0:	682b      	ldr	r3, [r5, #0]
 80072d2:	b103      	cbz	r3, 80072d6 <_lseek_r+0x1e>
 80072d4:	6023      	str	r3, [r4, #0]
 80072d6:	bd38      	pop	{r3, r4, r5, pc}
 80072d8:	2001945c 	.word	0x2001945c

080072dc <_read_r>:
 80072dc:	b538      	push	{r3, r4, r5, lr}
 80072de:	4d07      	ldr	r5, [pc, #28]	; (80072fc <_read_r+0x20>)
 80072e0:	4604      	mov	r4, r0
 80072e2:	4608      	mov	r0, r1
 80072e4:	4611      	mov	r1, r2
 80072e6:	2200      	movs	r2, #0
 80072e8:	602a      	str	r2, [r5, #0]
 80072ea:	461a      	mov	r2, r3
 80072ec:	f7fa fb8b 	bl	8001a06 <_read>
 80072f0:	1c43      	adds	r3, r0, #1
 80072f2:	d102      	bne.n	80072fa <_read_r+0x1e>
 80072f4:	682b      	ldr	r3, [r5, #0]
 80072f6:	b103      	cbz	r3, 80072fa <_read_r+0x1e>
 80072f8:	6023      	str	r3, [r4, #0]
 80072fa:	bd38      	pop	{r3, r4, r5, pc}
 80072fc:	2001945c 	.word	0x2001945c

08007300 <_sbrk_r>:
 8007300:	b538      	push	{r3, r4, r5, lr}
 8007302:	4d06      	ldr	r5, [pc, #24]	; (800731c <_sbrk_r+0x1c>)
 8007304:	2300      	movs	r3, #0
 8007306:	4604      	mov	r4, r0
 8007308:	4608      	mov	r0, r1
 800730a:	602b      	str	r3, [r5, #0]
 800730c:	f7fa fbe8 	bl	8001ae0 <_sbrk>
 8007310:	1c43      	adds	r3, r0, #1
 8007312:	d102      	bne.n	800731a <_sbrk_r+0x1a>
 8007314:	682b      	ldr	r3, [r5, #0]
 8007316:	b103      	cbz	r3, 800731a <_sbrk_r+0x1a>
 8007318:	6023      	str	r3, [r4, #0]
 800731a:	bd38      	pop	{r3, r4, r5, pc}
 800731c:	2001945c 	.word	0x2001945c

08007320 <_write_r>:
 8007320:	b538      	push	{r3, r4, r5, lr}
 8007322:	4d07      	ldr	r5, [pc, #28]	; (8007340 <_write_r+0x20>)
 8007324:	4604      	mov	r4, r0
 8007326:	4608      	mov	r0, r1
 8007328:	4611      	mov	r1, r2
 800732a:	2200      	movs	r2, #0
 800732c:	602a      	str	r2, [r5, #0]
 800732e:	461a      	mov	r2, r3
 8007330:	f7fa fb86 	bl	8001a40 <_write>
 8007334:	1c43      	adds	r3, r0, #1
 8007336:	d102      	bne.n	800733e <_write_r+0x1e>
 8007338:	682b      	ldr	r3, [r5, #0]
 800733a:	b103      	cbz	r3, 800733e <_write_r+0x1e>
 800733c:	6023      	str	r3, [r4, #0]
 800733e:	bd38      	pop	{r3, r4, r5, pc}
 8007340:	2001945c 	.word	0x2001945c

08007344 <__errno>:
 8007344:	4b01      	ldr	r3, [pc, #4]	; (800734c <__errno+0x8>)
 8007346:	6818      	ldr	r0, [r3, #0]
 8007348:	4770      	bx	lr
 800734a:	bf00      	nop
 800734c:	20000074 	.word	0x20000074

08007350 <__libc_init_array>:
 8007350:	b570      	push	{r4, r5, r6, lr}
 8007352:	4d0d      	ldr	r5, [pc, #52]	; (8007388 <__libc_init_array+0x38>)
 8007354:	4c0d      	ldr	r4, [pc, #52]	; (800738c <__libc_init_array+0x3c>)
 8007356:	1b64      	subs	r4, r4, r5
 8007358:	10a4      	asrs	r4, r4, #2
 800735a:	2600      	movs	r6, #0
 800735c:	42a6      	cmp	r6, r4
 800735e:	d109      	bne.n	8007374 <__libc_init_array+0x24>
 8007360:	4d0b      	ldr	r5, [pc, #44]	; (8007390 <__libc_init_array+0x40>)
 8007362:	4c0c      	ldr	r4, [pc, #48]	; (8007394 <__libc_init_array+0x44>)
 8007364:	f000 fe6c 	bl	8008040 <_init>
 8007368:	1b64      	subs	r4, r4, r5
 800736a:	10a4      	asrs	r4, r4, #2
 800736c:	2600      	movs	r6, #0
 800736e:	42a6      	cmp	r6, r4
 8007370:	d105      	bne.n	800737e <__libc_init_array+0x2e>
 8007372:	bd70      	pop	{r4, r5, r6, pc}
 8007374:	f855 3b04 	ldr.w	r3, [r5], #4
 8007378:	4798      	blx	r3
 800737a:	3601      	adds	r6, #1
 800737c:	e7ee      	b.n	800735c <__libc_init_array+0xc>
 800737e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007382:	4798      	blx	r3
 8007384:	3601      	adds	r6, #1
 8007386:	e7f2      	b.n	800736e <__libc_init_array+0x1e>
 8007388:	08008634 	.word	0x08008634
 800738c:	08008634 	.word	0x08008634
 8007390:	08008634 	.word	0x08008634
 8007394:	08008638 	.word	0x08008638

08007398 <__retarget_lock_acquire_recursive>:
 8007398:	4770      	bx	lr

0800739a <__retarget_lock_release_recursive>:
 800739a:	4770      	bx	lr

0800739c <memcpy>:
 800739c:	440a      	add	r2, r1
 800739e:	4291      	cmp	r1, r2
 80073a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80073a4:	d100      	bne.n	80073a8 <memcpy+0xc>
 80073a6:	4770      	bx	lr
 80073a8:	b510      	push	{r4, lr}
 80073aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80073ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80073b2:	4291      	cmp	r1, r2
 80073b4:	d1f9      	bne.n	80073aa <memcpy+0xe>
 80073b6:	bd10      	pop	{r4, pc}

080073b8 <_free_r>:
 80073b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80073ba:	2900      	cmp	r1, #0
 80073bc:	d044      	beq.n	8007448 <_free_r+0x90>
 80073be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80073c2:	9001      	str	r0, [sp, #4]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	f1a1 0404 	sub.w	r4, r1, #4
 80073ca:	bfb8      	it	lt
 80073cc:	18e4      	addlt	r4, r4, r3
 80073ce:	f7ff fd23 	bl	8006e18 <__malloc_lock>
 80073d2:	4a1e      	ldr	r2, [pc, #120]	; (800744c <_free_r+0x94>)
 80073d4:	9801      	ldr	r0, [sp, #4]
 80073d6:	6813      	ldr	r3, [r2, #0]
 80073d8:	b933      	cbnz	r3, 80073e8 <_free_r+0x30>
 80073da:	6063      	str	r3, [r4, #4]
 80073dc:	6014      	str	r4, [r2, #0]
 80073de:	b003      	add	sp, #12
 80073e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80073e4:	f7ff bd1e 	b.w	8006e24 <__malloc_unlock>
 80073e8:	42a3      	cmp	r3, r4
 80073ea:	d908      	bls.n	80073fe <_free_r+0x46>
 80073ec:	6825      	ldr	r5, [r4, #0]
 80073ee:	1961      	adds	r1, r4, r5
 80073f0:	428b      	cmp	r3, r1
 80073f2:	bf01      	itttt	eq
 80073f4:	6819      	ldreq	r1, [r3, #0]
 80073f6:	685b      	ldreq	r3, [r3, #4]
 80073f8:	1949      	addeq	r1, r1, r5
 80073fa:	6021      	streq	r1, [r4, #0]
 80073fc:	e7ed      	b.n	80073da <_free_r+0x22>
 80073fe:	461a      	mov	r2, r3
 8007400:	685b      	ldr	r3, [r3, #4]
 8007402:	b10b      	cbz	r3, 8007408 <_free_r+0x50>
 8007404:	42a3      	cmp	r3, r4
 8007406:	d9fa      	bls.n	80073fe <_free_r+0x46>
 8007408:	6811      	ldr	r1, [r2, #0]
 800740a:	1855      	adds	r5, r2, r1
 800740c:	42a5      	cmp	r5, r4
 800740e:	d10b      	bne.n	8007428 <_free_r+0x70>
 8007410:	6824      	ldr	r4, [r4, #0]
 8007412:	4421      	add	r1, r4
 8007414:	1854      	adds	r4, r2, r1
 8007416:	42a3      	cmp	r3, r4
 8007418:	6011      	str	r1, [r2, #0]
 800741a:	d1e0      	bne.n	80073de <_free_r+0x26>
 800741c:	681c      	ldr	r4, [r3, #0]
 800741e:	685b      	ldr	r3, [r3, #4]
 8007420:	6053      	str	r3, [r2, #4]
 8007422:	440c      	add	r4, r1
 8007424:	6014      	str	r4, [r2, #0]
 8007426:	e7da      	b.n	80073de <_free_r+0x26>
 8007428:	d902      	bls.n	8007430 <_free_r+0x78>
 800742a:	230c      	movs	r3, #12
 800742c:	6003      	str	r3, [r0, #0]
 800742e:	e7d6      	b.n	80073de <_free_r+0x26>
 8007430:	6825      	ldr	r5, [r4, #0]
 8007432:	1961      	adds	r1, r4, r5
 8007434:	428b      	cmp	r3, r1
 8007436:	bf04      	itt	eq
 8007438:	6819      	ldreq	r1, [r3, #0]
 800743a:	685b      	ldreq	r3, [r3, #4]
 800743c:	6063      	str	r3, [r4, #4]
 800743e:	bf04      	itt	eq
 8007440:	1949      	addeq	r1, r1, r5
 8007442:	6021      	streq	r1, [r4, #0]
 8007444:	6054      	str	r4, [r2, #4]
 8007446:	e7ca      	b.n	80073de <_free_r+0x26>
 8007448:	b003      	add	sp, #12
 800744a:	bd30      	pop	{r4, r5, pc}
 800744c:	20019318 	.word	0x20019318

08007450 <__ssputs_r>:
 8007450:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007454:	688e      	ldr	r6, [r1, #8]
 8007456:	461f      	mov	r7, r3
 8007458:	42be      	cmp	r6, r7
 800745a:	680b      	ldr	r3, [r1, #0]
 800745c:	4682      	mov	sl, r0
 800745e:	460c      	mov	r4, r1
 8007460:	4690      	mov	r8, r2
 8007462:	d82c      	bhi.n	80074be <__ssputs_r+0x6e>
 8007464:	898a      	ldrh	r2, [r1, #12]
 8007466:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800746a:	d026      	beq.n	80074ba <__ssputs_r+0x6a>
 800746c:	6965      	ldr	r5, [r4, #20]
 800746e:	6909      	ldr	r1, [r1, #16]
 8007470:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007474:	eba3 0901 	sub.w	r9, r3, r1
 8007478:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800747c:	1c7b      	adds	r3, r7, #1
 800747e:	444b      	add	r3, r9
 8007480:	106d      	asrs	r5, r5, #1
 8007482:	429d      	cmp	r5, r3
 8007484:	bf38      	it	cc
 8007486:	461d      	movcc	r5, r3
 8007488:	0553      	lsls	r3, r2, #21
 800748a:	d527      	bpl.n	80074dc <__ssputs_r+0x8c>
 800748c:	4629      	mov	r1, r5
 800748e:	f7ff fc43 	bl	8006d18 <_malloc_r>
 8007492:	4606      	mov	r6, r0
 8007494:	b360      	cbz	r0, 80074f0 <__ssputs_r+0xa0>
 8007496:	6921      	ldr	r1, [r4, #16]
 8007498:	464a      	mov	r2, r9
 800749a:	f7ff ff7f 	bl	800739c <memcpy>
 800749e:	89a3      	ldrh	r3, [r4, #12]
 80074a0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80074a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074a8:	81a3      	strh	r3, [r4, #12]
 80074aa:	6126      	str	r6, [r4, #16]
 80074ac:	6165      	str	r5, [r4, #20]
 80074ae:	444e      	add	r6, r9
 80074b0:	eba5 0509 	sub.w	r5, r5, r9
 80074b4:	6026      	str	r6, [r4, #0]
 80074b6:	60a5      	str	r5, [r4, #8]
 80074b8:	463e      	mov	r6, r7
 80074ba:	42be      	cmp	r6, r7
 80074bc:	d900      	bls.n	80074c0 <__ssputs_r+0x70>
 80074be:	463e      	mov	r6, r7
 80074c0:	6820      	ldr	r0, [r4, #0]
 80074c2:	4632      	mov	r2, r6
 80074c4:	4641      	mov	r1, r8
 80074c6:	f000 fcff 	bl	8007ec8 <memmove>
 80074ca:	68a3      	ldr	r3, [r4, #8]
 80074cc:	1b9b      	subs	r3, r3, r6
 80074ce:	60a3      	str	r3, [r4, #8]
 80074d0:	6823      	ldr	r3, [r4, #0]
 80074d2:	4433      	add	r3, r6
 80074d4:	6023      	str	r3, [r4, #0]
 80074d6:	2000      	movs	r0, #0
 80074d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074dc:	462a      	mov	r2, r5
 80074de:	f000 fd2f 	bl	8007f40 <_realloc_r>
 80074e2:	4606      	mov	r6, r0
 80074e4:	2800      	cmp	r0, #0
 80074e6:	d1e0      	bne.n	80074aa <__ssputs_r+0x5a>
 80074e8:	6921      	ldr	r1, [r4, #16]
 80074ea:	4650      	mov	r0, sl
 80074ec:	f7ff ff64 	bl	80073b8 <_free_r>
 80074f0:	230c      	movs	r3, #12
 80074f2:	f8ca 3000 	str.w	r3, [sl]
 80074f6:	89a3      	ldrh	r3, [r4, #12]
 80074f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074fc:	81a3      	strh	r3, [r4, #12]
 80074fe:	f04f 30ff 	mov.w	r0, #4294967295
 8007502:	e7e9      	b.n	80074d8 <__ssputs_r+0x88>

08007504 <_svfiprintf_r>:
 8007504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007508:	4698      	mov	r8, r3
 800750a:	898b      	ldrh	r3, [r1, #12]
 800750c:	061b      	lsls	r3, r3, #24
 800750e:	b09d      	sub	sp, #116	; 0x74
 8007510:	4607      	mov	r7, r0
 8007512:	460d      	mov	r5, r1
 8007514:	4614      	mov	r4, r2
 8007516:	d50e      	bpl.n	8007536 <_svfiprintf_r+0x32>
 8007518:	690b      	ldr	r3, [r1, #16]
 800751a:	b963      	cbnz	r3, 8007536 <_svfiprintf_r+0x32>
 800751c:	2140      	movs	r1, #64	; 0x40
 800751e:	f7ff fbfb 	bl	8006d18 <_malloc_r>
 8007522:	6028      	str	r0, [r5, #0]
 8007524:	6128      	str	r0, [r5, #16]
 8007526:	b920      	cbnz	r0, 8007532 <_svfiprintf_r+0x2e>
 8007528:	230c      	movs	r3, #12
 800752a:	603b      	str	r3, [r7, #0]
 800752c:	f04f 30ff 	mov.w	r0, #4294967295
 8007530:	e0d0      	b.n	80076d4 <_svfiprintf_r+0x1d0>
 8007532:	2340      	movs	r3, #64	; 0x40
 8007534:	616b      	str	r3, [r5, #20]
 8007536:	2300      	movs	r3, #0
 8007538:	9309      	str	r3, [sp, #36]	; 0x24
 800753a:	2320      	movs	r3, #32
 800753c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007540:	f8cd 800c 	str.w	r8, [sp, #12]
 8007544:	2330      	movs	r3, #48	; 0x30
 8007546:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80076ec <_svfiprintf_r+0x1e8>
 800754a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800754e:	f04f 0901 	mov.w	r9, #1
 8007552:	4623      	mov	r3, r4
 8007554:	469a      	mov	sl, r3
 8007556:	f813 2b01 	ldrb.w	r2, [r3], #1
 800755a:	b10a      	cbz	r2, 8007560 <_svfiprintf_r+0x5c>
 800755c:	2a25      	cmp	r2, #37	; 0x25
 800755e:	d1f9      	bne.n	8007554 <_svfiprintf_r+0x50>
 8007560:	ebba 0b04 	subs.w	fp, sl, r4
 8007564:	d00b      	beq.n	800757e <_svfiprintf_r+0x7a>
 8007566:	465b      	mov	r3, fp
 8007568:	4622      	mov	r2, r4
 800756a:	4629      	mov	r1, r5
 800756c:	4638      	mov	r0, r7
 800756e:	f7ff ff6f 	bl	8007450 <__ssputs_r>
 8007572:	3001      	adds	r0, #1
 8007574:	f000 80a9 	beq.w	80076ca <_svfiprintf_r+0x1c6>
 8007578:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800757a:	445a      	add	r2, fp
 800757c:	9209      	str	r2, [sp, #36]	; 0x24
 800757e:	f89a 3000 	ldrb.w	r3, [sl]
 8007582:	2b00      	cmp	r3, #0
 8007584:	f000 80a1 	beq.w	80076ca <_svfiprintf_r+0x1c6>
 8007588:	2300      	movs	r3, #0
 800758a:	f04f 32ff 	mov.w	r2, #4294967295
 800758e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007592:	f10a 0a01 	add.w	sl, sl, #1
 8007596:	9304      	str	r3, [sp, #16]
 8007598:	9307      	str	r3, [sp, #28]
 800759a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800759e:	931a      	str	r3, [sp, #104]	; 0x68
 80075a0:	4654      	mov	r4, sl
 80075a2:	2205      	movs	r2, #5
 80075a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075a8:	4850      	ldr	r0, [pc, #320]	; (80076ec <_svfiprintf_r+0x1e8>)
 80075aa:	f7f8 fe31 	bl	8000210 <memchr>
 80075ae:	9a04      	ldr	r2, [sp, #16]
 80075b0:	b9d8      	cbnz	r0, 80075ea <_svfiprintf_r+0xe6>
 80075b2:	06d0      	lsls	r0, r2, #27
 80075b4:	bf44      	itt	mi
 80075b6:	2320      	movmi	r3, #32
 80075b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80075bc:	0711      	lsls	r1, r2, #28
 80075be:	bf44      	itt	mi
 80075c0:	232b      	movmi	r3, #43	; 0x2b
 80075c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80075c6:	f89a 3000 	ldrb.w	r3, [sl]
 80075ca:	2b2a      	cmp	r3, #42	; 0x2a
 80075cc:	d015      	beq.n	80075fa <_svfiprintf_r+0xf6>
 80075ce:	9a07      	ldr	r2, [sp, #28]
 80075d0:	4654      	mov	r4, sl
 80075d2:	2000      	movs	r0, #0
 80075d4:	f04f 0c0a 	mov.w	ip, #10
 80075d8:	4621      	mov	r1, r4
 80075da:	f811 3b01 	ldrb.w	r3, [r1], #1
 80075de:	3b30      	subs	r3, #48	; 0x30
 80075e0:	2b09      	cmp	r3, #9
 80075e2:	d94d      	bls.n	8007680 <_svfiprintf_r+0x17c>
 80075e4:	b1b0      	cbz	r0, 8007614 <_svfiprintf_r+0x110>
 80075e6:	9207      	str	r2, [sp, #28]
 80075e8:	e014      	b.n	8007614 <_svfiprintf_r+0x110>
 80075ea:	eba0 0308 	sub.w	r3, r0, r8
 80075ee:	fa09 f303 	lsl.w	r3, r9, r3
 80075f2:	4313      	orrs	r3, r2
 80075f4:	9304      	str	r3, [sp, #16]
 80075f6:	46a2      	mov	sl, r4
 80075f8:	e7d2      	b.n	80075a0 <_svfiprintf_r+0x9c>
 80075fa:	9b03      	ldr	r3, [sp, #12]
 80075fc:	1d19      	adds	r1, r3, #4
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	9103      	str	r1, [sp, #12]
 8007602:	2b00      	cmp	r3, #0
 8007604:	bfbb      	ittet	lt
 8007606:	425b      	neglt	r3, r3
 8007608:	f042 0202 	orrlt.w	r2, r2, #2
 800760c:	9307      	strge	r3, [sp, #28]
 800760e:	9307      	strlt	r3, [sp, #28]
 8007610:	bfb8      	it	lt
 8007612:	9204      	strlt	r2, [sp, #16]
 8007614:	7823      	ldrb	r3, [r4, #0]
 8007616:	2b2e      	cmp	r3, #46	; 0x2e
 8007618:	d10c      	bne.n	8007634 <_svfiprintf_r+0x130>
 800761a:	7863      	ldrb	r3, [r4, #1]
 800761c:	2b2a      	cmp	r3, #42	; 0x2a
 800761e:	d134      	bne.n	800768a <_svfiprintf_r+0x186>
 8007620:	9b03      	ldr	r3, [sp, #12]
 8007622:	1d1a      	adds	r2, r3, #4
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	9203      	str	r2, [sp, #12]
 8007628:	2b00      	cmp	r3, #0
 800762a:	bfb8      	it	lt
 800762c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007630:	3402      	adds	r4, #2
 8007632:	9305      	str	r3, [sp, #20]
 8007634:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80076fc <_svfiprintf_r+0x1f8>
 8007638:	7821      	ldrb	r1, [r4, #0]
 800763a:	2203      	movs	r2, #3
 800763c:	4650      	mov	r0, sl
 800763e:	f7f8 fde7 	bl	8000210 <memchr>
 8007642:	b138      	cbz	r0, 8007654 <_svfiprintf_r+0x150>
 8007644:	9b04      	ldr	r3, [sp, #16]
 8007646:	eba0 000a 	sub.w	r0, r0, sl
 800764a:	2240      	movs	r2, #64	; 0x40
 800764c:	4082      	lsls	r2, r0
 800764e:	4313      	orrs	r3, r2
 8007650:	3401      	adds	r4, #1
 8007652:	9304      	str	r3, [sp, #16]
 8007654:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007658:	4825      	ldr	r0, [pc, #148]	; (80076f0 <_svfiprintf_r+0x1ec>)
 800765a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800765e:	2206      	movs	r2, #6
 8007660:	f7f8 fdd6 	bl	8000210 <memchr>
 8007664:	2800      	cmp	r0, #0
 8007666:	d038      	beq.n	80076da <_svfiprintf_r+0x1d6>
 8007668:	4b22      	ldr	r3, [pc, #136]	; (80076f4 <_svfiprintf_r+0x1f0>)
 800766a:	bb1b      	cbnz	r3, 80076b4 <_svfiprintf_r+0x1b0>
 800766c:	9b03      	ldr	r3, [sp, #12]
 800766e:	3307      	adds	r3, #7
 8007670:	f023 0307 	bic.w	r3, r3, #7
 8007674:	3308      	adds	r3, #8
 8007676:	9303      	str	r3, [sp, #12]
 8007678:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800767a:	4433      	add	r3, r6
 800767c:	9309      	str	r3, [sp, #36]	; 0x24
 800767e:	e768      	b.n	8007552 <_svfiprintf_r+0x4e>
 8007680:	fb0c 3202 	mla	r2, ip, r2, r3
 8007684:	460c      	mov	r4, r1
 8007686:	2001      	movs	r0, #1
 8007688:	e7a6      	b.n	80075d8 <_svfiprintf_r+0xd4>
 800768a:	2300      	movs	r3, #0
 800768c:	3401      	adds	r4, #1
 800768e:	9305      	str	r3, [sp, #20]
 8007690:	4619      	mov	r1, r3
 8007692:	f04f 0c0a 	mov.w	ip, #10
 8007696:	4620      	mov	r0, r4
 8007698:	f810 2b01 	ldrb.w	r2, [r0], #1
 800769c:	3a30      	subs	r2, #48	; 0x30
 800769e:	2a09      	cmp	r2, #9
 80076a0:	d903      	bls.n	80076aa <_svfiprintf_r+0x1a6>
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d0c6      	beq.n	8007634 <_svfiprintf_r+0x130>
 80076a6:	9105      	str	r1, [sp, #20]
 80076a8:	e7c4      	b.n	8007634 <_svfiprintf_r+0x130>
 80076aa:	fb0c 2101 	mla	r1, ip, r1, r2
 80076ae:	4604      	mov	r4, r0
 80076b0:	2301      	movs	r3, #1
 80076b2:	e7f0      	b.n	8007696 <_svfiprintf_r+0x192>
 80076b4:	ab03      	add	r3, sp, #12
 80076b6:	9300      	str	r3, [sp, #0]
 80076b8:	462a      	mov	r2, r5
 80076ba:	4b0f      	ldr	r3, [pc, #60]	; (80076f8 <_svfiprintf_r+0x1f4>)
 80076bc:	a904      	add	r1, sp, #16
 80076be:	4638      	mov	r0, r7
 80076c0:	f3af 8000 	nop.w
 80076c4:	1c42      	adds	r2, r0, #1
 80076c6:	4606      	mov	r6, r0
 80076c8:	d1d6      	bne.n	8007678 <_svfiprintf_r+0x174>
 80076ca:	89ab      	ldrh	r3, [r5, #12]
 80076cc:	065b      	lsls	r3, r3, #25
 80076ce:	f53f af2d 	bmi.w	800752c <_svfiprintf_r+0x28>
 80076d2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80076d4:	b01d      	add	sp, #116	; 0x74
 80076d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076da:	ab03      	add	r3, sp, #12
 80076dc:	9300      	str	r3, [sp, #0]
 80076de:	462a      	mov	r2, r5
 80076e0:	4b05      	ldr	r3, [pc, #20]	; (80076f8 <_svfiprintf_r+0x1f4>)
 80076e2:	a904      	add	r1, sp, #16
 80076e4:	4638      	mov	r0, r7
 80076e6:	f000 f9bd 	bl	8007a64 <_printf_i>
 80076ea:	e7eb      	b.n	80076c4 <_svfiprintf_r+0x1c0>
 80076ec:	080085f8 	.word	0x080085f8
 80076f0:	08008602 	.word	0x08008602
 80076f4:	00000000 	.word	0x00000000
 80076f8:	08007451 	.word	0x08007451
 80076fc:	080085fe 	.word	0x080085fe

08007700 <__sfputc_r>:
 8007700:	6893      	ldr	r3, [r2, #8]
 8007702:	3b01      	subs	r3, #1
 8007704:	2b00      	cmp	r3, #0
 8007706:	b410      	push	{r4}
 8007708:	6093      	str	r3, [r2, #8]
 800770a:	da08      	bge.n	800771e <__sfputc_r+0x1e>
 800770c:	6994      	ldr	r4, [r2, #24]
 800770e:	42a3      	cmp	r3, r4
 8007710:	db01      	blt.n	8007716 <__sfputc_r+0x16>
 8007712:	290a      	cmp	r1, #10
 8007714:	d103      	bne.n	800771e <__sfputc_r+0x1e>
 8007716:	f85d 4b04 	ldr.w	r4, [sp], #4
 800771a:	f7ff bd0a 	b.w	8007132 <__swbuf_r>
 800771e:	6813      	ldr	r3, [r2, #0]
 8007720:	1c58      	adds	r0, r3, #1
 8007722:	6010      	str	r0, [r2, #0]
 8007724:	7019      	strb	r1, [r3, #0]
 8007726:	4608      	mov	r0, r1
 8007728:	f85d 4b04 	ldr.w	r4, [sp], #4
 800772c:	4770      	bx	lr

0800772e <__sfputs_r>:
 800772e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007730:	4606      	mov	r6, r0
 8007732:	460f      	mov	r7, r1
 8007734:	4614      	mov	r4, r2
 8007736:	18d5      	adds	r5, r2, r3
 8007738:	42ac      	cmp	r4, r5
 800773a:	d101      	bne.n	8007740 <__sfputs_r+0x12>
 800773c:	2000      	movs	r0, #0
 800773e:	e007      	b.n	8007750 <__sfputs_r+0x22>
 8007740:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007744:	463a      	mov	r2, r7
 8007746:	4630      	mov	r0, r6
 8007748:	f7ff ffda 	bl	8007700 <__sfputc_r>
 800774c:	1c43      	adds	r3, r0, #1
 800774e:	d1f3      	bne.n	8007738 <__sfputs_r+0xa>
 8007750:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007754 <_vfiprintf_r>:
 8007754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007758:	460d      	mov	r5, r1
 800775a:	b09d      	sub	sp, #116	; 0x74
 800775c:	4614      	mov	r4, r2
 800775e:	4698      	mov	r8, r3
 8007760:	4606      	mov	r6, r0
 8007762:	b118      	cbz	r0, 800776c <_vfiprintf_r+0x18>
 8007764:	6a03      	ldr	r3, [r0, #32]
 8007766:	b90b      	cbnz	r3, 800776c <_vfiprintf_r+0x18>
 8007768:	f7ff fbdc 	bl	8006f24 <__sinit>
 800776c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800776e:	07d9      	lsls	r1, r3, #31
 8007770:	d405      	bmi.n	800777e <_vfiprintf_r+0x2a>
 8007772:	89ab      	ldrh	r3, [r5, #12]
 8007774:	059a      	lsls	r2, r3, #22
 8007776:	d402      	bmi.n	800777e <_vfiprintf_r+0x2a>
 8007778:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800777a:	f7ff fe0d 	bl	8007398 <__retarget_lock_acquire_recursive>
 800777e:	89ab      	ldrh	r3, [r5, #12]
 8007780:	071b      	lsls	r3, r3, #28
 8007782:	d501      	bpl.n	8007788 <_vfiprintf_r+0x34>
 8007784:	692b      	ldr	r3, [r5, #16]
 8007786:	b99b      	cbnz	r3, 80077b0 <_vfiprintf_r+0x5c>
 8007788:	4629      	mov	r1, r5
 800778a:	4630      	mov	r0, r6
 800778c:	f7ff fd0e 	bl	80071ac <__swsetup_r>
 8007790:	b170      	cbz	r0, 80077b0 <_vfiprintf_r+0x5c>
 8007792:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007794:	07dc      	lsls	r4, r3, #31
 8007796:	d504      	bpl.n	80077a2 <_vfiprintf_r+0x4e>
 8007798:	f04f 30ff 	mov.w	r0, #4294967295
 800779c:	b01d      	add	sp, #116	; 0x74
 800779e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077a2:	89ab      	ldrh	r3, [r5, #12]
 80077a4:	0598      	lsls	r0, r3, #22
 80077a6:	d4f7      	bmi.n	8007798 <_vfiprintf_r+0x44>
 80077a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80077aa:	f7ff fdf6 	bl	800739a <__retarget_lock_release_recursive>
 80077ae:	e7f3      	b.n	8007798 <_vfiprintf_r+0x44>
 80077b0:	2300      	movs	r3, #0
 80077b2:	9309      	str	r3, [sp, #36]	; 0x24
 80077b4:	2320      	movs	r3, #32
 80077b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80077ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80077be:	2330      	movs	r3, #48	; 0x30
 80077c0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8007974 <_vfiprintf_r+0x220>
 80077c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80077c8:	f04f 0901 	mov.w	r9, #1
 80077cc:	4623      	mov	r3, r4
 80077ce:	469a      	mov	sl, r3
 80077d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80077d4:	b10a      	cbz	r2, 80077da <_vfiprintf_r+0x86>
 80077d6:	2a25      	cmp	r2, #37	; 0x25
 80077d8:	d1f9      	bne.n	80077ce <_vfiprintf_r+0x7a>
 80077da:	ebba 0b04 	subs.w	fp, sl, r4
 80077de:	d00b      	beq.n	80077f8 <_vfiprintf_r+0xa4>
 80077e0:	465b      	mov	r3, fp
 80077e2:	4622      	mov	r2, r4
 80077e4:	4629      	mov	r1, r5
 80077e6:	4630      	mov	r0, r6
 80077e8:	f7ff ffa1 	bl	800772e <__sfputs_r>
 80077ec:	3001      	adds	r0, #1
 80077ee:	f000 80a9 	beq.w	8007944 <_vfiprintf_r+0x1f0>
 80077f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80077f4:	445a      	add	r2, fp
 80077f6:	9209      	str	r2, [sp, #36]	; 0x24
 80077f8:	f89a 3000 	ldrb.w	r3, [sl]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	f000 80a1 	beq.w	8007944 <_vfiprintf_r+0x1f0>
 8007802:	2300      	movs	r3, #0
 8007804:	f04f 32ff 	mov.w	r2, #4294967295
 8007808:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800780c:	f10a 0a01 	add.w	sl, sl, #1
 8007810:	9304      	str	r3, [sp, #16]
 8007812:	9307      	str	r3, [sp, #28]
 8007814:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007818:	931a      	str	r3, [sp, #104]	; 0x68
 800781a:	4654      	mov	r4, sl
 800781c:	2205      	movs	r2, #5
 800781e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007822:	4854      	ldr	r0, [pc, #336]	; (8007974 <_vfiprintf_r+0x220>)
 8007824:	f7f8 fcf4 	bl	8000210 <memchr>
 8007828:	9a04      	ldr	r2, [sp, #16]
 800782a:	b9d8      	cbnz	r0, 8007864 <_vfiprintf_r+0x110>
 800782c:	06d1      	lsls	r1, r2, #27
 800782e:	bf44      	itt	mi
 8007830:	2320      	movmi	r3, #32
 8007832:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007836:	0713      	lsls	r3, r2, #28
 8007838:	bf44      	itt	mi
 800783a:	232b      	movmi	r3, #43	; 0x2b
 800783c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007840:	f89a 3000 	ldrb.w	r3, [sl]
 8007844:	2b2a      	cmp	r3, #42	; 0x2a
 8007846:	d015      	beq.n	8007874 <_vfiprintf_r+0x120>
 8007848:	9a07      	ldr	r2, [sp, #28]
 800784a:	4654      	mov	r4, sl
 800784c:	2000      	movs	r0, #0
 800784e:	f04f 0c0a 	mov.w	ip, #10
 8007852:	4621      	mov	r1, r4
 8007854:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007858:	3b30      	subs	r3, #48	; 0x30
 800785a:	2b09      	cmp	r3, #9
 800785c:	d94d      	bls.n	80078fa <_vfiprintf_r+0x1a6>
 800785e:	b1b0      	cbz	r0, 800788e <_vfiprintf_r+0x13a>
 8007860:	9207      	str	r2, [sp, #28]
 8007862:	e014      	b.n	800788e <_vfiprintf_r+0x13a>
 8007864:	eba0 0308 	sub.w	r3, r0, r8
 8007868:	fa09 f303 	lsl.w	r3, r9, r3
 800786c:	4313      	orrs	r3, r2
 800786e:	9304      	str	r3, [sp, #16]
 8007870:	46a2      	mov	sl, r4
 8007872:	e7d2      	b.n	800781a <_vfiprintf_r+0xc6>
 8007874:	9b03      	ldr	r3, [sp, #12]
 8007876:	1d19      	adds	r1, r3, #4
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	9103      	str	r1, [sp, #12]
 800787c:	2b00      	cmp	r3, #0
 800787e:	bfbb      	ittet	lt
 8007880:	425b      	neglt	r3, r3
 8007882:	f042 0202 	orrlt.w	r2, r2, #2
 8007886:	9307      	strge	r3, [sp, #28]
 8007888:	9307      	strlt	r3, [sp, #28]
 800788a:	bfb8      	it	lt
 800788c:	9204      	strlt	r2, [sp, #16]
 800788e:	7823      	ldrb	r3, [r4, #0]
 8007890:	2b2e      	cmp	r3, #46	; 0x2e
 8007892:	d10c      	bne.n	80078ae <_vfiprintf_r+0x15a>
 8007894:	7863      	ldrb	r3, [r4, #1]
 8007896:	2b2a      	cmp	r3, #42	; 0x2a
 8007898:	d134      	bne.n	8007904 <_vfiprintf_r+0x1b0>
 800789a:	9b03      	ldr	r3, [sp, #12]
 800789c:	1d1a      	adds	r2, r3, #4
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	9203      	str	r2, [sp, #12]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	bfb8      	it	lt
 80078a6:	f04f 33ff 	movlt.w	r3, #4294967295
 80078aa:	3402      	adds	r4, #2
 80078ac:	9305      	str	r3, [sp, #20]
 80078ae:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8007984 <_vfiprintf_r+0x230>
 80078b2:	7821      	ldrb	r1, [r4, #0]
 80078b4:	2203      	movs	r2, #3
 80078b6:	4650      	mov	r0, sl
 80078b8:	f7f8 fcaa 	bl	8000210 <memchr>
 80078bc:	b138      	cbz	r0, 80078ce <_vfiprintf_r+0x17a>
 80078be:	9b04      	ldr	r3, [sp, #16]
 80078c0:	eba0 000a 	sub.w	r0, r0, sl
 80078c4:	2240      	movs	r2, #64	; 0x40
 80078c6:	4082      	lsls	r2, r0
 80078c8:	4313      	orrs	r3, r2
 80078ca:	3401      	adds	r4, #1
 80078cc:	9304      	str	r3, [sp, #16]
 80078ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078d2:	4829      	ldr	r0, [pc, #164]	; (8007978 <_vfiprintf_r+0x224>)
 80078d4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80078d8:	2206      	movs	r2, #6
 80078da:	f7f8 fc99 	bl	8000210 <memchr>
 80078de:	2800      	cmp	r0, #0
 80078e0:	d03f      	beq.n	8007962 <_vfiprintf_r+0x20e>
 80078e2:	4b26      	ldr	r3, [pc, #152]	; (800797c <_vfiprintf_r+0x228>)
 80078e4:	bb1b      	cbnz	r3, 800792e <_vfiprintf_r+0x1da>
 80078e6:	9b03      	ldr	r3, [sp, #12]
 80078e8:	3307      	adds	r3, #7
 80078ea:	f023 0307 	bic.w	r3, r3, #7
 80078ee:	3308      	adds	r3, #8
 80078f0:	9303      	str	r3, [sp, #12]
 80078f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078f4:	443b      	add	r3, r7
 80078f6:	9309      	str	r3, [sp, #36]	; 0x24
 80078f8:	e768      	b.n	80077cc <_vfiprintf_r+0x78>
 80078fa:	fb0c 3202 	mla	r2, ip, r2, r3
 80078fe:	460c      	mov	r4, r1
 8007900:	2001      	movs	r0, #1
 8007902:	e7a6      	b.n	8007852 <_vfiprintf_r+0xfe>
 8007904:	2300      	movs	r3, #0
 8007906:	3401      	adds	r4, #1
 8007908:	9305      	str	r3, [sp, #20]
 800790a:	4619      	mov	r1, r3
 800790c:	f04f 0c0a 	mov.w	ip, #10
 8007910:	4620      	mov	r0, r4
 8007912:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007916:	3a30      	subs	r2, #48	; 0x30
 8007918:	2a09      	cmp	r2, #9
 800791a:	d903      	bls.n	8007924 <_vfiprintf_r+0x1d0>
 800791c:	2b00      	cmp	r3, #0
 800791e:	d0c6      	beq.n	80078ae <_vfiprintf_r+0x15a>
 8007920:	9105      	str	r1, [sp, #20]
 8007922:	e7c4      	b.n	80078ae <_vfiprintf_r+0x15a>
 8007924:	fb0c 2101 	mla	r1, ip, r1, r2
 8007928:	4604      	mov	r4, r0
 800792a:	2301      	movs	r3, #1
 800792c:	e7f0      	b.n	8007910 <_vfiprintf_r+0x1bc>
 800792e:	ab03      	add	r3, sp, #12
 8007930:	9300      	str	r3, [sp, #0]
 8007932:	462a      	mov	r2, r5
 8007934:	4b12      	ldr	r3, [pc, #72]	; (8007980 <_vfiprintf_r+0x22c>)
 8007936:	a904      	add	r1, sp, #16
 8007938:	4630      	mov	r0, r6
 800793a:	f3af 8000 	nop.w
 800793e:	4607      	mov	r7, r0
 8007940:	1c78      	adds	r0, r7, #1
 8007942:	d1d6      	bne.n	80078f2 <_vfiprintf_r+0x19e>
 8007944:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007946:	07d9      	lsls	r1, r3, #31
 8007948:	d405      	bmi.n	8007956 <_vfiprintf_r+0x202>
 800794a:	89ab      	ldrh	r3, [r5, #12]
 800794c:	059a      	lsls	r2, r3, #22
 800794e:	d402      	bmi.n	8007956 <_vfiprintf_r+0x202>
 8007950:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007952:	f7ff fd22 	bl	800739a <__retarget_lock_release_recursive>
 8007956:	89ab      	ldrh	r3, [r5, #12]
 8007958:	065b      	lsls	r3, r3, #25
 800795a:	f53f af1d 	bmi.w	8007798 <_vfiprintf_r+0x44>
 800795e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007960:	e71c      	b.n	800779c <_vfiprintf_r+0x48>
 8007962:	ab03      	add	r3, sp, #12
 8007964:	9300      	str	r3, [sp, #0]
 8007966:	462a      	mov	r2, r5
 8007968:	4b05      	ldr	r3, [pc, #20]	; (8007980 <_vfiprintf_r+0x22c>)
 800796a:	a904      	add	r1, sp, #16
 800796c:	4630      	mov	r0, r6
 800796e:	f000 f879 	bl	8007a64 <_printf_i>
 8007972:	e7e4      	b.n	800793e <_vfiprintf_r+0x1ea>
 8007974:	080085f8 	.word	0x080085f8
 8007978:	08008602 	.word	0x08008602
 800797c:	00000000 	.word	0x00000000
 8007980:	0800772f 	.word	0x0800772f
 8007984:	080085fe 	.word	0x080085fe

08007988 <_printf_common>:
 8007988:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800798c:	4616      	mov	r6, r2
 800798e:	4699      	mov	r9, r3
 8007990:	688a      	ldr	r2, [r1, #8]
 8007992:	690b      	ldr	r3, [r1, #16]
 8007994:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007998:	4293      	cmp	r3, r2
 800799a:	bfb8      	it	lt
 800799c:	4613      	movlt	r3, r2
 800799e:	6033      	str	r3, [r6, #0]
 80079a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80079a4:	4607      	mov	r7, r0
 80079a6:	460c      	mov	r4, r1
 80079a8:	b10a      	cbz	r2, 80079ae <_printf_common+0x26>
 80079aa:	3301      	adds	r3, #1
 80079ac:	6033      	str	r3, [r6, #0]
 80079ae:	6823      	ldr	r3, [r4, #0]
 80079b0:	0699      	lsls	r1, r3, #26
 80079b2:	bf42      	ittt	mi
 80079b4:	6833      	ldrmi	r3, [r6, #0]
 80079b6:	3302      	addmi	r3, #2
 80079b8:	6033      	strmi	r3, [r6, #0]
 80079ba:	6825      	ldr	r5, [r4, #0]
 80079bc:	f015 0506 	ands.w	r5, r5, #6
 80079c0:	d106      	bne.n	80079d0 <_printf_common+0x48>
 80079c2:	f104 0a19 	add.w	sl, r4, #25
 80079c6:	68e3      	ldr	r3, [r4, #12]
 80079c8:	6832      	ldr	r2, [r6, #0]
 80079ca:	1a9b      	subs	r3, r3, r2
 80079cc:	42ab      	cmp	r3, r5
 80079ce:	dc26      	bgt.n	8007a1e <_printf_common+0x96>
 80079d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80079d4:	1e13      	subs	r3, r2, #0
 80079d6:	6822      	ldr	r2, [r4, #0]
 80079d8:	bf18      	it	ne
 80079da:	2301      	movne	r3, #1
 80079dc:	0692      	lsls	r2, r2, #26
 80079de:	d42b      	bmi.n	8007a38 <_printf_common+0xb0>
 80079e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80079e4:	4649      	mov	r1, r9
 80079e6:	4638      	mov	r0, r7
 80079e8:	47c0      	blx	r8
 80079ea:	3001      	adds	r0, #1
 80079ec:	d01e      	beq.n	8007a2c <_printf_common+0xa4>
 80079ee:	6823      	ldr	r3, [r4, #0]
 80079f0:	6922      	ldr	r2, [r4, #16]
 80079f2:	f003 0306 	and.w	r3, r3, #6
 80079f6:	2b04      	cmp	r3, #4
 80079f8:	bf02      	ittt	eq
 80079fa:	68e5      	ldreq	r5, [r4, #12]
 80079fc:	6833      	ldreq	r3, [r6, #0]
 80079fe:	1aed      	subeq	r5, r5, r3
 8007a00:	68a3      	ldr	r3, [r4, #8]
 8007a02:	bf0c      	ite	eq
 8007a04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007a08:	2500      	movne	r5, #0
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	bfc4      	itt	gt
 8007a0e:	1a9b      	subgt	r3, r3, r2
 8007a10:	18ed      	addgt	r5, r5, r3
 8007a12:	2600      	movs	r6, #0
 8007a14:	341a      	adds	r4, #26
 8007a16:	42b5      	cmp	r5, r6
 8007a18:	d11a      	bne.n	8007a50 <_printf_common+0xc8>
 8007a1a:	2000      	movs	r0, #0
 8007a1c:	e008      	b.n	8007a30 <_printf_common+0xa8>
 8007a1e:	2301      	movs	r3, #1
 8007a20:	4652      	mov	r2, sl
 8007a22:	4649      	mov	r1, r9
 8007a24:	4638      	mov	r0, r7
 8007a26:	47c0      	blx	r8
 8007a28:	3001      	adds	r0, #1
 8007a2a:	d103      	bne.n	8007a34 <_printf_common+0xac>
 8007a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8007a30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a34:	3501      	adds	r5, #1
 8007a36:	e7c6      	b.n	80079c6 <_printf_common+0x3e>
 8007a38:	18e1      	adds	r1, r4, r3
 8007a3a:	1c5a      	adds	r2, r3, #1
 8007a3c:	2030      	movs	r0, #48	; 0x30
 8007a3e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007a42:	4422      	add	r2, r4
 8007a44:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007a48:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007a4c:	3302      	adds	r3, #2
 8007a4e:	e7c7      	b.n	80079e0 <_printf_common+0x58>
 8007a50:	2301      	movs	r3, #1
 8007a52:	4622      	mov	r2, r4
 8007a54:	4649      	mov	r1, r9
 8007a56:	4638      	mov	r0, r7
 8007a58:	47c0      	blx	r8
 8007a5a:	3001      	adds	r0, #1
 8007a5c:	d0e6      	beq.n	8007a2c <_printf_common+0xa4>
 8007a5e:	3601      	adds	r6, #1
 8007a60:	e7d9      	b.n	8007a16 <_printf_common+0x8e>
	...

08007a64 <_printf_i>:
 8007a64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007a68:	7e0f      	ldrb	r7, [r1, #24]
 8007a6a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007a6c:	2f78      	cmp	r7, #120	; 0x78
 8007a6e:	4691      	mov	r9, r2
 8007a70:	4680      	mov	r8, r0
 8007a72:	460c      	mov	r4, r1
 8007a74:	469a      	mov	sl, r3
 8007a76:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007a7a:	d807      	bhi.n	8007a8c <_printf_i+0x28>
 8007a7c:	2f62      	cmp	r7, #98	; 0x62
 8007a7e:	d80a      	bhi.n	8007a96 <_printf_i+0x32>
 8007a80:	2f00      	cmp	r7, #0
 8007a82:	f000 80d4 	beq.w	8007c2e <_printf_i+0x1ca>
 8007a86:	2f58      	cmp	r7, #88	; 0x58
 8007a88:	f000 80c0 	beq.w	8007c0c <_printf_i+0x1a8>
 8007a8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007a90:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007a94:	e03a      	b.n	8007b0c <_printf_i+0xa8>
 8007a96:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007a9a:	2b15      	cmp	r3, #21
 8007a9c:	d8f6      	bhi.n	8007a8c <_printf_i+0x28>
 8007a9e:	a101      	add	r1, pc, #4	; (adr r1, 8007aa4 <_printf_i+0x40>)
 8007aa0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007aa4:	08007afd 	.word	0x08007afd
 8007aa8:	08007b11 	.word	0x08007b11
 8007aac:	08007a8d 	.word	0x08007a8d
 8007ab0:	08007a8d 	.word	0x08007a8d
 8007ab4:	08007a8d 	.word	0x08007a8d
 8007ab8:	08007a8d 	.word	0x08007a8d
 8007abc:	08007b11 	.word	0x08007b11
 8007ac0:	08007a8d 	.word	0x08007a8d
 8007ac4:	08007a8d 	.word	0x08007a8d
 8007ac8:	08007a8d 	.word	0x08007a8d
 8007acc:	08007a8d 	.word	0x08007a8d
 8007ad0:	08007c15 	.word	0x08007c15
 8007ad4:	08007b3d 	.word	0x08007b3d
 8007ad8:	08007bcf 	.word	0x08007bcf
 8007adc:	08007a8d 	.word	0x08007a8d
 8007ae0:	08007a8d 	.word	0x08007a8d
 8007ae4:	08007c37 	.word	0x08007c37
 8007ae8:	08007a8d 	.word	0x08007a8d
 8007aec:	08007b3d 	.word	0x08007b3d
 8007af0:	08007a8d 	.word	0x08007a8d
 8007af4:	08007a8d 	.word	0x08007a8d
 8007af8:	08007bd7 	.word	0x08007bd7
 8007afc:	682b      	ldr	r3, [r5, #0]
 8007afe:	1d1a      	adds	r2, r3, #4
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	602a      	str	r2, [r5, #0]
 8007b04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007b08:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007b0c:	2301      	movs	r3, #1
 8007b0e:	e09f      	b.n	8007c50 <_printf_i+0x1ec>
 8007b10:	6820      	ldr	r0, [r4, #0]
 8007b12:	682b      	ldr	r3, [r5, #0]
 8007b14:	0607      	lsls	r7, r0, #24
 8007b16:	f103 0104 	add.w	r1, r3, #4
 8007b1a:	6029      	str	r1, [r5, #0]
 8007b1c:	d501      	bpl.n	8007b22 <_printf_i+0xbe>
 8007b1e:	681e      	ldr	r6, [r3, #0]
 8007b20:	e003      	b.n	8007b2a <_printf_i+0xc6>
 8007b22:	0646      	lsls	r6, r0, #25
 8007b24:	d5fb      	bpl.n	8007b1e <_printf_i+0xba>
 8007b26:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007b2a:	2e00      	cmp	r6, #0
 8007b2c:	da03      	bge.n	8007b36 <_printf_i+0xd2>
 8007b2e:	232d      	movs	r3, #45	; 0x2d
 8007b30:	4276      	negs	r6, r6
 8007b32:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b36:	485a      	ldr	r0, [pc, #360]	; (8007ca0 <_printf_i+0x23c>)
 8007b38:	230a      	movs	r3, #10
 8007b3a:	e012      	b.n	8007b62 <_printf_i+0xfe>
 8007b3c:	682b      	ldr	r3, [r5, #0]
 8007b3e:	6820      	ldr	r0, [r4, #0]
 8007b40:	1d19      	adds	r1, r3, #4
 8007b42:	6029      	str	r1, [r5, #0]
 8007b44:	0605      	lsls	r5, r0, #24
 8007b46:	d501      	bpl.n	8007b4c <_printf_i+0xe8>
 8007b48:	681e      	ldr	r6, [r3, #0]
 8007b4a:	e002      	b.n	8007b52 <_printf_i+0xee>
 8007b4c:	0641      	lsls	r1, r0, #25
 8007b4e:	d5fb      	bpl.n	8007b48 <_printf_i+0xe4>
 8007b50:	881e      	ldrh	r6, [r3, #0]
 8007b52:	4853      	ldr	r0, [pc, #332]	; (8007ca0 <_printf_i+0x23c>)
 8007b54:	2f6f      	cmp	r7, #111	; 0x6f
 8007b56:	bf0c      	ite	eq
 8007b58:	2308      	moveq	r3, #8
 8007b5a:	230a      	movne	r3, #10
 8007b5c:	2100      	movs	r1, #0
 8007b5e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007b62:	6865      	ldr	r5, [r4, #4]
 8007b64:	60a5      	str	r5, [r4, #8]
 8007b66:	2d00      	cmp	r5, #0
 8007b68:	bfa2      	ittt	ge
 8007b6a:	6821      	ldrge	r1, [r4, #0]
 8007b6c:	f021 0104 	bicge.w	r1, r1, #4
 8007b70:	6021      	strge	r1, [r4, #0]
 8007b72:	b90e      	cbnz	r6, 8007b78 <_printf_i+0x114>
 8007b74:	2d00      	cmp	r5, #0
 8007b76:	d04b      	beq.n	8007c10 <_printf_i+0x1ac>
 8007b78:	4615      	mov	r5, r2
 8007b7a:	fbb6 f1f3 	udiv	r1, r6, r3
 8007b7e:	fb03 6711 	mls	r7, r3, r1, r6
 8007b82:	5dc7      	ldrb	r7, [r0, r7]
 8007b84:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007b88:	4637      	mov	r7, r6
 8007b8a:	42bb      	cmp	r3, r7
 8007b8c:	460e      	mov	r6, r1
 8007b8e:	d9f4      	bls.n	8007b7a <_printf_i+0x116>
 8007b90:	2b08      	cmp	r3, #8
 8007b92:	d10b      	bne.n	8007bac <_printf_i+0x148>
 8007b94:	6823      	ldr	r3, [r4, #0]
 8007b96:	07de      	lsls	r6, r3, #31
 8007b98:	d508      	bpl.n	8007bac <_printf_i+0x148>
 8007b9a:	6923      	ldr	r3, [r4, #16]
 8007b9c:	6861      	ldr	r1, [r4, #4]
 8007b9e:	4299      	cmp	r1, r3
 8007ba0:	bfde      	ittt	le
 8007ba2:	2330      	movle	r3, #48	; 0x30
 8007ba4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007ba8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007bac:	1b52      	subs	r2, r2, r5
 8007bae:	6122      	str	r2, [r4, #16]
 8007bb0:	f8cd a000 	str.w	sl, [sp]
 8007bb4:	464b      	mov	r3, r9
 8007bb6:	aa03      	add	r2, sp, #12
 8007bb8:	4621      	mov	r1, r4
 8007bba:	4640      	mov	r0, r8
 8007bbc:	f7ff fee4 	bl	8007988 <_printf_common>
 8007bc0:	3001      	adds	r0, #1
 8007bc2:	d14a      	bne.n	8007c5a <_printf_i+0x1f6>
 8007bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8007bc8:	b004      	add	sp, #16
 8007bca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bce:	6823      	ldr	r3, [r4, #0]
 8007bd0:	f043 0320 	orr.w	r3, r3, #32
 8007bd4:	6023      	str	r3, [r4, #0]
 8007bd6:	4833      	ldr	r0, [pc, #204]	; (8007ca4 <_printf_i+0x240>)
 8007bd8:	2778      	movs	r7, #120	; 0x78
 8007bda:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007bde:	6823      	ldr	r3, [r4, #0]
 8007be0:	6829      	ldr	r1, [r5, #0]
 8007be2:	061f      	lsls	r7, r3, #24
 8007be4:	f851 6b04 	ldr.w	r6, [r1], #4
 8007be8:	d402      	bmi.n	8007bf0 <_printf_i+0x18c>
 8007bea:	065f      	lsls	r7, r3, #25
 8007bec:	bf48      	it	mi
 8007bee:	b2b6      	uxthmi	r6, r6
 8007bf0:	07df      	lsls	r7, r3, #31
 8007bf2:	bf48      	it	mi
 8007bf4:	f043 0320 	orrmi.w	r3, r3, #32
 8007bf8:	6029      	str	r1, [r5, #0]
 8007bfa:	bf48      	it	mi
 8007bfc:	6023      	strmi	r3, [r4, #0]
 8007bfe:	b91e      	cbnz	r6, 8007c08 <_printf_i+0x1a4>
 8007c00:	6823      	ldr	r3, [r4, #0]
 8007c02:	f023 0320 	bic.w	r3, r3, #32
 8007c06:	6023      	str	r3, [r4, #0]
 8007c08:	2310      	movs	r3, #16
 8007c0a:	e7a7      	b.n	8007b5c <_printf_i+0xf8>
 8007c0c:	4824      	ldr	r0, [pc, #144]	; (8007ca0 <_printf_i+0x23c>)
 8007c0e:	e7e4      	b.n	8007bda <_printf_i+0x176>
 8007c10:	4615      	mov	r5, r2
 8007c12:	e7bd      	b.n	8007b90 <_printf_i+0x12c>
 8007c14:	682b      	ldr	r3, [r5, #0]
 8007c16:	6826      	ldr	r6, [r4, #0]
 8007c18:	6961      	ldr	r1, [r4, #20]
 8007c1a:	1d18      	adds	r0, r3, #4
 8007c1c:	6028      	str	r0, [r5, #0]
 8007c1e:	0635      	lsls	r5, r6, #24
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	d501      	bpl.n	8007c28 <_printf_i+0x1c4>
 8007c24:	6019      	str	r1, [r3, #0]
 8007c26:	e002      	b.n	8007c2e <_printf_i+0x1ca>
 8007c28:	0670      	lsls	r0, r6, #25
 8007c2a:	d5fb      	bpl.n	8007c24 <_printf_i+0x1c0>
 8007c2c:	8019      	strh	r1, [r3, #0]
 8007c2e:	2300      	movs	r3, #0
 8007c30:	6123      	str	r3, [r4, #16]
 8007c32:	4615      	mov	r5, r2
 8007c34:	e7bc      	b.n	8007bb0 <_printf_i+0x14c>
 8007c36:	682b      	ldr	r3, [r5, #0]
 8007c38:	1d1a      	adds	r2, r3, #4
 8007c3a:	602a      	str	r2, [r5, #0]
 8007c3c:	681d      	ldr	r5, [r3, #0]
 8007c3e:	6862      	ldr	r2, [r4, #4]
 8007c40:	2100      	movs	r1, #0
 8007c42:	4628      	mov	r0, r5
 8007c44:	f7f8 fae4 	bl	8000210 <memchr>
 8007c48:	b108      	cbz	r0, 8007c4e <_printf_i+0x1ea>
 8007c4a:	1b40      	subs	r0, r0, r5
 8007c4c:	6060      	str	r0, [r4, #4]
 8007c4e:	6863      	ldr	r3, [r4, #4]
 8007c50:	6123      	str	r3, [r4, #16]
 8007c52:	2300      	movs	r3, #0
 8007c54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c58:	e7aa      	b.n	8007bb0 <_printf_i+0x14c>
 8007c5a:	6923      	ldr	r3, [r4, #16]
 8007c5c:	462a      	mov	r2, r5
 8007c5e:	4649      	mov	r1, r9
 8007c60:	4640      	mov	r0, r8
 8007c62:	47d0      	blx	sl
 8007c64:	3001      	adds	r0, #1
 8007c66:	d0ad      	beq.n	8007bc4 <_printf_i+0x160>
 8007c68:	6823      	ldr	r3, [r4, #0]
 8007c6a:	079b      	lsls	r3, r3, #30
 8007c6c:	d413      	bmi.n	8007c96 <_printf_i+0x232>
 8007c6e:	68e0      	ldr	r0, [r4, #12]
 8007c70:	9b03      	ldr	r3, [sp, #12]
 8007c72:	4298      	cmp	r0, r3
 8007c74:	bfb8      	it	lt
 8007c76:	4618      	movlt	r0, r3
 8007c78:	e7a6      	b.n	8007bc8 <_printf_i+0x164>
 8007c7a:	2301      	movs	r3, #1
 8007c7c:	4632      	mov	r2, r6
 8007c7e:	4649      	mov	r1, r9
 8007c80:	4640      	mov	r0, r8
 8007c82:	47d0      	blx	sl
 8007c84:	3001      	adds	r0, #1
 8007c86:	d09d      	beq.n	8007bc4 <_printf_i+0x160>
 8007c88:	3501      	adds	r5, #1
 8007c8a:	68e3      	ldr	r3, [r4, #12]
 8007c8c:	9903      	ldr	r1, [sp, #12]
 8007c8e:	1a5b      	subs	r3, r3, r1
 8007c90:	42ab      	cmp	r3, r5
 8007c92:	dcf2      	bgt.n	8007c7a <_printf_i+0x216>
 8007c94:	e7eb      	b.n	8007c6e <_printf_i+0x20a>
 8007c96:	2500      	movs	r5, #0
 8007c98:	f104 0619 	add.w	r6, r4, #25
 8007c9c:	e7f5      	b.n	8007c8a <_printf_i+0x226>
 8007c9e:	bf00      	nop
 8007ca0:	08008609 	.word	0x08008609
 8007ca4:	0800861a 	.word	0x0800861a

08007ca8 <__sflush_r>:
 8007ca8:	898a      	ldrh	r2, [r1, #12]
 8007caa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cae:	4605      	mov	r5, r0
 8007cb0:	0710      	lsls	r0, r2, #28
 8007cb2:	460c      	mov	r4, r1
 8007cb4:	d458      	bmi.n	8007d68 <__sflush_r+0xc0>
 8007cb6:	684b      	ldr	r3, [r1, #4]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	dc05      	bgt.n	8007cc8 <__sflush_r+0x20>
 8007cbc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	dc02      	bgt.n	8007cc8 <__sflush_r+0x20>
 8007cc2:	2000      	movs	r0, #0
 8007cc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007cc8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007cca:	2e00      	cmp	r6, #0
 8007ccc:	d0f9      	beq.n	8007cc2 <__sflush_r+0x1a>
 8007cce:	2300      	movs	r3, #0
 8007cd0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007cd4:	682f      	ldr	r7, [r5, #0]
 8007cd6:	6a21      	ldr	r1, [r4, #32]
 8007cd8:	602b      	str	r3, [r5, #0]
 8007cda:	d032      	beq.n	8007d42 <__sflush_r+0x9a>
 8007cdc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007cde:	89a3      	ldrh	r3, [r4, #12]
 8007ce0:	075a      	lsls	r2, r3, #29
 8007ce2:	d505      	bpl.n	8007cf0 <__sflush_r+0x48>
 8007ce4:	6863      	ldr	r3, [r4, #4]
 8007ce6:	1ac0      	subs	r0, r0, r3
 8007ce8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007cea:	b10b      	cbz	r3, 8007cf0 <__sflush_r+0x48>
 8007cec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007cee:	1ac0      	subs	r0, r0, r3
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	4602      	mov	r2, r0
 8007cf4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007cf6:	6a21      	ldr	r1, [r4, #32]
 8007cf8:	4628      	mov	r0, r5
 8007cfa:	47b0      	blx	r6
 8007cfc:	1c43      	adds	r3, r0, #1
 8007cfe:	89a3      	ldrh	r3, [r4, #12]
 8007d00:	d106      	bne.n	8007d10 <__sflush_r+0x68>
 8007d02:	6829      	ldr	r1, [r5, #0]
 8007d04:	291d      	cmp	r1, #29
 8007d06:	d82b      	bhi.n	8007d60 <__sflush_r+0xb8>
 8007d08:	4a29      	ldr	r2, [pc, #164]	; (8007db0 <__sflush_r+0x108>)
 8007d0a:	410a      	asrs	r2, r1
 8007d0c:	07d6      	lsls	r6, r2, #31
 8007d0e:	d427      	bmi.n	8007d60 <__sflush_r+0xb8>
 8007d10:	2200      	movs	r2, #0
 8007d12:	6062      	str	r2, [r4, #4]
 8007d14:	04d9      	lsls	r1, r3, #19
 8007d16:	6922      	ldr	r2, [r4, #16]
 8007d18:	6022      	str	r2, [r4, #0]
 8007d1a:	d504      	bpl.n	8007d26 <__sflush_r+0x7e>
 8007d1c:	1c42      	adds	r2, r0, #1
 8007d1e:	d101      	bne.n	8007d24 <__sflush_r+0x7c>
 8007d20:	682b      	ldr	r3, [r5, #0]
 8007d22:	b903      	cbnz	r3, 8007d26 <__sflush_r+0x7e>
 8007d24:	6560      	str	r0, [r4, #84]	; 0x54
 8007d26:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007d28:	602f      	str	r7, [r5, #0]
 8007d2a:	2900      	cmp	r1, #0
 8007d2c:	d0c9      	beq.n	8007cc2 <__sflush_r+0x1a>
 8007d2e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007d32:	4299      	cmp	r1, r3
 8007d34:	d002      	beq.n	8007d3c <__sflush_r+0x94>
 8007d36:	4628      	mov	r0, r5
 8007d38:	f7ff fb3e 	bl	80073b8 <_free_r>
 8007d3c:	2000      	movs	r0, #0
 8007d3e:	6360      	str	r0, [r4, #52]	; 0x34
 8007d40:	e7c0      	b.n	8007cc4 <__sflush_r+0x1c>
 8007d42:	2301      	movs	r3, #1
 8007d44:	4628      	mov	r0, r5
 8007d46:	47b0      	blx	r6
 8007d48:	1c41      	adds	r1, r0, #1
 8007d4a:	d1c8      	bne.n	8007cde <__sflush_r+0x36>
 8007d4c:	682b      	ldr	r3, [r5, #0]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d0c5      	beq.n	8007cde <__sflush_r+0x36>
 8007d52:	2b1d      	cmp	r3, #29
 8007d54:	d001      	beq.n	8007d5a <__sflush_r+0xb2>
 8007d56:	2b16      	cmp	r3, #22
 8007d58:	d101      	bne.n	8007d5e <__sflush_r+0xb6>
 8007d5a:	602f      	str	r7, [r5, #0]
 8007d5c:	e7b1      	b.n	8007cc2 <__sflush_r+0x1a>
 8007d5e:	89a3      	ldrh	r3, [r4, #12]
 8007d60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d64:	81a3      	strh	r3, [r4, #12]
 8007d66:	e7ad      	b.n	8007cc4 <__sflush_r+0x1c>
 8007d68:	690f      	ldr	r7, [r1, #16]
 8007d6a:	2f00      	cmp	r7, #0
 8007d6c:	d0a9      	beq.n	8007cc2 <__sflush_r+0x1a>
 8007d6e:	0793      	lsls	r3, r2, #30
 8007d70:	680e      	ldr	r6, [r1, #0]
 8007d72:	bf08      	it	eq
 8007d74:	694b      	ldreq	r3, [r1, #20]
 8007d76:	600f      	str	r7, [r1, #0]
 8007d78:	bf18      	it	ne
 8007d7a:	2300      	movne	r3, #0
 8007d7c:	eba6 0807 	sub.w	r8, r6, r7
 8007d80:	608b      	str	r3, [r1, #8]
 8007d82:	f1b8 0f00 	cmp.w	r8, #0
 8007d86:	dd9c      	ble.n	8007cc2 <__sflush_r+0x1a>
 8007d88:	6a21      	ldr	r1, [r4, #32]
 8007d8a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007d8c:	4643      	mov	r3, r8
 8007d8e:	463a      	mov	r2, r7
 8007d90:	4628      	mov	r0, r5
 8007d92:	47b0      	blx	r6
 8007d94:	2800      	cmp	r0, #0
 8007d96:	dc06      	bgt.n	8007da6 <__sflush_r+0xfe>
 8007d98:	89a3      	ldrh	r3, [r4, #12]
 8007d9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d9e:	81a3      	strh	r3, [r4, #12]
 8007da0:	f04f 30ff 	mov.w	r0, #4294967295
 8007da4:	e78e      	b.n	8007cc4 <__sflush_r+0x1c>
 8007da6:	4407      	add	r7, r0
 8007da8:	eba8 0800 	sub.w	r8, r8, r0
 8007dac:	e7e9      	b.n	8007d82 <__sflush_r+0xda>
 8007dae:	bf00      	nop
 8007db0:	dfbffffe 	.word	0xdfbffffe

08007db4 <_fflush_r>:
 8007db4:	b538      	push	{r3, r4, r5, lr}
 8007db6:	690b      	ldr	r3, [r1, #16]
 8007db8:	4605      	mov	r5, r0
 8007dba:	460c      	mov	r4, r1
 8007dbc:	b913      	cbnz	r3, 8007dc4 <_fflush_r+0x10>
 8007dbe:	2500      	movs	r5, #0
 8007dc0:	4628      	mov	r0, r5
 8007dc2:	bd38      	pop	{r3, r4, r5, pc}
 8007dc4:	b118      	cbz	r0, 8007dce <_fflush_r+0x1a>
 8007dc6:	6a03      	ldr	r3, [r0, #32]
 8007dc8:	b90b      	cbnz	r3, 8007dce <_fflush_r+0x1a>
 8007dca:	f7ff f8ab 	bl	8006f24 <__sinit>
 8007dce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d0f3      	beq.n	8007dbe <_fflush_r+0xa>
 8007dd6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007dd8:	07d0      	lsls	r0, r2, #31
 8007dda:	d404      	bmi.n	8007de6 <_fflush_r+0x32>
 8007ddc:	0599      	lsls	r1, r3, #22
 8007dde:	d402      	bmi.n	8007de6 <_fflush_r+0x32>
 8007de0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007de2:	f7ff fad9 	bl	8007398 <__retarget_lock_acquire_recursive>
 8007de6:	4628      	mov	r0, r5
 8007de8:	4621      	mov	r1, r4
 8007dea:	f7ff ff5d 	bl	8007ca8 <__sflush_r>
 8007dee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007df0:	07da      	lsls	r2, r3, #31
 8007df2:	4605      	mov	r5, r0
 8007df4:	d4e4      	bmi.n	8007dc0 <_fflush_r+0xc>
 8007df6:	89a3      	ldrh	r3, [r4, #12]
 8007df8:	059b      	lsls	r3, r3, #22
 8007dfa:	d4e1      	bmi.n	8007dc0 <_fflush_r+0xc>
 8007dfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007dfe:	f7ff facc 	bl	800739a <__retarget_lock_release_recursive>
 8007e02:	e7dd      	b.n	8007dc0 <_fflush_r+0xc>

08007e04 <__swhatbuf_r>:
 8007e04:	b570      	push	{r4, r5, r6, lr}
 8007e06:	460c      	mov	r4, r1
 8007e08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e0c:	2900      	cmp	r1, #0
 8007e0e:	b096      	sub	sp, #88	; 0x58
 8007e10:	4615      	mov	r5, r2
 8007e12:	461e      	mov	r6, r3
 8007e14:	da0d      	bge.n	8007e32 <__swhatbuf_r+0x2e>
 8007e16:	89a3      	ldrh	r3, [r4, #12]
 8007e18:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007e1c:	f04f 0100 	mov.w	r1, #0
 8007e20:	bf0c      	ite	eq
 8007e22:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007e26:	2340      	movne	r3, #64	; 0x40
 8007e28:	2000      	movs	r0, #0
 8007e2a:	6031      	str	r1, [r6, #0]
 8007e2c:	602b      	str	r3, [r5, #0]
 8007e2e:	b016      	add	sp, #88	; 0x58
 8007e30:	bd70      	pop	{r4, r5, r6, pc}
 8007e32:	466a      	mov	r2, sp
 8007e34:	f000 f862 	bl	8007efc <_fstat_r>
 8007e38:	2800      	cmp	r0, #0
 8007e3a:	dbec      	blt.n	8007e16 <__swhatbuf_r+0x12>
 8007e3c:	9901      	ldr	r1, [sp, #4]
 8007e3e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007e42:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007e46:	4259      	negs	r1, r3
 8007e48:	4159      	adcs	r1, r3
 8007e4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007e4e:	e7eb      	b.n	8007e28 <__swhatbuf_r+0x24>

08007e50 <__smakebuf_r>:
 8007e50:	898b      	ldrh	r3, [r1, #12]
 8007e52:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007e54:	079d      	lsls	r5, r3, #30
 8007e56:	4606      	mov	r6, r0
 8007e58:	460c      	mov	r4, r1
 8007e5a:	d507      	bpl.n	8007e6c <__smakebuf_r+0x1c>
 8007e5c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007e60:	6023      	str	r3, [r4, #0]
 8007e62:	6123      	str	r3, [r4, #16]
 8007e64:	2301      	movs	r3, #1
 8007e66:	6163      	str	r3, [r4, #20]
 8007e68:	b002      	add	sp, #8
 8007e6a:	bd70      	pop	{r4, r5, r6, pc}
 8007e6c:	ab01      	add	r3, sp, #4
 8007e6e:	466a      	mov	r2, sp
 8007e70:	f7ff ffc8 	bl	8007e04 <__swhatbuf_r>
 8007e74:	9900      	ldr	r1, [sp, #0]
 8007e76:	4605      	mov	r5, r0
 8007e78:	4630      	mov	r0, r6
 8007e7a:	f7fe ff4d 	bl	8006d18 <_malloc_r>
 8007e7e:	b948      	cbnz	r0, 8007e94 <__smakebuf_r+0x44>
 8007e80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e84:	059a      	lsls	r2, r3, #22
 8007e86:	d4ef      	bmi.n	8007e68 <__smakebuf_r+0x18>
 8007e88:	f023 0303 	bic.w	r3, r3, #3
 8007e8c:	f043 0302 	orr.w	r3, r3, #2
 8007e90:	81a3      	strh	r3, [r4, #12]
 8007e92:	e7e3      	b.n	8007e5c <__smakebuf_r+0xc>
 8007e94:	89a3      	ldrh	r3, [r4, #12]
 8007e96:	6020      	str	r0, [r4, #0]
 8007e98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e9c:	81a3      	strh	r3, [r4, #12]
 8007e9e:	9b00      	ldr	r3, [sp, #0]
 8007ea0:	6163      	str	r3, [r4, #20]
 8007ea2:	9b01      	ldr	r3, [sp, #4]
 8007ea4:	6120      	str	r0, [r4, #16]
 8007ea6:	b15b      	cbz	r3, 8007ec0 <__smakebuf_r+0x70>
 8007ea8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007eac:	4630      	mov	r0, r6
 8007eae:	f000 f837 	bl	8007f20 <_isatty_r>
 8007eb2:	b128      	cbz	r0, 8007ec0 <__smakebuf_r+0x70>
 8007eb4:	89a3      	ldrh	r3, [r4, #12]
 8007eb6:	f023 0303 	bic.w	r3, r3, #3
 8007eba:	f043 0301 	orr.w	r3, r3, #1
 8007ebe:	81a3      	strh	r3, [r4, #12]
 8007ec0:	89a3      	ldrh	r3, [r4, #12]
 8007ec2:	431d      	orrs	r5, r3
 8007ec4:	81a5      	strh	r5, [r4, #12]
 8007ec6:	e7cf      	b.n	8007e68 <__smakebuf_r+0x18>

08007ec8 <memmove>:
 8007ec8:	4288      	cmp	r0, r1
 8007eca:	b510      	push	{r4, lr}
 8007ecc:	eb01 0402 	add.w	r4, r1, r2
 8007ed0:	d902      	bls.n	8007ed8 <memmove+0x10>
 8007ed2:	4284      	cmp	r4, r0
 8007ed4:	4623      	mov	r3, r4
 8007ed6:	d807      	bhi.n	8007ee8 <memmove+0x20>
 8007ed8:	1e43      	subs	r3, r0, #1
 8007eda:	42a1      	cmp	r1, r4
 8007edc:	d008      	beq.n	8007ef0 <memmove+0x28>
 8007ede:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007ee2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007ee6:	e7f8      	b.n	8007eda <memmove+0x12>
 8007ee8:	4402      	add	r2, r0
 8007eea:	4601      	mov	r1, r0
 8007eec:	428a      	cmp	r2, r1
 8007eee:	d100      	bne.n	8007ef2 <memmove+0x2a>
 8007ef0:	bd10      	pop	{r4, pc}
 8007ef2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007ef6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007efa:	e7f7      	b.n	8007eec <memmove+0x24>

08007efc <_fstat_r>:
 8007efc:	b538      	push	{r3, r4, r5, lr}
 8007efe:	4d07      	ldr	r5, [pc, #28]	; (8007f1c <_fstat_r+0x20>)
 8007f00:	2300      	movs	r3, #0
 8007f02:	4604      	mov	r4, r0
 8007f04:	4608      	mov	r0, r1
 8007f06:	4611      	mov	r1, r2
 8007f08:	602b      	str	r3, [r5, #0]
 8007f0a:	f7f9 fdc1 	bl	8001a90 <_fstat>
 8007f0e:	1c43      	adds	r3, r0, #1
 8007f10:	d102      	bne.n	8007f18 <_fstat_r+0x1c>
 8007f12:	682b      	ldr	r3, [r5, #0]
 8007f14:	b103      	cbz	r3, 8007f18 <_fstat_r+0x1c>
 8007f16:	6023      	str	r3, [r4, #0]
 8007f18:	bd38      	pop	{r3, r4, r5, pc}
 8007f1a:	bf00      	nop
 8007f1c:	2001945c 	.word	0x2001945c

08007f20 <_isatty_r>:
 8007f20:	b538      	push	{r3, r4, r5, lr}
 8007f22:	4d06      	ldr	r5, [pc, #24]	; (8007f3c <_isatty_r+0x1c>)
 8007f24:	2300      	movs	r3, #0
 8007f26:	4604      	mov	r4, r0
 8007f28:	4608      	mov	r0, r1
 8007f2a:	602b      	str	r3, [r5, #0]
 8007f2c:	f7f9 fdc0 	bl	8001ab0 <_isatty>
 8007f30:	1c43      	adds	r3, r0, #1
 8007f32:	d102      	bne.n	8007f3a <_isatty_r+0x1a>
 8007f34:	682b      	ldr	r3, [r5, #0]
 8007f36:	b103      	cbz	r3, 8007f3a <_isatty_r+0x1a>
 8007f38:	6023      	str	r3, [r4, #0]
 8007f3a:	bd38      	pop	{r3, r4, r5, pc}
 8007f3c:	2001945c 	.word	0x2001945c

08007f40 <_realloc_r>:
 8007f40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f44:	4680      	mov	r8, r0
 8007f46:	4614      	mov	r4, r2
 8007f48:	460e      	mov	r6, r1
 8007f4a:	b921      	cbnz	r1, 8007f56 <_realloc_r+0x16>
 8007f4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f50:	4611      	mov	r1, r2
 8007f52:	f7fe bee1 	b.w	8006d18 <_malloc_r>
 8007f56:	b92a      	cbnz	r2, 8007f64 <_realloc_r+0x24>
 8007f58:	f7ff fa2e 	bl	80073b8 <_free_r>
 8007f5c:	4625      	mov	r5, r4
 8007f5e:	4628      	mov	r0, r5
 8007f60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f64:	f000 f81b 	bl	8007f9e <_malloc_usable_size_r>
 8007f68:	4284      	cmp	r4, r0
 8007f6a:	4607      	mov	r7, r0
 8007f6c:	d802      	bhi.n	8007f74 <_realloc_r+0x34>
 8007f6e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007f72:	d812      	bhi.n	8007f9a <_realloc_r+0x5a>
 8007f74:	4621      	mov	r1, r4
 8007f76:	4640      	mov	r0, r8
 8007f78:	f7fe fece 	bl	8006d18 <_malloc_r>
 8007f7c:	4605      	mov	r5, r0
 8007f7e:	2800      	cmp	r0, #0
 8007f80:	d0ed      	beq.n	8007f5e <_realloc_r+0x1e>
 8007f82:	42bc      	cmp	r4, r7
 8007f84:	4622      	mov	r2, r4
 8007f86:	4631      	mov	r1, r6
 8007f88:	bf28      	it	cs
 8007f8a:	463a      	movcs	r2, r7
 8007f8c:	f7ff fa06 	bl	800739c <memcpy>
 8007f90:	4631      	mov	r1, r6
 8007f92:	4640      	mov	r0, r8
 8007f94:	f7ff fa10 	bl	80073b8 <_free_r>
 8007f98:	e7e1      	b.n	8007f5e <_realloc_r+0x1e>
 8007f9a:	4635      	mov	r5, r6
 8007f9c:	e7df      	b.n	8007f5e <_realloc_r+0x1e>

08007f9e <_malloc_usable_size_r>:
 8007f9e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007fa2:	1f18      	subs	r0, r3, #4
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	bfbc      	itt	lt
 8007fa8:	580b      	ldrlt	r3, [r1, r0]
 8007faa:	18c0      	addlt	r0, r0, r3
 8007fac:	4770      	bx	lr
	...

08007fb0 <round>:
 8007fb0:	ec53 2b10 	vmov	r2, r3, d0
 8007fb4:	b570      	push	{r4, r5, r6, lr}
 8007fb6:	f3c3 540a 	ubfx	r4, r3, #20, #11
 8007fba:	f2a4 30ff 	subw	r0, r4, #1023	; 0x3ff
 8007fbe:	2813      	cmp	r0, #19
 8007fc0:	ee10 5a10 	vmov	r5, s0
 8007fc4:	4619      	mov	r1, r3
 8007fc6:	dc18      	bgt.n	8007ffa <round+0x4a>
 8007fc8:	2800      	cmp	r0, #0
 8007fca:	da09      	bge.n	8007fe0 <round+0x30>
 8007fcc:	3001      	adds	r0, #1
 8007fce:	f003 4100 	and.w	r1, r3, #2147483648	; 0x80000000
 8007fd2:	d103      	bne.n	8007fdc <round+0x2c>
 8007fd4:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 8007fd8:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8007fdc:	2300      	movs	r3, #0
 8007fde:	e02a      	b.n	8008036 <round+0x86>
 8007fe0:	4c16      	ldr	r4, [pc, #88]	; (800803c <round+0x8c>)
 8007fe2:	4104      	asrs	r4, r0
 8007fe4:	ea03 0604 	and.w	r6, r3, r4
 8007fe8:	4316      	orrs	r6, r2
 8007fea:	d011      	beq.n	8008010 <round+0x60>
 8007fec:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007ff0:	4103      	asrs	r3, r0
 8007ff2:	440b      	add	r3, r1
 8007ff4:	ea23 0104 	bic.w	r1, r3, r4
 8007ff8:	e7f0      	b.n	8007fdc <round+0x2c>
 8007ffa:	2833      	cmp	r0, #51	; 0x33
 8007ffc:	dd0b      	ble.n	8008016 <round+0x66>
 8007ffe:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8008002:	d105      	bne.n	8008010 <round+0x60>
 8008004:	ee10 0a10 	vmov	r0, s0
 8008008:	f7f8 f958 	bl	80002bc <__adddf3>
 800800c:	4602      	mov	r2, r0
 800800e:	460b      	mov	r3, r1
 8008010:	ec43 2b10 	vmov	d0, r2, r3
 8008014:	bd70      	pop	{r4, r5, r6, pc}
 8008016:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 800801a:	f04f 34ff 	mov.w	r4, #4294967295
 800801e:	40f4      	lsrs	r4, r6
 8008020:	4214      	tst	r4, r2
 8008022:	d0f5      	beq.n	8008010 <round+0x60>
 8008024:	f1c0 0033 	rsb	r0, r0, #51	; 0x33
 8008028:	2301      	movs	r3, #1
 800802a:	4083      	lsls	r3, r0
 800802c:	195b      	adds	r3, r3, r5
 800802e:	bf28      	it	cs
 8008030:	3101      	addcs	r1, #1
 8008032:	ea23 0304 	bic.w	r3, r3, r4
 8008036:	461a      	mov	r2, r3
 8008038:	460b      	mov	r3, r1
 800803a:	e7e9      	b.n	8008010 <round+0x60>
 800803c:	000fffff 	.word	0x000fffff

08008040 <_init>:
 8008040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008042:	bf00      	nop
 8008044:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008046:	bc08      	pop	{r3}
 8008048:	469e      	mov	lr, r3
 800804a:	4770      	bx	lr

0800804c <_fini>:
 800804c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800804e:	bf00      	nop
 8008050:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008052:	bc08      	pop	{r3}
 8008054:	469e      	mov	lr, r3
 8008056:	4770      	bx	lr
